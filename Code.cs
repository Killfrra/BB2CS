using System.Numerics;
using static Functions;
using static Functions_CS;
public class Script
{
    public AllCharVars charVars;
    public AllAvatarVars avatarVars;
}
public class AllCharVars
{
    public int OrbofDeceptionIsActive = 0;
    public int FoxFireIsActive = 0;
    public int SeduceIsActive = 0;
    public int TumbleIsActive = 0;
    public float VampPercent = 0;
    public float DanceTimerCooldown = 0;
    public float BaseBlockAmount = 0;
    public int MagicResistReduction = 0;
    public float StunDuration = 0;
    public float CritPerSecond = 0;
    public float LastCrit = 0;
    public float NumSecondsSinceLastCrit = 0;
    public Vector3 CastPoint;
    public int WildfireCount = 0;
    public int TooltipAmount = 0;
    public float PercentOfAttack = 0;
    public int SecondSkinArmor = 0;
    public float BarrageCounter = 0;
    public float ChargeCooldown = 0;
    public int MaliceHeal = 0;
    public int DarkWindCount = 0;
    public int RegenMod = 0;
    public float CommandBonus = 0;
    public int TotalBonus = 0;
    public int CommandReady = 0;
    public int MaxBonus = 0;
    public int ArmorAmount = 0;
    public int PassiveDuration = 0;
    public int PassiveMaxStacks = 0;
    public int Time1 = 0;
    public int Time2 = 0;
    public int Time3 = 0;
    public int Time4 = 0;
    public int Time5 = 0;
    public int Time6 = 0;
    public int Level1 = 0;
    public int Level2 = 0;
    public int Level3 = 0;
    public int Level4 = 0;
    public int Level5 = 0;
    public int Level6 = 0;
    public float CCReduction = 0;
    public float NumSwings = 0;
    public float LastHitTime = 0;
    public int UltStacks = 0;
    public float MantraTimerCooldown = 0;
    public float MagicAbsorb = 0;
    public float Count = 0;
    public int LastCast = 0;
    public bool? FirstTargetHit = null;
    public int IlluminateDamage = 0;
    public float Tally = 0;
    public float DamageBonus = 0;
    public int DrippingWoundDuration = 0;
    public int DrippingWoundMax = 0;
    public int TakedownDamage = 0;
    public int PounceDamage = 0;
    public int SwipeDamage = 0;
    public int HealAmount = 0;
    public float LastHit = 0;
    public bool? GhostAlive = null;
    public object? MissileID = null;
    public float DamageCount = 0;
    public float ArmorCount = 0;
    public int KillsPerArmor = 0;
    public int ArmorPerChampionKill = 0;
    public float NumMinionsKilled = 0;
    public int ScavengeArmorTotal = 0;
    public float PerPercent = 0;
    public float RageThreshold = 0;
    public int BonusDamage = 0;
    public int RageBonusDamage = 0;
    public int AutoattackRage = 0;
    public int DangerZone = 0;
    public int ShieldAmount = 0;
    public int FrostDuration = 0;
    public float HitCount = 0;
    public float BlockChance = 0;
    public float LastTimeExecuted = 0;
    public int AttackCounter = 0;
    public float MissileNumber = 0;
    public int TrailDuration = 0;
    public float MushroomCooldown = 0;
    public int BonusRange = 0;
    public float RegenValue = 0;
    public int DiseaseCounter = 0;
    public float DamageAmount = 0;
    public float BaseCritChance = 0;
    public float APGain = 0;
    public bool? HasRemoved = null;
    public float RegenPercent = 0;
    public int RegenTooltip = 0;
    public int LifeStealAmount = 0;
    public float ComboCounter = 0;
    public int SpectralCounter = 0;
    public float TearBonusMana = 0;
    public float BonusForItem = 0;
    public float AttackSpeedIncrease = 0;
    public int LifeTime = 0;
    //public object? BonusMR = null;
    //public object? LifeLossPercent = null;
    public object? LastLifeLossPercent = null;
    public object? LastTooltip = null;
    //public object? MiniCritChance = null;
    public float CannibalismMaxHPMod = 0;
    //public object? SecondSkin = null;
    //public object? SecondSkinMR = null;
    //public object? MundoPercent = null;
    //public object? AddSpellDamage = null;
    public float HPGain = 0;
    public bool? DoOnce = null;
    public object? JumpBuffer = null;
    public object? UltMissileID = null;
    public bool? UltFired = null;
    public int CountManaPotion = 0;
    //public object? DodgeChance = null;
    public float FlurryScalar = 0;
    public Vector3 BriggsCastPos;
    public float ArmorAmountNeg = 0;
    public bool? SpellWillStun = null;
    public object? StartingDamage = null;
    public float NumCounter = 0;
    public float IncrementGain = 0;
    public int Count = 0;
    public float StoredDamage = 0;
    public object? BallPosition = null;
    public int UltimateType = 0;
    public object? UltimateTargetPos = null;
    public bool? GhostInitialized = null;
    public int TempSkin = 0;
    public float IzunaPercent = 0;
    public object? TargetPos = null;
    //public object? Particle = null;
    public int CountHealthPotion = 0;
    public int Ticks = 0;
    public bool? Swung = null;
    public int Counter = 0;
    public object? OwnerPos = null;
    //public object? BubbleRadius = null;
    public float MagicDamageMod = 0;
    public float SpectralCount = 0;
    public bool? TeleportCancelled = null;
    public object? MISSILEID2 = null;
    public bool? HasCastR = null;
    public float SAMissileNumber = 0;
    public object? MISSILEID = null;
    public bool? HitOnce = null;
    //public object? Lhand = null;
    //public object? Rhand = null;
    public object? CurrSpeed = null;
    public float ManaToADD = 0;
    public float HealthToADD = 0;
    public float TotalDamage = 0;
    public bool? IsChampTarget = null;
    public object? NumTideStacks = null;
    public Vector3 BouncePos;
}
public class AllAvatarVars
{
    public object? SummonerCooldownBonus = null;
    public int ClairvoyanceDurationBonus = 0;
    public int ClairvoyanceCooldownBonus = 0;
    public float TeleportDelayBonus = 0;
    public int TeleportCooldownBonus = 0;
    public int PromoteCooldownBonus = 0;
    public int SmiteGoldBonus = 0;
    public int SmiteCooldownBonus = 0;
    public int RevivePreservationBonus = 0;
    public int ReviveCooldownBonus = 0;
    public float GhostMovementBonus = 0;
    public float GhostDurationBonus = 0;
    public int BoostCooldownBonus = 0;
    public int HealCooldownBonus = 0;
    public int ExhaustArmorMod = 0;
    public float ExhaustDurationBonus = 0;
    public int PromoteArmorBonus = 0;
    public int FlashCooldownBonus = 0;
    public int RallyAPMod = 0;
    public int RallyDurationBonus = 0;
    public int FortifySplashDamage = 0;
    public int ManaBonus = 0;
    public float StifleDurationBonus = 0;
    public int StifleCooldownBonus = 0;
    public object? OffensiveMastery = null;
    public bool? MasteryButcher = null;
    public int MasteryButcherAmt = 0;
    public bool? MasteryDemolitionist = null;
    public int MasteryDemolitionistAmt = 0;
    public object? DefensiveMastery = null;
    public bool? MasteryBladedArmor = null;
    public int MasteryBladedArmorAmt = 0;
    public bool? MasterySeigeCommander = null;
    public bool? MasteryInitiate = null;
    public float MasteryInitiateAmt = 0;
    public bool? MasteryBounty = null;
    public int MasteryBountyAmt = 0;
    public bool? MasteryJuggernaut = null;
    public object? UtilityMastery = null;
    public bool? Scout = null;
    public bool? MasteryScholar = null;
    public int Test = 0;
    public float LastTimeExecutedGarrison = 0;
    public bool? CanCastGarrison = null;
    public float LastTimeExecutedPromote = 0;
    public bool? CanCastPromote = null;
}
namespace Chars
{
    public class CharScriptAhri : Script
    {
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? spellName = null;
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(attacker, attacker, "AhriSoulCrusher") > 0)
            {
                spellName = GetSpellName(default);
                if(spellName == "AhriOrbofDeception")
                {
                    charVars.OrbofDeceptionIsActive = 1;
                    SpellBuffRemove(owner, "AhriPassiveParticle", (ObjAIBase)owner, 0);
                    SpellBuffAdd((ObjAIBase)owner, owner, "AhriIdleCheck", 1, 1, 0.75f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
                if(spellName == "AhriFoxFire")
                {
                    charVars.FoxFireIsActive = 1;
                }
                if(spellName == "AhriSeduce")
                {
                    charVars.SeduceIsActive = 1;
                    SpellBuffRemove(owner, "AhriPassiveParticle", (ObjAIBase)owner, 0);
                    SpellBuffAdd((ObjAIBase)owner, owner, "AhriIdleCheck", 1, 1, 0.75f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
                if(spellName == "AhriTumble")
                {
                    charVars.TumbleIsActive = 1;
                }
            }
            else
            {
                spellName = GetSpellName(default);
                if(spellName == "AhriOrbofDeception")
                {
                    SpellBuffRemove(owner, "AhriIdleParticle", (ObjAIBase)owner, 0);
                    SpellBuffAdd((ObjAIBase)owner, owner, "AhriIdleCheck", 1, 1, 0.75f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
                if(spellName == "AhriSeduce")
                {
                    SpellBuffRemove(owner, "AhriIdleParticle", (ObjAIBase)owner, 0);
                    SpellBuffAdd((ObjAIBase)owner, owner, "AhriIdleCheck", 1, 1, 0.75f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "AhriIdleParticle", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.OrbofDeceptionIsActive = 0;
            charVars.FoxFireIsActive = 0;
            charVars.SeduceIsActive = 0;
            charVars.TumbleIsActive = 0;
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptAkali : Script
    {
        public int[] effect0 = {20, 15, 10};
        object? akaliDamageVar = null;
        int tickTock = 0;
        public void OnKillUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int count = 0;
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "AkaliShadowDance") > 0)
            {
                if(target is Champion)
                {
                    count = GetBuffCountFromAll(owner, "AkaliShadowDance");
                    if(count >= 4)
                    {
                        
                    }
                    else if(count >= 3)
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "AkaliShadowDance", 4, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COUNTER, 0, true, false, false, default);
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "AkaliShadowDance", 4, 1, 0, default, BuffAddType.STACKS_AND_CONTINUE, BuffType.COUNTER, 0, true, false, false, default);
                    }
                }
            }
        }
        public void OnAssistUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int count = 0;
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "AkaliShadowDance") > 0)
            {
                if(target is Champion)
                {
                    count = GetBuffCountFromAll(owner, "AkaliShadowDance");
                    if(count >= 4)
                    {
                        
                    }
                    else if(count >= 3)
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "AkaliShadowDance", 4, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COUNTER, 0, true, false, false, default);
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "AkaliShadowDance", 4, 1, 0, default, BuffAddType.STACKS_AND_CONTINUE, BuffType.COUNTER, 0, true, false, false, default);
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "AkaliTwinDisciplines", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "IsNinja", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            this.akaliDamageVar = default;
            charVars.VampPercent = 0;
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            //object? nextBuffVars = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            this.tickTock = this.effect0[level];
            if(level > 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "AkaliShadowDance", 4, 4, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COUNTER, 0, true, false, false, default);
            }
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            //object? nextBuffVars = null;
            if(slot == 3)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "AkaliShadowDance", 4, 2, 25, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COUNTER, 0, true, false, false, default);
                }
            }
        }
    }
}
namespace Items
{
    public class CharScriptAkali : Script
    {
        public int[] effect0 = {25, 20, 15};
        float lastTime2Executed = 0;
        float akaliDamageVar = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float akaliDamage1 = 0;
            int level = 0;
            int danceTimerCooldown = 0;
            float cooldownMod = 0;
            float danceTimerCooldownNL = 0;
            if(ExecutePeriodically(1, ref this.lastTime2Executed, true))
            {
                this.akaliDamageVar = GetTotalAttackDamage(owner);
                akaliDamage1 = Math(this.akaliDamageVar, MathOp.MO_MULTIPLY, 0.6f);
                SetSpellToolTipVar(akaliDamage1, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 0)
                {
                    level = 1;
                }
                danceTimerCooldown = this.effect0[level];
                cooldownMod = GetPercentCooldownMod(owner);
                cooldownMod = Math(1, MathOp.MO_ADD, cooldownMod);
                charVars.DanceTimerCooldown = Math(danceTimerCooldown, MathOp.MO_MULTIPLY, cooldownMod);
                SetSpellToolTipVar(charVars.DanceTimerCooldown, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                danceTimerCooldownNL = Math(danceTimerCooldown, MathOp.MO_SUBTRACT, 5);
                danceTimerCooldownNL = Math(danceTimerCooldownNL, MathOp.MO_MULTIPLY, cooldownMod);
                SetSpellToolTipVar(danceTimerCooldownNL, 2, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptAlistar : Script
    {
        public float[] effect0 = {0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.8f, 0.6f, 0.6f, 0.6f, 0.6f, 0.6f, 0.6f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.BaseBlockAmount = this.effect0[level];
        }
        public void OnNearbyDeath(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float cooldown = 0;
            bool? noRender = null;
            float newCooldown = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level >= 1)
            {
                cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(cooldown > 0)
                {
                    noRender = GetNoRender(target);
                    if(noRender == false)
                    {
                        newCooldown = Math(cooldown, MathOp.MO_SUBTRACT, 2);
                        SetSlotSpellCooldownTime((ObjAIBase)owner, 2, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, newCooldown);
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, owner, "ColossalStrength", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
        }
    }
}

namespace Chars
{
    public class CharScriptAmumu : Script
    {
        class OnHitUnit_nextBuffVars
        {
            public object? MagicResistReduction = null;
        }
        public int[] effect0 = {-15, -15, -15, -15, -15, -15, -25, -25, -25, -25, -25, -25, -35, -35, -35, -35, -35, -35};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.MagicResistReduction = this.effect0[level];
        }
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            OnHitUnit_nextBuffVars nextBuffVars = new();
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    if(target is ObjAIBase)
                    {
                        if(target is BaseTurret)
                        {
                            
                        }
                        else
                        {
                            nextBuffVars.MagicResistReduction = charVars.MagicResistReduction;
                            SpellBuffAdd((ObjAIBase)attacker, target, "CursedTouch", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SHRED, 0, true, false, false, default);
                        }
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "CursedTouchMarker", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptAmumu : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            //object? nextBuffVars = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level >= 1)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Tantrum", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptAncientGolem : Script
    {
        class OnActivate_nextBuffVars
        {
            public int SpawnTime = 0;
            public int HealthPerMinute = 0;
            public float DamagePerMinute = 0;
            public float AreaDmgReduction = 0;
            public float GoldPerMinute = 0;
            public float ExpPerMinute = 0;
            public bool? UpgradeTimer = null;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpawnTime = 101;
            nextBuffVars.HealthPerMinute = 90;
            nextBuffVars.DamagePerMinute = 1.825f;
            nextBuffVars.AreaDmgReduction = 0.2f;
            nextBuffVars.GoldPerMinute = 0.324f;
            nextBuffVars.ExpPerMinute = 2.5f;
            nextBuffVars.UpgradeTimer = true;
            SpellBuffAdd((ObjAIBase)owner, owner, "GlobalMonsterBuff", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "CrestoftheAncientGolem", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            IncPermanentFlatHPPoolMod(owner, 100);
        }
    }
}

namespace Chars
{
    public class CharScriptAnivia : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "RebirthReady", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "RebirthMarker", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptAnnie : Script
    {
        public float[] effect0 = {1.75f, 1.75f, 1.75f, 1.75f, 1.75f, 1.75f, 1.75f, 1.75f, 1.75f, 1.75f, 1.75f, 1.75f, 1.75f, 1.75f, 1.75f, 1.75f, 1.75f, 1.75f};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.StunDuration = this.effect0[level];
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "Pyromania_Marker", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}


namespace Chars
{
    public class CharScriptAshe : Script
    {
        public float[] effect0 = {0.03f, 0.03f, 0.03f, 0.06f, 0.06f, 0.06f, 0.09f, 0.09f, 0.09f, 0.12f, 0.12f, 0.12f, 0.15f, 0.15f, 0.15f, 0.18f, 0.18f, 0.18f};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.CritPerSecond = this.effect0[level];
        }
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    charVars.LastCrit = GetTime();
                    charVars.NumSecondsSinceLastCrit = 0;
                }
            }
        }
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? tempName = null;
            tempName = GetSpellName(default);
            if(tempName == "EnchantedCrystalArrow")
            {
                charVars.CastPoint = GetUnitPosition(owner);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "Focus", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "BowMasterFocusDisplay", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptAshe : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float critToAdd = 0;
            critToAdd = Math(charVars.NumSecondsSinceLastCrit, MathOp.MO_MULTIPLY, charVars.CritPerSecond);
            IncFlatCritChanceMod(owner, critToAdd);
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            //object? nextBuffVars = null;
            float aD = 0;
            if(ExecutePeriodically(3, ref charVars.LastCrit, false))
            {
                charVars.NumSecondsSinceLastCrit = Math(charVars.NumSecondsSinceLastCrit, MathOp.MO_ADD, 1);
            }
            if(owner.IsDead)
            {
                
            }
            else
            {
                if(GetBuffCountFromCaster(owner, owner, "ArchersMark") > 0)
                {
                    
                }
                else
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    if(level > 0)
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "ArchersMark", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, default, default);
                    }
                }
            }
            aD = GetTotalAttackDamage(owner);
            SetSpellToolTipVar(aD, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
    }
}

namespace Chars
{
    public class CharScriptBlitzcrank : Script
    {
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? spellName = null;
            //object? nextBuffVars = null;
            spellName = GetSpellName(default);
            if(spellName == "RocketGrab")
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Root", 1, 1, 0.6f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, target, "ManaBarrierIcon", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptBlitzcrank : Script
    {
        float lastTime2Executed = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float cooldown = 0;
            //object? nextBuffVars = null;
            float blitzAP = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(!owner.IsDead)
            {
                if(level > 0)
                {
                    cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    if(cooldown <= 0)
                    {
                        if(GetBuffCountFromCaster(owner, owner, "StaticField") > 0)
                        {
                            
                        }
                        else
                        {
                            SpellBuffAdd((ObjAIBase)owner, owner, "StaticField", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        }
                    }
                }
            }
            if(ExecutePeriodically(1, ref this.lastTime2Executed, true))
            {
                blitzAP = GetFlatMagicDamageMod(owner);
                SetSpellToolTipVar(blitzAP, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptBlue_Minion_MechCannon : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            if(target is BaseTurret)
            {
                damageAmount = Math(2, MathOp.MO_MULTIPLY, damageAmount);
            }
        }
        public void OnBeingHit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            Particle? ar = null;
            //object? _ = null;
            if(damageSource == DamageSource.DAMAGE_SOURCE_ATTACK)
            {
                if(attacker is BaseTurret)
                {
                    damageAmount = Math(0.5f, MathOp.MO_MULTIPLY, damageAmount);
                    SpellEffectCreate(out ar, out _, "FeelNoPain_eff.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, owner, "PromoteMeBuff", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptBlue_Minion_MechCannon : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "TurretShield") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, owner, "TurretShield", 1, 1, 20000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptBlue_Minion_MechMelee : Script
    {
        public void OnBeingHit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            //object? _ = null;
            if(damageSource == DamageSource.DAMAGE_SOURCE_ATTACK)
            {
                if(attacker is BaseTurret)
                {
                    damageAmount = Math(0.5f, MathOp.MO_MULTIPLY, damageAmount);
                    SpellEffectCreate(out _, out _, "FeelNoPain_eff.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, owner, "TurretShield", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "StructureDamageReduction", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptBrand : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.WildfireCount = 0;
            SpellBuffAdd((ObjAIBase)owner, owner, "BrandPassive", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "BrandPassiveSound", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, true, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "BrandPassiveSound", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, true, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptCaitlyn : Script
    {
        public int[] effect0 = {8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6};
        public int[] effect1 = {6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.TooltipAmount = this.effect0[level];
        }
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            bool? isInBrush = null;
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(attacker, attacker, "IfHasBuffCheck") == 0)
            {
                if(hitResult != HitResult.HIT_Dodge)
                {
                    if(GetBuffCountFromCaster(attacker, attacker, "CaitlynHeadshot") == 0)
                    {
                        isInBrush = IsInBrush(attacker);
                        if(isInBrush == true)
                        {
                            SpellBuffAdd((ObjAIBase)attacker, attacker, "CaitlynHeadshotCount", 8, 2, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                        }
                        else
                        {
                            SpellBuffAdd((ObjAIBase)attacker, attacker, "CaitlynHeadshotCount", 8, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                        }
                    }
                    else
                    {
                        if(target is ObjAIBase)
                        {
                            if(target is BaseTurret)
                            {
                                
                            }
                            else
                            {
                                RemoveOverrideAutoAttack(owner, false);
                            }
                        }
                    }
                }
            }
        }
        public void OnPreAttack(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            int brushCount = 0;
            bool? isInBrush = null;
            int count = 0;
            //object? nextBuffVars = null;
            level = GetLevel(owner);
            brushCount = this.effect1[level];
            isInBrush = IsInBrush(attacker);
            if(isInBrush == true)
            {
                count = GetBuffCountFromCaster(owner, owner, "CaitlynHeadshotCount");
                if(count >= brushCount)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "CaitlynHeadshot", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    SpellBuffRemoveStacks(owner, owner, "CaitlynHeadshotCount", 0);
                }
            }
        }
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? spellName = null;
            //object? nextBuffVars = null;
            spellName = GetSpellName(default);
            if(spellName == "CaitlynPiltoverPeacemaker")
            {
                charVars.PercentOfAttack = 1;
                SpellBuffAdd((ObjAIBase)owner, owner, "CantAttack", 1, 1, 0.75f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "CaitlynHeadshotPassive", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptCaitlyn : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float bonusAD = 0;
            bonusAD = GetFlatPhysicalDamageMod(owner);
            bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 2);
            SetSpellToolTipVar(bonusAD, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
    }
}

namespace Chars
{
    public class CharScriptNidalee_Spear : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SetTargetable(owner, default);
        }
    }
}

namespace Chars
{
    public class CharScriptCassiopeia : Script
    {
        class OnSpellCast_spellVars
        {
            //public object? DoesntTriggerSpellCasts = null;
        }
        Particle? particle = null;
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnSpellCast_spellVars spellVars = new();
            //object? nextBuffVars = null;
            //object? _ = null;
            if(spellVars.DoesntTriggerSpellCasts == false)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "CassiopeiaDeadlyCadence", 5, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
                SpellEffectCreate(out this.particle, out _, "CassDeadlyCadence_buf.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, attacker, false, attacker, "root", default, attacker, default, default, false, default, default, default, default, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            charVars.SecondSkinArmor = 11;
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "CassiopeiaDeathParticle", (ObjAIBase)owner, default);
        }
    }
}
namespace Items
{
    public class CharScriptCassiopeia : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(0.4f, ref this.lastTimeExecuted, false))
            {
                if(owner.IsDead)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "CassiopeiaDeathParticle", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                }
                else
                {
                    if(GetBuffCountFromCaster(owner, owner, "CassiopeiaDeathParticle") > 0)
                    {
                        SpellBuffRemove(owner, "CassiopeiaDeathParticle", (ObjAIBase)owner, default);
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptChaosTurretGiant : Script
    {
        class OnActivate_nextBuffVars
        {
            public float StartDecay = 0;
            public int BonusHealth = 0;
            public int BubbleSize = 0;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            nextBuffVars.StartDecay = 1200.1f;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretPreBonus", 1, 1, 960, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 960, default, default, default, default);
            nextBuffVars.BonusHealth = 250;
            nextBuffVars.BubbleSize = 800;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonusHealth", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretChampionDelta", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 10, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretAssistManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretDamageManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
            SetDodgePiercing(owner, true);
        }
    }
}
namespace Items
{
    public class CharScriptChaosTurretGiant : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPercentArmorPenetrationMod(owner, 0.2f);
        }
    }
}

namespace Chars
{
    public class CharScriptChaosTurretNormal : Script
    {
        class OnActivate_nextBuffVars
        {
            public int BonusHealth = 0;
            public int BubbleSize = 0;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonus", 1, 1, 2280.1f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 60, default, default, default, default);
            nextBuffVars.BonusHealth = 125;
            nextBuffVars.BubbleSize = 1000;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonusHealth", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretChampionDelta", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 10, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretAssistManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretDamageManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
            SetDodgePiercing(owner, true);
        }
    }
}
namespace Items
{
    public class CharScriptChaosTurretNormal : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPercentArmorPenetrationMod(owner, 0.2f);
        }
    }
}

namespace Chars
{
    public class CharScriptChaosTurretShrine : Script
    {
        class OnActivate_nextBuffVars
        {
            public int BonusHealth = 0;
            public int BubbleSize = 0;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonus", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 60, default, default, default, default);
            nextBuffVars.BonusHealth = 0;
            nextBuffVars.BubbleSize = 1600;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonusHealth", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
        }
    }
}

namespace Chars
{
    public class CharScriptChaosTurretTutorial : Script
    {
        public void OnPreDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            float curHealth = 0;
            float damageAmount = 0;
            //object? dAMAGESOURCE_RAW = null;
            curHealth = GetHealth(target);
            if(damageAmount >= curHealth)
            {
                if(attacker is Champion)
                {
                    
                }
                else
                {
                    if(damageSource != dAMAGESOURCE_RAW)
                    {
                        damageAmount = Math(curHealth, MathOp.MO_SUBTRACT, 1);
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretDamageManager", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
        }
    }
}

namespace Chars
{
    public class CharScriptChaosTurretWorm : Script
    {
        class OnActivate_nextBuffVars
        {
            public int BonusHealth = 0;
            public int BubbleSize = 0;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonus", 1, 1, 480.1f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 60, default, default, default, default);
            nextBuffVars.BonusHealth = 250;
            nextBuffVars.BubbleSize = 800;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonusHealth", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretChampionDelta", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 10, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretAssistManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretDamageManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
            SetDodgePiercing(owner, true);
        }
    }
}
namespace Items
{
    public class CharScriptChaosTurretWorm : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPercentArmorPenetrationMod(owner, 0.2f);
        }
    }
}

namespace Chars
{
    public class CharScriptChaosTurretWorm2 : Script
    {
        class OnActivate_nextBuffVars
        {
            public float StartDecay = 0;
            public int BonusHealth = 0;
            public int BubbleSize = 0;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            nextBuffVars.StartDecay = 660.1f;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretPreBonus", 1, 1, 420, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 420, default, default, default, default);
            nextBuffVars.BonusHealth = 250;
            nextBuffVars.BubbleSize = 800;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonusHealth", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretChampionDelta", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 10, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretAssistManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretDamageManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
            SetDodgePiercing(owner, true);
        }
    }
}
namespace Items
{
    public class CharScriptChaosTurretWorm2 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPercentArmorPenetrationMod(owner, 0.2f);
        }
    }
}

namespace Chars
{
    public class CharScriptChogath : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            Vector3 castPosition;
            int level = 0;
            if(GetBuffCountFromCaster(owner, owner, "VorpalSpikes") > 0)
            {
                castPosition = GetPointByUnitFacingOffset(owner, 550, 0);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                SpellCast((ObjAIBase)owner, target, castPosition, default, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            }
        }
        public void OnMiss(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            Vector3 castPosition;
            int level = 0;
            if(GetBuffCountFromCaster(owner, owner, "VorpalSpikes") > 0)
            {
                castPosition = GetPointByUnitFacingOffset(owner, 550, 0);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                SpellCast((ObjAIBase)owner, target, castPosition, default, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "Carnivore", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            //object? nextBuffVars = null;
            if(slot == 2)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "VorpalSpikes", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                }
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int count = 0;
            count = GetBuffCountFromCaster(owner, owner, "Feast");
            if(count == 1)
            {
                OverrideAnimation("Run", "Run1", owner);
            }
            else if(count == 2)
            {
                OverrideAnimation("Run", "Run2", owner);
            }
            else if(count == 3)
            {
                OverrideAnimation("Run", "Run3", owner);
            }
            else if(count == 4)
            {
                OverrideAnimation("Run", "Run4", owner);
            }
            else if(count == 5)
            {
                OverrideAnimation("Run", "Run5", owner);
            }
            else if(count == 6)
            {
                OverrideAnimation("Run", "Run6", owner);
            }
        }
    }
}
namespace Items
{
    public class CharScriptChogath : Script
    {
        public int[] effect0 = {0, 0, 0};
        public int[] effect1 = {300, 475, 650};
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int count = 0;
            int level = 0;
            float cooldown = 0;
            int healthPerStack = 0;
            int feastBase = 0;
            float bonusFeastHealth = 0;
            float feastHealth = 0;
            //object? unit = null;
            float targetHealth = 0;
            //object? nextBuffVars = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                count = GetBuffCountFromCaster(owner, owner, "Feast");
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level >= 1)
                {
                    cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    if(cooldown <= 0)
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1500, "AffectEnemies AffectHeroes ", default, true, (unit) => 
                        {
                            count = GetBuffCountFromCaster(owner, owner, "Feast");
                            healthPerStack = this.effect0[level];
                            feastBase = this.effect1[level];
                            bonusFeastHealth = Math(healthPerStack, MathOp.MO_MULTIPLY, count);
                            feastHealth = Math(bonusFeastHealth, MathOp.MO_ADD, feastBase);
                            targetHealth = GetHealth(unit);
                            if(feastHealth >= targetHealth)
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "FeastMarker", 1, 1, 1.1f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                            }
                        });
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptCorki : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            charVars.BarrageCounter = 0;
            SpellBuffAdd((ObjAIBase)owner, owner, "RapidReload", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 20000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            //object? nextBuffVars = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level >= 1)
            {
                SpellBuffClear(owner, "MissileBarrage");
                SpellBuffAdd((ObjAIBase)owner, owner, "MissileBarrage", 8, 8, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COUNTER, 0, true, false, false, default);
            }
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            //object? nextBuffVars = null;
            if(slot == 3)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "MissileBarrage", 8, 2, charVars.ChargeCooldown, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COUNTER, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)owner, owner, "CorkiMissileBarrageNC", 3, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                }
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptCorki : Script
    {
        float lastTimeExecuted = 0;
        float lastTime2Executed = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            int chargeCooldown = 0;
            float cooldownMod = 0;
            float totalDamage = 0;
            float baseAD = 0;
            float bonusDamage = 0;
            if(ExecutePeriodically(0.4f, ref this.lastTimeExecuted, false))
            {
                if(owner.IsDead)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "CorkiDeathParticle", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
                else
                {
                    if(GetBuffCountFromCaster(owner, owner, "CorkiDeathParticle") > 0)
                    {
                        SpellBuffRemove(owner, "CorkiDeathParticle", (ObjAIBase)owner, 0);
                    }
                }
            }
            if(ExecutePeriodically(2, ref this.lastTime2Executed, true))
            {
                chargeCooldown = 10;
                cooldownMod = GetPercentCooldownMod(owner);
                cooldownMod = Math(1, MathOp.MO_ADD, cooldownMod);
                charVars.ChargeCooldown = Math(chargeCooldown, MathOp.MO_MULTIPLY, cooldownMod);
                SetSpellToolTipVar(charVars.ChargeCooldown, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                totalDamage = GetTotalAttackDamage(owner);
                baseAD = GetBaseAttackDamage(owner);
                bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseAD);
                bonusDamage = Math(0.2f, MathOp.MO_MULTIPLY, bonusDamage);
                bonusDamage = Math(2, MathOp.MO_MULTIPLY, bonusDamage);
                SetSpellToolTipVar(bonusDamage, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptDrMundo : Script
    {
        public int[] effect0 = {-50, -60, -70, -80, -90};
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? name = null;
            int level = 0;
            int healthCost = 0;
            name = GetSpellName(default);
            if(name == "InfectedCleaverMissile")
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                healthCost = this.effect0[level];
                IncHealth(owner, healthCost, owner);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "Nevershade", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptDragon : Script
    {
        class OnHitUnit_nextBuffVars
        {
            public int TickDamage = 0;
            public float AttackSpeedMod = 0;
        }
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            OnHitUnit_nextBuffVars nextBuffVars = new();
            nextBuffVars.TickDamage = 15;
            nextBuffVars.AttackSpeedMod = -0.2f;
            SpellBuffAdd((ObjAIBase)attacker, target, "DragonBurning", 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.DAMAGE, 0, true, false, false, default);
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, target, "ResistantSkinDragon", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptDragon : Script
    {
        class UpdateSelfBuffStats_nextBuffVars
        {
            public int HPPerLevel = 0;
        }
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffStats_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "HPByPlayerLevel") > 0)
            {
                
            }
            else
            {
                nextBuffVars.HPPerLevel = 220;
                SpellBuffAdd((ObjAIBase)owner, owner, "HPByPlayerLevel", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptEvelynn : Script
    {
        public int[] effect0 = {150, 225, 300};
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "SilentKiller", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            if(slot == 3)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                charVars.MaliceHeal = this.effect0[level];
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptEzreal : Script
    {
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? spellName = null;
            //object? nextBuffVars = null;
            spellName = GetSpellName(default);
            if(spellName == "EzrealTrueshotBarrage")
            {
                charVars.PercentOfAttack = 1;
                SpellBuffAdd((ObjAIBase)owner, owner, "CantAttack", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.CastPoint = 1;
            SpellBuffAdd((ObjAIBase)owner, owner, "EzrealCyberSkinSound", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            int ezrealSkinID = 0;
            Particle? a = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            ezrealSkinID = GetSkinID(owner);
            if(ezrealSkinID == 5)
            {
                SpellEffectCreate(out a, out _, "Ezreal_cyberezreal_revive.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, true, owner, default, default, owner, default, default, true, false, false, false, false, default, default);
            }
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            TeamId teamID;
            int ezrealSkinID = 0;
            Particle? a = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            ezrealSkinID = GetSkinID(attacker);
            if(ezrealSkinID == 5)
            {
                if(slot == 0)
                {
                    SpellEffectCreate(out a, out _, "Ezreal_cyberezreal_mysticshot.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, true, owner, default, default, owner, default, default, true, false, false, false, false, default, default);
                }
                else if(slot == 1)
                {
                    SpellEffectCreate(out a, out _, "Ezreal_cyberezreal_essenceflux.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, true, owner, default, default, owner, default, default, true, false, false, false, false, default, default);
                }
                else if(slot == 2)
                {
                    SpellEffectCreate(out a, out _, "Ezreal_cyberezreal_arcaneshift.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, true, owner, default, default, owner, default, default, true, false, false, false, false, default, default);
                }
                else if(slot == 3)
                {
                    SpellEffectCreate(out a, out _, "Ezreal_cyberezreal_trueshotbarrage.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, true, owner, default, default, owner, default, default, true, false, false, false, false, default, default);
                }
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptEzreal : Script
    {
        float lastTime2Executed = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float totalDamage = 0;
            float baseDamage = 0;
            float bonusDamage = 0;
            float spell3Display = 0;
            float aP = 0;
            float finalAP = 0;
            float baseDamage = 0;
            float attackDamage = 0;
            float cURMoveSpeed = 0;
            //object? nextBuffVars = null;
            if(ExecutePeriodically(1, ref this.lastTime2Executed, true))
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                totalDamage = GetTotalAttackDamage(owner);
                baseDamage = GetBaseAttackDamage(owner);
                bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseDamage);
                spell3Display = Math(bonusDamage, MathOp.MO_MULTIPLY, 1);
                SetSpellToolTipVar(spell3Display, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
                aP = GetFlatMagicDamageMod(owner);
                finalAP = Math(aP, MathOp.MO_MULTIPLY, 0.2f);
                baseDamage = GetTotalAttackDamage(owner);
                attackDamage = Math(1, MathOp.MO_MULTIPLY, baseDamage);
                SetSpellToolTipVar(attackDamage, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                SetSpellToolTipVar(finalAP, 2, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            }
            cURMoveSpeed = GetMovementSpeed(owner);
            if(cURMoveSpeed > 390)
            {
                if(GetBuffCountFromCaster(owner, owner, "EzrealFastRunAnim") == 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "EzrealFastRunAnim", 1, 1, 100000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
            }
            else if(cURMoveSpeed < 390)
            {
                if(GetBuffCountFromCaster(owner, owner, "EzrealFastRunAnim") > 0)
                {
                    SpellBuffRemove(owner, "EzrealFastRunAnim", (ObjAIBase)owner, 0);
                }
            }
        }
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            
        }
    }
}

namespace Chars
{
    public class CharScriptFiddlesticks : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            //object? nextBuffVars = null;
            int fiddlesticksSkinID = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            charVars.DarkWindCount = 0;
            SpellBuffAdd((ObjAIBase)owner, owner, "Paranoia", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            fiddlesticksSkinID = GetSkinID(attacker);
            if(fiddlesticksSkinID == 6)
            {
                SetSlotSpellIcon(2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, 2);
                SetSlotSpellIcon(3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, 2);
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptFiddlesticks : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? unit = null;
            //object? nextBuffVars = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                if(!owner.IsDead)
                {
                    ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "ParanoiaMissChance", false, (unit) => 
                    {
                        SpellBuffAdd((ObjAIBase)owner, unit, "ParanoiaMissChance", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.SHRED, 0, true, false, false, default);
                    });
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptFizz : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "FizzPassive", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            //object? nextBuffVars = null;
            if(slot == 1)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "FizzPassiveDisplayIcon", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UnlockAnimation(owner, true);
        }
    }
}

namespace Chars
{
    public class CharScriptGalio : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "GalioRunicSkin", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptGangplank : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            int skinID = 0;
            SpellBuffAdd((ObjAIBase)owner, owner, "Scurvy", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "IsPirate", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            skinID = GetSkinID(owner);
            if(skinID == 4)
            {
                PlayAnimation("gangplank_key", 0, owner, true, false, false);
            }
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int skinID = 0;
            skinID = GetSkinID(owner);
            if(skinID == 4)
            {
                PlayAnimation("gangplank_key", 0, owner, true, false, false);
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptGangplank : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            //object? nextBuffVars = null;
            int level2 = 0;
            float cooldown2 = 0;
            float attackDamage = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level > 0)
            {
                if(GetBuffCountFromCaster(owner, owner, "RaiseMoraleTeamBuff") == 0)
                {
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "RaiseMorale", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
            }
            level2 = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level2 > 0)
            {
                cooldown2 = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(cooldown2 > 0)
                {
                    
                }
                else
                {
                    SpellBuffAdd((ObjAIBase)attacker, owner, "PirateScurvy", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 1, true, false, false, default);
                }
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, owner, "PirateScurvy", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 1, true, false, false, default);
            }
            attackDamage = GetTotalAttackDamage(owner);
            SetSpellToolTipVar(attackDamage, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
    }
}

namespace Chars
{
    public class CharScriptGaren : Script
    {
        class OnLevelUpSpell_nextBuffVars
        {
            public float BonusArmor = 0;
            public float BonusMR = 0;
        }
        public int[] effect0 = {15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};
        public float[] effect1 = {0.5f, 0.5f, 0.5f, 0.5f, 0.5f};
        public int[] effect2 = {25, 25, 25, 25, 25};
        public float[] effect3 = {0.5f, 0.5f, 0.5f, 0.5f, 0.5f};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.RegenMod = this.effect0[level];
        }
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? name = null;
            //object? nextBuffVars = null;
            name = GetSpellName(default);
            if(name == "garenjustice")
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "GarenJusticePreCast", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "GarenRecouperateOn", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.CommandBonus = 0;
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            OnLevelUpSpell_nextBuffVars nextBuffVars = new();
            if(slot == 1)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    charVars.TotalBonus = 0;
                    charVars.CommandReady = 0;
                    nextBuffVars.BonusArmor = this.effect1[level];
                    charVars.MaxBonus = this.effect2[level];
                    nextBuffVars.BonusMR = this.effect3[level];
                    SpellBuffAdd((ObjAIBase)owner, owner, "GarenCommandKill", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
        }
    }
}
namespace Items
{
    public class CharScriptGaren : Script
    {
        float lastTime2Executed = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float totalDamage = 0;
            float baseDamage = 0;
            float bonusDamage = 0;
            float spell3Display = 0;
            if(ExecutePeriodically(1, ref this.lastTime2Executed, true))
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                totalDamage = GetTotalAttackDamage(owner);
                baseDamage = GetBaseAttackDamage(owner);
                bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseDamage);
                spell3Display = Math(bonusDamage, MathOp.MO_MULTIPLY, 1.4f);
                SetSpellToolTipVar(spell3Display, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptGhast : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            //object? _ = null;
            damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.43f);
            SpellEffectCreate(out _, out _, "EternalThirst_buf.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, target, default, default, false, default, default, default, default, default, default);
        }
    }
}
namespace Items
{
    public class CharScriptGhast : Script
    {
        class UpdateSelfBuffStats_nextBuffVars
        {
            public int HPPerLevel = 0;
        }
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffStats_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "CrestOfFlowingWater") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "CrestOfFlowingWater", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 100000, default, default, default, default);
            }
            if(GetBuffCountFromCaster(owner, owner, "HPByPlayerLevel") > 0)
            {
                
            }
            else
            {
                nextBuffVars.HPPerLevel = 100;
                SpellBuffAdd((ObjAIBase)owner, owner, "HPByPlayerLevel", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
            IncPercentLifeStealMod(owner, 0.5f);
            if(GetBuffCountFromCaster(owner, owner, "LifestealAttack") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, owner, "LifestealAttack", 1, 1, 9999, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, default, default, default, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptGiantWolf : Script
    {
        class OnActivate_nextBuffVars
        {
            public int SpawnTime = 0;
            public int HealthPerMinute = 0;
            public float DamagePerMinute = 0;
            public float AreaDmgReduction = 0;
            public float GoldPerMinute = 0;
            public float ExpPerMinute = 0;
            public bool? UpgradeTimer = null;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpawnTime = 101;
            nextBuffVars.HealthPerMinute = 31;
            nextBuffVars.DamagePerMinute = 0.44f;
            nextBuffVars.AreaDmgReduction = 0.2f;
            nextBuffVars.GoldPerMinute = 0.43f;
            nextBuffVars.ExpPerMinute = 1.5f;
            nextBuffVars.UpgradeTimer = false;
            SpellBuffAdd((ObjAIBase)owner, owner, "GlobalMonsterBuff", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "RegenerationRuneAura", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            IncPermanentFlatPhysicalDamageMod(owner, 2);
            IncPermanentGoldReward(owner, 6);
            IncPermanentExpReward(owner, 14);
        }
    }
}

namespace Chars
{
    public class CharScriptGolem : Script
    {
        class OnActivate_nextBuffVars
        {
            public int SpawnTime = 0;
            public int HealthPerMinute = 0;
            public float DamagePerMinute = 0;
            public float AreaDmgReduction = 0;
            public float GoldPerMinute = 0;
            public float ExpPerMinute = 0;
            public bool? UpgradeTimer = null;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpawnTime = 101;
            nextBuffVars.HealthPerMinute = 37;
            nextBuffVars.DamagePerMinute = 1.05f;
            nextBuffVars.AreaDmgReduction = 0.2f;
            nextBuffVars.GoldPerMinute = 0.38f;
            nextBuffVars.ExpPerMinute = 1.55f;
            nextBuffVars.UpgradeTimer = false;
            SpellBuffAdd((ObjAIBase)attacker, attacker, "GlobalMonsterBuff", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "RegenerationRuneAura", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            IncPermanentFlatHPPoolMod(owner, 150);
            IncPermanentFlatPhysicalDamageMod(owner, 3);
            IncPermanentGoldReward(owner, 8);
            IncPermanentExpReward(owner, 24);
        }
    }
}

namespace Chars
{
    public class CharScriptGolemOdin : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SetTargetable(owner, default);
            SetInvulnerable(owner, default);
            SetGhosted(owner, default);
            SetCanMove(owner, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinDisintegrate", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
    }
}

namespace Chars
{
    public class CharScriptGragas : Script
    {
        class OnSpellCast_spellVars
        {
            //public object? DoesntTriggerSpellCasts = null;
        }
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnSpellCast_spellVars spellVars = new();
            //object? nextBuffVars = null;
            if(spellVars.DoesntTriggerSpellCasts != true)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "GragasPassiveHeal", 1, 1, 4.3f, default, BuffAddType.RENEW_EXISTING, BuffType.HEAL, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "GragasHappyHour", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptGragas : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float attackDamage = 0;
            if(ExecutePeriodically(0.5f, ref this.lastTimeExecuted, false))
            {
                attackDamage = GetTotalAttackDamage(owner);
                attackDamage = Math(attackDamage, MathOp.MO_MULTIPLY, 0.66f);
                SetSpellToolTipVar(attackDamage, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptGraves : Script
    {
        public int[] effect0 = {1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.ArmorAmount = this.effect0[level];
        }
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            int level = 0;
            float cD = 0;
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    if(level >= 0)
                    {
                        cD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        if(cD > 0)
                        {
                            cD = Math(cD, MathOp.MO_SUBTRACT, 1.05f);
                            SetSlotSpellCooldownTimeVer2(cD, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                        }
                    }
                }
            }
        }
        public void OnPreDealDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "GravesPassiveCounter", 1, 1, 3, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffRenew(owner, "GravesPassiveGrit", 4);
        }
        public void OnPreDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "GravesPassiveCounter", 1, 1, 3, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffRenew(owner, "GravesPassiveGrit", 4);
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "GravesPassive", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            charVars.PassiveDuration = 3;
            charVars.PassiveMaxStacks = 10;
            charVars.ArmorAmount = 1;
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptGraves : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float totalAD = 0;
            float baseAD = 0;
            float bonusAD = 0;
            float aD1 = 0;
            float aD3A = 0;
            float aD3B = 0;
            if(ExecutePeriodically(5, ref this.lastTimeExecuted, false))
            {
                totalAD = GetTotalAttackDamage(owner);
                baseAD = GetBaseAttackDamage(owner);
                bonusAD = Math(totalAD, MathOp.MO_SUBTRACT, baseAD);
                aD1 = Math(bonusAD, MathOp.MO_MULTIPLY, 0.8f);
                aD3A = Math(bonusAD, MathOp.MO_MULTIPLY, 1.4f);
                aD3B = Math(bonusAD, MathOp.MO_MULTIPLY, 1.2f);
                SetSpellToolTipVar(aD1, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                SetSpellToolTipVar(aD3A, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                SetSpellToolTipVar(aD3B, 2, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptHeimerdinger : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "HeimerdingerTurretDetonation", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TechmaturgicalIcon", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            charVars.Time1 = 25000;
            charVars.Time2 = 25000;
            charVars.Time3 = 25000;
            charVars.Time4 = 25000;
            charVars.Time5 = 25000;
            charVars.Time6 = 25000;
            charVars.Level1 = 4;
            charVars.Level2 = 4;
            charVars.Level3 = 4;
            charVars.Level4 = 4;
            charVars.Level5 = 4;
            charVars.Level6 = 4;
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            //object? nextBuffVars = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level >= 1)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "HeimerdingerTurretReady", 2, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptIrelia : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "IreliaIdleParticle", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            //object? nextBuffVars = null;
            if(slot == 1)
            {
                if(GetBuffCountFromCaster(owner, owner, "IreliaHitenStyleCharged") > 0)
                {
                    
                }
                else
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "IreliaHitenStyle", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptIrelia : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float count = 0;
            //object? unit = null;
            bool? canSee = null;
            //object? nextBuffVars = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                count = 0;
                charVars.CCReduction = 1;
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1400, "AffectEnemies AffectHeroes ", default, true, (unit) => 
                {
                    canSee = CanSeeTarget(owner, unit);
                    if(canSee == true)
                    {
                        count = Math(count, MathOp.MO_ADD, 1);
                    }
                });
                SpellBuffClear(owner, "IreliaIonianDuelist");
                if(count == 1)
                {
                    charVars.CCReduction = Math(charVars.CCReduction, MathOp.MO_ADD, -0.1f);
                    SpellBuffAdd((ObjAIBase)owner, owner, "IreliaIonianDuelist", 3, 1, 1, default, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                }
                if(count == 2)
                {
                    charVars.CCReduction = Math(charVars.CCReduction, MathOp.MO_ADD, -0.25f);
                    SpellBuffAdd((ObjAIBase)owner, owner, "IreliaIonianDuelist", 3, 1, 1, default, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)owner, owner, "IreliaIonianDuelist", 3, 1, 1, default, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                }
                if(count >= 3)
                {
                    charVars.CCReduction = Math(charVars.CCReduction, MathOp.MO_ADD, -0.4f);
                    SpellBuffAdd((ObjAIBase)owner, owner, "IreliaIonianDuelist", 3, 1, 1, default, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)owner, owner, "IreliaIonianDuelist", 3, 1, 1, default, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)owner, owner, "IreliaIonianDuelist", 3, 1, 1, default, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                }
            }
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float bonusAD = 0;
            bonusAD = GetFlatPhysicalDamageMod(owner);
            bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 0.6f);
            SetSpellToolTipVar(bonusAD, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
    }
}

namespace Chars
{
    public class CharScriptJanna : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            //object? unit = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "TailwindSelf", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)owner, unit, "Tailwind", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            });
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptJanna : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float cooldown = 0;
            //object? nextBuffVars = null;
            //object? unit = null;
            if(!owner.IsDead)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level > 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "SowTheWind") == 0)
                    {
                        cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        if(cooldown <= 0)
                        {
                            SpellBuffAdd((ObjAIBase)owner, owner, "SowTheWind", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        }
                    }
                }
            }
            if(ExecutePeriodically(4, ref this.lastTimeExecuted, false))
            {
                if(!owner.IsDead)
                {
                    ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (unit) => 
                    {
                        SpellBuffAdd((ObjAIBase)owner, unit, "Tailwind", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    });
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptJarvanIV : Script
    {
        public int[] effect0 = {10, 3, 3, 3, 3};
        public float[] effect1 = {0.1f, 0.03f, 0.03f, 0.03f, 0.03f};
        public void OnPreAttack(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    if(GetBuffCountFromCaster(target, attacker, "JarvanIVMartialCadenceCheck") > 0)
                    {
                        RemoveOverrideAutoAttack(owner, true);
                    }
                    else
                    {
                        OverrideAutoAttack(0, SpellSlotType.ExtraSlots, owner, 1, true);
                    }
                }
                else
                {
                    RemoveOverrideAutoAttack(owner, true);
                }
            }
            else
            {
                RemoveOverrideAutoAttack(owner, true);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "JarvanIVMartialCadence", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            int armorBoost = 0;
            float attackSpeedBoost = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            armorBoost = this.effect0[level];
            attackSpeedBoost = this.effect1[level];
            if(slot == 2)
            {
                IncPermanentFlatArmorMod(owner, armorBoost);
                IncPermanentPercentAttackSpeedMod(owner, attackSpeedBoost);
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptJarvanIV : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float bonusAD = 0;
            float bonusAD2 = 0;
            bonusAD = GetFlatPhysicalDamageMod(owner);
            bonusAD2 = Math(bonusAD, MathOp.MO_MULTIPLY, 1.2f);
            bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 1.5f);
            SetSpellToolTipVar(bonusAD2, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            SetSpellToolTipVar(bonusAD, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
    }
}

namespace Chars
{
    public class CharScriptJax : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "JaxPassive", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.NumSwings = 0;
            charVars.LastHitTime = 0;
            charVars.UltStacks = 6;
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptJax : Script
    {
        public int[] effect0 = {25, 45, 65};
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float totalAD = 0;
            float baseAD = 0;
            float bonusAD = 0;
            float bonusAD1a = 0;
            //object? attackDamage = null;
            float bonusAD1b = 0;
            float bonusAD2 = 0;
            int level = 0;
            int bonusADAP = 0;
            float bonusAP = 0;
            float multiplier = 0;
            totalAD = GetTotalAttackDamage(owner);
            baseAD = GetBaseAttackDamage(owner);
            bonusAD = Math(totalAD, MathOp.MO_SUBTRACT, baseAD);
            bonusAD1a = Math(bonusAD, MathOp.MO_MULTIPLY, 1);
            SetSpellToolTipVar(bonusAD1a, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            bonusAD1b = Math(attackDamage, MathOp.MO_MULTIPLY, 1);
            SetSpellToolTipVar(bonusAD1b, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            bonusAD2 = Math(bonusAD, MathOp.MO_MULTIPLY, 0.8f);
            SetSpellToolTipVar(bonusAD2, 2, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level == 0)
            {
                level = 1;
            }
            bonusADAP = this.effect0[level];
            totalAD = GetTotalAttackDamage(owner);
            baseAD = GetBaseAttackDamage(owner);
            bonusAD = Math(totalAD, MathOp.MO_SUBTRACT, baseAD);
            bonusAP = GetFlatMagicDamageMod(owner);
            multiplier = 0.2f;
            bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, multiplier);
            bonusAP = Math(bonusAP, MathOp.MO_MULTIPLY, multiplier);
            bonusAP = Math(bonusAP, MathOp.MO_ADD, bonusADAP);
            bonusAD = Math(bonusAD, MathOp.MO_ADD, bonusADAP);
            SetSpellToolTipVar(bonusAP, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            SetSpellToolTipVar(bonusAD, 2, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
        }
    }
}

namespace Chars
{
    public class CharScriptKarma : Script
    {
        public int[] effect0 = {15, 14, 13, 12, 11, 10};
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int spellSlot = 0;
            string? spellName = null;
            float cooldownStat = 0;
            int baseCooldown = 0;
            float multiplier = 0;
            float newCooldown = 0;
            int level = 0;
            spellSlot = GetSpellSlot(default);
            spellName = GetSpellName(default);
            if(spellSlot == 3)
            {
                
            }
            else
            {
                if(GetBuffCountFromCaster(owner, owner, "KarmaChakra") > 0)
                {
                    if(spellName == "karmasoulshieldc")
                    {
                        cooldownStat = GetPercentCooldownMod(owner);
                        baseCooldown = 10;
                        multiplier = Math(1, MathOp.MO_ADD, cooldownStat);
                        newCooldown = Math(multiplier, MathOp.MO_MULTIPLY, baseCooldown);
                        SetSlotSpellCooldownTimeVer2(newCooldown, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                        SpellBuffRemoveStacks(owner, owner, "KarmaChakra", 1);
                    }
                    else if(spellName == "karmaspiritbondc")
                    {
                        cooldownStat = GetPercentCooldownMod(owner);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        baseCooldown = this.effect0[level];
                        multiplier = Math(1, MathOp.MO_ADD, cooldownStat);
                        newCooldown = Math(multiplier, MathOp.MO_MULTIPLY, baseCooldown);
                        SetSlotSpellCooldownTimeVer2(newCooldown, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                        SpellBuffRemoveStacks(owner, owner, "KarmaChakra", 1);
                    }
                    else if(spellName == "karmaheavenlywavec")
                    {
                        cooldownStat = GetPercentCooldownMod(owner);
                        baseCooldown = 6;
                        multiplier = Math(1, MathOp.MO_ADD, cooldownStat);
                        newCooldown = Math(multiplier, MathOp.MO_MULTIPLY, baseCooldown);
                        SetSlotSpellCooldownTimeVer2(newCooldown, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                        SpellBuffRemoveStacks(owner, owner, "KarmaChakra", 1);
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            charVars.MantraTimerCooldown = 25;
            IncSpellLevel((ObjAIBase)owner, 3, SpellSlotType.SpellSlots);
            SpellBuffAdd((ObjAIBase)owner, owner, "KarmaChakraCharge", 3, 2, charVars.MantraTimerCooldown, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COUNTER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "KarmaOneMantraParticle", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "KarmaTranscendence", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "KarmaChakraCharge", 3, 3, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COUNTER, 0, true, false, false, default);
            if(GetBuffCountFromCaster(owner, owner, "KarmaOneMantraParticle") > 0)
            {
                SpellBuffRemove(owner, "KarmaOneMantraParticle", (ObjAIBase)owner, 0);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, "KarmaTwoMantraParticle", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptKarma : Script
    {
        public int[] effect0 = {30, 30, 30, 30, 30, 30, 25, 25, 25, 25, 25, 25, 20, 20, 20, 20, 20, 20};
        float lastTime2Executed = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            int mantraTimerCooldown = 0;
            float cooldownMod = 0;
            if(ExecutePeriodically(1, ref this.lastTime2Executed, true))
            {
                level = GetLevel(owner);
                mantraTimerCooldown = this.effect0[level];
                cooldownMod = GetPercentCooldownMod(owner);
                cooldownMod = Math(1, MathOp.MO_ADD, cooldownMod);
                charVars.MantraTimerCooldown = Math(mantraTimerCooldown, MathOp.MO_MULTIPLY, cooldownMod);
                SetSpellToolTipVar(charVars.MantraTimerCooldown, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptKarthus : Script
    {
        public int[] effect0 = {20, 27, 34, 41, 48};
        public void OnKillUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            int manaToInc = 0;
            Particle? particle = null;
            //object? _ = null;
            if(GetBuffCountFromCaster(owner, owner, "Defile") > 0)
            {
                
            }
            else
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level > 0)
                {
                    manaToInc = this.effect0[level];
                    IncPAR(owner, manaToInc);
                    SpellEffectCreate(out particle, out _, "NeutralMonster_buf.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, false, false, default, default);
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "DeathDefied", 1, 1, 30000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "DeathDefied", 1, 1, 30000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptKarthus : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(0, ref this.lastTimeExecuted, true))
            {
                if(GetBuffCountFromCaster(owner, default, "YorickRAZombie") == 0)
                {
                    if(GetBuffCountFromCaster(owner, default, "YorickReviveAllySelf") == 0)
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "DeathDefied", 1, 1, 30000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptKassadin : Script
    {
        public float[] effect0 = {0.85f, 0.85f, 0.85f, 0.85f, 0.85f, 0.85f, 0.85f, 0.85f, 0.85f, 0.85f, 0.85f, 0.85f, 0.85f, 0.85f, 0.85f, 0.85f, 0.85f, 0.85f};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.MagicAbsorb = this.effect0[level];
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "VoidStone", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SealSpellSlot(2, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, SpellbookType.SPELLBOOK_CHAMPION);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptKassadin : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level2 = 0;
            //object? nextBuffVars = null;
            int level = 0;
            TeamId teamID;
            //object? unit = null;
            if(GetBuffCountFromCaster(owner, owner, "NetherBlade") > 0)
            {
                
            }
            else
            {
                level2 = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level2 > 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "NetherBlade", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
            }
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level > 0)
                {
                    if(!owner.IsDead)
                    {
                        teamID = GetTeamID(default);
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1800, "AffectEnemies AffectFriends AffectHeroes AlwaysSelf ", default, true, (unit) => 
                        {
                            if(teamID == 100)
                            {
                                SpellBuffAdd((ObjAIBase)attacker, unit, "ForcePulse", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                            }
                            else
                            {
                                SpellBuffAdd((ObjAIBase)attacker, unit, "forcepulsechaos", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                            }
                        });
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptKatarina : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, owner, "Voracity", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            //object? nextBuffVars = null;
            if(slot == 1)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "KillerInstinctBuff", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptKatarina : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float totalDamage = 0;
            float baseDamage = 0;
            float bonusDamage = 0;
            float bbBonusDamage = 0;
            float dlBonusDamage = 0;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, true))
            {
                totalDamage = GetTotalAttackDamage(owner);
                baseDamage = GetBaseAttackDamage(owner);
                bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseDamage);
                bbBonusDamage = Math(bonusDamage, MathOp.MO_MULTIPLY, 0.8f);
                SetSpellToolTipVar(bbBonusDamage, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                dlBonusDamage = Math(bonusDamage, MathOp.MO_MULTIPLY, 0.5f);
                SetSpellToolTipVar(dlBonusDamage, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptKayle : Script
    {
        public float[] effect0 = {1.06f, 1.07f, 1.08f, 1.09f, 1.1f};
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            if(target is Champion)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "JudicatorHolyFervorDebuff", 5, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.SHRED, 0, true, false, false, default);
            }
        }
        public void OnPreDealDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            int level = 0;
            float damagePercent = 0;
            float damageAmount = 0;
            if(GetBuffCountFromCaster(target, owner, "JudicatorReckoning") > 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level > 0)
                {
                    damagePercent = this.effect0[level];
                    damageAmount = Math(damagePercent, MathOp.MO_MULTIPLY, damageAmount);
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "JudicatorHolyFervor", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptKayle : Script
    {
        public int[] effect0 = {20, 30, 40, 50, 60};
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float kayleAP = 0;
            int damageMod = 0;
            float attackDamage = 0;
            float baseAD = 0;
            float totalAD = 0;
            float bonusAD = 0;
            if(ExecutePeriodically(2, ref this.lastTimeExecuted, true))
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 0)
                {
                    level = 1;
                }
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                kayleAP = GetFlatMagicDamageMod(owner);
                kayleAP = Math(0.2f, MathOp.MO_MULTIPLY, kayleAP);
                damageMod = this.effect0[level];
                attackDamage = Math(kayleAP, MathOp.MO_ADD, damageMod);
                baseAD = GetBaseAttackDamage(owner);
                totalAD = GetTotalAttackDamage(owner);
                bonusAD = Math(totalAD, MathOp.MO_SUBTRACT, baseAD);
                bonusAD = Math(1, MathOp.MO_MULTIPLY, bonusAD);
                SetSpellToolTipVar(attackDamage, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
                SetSpellToolTipVar(bonusAD, 2, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptKennen : Script
    {
        class OnResurrect_nextBuffVars
        {
            public int CounterVar = 0;
        }
        public int[] effect0 = {8, 7, 6, 5, 4};
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "IsNinja", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            charVars.Count = 0;
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            OnResurrect_nextBuffVars nextBuffVars = new();
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level >= 1)
            {
                nextBuffVars.CounterVar = this.effect0[level];
                charVars.Count = 0;
                SpellBuffAdd((ObjAIBase)owner, owner, "KennenDoubleStrikeProc", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            //object? nextBuffVars = null;
            if(slot == 1)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                SpellBuffAdd((ObjAIBase)owner, owner, "KennenDoubleStrikeProc", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptKogMaw : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "KogMawIcathianDisplay", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            PopAllCharacterData(owner);
            SpellBuffAdd((ObjAIBase)owner, owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptKogMaw : Script
    {
        float lastTime2Executed = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float totalDamage = 0;
            float baseDamage = 0;
            float bonusDamage = 0;
            float spell3Display = 0;
            //object? nextBuffVars = null;
            float cooldown = 0;
            if(ExecutePeriodically(1, ref this.lastTime2Executed, true))
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                totalDamage = GetTotalAttackDamage(owner);
                baseDamage = GetBaseAttackDamage(owner);
                bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseDamage);
                spell3Display = Math(bonusDamage, MathOp.MO_MULTIPLY, 0.5f);
                SetSpellToolTipVar(spell3Display, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                if(GetBuffCountFromCaster(owner, default, "YorickRAZombie") == 0)
                {
                    if(GetBuffCountFromCaster(owner, default, "YorickReviveAllySelf") == 0)
                    {
                        if(!owner.IsDead)
                        {
                            SpellBuffAdd((ObjAIBase)owner, owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                    }
                }
            }
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level > 0)
            {
                cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(cooldown <= 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "KogMawCausticSpittle") > 0)
                    {
                        
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "KogMawCausticSpittle", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    }
                }
            }
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level == 0)
            {
                level = 1;
            }
        }
    }
}

namespace Chars
{
    public class CharScriptKogMawDead : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, default, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, default, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, default, default, default);
        }
    }
}

namespace Chars
{
    public class CharScriptLeblanc : Script
    {
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            string? slotName = null;
            float cooldown = 0;
            if(GetBuffCountFromCaster(owner, default, "LeblancSlideM") == 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                slotName = GetSpellName(default);
                cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(slotName == "LeblancChaosOrb")
                {
                    if(level > 0)
                    {
                        SetSpell((ObjAIBase)owner, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "LeblancChaosOrbM");
                        SetSlotSpellCooldownTimeVer2(cooldown, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, true);
                        SealSpellSlot(3, SpellSlotType.SpellSlots, (ObjAIBase)owner, false, SpellbookType.SPELLBOOK_CHAMPION);
                    }
                    else
                    {
                        charVars.LastCast = 0;
                    }
                }
                else if(slotName == "LeblancSlide")
                {
                    if(level > 0)
                    {
                        SetSpell((ObjAIBase)owner, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "leblancslidem");
                        SetSlotSpellCooldownTimeVer2(cooldown, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, true);
                        SealSpellSlot(3, SpellSlotType.SpellSlots, (ObjAIBase)owner, false, SpellbookType.SPELLBOOK_CHAMPION);
                    }
                    else
                    {
                        charVars.LastCast = 1;
                    }
                }
                else if(slotName == "LeblancSoulShackle")
                {
                    if(level > 0)
                    {
                        SetSpell((ObjAIBase)owner, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "LeblancSoulShackleM");
                        SetSlotSpellCooldownTimeVer2(cooldown, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, true);
                        SealSpellSlot(3, SpellSlotType.SpellSlots, (ObjAIBase)owner, false, SpellbookType.SPELLBOOK_CHAMPION);
                    }
                    else
                    {
                        charVars.LastCast = 2;
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SealSpellSlot(3, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, SpellbookType.SPELLBOOK_CHAMPION);
            SpellBuffAdd((ObjAIBase)owner, owner, "LeblancPassive", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.LastCast = 0;
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            if(slot == 3)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    if(charVars.LastCast == 0)
                    {
                        SetSpell((ObjAIBase)owner, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "LeblancChaosOrbM");
                        SealSpellSlot(3, SpellSlotType.SpellSlots, (ObjAIBase)owner, false, SpellbookType.SPELLBOOK_CHAMPION);
                    }
                    else if(default == default)
                    {
                        SetSpell((ObjAIBase)owner, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "leblancslidem");
                        SealSpellSlot(3, SpellSlotType.SpellSlots, (ObjAIBase)owner, false, SpellbookType.SPELLBOOK_CHAMPION);
                    }
                    else
                    {
                        SetSpell((ObjAIBase)owner, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "LeblancSoulShackleM");
                        SealSpellSlot(3, SpellSlotType.SpellSlots, (ObjAIBase)owner, false, SpellbookType.SPELLBOOK_CHAMPION);
                    }
                }
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptLeeSin : Script
    {
        class OnSpellCast_spellVars
        {
            //public object? DoesntTriggerSpellCasts = null;
        }
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? spellName = null;
            //object? nextBuffVars = null;
            OnSpellCast_spellVars spellVars = new();
            spellName = GetSpellName(default);
            if(spellName == "BlindMonkRKick")
            {
                SpellBuffAdd((ObjAIBase)owner, target, "BlindMonkRRoot", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            if(spellVars.DoesntTriggerSpellCasts == true)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "BlindMonkPassive", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptLeeSin : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float bonusAD = 0;
            float bonusAD200 = 0;
            float bonusAD9 = 0;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, true))
            {
                bonusAD = GetFlatPhysicalDamageMod(owner);
                bonusAD200 = Math(bonusAD, MathOp.MO_MULTIPLY, 2);
                bonusAD9 = Math(bonusAD, MathOp.MO_MULTIPLY, 0.9f);
                SetSpellToolTipVar(bonusAD9, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                SetSpellToolTipVar(bonusAD, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                SetSpellToolTipVar(bonusAD200, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptLeona : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    if(GetBuffCountFromCaster(owner, owner, "LeonaSolarBarrierTracker") > 0)
                    {
                        if(target is ObjAIBase)
                        {
                            if(target is not BaseTurret)
                            {
                                SpellBuffAdd((ObjAIBase)attacker, target, "LeonaSunlight", 1, 1, 3.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                            }
                        }
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "LeonaSunlightPassive", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptLesserWraith : Script
    {
        class OnActivate_nextBuffVars
        {
            public int SpawnTime = 0;
            public float HealthPerMinute = 0;
            public float DamagePerMinute = 0;
            public float AreaDmgReduction = 0;
            public float GoldPerMinute = 0;
            public float ExpPerMinute = 0;
            public bool? UpgradeTimer = null;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpawnTime = 101;
            nextBuffVars.HealthPerMinute = 12.1f;
            nextBuffVars.DamagePerMinute = 0.2195f;
            nextBuffVars.AreaDmgReduction = 0.2f;
            nextBuffVars.GoldPerMinute = 0.036f;
            nextBuffVars.ExpPerMinute = 0.1064f;
            nextBuffVars.UpgradeTimer = false;
            SpellBuffAdd((ObjAIBase)owner, owner, "GlobalMonsterBuff", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            IncPermanentExpReward(owner, -11);
        }
    }
}

namespace Chars
{
    public class CharScriptLizard : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.43f);
        }
    }
}

namespace Chars
{
    public class CharScriptLizardElder : Script
    {
        class OnActivate_nextBuffVars
        {
            public int SpawnTime = 0;
            public float AreaDmgReduction = 0;
            public int HealthPerMinute = 0;
            public float DamagePerMinute = 0;
            public float GoldPerMinute = 0;
            public float ExpPerMinute = 0;
            public bool? UpgradeTimer = null;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpawnTime = 101;
            nextBuffVars.AreaDmgReduction = 0.2f;
            nextBuffVars.HealthPerMinute = 90;
            nextBuffVars.DamagePerMinute = 1.825f;
            nextBuffVars.GoldPerMinute = 0.342f;
            nextBuffVars.ExpPerMinute = 2.5f;
            nextBuffVars.UpgradeTimer = true;
            SpellBuffAdd((ObjAIBase)owner, owner, "GlobalMonsterBuff", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "BlessingoftheLizardElder", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 100000, true, false, false, default);
            IncPermanentFlatHPPoolMod(owner, 100);
        }
    }
}

namespace Chars
{
    public class CharScriptLux : Script
    {
        public int[] effect0 = {20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190};
        public int[] effect1 = {20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190};
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? spellName = null;
            spellName = GetSpellName(default);
            if(spellName == "LuxLightBinding")
            {
                charVars.FirstTargetHit = false;
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            int level = 0;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "LuxDeath", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            level = GetLevel(owner);
            charVars.IlluminateDamage = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "LuxIlluminationPassive", 1, 1, 250000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void OnLevelUp(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            level = GetLevel(owner);
            charVars.IlluminateDamage = this.effect1[level];
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "LuxDeathParticle", (ObjAIBase)owner, 0);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptMalphite : Script
    {
        public void OnPreDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "MalphiteShieldBeenHit", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "MalphiteShield", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptMalphite : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            int level = 0;
            float armorVal = 0;
            if(GetBuffCountFromCaster(owner, owner, "MalphiteShieldBeenHit") == 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "MalphiteShieldEffect", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            }
            if(ExecutePeriodically(0.5f, ref this.lastTimeExecuted, true))
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level > 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "MalphiteCleave", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
                armorVal = GetArmor(owner);
                armorVal = Math(0.5f, MathOp.MO_MULTIPLY, armorVal);
                SetSpellToolTipVar(armorVal, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptMalzahar : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "AlZaharVoidlingDetonation", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, default, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, default, default);
        }
    }
}
namespace Items
{
    public class CharScriptMalzahar : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(0.4f, ref this.lastTimeExecuted, false))
            {
                if(owner.IsDead)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "AlZaharDeathParticle", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, default, default, default);
                }
                else
                {
                    if(GetBuffCountFromCaster(owner, owner, "AlZaharDeathParticle") > 0)
                    {
                        SpellBuffRemove(owner, "AlZaharDeathParticle", (ObjAIBase)owner, default);
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptMaokai : Script
    {
        public void OnPreAttack(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float healthPercent = 0;
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    if(GetBuffCountFromCaster(owner, attacker, "MaokaiSapMagicMelee") > 0)
                    {
                        healthPercent = GetHealthPercent(owner);
                        if(healthPercent < 1)
                        {
                            OverrideAnimation("Attack", "Passive", owner);
                            OverrideAnimation("Attack2", "Passive", owner);
                            OverrideAnimation("Crit", "Passive", owner);
                        }
                        else
                        {
                            ClearOverrideAnimation("Attack", owner);
                            ClearOverrideAnimation("Attack2", owner);
                            ClearOverrideAnimation("Crit", owner);
                        }
                    }
                    else
                    {
                        ClearOverrideAnimation("Attack", owner);
                        ClearOverrideAnimation("Attack2", owner);
                        ClearOverrideAnimation("Crit", owner);
                    }
                }
                else
                {
                    ClearOverrideAnimation("Attack", owner);
                    ClearOverrideAnimation("Attack2", owner);
                    ClearOverrideAnimation("Crit", owner);
                }
            }
            else
            {
                ClearOverrideAnimation("Attack", owner);
                ClearOverrideAnimation("Attack2", owner);
                ClearOverrideAnimation("Crit", owner);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "MaokaiSapMagicPass", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            charVars.Tally = 0;
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptMaokai : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            //object? unit = null;
            //object? nextBuffVars = null;
            if(ExecutePeriodically(0.5f, ref this.lastTimeExecuted, false))
            {
                if(!owner.IsDead)
                {
                    teamID = GetTeamID(default);
                    ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1800, "AffectEnemies AffectFriends AffectHeroes AlwaysSelf ", default, true, (unit) => 
                    {
                        if(teamID == 100)
                        {
                            SpellBuffAdd((ObjAIBase)attacker, unit, "MaokaiSapMagic", 1, 1, 0.75f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                        else
                        {
                            SpellBuffAdd((ObjAIBase)attacker, unit, "MaokaiSapMagicChaos", 1, 1, 0.75f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                    });
                }
            }
        }
    }
}


namespace Chars
{
    public class CharScriptMasterYi : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            int dSCount = 0;
            if(GetBuffCountFromCaster(owner, owner, "DoubleStrikeIcon") == 0)
            {
                SpellBuffAdd((ObjAIBase)attacker, attacker, "DoubleStrike", 7, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
                dSCount = GetBuffCountFromCaster(owner, owner, "DoubleStrike");
                if(dSCount >= 7)
                {
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "DoubleStrikeIcon", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
                    SpellBuffRemoveStacks(attacker, attacker, "DoubleStrike", 7);
                    OverrideAutoAttack(0, SpellSlotType.ExtraSlots, attacker, 1, true);
                }
            }
        }
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? spellName = null;
            //object? nextBuffVars = null;
            spellName = GetSpellName(default);
            if(spellName == "AlphaStrike")
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "AlphaStrike", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "DoubleStrike", 7, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "MasterYiWujuDeactivated", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptMasterYi : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float cooldown = 0;
            //object? nextBuffVars = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level > 0)
            {
                cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(cooldown <= 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "WujuStyle") > 0)
                    {
                        
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "WujuStyle", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptMissFortune : Script
    {
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? names = null;
            //object? nextBuffVars = null;
            names = GetSpellName(default);
            if(names == "MissFortuneBulletTime")
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "MissFortuneBulletSound", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "MissFortuneStrut", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "IsPirateHunter", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            //object? nextBuffVars = null;
            if(slot == 1)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "MissFortunePassive", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptMissFortune : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float bonusAD = 0;
            bonusAD = GetFlatPhysicalDamageMod(owner);
            bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 0.45f);
            SetSpellToolTipVar(bonusAD, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
    }
}

namespace Chars
{
    public class CharScriptMonkeyKing : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "MonkeyKingCloneApplicator", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "MonkeyKingDeathParticle", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "MonkeyKingDeathParticle", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptMonkeyKing : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                if(!owner.IsDead)
                {
                    if(GetBuffCountFromCaster(owner, owner, "MonkeyKingCloneCD") == 0)
                    {
                        if(GetBuffCountFromCaster(owner, default, "MonkeyKingCloneSpellCast") == 0)
                        {
                            SpellBuffAdd((ObjAIBase)owner, owner, "MonkeyKingCloneApplicator", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptMordekaiser : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "MordekaiserIronMan", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            IncPAR(owner, -180);
        }
        public void OnLevelUp(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPermanentFlatPARPoolMod(owner, 30);
            IncPAR(owner, -30);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float temp1 = 0;
            temp1 = GetPAR(owner);
            temp1 = Math(temp1, MathOp.MO_MULTIPLY, -1);
            IncPAR(owner, temp1);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptMordekaiser : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(owner.IsDead)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "MordekaiserDeathParticle", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
            else
            {
                if(GetBuffCountFromCaster(owner, owner, "MordekaiserDeathParticle") > 0)
                {
                    SpellBuffRemove(owner, "MordekaiserDeathParticle", (ObjAIBase)owner, default);
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptMorgana : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "EmpathizeAura", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptNasus : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            Particle? num = null;
            //object? _ = null;
            if(target is ObjAIBase)
            {
                if(target is BaseTurret)
                {
                    
                }
                else
                {
                    SpellEffectCreate(out num, out _, "EternalThirst_buf.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, target, default, default, false, default, default, false, false, default, default);
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "SoulEater", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            charVars.DamageBonus = 0;
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptNasus : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float damageBonus = 0;
            level = GetLevel(owner);
            if(level >= 11)
            {
                IncPercentLifeStealMod(owner, 0.2f);
            }
            else if(level >= 6)
            {
                IncPercentLifeStealMod(owner, 0.17f);
            }
            else
            {
                IncPercentLifeStealMod(owner, 0.14f);
            }
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, true))
            {
                damageBonus = Math(0, MathOp.MO_ADD, charVars.DamageBonus);
                SetSpellToolTipVar(damageBonus, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptNidalee : Script
    {
        public int[] effect0 = {40, 70, 100};
        public int[] effect1 = {125, 175, 225};
        public int[] effect2 = {150, 225, 300};
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            charVars.DrippingWoundDuration = 10;
            charVars.DrippingWoundMax = 5;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SetSpellToolTipVar(40, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            SetSpellToolTipVar(125, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            SetSpellToolTipVar(150, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            if(slot == 3)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                charVars.TakedownDamage = this.effect0[level];
                charVars.PounceDamage = this.effect1[level];
                charVars.SwipeDamage = this.effect2[level];
                SetSpellToolTipVar(charVars.TakedownDamage, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
                SetSpellToolTipVar(charVars.PounceDamage, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
                SetSpellToolTipVar(charVars.SwipeDamage, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptNidalee : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? isInBrush = null;
            //object? nextBuffVars = null;
            int ownerLevel = 0;
            //object? unit = null;
            int unitLevel = 0;
            isInBrush = IsInBrush(attacker);
            if(isInBrush == true)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Prowl", 1, 1, 2, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            }
            if(ExecutePeriodically(5, ref this.lastTimeExecuted, true))
            {
                ownerLevel = GetLevel(owner);
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 500, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (unit) => 
                {
                    if(unit is Champion)
                    {
                        unitLevel = GetLevel(unit);
                        if(ownerLevel > unitLevel)
                        {
                            IncExp(unit, 5);
                        }
                    }
                });
            }
        }
    }
}

namespace Chars
{
    public class CharScriptNidalee_Cougar : Script
    {
        public int[] effect0 = {40, 42, 45, 47, 50, 52, 55, 57, 60, 62, 65, 67, 70, 72, 75, 77, 80, 82};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.HealAmount = this.effect0[level];
        }
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            int level = 0;
            Vector3 missileEndPosition;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level >= 1)
            {
                missileEndPosition = GetPointByUnitFacingOffset(owner, 550, 0);
                SpellCast((ObjAIBase)owner, target, missileEndPosition, default, default, 0, SpellSlotType.ExtraSlots, level, true, true, false, default, default, default);
            }
        }
        public void OnKillUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            Particle? particle = null;
            //object? _ = null;
            IncHealth(owner, charVars.HealAmount, owner);
            SpellEffectCreate(out particle, out _, "EternalThirst_buf.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "Carnivore", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SealSpellSlot(2, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            //object? unit = null;
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, default, 6, SpellSlotType.InventorySlots, 1, true, false, false, default, default, default);
            teamID = GetTeamID(default);
            if(teamID == TeamId.TEAM_BLUE)
            {
                ForEachChampion(TeamId.TEAM_BLUE, default, default, (unit) => 
                {
                    if(owner != unit)
                    {
                        IncPermanentFlatGoldPer10Mod(unit, 4);
                        IncPermanentPercentEXPBonus(unit, 0.04f);
                    }
                });
            }
            else
            {
                ForEachChampion(TeamId.TEAM_PURPLE, default, default, (unit) => 
                {
                    if(owner != unit)
                    {
                        IncPermanentFlatGoldPer10Mod(unit, 4);
                        IncPermanentPercentEXPBonus(unit, 0.04f);
                    }
                });
            }
            SetDisableAmbientGold(owner, default);
        }
        public void OnReconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            //object? unit = null;
            teamID = GetTeamID(default);
            if(teamID == TeamId.TEAM_BLUE)
            {
                ForEachChampion(TeamId.TEAM_BLUE, default, default, (unit) => 
                {
                    if(owner != unit)
                    {
                        IncPermanentFlatGoldPer10Mod(unit, -4);
                        IncPermanentPercentEXPBonus(unit, -0.04f);
                    }
                });
            }
            else
            {
                ForEachChampion(TeamId.TEAM_PURPLE, default, default, (unit) => 
                {
                    if(owner != unit)
                    {
                        IncPermanentFlatGoldPer10Mod(unit, -4);
                        IncPermanentPercentEXPBonus(unit, -0.04f);
                    }
                });
            }
            SetDisableAmbientGold(owner, default);
        }
    }
}
namespace Items
{
    public class CharScriptNidalee_Cougar : Script
    {
        public int[] effect0 = {0, 0, 0};
        public int[] effect1 = {300, 550, 800};
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            //object? nextBuffVars = null;
            int count = 0;
            float cooldown = 0;
            int healthPerStack = 0;
            int feastBase = 0;
            float bonusFeastHealth = 0;
            float feastHealth = 0;
            //object? unit = null;
            float targetHealth = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level >= 1)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "VorpalSpikes", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, default, default, default, default);
            }
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                count = GetBuffCountFromCaster(owner, owner, "Feast");
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level >= 1)
                {
                    cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    if(cooldown <= 0)
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1500, "AffectEnemies AffectHeroes ", default, default, (unit) => 
                        {
                            count = GetBuffCountFromCaster(owner, owner, "Feast");
                            healthPerStack = this.effect0[level];
                            feastBase = this.effect1[level];
                            bonusFeastHealth = Math(healthPerStack, MathOp.MO_MULTIPLY, count);
                            feastHealth = Math(bonusFeastHealth, MathOp.MO_ADD, feastBase);
                            targetHealth = GetHealth(unit);
                            if(feastHealth >= targetHealth)
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "FeastMarker", 1, 1, 1.1f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
                            }
                        });
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptNocturne : Script
    {
        public float[] effect0 = {0.2f, 0.05f, 0.05f, 0.05f, 0.05f};
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            Particle? hi = null;
            //object? _ = null;
            float curTime = 0;
            float timeSinceLastHit = 0;
            //object? nextBuffVars = null;
            if(hitResult != HitResult.HIT_Miss)
            {
                if(hitResult != HitResult.HIT_Dodge)
                {
                    if(GetBuffCountFromCaster(owner, owner, "NocturneUmbraBlades") > 0)
                    {
                        charVars.LastHit = GetGameTime();
                        if(target is ObjAIBase)
                        {
                            SpellEffectCreate(out hi, out _, "Globalhit_red.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, owner.Position, owner, default, default, true, default, default, false, default, default, default);
                        }
                    }
                    else
                    {
                        charVars.LastHit = Math(charVars.LastHit, MathOp.MO_SUBTRACT, 1);
                        curTime = GetGameTime();
                        timeSinceLastHit = Math(curTime, MathOp.MO_SUBTRACT, charVars.LastHit);
                        if(timeSinceLastHit >= 9)
                        {
                            if(GetBuffCountFromCaster(owner, owner, "NocturneUmbraBlades") == 0)
                            {
                                SpellBuffAdd((ObjAIBase)owner, owner, "NocturneUmbraBlades", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                            }
                        }
                    }
                }
            }
        }
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? slotName = null;
            float cooldown = 0;
            slotName = GetSpellName(default);
            cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(slotName == "NocturneParanoia")
            {
                SetSpell((ObjAIBase)owner, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "NocturneParanoia2");
                SetSlotSpellCooldownTimeVer2(cooldown, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                SealSpellSlot(3, SpellSlotType.SpellSlots, (ObjAIBase)owner, false, SpellbookType.SPELLBOOK_CHAMPION);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.LastHit = 0;
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            float attackSpeedBoost = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            attackSpeedBoost = this.effect0[level];
            if(slot == 1)
            {
                IncPermanentPercentAttackSpeedMod(owner, attackSpeedBoost);
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptNocturne : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float bonusAD = 0;
            float bonusAD2 = 0;
            float curTime = 0;
            float timeSinceLastHit = 0;
            //object? nextBuffVars = null;
            bonusAD = GetFlatPhysicalDamageMod(owner);
            bonusAD2 = Math(bonusAD, MathOp.MO_MULTIPLY, 1.2f);
            bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 0.75f);
            SetSpellToolTipVar(bonusAD, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            SetSpellToolTipVar(bonusAD2, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            if(!owner.IsDead)
            {
                if(GetBuffCountFromCaster(owner, owner, "NocturneUmbraBlades") == 0)
                {
                    curTime = GetGameTime();
                    timeSinceLastHit = Math(curTime, MathOp.MO_SUBTRACT, charVars.LastHit);
                    if(timeSinceLastHit >= 10)
                    {
                        if(GetBuffCountFromCaster(owner, owner, "NocturneUmbraBlades") == 0)
                        {
                            SpellBuffAdd((ObjAIBase)owner, owner, "NocturneUmbraBlades", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        }
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptNunu : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "Visionary") == 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Visionary_Counter", 8, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "Visionary_marker", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOdinBlueSuperminion : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinSuperMinion", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOdinCenterRelic : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SetMagicImmune(owner, default);
            SetPhysicalImmune(owner, default);
            SetCanAttack(owner, default);
            SetCanMove(owner, default);
            SetCanAttack(owner, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinBombBuff", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOdinChaosTurretShrine : Script
    {
        class OnActivate_nextBuffVars
        {
            public int BonusHealth = 0;
            public int BubbleSize = 0;
        }
        public void OnPreDealDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            int count = 0;
            float multiplier = 0;
            float damageAmount = 0;
            //object? nextBuffVars = null;
            count = GetBuffCountFromAll(target, "OdinTurretDamage");
            if(count > 0)
            {
                multiplier = Math(count, MathOp.MO_MULTIPLY, 0.4f);
                multiplier = Math(multiplier, MathOp.MO_ADD, 1);
                damageAmount = Math(multiplier, MathOp.MO_MULTIPLY, damageAmount);
            }
            SpellBuffAdd((ObjAIBase)owner, target, "OdinTurretDamage", 8, 1, 4, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            float range = 0;
            Vector3 ownerPosition;
            TeamId myTeam;
            Region? perceptionBubble = null;
            TeamId enemyTeam;
            Region? perceptionBubble2 = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonus", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 60, true, false, false, default);
            nextBuffVars.BonusHealth = 0;
            nextBuffVars.BubbleSize = 1600;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonusHealth", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectFriends AffectHeroes ", default, true, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)owner, unit, "CallForHelpManager", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            });
            range = GetFlatAttackRangeMod(owner);
            ownerPosition = GetUnitPosition(owner);
            myTeam = GetTeamID(default);
            SetTargetable(owner, default);
            ownerPosition = GetUnitPosition(owner);
            myTeam = GetTeamID(default);
            perceptionBubble = AddPosPerceptionBubble(myTeam, 1600, ownerPosition, 25000, owner, true);
            enemyTeam = TeamId.TEAM_BLUE;
            perceptionBubble2 = AddPosPerceptionBubble(enemyTeam, 50, ownerPosition, 25000, default, false);
            SetDodgePiercing(owner, true);
        }
    }
}

namespace Chars
{
    public class CharScriptOdinMinionGraveyardPortal : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SetMagicImmune(owner, default);
            SetPhysicalImmune(owner, default);
            SetCanAttack(owner, default);
            SetCanMove(owner, default);
            SetCanAttack(owner, default);
            SetGhosted(owner, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinMinionPortal", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOdinMinionSpawnPortal : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SetMagicImmune(owner, default);
            SetPhysicalImmune(owner, default);
            SetCanAttack(owner, default);
            SetCanMove(owner, default);
            SetCanAttack(owner, default);
            SetGhosted(owner, default);
            SetTargetable(owner, default);
            SetNoRender(owner, default);
            SetForceRenderParticles(owner, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinMinionPortal", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOdinNeutralGuardian : Script
    {
        class OnActivate_nextBuffVars
        {
            public int HPPerLevel = 0;
            public int DmgPerLevel = 0;
            public int ArmorPerLevel = 0;
            public int MR_per_level = 0;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            SetImmovable(owner, default);
            SetDodgePiercing(owner, true);
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinGuardianBuff", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinGuardianUI", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretDamageManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, true, false, false, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectEnemies AffectFriends AffectHeroes ", default, false, (unit) => 
            {
                SpellBuffAdd(unit, unit, "OdinPlayerBuff", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            });
            nextBuffVars.HPPerLevel = 75;
            nextBuffVars.DmgPerLevel = 15;
            nextBuffVars.ArmorPerLevel = 4;
            nextBuffVars.MR_per_level = 2;
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinGuardianStatsByLevel", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOdinOpeningBarrier : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SetMagicImmune(owner, default);
            SetPhysicalImmune(owner, default);
            SetCanAttack(owner, default);
            SetCanMove(owner, default);
            SetCanAttack(owner, default);
            SetForceRenderParticles(owner, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinOpeningBarrierParticle", 1, 1, 80, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOdinOrderTurretShrine : Script
    {
        class OnActivate_nextBuffVars
        {
            public int BonusHealth = 0;
            public int BubbleSize = 0;
        }
        public void OnPreDealDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            int count = 0;
            float multiplier = 0;
            float damageAmount = 0;
            //object? nextBuffVars = null;
            count = GetBuffCountFromAll(target, "OdinTurretDamage");
            if(count > 0)
            {
                multiplier = Math(count, MathOp.MO_MULTIPLY, 0.4f);
                multiplier = Math(multiplier, MathOp.MO_ADD, 1);
                damageAmount = Math(multiplier, MathOp.MO_MULTIPLY, damageAmount);
            }
            SpellBuffAdd((ObjAIBase)owner, target, "OdinTurretDamage", 8, 1, 4, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            float range = 0;
            Vector3 ownerPosition;
            TeamId myTeam;
            Region? perceptionBubble = null;
            TeamId enemyTeam;
            Region? perceptionBubble2 = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonus", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 60, true, false, false, default);
            nextBuffVars.BonusHealth = 0;
            nextBuffVars.BubbleSize = 1600;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonusHealth", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectFriends AffectHeroes ", default, true, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)owner, unit, "CallForHelpManager", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            });
            range = GetFlatAttackRangeMod(owner);
            ownerPosition = GetUnitPosition(owner);
            myTeam = GetTeamID(default);
            SetTargetable(owner, default);
            ownerPosition = GetUnitPosition(owner);
            myTeam = GetTeamID(default);
            perceptionBubble = AddPosPerceptionBubble(myTeam, 1600, ownerPosition, 25000, owner, true);
            enemyTeam = TeamId.TEAM_PURPLE;
            perceptionBubble2 = AddPosPerceptionBubble(enemyTeam, 50, ownerPosition, 25000, default, false);
            SetDodgePiercing(owner, true);
        }
    }
}

namespace Chars
{
    public class CharScriptOdinQuestBuff : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float newDuration = 0;
            //object? unit = null;
            //object? nextBuffVars = null;
            SetNoRender(owner, default);
            SetCanMove(owner, default);
            SetGhosted(owner, default);
            SetTargetable(owner, default);
            SetSuppressCallForHelp(owner, default);
            SetIgnoreCallForHelp(owner, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectFriends AffectHeroes ", default, true, (unit) => 
            {
                newDuration = 50;
                if(GetBuffCountFromCaster(unit, unit, "MonsterBuffs") > 0)
                {
                    newDuration = Math(1.2f, MathOp.MO_MULTIPLY, newDuration);
                }
                SpellBuffAdd(unit, unit, "OdinQuestBuff", 1, 1, newDuration, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            });
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 300, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectUseable ", "OdinGuardianBuff", true, (unit) => 
            {
                SpellBuffAdd(unit, unit, "OdinQuestBuffParticle", 1, 1, 50, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            });
            ApplyDamage((ObjAIBase)owner, owner, 250000, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_INTERNALRAW, 1, 0, 0, false, false, (ObjAIBase)owner);
        }
    }
}

namespace Chars
{
    public class CharScriptOdinQuestIndicator : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? unit = null;
            //object? nextBuffVars = null;
            SetMagicImmune(owner, default);
            SetPhysicalImmune(owner, default);
            SetCanAttack(owner, default);
            SetCanMove(owner, default);
            SetCanAttack(owner, default);
            SetGhosted(owner, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 300, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectUseable ", "OdinGuardianBuff", true, (unit) => 
            {
                SpellBuffAdd(unit, unit, "OdinQuestIndicator", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            });
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinQuestParticleRemover", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOdinRedSuperminion : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinSuperMinion", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOdinShieldRelic : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SetCanMove(owner, default);
            SetGhosted(owner, default);
            SetTargetable(owner, default);
            SetSuppressCallForHelp(owner, default);
            SetIgnoreCallForHelp(owner, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinShieldRelicAura", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOdinSpeedShrine : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SetInvulnerable(owner, default);
            SetRooted(owner, default);
            SetTargetable(owner, default);
            SetNoRender(owner, default);
            SetCanMove(owner, default);
            SetGhosted(owner, default);
            SetTargetable(owner, default);
            SetSuppressCallForHelp(owner, default);
            SetIgnoreCallForHelp(owner, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinSpeedShrineAura", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOdinTestCubeRender : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SetMagicImmune(owner, default);
            SetPhysicalImmune(owner, default);
            SetCanAttack(owner, default);
            SetCanMove(owner, default);
            SetCanAttack(owner, default);
            SetForceRenderParticles(owner, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinParticlePHBuff", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOdin_Blue_Minion_Caster : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinMinion", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOdin_Red_Minion_Caster : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinMinion", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOlaf : Script
    {
        class OnSpellCast_nextBuffVars
        {
            public object? FacingPos = null;
            public object? TargetPos = null;
        }
        float bonusDamage = 0;
        public void OnPreDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            float currentHealth = 0;
            float damageAmount = 0;
            if(attacker == owner)
            {
                currentHealth = GetHealth(owner);
                if(currentHealth <= damageAmount)
                {
                    damageAmount = Math(currentHealth, MathOp.MO_SUBTRACT, 1);
                }
            }
        }
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? spellName = null;
            Vector3 targetPos;
            float distance = 0;
            Vector3 facingPos;
            OnSpellCast_nextBuffVars nextBuffVars = new();
            spellName = GetSpellName(default);
            if(spellName == "OlafAxeThrow")
            {
                targetPos = GetCastSpellTargetPos();
                distance = DistanceBetweenObjectAndPoint(owner, targetPos);
                distance = Math(50, MathOp.MO_ADD, distance);
                facingPos = GetPointByUnitFacingOffset(owner, distance, 0);
                nextBuffVars.FacingPos = facingPos;
                nextBuffVars.TargetPos = targetPos;
                SpellBuffAdd((ObjAIBase)owner, owner, "OlafAxeThrow", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            float maxHealth = 0;
            float healthDamage = 0;
            SpellBuffAdd((ObjAIBase)owner, owner, "OlafBerzerkerRage", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            maxHealth = GetMaxHealth(owner);
            healthDamage = Math(maxHealth, MathOp.MO_MULTIPLY, 0.004f);
            this.bonusDamage = Math(12, MathOp.MO_ADD, healthDamage);
            SetSpellToolTipVar(this.bonusDamage, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            if(slot == 3)
            {
                IncPermanentFlatArmorPenetrationMod(owner, 10);
            }
        }
    }
}
namespace Items
{
    public class CharScriptOlaf : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float maxHealth = 0;
            float healthDamage = 0;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, true))
            {
                maxHealth = GetMaxHealth(owner);
                healthDamage = Math(maxHealth, MathOp.MO_MULTIPLY, 0.01f);
                SetSpellToolTipVar(healthDamage, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptOrderTurretAngel : Script
    {
        class OnActivate_nextBuffVars
        {
            public int BonusHealth = 0;
            public int BubbleSize = 0;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonus", 1, 1, 2280.1f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 60, default, default, default, default);
            nextBuffVars.BonusHealth = 125;
            nextBuffVars.BubbleSize = 1000;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonusHealth", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretChampionDelta", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 10, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretAssistManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretDamageManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
            SetDodgePiercing(owner, true);
        }
    }
}
namespace Items
{
    public class CharScriptOrderTurretAngel : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPercentArmorPenetrationMod(owner, 0.2f);
        }
    }
}

namespace Chars
{
    public class CharScriptOrderTurretDragon : Script
    {
        class OnActivate_nextBuffVars
        {
            public float StartDecay = 0;
            public int BonusHealth = 0;
            public int BubbleSize = 0;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            nextBuffVars.StartDecay = 1200.1f;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretPreBonus", 1, 1, 960, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 960, default, default, default, default);
            nextBuffVars.BonusHealth = 250;
            nextBuffVars.BubbleSize = 800;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonusHealth", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretChampionDelta", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 10, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretAssistManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretDamageManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
            SetDodgePiercing(owner, true);
        }
    }
}
namespace Items
{
    public class CharScriptOrderTurretDragon : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPercentArmorPenetrationMod(owner, 0.2f);
        }
    }
}

namespace Chars
{
    public class CharScriptOrderTurretNormal : Script
    {
        class OnActivate_nextBuffVars
        {
            public int BonusHealth = 0;
            public int BubbleSize = 0;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonus", 1, 1, 480.1f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 60, true, false, false, default);
            nextBuffVars.BonusHealth = 250;
            nextBuffVars.BubbleSize = 800;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonusHealth", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretChampionDelta", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 10, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretAssistManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretDamageManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, true, false, false, default);
            SetDodgePiercing(owner, true);
        }
    }
}
namespace Items
{
    public class CharScriptOrderTurretNormal : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPercentArmorPenetrationMod(owner, 0.2f);
        }
    }
}

namespace Chars
{
    public class CharScriptOrderTurretNormal2 : Script
    {
        class OnActivate_nextBuffVars
        {
            public float StartDecay = 0;
            public int BonusHealth = 0;
            public int BubbleSize = 0;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            nextBuffVars.StartDecay = 660.1f;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretPreBonus", 1, 1, 420, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 420, default, default, default, default);
            nextBuffVars.BonusHealth = 250;
            nextBuffVars.BubbleSize = 800;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretBonusHealth", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretChampionDelta", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 10, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretAssistManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretDamageManager", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
            SetDodgePiercing(owner, true);
        }
    }
}
namespace Items
{
    public class CharScriptOrderTurretNormal2 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPercentArmorPenetrationMod(owner, 0.2f);
        }
    }
}

namespace Chars
{
    public class CharScriptOrderTurretTutorial : Script
    {
        public void OnPreDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            float curHealth = 0;
            float damageAmount = 0;
            //object? dAMAGESOURCE_RAW = null;
            curHealth = GetHealth(target);
            if(damageAmount >= curHealth)
            {
                if(attacker is Champion)
                {
                    
                }
                else
                {
                    if(damageSource != dAMAGESOURCE_RAW)
                    {
                        damageAmount = Math(curHealth, MathOp.MO_SUBTRACT, 1);
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "TurretDamageManager", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 1, default, default, default, default);
        }
    }
}

namespace Chars
{
    public class CharScriptOrianna : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            bool? ghostAlive = null;
            SpellBuffAdd((ObjAIBase)attacker, owner, "YomuSpellSword", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "YomuGhostSelf", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            ghostAlive = false;
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "YomuGhostSelf", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            charVars.GhostAlive = false;
            DestroyMissile(charVars.MissileID);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            //object? nextBuffVars = null;
            if(slot == 1)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "YomuShockOrb", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptOriannaBall : Script
    {
        class OnActivate_nextBuffVars
        {
            public object? MyPosition = null;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            Champion? caster = null;
            OnActivate_nextBuffVars nextBuffVars = new();
            Vector3 myPosition;
            teamID = GetTeamID(default);
            caster = GetChampionBySkinName("Orianna", teamID);
            SpellBuffAdd(caster, owner, "OrianaGhost", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd(caster, owner, "OrianaGhostMinion", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            myPosition = GetUnitPosition(owner);
            nextBuffVars.MyPosition = myPosition;
            SpellBuffAdd((ObjAIBase)owner, caster, "OriannaBallTracker", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptPantheon : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_Aegis", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptPantheon : Script
    {
        public float[] effect0 = {0.6f, 0.6f, 0.6f, 0.6f, 0.6f};
        public float[] effect1 = {1.4f, 1.4f, 1.4f, 1.4f, 1.4f};
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float damage = 0;
            float baseDamage = 0;
            float bonusAD = 0;
            int level = 0;
            float hSS = 0;
            float hSSDamage = 0;
            //object? nextBuffVars = null;
            float spear = 0;
            float spearDamage = 0;
            damage = GetTotalAttackDamage(owner);
            baseDamage = GetBaseAttackDamage(owner);
            bonusAD = Math(damage, MathOp.MO_SUBTRACT, baseDamage);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level == 0)
            {
                level = 1;
            }
            hSS = this.effect0[level];
            hSSDamage = Math(bonusAD, MathOp.MO_MULTIPLY, hSS);
            SetSpellToolTipVar(hSSDamage, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level >= 1)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_CertainDeath", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level == 0)
            {
                level = 1;
            }
            spear = this.effect1[level];
            spearDamage = Math(bonusAD, MathOp.MO_MULTIPLY, spear);
            SetSpellToolTipVar(spearDamage, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
        }
    }
}

namespace Chars
{
    public class CharScriptPoppy : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyValiantFighter", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, default, default, default, default);
            charVars.DamageCount = 0;
            charVars.ArmorCount = 0;
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            //object? nextBuffVars = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level == 1)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "PoppyParagonManager", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptRabidWolf : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.43f);
        }
    }
}
namespace Items
{
    public class CharScriptRabidWolf : Script
    {
        class UpdateSelfBuffActions_nextBuffVars
        {
            public int HPPerLevel = 0;
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffActions_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "CrestOfNaturesFury") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "CrestOfNaturesFury", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 100000, default, default, default, default);
            }
            if(GetBuffCountFromCaster(owner, owner, "HPByPlayerLevel") > 0)
            {
                
            }
            else
            {
                nextBuffVars.HPPerLevel = 130;
                SpellBuffAdd((ObjAIBase)owner, owner, "HPByPlayerLevel", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptRammus : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "SpikedShell", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptRammus : Script
    {
        public int[] effect0 = {50, 75, 100, 125, 150};
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float armorMod = 0;
            float bonusArmor = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            level = this.effect0[level];
            armorMod = GetArmor(owner);
            bonusArmor = Math(level, MathOp.MO_ADD, armorMod);
            if(level == default)
            {
                bonusArmor = Math(bonusArmor, MathOp.MO_ADD, 50);
            }
            bonusArmor = Math(bonusArmor, MathOp.MO_MULTIPLY, 0.1f);
            SetSpellToolTipVar(bonusArmor, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
        }
    }
}

namespace Chars
{
    public class CharScriptRammusDBC : Script
    {
        class OnKillUnit_nextBuffVars
        {
            public bool? IsChampion = null;
        }
        public int[] effect0 = {6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4};
        public int[] effect1 = {1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.KillsPerArmor = this.effect0[level];
            charVars.ArmorPerChampionKill = this.effect1[level];
        }
        public void OnKillUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnKillUnit_nextBuffVars nextBuffVars = new();
            if(target is ObjAIBase)
            {
                if(target is Champion)
                {
                    nextBuffVars.IsChampion = true;
                }
                else
                {
                    nextBuffVars.IsChampion = false;
                }
                if(GetBuffCountFromCaster(owner, owner, "ScavengeArmor") > 0)
                {
                    charVars.NumMinionsKilled = Math(1, MathOp.MO_ADD, charVars.NumMinionsKilled);
                }
                else
                {
                    charVars.NumMinionsKilled = 1;
                    charVars.ScavengeArmorTotal = 0;
                }
                SpellBuffAdd((ObjAIBase)attacker, owner, "ScavengeArmor", 1, 1, 20000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, default, 6, SpellSlotType.InventorySlots, 1, true, false, false, default, default, default);
        }
    }
}

namespace Chars
{
    public class CharScriptRammusPB : Script
    {
        class OnKillUnit_nextBuffVars
        {
            public bool? IsChampion = null;
        }
        public int[] effect0 = {6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4};
        public int[] effect1 = {1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.KillsPerArmor = this.effect0[level];
            charVars.ArmorPerChampionKill = this.effect1[level];
        }
        public void OnKillUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnKillUnit_nextBuffVars nextBuffVars = new();
            if(target is ObjAIBase)
            {
                if(target is Champion)
                {
                    nextBuffVars.IsChampion = true;
                }
                else
                {
                    nextBuffVars.IsChampion = false;
                }
                if(GetBuffCountFromCaster(owner, owner, "ScavengeArmor") > 0)
                {
                    charVars.NumMinionsKilled = Math(1, MathOp.MO_ADD, charVars.NumMinionsKilled);
                }
                else
                {
                    charVars.NumMinionsKilled = 1;
                    charVars.ScavengeArmorTotal = 0;
                }
                SpellBuffAdd((ObjAIBase)attacker, owner, "ScavengeArmor", 1, 1, 20000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, default, 6, SpellSlotType.InventorySlots, 1, true, false, false, default, default, default);
        }
    }
}

namespace Chars
{
    public class CharScriptRed_Minion_MechCannon : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            if(target is BaseTurret)
            {
                damageAmount = Math(2, MathOp.MO_MULTIPLY, damageAmount);
            }
        }
        public void OnBeingHit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            Particle? ar = null;
            //object? _ = null;
            if(damageSource == DamageSource.DAMAGE_SOURCE_ATTACK)
            {
                if(attacker is BaseTurret)
                {
                    damageAmount = Math(0.5f, MathOp.MO_MULTIPLY, damageAmount);
                    SpellEffectCreate(out ar, out _, "FeelNoPain_eff.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, owner, "PromoteMeBuff", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptRed_Minion_MechCannon : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "TurretShield") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, owner, "TurretShield", 1, 1, 20000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptRed_Minion_MechMelee : Script
    {
        public void OnBeingHit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            //object? _ = null;
            if(damageSource == DamageSource.DAMAGE_SOURCE_ATTACK)
            {
                if(attacker is BaseTurret)
                {
                    damageAmount = Math(0.5f, MathOp.MO_MULTIPLY, damageAmount);
                    SpellEffectCreate(out _, out _, "FeelNoPain_eff.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, owner, "TurretShield", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "StructureDamageReduction", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptRenekton : Script
    {
        public int[] effect0 = {10, 30, 50, 70, 90};
        public int[] effect1 = {15, 45, 75, 105, 135};
        public int[] effect2 = {5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5};
        public float[] effect3 = {1.5f, 1.5f, 1.5f, 1.5f, 1.5f};
        public float[] effect4 = {2.25f, 2.25f, 2.25f, 2.25f, 2.25f};
        public int[] effect5 = {10, 30, 50, 70, 90};
        public int[] effect6 = {15, 45, 75, 105, 135};
        float bonusAttackPercentage = 0;
        float attackPercentage = 0;
        int bonusDamage = 0;
        int rageBonusDamage = 0;
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "RenektonPredator", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            IncPAR(owner, -99);
            charVars.PerPercent = 0.1f;
            this.bonusAttackPercentage = 2.25f;
            this.attackPercentage = 1.5f;
            charVars.RageThreshold = 0.5f;
            charVars.BonusDamage = this.effect0[level];
            charVars.RageBonusDamage = this.effect1[level];
        }
        public void OnLevelUp(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            level = GetLevel(owner);
            charVars.AutoattackRage = this.effect2[level];
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPAR(owner, -99);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            if(slot == 1)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                this.attackPercentage = this.effect3[level];
                this.bonusAttackPercentage = this.effect4[level];
                this.bonusDamage = this.effect5[level];
                this.rageBonusDamage = this.effect6[level];
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptRenekton : Script
    {
        float lastTime2Executed = 0;
        float renekthonDamage = 0;
        //object? attackPercentage = null;
        //object? bonusDamage = null;
        //object? bonusAttackPercentage = null;
        //object? rageBonusDamage = null;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float baseDamage = 0;
            float renektonBonusAD = 0;
            float renekthonTooltip1 = 0;
            float renekthonTooltip1b = 0;
            float renekthonTooltip3 = 0;
            float renekthonTooltip4 = 0;
            float renekthonTooltip2 = 0;
            float renekthonTooltip5 = 0;
            if(ExecutePeriodically(1, ref this.lastTime2Executed, true))
            {
                baseDamage = GetBaseAttackDamage(owner);
                this.renekthonDamage = GetTotalAttackDamage(owner);
                renektonBonusAD = Math(this.renekthonDamage, MathOp.MO_SUBTRACT, baseDamage);
                renekthonTooltip1 = Math(renektonBonusAD, MathOp.MO_MULTIPLY, 0.8f);
                SetSpellToolTipVar(renekthonTooltip1, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
                renekthonTooltip1b = Math(1.5f, MathOp.MO_MULTIPLY, renekthonTooltip1);
                SetSpellToolTipVar(renekthonTooltip1b, 2, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
                renekthonTooltip3 = Math(this.renekthonDamage, MathOp.MO_MULTIPLY, this.attackPercentage);
                renekthonTooltip3 = Math(renekthonTooltip3, MathOp.MO_ADD, this.bonusDamage);
                SetSpellToolTipVar(renekthonTooltip3, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
                renekthonTooltip4 = Math(this.renekthonDamage, MathOp.MO_MULTIPLY, this.bonusAttackPercentage);
                renekthonTooltip4 = Math(renekthonTooltip4, MathOp.MO_ADD, this.rageBonusDamage);
                SetSpellToolTipVar(renekthonTooltip4, 2, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
                renekthonTooltip2 = Math(renektonBonusAD, MathOp.MO_MULTIPLY, 0.9f);
                SetSpellToolTipVar(renekthonTooltip2, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
                renekthonTooltip5 = Math(renektonBonusAD, MathOp.MO_MULTIPLY, 1.35f);
                SetSpellToolTipVar(renekthonTooltip5, 2, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptRiven : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "RivenPassive", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPAR(owner, -100);
        }
    }
}
namespace Items
{
    public class CharScriptRiven : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float attackDamage = 0;
            float rAttackGain = 0;
            float baseAD = 0;
            float qAttackDamage = 0;
            float rAttackDamage = 0;
            float eAttackDamage = 0;
            float wAttackDamage = 0;
            if(ExecutePeriodically(10, ref this.lastTimeExecuted, true))
            {
                attackDamage = GetTotalAttackDamage(owner);
                rAttackGain = Math(0.2f, MathOp.MO_MULTIPLY, attackDamage);
                SetSpellToolTipVar(rAttackGain, 3, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
                baseAD = GetBaseAttackDamage(owner);
                attackDamage = Math(attackDamage, MathOp.MO_SUBTRACT, baseAD);
                qAttackDamage = Math(0.7f, MathOp.MO_MULTIPLY, attackDamage);
                SetSpellToolTipVar(qAttackDamage, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                rAttackDamage = Math(0.6f, MathOp.MO_MULTIPLY, attackDamage);
                SetSpellToolTipVar(rAttackDamage, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                rAttackDamage = Math(1.8f, MathOp.MO_MULTIPLY, attackDamage);
                SetSpellToolTipVar(rAttackDamage, 2, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
                eAttackDamage = Math(attackDamage, MathOp.MO_MULTIPLY, 1);
                SetSpellToolTipVar(eAttackDamage, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                wAttackDamage = Math(1, MathOp.MO_MULTIPLY, attackDamage);
                SetSpellToolTipVar(wAttackDamage, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptRumble : Script
    {
        int baseCDR = 0;
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "RumbleHeatSystem", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "RumbleHeatPunchTT", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            IncPAR(owner, -100);
            charVars.DangerZone = 50;
            charVars.ShieldAmount = 0;
            this.baseCDR = 10;
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float temp1 = 0;
            temp1 = GetPAR(owner);
            temp1 = Math(temp1, MathOp.MO_MULTIPLY, -1);
            IncPAR(owner, temp1);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptRumble : Script
    {
        public int[] effect0 = {25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110};
        int punchdmg = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            level = GetLevel(owner);
            this.punchdmg = this.effect0[level];
            SetBuffToolTipVar(1, this.punchdmg);
        }
    }
}

namespace Chars
{
    public class CharScriptRyze : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ArcaneMastery", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            //object? nextBuffVars = null;
            if(slot == 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Overload", 1, 1, 20000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            if(slot == 3)
            {
                IncPermanentFlatPARPoolMod(owner, 75);
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptRyze : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float mana = 0;
            float bonusDamage = 0;
            float bonusDamage2 = 0;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, true))
            {
                mana = GetMaxPAR(owner);
                bonusDamage = Math(mana, MathOp.MO_MULTIPLY, 0.08f);
                bonusDamage2 = Math(mana, MathOp.MO_MULTIPLY, 0.05f);
                SetSpellToolTipVar(bonusDamage, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
                SetSpellToolTipVar(bonusDamage2, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptSejuani : Script
    {
        class OnSpellCast_spellVars
        {
            //public object? DoesntTriggerSpellCasts = null;
        }
        float mS = 0;
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    if(target is ObjAIBase)
                    {
                        SpellCast((ObjAIBase)owner, target, default, default, false, 1, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
                    }
                }
            }
        }
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnSpellCast_spellVars spellVars = new();
            int slot = 0;
            TeamId teamID;
            //object? unit = null;
            float duration = 0;
            if(spellVars.DoesntTriggerSpellCasts == true)
            {
                
            }
            else
            {
                slot = GetSpellSlot(default);
                if(slot == 2)
                {
                    teamID = GetTeamID(default);
                    if(teamID == TeamId.TEAM_BLUE)
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 900, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                        {
                            if(GetBuffCountFromCaster(unit, owner, "SejuaniFrost") > 0)
                            {
                                duration = GetBuffRemainingDuration(unit, "SejuaniFrost");
                                duration = Math(duration, MathOp.MO_ADD, 0.5f);
                                SpellBuffRenew(unit, "SejuaniFrost", duration);
                            }
                            if(GetBuffCountFromCaster(unit, owner, "SejuaniFrostResist") > 0)
                            {
                                duration = GetBuffRemainingDuration(unit, "SejuaniFrostResist");
                                duration = Math(duration, MathOp.MO_ADD, 0.5f);
                                SpellBuffRenew(unit, "SejuaniFrostResist", duration);
                            }
                        });
                    }
                    else
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 900, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                        {
                            if(GetBuffCountFromCaster(unit, owner, "SejuaniFrostChaos") > 0)
                            {
                                duration = GetBuffRemainingDuration(unit, "SejuaniFrostChaos");
                                duration = Math(duration, MathOp.MO_ADD, 0.5f);
                                SpellBuffRenew(unit, "SejuaniFrostChaos", duration);
                            }
                            if(GetBuffCountFromCaster(unit, owner, "SejuaniFrostResistChaos") > 0)
                            {
                                duration = GetBuffRemainingDuration(unit, "SejuaniFrostResistChaos");
                                duration = Math(duration, MathOp.MO_ADD, 0.5f);
                                SpellBuffRenew(unit, "SejuaniFrostResistChaos", duration);
                            }
                        });
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.FrostDuration = 3;
            this.mS = GetMovementSpeed(owner);
            SpellBuffAdd((ObjAIBase)owner, owner, "SejuaniRunSpeed", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SealSpellSlot(2, SpellSlotType.SpellSlots, (ObjAIBase)owner, false, SpellbookType.SPELLBOOK_CHAMPION);
            SealSpellSlot(3, SpellSlotType.SpellSlots, (ObjAIBase)owner, false, SpellbookType.SPELLBOOK_CHAMPION);
            UnlockAnimation(owner, true);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptSejuani : Script
    {
        public int[] effect0 = {12, 20, 28, 36, 44};
        public float[] effect1 = {0.01f, 0.0125f, 0.015f, 0.0175f, 0.02f};
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float level = 0;
            float damagePerTick = 0;
            float maxHPPercent = 0;
            float frostBonus = 0;
            float temp1 = 0;
            float percentDamage = 0;
            float abilityPowerMod = 0;
            float abilityPowerBonus = 0;
            float damagePerTickFrost = 0;
            if(ExecutePeriodically(5, ref this.lastTimeExecuted, true))
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                level = Math(level, MathOp.MO_MAX, 1);
                damagePerTick = this.effect0[level];
                maxHPPercent = this.effect1[level];
                frostBonus = 1.5f;
                temp1 = GetMaxHealth(owner);
                percentDamage = Math(temp1, MathOp.MO_MULTIPLY, maxHPPercent);
                damagePerTick = Math(percentDamage, MathOp.MO_ADD, damagePerTick);
                abilityPowerMod = GetFlatMagicDamageMod(owner);
                abilityPowerBonus = Math(abilityPowerMod, MathOp.MO_MULTIPLY, 0.1f);
                damagePerTick = Math(abilityPowerBonus, MathOp.MO_ADD, damagePerTick);
                damagePerTickFrost = Math(frostBonus, MathOp.MO_MULTIPLY, damagePerTick);
                SetSpellToolTipVar(percentDamage, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
                SetSpellToolTipVar(damagePerTickFrost, 2, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptShaco : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "Backstab", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            
        }
    }
}

namespace Chars
{
    public class CharScriptShen : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ShenWayOfTheNinjaMarker", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "IsNinja", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, default, default, default, default);
        }
    }
}

namespace Chars
{
    public class CharScriptShyvana : Script
    {
        public float[] effect0 = {0.8f, 0.85f, 0.9f, 0.95f, 1};
        //object? currentPar = null;
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float spellCD1 = 0;
            float spellCD1a = 0;
            float spellCD1b = 0;
            int level = 0;
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    if(GetBuffCountFromCaster(owner, owner, "ShyvanaDoubleAttack") == 0)
                    {
                        if(GetBuffCountFromCaster(owner, owner, "ShyvanaDoubleAttackDragon") == 0)
                        {
                            spellCD1 = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            spellCD1a = Math(spellCD1, MathOp.MO_ADD, -0.5f);
                            spellCD1b = Math(spellCD1a, MathOp.MO_MAX, 0);
                            SetSlotSpellCooldownTimeVer2(spellCD1b, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                        }
                    }
                }
            }
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level >= 1)
            {
                IncPAR(owner, 2);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ShyvanaPassive", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.HitCount = 0;
            IncPAR(owner, -100);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPAR(owner, -100);
            IncPAR(owner, this.currentPar);
            if(GetBuffCountFromCaster(owner, owner, "ShyvanaTransformDeath") > 0)
            {
                SpellBuffRemove(owner, "ShyvanaTransformDeath", (ObjAIBase)owner, 0);
            }
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            //object? nextBuffVars = null;
            int level = 0;
            float totalAttackDamage = 0;
            float damagePercent = 0;
            float damageToDisplay = 0;
            if(slot == 3)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ShyvanaDragonScales", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    IncPAR(owner, 100);
                }
            }
            if(slot == 0)
            {
                totalAttackDamage = GetTotalAttackDamage(owner);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level > 0)
                {
                    damagePercent = this.effect0[level];
                }
                else
                {
                    damagePercent = 0.8f;
                }
                damageToDisplay = Math(totalAttackDamage, MathOp.MO_MULTIPLY, damagePercent);
                SetSpellToolTipVar(damageToDisplay, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptShyvana : Script
    {
        float currentPar = 0;
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            this.currentPar = GetPAR(owner);
            if(GetBuffCountFromCaster(owner, owner, "ShyvanaTransform") > 0)
            {
                this.currentPar = 0;
            }
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float rageCount = 0;
            int level = 0;
            rageCount = GetPAR(owner);
            if(rageCount >= 100)
            {
                SetPARColorOverride(owner, 255, 0, 0, 255, 175, 0, 0, 255);
            }
            else
            {
                SetPARColorOverride(owner, 255, 0, 0, 255, 175, 0, 0, 255);
                ClearPARColorOverride(owner);
            }
            if(ExecutePeriodically(1.5f, ref this.lastTimeExecuted, false))
            {
                if(GetBuffCountFromCaster(owner, owner, "ShyvanaTransform") == 0)
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    if(level >= 1)
                    {
                        IncPAR(owner, 1);
                    }
                }
                if(GetBuffCountFromCaster(owner, owner, "ShyvanaDoubleAttack") == 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "ShyvanaDoubleAttackDragon") == 0)
                    {
                        SealSpellSlot(0, SpellSlotType.SpellSlots, (ObjAIBase)owner, false, SpellbookType.SPELLBOOK_CHAMPION);
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptShyvanaDragon : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPAR(owner, -99);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptSinged : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "EmpoweredBulwark", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, default, 6, SpellSlotType.InventorySlots, 1, true, false, false, default, default, default);
        }
    }
}

namespace Chars
{
    public class CharScriptSion : Script
    {
        public float[] effect0 = {0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f};
        public int[] effect1 = {30, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 50, 50, 50, 50, 50, 50};
        float blockAmount = 0;
        float finalDamage = 0;
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.BlockChance = this.effect0[level];
            charVars.BaseBlockAmount = this.effect1[level];
        }
        public void OnBeingHit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            object? damageAmount = null;
            //object? _ = null;
            if(damageSource == DamageSource.DAMAGE_SOURCE_ATTACK)
            {
                if(RandomChance() < charVars.BlockChance)
                {
                    this.blockAmount = Math(charVars.BaseBlockAmount, MathOp.MO_MIN, damageAmount);
                    this.finalDamage = Math(damageAmount, MathOp.MO_SUBTRACT, this.blockAmount);
                    SpellEffectCreate(out _, out _, "FeelNoPain_eff.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
                    damageAmount = this.finalDamage;
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, owner, "FeelNoPain", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, default, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, default, default);
        }
    }
}

namespace Chars
{
    public class CharScriptSivir : Script
    {
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? spellName = null;
            spellName = GetSpellName(default);
            if(spellName == "SpiralBlade")
            {
                charVars.PercentOfAttack = 1;
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "SivirPassive", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptSivir : Script
    {
        float lastTime2Executed = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float totalDamage = 0;
            float baseDamage = 0;
            float bonusDamage = 0;
            float spell3Display = 0;
            if(ExecutePeriodically(1, ref this.lastTime2Executed, true))
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                totalDamage = GetTotalAttackDamage(owner);
                baseDamage = GetBaseAttackDamage(owner);
                bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseDamage);
                spell3Display = Math(bonusDamage, MathOp.MO_MULTIPLY, 1.1f);
                SetSpellToolTipVar(spell3Display, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptSkarner : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float cDR = 0;
            float cooldown = 0;
            float newCooldown = 0;
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    if(target is ObjAIBase)
                    {
                        if(target is not BaseTurret)
                        {
                            if(target is Champion)
                            {
                                cDR = 1;
                            }
                            else
                            {
                                cDR = 0.5f;
                            }
                            cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            if(cooldown > 0)
                            {
                                newCooldown = Math(cooldown, MathOp.MO_SUBTRACT, cDR);
                                SetSlotSpellCooldownTimeVer2(newCooldown, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                            }
                            cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            if(cooldown > 0)
                            {
                                newCooldown = Math(cooldown, MathOp.MO_SUBTRACT, cDR);
                                SetSlotSpellCooldownTimeVer2(newCooldown, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                            }
                            cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            if(cooldown > 0)
                            {
                                newCooldown = Math(cooldown, MathOp.MO_SUBTRACT, cDR);
                                SetSlotSpellCooldownTimeVer2(newCooldown, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                            }
                            cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            if(cooldown > 0)
                            {
                                newCooldown = Math(cooldown, MathOp.MO_SUBTRACT, cDR);
                                SetSlotSpellCooldownTimeVer2(newCooldown, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                            }
                        }
                    }
                }
            }
        }
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int slot = 0;
            //object? nextBuffVars = null;
            slot = GetSpellSlot(default);
            if(slot == 3)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "SkarnerImpaleFlashLock", 1, 1, 0.25f, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            float aD = 0;
            float bonusDamage = 0;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "SkarnerBrushCheck", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            aD = GetFlatPhysicalDamageMod(owner);
            bonusDamage = Math(aD, MathOp.MO_MULTIPLY, 0.8f);
            SetSpellToolTipVar(bonusDamage, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptSkarner : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float aD = 0;
            float bonusDamage = 0;
            aD = GetFlatPhysicalDamageMod(owner);
            bonusDamage = Math(aD, MathOp.MO_MULTIPLY, 0.8f);
            SetSpellToolTipVar(bonusDamage, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
        }
    }
}

namespace Chars
{
    public class CharScriptSmallGolem : Script
    {
        class OnActivate_nextBuffVars
        {
            public int SpawnTime = 0;
            public int HealthPerMinute = 0;
            public float DamagePerMinute = 0;
            public float GoldPerMinute = 0;
            public float AreaDmgReduction = 0;
            public float ExpPerMinute = 0;
            public bool? UpgradeTimer = null;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpawnTime = 101;
            nextBuffVars.HealthPerMinute = 25;
            nextBuffVars.DamagePerMinute = 0.84f;
            nextBuffVars.GoldPerMinute = 0.15f;
            nextBuffVars.AreaDmgReduction = 0.2f;
            nextBuffVars.ExpPerMinute = 1.08f;
            nextBuffVars.UpgradeTimer = false;
            SpellBuffAdd((ObjAIBase)attacker, attacker, "GlobalMonsterBuff", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            IncPermanentFlatHPPoolMod(owner, -150);
            IncPermanentFlatPhysicalDamageMod(owner, -3);
            IncPermanentGoldReward(owner, -8);
            IncPermanentExpReward(owner, -12);
        }
    }
}

namespace Chars
{
    public class CharScriptSona : Script
    {
        class OnSpellCast_spellVars
        {
            //public object? DoesntTriggerSpellCasts = null;
        }
        class OnLevelUpSpell_nextBuffVars
        {
            public int APADBoost = 0;
            public int ARMRBoost = 0;
            public int MSBoost = 0;
        }
        public int[] effect0 = {8, 11, 14, 17, 20};
        public int[] effect1 = {7, 9, 11, 13, 15};
        public int[] effect2 = {8, 11, 14, 17, 20};
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnSpellCast_spellVars spellVars = new();
            //object? nextBuffVars = null;
            int slotNumber = 0;
            if(spellVars.DoesntTriggerSpellCasts != true)
            {
                if(GetBuffCountFromCaster(attacker, attacker, "IfHasBuffCheck") == 0)
                {
                    if(GetBuffCountFromCaster(attacker, attacker, "SonaPowerChord") == 0)
                    {
                        SpellBuffAdd((ObjAIBase)attacker, attacker, "SonaPowerChordCount", 3, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    }
                }
                slotNumber = GetSpellSlot(default);
                if(slotNumber == 3)
                {
                    if(GetBuffCountFromCaster(owner, owner, "SonaPowerChord") > 0)
                    {
                        if(GetBuffCountFromCaster(owner, owner, "SonaAriaofPerseverance") > 0)
                        {
                            SpellBuffRemove(owner, "SonaAriaofPerseveranceCheck", (ObjAIBase)owner, 0);
                            SpellBuffAdd((ObjAIBase)owner, owner, "SonaAriaofPerseveranceCheck", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                        if(GetBuffCountFromCaster(owner, owner, "SonaHymnofValor") > 0)
                        {
                            SpellBuffRemove(owner, "SonaHymnofValorCheck", (ObjAIBase)owner, 0);
                            SpellBuffAdd((ObjAIBase)owner, owner, "SonaHymnofValorCheck", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                        if(GetBuffCountFromCaster(owner, owner, "SonaSongofDiscord") > 0)
                        {
                            SpellBuffRemove(owner, "SonaSongofDiscordCheck", (ObjAIBase)owner, 0);
                            SpellBuffAdd((ObjAIBase)owner, owner, "SonaSongofDiscordCheck", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "SonaSoundOff", 1, 1, 1, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            OnLevelUpSpell_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            if(GetBuffCountFromCaster(owner, owner, "SonaHymnofValor") > 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                nextBuffVars.APADBoost = this.effect0[level];
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1000, "AffectFriends AffectHeroes ", default, true, (unit) => 
                {
                    SpellBuffAdd((ObjAIBase)owner, unit, "SonaHymnofValorAuraB", 1, 1, 1.2f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                });
            }
            if(GetBuffCountFromCaster(owner, owner, "SonaAriaofPerseverance") > 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                nextBuffVars.ARMRBoost = this.effect1[level];
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1000, "AffectFriends AffectHeroes ", default, true, (unit) => 
                {
                    SpellBuffAdd((ObjAIBase)owner, unit, "SonaAriaofPerseveranceAuraB", 1, 1, 1.2f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                });
            }
            if(GetBuffCountFromCaster(owner, owner, "SonaSongofDiscord") > 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                nextBuffVars.MSBoost = this.effect2[level];
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1000, "AffectFriends AffectHeroes ", default, true, (unit) => 
                {
                    SpellBuffAdd((ObjAIBase)owner, unit, "SonaSongofDiscordAuraB", 1, 1, 1.2f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                });
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptSona : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(!owner.IsDead)
            {
                if(ExecutePeriodically(0.5f, ref this.lastTimeExecuted, false))
                {
                    if(GetBuffCountFromCaster(owner, owner, "SonaHymnofValor") > 0)
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "SonaHymnofValorAura", 1, 1, 2, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    }
                    if(GetBuffCountFromCaster(owner, owner, "SonaAriaofPerseverance") > 0)
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "SonaAriaofPerseveranceAura", 1, 1, 2, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    }
                    if(GetBuffCountFromCaster(owner, owner, "SonaSongofDiscord") > 0)
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "SonaSongofDiscordAura", 1, 1, 2, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    }
                    if(GetBuffCountFromCaster(owner, owner, "SonaSoundOff") == 0)
                    {
                        if(GetBuffCountFromCaster(owner, owner, "SonaHymnofValor") > 0)
                        {
                            SpellBuffAdd((ObjAIBase)owner, owner, "SonaHymnofValorSound", 1, 1, 1, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                        if(GetBuffCountFromCaster(owner, owner, "SonaAriaofPerseverance") > 0)
                        {
                            SpellBuffAdd((ObjAIBase)owner, owner, "SonaAriaofPerseveranceSound", 1, 1, 1, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                        if(GetBuffCountFromCaster(owner, owner, "SonaSongofDiscord") > 0)
                        {
                            SpellBuffAdd((ObjAIBase)owner, owner, "SonaSongofDiscordSound", 1, 1, 1, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptSoraka : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ConsecrationAura", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptSoraka : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? unit = null;
            //object? nextBuffVars = null;
            if(ExecutePeriodically(1, ref charVars.LastTimeExecuted, false))
            {
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1000, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (unit) => 
                {
                    if(!owner.IsDead)
                    {
                        SpellBuffAdd((ObjAIBase)owner, unit, "ConsecrationAuraNoParticle", 1, 1, 1.15f, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 25000, true, false, default, default);
                    }
                });
            }
        }
    }
}


namespace Chars
{
    public class CharScriptSummoner_Rider_Chaos : Script
    {
        public void OnBeingHit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            //object? _ = null;
            if(damageSource == DamageSource.DAMAGE_SOURCE_ATTACK)
            {
                if(attacker is BaseTurret)
                {
                    damageAmount = Math(0.33f, MathOp.MO_MULTIPLY, damageAmount);
                    SpellEffectCreate(out _, out _, "FeelNoPain_eff.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
                }
            }
        }
    }
}
namespace Items
{
    public class CharScriptSummoner_Rider_Chaos : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "TurretShield") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, owner, "TurretShield", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptSummoner_Rider_Order : Script
    {
        public void OnBeingHit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            //object? _ = null;
            if(damageSource == DamageSource.DAMAGE_SOURCE_ATTACK)
            {
                if(attacker is BaseTurret)
                {
                    damageAmount = Math(0.33f, MathOp.MO_MULTIPLY, damageAmount);
                    SpellEffectCreate(out _, out _, "FeelNoPain_eff.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
                }
            }
        }
    }
}
namespace Items
{
    public class CharScriptSummoner_Rider_Order : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "TurretShield") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, owner, "TurretShield", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptSwain : Script
    {
        public float[] effect0 = {1.08f, 1.11f, 1.14f, 1.17f, 1.2f};
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "SwainTacticalSupremacy", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
        public void OnPreDealDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            int level = 0;
            float damagePercent = 0;
            float damageAmount = 0;
            if(GetBuffCountFromCaster(target, owner, "SwainTorment") > 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level > 0)
                {
                    damagePercent = this.effect0[level];
                    damageAmount = Math(damagePercent, MathOp.MO_MULTIPLY, damageAmount);
                }
            }
        }
    }
}
namespace Items
{
    public class CharScriptSwain : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float cooldownStat = 0;
            float multiplier = 0;
            float newCooldown = 0;
            if(ExecutePeriodically(0.5f, ref this.lastTimeExecuted, true))
            {
                cooldownStat = GetPercentCooldownMod(owner);
                multiplier = Math(1, MathOp.MO_ADD, cooldownStat);
                newCooldown = Math(multiplier, MathOp.MO_MULTIPLY, 1);
                SetSpellToolTipVar(newCooldown, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
    }
}


namespace Chars
{
    public class CharScriptSwainRaven : Script
    {
        public float[] effect0 = {1.08f, 1.11f, 1.14f, 1.17f, 1.2f};
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "RebirthMarker", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "RebirthReady", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
        public void OnPreDealDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            int level = 0;
            float damagePercent = 0;
            float damageAmount = 0;
            if(GetBuffCountFromCaster(target, owner, "SwainTorment") > 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level > 0)
                {
                    damagePercent = this.effect0[level];
                    damageAmount = Math(damagePercent, MathOp.MO_MULTIPLY, damageAmount);
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptTalon : Script
    {
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? slotName = null;
            slotName = GetSpellName(default);
            if(slotName == "BladeRogue_ShackleShot")
            {
                charVars.FirstTargetHit = false;
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.LastHit = 0;
            charVars.AttackCounter = 1;
            charVars.MissileNumber = 0;
            SpellBuffAdd((ObjAIBase)attacker, target, "TalonMercy", 1, 1, 250000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptTalon : Script
    {
        public int[] effect0 = {1, 1, 1, 1, 1};
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float bonusAD = 0;
            float wBonusAD = 0;
            float eBonusAD = 0;
            float qTotalBonus = 0;
            float rBonusAD = 0;
            float qMagicBonus = 0;
            float baseDamage = 0;
            float totalAD = 0;
            float w2BonusAD = 0;
            int qDamagePercentVal = 0;
            float baseAP = 0;
            float qBonusAD2 = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            bonusAD = 0;
            wBonusAD = 0;
            eBonusAD = 0;
            qTotalBonus = 0;
            rBonusAD = 0;
            qMagicBonus = 0;
            baseDamage = GetBaseAttackDamage(owner);
            totalAD = GetTotalAttackDamage(owner);
            bonusAD = Math(totalAD, MathOp.MO_SUBTRACT, baseDamage);
            wBonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 0.6f);
            wBonusAD = Math(wBonusAD, MathOp.MO_ROUNDUP, 0);
            SetSpellToolTipVar(wBonusAD, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)target);
            w2BonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 0.3f);
            w2BonusAD = Math(w2BonusAD, MathOp.MO_ROUNDUP, 0);
            SetSpellToolTipVar(w2BonusAD, 2, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)target);
            eBonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 1.2f);
            eBonusAD = Math(eBonusAD, MathOp.MO_ROUNDUP, 0);
            SetSpellToolTipVar(eBonusAD, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)target);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            qDamagePercentVal = this.effect0[level];
            qTotalBonus = Math(bonusAD, MathOp.MO_MULTIPLY, 0.3f);
            qTotalBonus = Math(qTotalBonus, MathOp.MO_ROUNDUP, 0);
            SetSpellToolTipVar(qTotalBonus, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)target);
            rBonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 0.9f);
            rBonusAD = Math(rBonusAD, MathOp.MO_ROUNDUP, 0);
            SetSpellToolTipVar(rBonusAD, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)target);
            baseAP = GetFlatMagicDamageMod(owner);
            qMagicBonus = Math(baseAP, MathOp.MO_MULTIPLY, 0.1f);
            qBonusAD2 = Math(bonusAD, MathOp.MO_MULTIPLY, 1.2f);
            qBonusAD2 = Math(qBonusAD2, MathOp.MO_ROUNDUP, 0);
            SetSpellToolTipVar(qBonusAD2, 2, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)target);
        }
    }
}

namespace Chars
{
    public class CharScriptTaric : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            int level = 0;
            float cooldown = 0;
            float newCooldown = 0;
            if(hitResult != HitResult.HIT_Miss)
            {
                if(hitResult != HitResult.HIT_Dodge)
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    if(level > 0)
                    {
                        cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        if(cooldown > 0)
                        {
                            if(target is Champion)
                            {
                                newCooldown = Math(cooldown, MathOp.MO_SUBTRACT, 3);
                                SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, newCooldown);
                            }
                            else
                            {
                                newCooldown = Math(cooldown, MathOp.MO_SUBTRACT, 1);
                                SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, newCooldown);
                            }
                        }
                    }
                }
            }
        }
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int temp = 0;
            //object? nextBuffVars = null;
            temp = GetSpellSlot(default);
            if(temp == 3)
            {
                SpellBuffAdd((ObjAIBase)attacker, owner, "TaricHammerInternal", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "Gemcraft", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptTaric : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            //object? unit = null;
            //object? nextBuffVars = null;
            float shatterCD = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level > 0)
            {
                if(ExecutePeriodically(1, ref this.lastTimeExecuted, true))
                {
                    if(owner.IsDead)
                    {
                        
                    }
                    else
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1000, "AffectFriends AffectHeroes ", default, true, (unit) => 
                        {
                            SpellBuffAdd((ObjAIBase)attacker, unit, "ShatterAura", 1, 1, 1.25f, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        });
                        shatterCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        if(shatterCD <= 0)
                        {
                            SpellBuffAdd((ObjAIBase)attacker, target, "ShatterSelfBonus", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                        }
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptTeemo : Script
    {
        public int[] effect0 = {6, 6, 6, 8, 8, 8, 10, 10, 10, 12, 12, 12, 14, 14, 14, 16, 16, 16};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.TrailDuration = this.effect0[level];
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "Camouflage", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0.1f, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SealSpellSlot(2, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, SpellbookType.SPELLBOOK_CHAMPION);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            //object? nextBuffVars = null;
            if(slot == 3)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "TeemoMushrooms", 4, 2, charVars.MushroomCooldown, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COUNTER, 0, true, false, false, default);
                }
            }
            if(slot == 1)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "TeemoMoveQuickPassive", 1, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptTeemo : Script
    {
        public int[] effect0 = {35, 31, 27};
        float lastTime2Executed = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            //object? nextBuffVars = null;
            int mushroomCooldown = 0;
            float cooldownMod = 0;
            float mushroomCooldownNL = 0;
            if(GetBuffCountFromCaster(owner, owner, "ToxicShot") > 0)
            {
                
            }
            else
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level > 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "ToxicShot", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                }
            }
            if(ExecutePeriodically(1, ref this.lastTime2Executed, true))
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 0)
                {
                    level = 1;
                }
                mushroomCooldown = this.effect0[level];
                cooldownMod = GetPercentCooldownMod(owner);
                cooldownMod = Math(1, MathOp.MO_ADD, cooldownMod);
                charVars.MushroomCooldown = Math(mushroomCooldown, MathOp.MO_MULTIPLY, cooldownMod);
                SetSpellToolTipVar(charVars.MushroomCooldown, 1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                mushroomCooldownNL = Math(mushroomCooldown, MathOp.MO_SUBTRACT, 4);
                mushroomCooldownNL = Math(mushroomCooldownNL, MathOp.MO_MULTIPLY, cooldownMod);
                SetSpellToolTipVar(mushroomCooldownNL, 2, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptTestCube : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SetNoRender(owner, default);
        }
    }
}

namespace Chars
{
    public class CharScriptTristana : Script
    {
        public int[] effect0 = {0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.BonusRange = this.effect0[level];
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "DrawABead", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, default, 6, SpellSlotType.InventorySlots, 1, true, false, false, default, default, default);
        }
    }
}
namespace Items
{
    public class CharScriptTristana : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncFlatAttackRangeMod(owner, charVars.BonusRange);
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "DetonatingShot") > 0)
            {
                
            }
            else
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level >= 1)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "DetonatingShot", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, default, default, default, default);
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptTrundle : Script
    {
        public float[] effect0 = {0.02f, 0.02f, 0.02f, 0.02f, 0.03f, 0.03f, 0.03f, 0.03f, 0.04f, 0.04f, 0.04f, 0.05f, 0.05f, 0.05f, 0.06f, 0.06f, 0.06f, 0.06f};
        public float[] effect1 = {0.02f, 0.02f, 0.02f, 0.02f, 0.03f, 0.03f, 0.03f, 0.03f, 0.04f, 0.04f, 0.04f, 0.05f, 0.05f, 0.05f, 0.06f, 0.06f, 0.06f, 0.06f};
        public void OnNearbyDeath(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? noRender = null;
            float hPPre = 0;
            float healVar = 0;
            if(owner.Team != target.Team)
            {
                if(target is ObjAIBase)
                {
                    if(target is not BaseTurret)
                    {
                        noRender = GetNoRender(target);
                        if(noRender == false)
                        {
                            hPPre = GetMaxHealth(target);
                            healVar = Math(hPPre, MathOp.MO_MULTIPLY, charVars.RegenValue);
                            IncHealth(owner, healVar, owner);
                        }
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            int level = 0;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            level = GetLevel(owner);
            charVars.RegenValue = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "TrundleDiseaseOverseer", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            charVars.DiseaseCounter = 0;
        }
        public void OnLevelUp(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            //object? nextBuffVars = null;
            level = GetLevel(owner);
            charVars.RegenValue = this.effect1[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "TrundleDiseaseOverseer", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
        }
    }
}
namespace Items
{
    public class CharScriptTrundle : Script
    {
        public float[] effect0 = {0.8f, 0.9f, 1, 1.1f, 1.2f};
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float scaling = 0;
            float damagess = 0;
            float tTVar = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            scaling = this.effect0[level];
            damagess = GetTotalAttackDamage(owner);
            tTVar = Math(damagess, MathOp.MO_MULTIPLY, scaling);
            SetSpellToolTipVar(tTVar, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
        }
    }
}

namespace Chars
{
    public class CharScriptTryndamere : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            int level = 0;
            float cooldown = 0;
            float newCooldown = 0;
            if(hitResult == HitResult.HIT_Critical)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level >= 1)
                {
                    cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    if(cooldown > 0)
                    {
                        newCooldown = Math(cooldown, MathOp.MO_SUBTRACT, 2);
                        SetSlotSpellCooldownTime((ObjAIBase)owner, 2, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, newCooldown);
                    }
                }
            }
        }
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? tempName = null;
            //object? unit = null;
            //object? nextBuffVars = null;
            tempName = GetSpellName(default);
            if(tempName == "MockingShout")
            {
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                {
                    if(IsBehind(unit, owner))
                    {
                        SpellBuffAdd((ObjAIBase)owner, unit, "FacingMe", 1, 1, 1, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    }
                });
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "BattleFury", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            IncPAR(owner, -99);
            SetPARColorOverride(owner, 255, 0, 0, 255, 175, 0, 0, 255);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPAR(owner, -99);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            //object? nextBuffVars = null;
            if(slot == 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "BloodlustMarker", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptTutorial_Red_Minion_Basic : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            Particle? part = null;
            //object? _ = null;
            SpellEffectCreate(out part, out _, "HallucinatePoof.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, owner.Position, false, default, default, default, default, default, default);
        }
    }
}

namespace Chars
{
    public class CharScriptTwistedBlueWraith : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            //object? _ = null;
            damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.43f);
            SpellEffectCreate(out _, out _, "EternalThirst_buf.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, target, default, default, false, default, default, default, default, default, default);
        }
    }
}
namespace Items
{
    public class CharScriptTwistedBlueWraith : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            IncPercentLifeStealMod(owner, 1);
            if(GetBuffCountFromCaster(owner, owner, "LifestealAttack") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, owner, "LifestealAttack", 1, 1, 9999, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, default, default, default, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptTwistedFate : Script
    {
        class OnLevelUpSpell_nextBuffVars
        {
            public int BonusDamage = 0;
            public float CooldownBonus = 0;
            public float AttackSpeedBonus = 0;
        }
        public int[] effect0 = {55, 80, 105, 130, 155};
        public float[] effect1 = {-0.03f, -0.06f, -0.09f, -0.12f, -0.15f};
        public float[] effect2 = {0.03f, 0.06f, 0.09f, 0.12f, 0.15f};
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? unit = null;
            //object? nextBuffVars = null;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectFriends AffectHeroes ", default, true, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)owner, unit, "SecondSight", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            });
            SealSpellSlot(2, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, SpellbookType.SPELLBOOK_CHAMPION);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.Count = 0;
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            OnLevelUpSpell_nextBuffVars nextBuffVars = new();
            if(slot == 2)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                nextBuffVars.BonusDamage = this.effect0[level];
                nextBuffVars.CooldownBonus = this.effect1[level];
                nextBuffVars.AttackSpeedBonus = this.effect2[level];
                SpellBuffAdd((ObjAIBase)owner, owner, "CardmasterStack", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptTwistedFate : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? unit = null;
            //object? nextBuffVars = null;
            if(ExecutePeriodically(4, ref this.lastTimeExecuted, false))
            {
                if(!owner.IsDead)
                {
                    ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectFriends AffectHeroes ", default, true, (unit) => 
                    {
                        SpellBuffAdd((ObjAIBase)owner, unit, "SecondSight", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    });
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptTwistedGiantWolf : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.43f);
        }
    }
}

namespace Chars
{
    public class CharScriptTwistedGolem : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.43f);
        }
    }
}

namespace Chars
{
    public class CharScriptTwistedLizardElder : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.43f);
        }
    }
}
namespace Items
{
    public class CharScriptTwistedLizardElder : Script
    {
        class UpdateSelfBuffActions_nextBuffVars
        {
            public int HPPerLevel = 0;
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffActions_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "BlessingoftheLizardElder") == 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "BlessingoftheLizardElder", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 100000, true, false, default, default);
            }
            if(GetBuffCountFromCaster(owner, owner, "HPByPlayerLevel") == 0)
            {
                nextBuffVars.HPPerLevel = 175;
                SpellBuffAdd((ObjAIBase)owner, owner, "HPByPlayerLevel", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptTwistedSmallWolf : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.43f);
        }
    }
}

namespace Chars
{
    public class CharScriptTwistedTinyWraith : Script
    {
        class OnActivate_nextBuffVars
        {
            public int SpawnTime = 0;
            public float HealthPerMinute = 0;
            public float DamagePerMinute = 0;
            public float AreaDmgReduction = 0;
            public float GoldPerMinute = 0;
            public float ExpPerMinute = 0;
            public bool? UpgradeTimer = null;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpawnTime = 101;
            nextBuffVars.HealthPerMinute = 12.1f;
            nextBuffVars.DamagePerMinute = 0.2195f;
            nextBuffVars.AreaDmgReduction = 0.2f;
            nextBuffVars.GoldPerMinute = 0.036f;
            nextBuffVars.ExpPerMinute = 0.1064f;
            nextBuffVars.UpgradeTimer = false;
            SpellBuffAdd((ObjAIBase)owner, owner, "GlobalMonsterBuff", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptTwistedYoungLizard : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.43f);
        }
    }
}

namespace Chars
{
    public class CharScriptTwitch : Script
    {
        class OnHitUnit_nextBuffVars
        {
            public object? DamageAmount = null;
            public int LastCount = 0;
        }
        public float[] effect0 = {2.5f, 2.5f, 2.5f, 2.5f, 2.5f, 5, 5, 5, 5, 5, 7.5f, 7.5f, 7.5f, 7.5f, 7.5f, 10, 10, 10};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.DamageAmount = this.effect0[level];
        }
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            OnHitUnit_nextBuffVars nextBuffVars = new();
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    if(target is ObjAIBase)
                    {
                        if(target is BaseTurret)
                        {
                            
                        }
                        else
                        {
                            SpellBuffAdd((ObjAIBase)attacker, target, "DeadlyVenom", 6, 1, 6.1f, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.POISON, 0, true, false, default, default);
                            nextBuffVars.DamageAmount = charVars.DamageAmount;
                            nextBuffVars.LastCount = 1;
                            SpellBuffAdd((ObjAIBase)attacker, target, "DeadlyVenom_Internal", 1, 1, 6.1f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                        }
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "DeadlyVenom_marker", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptUdyr : Script
    {
        public float[] effect0 = {-0.024f, -0.028f, -0.032f, -0.036f, -0.04f, -0.044f, -0.048f, -0.052f, -0.056f, -0.06f, -0.064f, -0.068f, -0.072f, -0.076f, -0.08f, -0.084f, -0.088f, -0.092f};
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UdyrMonkeyAgility", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, default, default, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, default, 6, SpellSlotType.InventorySlots, 1, true, false, false, default, default, default);
        }
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.BaseCritChance = this.effect0[level];
        }
    }
}

namespace Chars
{
    public class CharScriptUdyrPhoenix : Script
    {
        public float[] effect0 = {-0.024f, -0.028f, -0.032f, -0.036f, -0.04f, -0.044f, -0.048f, -0.052f, -0.056f, -0.06f, -0.064f, -0.068f, -0.072f, -0.076f, -0.08f, -0.084f, -0.088f, -0.092f};
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UdyrMonkeyAgility", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, default, default, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, default, 6, SpellSlotType.InventorySlots, 1, true, false, false, default, default, default);
        }
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.BaseCritChance = this.effect0[level];
        }
    }
}

namespace Chars
{
    public class CharScriptUdyrTiger : Script
    {
        public float[] effect0 = {-0.024f, -0.028f, -0.032f, -0.036f, -0.04f, -0.044f, -0.048f, -0.052f, -0.056f, -0.06f, -0.064f, -0.068f, -0.072f, -0.076f, -0.08f, -0.084f, -0.088f, -0.092f};
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UdyrMonkeyAgility", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, default, default, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, default, 6, SpellSlotType.InventorySlots, 1, true, false, false, default, default, default);
        }
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.BaseCritChance = this.effect0[level];
        }
    }
}

namespace Chars
{
    public class CharScriptUdyrTurtle : Script
    {
        public float[] effect0 = {-0.024f, -0.028f, -0.032f, -0.036f, -0.04f, -0.044f, -0.048f, -0.052f, -0.056f, -0.06f, -0.064f, -0.068f, -0.072f, -0.076f, -0.08f, -0.084f, -0.088f, -0.092f};
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UdyrMonkeyAgility", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, default, default, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, default, 6, SpellSlotType.InventorySlots, 1, true, false, false, default, default, default);
        }
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.BaseCritChance = this.effect0[level];
        }
    }
}

namespace Chars
{
    public class CharScriptUrf : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SetCanAttack(owner, default);
            SetCanMove(owner, default);
            SetCanAttack(owner, default);
            SetGhosted(owner, default);
            SetTargetable(owner, default);
            SetInvulnerable(owner, default);
            SetIgnoreCallForHelp(owner, default);
            SetNoRender(owner, default);
        }
    }
}
namespace Items
{
    public class CharScriptUrf : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? unit = null;
            int warwickID = 0;
            //object? nextBuffVars = null;
            if(ExecutePeriodically(2, ref this.lastTimeExecuted, false))
            {
                if(GetBuffCountFromCaster(owner, owner, "HalloweenUrfCD") == 0)
                {
                    ForNClosestUnitsInTargetArea(owner, owner.Position, 300, "AffectEnemies AffectMinions AffectHeroes ", 1, true, default, (unit) => 
                    {
                        if(GetBuffCountFromCaster(unit, unit, "EternalThirstIcon") > 0)
                        {
                            warwickID = GetSkinID(unit);
                            if(warwickID == 2)
                            {
                                SpellCast((ObjAIBase)owner, unit, default, unit, false, 0, SpellSlotType.SpellSlots, 1, false, false, false, false, false, default);
                                SpellBuffAdd((ObjAIBase)owner, owner, "HalloweenUrfWarwick", 1, 1, 4.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
                            }
                            else
                            {
                                SpellBuffAdd((ObjAIBase)owner, owner, "HalloweenUrfAppear", 1, 1, 6.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
                            }
                        }
                        else
                        {
                            SpellBuffAdd((ObjAIBase)owner, owner, "HalloweenUrfAppear", 1, 1, 6.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
                        }
                    });
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptUrgot : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    SpellBuffAdd((ObjAIBase)owner, target, "UrgotEntropyPassive", 1, 1, 2.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptUrgot : Script
    {
        float lastTime2Executed = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            float aD = 0;
            float bonusDamage = 0;
            if(ExecutePeriodically(0.5f, ref this.lastTime2Executed, true))
            {
                if(owner.IsDead)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "UrgotDeathParticle", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
                else
                {
                    if(GetBuffCountFromCaster(owner, owner, "UrgotDeathParticle") > 0)
                    {
                        SpellBuffRemove(owner, "UrgotDeathParticle", (ObjAIBase)owner, 0);
                    }
                }
                aD = GetFlatPhysicalDamageMod(owner);
                bonusDamage = Math(aD, MathOp.MO_MULTIPLY, 0.6f);
                SetSpellToolTipVar(bonusDamage, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptVayne : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            float aD = 0;
            float bonusDamage2 = 0;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SealSpellSlot(1, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, SpellbookType.SPELLBOOK_CHAMPION);
            charVars.CastPoint = 1;
            aD = GetFlatPhysicalDamageMod(owner);
            bonusDamage2 = Math(aD, MathOp.MO_MULTIPLY, 0.8f);
            SetSpellToolTipVar(bonusDamage2, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level > 0)
            {
                SealSpellSlot(0, SpellSlotType.SpellSlots, (ObjAIBase)owner, false, SpellbookType.SPELLBOOK_CHAMPION);
            }
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level > 0)
            {
                SealSpellSlot(2, SpellSlotType.SpellSlots, (ObjAIBase)owner, false, SpellbookType.SPELLBOOK_CHAMPION);
            }
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level > 0)
            {
                SealSpellSlot(3, SpellSlotType.SpellSlots, (ObjAIBase)owner, false, SpellbookType.SPELLBOOK_CHAMPION);
            }
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            //object? nextBuffVars = null;
            if(slot == 1)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "VayneSilveredBolts", 1, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                }
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptVayne : Script
    {
        public float[] effect0 = {0.3f, 0.35f, 0.4f, 0.45f, 0.5f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? hunt = null;
            //object? unit = null;
            bool? visible = null;
            //object? nextBuffVars = null;
            float speedBoost = 0;
            hunt = false;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 2000, "AffectEnemies AffectNeutral AffectHeroes ", default, true, (unit) => 
            {
                if(IsInFront(owner, unit))
                {
                    visible = CanSeeTarget(owner, unit);
                    if(visible == true)
                    {
                        hunt = true;
                        SpellBuffAdd((ObjAIBase)owner, unit, "VayneHunted", 1, 1, 1.5f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    }
                    if(GetBuffCountFromCaster(unit, owner, "VayneHunted") > 0)
                    {
                        hunt = true;
                    }
                }
            });
            if(hunt == true)
            {
                speedBoost = 30;
                if(GetBuffCountFromCaster(owner, owner, "VayneInquisition") > 0)
                {
                    speedBoost = Math(speedBoost, MathOp.MO_MULTIPLY, 3);
                    if(GetBuffCountFromCaster(owner, owner, "VayneInquisitionSpeedPart") == 0)
                    {
                        SpellBuffRemove(owner, "VayneInquisitionSpeedPartNormal", (ObjAIBase)owner, 0);
                        SpellBuffAdd((ObjAIBase)owner, owner, "VayneInquisitionSpeedPart", 1, 1, 20, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    }
                }
                else
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "VayneInquisitionSpeedPartNormal", 1, 1, 20, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    SpellBuffRemove(owner, "VayneInquisitionSpeedPart", (ObjAIBase)owner, 0);
                }
                IncFlatMovementSpeedMod(owner, speedBoost);
            }
            else
            {
                SpellBuffRemove(owner, "VayneInquisitionSpeedPart", (ObjAIBase)owner, 0);
                SpellBuffRemove(owner, "VayneInquisitionSpeedPartNormal", (ObjAIBase)owner, 0);
            }
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float aD = 0;
            float bonusDamage2 = 0;
            float damage = 0;
            int level = 0;
            float spear = 0;
            float spearDamage = 0;
            aD = GetFlatPhysicalDamageMod(owner);
            bonusDamage2 = Math(aD, MathOp.MO_MULTIPLY, 0.5f);
            SetSpellToolTipVar(bonusDamage2, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            damage = GetTotalAttackDamage(owner);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level == 0)
            {
                level = 1;
            }
            spear = this.effect0[level];
            spearDamage = Math(damage, MathOp.MO_MULTIPLY, spear);
            SetSpellToolTipVar(spearDamage, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
        }
    }
}

namespace Chars
{
    public class CharScriptVeigar : Script
    {
        class OnLevelUpSpell_nextBuffVars
        {
            public int BonusAP = 0;
        }
        public int[] effect0 = {1, 2, 3, 4, 5};
        public int[] effect1 = {1, 1, 1, 1, 1};
        public int[] effect2 = {9999, 9999, 9999, 9999, 9999};
        public void OnKillUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            int championAPGain = 0;
            if(target is Champion)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level > 0)
                {
                    championAPGain = this.effect0[level];
                    charVars.APGain = Math(charVars.APGain, MathOp.MO_ADD, championAPGain);
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "VeigarEquilibrium", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.APGain = 0;
            charVars.TotalBonus = 0;
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            OnLevelUpSpell_nextBuffVars nextBuffVars = new();
            if(slot == 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                nextBuffVars.BonusAP = this.effect1[level];
                charVars.MaxBonus = this.effect2[level];
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptVeigar : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? championAPGain = null;
            float totalBonus = 0;
            RequireVar(championAPGain);
            RequireVar(charVars.TotalBonus);
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                totalBonus = Math(0, MathOp.MO_ADD, charVars.TotalBonus);
                totalBonus = Math(charVars.APGain, MathOp.MO_ADD, charVars.TotalBonus);
                SetSpellToolTipVar(totalBonus, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
            }
            RequireVar(charVars.APGain);
            IncFlatMagicDamageMod(owner, charVars.APGain);
        }
    }
}

namespace Chars
{
    public class CharScriptViktor : Script
    {
        Particle? staffIdle = null;
        Particle? staffIdle2 = null;
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            TeamId ownerTeam;
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ViktorPassiveAPPerLev", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0.25f, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            CreateItem((ObjAIBase)owner, 3200);
            ownerTeam = GetTeamID(default);
            SpellEffectCreate(out this.staffIdle, out this.staffIdle2, "Viktor_idle.troy", "Viktor_idle.troy", ownerTeam, 0, 0, TeamId.TEAM_NEUTRAL, owner, false, owner, "BUFFBONE_CSTM_WEAPON_1", default, owner, "BUFFBONE_CSTM_WEAPON_1", default, false, false, false, false, false, default, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ViktorPassiveAPPerLev", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0.25f, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptViktor : Script
    {
        //object? staffIdle = null;
        //object? staffIdle2 = null;
        Particle? staffIdleYELLOW = null;
        Particle? staffIdleBLUE = null;
        Particle? staffIdleRED = null;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId ownerTeam;
            Particle? staffIdleYELLOW2 = null;
            Particle? staffIdleBLUE2 = null;
            Particle? staffIdleRED2 = null;
            if(charVars.HasRemoved != true)
            {
                ownerTeam = GetTeamID(default);
                if(GetBuffCountFromCaster(owner, owner, "ViktorAugmentQ") > 0)
                {
                    SpellEffectRemove(this.staffIdle);
                    SpellEffectRemove(this.staffIdle2);
                    charVars.HasRemoved = true;
                    SpellEffectCreate(out this.staffIdleYELLOW, out staffIdleYELLOW2, "Viktorb_yellow.troy", "Viktorb_yellow.troy", ownerTeam, 0, 0, TeamId.TEAM_UNKNOWN, default, false, owner, "BUFFBONE_CSTM_WEAPON_1", default, owner, "BUFFBONE_CSTM_WEAPON_1", default, false, false, false, false, false, default, default);
                }
                else
                {
                    if(GetBuffCountFromCaster(owner, owner, "ViktorAugmentW") > 0)
                    {
                        SpellEffectRemove(this.staffIdle);
                        SpellEffectRemove(this.staffIdle2);
                        charVars.HasRemoved = true;
                        SpellEffectCreate(out this.staffIdleBLUE, out staffIdleBLUE2, "Viktorb_blue.troy", "Viktorb_blue.troy", ownerTeam, 0, 0, TeamId.TEAM_UNKNOWN, default, false, owner, "BUFFBONE_CSTM_WEAPON_1", default, owner, "BUFFBONE_CSTM_WEAPON_1", default, false, false, false, false, false, default, default);
                    }
                    else
                    {
                        if(GetBuffCountFromCaster(owner, owner, "ViktorAugmentE") > 0)
                        {
                            SpellEffectRemove(this.staffIdle);
                            SpellEffectRemove(this.staffIdle2);
                            charVars.HasRemoved = true;
                            SpellEffectCreate(out this.staffIdleRED, out staffIdleRED2, "Viktorb_red.troy", "Viktorb_red.troy", ownerTeam, 0, 0, TeamId.TEAM_UNKNOWN, default, false, owner, "BUFFBONE_CSTM_WEAPON_1", default, owner, "BUFFBONE_CSTM_WEAPON_1", default, false, false, false, false, false, default, default);
                        }
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptVladimir : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "VladimirBloodGorged", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptVladimir : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float maxHP = 0;
            int baseHP = 0;
            int healthPerLevel = 0;
            int level = 0;
            float levelHealth = 0;
            float totalBaseHealth = 0;
            float totalBonusHealth = 0;
            maxHP = GetMaxHealth(owner);
            baseHP = 400;
            healthPerLevel = 85;
            level = GetLevel(owner);
            levelHealth = Math(level, MathOp.MO_MULTIPLY, healthPerLevel);
            totalBaseHealth = Math(levelHealth, MathOp.MO_ADD, baseHP);
            totalBonusHealth = Math(maxHP, MathOp.MO_SUBTRACT, totalBaseHealth);
            totalBonusHealth = Math(totalBonusHealth, MathOp.MO_MULTIPLY, 0.15f);
            SetSpellToolTipVar(totalBonusHealth, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(0.4f, ref this.lastTimeExecuted, false))
            {
                if(owner.IsDead)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "VladDeathParticle", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                }
                else
                {
                    if(GetBuffCountFromCaster(owner, owner, "VladDeathParticle") > 0)
                    {
                        SpellBuffRemove(owner, "VladDeathParticle", (ObjAIBase)owner, default);
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptVolibear : Script
    {
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            //object? unit = null;
            string? name = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "VolibearPassiveBuff", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "VolibearPassiveHealCheck", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.RegenPercent = 0.3f;
            charVars.RegenTooltip = 30;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectEnemies AffectHeroes ", default, true, (unit) => 
            {
                name = GetUnitSkinName(unit);
                if(name == "Zilean")
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "VolibearHatred", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)owner, unit, "VolibearHatredZilean", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                }
            });
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            //object? nextBuffVars = null;
            if(slot == 1)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "VolibearW", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, true, default);
                }
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptVolibear : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float hPPoolMod = 0;
            if(ExecutePeriodically(5, ref this.lastTimeExecuted, true))
            {
                hPPoolMod = GetFlatHPPoolMod(attacker);
                hPPoolMod = Math(hPPoolMod, MathOp.MO_MULTIPLY, 0.15f);
                SetSpellToolTipVar(hPPoolMod, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptWarwick : Script
    {
        public int[] effect0 = {6, 6, 6, 6, 6, 6, 12, 12, 12, 12, 12, 12, 18, 18, 18, 18, 18, 18};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.LifeStealAmount = this.effect0[level];
        }
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            int count = 0;
            float lifeStealToHeal = 0;
            Particle? num = null;
            //object? _ = null;
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    if(target is ObjAIBase)
                    {
                        if(target is BaseTurret)
                        {
                            
                        }
                        else
                        {
                            SpellBuffAdd((ObjAIBase)attacker, target, "EternalThirst", 3, 1, 4.1f, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                            count = GetBuffCountFromAll(target, "EternalThirst");
                            lifeStealToHeal = Math(charVars.LifeStealAmount, MathOp.MO_MULTIPLY, count);
                            IncHealth(owner, lifeStealToHeal, owner);
                            SpellEffectCreate(out num, out _, "EternalThirst_buf.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, target, default, default, false, default, default, false, default, default, default);
                        }
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, target, "EternalThirstIcon", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            int level = 0;
            //object? nextBuffVars = null;
            if(slot == 2)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "Bloodscent_internal", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                }
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptWorm : Script
    {
        Region? bubble = null;
        public void OnPreDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            float distance = 0;
            int damageAmount = 0;
            if(GetBuffCountFromCaster(owner, owner, "WrathTimer") == 0)
            {
                if(GetBuffCountFromCaster(owner, owner, "SweepTimer") == 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "PropelTimer") == 0)
                    {
                        if(GetBuffCountFromCaster(owner, owner, "ActionTimer2") == 0)
                        {
                            if(GetBuffCountFromCaster(owner, owner, "ActionTimer") == 0)
                            {
                                distance = DistanceBetweenObjects("Attacker", "Owner");
                                if(distance <= 950)
                                {
                                    FaceDirection(owner, attacker.Position);
                                    SpellCast((ObjAIBase)owner, attacker, owner.Position, owner.Position, false, 3, SpellSlotType.SpellSlots, 1, false, false, false, false, false, default);
                                }
                                else
                                {
                                    damageAmount = 0;
                                }
                            }
                        }
                    }
                }
            }
        }
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffRemove(owner, "ActionTimer", (ObjAIBase)owner, default);
            SpellBuffRemove(owner, "PropelTimer", (ObjAIBase)owner, default);
            SpellBuffRemove(owner, "WrathTimer", (ObjAIBase)owner, default);
            SpellBuffRemove(owner, "SweepTimer", (ObjAIBase)owner, default);
            if(RandomChance() < 0.04f)
            {
                if(GetBuffCountFromCaster(owner, owner, "WrathCooldown") > 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "ActionTimer", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                }
                if(GetBuffCountFromCaster(owner, owner, "WrathCooldown") == 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "WrathTimer", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                    SpellBuffAdd((ObjAIBase)owner, owner, "WrathCooldown", 1, 1, 7, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                }
            }
            else if(RandomChance() < 0.12f)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "SweepTimer", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
            else if(RandomChance() < 0.18f)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "PropelTimer", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ActionTimer", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
            if(GetBuffCountFromCaster(owner, owner, "WrathTimer") == 0)
            {
                if(GetBuffCountFromCaster(owner, owner, "SweepTimer") == 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "PropelTimer") == 0)
                    {
                        if(GetBuffCountFromCaster(owner, owner, "ActionTimer") == 0)
                        {
                            SpellBuffAdd((ObjAIBase)owner, owner, "ActionTimer2", 1, 1, 1.5f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                        }
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            teamID = TeamId.TEAM_NEUTRAL;
            this.bubble = AddPosPerceptionBubble(teamID, 1600, owner.Position, 25000, default, false);
            SetImmovable(owner, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptWorm : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ResistantSkin", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 60, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "WormRecouperateOn", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SetCanAttack(owner, default);
            SetCanMove(owner, default);
        }
    }
}

namespace Chars
{
    public class CharScriptWraith : Script
    {
        class OnActivate_nextBuffVars
        {
            public int SpawnTime = 0;
            public int HealthPerMinute = 0;
            public float DamagePerMinute = 0;
            public float AreaDmgReduction = 0;
            public float GoldPerMinute = 0;
            public float ExpPerMinute = 0;
            public bool? UpgradeTimer = null;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            SpellBuffAdd((ObjAIBase)attacker, owner, "LifestealAttack", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            nextBuffVars.SpawnTime = 101;
            nextBuffVars.HealthPerMinute = 28;
            nextBuffVars.DamagePerMinute = 0.5f;
            nextBuffVars.AreaDmgReduction = 0.2f;
            nextBuffVars.GoldPerMinute = 0.48f;
            nextBuffVars.ExpPerMinute = 1.4f;
            nextBuffVars.UpgradeTimer = false;
            SpellBuffAdd((ObjAIBase)owner, owner, "GlobalMonsterBuff", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "RegenerationRuneAura", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            IncPermanentExpReward(owner, 33);
            IncPermanentFlatPhysicalDamageMod(owner, 1);
        }
    }
}

namespace Chars
{
    public class CharScriptXerath : Script
    {
        class OnSpellCast_spellVars
        {
            //public object? DoesntTriggerSpellCasts = null;
        }
        class OnSpellCast_nextBuffVars
        {
            public float MagicPen = 0;
        }
        public int[] effect0 = {8, 8, 8, 8, 8};
        public float[] effect1 = {0.1f, 0.15f, 0.2f, 0.25f, 0.3f};
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnSpellCast_spellVars spellVars = new();
            int slot = 0;
            int level = 0;
            int buffDuration = 0;
            OnSpellCast_nextBuffVars nextBuffVars = new();
            if(spellVars.DoesntTriggerSpellCasts == true)
            {
                
            }
            else
            {
                slot = GetSpellSlot(default);
                if(slot == 1)
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    buffDuration = this.effect0[level];
                    nextBuffVars.MagicPen = this.effect1[level];
                    SpellBuffAdd((ObjAIBase)owner, owner, "XerathLocusOfPower", 1, 1, buffDuration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "XerathAscended", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "XerathParticleBuff", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptXinZhao : Script
    {
        class OnActivate_nextBuffVars
        {
            public float BleedAmount = 0;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            nextBuffVars.BleedAmount = 0.4f;
            SpellBuffAdd((ObjAIBase)owner, owner, "XenZhaoPuncture", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            charVars.ComboCounter = 0;
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            int level = 0;
            SpellBuffAdd((ObjAIBase)owner, target, "XenZhaoPuncture", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level >= 1)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "XenZhaoBattleCryPassive", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            }
        }
        public void OnLevelUpSpell(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int slot)
        {
            //object? nextBuffVars = null;
            if(slot == 1)
            {
                if(GetBuffCountFromCaster(owner, owner, "XenZhaoBattleCryPH") == 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "XenZhaoBattleCryPassive", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                }
            }
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptYorick : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "YorickUnholySymbiosis", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "YorickRavenousLifesteal", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnResurrect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            charVars.SpectralCounter = 0;
            SpellBuffAdd((ObjAIBase)owner, owner, "YorickRavenousLifesteal", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SealSpellSlot(0, SpellSlotType.SpellSlots, (ObjAIBase)owner, false, SpellbookType.SPELLBOOK_CHAMPION);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptYorick : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float bonusAD = 0;
            float bonusAD80 = 0;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, true))
            {
                bonusAD = GetFlatPhysicalDamageMod(owner);
                bonusAD80 = Math(bonusAD, MathOp.MO_MULTIPLY, 0.8f);
                SetSpellToolTipVar(bonusAD, 1, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                SetSpellToolTipVar(bonusAD80, 1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
                SetSpellToolTipVar(bonusAD, 1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptYorickDecayedGhoul : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            
        }
    }
}

namespace Chars
{
    public class CharScriptYorickRavenousGhoul : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            
        }
    }
}

namespace Chars
{
    public class CharScriptYorickSpectralGhoul : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            
        }
    }
}

namespace Chars
{
    public class CharScriptYoungLizard : Script
    {
        class OnActivate_nextBuffVars
        {
            public int SpawnTime = 0;
            public float HealthPerMinute = 0;
            public float DamagePerMinute = 0;
            public float GoldPerMinute = 0;
            public float AreaDmgReduction = 0;
            public float ExpPerMinute = 0;
            public bool? UpgradeTimer = null;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpawnTime = 101;
            nextBuffVars.HealthPerMinute = 11.88f;
            nextBuffVars.DamagePerMinute = 0.22f;
            nextBuffVars.GoldPerMinute = 0.05f;
            nextBuffVars.AreaDmgReduction = 0.2f;
            nextBuffVars.ExpPerMinute = 0.424f;
            nextBuffVars.UpgradeTimer = true;
            SpellBuffAdd((ObjAIBase)owner, owner, "GlobalMonsterBuff", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Chars
{
    public class CharScriptZilean : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ChampionChampionDelta", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "APBonusDamageToTowers", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void OnDisconnect(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 6, SpellSlotType.InventorySlots, 1, true, false, false, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptZilean : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? unit = null;
            //object? nextBuffVars = null;
            if(ExecutePeriodically(4, ref this.lastTimeExecuted, false))
            {
                if(!owner.IsDead)
                {
                    ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectFriends AffectHeroes ", default, true, (unit) => 
                    {
                        SpellBuffAdd((ObjAIBase)owner, unit, "HeightenedLearning", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    });
                }
            }
        }
    }
}

namespace Chars
{
    public class CharScriptblueDragon : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "ResistantSkinDragon", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
    }
}
namespace Items
{
    public class CharScriptblueDragon : Script
    {
        class UpdateSelfBuffStats_nextBuffVars
        {
            public int HPPerLevel = 0;
        }
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffStats_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "dragonApplicator") == 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "dragonApplicator", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 100000, true, false, false, default);
            }
            if(GetBuffCountFromCaster(owner, owner, "HPByPlayerLevel") == 0)
            {
                nextBuffVars.HPPerLevel = 200;
                SpellBuffAdd((ObjAIBase)owner, owner, "HPByPlayerLevel", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptCrystal_platform : Script
    {
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SetTargetable(owner, default);
            SetInvulnerable(owner, default);
            SetGhosted(owner, default);
            SetCanMove(owner, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "OdinDisintegrate", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
    }
}

namespace Chars
{
    public class CharScriptredDragon : Script
    {
        class OnHitUnit_nextBuffVars
        {
            public int TickDamage = 0;
        }
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            //object? unit = null;
            OnHitUnit_nextBuffVars nextBuffVars = new();
            damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.43f);
            ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (unit) => 
            {
                if(target != unit)
                {
                    nextBuffVars.TickDamage = 15;
                    SpellBuffAdd((ObjAIBase)attacker, unit, "Burning", 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.DAMAGE, 1, default, default, default, default);
                }
            });
        }
    }
}
namespace Items
{
    public class CharScriptredDragon : Script
    {
        class UpdateSelfBuffStats_nextBuffVars
        {
            public int HPPerLevel = 0;
        }
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffStats_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "DragonVisionBuff") == 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "DragonVisionBuff", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 100000, default, default, default, default);
            }
            if(GetBuffCountFromCaster(owner, owner, "HPByPlayerLevel") == 0)
            {
                nextBuffVars.HPPerLevel = 125;
                SpellBuffAdd((ObjAIBase)owner, owner, "HPByPlayerLevel", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Chars
{
    public class CharScriptWolf : Script
    {
        class OnActivate_nextBuffVars
        {
            public int SpawnTime = 0;
            public float HealthPerMinute = 0;
            public float DamagePerMinute = 0;
            public float AreaDmgReduction = 0;
            public float GoldPerMinute = 0;
            public float ExpPerMinute = 0;
            public bool? UpgradeTimer = null;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnActivate_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpawnTime = 101;
            nextBuffVars.HealthPerMinute = 16.5f;
            nextBuffVars.DamagePerMinute = 0.286f;
            nextBuffVars.AreaDmgReduction = 0.2f;
            nextBuffVars.GoldPerMinute = 0.054f;
            nextBuffVars.ExpPerMinute = 0.2136f;
            nextBuffVars.UpgradeTimer = false;
            SpellBuffAdd((ObjAIBase)owner, owner, "GlobalMonsterBuff", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            IncPermanentGoldReward(owner, -3);
            IncPermanentExpReward(owner, -5);
        }
    }
}

namespace Chars
{
    public class CharScriptYoungWolf : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.43f);
        }
    }
}

namespace Items
{
    public class _1062 : Script
    {
        class UpdateSelfBuffStats_nextBuffVars
        {
            public int HealthVar = 0;
        }
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffStats_nextBuffVars nextBuffVars = new();
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, true))
            {
                nextBuffVars.HealthVar = 200;
                SpellBuffAdd((ObjAIBase)owner, owner, "DoranT2Health", 1, 1, 1.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _1063 : Script
    {
        class UpdateSelfBuffStats_nextBuffVars
        {
            public int HealthVar = 0;
        }
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffStats_nextBuffVars nextBuffVars = new();
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, true))
            {
                nextBuffVars.HealthVar = 200;
                SpellBuffAdd((ObjAIBase)owner, owner, "DoranT2Health", 1, 1, 1.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3001 : Script
    {
        class UpdateSelfBuffStats_nextBuffVars
        {
            public int MagicResistanceMod = 0;
        }
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffStats_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            if(ExecutePeriodically(0.9f, ref this.lastTimeExecuted, false))
            {
                if(!owner.IsDead)
                {
                    nextBuffVars.MagicResistanceMod = -20;
                    SpellBuffAdd((ObjAIBase)owner, owner, "AbyssalScepterAuraSelf", 1, 1, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "AbyssalScepterAura", false, (unit) => 
                    {
                        SpellBuffAdd((ObjAIBase)owner, unit, "AbyssalScepterAura", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SHRED, 0, true, false, false, default);
                    });
                }
            }
        }
    }
}

namespace Items
{
    public class _3003 : Script
    {
        float maxMana = 0;
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float bonusAbilityPower = 0;
            //object? slot = null;
            bonusAbilityPower = Math(0.03f, MathOp.MO_MULTIPLY, this.maxMana);
            IncFlatMagicDamageMod(owner, bonusAbilityPower);
            SetSpellToolTipVar(charVars.TearBonusMana, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            //object? slot = null;
            this.maxMana = GetMaxPAR(owner);
            if(ExecutePeriodically(0.9f, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "TearOfTheGoddessTrack", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            SetSpellToolTipVar(charVars.TearBonusMana, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? slot = null;
            if(GetBuffCountFromCaster(owner, owner, "TearOfTheGoddessTrack") > 0)
            {
                
            }
            else
            {
                charVars.TearBonusMana = 0;
            }
            SetSpellToolTipVar(charVars.TearBonusMana, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
    }
}

namespace Items
{
    public class _3004 : Script
    {
        float maxMana = 0;
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            //object? slot = null;
            this.maxMana = GetMaxPAR(owner);
            if(ExecutePeriodically(0.9f, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "TearOfTheGoddessTrack", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "ManamuneAttackTrack", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "ManamuneAttackConversion", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            SetSpellToolTipVar(charVars.TearBonusMana, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? slot = null;
            if(GetBuffCountFromCaster(owner, owner, "TearOfTheGoddessTrack") > 0)
            {
                
            }
            else
            {
                charVars.TearBonusMana = 0;
            }
            SetSpellToolTipVar(charVars.TearBonusMana, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
    }
}

namespace Items
{
    public class _3005 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "AtmasImpaler", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "AtmasImpaler") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "AtmasImpaler", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3010 : Script
    {
        int ownerLevel = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int tempLevel = 0;
            //object? nextBuffVars = null;
            tempLevel = GetLevel(owner);
            if(tempLevel > this.ownerLevel)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "CatalystHeal", 1, 1, 8.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                this.ownerLevel = tempLevel;
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            this.ownerLevel = GetLevel(owner);
        }
    }
}

namespace Items
{
    public class _3020 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncFlatMagicPenetrationMod(owner, 20);
        }
    }
}

namespace Items
{
    public class _3022 : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    if(target is ObjAIBase)
                    {
                        if(target is BaseTurret)
                        {
                            
                        }
                        else
                        {
                            if(IsRanged(owner))
                            {
                                SpellBuffAdd((ObjAIBase)target, target, "Internal_30Slow", 1, 1, 2, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                            }
                            else
                            {
                                if(GetBuffCountFromCaster(owner, default, "JudicatorRighteousFury") > 0)
                                {
                                    SpellBuffAdd((ObjAIBase)target, target, "Internal_30Slow", 1, 1, 2, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                                }
                                else
                                {
                                    SpellBuffAdd((ObjAIBase)target, target, "Internal_40Slow", 1, 1, 2, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                                }
                            }
                            SpellBuffAdd((ObjAIBase)owner, target, "ItemSlow", 1, 1, 2, default, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, default, default);
                        }
                    }
                }
            }
        }
    }
}

namespace Items
{
    public class _3024 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "GlacialShroud", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "GlacialShroud") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "GlacialShroud", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3026 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, true))
            {
                if(GetBuffCountFromCaster(owner, owner, "HasBeenRevived") == 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "GuardianAngel") == 0)
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "WillRevive", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            ObjAIBase? caster = null;
            //object? nextBuffVars = null;
            if(owner is not Champion)
            {
                caster = GetPetOwner((Pet)owner);
                if(GetBuffCountFromCaster(caster, caster, "WillRevive") > 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "WillRevive", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                }
                else
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "HasBeenRevived", 1, 1, 300, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
            else
            {
                if(GetBuffCountFromCaster(owner, owner, "WillRevive") == 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "HasBeenRevived") == 0)
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "WillRevive", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    }
                }
            }
        }
    }
}

namespace Items
{
    public class _3027 : Script
    {
        float bonusHealth = 0;
        float bonusAbilityPower = 0;
        float bonusMana = 0;
        float lastTimeExecuted = 0;
        int ownerLevel = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? slot = null;
            IncFlatHPPoolMod(owner, this.bonusHealth);
            IncFlatMagicDamageMod(owner, this.bonusAbilityPower);
            IncFlatPARPoolMod(owner, this.bonusMana);
            SetSpellToolTipVar(this.bonusHealth, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            SetSpellToolTipVar(this.bonusAbilityPower, 3, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            SetSpellToolTipVar(this.bonusMana, 2, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            Particle? thisParticle = null;
            //object? _ = null;
            int tempLevel = 0;
            //object? nextBuffVars = null;
            if(ExecutePeriodically(60, ref this.lastTimeExecuted, false))
            {
                this.bonusHealth = Math(this.bonusHealth, MathOp.MO_ADD, 18);
                this.bonusMana = Math(this.bonusMana, MathOp.MO_ADD, 20);
                this.bonusAbilityPower = Math(this.bonusAbilityPower, MathOp.MO_ADD, 2);
                this.bonusHealth = Math(this.bonusHealth, MathOp.MO_MIN, 180);
                this.bonusMana = Math(this.bonusMana, MathOp.MO_MIN, 200);
                this.bonusAbilityPower = Math(this.bonusAbilityPower, MathOp.MO_MIN, 20);
                SpellEffectCreate(out thisParticle, out _, "RodofAges_itm.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, false, default, default, default);
            }
            tempLevel = GetLevel(owner);
            if(tempLevel > this.ownerLevel)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "CatalystHeal", 1, 1, 8.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                this.ownerLevel = tempLevel;
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            this.bonusHealth = 0;
            this.bonusMana = 0;
            this.bonusAbilityPower = 0;
            this.ownerLevel = GetLevel(owner);
        }
    }
}

namespace Items
{
    public class _3028 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ChaliceOfHarmony", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "ChaliceOfHarmony") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ChaliceOfHarmony", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3031 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "InfinityEdge", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "InfinityEdge") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "InfinityEdge", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3035 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "LastWhisper", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "LastWhisper") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "LastWhisper", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3037 : Script
    {
        class UpdateSelfBuffActions_nextBuffVars
        {
            public float ManaRegenBonus = 0;
        }
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffActions_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            ObjAIBase? caster = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                if(!owner.IsDead)
                {
                    nextBuffVars.ManaRegenBonus = 1.44f;
                    if(owner is Champion)
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectFriends AffectHeroes ", default, true, (unit) => 
                        {
                            if(unit == owner)
                            {
                                SpellBuffAdd((ObjAIBase)attacker, unit, "ManaManipulatorAuraSelf", 1, 1, 1.1f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
                            }
                            else
                            {
                                SpellBuffAdd((ObjAIBase)attacker, unit, "ManaManipulatorAuraFriend", 1, 1, 1.1f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
                            }
                        });
                    }
                    else
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectFriends AffectHeroes ", default, true, (unit) => 
                        {
                            caster = GetPetOwner((Pet)owner);
                            if(unit == owner)
                            {
                                if(GetBuffCountFromCaster(owner, caster, "ManaManipulatorAuraFriend") == 0)
                                {
                                    SpellBuffAdd((ObjAIBase)attacker, unit, "ManaManipulatorAuraSelf", 1, 1, 4.1f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
                                }
                            }
                            else if(unit != caster)
                            {
                                SpellBuffAdd((ObjAIBase)attacker, unit, "ManaManipulatorAuraFriend", 1, 1, 4.1f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
                            }
                        });
                    }
                }
            }
        }
    }
}

namespace Items
{
    public class _3041 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            int count = 0;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "MejaisCheck", 1, 1, 1.2f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
                count = GetBuffCountFromAll(owner, "MejaisStats");
                if(count == 20)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "MejaisCap", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
                }
            }
        }
        public void OnDeath(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float count = 0;
            count = GetBuffCountFromAll(owner, "MejaisStats");
            if(count > 0)
            {
                count = Math(0.33f, MathOp.MO_MULTIPLY, count);
                if(count < 1.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "MejaisStats", 1);
                }
                else if(count < 2.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "MejaisStats", 2);
                }
                else if(count < 3.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "MejaisStats", 3);
                }
                else if(count < 4.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "MejaisStats", 4);
                }
                else if(count < 5.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "MejaisStats", 5);
                }
                else if(count < 7)
                {
                    SpellBuffRemoveStacks(owner, owner, "MejaisStats", 6);
                }
            }
        }
    }
}

namespace Items
{
    public class _3044 : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    if(target is ObjAIBase)
                    {
                        if(RandomChance() < 0.25f)
                        {
                            if(target is not BaseTurret)
                            {
                                SpellBuffAdd((ObjAIBase)target, target, "Internal_30Slow", 1, 1, 2.5f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
                                SpellBuffAdd((ObjAIBase)owner, target, "ItemSlow", 1, 1, 2.5f, default, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, default, default, default, default);
                            }
                        }
                    }
                }
            }
        }
    }
}

namespace Items
{
    public class _3047 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(10, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "3047", 1, 1, 11, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3050 : Script
    {
        class UpdateSelfBuffActions_nextBuffVars
        {
            public float LifeStealMod = 0;
            public float AttackSpeedMod = 0;
            public int HealthRegenMod = 0;
            public int ArmorMod = 0;
        }
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffActions_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            ObjAIBase? caster = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                if(!owner.IsDead)
                {
                    nextBuffVars.LifeStealMod = 0.2f;
                    nextBuffVars.AttackSpeedMod = 0.2f;
                    nextBuffVars.HealthRegenMod = 6;
                    if(owner is Champion)
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectFriends AffectHeroes ", default, true, (unit) => 
                        {
                            if(unit == owner)
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "RallyingBannerAuraSelf", 1, 1, 1.2f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                            }
                            else
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "RallyingBannerAuraFriend", 1, 1, 1.2f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                            }
                        });
                    }
                    else
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectFriends AffectHeroes ", default, true, (unit) => 
                        {
                            caster = GetPetOwner((Pet)owner);
                            if(unit == owner)
                            {
                                if(GetBuffCountFromCaster(owner, caster, "RallyingBannerAuraFriend") == 0)
                                {
                                    SpellBuffAdd((ObjAIBase)owner, unit, "RallyingBannerAuraSelf", 1, 1, 1.2f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                                }
                            }
                            else if(unit != caster)
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "RallyingBannerAuraFriend", 1, 1, 1.2f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                            }
                        });
                    }
                    nextBuffVars.ArmorMod = -20;
                    ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RallyingBanner", false, (unit) => 
                    {
                        SpellBuffAdd((ObjAIBase)owner, unit, "RallyingBanner", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SHRED, 0, true, true, false, default);
                    });
                }
            }
        }
    }
}

namespace Items
{
    public class _3057 : Script
    {
        class OnSpellCast_spellVars
        {
            //public object? DoesntTriggerSpellCasts = null;
        }
        class OnSpellCast_nextBuffVars
        {
            public object? BaseDamage = null;
            public bool? IsSheen = null;
        }
        int cooldownResevoir = 0;
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnSpellCast_spellVars spellVars = new();
            float baseDamage = 0;
            OnSpellCast_nextBuffVars nextBuffVars = new();
            if(spellVars.DoesntTriggerSpellCasts == true)
            {
                
            }
            else
            {
                if(GetBuffCountFromCaster(owner, owner, "SheenDelay") == 0)
                {
                    baseDamage = GetBaseAttackDamage(owner);
                    nextBuffVars.BaseDamage = baseDamage;
                    nextBuffVars.IsSheen = true;
                    SpellBuffAdd((ObjAIBase)owner, owner, "Sheen", 1, 1, 10, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            this.cooldownResevoir = 0;
        }
    }
}

namespace Items
{
    public class _3065 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "SpiritVisage", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "SpiritVisage") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "SpiritVisage", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3066 : Script
    {
        public void UpdateAura(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            DefUpdateAura(owner.Position, 200, UNITSCAN_Friends, "Fervor");
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? _ = null;
            SpellEffectCreate(out _, out _, "Fervor", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
        }
    }
}

namespace Items
{
    public class _3067 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Kindlegem", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "Kindlegem") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Kindlegem", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3068 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, true))
            {
                if(!owner.IsDead)
                {
                    SpellBuffAdd((ObjAIBase)attacker, owner, "SunfireCloakParticle", 1, 1, 1.5f, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
                }
            }
        }
        public void OnDeath(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "SunfireCloakParticle", (ObjAIBase)owner, default);
        }
    }
}

namespace Items
{
    public class _3069 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ShurelyasCrest", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3070 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? slot = null;
            SetSpellToolTipVar(charVars.TearBonusMana, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            //object? slot = null;
            if(ExecutePeriodically(0.95f, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "TearOfTheGoddessTrack", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            SetSpellToolTipVar(charVars.TearBonusMana, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? slot = null;
            if(GetBuffCountFromCaster(owner, owner, "TearOfTheGoddessTrack") > 0)
            {
                
            }
            else
            {
                charVars.TearBonusMana = 0;
            }
            SetSpellToolTipVar(charVars.TearBonusMana, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
    }
}

namespace Items
{
    public class _3071 : Script
    {
        class OnHitUnit_nextBuffVars
        {
            public int ArmorReduction = 0;
        }
        class OnBeingDodged_nextBuffVars
        {
            public int ArmorReduction = 0;
        }
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            OnHitUnit_nextBuffVars nextBuffVars = new();
            if(hitResult != HitResult.HIT_Miss)
            {
                if(target is ObjAIBase)
                {
                    if(target is BaseTurret)
                    {
                        
                    }
                    else
                    {
                        nextBuffVars.ArmorReduction = -15;
                        SpellBuffAdd((ObjAIBase)attacker, target, "BlackCleaver", 3, 1, 5, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.SHRED, 0, true, false, false, default);
                    }
                }
            }
        }
        public void OnBeingDodged(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnBeingDodged_nextBuffVars nextBuffVars = new();
            if(attacker is ObjAIBase)
            {
                if(attacker is not BaseTurret)
                {
                    nextBuffVars.ArmorReduction = -15;
                    SpellBuffAdd((ObjAIBase)owner, attacker, "BlackCleaver", 3, 1, 5, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.SHRED, 0, true, false, false, default);
                }
            }
        }
    }
}

namespace Items
{
    public class _3072 : Script
    {
        float physicalDamageBonus = 0;
        float percentLifeSteal = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? slot = null;
            float percentLifeStealTT = 0;
            IncFlatPhysicalDamageMod(owner, this.physicalDamageBonus);
            IncPercentLifeStealMod(owner, this.percentLifeSteal);
            SetSpellToolTipVar(this.physicalDamageBonus, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            percentLifeStealTT = Math(this.percentLifeSteal, MathOp.MO_MULTIPLY, 100);
            SetSpellToolTipVar(percentLifeStealTT, 2, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
        public void OnKill(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            this.physicalDamageBonus = Math(this.physicalDamageBonus, MathOp.MO_ADD, 1);
            this.percentLifeSteal = Math(this.percentLifeSteal, MathOp.MO_ADD, 0.0025f);
            this.physicalDamageBonus = Math(this.physicalDamageBonus, MathOp.MO_MIN, 40);
            this.percentLifeSteal = Math(this.percentLifeSteal, MathOp.MO_MIN, 0.1f);
        }
        public void OnDeath(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            this.physicalDamageBonus = 0;
            this.percentLifeSteal = 0;
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            this.physicalDamageBonus = 0;
            this.percentLifeSteal = 0;
        }
    }
}

namespace Items
{
    public class _3075 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Thornmail", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "Thornmail") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Thornmail", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3077 : Script
    {
        class OnHitUnit_tempTable1
        {
            public float ThirdDA = 0;
        }
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            //object? _ = null;
            //object? damageAmount = null;
            OnHitUnit_tempTable1 tempTable1 = new();
            //object? unit = null;
            //object? damageType = null;
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    SpellEffectCreate(out _, out _, "TiamatMelee_itm.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, default, default, default, default, default, default);
                    if(IsRanged(owner))
                    {
                        tempTable1.ThirdDA = Math(0.35f, MathOp.MO_MULTIPLY, damageAmount);
                    }
                    else
                    {
                        if(GetBuffCountFromCaster(owner, default, "JudicatorRighteousFury") > 0)
                        {
                            tempTable1.ThirdDA = Math(0.35f, MathOp.MO_MULTIPLY, damageAmount);
                        }
                        else
                        {
                            tempTable1.ThirdDA = Math(0.5f, MathOp.MO_MULTIPLY, damageAmount);
                        }
                    }
                    ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 210, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                    {
                        if(target != unit)
                        {
                            if(damageType == DamageType.DAMAGE_TYPE_MAGICAL)
                            {
                                ApplyDamage((ObjAIBase)owner, unit, tempTable1.ThirdDA, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0, 1, true, true, (ObjAIBase)attacker);
                            }
                            else if(damageType == DamageType.DAMAGE_TYPE_PHYSICAL)
                            {
                                ApplyDamage((ObjAIBase)owner, unit, tempTable1.ThirdDA, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0, 1, true, true, (ObjAIBase)attacker);
                            }
                            else
                            {
                                ApplyDamage((ObjAIBase)owner, unit, tempTable1.ThirdDA, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0, 1, true, true, (ObjAIBase)attacker);
                            }
                        }
                    });
                }
            }
        }
    }
}

namespace Items
{
    public class _3078 : Script
    {
        class OnSpellCast_spellVars
        {
            //public object? DoesntTriggerSpellCasts = null;
        }
        class OnSpellCast_nextBuffVars
        {
            public object? BaseDamage = null;
            public bool? IsSheen = null;
        }
        int cooldownResevoir = 0;
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnSpellCast_spellVars spellVars = new();
            float baseDamage = 0;
            OnSpellCast_nextBuffVars nextBuffVars = new();
            if(spellVars.DoesntTriggerSpellCasts == true)
            {
                
            }
            else
            {
                if(GetBuffCountFromCaster(owner, owner, "SheenDelay") == 0)
                {
                    baseDamage = GetBaseAttackDamage(owner);
                    nextBuffVars.BaseDamage = baseDamage;
                    nextBuffVars.IsSheen = false;
                    SpellBuffAdd((ObjAIBase)owner, owner, "Sheen", 1, 1, 10, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
                }
            }
        }
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    if(target is ObjAIBase)
                    {
                        if(RandomChance() < 0.25f)
                        {
                            if(target is not BaseTurret)
                            {
                                SpellBuffAdd((ObjAIBase)target, target, "Internal_35Slow", 1, 1, 2.5f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                                SpellBuffAdd((ObjAIBase)owner, target, "ItemSlow", 1, 1, 2.5f, default, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, default, default);
                            }
                        }
                    }
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            this.cooldownResevoir = 0;
        }
    }
}

namespace Items
{
    public class _3082 : Script
    {
        class OnBeingHit_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public float AttackSpeedMod = 0;
        }
        public void OnBeingHit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            OnBeingHit_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "RanduinsOmen") == 0)
            {
                if(RandomChance() < 0.2f)
                {
                    if(attacker is BaseTurret)
                    {
                        
                    }
                    else
                    {
                        nextBuffVars.MoveSpeedMod = -0.35f;
                        SpellBuffAdd((ObjAIBase)owner, attacker, "Slow", 100, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, default, default);
                        nextBuffVars.AttackSpeedMod = -0.35f;
                        SpellBuffAdd((ObjAIBase)owner, attacker, "Cripple", 100, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
                    }
                }
            }
        }
    }
}

namespace Items
{
    public class _3083 : Script
    {
        float extraHP = 0;
        float extraRegen = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? slot = null;
            float extraRegenTT = 0;
            IncFlatHPPoolMod(owner, this.extraHP);
            IncFlatHPRegenMod(owner, this.extraRegen);
            SetSpellToolTipVar(this.extraHP, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            extraRegenTT = Math(this.extraRegen, MathOp.MO_MULTIPLY, 5);
            SetSpellToolTipVar(extraRegenTT, 2, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
        public void OnKill(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            if(target is Champion)
            {
                this.extraHP = Math(this.extraHP, MathOp.MO_ADD, 35);
                this.extraRegen = Math(this.extraRegen, MathOp.MO_ADD, 0.2f);
                this.extraHP = Math(this.extraHP, MathOp.MO_MIN, 350);
                this.extraRegen = Math(this.extraRegen, MathOp.MO_MIN, 2);
            }
            else
            {
                this.extraHP = Math(this.extraHP, MathOp.MO_ADD, 3.5f);
                this.extraRegen = Math(this.extraRegen, MathOp.MO_ADD, 0.02f);
                this.extraHP = Math(this.extraHP, MathOp.MO_MIN, 350);
                this.extraRegen = Math(this.extraRegen, MathOp.MO_MIN, 2);
            }
        }
        public void OnAssist(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            if(target is Champion)
            {
                this.extraHP = Math(this.extraHP, MathOp.MO_ADD, 35);
                this.extraRegen = Math(this.extraRegen, MathOp.MO_ADD, 0.2f);
                this.extraHP = Math(this.extraHP, MathOp.MO_MIN, 350);
                this.extraRegen = Math(this.extraRegen, MathOp.MO_MIN, 2);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            this.extraHP = 0;
            this.extraRegen = 0;
        }
    }
}

namespace Items
{
    public class _3089 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(10, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ZhonyasRing", 1, 1, 11, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3091 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "WitsEnd", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "WitsEnd") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "WitsEnd", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3093 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "AvariceBlade", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3096 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "PhilosophersStone", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3097 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? unit = null;
            //object? nextBuffVars = null;
            ObjAIBase? caster = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                if(!owner.IsDead)
                {
                    if(owner is Champion)
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectFriends AffectHeroes ", default, true, (unit) => 
                        {
                            if(owner == unit)
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "EmblemOfValorParticle", 1, 1, 1.2f, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
                            }
                            else
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "EmblemOfValor", 1, 1, 1.2f, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
                            }
                        });
                    }
                    else
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectFriends AffectHeroes ", default, true, (unit) => 
                        {
                            caster = GetPetOwner((Pet)owner);
                            if(unit == owner)
                            {
                                if(GetBuffCountFromCaster(owner, caster, "EmblemOfValor") == 0)
                                {
                                    SpellBuffAdd((ObjAIBase)owner, unit, "EmblemOfValorParticle", 1, 1, 1.2f, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
                                }
                            }
                            if(unit == owner)
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "EmblemOfValorParticle", 1, 1, 1.2f, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
                            }
                            else if(unit != caster)
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "EmblemOfValor", 1, 1, 1.2f, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
                            }
                        });
                    }
                }
            }
        }
    }
}

namespace Items
{
    public class _3098 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "KagesLuckyPick", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3099 : Script
    {
        class UpdateSelfBuffActions_nextBuffVars
        {
            public float ManaRegenMod = 0;
            public float CooldownReduction = 0;
        }
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffActions_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            ObjAIBase? caster = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                if(!owner.IsDead)
                {
                    nextBuffVars.ManaRegenMod = 2.4f;
                    nextBuffVars.CooldownReduction = -0.1f;
                    if(owner is Champion)
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectFriends AffectHeroes ", default, true, (unit) => 
                        {
                            if(unit == owner)
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "SoulShroudAuraSelf", 1, 1, 1.2f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                            }
                            else
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "SoulShroudAuraFriend", 1, 1, 1.2f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                            }
                        });
                    }
                    else
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectFriends AffectHeroes ", default, true, (unit) => 
                        {
                            caster = GetPetOwner((Pet)owner);
                            if(unit == owner)
                            {
                                if(GetBuffCountFromCaster(owner, caster, "SoulShroudAuraFriend") == 0)
                                {
                                    SpellBuffAdd((ObjAIBase)owner, unit, "SoulShroudAuraSelf", 1, 1, 1.2f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                                }
                            }
                            if(unit == owner)
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "SoulShroudAuraSelf", 1, 1, 1.2f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                            }
                            else if(unit != caster)
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "SoulShroudAuraFriend", 1, 1, 1.2f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                            }
                        });
                    }
                }
            }
        }
    }
}

namespace Items
{
    public class _3100 : Script
    {
        class OnSpellCast_spellVars
        {
            //public object? DoesntTriggerSpellCasts = null;
        }
        class OnSpellCast_nextBuffVars
        {
            public object? BaseDamage = null;
            public object? AbilityPower = null;
        }
        int cooldownResevoir = 0;
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnSpellCast_spellVars spellVars = new();
            float abilityPower = 0;
            float baseDamage = 0;
            OnSpellCast_nextBuffVars nextBuffVars = new();
            if(spellVars.DoesntTriggerSpellCasts == true)
            {
                
            }
            else
            {
                if(GetBuffCountFromCaster(owner, owner, "SheenDelay") == 0)
                {
                    abilityPower = GetFlatMagicDamageMod(owner);
                    baseDamage = GetBaseAttackDamage(owner);
                    nextBuffVars.BaseDamage = baseDamage;
                    nextBuffVars.AbilityPower = abilityPower;
                    SpellBuffAdd((ObjAIBase)owner, owner, "LichBane", 1, 1, 10, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            this.cooldownResevoir = 0;
        }
    }
}

namespace Items
{
    public class _3101 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Sting", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "Sting") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Sting", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3102 : Script
    {
        class UpdateSelfBuffActions_nextBuffVars
        {
            public bool? WillRemove = null;
        }
        class OnActivate_nextBuffVars
        {
            public bool? WillRemove = null;
        }
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffActions_nextBuffVars nextBuffVars = new();
            if(ExecutePeriodically(2, ref this.lastTimeExecuted, false))
            {
                if(GetBuffCountFromCaster(owner, owner, "BansheesVeilTimer") == 0)
                {
                    nextBuffVars.WillRemove = false;
                    SpellBuffAdd((ObjAIBase)owner, owner, "BansheesVeil", 1, 1, 3, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            ObjAIBase? caster = null;
            OnActivate_nextBuffVars nextBuffVars = new();
            if(owner is not Champion)
            {
                caster = GetPetOwner((Pet)owner);
                if(GetBuffCountFromCaster(caster, caster, "BansheesVeil") > 0)
                {
                    nextBuffVars.WillRemove = false;
                    SpellBuffAdd((ObjAIBase)owner, owner, "BansheesVeil", 1, 1, 10, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
                }
            }
            else
            {
                if(GetBuffCountFromCaster(owner, owner, "BansheesVeil") == 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "BansheesVeilTimer") == 0)
                    {
                        nextBuffVars.WillRemove = false;
                        SpellBuffAdd((ObjAIBase)owner, owner, "BansheesVeil", 1, 1, 10, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
                    }
                }
            }
        }
    }
}

namespace Items
{
    public class _3105 : Script
    {
        class UpdateSelfBuffActions_nextBuffVars
        {
            public int MagicResistBonus = 0;
            public int ArmorBonus = 0;
            public int DamageBonus = 0;
        }
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffActions_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            ObjAIBase? caster = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                nextBuffVars.MagicResistBonus = 15;
                nextBuffVars.ArmorBonus = 12;
                nextBuffVars.DamageBonus = 8;
                if(owner is Champion)
                {
                    ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectFriends AffectHeroes ", default, true, (unit) => 
                    {
                        if(unit == owner)
                        {
                            SpellBuffAdd((ObjAIBase)attacker, unit, "AegisoftheLegionAuraSelf", 1, 1, 1.2f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        }
                        else
                        {
                            if(!owner.IsDead)
                            {
                                SpellBuffAdd((ObjAIBase)attacker, unit, "AegisoftheLegionAuraFriend", 1, 1, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                            }
                        }
                    });
                }
                else
                {
                    if(!owner.IsDead)
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectFriends AffectHeroes ", default, true, (unit) => 
                        {
                            caster = GetPetOwner((Pet)owner);
                            if(unit == owner)
                            {
                                if(GetBuffCountFromCaster(owner, caster, "AegisoftheLegionAuraFriend") == 0)
                                {
                                    SpellBuffAdd((ObjAIBase)attacker, unit, "AegisoftheLegionAuraSelf", 1, 1, 1.2f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                                }
                            }
                            else if(unit != caster)
                            {
                                SpellBuffAdd((ObjAIBase)attacker, unit, "AegisoftheLegionAuraFriend", 1, 1, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                            }
                        });
                    }
                }
            }
        }
    }
}

namespace Items
{
    public class _3106 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, true))
            {
                if(GetBuffCountFromCaster(owner, owner, "WriggleLantern") == 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "MadredsRazors", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                }
                else
                {
                    SpellBuffRemove(owner, "MadredsRazors", (ObjAIBase)owner, default);
                }
            }
        }
    }
}

namespace Items
{
    public class _3108 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "FiendishCodex", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "FiendishCodex") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "FiendishCodex", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3109 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ForceofNature", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, default, default, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "ForceofNature") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ForceofNature", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3110 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            //object? unit = null;
            if(!owner.IsDead)
            {
                if(ExecutePeriodically(0.9f, ref this.lastTimeExecuted, false))
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "FrozenHeart", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
                    ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (unit) => 
                    {
                        SpellBuffAdd((ObjAIBase)owner, unit, "FrozenHeartAura", 1, 1, 1, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, default, default, default, default);
                    });
                }
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "FrozenHeart") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "FrozenHeart", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3111 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "Hardening", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "MercuryTreads") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "MercuryTreads", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3114 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Malady", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "Malady") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Malady", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3115 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "NashorsToothCD", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "NashorsToothCD") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "NashorsToothCD", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3116 : Script
    {
        public void OnDealDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            
        }
        public void OnPreDealDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    if(owner.Team != target.Team)
                    {
                        if(damageSource == default)
                        {
                            SpellBuffAdd((ObjAIBase)target, target, "Internal_35Slow", 1, 1, 1.5f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                            SpellBuffAdd((ObjAIBase)attacker, target, "ItemSlow", 1, 1, 1.5f, default, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                        }
                        else if(damageSource == default)
                        {
                            SpellBuffAdd((ObjAIBase)target, target, "Internal_15Slow", 1, 1, 1.5f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                            SpellBuffAdd((ObjAIBase)attacker, target, "ItemSlow", 1, 1, 1.5f, default, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                        }
                        else if(damageSource == default)
                        {
                            SpellBuffAdd((ObjAIBase)target, target, "Internal_15Slow", 1, 1, 1.5f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                            SpellBuffAdd((ObjAIBase)attacker, target, "ItemSlow", 1, 1, 1.5f, default, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                        }
                    }
                }
            }
        }
    }
}

namespace Items
{
    public class _3117 : Script
    {
        public void OnPreDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "BootsOfMobilityDebuff", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
        public void OnPreDealDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "BootsOfMobilityDebuff", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
        public void OnDeactivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            if(GetBuffCountFromCaster(owner, owner, "BootsOfMobilityDebuff") > 0)
            {
                SpellBuffRemove(owner, "BootsOfMobilityDebuff", (ObjAIBase)owner, default);
            }
        }
    }
}

namespace Items
{
    public class _3123 : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            if(target is not BaseTurret)
            {
                if(target is ObjAIBase)
                {
                    if(owner is not Champion)
                    {
                        attacker = GetPetOwner((Pet)owner);
                    }
                    SpellBuffAdd((ObjAIBase)attacker, target, "Mourning", 1, 1, 8, default, BuffAddType.RENEW_EXISTING, BuffType.DAMAGE, 0, true, false, default, default);
                }
            }
        }
    }
}

namespace Items
{
    public class _3124 : Script
    {
        class OnSpellCast_spellVars
        {
            //public object? DoesntTriggerSpellCasts = null;
        }
        float lastTimeExecuted = 0;
        float cooldownResevoir = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            if(ExecutePeriodically(2.85f, ref this.lastTimeExecuted, false))
            {
                if(this.cooldownResevoir < 2)
                {
                    this.cooldownResevoir = Math(1, MathOp.MO_ADD, this.cooldownResevoir);
                }
            }
        }
        public void OnSpellCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            OnSpellCast_spellVars spellVars = new();
            //object? nextBuffVars = null;
            if(spellVars.DoesntTriggerSpellCasts != true)
            {
                if(this.cooldownResevoir > 0)
                {
                    if(this.cooldownResevoir == 2)
                    {
                        this.lastTimeExecuted = GetTime();
                    }
                    SpellBuffAdd((ObjAIBase)owner, owner, "Rageblade", 8, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, default, default, default, default);
                }
            }
        }
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "Rageblade", 8, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, default, default, default, default);
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            this.cooldownResevoir = 2;
        }
        public void OnDeactivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPermanentPercentAttackSpeedMod(owner, -0.04f);
            IncPermanentFlatMagicDamageMod(owner, -7);
        }
        public void OnBeingDodged(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "Rageblade", 8, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, default, default, default, default);
        }
        public void OnMiss(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "Rageblade", 8, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, default, default, default, default);
        }
    }
}

namespace Items
{
    public class _3126 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(10, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Bloodrazor", 1, 1, 11, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3128 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "DeathfireGrasp", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3131 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(10, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "LightstrikerApplicator", 1, 1, 11, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3132 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "HeartOfGold", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3134 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Brutalizer", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "Brutalizer") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Brutalizer", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3135 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "VoidStaff", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3136 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "HauntingGuise", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3138 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            int count = 0;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "LeviathanCheck", 1, 1, 1.2f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
                count = GetBuffCountFromAll(owner, "LeviathanStats");
                if(count == 20)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "LeviathanCap", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
                }
            }
        }
        public void OnDeath(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float count = 0;
            count = GetBuffCountFromAll(owner, "LeviathanStats");
            if(count > 0)
            {
                count = Math(0.33f, MathOp.MO_MULTIPLY, count);
                if(count < 1.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "LeviathanStats", 1);
                }
                else if(count < 2.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "LeviathanStats", 2);
                }
                else if(count < 3.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "LeviathanStats", 3);
                }
                else if(count < 4.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "LeviathanStats", 4);
                }
                else if(count < 5.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "LeviathanStats", 5);
                }
                else if(count < 7)
                {
                    SpellBuffRemoveStacks(owner, owner, "LeviathanStats", 6);
                }
            }
        }
    }
}

namespace Items
{
    public class _3141 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            int count = 0;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "MuramasaCheck", 1, 1, 1.2f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
                count = GetBuffCountFromAll(owner, "MuramasaStats");
                if(count == 20)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "MuramasaCap", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
                }
            }
        }
        public void OnDeath(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float count = 0;
            count = GetBuffCountFromAll(owner, "MuramasaStats");
            if(count > 0)
            {
                count = Math(0.33f, MathOp.MO_MULTIPLY, count);
                if(count < 1.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "MuramasaStats", 1);
                }
                else if(count < 2.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "MuramasaStats", 2);
                }
                else if(count < 3.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "MuramasaStats", 3);
                }
                else if(count < 4.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "MuramasaStats", 4);
                }
                else if(count < 5.5f)
                {
                    SpellBuffRemoveStacks(owner, owner, "MuramasaStats", 5);
                }
                else if(count < 7)
                {
                    SpellBuffRemoveStacks(owner, owner, "MuramasaStats", 6);
                }
            }
        }
    }
}

namespace Items
{
    public class _3142 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "YoumusBlade", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3143 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "RanduinsOmen", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3145 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "HextechRevolver", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "HextechRevolver") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "HextechRevolver", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3146 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "HextechGunblade", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "HextechGunblade") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "HextechGunblade", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3152 : Script
    {
        class UpdateSelfBuffActions_nextBuffVars
        {
            public int AP_Buff = 0;
            public float SpellVamp_Buff = 0;
        }
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffActions_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            ObjAIBase? caster = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                nextBuffVars.AP_Buff = 30;
                nextBuffVars.SpellVamp_Buff = 0.25f;
                if(owner is Champion)
                {
                    ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectFriends AffectHeroes ", default, true, (unit) => 
                    {
                        if(unit == owner)
                        {
                            SpellBuffAdd((ObjAIBase)owner, unit, "WillOfTheAncientsSelf", 1, 1, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        }
                        else
                        {
                            if(!owner.IsDead)
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "WillOfTheAncientsFriendly", 1, 1, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                            }
                        }
                    });
                }
                else
                {
                    if(!owner.IsDead)
                    {
                        ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectFriends AffectHeroes ", default, true, (unit) => 
                        {
                            caster = GetPetOwner((Pet)owner);
                            if(unit == owner)
                            {
                                if(GetBuffCountFromCaster(owner, caster, "WillOfTheAncientsFriendly") == 0)
                                {
                                    SpellBuffAdd((ObjAIBase)owner, unit, "WillOfTheAncientsSelf", 1, 1, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                                }
                            }
                            if(unit == owner)
                            {
                                
                            }
                            else if(unit != caster)
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "WillOfTheAncientsFriendly", 1, 1, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                            }
                        });
                    }
                }
            }
        }
    }
}

namespace Items
{
    public class _3154 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "WriggleLantern", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                if(GetBuffCountFromCaster(owner, owner, "MadredsRazors") > 0)
                {
                    SpellBuffRemove(owner, "MadredsRazors", (ObjAIBase)owner, default);
                }
            }
        }
    }
}

namespace Items
{
    public class _3155 : Script
    {
        class OnPreDamage_nextBuffVars
        {
            public int ShieldHealth = 0;
        }
        public void OnPreDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            TeamId teamID;
            //object? damageType = null;
            float damageAmount = 0;
            float hP = 0;
            float projectedHP = 0;
            float maxHP = 0;
            float newPercentHP = 0;
            Particle? c = null;
            //object? _ = null;
            Particle? a = null;
            Particle? b = null;
            float shieldHealth = 0;
            OnPreDamage_nextBuffVars nextBuffVars = new();
            teamID = GetTeamID(default);
            if(GetBuffCountFromCaster(owner, owner, "HexdrinkerTimer") == 0)
            {
                if(GetBuffCountFromCaster(owner, owner, "Hexdrinker") == 0)
                {
                    if(damageType == DamageType.DAMAGE_TYPE_MAGICAL)
                    {
                        if(damageAmount > 0)
                        {
                            hP = GetHealth(owner);
                            projectedHP = Math(hP, MathOp.MO_SUBTRACT, damageAmount);
                            maxHP = GetMaxHealth(owner);
                            newPercentHP = Math(projectedHP, MathOp.MO_DIVIDE, maxHP);
                            if(newPercentHP < 0.3f)
                            {
                                SpellEffectCreate(out c, out _, "hexTech_dmg_shield_birth.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, true, default, default, default, default, default, default);
                                SpellEffectCreate(out a, out _, "hexTech_dmg_shield_onHit_01.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
                                SpellEffectCreate(out b, out _, "hexTech_dmg_shield_onHit_02.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
                                shieldHealth = 300;
                                if(shieldHealth >= damageAmount)
                                {
                                    shieldHealth = Math(shieldHealth, MathOp.MO_SUBTRACT, damageAmount);
                                    nextBuffVars.ShieldHealth = shieldHealth;
                                    damageAmount = 0;
                                    SpellBuffAdd((ObjAIBase)owner, owner, "Hexdrinker", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
                                    SpellBuffAdd((ObjAIBase)owner, owner, "HexdrinkerTimer", 1, 1, 60, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                                }
                                else
                                {
                                    damageAmount = Math(damageAmount, MathOp.MO_SUBTRACT, shieldHealth);
                                    nextBuffVars.ShieldHealth = 0;
                                    SpellBuffAdd((ObjAIBase)owner, owner, "Hexdrinker", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
                                    SpellBuffAdd((ObjAIBase)owner, owner, "HexdrinkerTimer", 1, 1, 60, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

namespace Items
{
    public class _3158 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "IonianBootsofLucidity", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "IonianBootsofLucidity") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "IonianBootsofLucidity", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3165 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "RitualStaff", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnActivate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "FiendishCodex") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "FiendishCodex", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3170 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "Hardening", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3172 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "Hardening", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3173 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "Hardening", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3178 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(10, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "LightningRodApplicator", 1, 1, 11, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3180 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "OdynsVeil", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3181 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "OdinBloodburster", 1, 1, 1.5f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3183 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(5, ref this.lastTimeExecuted, false))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "PrilisasBlessing", 1, 1, 6, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3184 : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    if(target is ObjAIBase)
                    {
                        if(RandomChance() < 0.25f)
                        {
                            if(target is not BaseTurret)
                            {
                                SpellBuffAdd((ObjAIBase)target, target, "Internal_30Slow", 1, 1, 2.5f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                                SpellBuffAdd((ObjAIBase)owner, target, "ItemSlow", 1, 1, 2.5f, default, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                            }
                        }
                    }
                }
            }
        }
    }
}

namespace Items
{
    public class _3185 : Script
    {
        public void OnHitUnit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, HitResult hitResult, DamageSource damageSource, DamageType damageType)
        {
            //object? nextBuffVars = null;
            if(target is Champion)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "OdinLightbringer", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3186 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(10, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "OdinBloodrazor", 1, 1, 11, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Items
{
    public class _3187 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "HextechSweeper", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
        public void OnDealDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? damageType = null;
            //object? nextBuffVars = null;
            if(target is Champion)
            {
                if(damageSource == damageType)
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "OdinLightbringer", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
                if(damageSource == damageType)
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "OdinLightbringer", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
                if(damageSource == damageType)
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "OdinLightbringer", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
            }
        }
    }
}

namespace Items
{
    public class _3196 : Script
    {
        float lastTimeExecuted = 0;
        float lastTimeExecuted2 = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float health = 0;
            float healthIncAmount = 0;
            health = GetMaxHealth(owner);
            healthIncAmount = Math(health, MathOp.MO_MULTIPLY, 0.15f);
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            //object? slot = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ViktorHexCore", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            SetSpellToolTipVar(charVars.BonusForItem, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            if(ExecutePeriodically(3, ref this.lastTimeExecuted2, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ViktorAugmentQ", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3197 : Script
    {
        float lastTimeExecuted = 0;
        float lastTimeExecuted2 = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float health = 0;
            float healthIncAmount = 0;
            health = GetMaxHealth(owner);
            healthIncAmount = Math(health, MathOp.MO_MULTIPLY, 0.15f);
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            //object? slot = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ViktorHexCore", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            SetSpellToolTipVar(charVars.BonusForItem, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            if(ExecutePeriodically(3, ref this.lastTimeExecuted2, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ViktorAugmentW", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3198 : Script
    {
        float lastTimeExecuted = 0;
        float lastTimeExecuted2 = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float health = 0;
            float healthIncAmount = 0;
            health = GetMaxHealth(owner);
            healthIncAmount = Math(health, MathOp.MO_MULTIPLY, 0.15f);
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            //object? slot = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ViktorHexCore", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            SetSpellToolTipVar(charVars.BonusForItem, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
            if(ExecutePeriodically(3, ref this.lastTimeExecuted2, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ViktorAugmentE", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _3200 : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            //object? slot = null;
            if(ExecutePeriodically(9, ref this.lastTimeExecuted, true))
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "ViktorHexCore", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            SetSpellToolTipVar(charVars.BonusForItem, 1, slot, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)attacker);
        }
    }
}














namespace Items
{
    public class _100 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float attackDamageBonus = 0;
            attackDamageBonus = Math(1, MathOp.MO_MULTIPLY, talentLevel);
            IncFlatPhysicalDamageMod(owner, attackDamageBonus);
        }
    }
}

namespace Items
{
    public class _101 : Script
    {
        public int[] effect0 = {2, 4, 6};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            level = talentLevel;
            IncFlatArmorPenetrationMod(owner, this.effect0[level]);
        }
    }
}

namespace Items
{
    public class _102 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float cooldownMod = 0;
            cooldownMod = Math(-0.0075f, MathOp.MO_MULTIPLY, talentLevel);
            IncPercentCooldownMod(owner, cooldownMod);
        }
    }
}

namespace Items
{
    public class _103 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float criticalMod = 0;
            criticalMod = Math(0.0066f, MathOp.MO_MULTIPLY, talentLevel);
            IncFlatCritChanceMod(owner, criticalMod);
        }
    }
}

namespace Items
{
    public class _104 : Script
    {
        public float[] effect0 = {0.033f, 0.066f, 0.1f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            level = talentLevel;
            IncFlatCritDamageMod(owner, this.effect0[level]);
        }
    }
}

namespace Items
{
    public class _105 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float attackSpeedMod = 0;
            attackSpeedMod = Math(0.01f, MathOp.MO_MULTIPLY, talentLevel);
            IncPercentAttackSpeedMod(owner, attackSpeedMod);
        }
    }
}

namespace Items
{
    public class _106 : Script
    {
        public float[] effect0 = {0.2f, 0.4f, 0.6f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int ownerLevel = 0;
            //object? talentLevel = null;
            object? level = null;
            float bonusDamage = 0;
            float totalBonusDamage = 0;
            ownerLevel = GetLevel(owner);
            level = talentLevel;
            bonusDamage = this.effect0[level];
            totalBonusDamage = Math(bonusDamage, MathOp.MO_MULTIPLY, ownerLevel);
            IncFlatMagicDamageMod(owner, totalBonusDamage);
        }
    }
}

namespace Items
{
    public class _107 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPercentMagicPenetrationMod(owner, 0.15f);
        }
    }
}

namespace Items
{
    public class _108 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float healthMod = 0;
            healthMod = Math(12, MathOp.MO_MULTIPLY, talentLevel);
            IncFlatHPPoolMod(owner, healthMod);
        }
    }
}

namespace Items
{
    public class _109 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float armorMod = 0;
            armorMod = Math(2, MathOp.MO_MULTIPLY, talentLevel);
            IncFlatArmorMod(owner, armorMod);
        }
    }
}

namespace Items
{
    public class _110 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float magicResistanceMod = 0;
            magicResistanceMod = Math(2, MathOp.MO_MULTIPLY, talentLevel);
            IncFlatSpellBlockMod(owner, magicResistanceMod);
        }
    }
}

namespace Items
{
    public class _111 : Script
    {
        class UpdateSelfBuffActions_nextBuffVars
        {
            public float PercentMod = 0;
        }
        public float[] effect0 = {0.01333f, 0.02667f, 0.04f};
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            UpdateSelfBuffActions_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "Ardor") == 0)
            {
                level = talentLevel;
                nextBuffVars.PercentMod = this.effect0[level];
                SpellBuffAdd((ObjAIBase)owner, owner, "Ardor", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _112 : Script
    {
        class UpdateSelfBuffStats_nextBuffVars
        {
            public float Multiplier = 0;
        }
        public float[] effect0 = {0.00066f, 0.00133f, 0.002f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            UpdateSelfBuffStats_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "StrengthOfSpirit") == 0)
            {
                level = talentLevel;
                nextBuffVars.Multiplier = this.effect0[level];
                SpellBuffAdd((ObjAIBase)owner, owner, "StrengthOfSpirit", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Chars
{
    public class _113 : Script
    {
        public float[] effect0 = {1, 1.5f, 2};
        float damageBlock = 0;
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            level = talentLevel;
            this.damageBlock = this.effect0[level];
        }
        public void OnBeingHit(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? damageType = null;
            float damageAmount = 0;
            if(damageType == DamageType.DAMAGE_TYPE_PHYSICAL)
            {
                damageAmount = Math(damageAmount, MathOp.MO_SUBTRACT, this.damageBlock);
            }
            if(damageAmount < 0)
            {
                damageAmount = 0;
            }
        }
    }
}

namespace Items
{
    public class _114 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float dodgeMod = 0;
            dodgeMod = Math(0.005f, MathOp.MO_MULTIPLY, talentLevel);
            IncFlatDodgeMod(owner, dodgeMod);
        }
    }
}

namespace Items
{
    public class _115 : Script
    {
        public float[] effect0 = {0.0125f, 0.025f, 0.0375f, 0.05f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            float manaMod = 0;
            level = talentLevel;
            manaMod = this.effect0[level];
            IncPercentPARPoolMod(owner, manaMod);
        }
    }
}

namespace Items
{
    public class _116 : Script
    {
        public float[] effect0 = {0.0125f, 0.025f, 0.0375f, 0.05f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            float experienceMod = 0;
            level = talentLevel;
            experienceMod = this.effect0[level];
            IncPercentEXPBonus(owner, experienceMod);
        }
    }
}

namespace Items
{
    public class _117 : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            
        }
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncFlatGoldPer10Mod(owner, 1);
        }
    }
}

namespace Items
{
    public class _118 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float cooldownMod = 0;
            cooldownMod = Math(-0.02f, MathOp.MO_MULTIPLY, talentLevel);
            IncPercentCooldownMod(owner, cooldownMod);
        }
    }
}

namespace Items
{
    public class _119 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float moveSpeedMod = 0;
            moveSpeedMod = Math(0.01f, MathOp.MO_MULTIPLY, talentLevel);
            IncPercentMovementSpeedMod(owner, moveSpeedMod);
        }
    }
}

namespace Chars
{
    public class _120 : Script
    {
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            float summonerCooldownBonus = 0;
            summonerCooldownBonus = Math(0.15f, MathOp.MO_MULTIPLY, talentLevel);
            avatarVars.SummonerCooldownBonus = summonerCooldownBonus;
        }
    }
}

namespace Items
{
    public class _121 : Script
    {
        public float[] effect0 = {0.2f, 0.4f, 0.6f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            float manaMod = 0;
            level = talentLevel;
            manaMod = this.effect0[level];
            IncFlatPARRegenMod(owner, manaMod);
        }
    }
}

namespace Chars
{
    public class _122 : Script
    {
        public int[] effect0 = {5, 10};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            level = talentLevel;
            avatarVars.ClairvoyanceDurationBonus = 4;
            avatarVars.ClairvoyanceCooldownBonus = this.effect0[level];
        }
    }
}

namespace Chars
{
    public class _123 : Script
    {
        public float[] effect0 = {1.04f, 1.08f};
        public void OnPreDealDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? damageType = null;
            //object? talentLevel = null;
            object? level = null;
            float havocDamage = 0;
            float damageAmount = 0;
            if(damageType != DamageType.DAMAGE_TYPE_TRUE)
            {
                level = talentLevel;
                havocDamage = this.effect0[level];
                damageAmount = Math(havocDamage, MathOp.MO_MULTIPLY, damageAmount);
            }
        }
    }
}

namespace Chars
{
    public class _124 : Script
    {
        public int[] effect0 = {5, 10};
        public int[] effect1 = {30, 30};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            level = talentLevel;
            avatarVars.TeleportDelayBonus = Math(0.5f, MathOp.MO_MULTIPLY, talentLevel);
            avatarVars.TeleportCooldownBonus = this.effect0[level];
            avatarVars.PromoteCooldownBonus = this.effect1[level];
        }
    }
}

namespace Chars
{
    public class _125 : Script
    {
        public void OnPreDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? damageType = null;
            float damageAmount = 0;
            if(damageType != DamageType.DAMAGE_TYPE_TRUE)
            {
                damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 0.96f);
                if(damageAmount < 0)
                {
                    damageAmount = 0;
                }
            }
        }
    }
}

namespace Chars
{
    public class _126 : Script
    {
        public int[] effect0 = {5, 10};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            level = talentLevel;
            avatarVars.SmiteGoldBonus = 5;
            avatarVars.SmiteCooldownBonus = this.effect0[level];
        }
    }
}

namespace Chars
{
    public class _127 : Script
    {
        public void OnDodge(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "Nimbleness", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.HASTE, 0, default, default, default, default);
        }
    }
}

namespace Chars
{
    public class _129 : Script
    {
        public int[] effect0 = {30, 40};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            level = talentLevel;
            avatarVars.RevivePreservationBonus = 400;
            avatarVars.ReviveCooldownBonus = this.effect0[level];
        }
    }
}

namespace Chars
{
    public class _130 : Script
    {
        public float[] effect0 = {0.06f};
        public float[] effect1 = {1.5f, 3};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            level = talentLevel;
            avatarVars.GhostMovementBonus = this.effect0[level];
            avatarVars.GhostDurationBonus = this.effect1[level];
        }
    }
}

namespace Chars
{
    public class _131 : Script
    {
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            level = talentLevel;
            avatarVars.BoostCooldownBonus = 20;
        }
    }
}

namespace Items
{
    public class _132 : Script
    {
        public float[] effect0 = {0.02f, 0.03f, 0.04f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            float regenPercent = 0;
            level = talentLevel;
            regenPercent = this.effect0[level];
            IncPercentPARRegenMod(owner, regenPercent);
            IncPercentHPRegenMod(owner, regenPercent);
        }
    }
}

namespace Chars
{
    public class _133 : Script
    {
        public int[] effect0 = {30, 30};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            level = talentLevel;
            avatarVars.HealCooldownBonus = this.effect0[level];
        }
    }
}

namespace Items
{
    public class _134 : Script
    {
        public float[] effect0 = {0.033f, 0.066f, 0.1f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            level = talentLevel;
            IncPercentRespawnTimeMod(owner, this.effect0[level]);
        }
    }
}

namespace Items
{
    public class _135 : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            //object? nextBuffVars = null;
            if(talentLevel == 2)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "MonsterBuffs2", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "MonsterBuffs", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Chars
{
    public class _136 : Script
    {
        public float[] effect0 = {0.5f, 1};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            level = talentLevel;
            avatarVars.ExhaustArmorMod = -10;
            avatarVars.ExhaustDurationBonus = this.effect0[level];
        }
    }
}

namespace Items
{
    public class _137 : Script
    {
        class UpdateSelfBuffActions_nextBuffVars
        {
            public object? Level = null;
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            UpdateSelfBuffActions_nextBuffVars nextBuffVars = new();
            nextBuffVars.Level = talentLevel;
            if(GetBuffCountFromCaster(owner, owner, "OffensiveMasteryBuff") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "OffensiveMasteryBuff", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
        }
    }
}

namespace Chars
{
    public class _139 : Script
    {
        public int[] effect0 = {15, 30};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            level = talentLevel;
            avatarVars.PromoteArmorBonus = 20;
            avatarVars.PromoteCooldownBonus = this.effect0[level];
        }
    }
}
namespace Items
{
    public class _139 : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? foritfyCheck = null;
            float cooldown = 0;
            //object? nextBuffVars = null;
            string? foritfyCheck2 = null;
            foritfyCheck = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
            if(foritfyCheck == "SummonerPromote")
            {
                cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
                if(cooldown <= 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "PromoteBuff") > 0)
                    {
                        
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "PromoteBuff", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
                    }
                }
            }
            foritfyCheck2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
            if(foritfyCheck2 == "SummonerPromote")
            {
                cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
                if(cooldown <= 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "PromoteBuff") > 0)
                    {
                        
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "PromoteBuff", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class _140 : Script
    {
        public int[] effect0 = {15, 30};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            level = talentLevel;
            avatarVars.FlashCooldownBonus = this.effect0[level];
        }
    }
}

namespace Chars
{
    public class _143 : Script
    {
        public int[] effect0 = {5, 10};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            level = talentLevel;
            avatarVars.RallyAPMod = 70;
            avatarVars.RallyDurationBonus = this.effect0[level];
        }
    }
}

namespace Chars
{
    public class _144 : Script
    {
        public int[] effect0 = {1, 2};
        int smallDamageAmount = 0;
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            level = talentLevel;
            this.smallDamageAmount = this.effect0[level];
        }
        public void OnPreDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            if(attacker is ObjAIBase)
            {
                if(attacker is BaseTurret)
                {
                    
                }
                else
                {
                    if(attacker is Champion)
                    {
                        
                    }
                    else
                    {
                        damageAmount = Math(damageAmount, MathOp.MO_SUBTRACT, this.smallDamageAmount);
                    }
                }
            }
            if(damageAmount < 0)
            {
                damageAmount = 0;
            }
        }
    }
}

namespace Chars
{
    public class _145 : Script
    {
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            avatarVars.FortifySplashDamage = 1;
        }
    }
}

namespace Items
{
    public class _146 : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? dotCheck = null;
            float cooldown = 0;
            //object? nextBuffVars = null;
            string? dotCheck2 = null;
            dotCheck = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
            if(dotCheck == "SummonerDot")
            {
                cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
                if(cooldown > 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "BurningEmbers") > 0)
                    {
                        
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "BurningEmbers", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
                    }
                }
                else
                {
                    SpellBuffRemove(owner, "BurningEmbers", (ObjAIBase)owner, default);
                }
            }
            dotCheck2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
            if(dotCheck2 == "SummonerDot")
            {
                cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
                if(cooldown > 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "BurningEmbers") > 0)
                    {
                        
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "BurningEmbers", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
                    }
                }
                else
                {
                    SpellBuffRemove(owner, "BurningEmbers", (ObjAIBase)owner, default);
                }
            }
        }
    }
}

namespace Chars
{
    public class _147 : Script
    {
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            avatarVars.ManaBonus = 1;
        }
    }
}

namespace Chars
{
    public class _148 : Script
    {
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            avatarVars.StifleDurationBonus = 0.5f;
            avatarVars.StifleCooldownBonus = 10;
        }
    }
}

namespace Chars
{
    public class _211 : Script
    {
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            avatarVars.OffensiveMastery = talentLevel;
        }
    }
}
namespace Items
{
    public class _211 : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            string? dotCheck = null;
            float cooldown = 0;
            //object? nextBuffVars = null;
            string? dotCheck2 = null;
            dotCheck = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
            if(dotCheck == "SummonerDot")
            {
                cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
                if(cooldown > 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "BurningEmbers") > 0)
                    {
                        
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "BurningEmbers", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    }
                }
                else
                {
                    SpellBuffRemove(owner, "BurningEmbers", (ObjAIBase)owner, 0);
                }
            }
            dotCheck2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
            if(dotCheck2 == "SummonerDot")
            {
                cooldown = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
                if(cooldown > 0)
                {
                    if(GetBuffCountFromCaster(owner, owner, "BurningEmbers") > 0)
                    {
                        
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "BurningEmbers", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    }
                }
                else
                {
                    SpellBuffRemove(owner, "BurningEmbers", (ObjAIBase)owner, 0);
                }
            }
        }
    }
}

namespace Items
{
    public class _212 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float attackDamageBonus = 0;
            attackDamageBonus = Math(1, MathOp.MO_MULTIPLY, talentLevel);
            IncFlatPhysicalDamageMod(owner, attackDamageBonus);
        }
    }
}

namespace Items
{
    public class _213 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float abilityPowerBonus = 0;
            abilityPowerBonus = Math(1, MathOp.MO_MULTIPLY, talentLevel);
            IncFlatMagicDamageMod(owner, abilityPowerBonus);
        }
    }
}

namespace Items
{
    public class _214 : Script
    {
        public int[] effect0 = {2, 4};
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            level = talentLevel;
            avatarVars.MasteryButcher = true;
            avatarVars.MasteryButcherAmt = this.effect0[level];
        }
    }
}

namespace Items
{
    public class _222 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float attackSpeedMod = 0;
            attackSpeedMod = Math(0.01f, MathOp.MO_MULTIPLY, talentLevel);
            IncPercentAttackSpeedMod(owner, attackSpeedMod);
        }
    }
}

namespace Items
{
    public class _223 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float cooldownMod = 0;
            cooldownMod = Math(-0.01f, MathOp.MO_MULTIPLY, talentLevel);
            IncPercentCooldownMod(owner, cooldownMod);
        }
    }
}

namespace Items
{
    public class _224 : Script
    {
        public int[] effect0 = {10};
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            if(ExecutePeriodically(3, ref this.lastTimeExecuted, false))
            {
                level = talentLevel;
                avatarVars.MasteryDemolitionist = true;
                avatarVars.MasteryDemolitionistAmt = this.effect0[level];
            }
        }
    }
}

namespace Items
{
    public class _231 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float criticalMod = 0;
            criticalMod = Math(0.01f, MathOp.MO_MULTIPLY, talentLevel);
            IncFlatCritChanceMod(owner, criticalMod);
        }
    }
}

namespace Items
{
    public class _232 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPercentArmorPenetrationMod(owner, 0.1f);
        }
    }
}

namespace Items
{
    public class _233 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncPercentMagicPenetrationMod(owner, 0.1f);
        }
    }
}

namespace Chars
{
    public class _234 : Script
    {
        public float[] effect0 = {1.005f, 1.01f, 1.015f, 1.02f};
        public void OnPreDealDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? damageType = null;
            //object? talentLevel = null;
            object? level = null;
            float havocDamage = 0;
            float damageAmount = 0;
            if(damageType != DamageType.DAMAGE_TYPE_TRUE)
            {
                level = talentLevel;
                havocDamage = this.effect0[level];
                damageAmount = Math(havocDamage, MathOp.MO_MULTIPLY, damageAmount);
            }
        }
    }
}

namespace Items
{
    public class _241 : Script
    {
        public float[] effect0 = {0.1f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            level = talentLevel;
            IncFlatCritDamageMod(owner, this.effect0[level]);
        }
    }
}

namespace Items
{
    public class _242 : Script
    {
        public float[] effect0 = {0.01f, 0.02f, 0.03f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            level = talentLevel;
            IncPercentLifeStealMod(owner, this.effect0[level]);
        }
    }
}

namespace Items
{
    public class _243 : Script
    {
        public float[] effect0 = {0.25f, 0.5f, 0.75f, 1};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int ownerLevel = 0;
            //object? talentLevel = null;
            object? level = null;
            float bonusDamage = 0;
            float totalBonusDamage = 0;
            ownerLevel = GetLevel(owner);
            level = talentLevel;
            bonusDamage = this.effect0[level];
            totalBonusDamage = Math(bonusDamage, MathOp.MO_MULTIPLY, ownerLevel);
            IncFlatMagicDamageMod(owner, totalBonusDamage);
        }
    }
}

namespace Items
{
    public class _252 : Script
    {
        public int[] effect0 = {2, 4, 6};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            level = talentLevel;
            IncFlatArmorPenetrationMod(owner, this.effect0[level]);
        }
    }
}

namespace Items
{
    public class _253 : Script
    {
        class UpdateSelfBuffActions_nextBuffVars
        {
            public float PercentMod = 0;
        }
        public float[] effect0 = {0.0125f, 0.025f, 0.0375f, 0.05f};
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            UpdateSelfBuffActions_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "MasteryBlastBuff") == 0)
            {
                level = talentLevel;
                nextBuffVars.PercentMod = this.effect0[level];
                SpellBuffAdd((ObjAIBase)owner, owner, "MasteryBlastBuff", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Chars
{
    public class _262 : Script
    {
        public void OnPreDealDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? damageType = null;
            float healthPerc = 0;
            float damageAmount = 0;
            if(damageType != DamageType.DAMAGE_TYPE_TRUE)
            {
                if(target is ObjAIBase)
                {
                    if(target is BaseTurret)
                    {
                        
                    }
                    else
                    {
                        healthPerc = GetHealthPercent(target);
                        if(healthPerc <= 0.4f)
                        {
                            damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.06f);
                        }
                    }
                }
            }
        }
    }
}

namespace Chars
{
    public class _311 : Script
    {
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            avatarVars.DefensiveMastery = talentLevel;
        }
    }
}

namespace Items
{
    public class _312 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float magicResistanceMod = 0;
            magicResistanceMod = Math(2, MathOp.MO_MULTIPLY, talentLevel);
            IncFlatSpellBlockMod(owner, magicResistanceMod);
        }
    }
}

namespace Items
{
    public class _313 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float armorMod = 0;
            armorMod = Math(2, MathOp.MO_MULTIPLY, talentLevel);
            IncFlatArmorMod(owner, armorMod);
        }
    }
}

namespace Chars
{
    public class _314 : Script
    {
        public int[] effect0 = {1, 2, 3};
        int smallDamageAmount = 0;
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            level = talentLevel;
            this.smallDamageAmount = this.effect0[level];
        }
        public void OnPreDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            float damageAmount = 0;
            if(attacker is ObjAIBase)
            {
                if(attacker is BaseTurret)
                {
                    
                }
                else
                {
                    if(attacker is Champion)
                    {
                        
                    }
                    else
                    {
                        damageAmount = Math(damageAmount, MathOp.MO_SUBTRACT, this.smallDamageAmount);
                    }
                }
            }
            if(damageAmount < 0)
            {
                damageAmount = 0;
            }
        }
    }
}

namespace Items
{
    public class _322 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float healthPerLevel = 0;
            int champLevel = 0;
            float healthMod = 0;
            healthPerLevel = Math(talentLevel, MathOp.MO_MULTIPLY, 1.5f);
            champLevel = GetLevel(owner);
            healthMod = Math(champLevel, MathOp.MO_MULTIPLY, healthPerLevel);
            IncMaxHealth(owner, healthMod, false);
        }
    }
}

namespace Items
{
    public class _323 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float hPRegenBonus = 0;
            hPRegenBonus = Math(0.2f, MathOp.MO_MULTIPLY, talentLevel);
            IncFlatHPRegenMod(owner, hPRegenBonus);
        }
    }
}

namespace Chars
{
    public class _331 : Script
    {
        public void OnPreDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? talentLevel = null;
            float flatDR = 0;
            //object? damageType = null;
            float damageAmount = 0;
            flatDR = Math(talentLevel, MathOp.MO_MULTIPLY, 1);
            if(damageType != DamageType.DAMAGE_TYPE_TRUE)
            {
                damageAmount = Math(damageAmount, MathOp.MO_SUBTRACT, flatDR);
                if(damageAmount < 0)
                {
                    damageAmount = 0;
                }
            }
        }
    }
}

namespace Items
{
    public class _332 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float healthMod = 0;
            healthMod = Math(30, MathOp.MO_MULTIPLY, talentLevel);
            IncFlatHPPoolMod(owner, healthMod);
        }
    }
}

namespace Chars
{
    public class _333 : Script
    {
        public void OnPreDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? talentLevel = null;
            float dRPERC = 0;
            float damageMultiplier = 0;
            //object? damageType = null;
            float damageAmount = 0;
            dRPERC = Math(talentLevel, MathOp.MO_MULTIPLY, 0.01f);
            damageMultiplier = Math(1, MathOp.MO_SUBTRACT, dRPERC);
            if(damageType != DamageType.DAMAGE_TYPE_TRUE)
            {
                if(damageSource == DamageSource.DAMAGE_SOURCE_SPELLAOE)
                {
                    damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, damageMultiplier);
                    if(damageAmount < 0)
                    {
                        damageAmount = 0;
                    }
                }
            }
        }
    }
}

namespace Items
{
    public class _334 : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            avatarVars.MasteryBladedArmor = true;
            avatarVars.MasteryBladedArmorAmt = 6;
        }
    }
}

namespace Items
{
    public class _341 : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            avatarVars.MasterySeigeCommander = true;
        }
    }
}

namespace Items
{
    public class _342 : Script
    {
        public float[] effect0 = {0.01f, 0.02f, 0.03f};
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            level = talentLevel;
            avatarVars.MasteryInitiate = true;
            avatarVars.MasteryInitiateAmt = this.effect0[level];
        }
    }
}

namespace Items
{
    public class _343 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float cDRPerLevel = 0;
            int champLevel = 0;
            float cDRMod = 0;
            cDRPerLevel = Math(talentLevel, MathOp.MO_MULTIPLY, -0.0015f);
            champLevel = GetLevel(owner);
            cDRMod = Math(champLevel, MathOp.MO_MULTIPLY, cDRPerLevel);
            IncPercentCooldownMod(owner, cDRMod);
        }
    }
}

namespace Chars
{
    public class _352 : Script
    {
        public void OnPreDamage(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, DamageSource damageSource, DamageType damageType)
        {
            //object? talentLevel = null;
            float dRPERC = 0;
            float damageMultiplier = 0;
            //object? damageType = null;
            float damageAmount = 0;
            dRPERC = Math(talentLevel, MathOp.MO_MULTIPLY, 0.005f);
            damageMultiplier = Math(1, MathOp.MO_SUBTRACT, dRPERC);
            if(damageType != DamageType.DAMAGE_TYPE_TRUE)
            {
                damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, damageMultiplier);
                if(damageAmount < 0)
                {
                    damageAmount = 0;
                }
            }
        }
    }
}

namespace Items
{
    public class _353 : Script
    {
        public int[] effect0 = {8, 16, 24};
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            level = talentLevel;
            avatarVars.MasteryBounty = true;
            avatarVars.MasteryBountyAmt = this.effect0[level];
        }
    }
}

namespace Items
{
    public class _362 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float hP = 0;
            float plusHealth = 0;
            hP = GetMaxHealth(owner);
            plusHealth = Math(hP, MathOp.MO_MULTIPLY, 0.03f);
            IncMaxHealth(owner, plusHealth, false);
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            level = talentLevel;
            avatarVars.MasteryJuggernaut = true;
        }
    }
}

namespace Chars
{
    public class _411 : Script
    {
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            avatarVars.UtilityMastery = talentLevel;
        }
    }
}

namespace Items
{
    public class _412 : Script
    {
        public float[] effect0 = {0.04f, 0.07f, 0.1f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            level = talentLevel;
            IncPercentRespawnTimeMod(owner, this.effect0[level]);
        }
    }
}

namespace Items
{
    public class _413 : Script
    {
        public int[] effect0 = {4, 8, 12, 16};
        public int[] effect1 = {4, 7, 10, 10};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            int manaMod = 0;
            int energy = 0;
            int charLevel = 0;
            float mana = 0;
            level = talentLevel;
            manaMod = this.effect0[level];
            energy = this.effect1[level];
            charLevel = GetLevel(owner);
            mana = Math(manaMod, MathOp.MO_MULTIPLY, charLevel);
            IncFlatPARPoolMod(owner, mana);
            IncFlatPARPoolMod(owner, energy);
        }
    }
}

namespace Items
{
    public class _414 : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "MasteryImprovedRecallBuff") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "MasteryImprovedRecallBuff", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Items
{
    public class _422 : Script
    {
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float moveSpeedMod = 0;
            moveSpeedMod = Math(0.005f, MathOp.MO_MULTIPLY, talentLevel);
            IncPercentMovementSpeedMod(owner, moveSpeedMod);
        }
    }
}

namespace Items
{
    public class _423 : Script
    {
        public float[] effect0 = {0.2f, 0.4f, 0.6f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            float regenMod = 0;
            level = talentLevel;
            regenMod = this.effect0[level];
            IncFlatPARRegenMod(owner, regenMod);
        }
    }
}

namespace Items
{
    public class _424 : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            avatarVars.Scout = true;
        }
    }
}

namespace Items
{
    public class _432 : Script
    {
        public float[] effect0 = {0.5f, 1, 1.5f, 2};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            float greed = 0;
            level = talentLevel;
            greed = this.effect0[level];
            IncFlatGoldPer10Mod(owner, greed);
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            
        }
    }
}

namespace Items
{
    public class _433 : Script
    {
        public float[] effect0 = {0.01f, 0.02f, 0.03f, 0.04f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            float vamp = 0;
            level = talentLevel;
            vamp = this.effect0[level];
            IncPercentSpellVampMod(owner, vamp);
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            
        }
    }
}

namespace Items
{
    public class _434 : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "MonsterBuffs", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Items
{
    public class _442 : Script
    {
        class UpdateSelfBuffActions_nextBuffVars
        {
            public int GoldAmount = 0;
        }
        public int[] effect0 = {20, 40};
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            UpdateSelfBuffActions_nextBuffVars nextBuffVars = new();
            level = talentLevel;
            nextBuffVars.GoldAmount = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "MasteryHoardBuff", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Items
{
    public class _443 : Script
    {
        public float[] effect0 = {0.0125f, 0.025f, 0.0375f, 0.05f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            float experienceMod = 0;
            level = talentLevel;
            experienceMod = this.effect0[level];
            IncPercentEXPBonus(owner, experienceMod);
        }
    }
}

namespace Items
{
    public class _444 : Script
    {
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            avatarVars.MasteryScholar = true;
        }
    }
}

namespace Items
{
    public class _452 : Script
    {
        public float[] effect0 = {0.004f, 0.007f, 0.01f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            float regenPercent = 0;
            float maxMana = 0;
            float regen = 0;
            level = talentLevel;
            regenPercent = this.effect0[level];
            maxMana = GetMaxPAR(owner);
            regen = Math(regenPercent, MathOp.MO_MULTIPLY, maxMana);
            regen = Math(regen, MathOp.MO_DIVIDE, 5);
            IncFlatHPRegenMod(owner, regen);
        }
    }
}

namespace Items
{
    public class _453 : Script
    {
        public float[] effect0 = {-0.02f, -0.04f, -0.06f};
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            object? level = null;
            float cooldownMod = 0;
            level = talentLevel;
            cooldownMod = this.effect0[level];
            IncPercentCooldownMod(owner, cooldownMod);
        }
    }
}

namespace Chars
{
    public class _463 : Script
    {
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            //object? talentLevel = null;
            float summonerCooldownBonus = 0;
            summonerCooldownBonus = Math(0.15f, MathOp.MO_MULTIPLY, talentLevel);
            avatarVars.SummonerCooldownBonus = summonerCooldownBonus;
        }
    }
}

namespace Items
{
    public class AttackDamageTalent : Script
    {
        float lastTimeExecuted = 0;
        public void UpdateSelfBuffStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? talentLevel = null;
            float damageInc = 0;
            damageInc = Math(100, MathOp.MO_MULTIPLY, talentLevel);
            IncFlatPhysicalDamageMod(owner, damageInc);
            if(ExecutePeriodically(1, ref this.lastTimeExecuted, default))
            {
                DebugSay(owner, "DamageInc: ", damageInc);
            }
        }
    }
}

namespace Chars
{
    public class PreAttackTest : Script
    {
        public void OnPreAttack(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            DebugSay(owner, "Avatar PreAttack event.", default);
        }
    }
}

namespace Chars
{
    public class TestScript : Script
    {
        public float[] effect0 = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.16f, 0.16f, 0.16f, 0.16f, 0.16f, 0.22f, 0.22f, 0.22f, 0.22f, 0.22f, 0.28f, 0.28f, 0.28f, 0.28f};
        public void SetVarsByLevel(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level)
        {
            charVars.AttackSpeedIncrease = this.effect0[level];
        }
    }
}
namespace Items
{
    public class TestScript : Script
    {
        class UpdateSelfBuffActions_nextBuffVars
        {
            public object? AttackSpeedIncrease = null;
        }
        public void UpdateSelfBuffActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            UpdateSelfBuffActions_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            if(ExecutePeriodically(0.8f, ref charVars.LastTimeExecuted, default))
            {
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 400, "AffectFriends AffectHeroes ", default, default, (unit) => 
                {
                    nextBuffVars.AttackSpeedIncrease = charVars.AttackSpeedIncrease;
                    SpellBuffAdd((ObjAIBase)owner, unit, "DivineBlessingAura", 1, default, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, default, default, default, default, default);
                });
            }
            avatarVars.Test = 10;
        }
    }
}



namespace Spells
{
    public class AbponsPaperFan : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int ShieldHealth = 0;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(target, owner, "Stun") > 0)
            {
                SpellBuffRemove(target, "Stun", (ObjAIBase)attacker, default);
                DebugSay(owner, "DISPELL STUN !!", default);
            }
            else
            {
                nextBuffVars.ShieldHealth = 1000;
                DebugSay(owner, "TWHAP!  Target STUNNED !!", default);
                SpellBuffAdd((ObjAIBase)attacker, target, "Stun", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, default, default);
            }
        }
    }
}
namespace Spells
{
    public class AbsoluteZero : Script
    {
        class ChannelingStart_nextBuffVars
        {
            public float MovementSpeedMod = 0;
            public float AttackSpeedMod = 0;
        }
        public float[] effect0 = {-0.5f, -0.5f, -0.5f};
        public float[] effect1 = {-0.25f, -0.25f, -0.25f};
        public int[] effect2 = {625, 875, 1125};
        public int[] effect3 = {625, 875, 1125};
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            ChannelingStart_nextBuffVars nextBuffVars = new();
            nextBuffVars.MovementSpeedMod = this.effect0[level];
            nextBuffVars.AttackSpeedMod = this.effect1[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "AbsoluteZero", 10, 1, 3, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            Particle? asdf = null;
            //object? _ = null;
            //object? unit = null;
            teamID = GetTeamID(default);
            SpellBuffRemove(owner, "AbsoluteZero", (ObjAIBase)owner, 0);
            SpellEffectCreate(out asdf, out _, "AbsoluteZero_nova.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, attacker, default, default, true, default, default, false, false, default, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 650, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                SpellEffectCreate(out asdf, out _, "AbsoluteZero_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, false, false, default, default);
                BreakSpellShields(unit);
                ApplyDamage((ObjAIBase)attacker, unit, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 2.5f, 1, false, false, (ObjAIBase)attacker);
            });
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            int secondDamage = 0;
            float totalTime = 0;
            Particle? asdf = null;
            //object? _ = null;
            //object? unit = null;
            teamID = GetTeamID(default);
            secondDamage = this.effect3[level];
            totalTime = Math(0.25f, MathOp.MO_MULTIPLY, charVars.LifeTime);
            SpellEffectCreate(out asdf, out _, "AbsoluteZero_nova.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, attacker, default, default, true, default, default, false, false, default, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 650, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                SpellEffectCreate(out asdf, out _, "AbsoluteZero_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, false, false, default, default);
                BreakSpellShields(unit);
                ApplyDamage((ObjAIBase)owner, unit, secondDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, totalTime, 2.5f, 1, false, false, (ObjAIBase)attacker);
            });
            SpellBuffRemove(owner, "AbsoluteZero", (ObjAIBase)owner, 0);
        }
    }
}










namespace Spells
{
    public class AhriFoxFire : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            TeamId teamID;
            Particle? varA = null;
            //object? _ = null;
            Vector3 point1;
            Vector3 point2;
            Vector3 point3;
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            PlayAnimation("Spell2", 0.71f, owner, false, true, true);
            teamID = GetTeamID(default);
            SpellEffectCreate(out varA, out _, "Ahri_FoxFire_cas.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(out varA, out _, "Ahri_FoxFire_weapon_cas.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "BUFFBONE_GLB_WEAPON_1", default, target, "BUFFBONE_GLB_WEAPON_1", default, true, false, false, false, false, default, default);
            point1 = GetPointByUnitFacingOffset(owner, 150, 45);
            point2 = GetPointByUnitFacingOffset(owner, 150, 165);
            point3 = GetPointByUnitFacingOffset(owner, 150, 285);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            SpellCast((ObjAIBase)attacker, attacker, default, default, true, 2, SpellSlotType.ExtraSlots, level, true, true, false, true, false, point1);
            SpellCast((ObjAIBase)attacker, attacker, default, default, true, 2, SpellSlotType.ExtraSlots, level, true, true, false, true, false, point2);
            SpellCast((ObjAIBase)attacker, attacker, default, default, true, 2, SpellSlotType.ExtraSlots, level, true, true, false, true, false, point3);
            SpellBuffAdd((ObjAIBase)attacker, target, "AhriFoxFire", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "AhriFoxFireMissile", 3, 3, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(GetBuffCountFromCaster(owner, owner, "AhriFoxFireMissileTwo") > 0)
            {
                SpellBuffClear(owner, "AhriFoxFireMissileTwo");
            }
        }
    }
}
namespace Spells
{
    public class AhriFoxFireMissile : Script
    {
        public int[] effect0 = {30, 60, 90, 120, 150};
        public void OnMissileUpdate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, SpellMissile missileNetworkID)
        {
            int count = 0;
            int level = 0;
            //object? missilePosition = null;
            //object? unit = null;
            //object? missileNetworkID = null;
            int baseDamage = 0;
            float myAP = 0;
            float myAPBonus = 0;
            float totalDamage = 0;
            float theirSpellBlock = 0;
            float theirSpellBlockPercent = 0;
            float theirSpellBlockRatio = 0;
            float projectedDamage = 0;
            float theirHealth = 0;
            //object? nextBuffVars = null;
            spellVars.Ready = Math(spellVars.Ready, MathOp.MO_ADD, 1);
            if(spellVars.Ready >= 3)
            {
                count = 0;
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                ForNClosestVisibleUnitsInTargetArea(owner, missilePosition, 650, "AffectEnemies AffectHeroes ", 1, true, default, (unit) => 
                {
                    SpellCast((ObjAIBase)owner, unit, default, default, true, 3, SpellSlotType.ExtraSlots, level, true, true, false, true, false, missilePosition);
                    count = 1;
                    DestroyMissile(missileNetworkID);
                    SpellBuffRemoveStacks(owner, owner, "AhriFoxFireMissile", 1);
                });
                if(count == 0)
                {
                    ForNClosestVisibleUnitsInTargetArea(owner, missilePosition, 650, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, true, default, (unit) => 
                    {
                        SpellCast((ObjAIBase)owner, unit, default, default, true, 3, SpellSlotType.ExtraSlots, level, true, true, false, true, false, missilePosition);
                        DestroyMissile(missileNetworkID);
                        SpellBuffRemoveStacks(owner, owner, "AhriFoxFireMissile", 1);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        baseDamage = this.effect0[level];
                        myAP = GetFlatMagicDamageMod(owner);
                        myAPBonus = Math(myAP, MathOp.MO_MULTIPLY, 0.3f);
                        totalDamage = Math(baseDamage, MathOp.MO_ADD, myAPBonus);
                        theirSpellBlock = GetSpellBlock(unit);
                        theirSpellBlockPercent = Math(theirSpellBlock, MathOp.MO_DIVIDE, 100);
                        theirSpellBlockRatio = Math(theirSpellBlockPercent, MathOp.MO_ADD, 1);
                        if(GetBuffCountFromCaster(unit, owner, "AhriFoxFireMissileTwo") > 0)
                        {
                            totalDamage = Math(totalDamage, MathOp.MO_DIVIDE, 2);
                        }
                        else
                        {
                            if(GetBuffCountFromCaster(unit, owner, "AhriFoxFireMissileTagTwo") > 0)
                            {
                                totalDamage = Math(totalDamage, MathOp.MO_MULTIPLY, 1.5f);
                            }
                        }
                        projectedDamage = Math(totalDamage, MathOp.MO_DIVIDE, theirSpellBlockRatio);
                        theirHealth = GetHealth(unit);
                        if(theirHealth < projectedDamage)
                        {
                            SpellBuffAdd((ObjAIBase)owner, unit, "AhriFoxFireMissileTag", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                        else
                        {
                            SpellBuffAdd((ObjAIBase)owner, unit, "AhriFoxFireMissileTagTwo", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                    });
                }
            }
        }
    }
}


namespace Spells
{
    public class AhriFoxFireMissileTwo : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float DrainPercent = 0;
            public bool? DrainedBool = null;
        }
        public int[] effect0 = {20, 35, 50, 65, 80};
        public int[] effect1 = {20, 35, 50, 65, 80};
        public int[] effect2 = {40, 70, 100, 130, 160};
        public int[] effect3 = {40, 70, 100, 130, 160};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? ar = null;
            //object? _ = null;
            Particle? asdf = null;
            //object? teamID = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? missileNetworkID = null;
            if(GetBuffCountFromCaster(target, attacker, "AhriFoxFireMissileTwo") > 0)
            {
                if(charVars.FoxFireIsActive == 1)
                {
                    SpellEffectCreate(out ar, out _, "Ahri_PassiveHeal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, attacker, default, default, false, false, false, false, false, default, default);
                    SpellEffectCreate(out asdf, out _, "Ahri_passive_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, default, default, true, false, false, false, false, default, default);
                    nextBuffVars.DrainPercent = 0.35f;
                    nextBuffVars.DrainedBool = false;
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "GlobalDrain", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.1875f, 0, false, false, (ObjAIBase)attacker);
                }
                else
                {
                    if(GetBuffCountFromCaster(attacker, attacker, "AhriSoulCrusher3") == 0)
                    {
                        if(GetBuffCountFromCaster(attacker, attacker, "AhriSoulCrusher") > 0)
                        {
                            
                        }
                        else
                        {
                            SpellBuffAdd((ObjAIBase)attacker, attacker, "AhriSoulCrusherCounter", 9, 1, 25000, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                        }
                        ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.1875f, 0, false, false, (ObjAIBase)attacker);
                    }
                }
                SpellBuffAdd((ObjAIBase)attacker, target, "AhriFoxFireMissileTwo", 3, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_CONTINUE, BuffType.INTERNAL, 0, true, false, false, default);
            }
            else
            {
                if(charVars.FoxFireIsActive == 1)
                {
                    SpellEffectCreate(out ar, out _, "Ahri_PassiveHeal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, attacker, default, default, false, false, false, false, false, default, default);
                    SpellEffectCreate(out asdf, out _, "Ahri_passive_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "AhriSoulCrusher3", 3, 3, 5, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.INTERNAL, 0.25f, true, false, false, default);
                    nextBuffVars.DrainPercent = 0.35f;
                    nextBuffVars.DrainedBool = false;
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "GlobalDrain", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.375f, 0, false, false, (ObjAIBase)attacker);
                    if(GetBuffCountFromCaster(attacker, attacker, "AhriSoulCrusher") > 0)
                    {
                        SpellBuffRemoveStacks(attacker, attacker, "AhriSoulCrusher", 1);
                    }
                }
                else
                {
                    if(GetBuffCountFromCaster(attacker, attacker, "AhriSoulCrusher3") == 0)
                    {
                        if(GetBuffCountFromCaster(attacker, attacker, "AhriSoulCrusher") > 0)
                        {
                            
                        }
                        else
                        {
                            SpellBuffAdd((ObjAIBase)attacker, attacker, "AhriSoulCrusherCounter", 9, 1, 25000, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                        }
                        ApplyDamage((ObjAIBase)attacker, target, this.effect3[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.375f, 0, false, false, (ObjAIBase)attacker);
                    }
                }
                SpellBuffAdd((ObjAIBase)attacker, target, "AhriFoxFireMissileTwo", 3, 1, 6, nextBuffVars, BuffAddType.STACKS_AND_CONTINUE, BuffType.INTERNAL, 0, true, false, false, default);
            }
            DestroyMissile(missileNetworkID);
        }
    }
}




namespace Spells
{
    public class AhriOrbMissile : Script
    {
        class OnMissileEnd_nextBuffVars
        {
            public object? OrbofDeceptionIsActive = null;
        }
        class TargetExecute_nextBuffVars
        {
            public object? OrbofDeceptionIsActive = null;
        }
        public void OnMissileEnd(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            Vector3 missileEndPosition;
            //object? unit = null;
            OnMissileEnd_nextBuffVars nextBuffVars = new();
            int level = 0;
            missileEndPosition = ModifyPosition(default, default, default);
            ForEachUnitInTargetArea((ObjAIBase)attacker, missileEndPosition, 100, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                nextBuffVars.OrbofDeceptionIsActive = charVars.OrbofDeceptionIsActive;
                SpellBuffAdd((ObjAIBase)attacker, unit, "AhriOrbDamage", 1, 1, 2, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            });
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            ForEachUnitInTargetArea((ObjAIBase)owner, missileEndPosition, 100, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                nextBuffVars.OrbofDeceptionIsActive = charVars.OrbofDeceptionIsActive;
                SpellBuffAdd((ObjAIBase)attacker, unit, "AhriOrbDamageSilence", 1, 1, 2, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            });
            SpellCast((ObjAIBase)owner, owner, default, default, true, 1, SpellSlotType.ExtraSlots, level, true, true, false, true, false, missileEndPosition);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.OrbofDeceptionIsActive = charVars.OrbofDeceptionIsActive;
            SpellBuffAdd((ObjAIBase)owner, target, "AhriOrbDamage", 1, 1, 2, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class AhriOrbReturn : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? OrbofDeceptionIsActive = null;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? missileNetworkID = null;
            if(target != attacker)
            {
                nextBuffVars.OrbofDeceptionIsActive = charVars.OrbofDeceptionIsActive;
                SpellBuffAdd((ObjAIBase)attacker, target, "AhriOrbDamageSilence", 1, 1, 2, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            else
            {
                DestroyMissile(missileNetworkID);
                if(charVars.OrbofDeceptionIsActive == 1)
                {
                    charVars.OrbofDeceptionIsActive = 0;
                }
            }
        }
    }
}
namespace Spells
{
    public class AhriOrbofDeception : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            FaceDirection(owner, targetPos);
            targetPos = GetPointByUnitFacingOffset(owner, 900, 0);
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
        }
    }
}

namespace Spells
{
    public class AhriSeduce : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 1000)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 950, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 4, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class AhriSeduceMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float SlowPercent = 0;
            public float DrainPercent = 0;
            public bool? DrainedBool = null;
        }
        public int[] effect0 = {60, 90, 120, 150, 180};
        public float[] effect1 = {1, 1.25f, 1.5f, 1.75f, 2};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            bool? isStealthed = null;
            int damageAmount = 0;
            float tauntLength = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? ar = null;
            //object? _ = null;
            Particle? asdf = null;
            //object? missileNetworkID = null;
            bool? canSee = null;
            teamID = GetTeamID(default);
            isStealthed = GetStealthed(target);
            damageAmount = this.effect0[level];
            tauntLength = this.effect1[level];
            if(IsInFront(target, attacker))
            {
                nextBuffVars.SlowPercent = -0.5f;
            }
            else
            {
                nextBuffVars.SlowPercent = -0.8f;
            }
            if(isStealthed == false)
            {
                BreakSpellShields(target);
                if(charVars.SeduceIsActive == 1)
                {
                    SpellEffectCreate(out ar, out _, "Ahri_PassiveHeal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, attacker, default, default, false, false, false, false, false, default, default);
                    SpellEffectCreate(out asdf, out _, "Ahri_passive_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, owner, default, default, true, false, false, false, false, default, default);
                    nextBuffVars.DrainPercent = 0.35f;
                    nextBuffVars.DrainedBool = false;
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "GlobalDrain", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.35f, 1, false, false, (ObjAIBase)attacker);
                    charVars.SeduceIsActive = 0;
                    SpellBuffRemoveStacks(attacker, attacker, "AhriSoulCrusher", 1);
                }
                else
                {
                    if(GetBuffCountFromCaster(attacker, attacker, "AhriSoulCrusher") > 0)
                    {
                        
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)attacker, attacker, "AhriSoulCrusherCounter", 9, 1, 25000, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                    }
                    ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.35f, 1, false, false, (ObjAIBase)attacker);
                }
                SpellEffectCreate(out asdf, out _, "Ahri_Charm_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, owner, default, default, true, false, false, false, false, default, default);
                SpellBuffAdd((ObjAIBase)attacker, target, "AhriSeduce", 1, 1, tauntLength, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                ApplyTaunt(attacker, target, tauntLength);
                DestroyMissile(missileNetworkID);
            }
            else
            {
                if(target is Champion)
                {
                    BreakSpellShields(target);
                    if(charVars.SeduceIsActive == 1)
                    {
                        SpellEffectCreate(out ar, out _, "Ahri_PassiveHeal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, attacker, default, default, false, false, false, false, false, default, default);
                        SpellEffectCreate(out asdf, out _, "Ahri_passive_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, owner, default, default, true, false, false, false, false, default, default);
                        nextBuffVars.DrainPercent = 0.35f;
                        nextBuffVars.DrainedBool = false;
                        SpellBuffAdd((ObjAIBase)attacker, attacker, "GlobalDrain", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.35f, 1, false, false, (ObjAIBase)attacker);
                        charVars.SeduceIsActive = 0;
                        SpellBuffRemoveStacks(attacker, attacker, "AhriSoulCrusher", 1);
                    }
                    else
                    {
                        if(GetBuffCountFromCaster(attacker, attacker, "AhriSoulCrusher") > 0)
                        {
                            
                        }
                        else
                        {
                            SpellBuffAdd((ObjAIBase)attacker, attacker, "AhriSoulCrusherCounter", 9, 1, 25000, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                        }
                        ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.35f, 1, false, false, (ObjAIBase)attacker);
                    }
                    SpellEffectCreate(out asdf, out _, "Ahri_Charm_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, owner, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd((ObjAIBase)attacker, target, "AhriSeduce", 1, 1, tauntLength, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                    ApplyTaunt(attacker, target, tauntLength);
                    DestroyMissile(missileNetworkID);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        BreakSpellShields(target);
                        if(charVars.SeduceIsActive == 1)
                        {
                            SpellEffectCreate(out ar, out _, "Ahri_PassiveHeal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, attacker, default, default, false, false, false, false, false, default, default);
                            SpellEffectCreate(out asdf, out _, "Ahri_passive_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, owner, default, default, true, false, false, false, false, default, default);
                            nextBuffVars.DrainPercent = 0.35f;
                            nextBuffVars.DrainedBool = false;
                            SpellBuffAdd((ObjAIBase)attacker, attacker, "GlobalDrain", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                            ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.35f, 1, false, false, (ObjAIBase)attacker);
                            charVars.SeduceIsActive = 0;
                            SpellBuffRemoveStacks(attacker, attacker, "AhriSoulCrusher", 1);
                        }
                        else
                        {
                            if(GetBuffCountFromCaster(attacker, attacker, "AhriSoulCrusher") > 0)
                            {
                                
                            }
                            else
                            {
                                SpellBuffAdd((ObjAIBase)attacker, attacker, "AhriSoulCrusherCounter", 9, 1, 25000, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                            }
                            ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.35f, 1, false, false, (ObjAIBase)attacker);
                        }
                        SpellEffectCreate(out asdf, out _, "Ahri_Charm_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, owner, default, default, true, false, false, false, false, default, default);
                        SpellBuffAdd((ObjAIBase)attacker, target, "AhriSeduce", 1, 1, tauntLength, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                        ApplyTaunt(attacker, target, tauntLength);
                        DestroyMissile(missileNetworkID);
                    }
                }
            }
            GetPointByUnitFacingOffset(owner, 0, 0);
        }
    }
}






namespace Spells
{
    public class AhriTumble : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public object? Distance = null;
            public object? DashSpeed = null;
        }
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int count = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            Particle? smokeBomb = null;
            //object? _ = null;
            Vector3 ownerPos;
            float moveSpeed = 0;
            float dashSpeed = 0;
            float distance = 0;
            Vector3 nearestAvailablePos;
            float distance2 = 0;
            count = GetBuffCountFromAll(owner, "AhriTumble");
            if(count == 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "AhriTumble", 2, 2, 10, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0.25f, true, false, false, default);
                SetSlotSpellCooldownTimeVer2(0.75f, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, true);
                SetPARCostInc((ObjAIBase)owner, 3, SpellSlotType.SpellSlots, -150, PrimaryAbilityResourceType.MANA);
            }
            else if(count == 1)
            {
                SpellBuffRemoveStacks(owner, owner, "AhriTumble", 1);
            }
            else if(count == 2)
            {
                SpellBuffRemoveStacks(owner, owner, "AhriTumble", 1);
                SetSlotSpellCooldownTimeVer2(0.75f, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, true);
            }
            SpellEffectCreate(out smokeBomb, out _, "Ahri_SpiritRush_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "BUFFBONE_GLB_GROUND_LOC", default, owner, "BUFFBONE_GLB_GROUND_LOC", default, false, false, false, false, false, default, default);
            SpellEffectCreate(out smokeBomb, out _, "Ahri_Orb_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "BUFFBONE_GLB_WEAPON_1", default, owner, "BUFFBONE_GLB_WEAPON_1", default, false, false, false, false, false, default, default);
            ownerPos = GetUnitPosition(owner);
            targetPos = GetCastSpellTargetPos();
            moveSpeed = GetMovementSpeed(owner);
            dashSpeed = Math(moveSpeed, MathOp.MO_ADD, 1200);
            distance = DistanceBetweenObjectAndPoint(owner, targetPos);
            if(distance > 500)
            {
                FaceDirection(owner, targetPos);
                targetPos = GetPointByUnitFacingOffset(owner, 500, 0);
                distance = 500;
                nearestAvailablePos = GetNearestPassablePosition(owner, targetPos);
                distance2 = DistanceBetweenPoints(nearestAvailablePos, targetPos);
                if(distance2 > 25)
                {
                    targetPos = GetPointByUnitFacingOffset(owner, 600, 0);
                    distance = 600;
                }
            }
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.Distance = distance;
            nextBuffVars.DashSpeed = dashSpeed;
            SpellBuffAdd((ObjAIBase)owner, owner, "AhriTumbleKick", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0.25f, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class AhriTumbleMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float DrainPercent = 0;
            public bool? DrainedBool = null;
        }
        public int[] effect0 = {100, 140, 180, 0, 0};
        public int[] effect1 = {100, 140, 180, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? ar = null;
            //object? _ = null;
            Particle? asdf = null;
            //object? teamID = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(charVars.TumbleIsActive == 1)
            {
                SpellEffectCreate(out ar, out _, "Ahri_PassiveHeal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, attacker, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(out asdf, out _, "Ahri_passive_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, default, default, true, false, false, false, false, default, default);
                SpellBuffAdd((ObjAIBase)attacker, attacker, "AhriSoulCrusher2", 1, 1, 0.5f, nextBuffVars, BuffAddType.STACKS_AND_CONTINUE, BuffType.INTERNAL, 0, true, false, false, default);
                nextBuffVars.DrainPercent = 0.35f;
                nextBuffVars.DrainedBool = false;
                SpellBuffAdd((ObjAIBase)attacker, attacker, "GlobalDrain", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.3f, 0, false, false, (ObjAIBase)attacker);
                if(GetBuffCountFromCaster(attacker, attacker, "AhriSoulCrusher") > 0)
                {
                    SpellBuffRemoveStacks(attacker, attacker, "AhriSoulCrusher", 1);
                }
            }
            else
            {
                if(GetBuffCountFromCaster(attacker, attacker, "AhriSoulCrusher") > 0)
                {
                    
                }
                else
                {
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "AhriSoulCrusherCounter", 9, 1, 25000, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                }
                ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.3f, 0, false, false, (ObjAIBase)attacker);
            }
        }
    }
}

namespace Spells
{
    public class AkaliMota : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int MotaDamage = 0;
            public int EnergyReturn = 0;
            public object? VampPercent = null;
        }
        public int[] effect0 = {45, 70, 95, 120, 145};
        public int[] effect1 = {20, 25, 30, 35, 40};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.MotaDamage = this.effect0[level];
            nextBuffVars.EnergyReturn = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 6, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.DAMAGE, 0, true, false, false, default);
            ApplyDamage((ObjAIBase)attacker, target, nextBuffVars.MotaDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
            nextBuffVars.VampPercent = charVars.VampPercent;
            if(GetBuffCountFromCaster(owner, owner, "AkaliTwinAP") > 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "AkaliShadowSwipeHealingParticle", 1, 1, 0.1f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}



namespace Spells
{
    public class AkaliShadowDance : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public object? Distance = null;
            public object? DashSpeed = null;
            public int DamageVar = 0;
        }
        public int[] effect0 = {100, 175, 250, 0, 0};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            int count = 0;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            count = GetBuffCountFromAll(owner, "AkaliShadowDance");
            if(count <= 1)
            {
                SetReturnValue(default);
            }
            else
            {
                if(canMove != true)
                {
                    SetReturnValue(default);
                }
                else if(canCast == false)
                {
                    SetReturnValue(default);
                }
                else
                {
                    SetReturnValue(default);
                }
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int count = 0;
            Particle? smokeBomb = null;
            //object? _ = null;
            Vector3 ownerPos;
            Particle? p3 = null;
            float moveSpeed = 0;
            float dashSpeed = 0;
            float distance = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            count = GetBuffCountFromAll(owner, "AkaliShadowDance");
            if(count > 3)
            {
                SpellBuffRemove(owner, "AkaliShadowDance", (ObjAIBase)owner, charVars.DanceTimerCooldown);
            }
            else
            {
                SpellBuffRemove(owner, "AkaliShadowDance", (ObjAIBase)owner, 0);
            }
            SpellEffectCreate(out smokeBomb, out _, "akali_shadowDance_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            ownerPos = GetUnitPosition(owner);
            SpellEffectCreate(out p3, out _, "akali_shadowDance_return_02.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(out p3, out _, "akali_shadowDance_return.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, false, false, false, false, default, default);
            targetPos = GetCastSpellTargetPos();
            moveSpeed = GetMovementSpeed(owner);
            dashSpeed = Math(moveSpeed, MathOp.MO_ADD, 1600);
            distance = DistanceBetweenObjects("Owner", "Target");
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.Distance = distance;
            nextBuffVars.DashSpeed = dashSpeed;
            nextBuffVars.DamageVar = this.effect0[level];
            SpellBuffAdd((ObjAIBase)target, owner, "AkaliShadowDanceKick", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0.25f, true, false, false, default);
        }
    }
}






namespace Spells
{
    public class AkaliShadowSwipe : Script
    {
        public int[] effect0 = {30, 55, 80, 105, 130};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int bonusDamage = 0;
            float akaliDamage = 0;
            float akaliAP = 0;
            float damageToDeal = 0;
            bool? isStealthed = null;
            bool? canSee = null;
            bonusDamage = this.effect0[level];
            akaliDamage = GetTotalAttackDamage(owner);
            akaliAP = GetFlatMagicDamageMod(owner);
            akaliAP = Math(0.3f, MathOp.MO_MULTIPLY, akaliAP);
            akaliDamage = Math(akaliDamage, MathOp.MO_MULTIPLY, 0.6f);
            damageToDeal = Math(bonusDamage, MathOp.MO_ADD, akaliDamage);
            damageToDeal = Math(akaliAP, MathOp.MO_ADD, damageToDeal);
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                ApplyDamage((ObjAIBase)owner, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, true, false, (ObjAIBase)attacker);
            }
            else if(target is Champion)
            {
                ApplyDamage((ObjAIBase)owner, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, true, false, (ObjAIBase)attacker);
            }
            else
            {
                canSee = CanSeeTarget(owner, target);
                if(canSee == true)
                {
                    ApplyDamage((ObjAIBase)owner, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, true, false, (ObjAIBase)attacker);
                }
            }
        }
    }
}

namespace Spells
{
    public class AkaliSmokeBomb : Script
    {
        public int[] effect0 = {8, 8, 8, 8, 8};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", targetPos, teamID ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, (Champion)owner, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, this.effect0[level], default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}





namespace Spells
{
    public class AlZaharCalloftheVoid : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            Vector3 ownerPos;
            float distance = 0;
            TeamId teamID;
            bool? foundFirstPos = null;
            //object? pos = null;
            object? firstPos = null;
            object? lastPos = null;
            Minion? other1 = null;
            //object? lineWidth = null;
            Minion? other2 = null;
            if(GetBuffCountFromCaster(attacker, attacker, "IfHasBuffCheck") == 0)
            {
                SpellBuffAdd((ObjAIBase)attacker, attacker, "AlZaharVoidlingCount", 3, 1, 25000, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            teamID = GetTeamID(default);
            foundFirstPos = false;
            ForEachPointOnLine(ownerPos, targetPos, 750, distance, 15, (pos) => 
            {
                if(foundFirstPos == false)
                {
                    firstPos = pos;
                    foundFirstPos = true;
                }
                lastPos = pos;
            });
            other1 = SpawnMinion("Portal to the Void", "TestCubeRender", "idle.lua", firstPos, teamID ?? TEAM_CASTER, false, true, false, true, false, true, 300, false, false, (Champion)owner, default);
            other2 = SpawnMinion("Portal to the Void", "TestCubeRender", "idle.lua", lastPos, teamID ?? TEAM_CASTER, false, true, false, true, false, true, 300 + lineWidth, false, false, (Champion)owner, default);
            FaceDirection(other1, targetPos);
            FaceDirection(other2, targetPos);
            nextBuffVars.TargetPos = targetPos;
            SpellBuffAdd((ObjAIBase)owner, other1, default, 1, 1, 0.4f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, other2, default, 1, 1, 0.4f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class AlZaharCalloftheVoidMissile : Script
    {
        public float[] effect0 = {40, 67.5f, 95, 122.5f, 150};
        public float[] effect1 = {1.4f, 1.8f, 2.2f, 2.6f, 3};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseDamage = 0;
            float abilityPower = 0;
            float abilityPowerMod = 0;
            float totalDamage = 0;
            float silenceDuration = 0;
            //object? nextBuffVars = null;
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            baseDamage = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(attacker);
            abilityPowerMod = Math(abilityPower, MathOp.MO_MULTIPLY, 0.4f);
            totalDamage = Math(abilityPowerMod, MathOp.MO_ADD, baseDamage);
            silenceDuration = this.effect1[level];
            ApplyDamage((ObjAIBase)attacker, target, totalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, false, false, default);
            if(target is Champion)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "Silence", 1, 1, silenceDuration, default, BuffAddType.RENEW_EXISTING, BuffType.SILENCE, 0, true, default, default, default);
            }
        }
    }
}

namespace Spells
{
    public class AlZaharMaleficVisions : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(attacker, attacker, "IfHasBuffCheck") == 0)
            {
                SpellBuffAdd((ObjAIBase)attacker, attacker, "AlZaharVoidlingCount", 3, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            }
            BreakSpellShields(target);
            SpellBuffAdd((ObjAIBase)attacker, target, "AlZaharRecentVis", 1, 1, 4, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "AlZaharMaleficVisions", 1, 1, 4, default, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class AlZaharNetherGrasp : Script
    {
        class ChannelingStart_nextBuffVars
        {
            public int DamageToDeal = 0;
        }
        public int[] effect0 = {50, 80, 110};
        Particle? particleID = null;
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            ChannelingStart_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            if(GetBuffCountFromCaster(attacker, attacker, "IfHasBuffCheck") == 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "AlZaharVoidlingCount", 3, 1, 25000, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
            BreakSpellShields(target);
            SpellBuffAdd((ObjAIBase)owner, owner, "AlZaharNetherGraspSound", 4, 1, 2.5f, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            nextBuffVars.DamageToDeal = this.effect0[level];
            SpellEffectCreate(out this.particleID, out _, "AlzaharNetherGrasp_beam.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "head", default, target, "root", default, false, false, false, false, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, target, "AlZaharNetherGrasp", 1, 1, 2.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, target, "Suppression", 100, 1, 2.5f, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SUPPRESSION, 0, true, false, false, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(target, "AlZaharNetherGrasp", (ObjAIBase)attacker, 0);
            SpellBuffRemove(owner, "AlZaharNetherGraspSound", (ObjAIBase)owner, 0);
            SpellEffectRemove(this.particleID);
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(target, "Suppression", (ObjAIBase)owner, 0);
            SpellBuffRemove(target, "AlZaharNetherGrasp", (ObjAIBase)attacker, 0);
            SpellBuffRemove(owner, "AlZaharNetherGraspSound", (ObjAIBase)owner, 0);
            SpellEffectRemove(this.particleID);
        }
    }
}

namespace Spells
{
    public class AlZaharNullZone : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public int HealthFlat = 0;
            public object? HealthPercentPerTick = null;
        }
        public float[] effect0 = {0.04f, 0.05f, 0.06f, 0.07f, 0.08f};
        public int[] effect1 = {20, 30, 40, 50, 60};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            TeamId teamID;
            float healthPercent = 0;
            float abilityPowerRatio = 0;
            float abilityPower = 0;
            float healthPercentPerTick = 0;
            if(GetBuffCountFromCaster(attacker, attacker, "IfHasBuffCheck") == 0)
            {
                SpellBuffAdd((ObjAIBase)attacker, attacker, "AlZaharVoidlingCount", 3, 1, 25000, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.TargetPos = targetPos;
            teamID = GetTeamID(default);
            healthPercent = this.effect0[level];
            nextBuffVars.HealthFlat = this.effect1[level];
            abilityPowerRatio = GetFlatMagicDamageMod(owner);
            abilityPower = Math(abilityPowerRatio, MathOp.MO_MULTIPLY, 0.0001f);
            healthPercentPerTick = Math(healthPercent, MathOp.MO_ADD, abilityPower);
            nextBuffVars.HealthPercentPerTick = healthPercentPerTick;
            SpellBuffAdd((ObjAIBase)attacker, owner, "AlZaharNullZone", 5, 1, 5, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.INTERNAL, 0, false, false, false, default);
        }
    }
}









namespace Spells
{
    public class AlphaStrike : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int BaseDamage = 0;
            public float ChanceToKill = 0;
        }
        public int[] effect0 = {100, 150, 200, 250, 300};
        public float[] effect1 = {0.2f, 0.3f, 0.4f, 0.5f, 0.6f};
        public int[] effect2 = {5, 5, 5, 5, 5};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            canMove = GetCanMove(owner);
            if(canMove == false)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int targetNum = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            targetNum = GetCastSpellTargetsHitPlusOne(default);
            if(targetNum == 1)
            {
                SpellBuffAdd((ObjAIBase)owner, target, "AlphaStrikeMarker", 1, 1, 10, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            nextBuffVars.BaseDamage = this.effect0[level];
            nextBuffVars.ChanceToKill = this.effect1[level];
            SpellBuffAdd((ObjAIBase)owner, target, "AlphaStrikeTarget", 1, 1, this.effect2[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class AlphaStrikeTeleport : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? unit = null;
            Vector3 pos;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 2000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectUntargetable ", "AlphaStrikeMarker", true, (unit) => 
            {
                if(GetBuffCountFromCaster(unit, owner, "AlphaStrikeMarker") > 0)
                {
                    pos = GetPointByUnitFacingOffset(unit, 75, 0);
                    TeleportToPosition(owner, pos);
                    if(unit is Champion)
                    {
                        IssueOrder(owner, OrderType.AttackTo, default, unit);
                    }
                    SpellBuffRemove(unit, "AlphaStrikeMarker", (ObjAIBase)owner, 0);
                    SpellBuffRemove(owner, "AlphaStrikeMarker", (ObjAIBase)owner, 0);
                }
            });
        }
    }
}
namespace Spells
{
    public class AnnieBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            int annieSkinID = 0;
            TeamId teamID;
            Particle? a = null;
            //object? _ = null;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            if(target is ObjAIBase)
            {
                annieSkinID = GetSkinID(owner);
                teamID = GetTeamID(default);
                if(annieSkinID == 5)
                {
                    SpellEffectCreate(out a, out _, "AnnieBasicAttack_tar_frost.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out a, out _, "AnnieBasicAttack_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class AnnieBasicAttack2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            int annieSkinID = 0;
            TeamId teamID;
            Particle? a = null;
            //object? _ = null;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            if(target is ObjAIBase)
            {
                annieSkinID = GetSkinID(owner);
                teamID = GetTeamID(default);
                if(annieSkinID == 5)
                {
                    SpellEffectCreate(out a, out _, "AnnieBasicAttack_tar_frost.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out a, out _, "AnnieBasicAttack_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class AnnieCritAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            int annieSkinID = 0;
            TeamId teamID;
            Particle? a = null;
            //object? _ = null;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            if(target is ObjAIBase)
            {
                annieSkinID = GetSkinID(owner);
                teamID = GetTeamID(default);
                if(annieSkinID == 5)
                {
                    SpellEffectCreate(out a, out _, "AnnieBasicAttack_tar_frost.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out a, out _, "AnnieBasicAttack_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class AnnieTibbersBasicAttack : Script
    {
        public int[] effect0 = {80, 105, 130, 130, 130};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int dmg = 0;
            teamID = GetTeamID(default);
            attacker = GetChampionBySkinName("Annie", teamID);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            dmg = this.effect0[level];
            ApplyDamage((ObjAIBase)attacker, target, dmg, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, default, false, false, default);
        }
    }
}





namespace Spells
{
    public class ArmsmasterEmpowerAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseDamage = 0;
            baseDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, default, default, default, default);
        }
    }
}
namespace Spells
{
    public class ArmsmasterLeapStrikeAttack : Script
    {
        public int[] effect0 = {60, 95, 130, 165, 200};
        public int[] effect1 = {20, 45, 70, 95, 120};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "LeapStrikeSpeed", 1, 1, 0.35f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float bonusAttackDamage = 0;
            int bonusDamage = 0;
            float physicalBonus = 0;
            float aOEDmg = 0;
            float attackDamage = 0;
            float damageToDeal = 0;
            BreakSpellShields(target);
            if(GetBuffCountFromCaster(owner, owner, "EmpowerTwo") > 0)
            {
                bonusAttackDamage = GetFlatPhysicalDamageMod(owner);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                bonusDamage = this.effect0[level];
                physicalBonus = Math(bonusAttackDamage, MathOp.MO_MULTIPLY, 0.4f);
                aOEDmg = Math(physicalBonus, MathOp.MO_ADD, bonusDamage);
                ApplyDamage((ObjAIBase)attacker, target, aOEDmg, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.4f, 0.7f, false, false, (ObjAIBase)attacker);
                SpellBuffRemove(owner, "EmpowerTwo", (ObjAIBase)owner, 0);
            }
            attackDamage = GetTotalAttackDamage(owner);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            bonusDamage = this.effect1[level];
            damageToDeal = Math(attackDamage, MathOp.MO_ADD, bonusDamage);
            ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.7f, 0, false, false, (ObjAIBase)attacker);
            if(GetBuffCountFromCaster(owner, owner, "RelentlessAssaultMarker") > 0)
            {
                SpellBuffRemoveStacks(owner, owner, "RelentlessAssaultMarker", 0);
            }
            if(target is Champion)
            {
                if(owner.Team != target.Team)
                {
                    IssueOrder(owner, OrderType.AttackTo, default, target);
                }
            }
        }
    }
}
namespace Spells
{
    public class ArmsmasterRelentlessAttack : Script
    {
        public int[] effect0 = {60, 95, 130, 165, 200};
        public int[] effect1 = {140, 170, 210};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? hitResult = null;
            float attackDamage = 0;
            float bonusAttackDamage = 0;
            int bonusDamage = 0;
            float physicalBonus = 0;
            float aOEDmg = 0;
            float baseAttackDamage = 0;
            Particle? a = null;
            //object? _ = null;
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    attackDamage = GetTotalAttackDamage(owner);
                    if(GetBuffCountFromCaster(owner, owner, "EmpowerTwo") > 0)
                    {
                        bonusAttackDamage = GetFlatPhysicalDamageMod(owner);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        bonusDamage = this.effect0[level];
                        physicalBonus = Math(bonusAttackDamage, MathOp.MO_MULTIPLY, 0.4f);
                        aOEDmg = Math(physicalBonus, MathOp.MO_ADD, bonusDamage);
                        BreakSpellShields(target);
                        ApplyDamage((ObjAIBase)attacker, target, aOEDmg, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
                        SpellBuffRemove(owner, "EmpowerTwo", (ObjAIBase)owner, 0);
                    }
                    baseAttackDamage = GetBaseAttackDamage(owner);
                    ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    ApplyDamage((ObjAIBase)owner, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.7f, 1, false, false, (ObjAIBase)attacker);
                    SpellBuffRemoveStacks(attacker, attacker, "RelentlessAssaultDebuff", 0);
                    SpellEffectCreate(out a, out _, "RelentlessAssault_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
            }
        }
    }
}


namespace Spells
{
    public class AsheSpiritOfTheHawk : Script
    {
        class OnMissileEnd_nextBuffVars
        {
            public object? TargetPos = null;
        }
        public void OnMissileEnd(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? missileEndPosition = null;
            OnMissileEnd_nextBuffVars nextBuffVars = new();
            nextBuffVars.TargetPos = missileEndPosition;
            SpellBuffAdd((ObjAIBase)owner, owner, "AsheSpiritOfTheHawkBubble", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
    }
}

namespace Spells
{
    public class AsheSpiritOfTheHawkCast : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
        }
        public int[] effect0 = {2500, 3250, 4000, 4750, 5500};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? other1 = null;
            int dist = 0;
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.TargetPos = targetPos;
            SpellBuffAdd((ObjAIBase)attacker, other1, default, 1, 1, 30, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 2, SpellSlotType.ExtraSlots, level, true, true, false, false, default, default);
            dist = this.effect0[level];
            Move(other1, targetPos, 1350, 0, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, dist, default);
        }
    }
}
namespace Spells
{
    public class AspectOfTheCougar : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int ArmorMod = 0;
        }
        public int[] effect0 = {10, 20, 30};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "AspectOfTheCougar") > 0)
            {
                SpellBuffRemove(owner, default, (ObjAIBase)owner, 0);
            }
            else
            {
                nextBuffVars.ArmorMod = this.effect0[level];
                SpellBuffAdd((ObjAIBase)attacker, owner, default, 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class AstralBlessing : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int AstralArmor = 0;
        }
        public int[] effect0 = {70, 140, 210, 280, 350};
        public int[] effect1 = {25, 50, 75, 100, 125};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float tempAbilityPower = 0;
            float healthToRestore = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            float healingBonus = 0;
            tempAbilityPower = GetFlatMagicDamageMod(owner);
            healthToRestore = this.effect0[level];
            nextBuffVars.AstralArmor = this.effect1[level];
            healingBonus = Math(tempAbilityPower, MathOp.MO_MULTIPLY, 0.45f);
            healthToRestore = Math(healingBonus, MathOp.MO_ADD, healthToRestore);
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 5, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            IncHealth(target, healthToRestore, owner);
        }
    }
}

namespace Spells
{
    public class AuraofDespair : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "AuraofDespair") > 0)
            {
                SpellBuffRemove(owner, "AuraofDespair", (ObjAIBase)owner, default);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "AuraofDespair", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            }
        }
    }
}




namespace Spells
{
    public class BandageToss : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            targetPos = GetCastSpellTargetPos();
            FaceDirection(owner, targetPos);
            targetPos = GetPointByUnitFacingOffset(owner, 1100, 0);
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, default, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, default, default);
        }
    }
}




namespace Spells
{
    public class BantamTrap : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            int count = 0;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            count = GetBuffCountFromAll(owner, "TeemoMushrooms");
            if(count <= 1)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float duration = 0;
            TeamId teamID;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            duration = GetBuffRemainingDuration(owner, "TeemoMushrooms");
            if(duration > 40)
            {
                SpellBuffRemove(owner, "TeemoMushrooms", (ObjAIBase)owner, charVars.MushroomCooldown);
            }
            else
            {
                SpellBuffRemove(owner, "TeemoMushrooms", (ObjAIBase)owner, 0);
            }
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            other3 = SpawnMinion("Noxious Trap", "TeemoMushroom", "idle.lua", targetPos, teamID, true, true, false, false, true, false, 0, true, false, (Champion)owner, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 600, default, BuffAddType.REPLACE_EXISTING, BuffType.INVISIBILITY, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "SharedWardBuff", 1, 1, 600, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}









namespace Spells
{
    public class BilgewaterCutlass : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            Particle? casterParticle = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "BilgewaterCutlass")
            {
                SetSlotSpellCooldownTimeVer2(60, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name1 == "BilgewaterCutlass")
            {
                SetSlotSpellCooldownTimeVer2(60, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name2 == "BilgewaterCutlass")
            {
                SetSlotSpellCooldownTimeVer2(60, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name3 == "BilgewaterCutlass")
            {
                SetSlotSpellCooldownTimeVer2(60, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name4 == "BilgewaterCutlass")
            {
                SetSlotSpellCooldownTimeVer2(60, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name5 == "BilgewaterCutlass")
            {
                SetSlotSpellCooldownTimeVer2(60, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            targetPos = GetUnitPosition(target);
            FaceDirection(owner, targetPos);
            SpellEffectCreate(out casterParticle, out _, "PirateCutlass_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, default, default, default, default, default, default);
            BreakSpellShields(target);
            ApplyDamage((ObjAIBase)attacker, target, 150, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0, 1, true, true, (ObjAIBase)attacker);
            nextBuffVars.MoveSpeedMod = -0.5f;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.SLOW, 0, true, false, default, default);
        }
    }
}


namespace Spells
{
    public class BlackShield : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? ShieldHealth = null;
        }
        public int[] effect0 = {95, 160, 225, 290, 355};
        public int[] effect1 = {5, 5, 5, 5, 5};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float abilityPower = 0;
            int baseHealth = 0;
            float abilityPowerMod = 0;
            float shieldHealth = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            abilityPower = GetFlatMagicDamageMod(owner);
            baseHealth = this.effect0[level];
            abilityPowerMod = Math(abilityPower, MathOp.MO_MULTIPLY, 0.7f);
            shieldHealth = Math(abilityPowerMod, MathOp.MO_ADD, baseHealth);
            nextBuffVars.ShieldHealth = shieldHealth;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect1[level], nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SPELL_IMMUNITY, 0, true, false, false, default);
        }
    }
}




namespace Spells
{
    public class BlindMonkEOne : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public int[] effect0 = {60, 95, 130, 165, 200};
        public float[] effect1 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        Particle? partname = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            bool? hasHitTarget = null;
            TeamId casterID;
            int baseDamage = 0;
            float bonusAD = 0;
            float damageToDeal = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            //object? unit = null;
            Particle? aoehit = null;
            hasHitTarget = false;
            casterID = GetTeamID(default);
            baseDamage = this.effect0[level];
            bonusAD = GetFlatPhysicalDamageMod(owner);
            damageToDeal = Math(bonusAD, MathOp.MO_ADD, baseDamage);
            nextBuffVars.MoveSpeedMod = this.effect1[level];
            SpellEffectCreate(out this.partname, out _, "blindMonk_thunderCrash_impact_cas.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "C_BUFFBONE_GLB_CHEST_LOC", owner.Position, target, default, default, true, default, default, false, false, default, default);
            SpellEffectCreate(out this.partname, out _, "blindMonk_thunderCrash_impact_02.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "C_BUFFBONE_GLB_CHEST_LOC", owner.Position, target, default, default, true, default, default, false, false, default, default);
            SpellEffectCreate(out this.partname, out _, "blindMonk_E_cas.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "l_hand", owner.Position, target, default, default, true, default, default, false, false, default, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "SharedWardBuff", false, (unit) => 
            {
                BreakSpellShields(unit);
                ApplyDamage((ObjAIBase)attacker, unit, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, false, false, (ObjAIBase)attacker);
                SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                SpellEffectCreate(out aoehit, out _, "blindMonk_thunderCrash_impact_unit_tar.troy", default, casterID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, false, false, default, default);
                SpellEffectCreate(out aoehit, out _, "blindMonk_E_thunderCrash_tar.troy", default, casterID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, false, false, default, default);
                SpellEffectCreate(out aoehit, out _, "blindMonk_E_thunderCrash_unit_tar_blood.troy", default, casterID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, false, false, default, default);
                hasHitTarget = true;
            });
            if(hasHitTarget == true)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "BlindMonkEManager", 1, 1, 3, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}

namespace Spells
{
    public class BlindMonkETwo : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SetReturnValue(default);
            ForNClosestUnitsInTargetArea(owner, owner.Position, 750, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, true, "BlindMonkEOne", (unit) => 
            {
                SetReturnValue(default);
            });
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            //object? unit = null;
            //object? nextBuffVars = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            ownerPos = GetUnitPosition(owner);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "BlindMonkEOne", true, (unit) => 
            {
                SpellCast((ObjAIBase)owner, unit, default, default, true, 0, SpellSlotType.ExtraSlots, level, true, true, false, true, false, ownerPos);
            });
            if(GetBuffCountFromCaster(owner, owner, "BlindMonkEManager") > 0)
            {
                SpellBuffRemove(owner, "BlindMonkEManager", (ObjAIBase)owner, default);
            }
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 0.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class BlindMonkETwoMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float PercentReduction = 0;
        }
        public float[] effect0 = {-0.3f, -0.375f, -0.45f, -0.525f, -0.6f};
        public int[] effect1 = {4, 4, 4, 4, 4};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.PercentReduction = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect1[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class BlindMonkQOne : Script
    {
        public int[] effect0 = {50, 80, 110, 140, 170};
        public int[] effect1 = {0, 0, 0, 0, 0};
        public int[] effect2 = {50, 80, 110, 140, 170};
        public int[] effect3 = {0, 0, 0, 0, 0};
        public int[] effect4 = {50, 80, 110, 140, 170};
        public int[] effect5 = {0, 0, 0, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            bool? isStealthed = null;
            TeamId teamID;
            int baseDamage = 0;
            float bonusAD = 0;
            float damageToDeal = 0;
            //object? nextBuffVars = null;
            Particle? hit = null;
            //object? _ = null;
            //object? missileNetworkID = null;
            bool? canSee = null;
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                teamID = GetTeamID(default);
                baseDamage = this.effect0[level];
                bonusAD = GetFlatPhysicalDamageMod(owner);
                bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 0.9f);
                damageToDeal = Math(bonusAD, MathOp.MO_ADD, baseDamage);
                if(teamID == TeamId.TEAM_BLUE)
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
                else
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "BlindMonkQOneChaos", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
                ApplyDamage((ObjAIBase)attacker, target, damageToDeal + this.effect1[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, true, (ObjAIBase)attacker);
                SpellEffectCreate(out hit, out _, "blindMonk_Q_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                DestroyMissile(missileNetworkID);
                if(!target.IsDead)
                {
                    SpellBuffAdd((ObjAIBase)target, owner, "BlindMonkQManager", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
            else
            {
                if(target is Champion)
                {
                    teamID = GetTeamID(default);
                    baseDamage = this.effect2[level];
                    bonusAD = GetFlatPhysicalDamageMod(owner);
                    bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 0.9f);
                    damageToDeal = Math(bonusAD, MathOp.MO_ADD, baseDamage);
                    if(teamID == TeamId.TEAM_BLUE)
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, "BlindMonkQOneChaos", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                    }
                    ApplyDamage((ObjAIBase)attacker, target, damageToDeal + this.effect3[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, true, (ObjAIBase)attacker);
                    SpellEffectCreate(out hit, out _, "blindMonk_Q_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                    DestroyMissile(missileNetworkID);
                    if(!target.IsDead)
                    {
                        SpellBuffAdd((ObjAIBase)target, owner, "BlindMonkQManager", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    }
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        teamID = GetTeamID(default);
                        baseDamage = this.effect4[level];
                        bonusAD = GetFlatPhysicalDamageMod(owner);
                        bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 0.9f);
                        damageToDeal = Math(bonusAD, MathOp.MO_ADD, baseDamage);
                        if(teamID == TeamId.TEAM_BLUE)
                        {
                            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                        }
                        else
                        {
                            SpellBuffAdd((ObjAIBase)attacker, target, "BlindMonkQOneChaos", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                        }
                        ApplyDamage((ObjAIBase)attacker, target, damageToDeal + this.effect5[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, true, (ObjAIBase)attacker);
                        SpellEffectCreate(out hit, out _, "blindMonk_Q_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                        DestroyMissile(missileNetworkID);
                        if(!target.IsDead)
                        {
                            SpellBuffAdd((ObjAIBase)target, owner, "BlindMonkQManager", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                    }
                }
            }
        }
    }
}

namespace Spells
{
    public class BlindMonkQTwo : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public object? Distance = null;
            public object? DashSpeed = null;
            public object? DamageVar = null;
        }
        public int[] effect0 = {50, 80, 110, 140, 170};
        public int[] effect1 = {50, 80, 110, 140, 170};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            //object? unit = null;
            SetReturnValue(default);
            teamID = GetTeamID(default);
            if(teamID == TeamId.TEAM_BLUE)
            {
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "BlindMonkQOne", true, (unit) => 
                {
                    if(GetBuffCountFromCaster(unit, owner, "BlindMonkQOne") > 0)
                    {
                        SetReturnValue(default);
                    }
                });
            }
            else
            {
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "BlindMonkQOneChaos", true, (unit) => 
                {
                    if(GetBuffCountFromCaster(unit, owner, "BlindMonkQOneChaos") > 0)
                    {
                        SetReturnValue(default);
                    }
                });
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            //object? unit = null;
            Vector3 ownerPos;
            Particle? p3 = null;
            //object? _ = null;
            float moveSpeed = 0;
            float dashSpeed = 0;
            float distance = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            int baseDamage = 0;
            float bonusAD = 0;
            float damageVar = 0;
            teamID = GetTeamID(default);
            if(teamID == TeamId.TEAM_BLUE)
            {
                ForNClosestUnitsInTargetArea(owner, owner.Position, 2000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 2, true, "BlindMonkQOne", (unit) => 
                {
                    if(GetBuffCountFromCaster(unit, owner, "BlindMonkQOne") > 0)
                    {
                        SpellBuffRemove(unit, "BlindMonkQOne", (ObjAIBase)owner, 0);
                        ownerPos = GetUnitPosition(owner);
                        SpellEffectCreate(out p3, out _, "blindMonk_Q_resonatingStrike_02.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, false, false, false, false, default, default);
                        targetPos = GetUnitPosition(unit);
                        moveSpeed = GetMovementSpeed(owner);
                        dashSpeed = Math(moveSpeed, MathOp.MO_ADD, 1350);
                        distance = DistanceBetweenObjects("Owner", "Unit");
                        nextBuffVars.TargetPos = targetPos;
                        nextBuffVars.Distance = distance;
                        nextBuffVars.DashSpeed = dashSpeed;
                        baseDamage = this.effect0[level];
                        bonusAD = GetFlatPhysicalDamageMod(owner);
                        bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 0.9f);
                        damageVar = Math(baseDamage, MathOp.MO_ADD, bonusAD);
                        nextBuffVars.DamageVar = damageVar;
                        SpellBuffAdd(unit, owner, "BlindMonkQTwoDash", 1, 1, 2.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, true, default);
                        SpellBuffClear(owner, "BlindMonkQManager");
                    }
                });
            }
            else
            {
                ForNClosestUnitsInTargetArea(owner, owner.Position, 2000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 2, true, "BlindMonkQOneChaos", (unit) => 
                {
                    if(GetBuffCountFromCaster(unit, owner, "BlindMonkQOneChaos") > 0)
                    {
                        SpellBuffRemove(unit, "BlindMonkQOneChaos", (ObjAIBase)owner, 0);
                        ownerPos = GetUnitPosition(owner);
                        SpellEffectCreate(out p3, out _, "blindMonk_Q_resonatingStrike_02.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, false, false, false, false, default, default);
                        targetPos = GetUnitPosition(unit);
                        moveSpeed = GetMovementSpeed(owner);
                        dashSpeed = Math(moveSpeed, MathOp.MO_ADD, 1350);
                        distance = DistanceBetweenObjects("Owner", "Unit");
                        nextBuffVars.TargetPos = targetPos;
                        nextBuffVars.Distance = distance;
                        nextBuffVars.DashSpeed = dashSpeed;
                        baseDamage = this.effect1[level];
                        bonusAD = GetFlatPhysicalDamageMod(owner);
                        bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 0.9f);
                        damageVar = Math(baseDamage, MathOp.MO_ADD, bonusAD);
                        nextBuffVars.DamageVar = damageVar;
                        SpellBuffAdd(unit, owner, "BlindMonkQTwoDash", 1, 1, 2.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, true, default);
                        SpellBuffClear(owner, "BlindMonkQManager");
                    }
                });
            }
        }
    }
}


namespace Spells
{
    public class BlindMonkR : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SetReturnValue(default);
            ForNClosestUnitsInTargetArea(owner, owner.Position, 400, "AffectEnemies AffectHeroes ", 1, true, "BlindMonkRMarker", (unit) => 
            {
                SetReturnValue(default);
            });
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Minion? other2 = null;
            //object? nextBuffVars = null;
            //object? unit = null;
            Vector3 teleportPos;
            Vector3 ownerPos;
            ForNClosestUnitsInTargetArea(owner, owner.Position, 400, "AffectEnemies AffectHeroes ", 1, true, "BlindMonkRMarker", (unit) => 
            {
                targetPos = GetCastSpellTargetPos();
                teamID = GetTeamID(default);
                other2 = SpawnMinion("TestMinion", "TestCubeRender", "idle.lua", targetPos, teamID, false, true, false, false, false, true, 0, default, true, default, default);
                SpellBuffAdd(other2, other2, "BlindMonkRNewMinion", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                FaceDirection(unit, targetPos);
                teleportPos = GetPointByUnitFacingOffset(unit, 100, 180);
                TeleportToPosition(owner, teleportPos);
                ownerPos = GetUnitPosition(owner);
                SpellCast((ObjAIBase)owner, unit, targetPos, targetPos, true, 1, SpellSlotType.ExtraSlots, level, true, false, false, true, false, ownerPos);
            });
        }
    }
}


namespace Spells
{
    public class BlindMonkRKick : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? SecondaryDamage = null;
            public object? TarPos = null;
        }
        public int[] effect0 = {200, 400, 600, 600, 600};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int baseDamage = 0;
            float bonusAD = 0;
            float primaryDamage = 0;
            float secondaryDamage = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            float distanceToAdd = 0;
            float distanceToKick = 0;
            Vector3 tarPos;
            baseDamage = this.effect0[level];
            bonusAD = GetFlatPhysicalDamageMod(owner);
            bonusAD = Math(2, MathOp.MO_MULTIPLY, bonusAD);
            primaryDamage = Math(baseDamage, MathOp.MO_ADD, bonusAD);
            secondaryDamage = Math(primaryDamage, MathOp.MO_DIVIDE, 1);
            nextBuffVars.SecondaryDamage = secondaryDamage;
            distanceToAdd = DistanceBetweenObjects("Owner", "Target");
            distanceToKick = Math(distanceToAdd, MathOp.MO_ADD, 800);
            FaceDirection(owner, target.Position);
            tarPos = GetPointByUnitFacingOffset(owner, distanceToKick, 0);
            nextBuffVars.TarPos = tarPos;
            SpellBuffAdd((ObjAIBase)owner, target, default, 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.STUN, 0, true, false, false, default);
            ApplyDamage((ObjAIBase)attacker, target, primaryDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, true, (ObjAIBase)attacker);
        }
    }
}





namespace Spells
{
    public class BlindMonkWOne : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? ShieldAbsorb = null;
            public object? TargetPos = null;
            public object? Distance = null;
            public object? DashSpeed = null;
        }
        public int[] effect0 = {40, 80, 120, 160, 200};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float shieldAbsorb = 0;
            float bonusAP = 0;
            float bonusAP80 = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            Vector3 ownerPos;
            Particle? p3 = null;
            //object? _ = null;
            float moveSpeed = 0;
            float dashSpeed = 0;
            float distance = 0;
            shieldAbsorb = this.effect0[level];
            bonusAP = GetFlatMagicDamageMod(owner);
            bonusAP80 = Math(bonusAP, MathOp.MO_MULTIPLY, 0.8f);
            shieldAbsorb = Math(shieldAbsorb, MathOp.MO_ADD, bonusAP80);
            nextBuffVars.ShieldAbsorb = shieldAbsorb;
            if(target != attacker)
            {
                ownerPos = GetUnitPosition(owner);
                SpellEffectCreate(out p3, out _, "blindMonk_W_cas_01.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, default, default, false, false, default, default);
                targetPos = GetUnitPosition(target);
                moveSpeed = GetMovementSpeed(owner);
                dashSpeed = Math(moveSpeed, MathOp.MO_ADD, 1350);
                distance = DistanceBetweenObjects("Owner", "Target");
                nextBuffVars.TargetPos = targetPos;
                nextBuffVars.Distance = distance;
                nextBuffVars.DashSpeed = dashSpeed;
                SpellBuffAdd((ObjAIBase)target, owner, "BlindMonkWOneDash", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0.25f, true, false, true, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "BlindMonkWManager", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                if(GetBuffCountFromCaster(target, default, "SharedWardBuff") > 0)
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "Destealth", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "BlindMonkWOneShield", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "BlindMonkWManager", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}


namespace Spells
{
    public class BlindMonkWTwo : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int TotalArmor = 0;
            public float LifestealPercent = 0;
        }
        public int[] effect0 = {10, 15, 20, 25, 30};
        public float[] effect1 = {0.05f, 0.1f, 0.15f, 0.2f, 0.25f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.TotalArmor = this.effect0[level];
            nextBuffVars.LifestealPercent = this.effect1[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            if(GetBuffCountFromCaster(owner, owner, "BlindMonkWManager") > 0)
            {
                SpellBuffRemove(owner, "BlindMonkWManager", (ObjAIBase)owner, default);
            }
        }
    }
}
namespace Spells
{
    public class BlindingDart : Script
    {
        public float[] effect0 = {1.5f, 1.75f, 2, 2.25f, 2.5f};
        public int[] effect1 = {80, 125, 170, 215, 260};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 100, 1, this.effect0[level], default, BuffAddType.STACKS_AND_OVERLAPS, BuffType.BLIND, 0, true, false, default, default);
            ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.8f, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class BloodBoil : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float AttackSpeedBonusPercent = 0;
            public float MovementSpeedBonusPercent = 0;
        }
        public float[] effect0 = {0.25f, 0.35f, 0.45f, 0.55f, 0.65f};
        public float[] effect1 = {0.11f, 0.12f, 0.13f, 0.14f, 0.15f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.AttackSpeedBonusPercent = this.effect0[level];
            nextBuffVars.MovementSpeedBonusPercent = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 15, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.HASTE, 0, true, default, default, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 15, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.HASTE, 0, true, default, default, default);
        }
    }
}
namespace Spells
{
    public class BloodScent : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "Bloodscent_internal") > 0)
            {
                SpellBuffRemove(owner, "BloodScent_internal", (ObjAIBase)owner, 0);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "BloodScent_internal", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            }
        }
    }
}


namespace Spells
{
    public class Bloodlust : Script
    {
        public int[] effect0 = {30, 40, 50, 60, 70};
        public float[] effect1 = {0.5f, 0.95f, 1.4f, 1.85f, 2.3f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float currentFury = 0;
            int baseHeal = 0;
            float healthPerFury = 0;
            float healthToRestore = 0;
            float spellPower = 0;
            float abilityPowerMod = 0;
            Particle? part = null;
            //object? _ = null;
            float furyToRemove = 0;
            currentFury = GetPAR(owner);
            baseHeal = this.effect0[level];
            healthPerFury = this.effect1[level];
            healthToRestore = Math(currentFury, MathOp.MO_MULTIPLY, healthPerFury);
            healthToRestore = Math(baseHeal, MathOp.MO_ADD, healthToRestore);
            spellPower = GetFlatMagicDamageMod(owner);
            abilityPowerMod = Math(1.5f, MathOp.MO_MULTIPLY, spellPower);
            healthToRestore = Math(healthToRestore, MathOp.MO_ADD, abilityPowerMod);
            IncHealth(owner, healthToRestore, owner);
            SpellEffectCreate(out part, out _, "Tryndamere_Heal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            furyToRemove = Math(-1, MathOp.MO_MULTIPLY, currentFury);
            IncPAR(owner, furyToRemove);
        }
    }
}





namespace Spells
{
    public class BlueCardAttack : Script
    {
        public int[] effect0 = {40, 60, 80, 100, 120};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "PickaCard", (ObjAIBase)owner, default);
            SpellBuffRemove(owner, "BlueCardPreAttack", (ObjAIBase)owner, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Particle? asdf1 = null;
            //object? _ = null;
            float totalDamage = 0;
            int bonusDamage = 0;
            float damageToDeal = 0;
            //object? nextBuffVars = null;
            float baseDamage = 0;
            Particle? a = null;
            teamID = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(target is ObjAIBase)
            {
                if(!target.IsDead)
                {
                    BreakSpellShields(target);
                    SpellEffectCreate(out asdf1, out _, "PickaCard_blue_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                }
                totalDamage = GetTotalAttackDamage(owner);
                bonusDamage = this.effect0[level];
                damageToDeal = Math(totalDamage, MathOp.MO_ADD, bonusDamage);
                SpellBuffAdd((ObjAIBase)target, owner, "CardmasterBlueCardMana", 1, 1, 0.1f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
                ApplyDamage((ObjAIBase)attacker, target, 0, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
            }
            else
            {
                baseDamage = GetBaseAttackDamage(attacker);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out a, out _, "soraka_infuse_ally_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, true, default, default, default, default, default, default);
            }
        }
    }
}
namespace Spells
{
    public class BlueCardLock : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            SealSpellSlot(1, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, default);
        }
    }
}
namespace Spells
{
    public class BlueCardPreattack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            SpellCast((ObjAIBase)owner, target, target.Position, target.Position, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, true, default);
            SpellBuffRemove(owner, "PickACard", (ObjAIBase)owner, default);
        }
    }
}
namespace Spells
{
    public class BluePill : Script
    {
        class ChannelingStart_nextBuffVars
        {
            public bool? WillRemove = null;
        }
        Particle? particleID = null;
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            ChannelingStart_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            nextBuffVars.WillRemove = false;
            SpellEffectCreate(out this.particleID, out _, "TeleportHome.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, default, default, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 7.9f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            Vector3 camPos;
            //object? _ = null;
            teamID = GetTeamID(default);
            if(teamID == TeamId.TEAM_BLUE)
            {
                TeleportToKeyLocation(attacker, SPAWN_LOCATION, TeamId.TEAM_BLUE);
            }
            else if(default == default)
            {
                TeleportToKeyLocation(attacker, SPAWN_LOCATION, TeamId.TEAM_PURPLE);
            }
            camPos = GetUnitPosition(owner);
            SetCameraPosition("Owner", camPos);
            SpellEffectCreate(out _, out _, "teleportarrive.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, default, default, default, default, default, default);
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellEffectRemove(this.particleID);
        }
    }
}


namespace Spells
{
    public class BouncingBlades : Script
    {
        public int[] effect0 = {60, 95, 130, 165, 200};
        public int[] effect1 = {8, 12, 16, 20, 24};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int bBBaseDamage = 0;
            float totalDamage = 0;
            float baseDamage = 0;
            float bonusDamage = 0;
            float bbBonusDamage = 0;
            float damageVar = 0;
            int kIDamage = 0;
            int bBCounter = 0;
            //object? nextBuffVars = null;
            int targetNum = 0;
            float bBCount = 0;
            float inverseVar = 0;
            float percentVar = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            bBBaseDamage = this.effect0[level];
            totalDamage = GetTotalAttackDamage(owner);
            baseDamage = GetBaseAttackDamage(owner);
            bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseDamage);
            bbBonusDamage = Math(bonusDamage, MathOp.MO_MULTIPLY, 0.8f);
            damageVar = Math(bbBonusDamage, MathOp.MO_ADD, bBBaseDamage);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            kIDamage = this.effect1[level];
            damageVar = Math(damageVar, MathOp.MO_ADD, kIDamage);
            bBCounter = GetCastSpellTargetsHitPlusOne(default);
            if(GetBuffCountFromCaster(owner, owner, "KillerInstinct") > 0)
            {
                SpellBuffRemove(owner, "KillerInstinct", (ObjAIBase)owner, default);
                SpellBuffAdd((ObjAIBase)attacker, owner, "KillerInstinctBuff2", 1, 1, 4, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            if(GetBuffCountFromCaster(owner, owner, "KillerInstinctBuff2") > 0)
            {
                SpellBuffAdd((ObjAIBase)target, target, "Internal_50MS", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)attacker, target, "GrievousWound", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                targetNum = GetCastSpellTargetsHitPlusOne(default);
                ApplyDamage((ObjAIBase)attacker, target, damageVar, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.35f, 1, false, false, (ObjAIBase)attacker);
            }
            else
            {
                bBCount = Math(bBCounter, MathOp.MO_SUBTRACT, 1);
                inverseVar = Math(bBCount, MathOp.MO_MULTIPLY, 0.1f);
                percentVar = Math(1, MathOp.MO_SUBTRACT, inverseVar);
                ApplyDamage((ObjAIBase)attacker, target, damageVar, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, percentVar, 0.35f, 1, false, false, (ObjAIBase)attacker);
            }
        }
    }
}


namespace Spells
{
    public class BrandBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            int brandSkinID = 0;
            TeamId teamID;
            Particle? a = null;
            //object? _ = null;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            if(target is ObjAIBase)
            {
                brandSkinID = GetSkinID(owner);
                teamID = GetTeamID(default);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out a, out _, "BrandBasicAttack_Frost_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out a, out _, "BrandBasicAttack_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "Spine", default, target, default, default, true, false, false, false, false, default, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class BrandBasicAttack2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            int brandSkinID = 0;
            TeamId teamID;
            Particle? a = null;
            //object? _ = null;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            if(target is ObjAIBase)
            {
                brandSkinID = GetSkinID(owner);
                teamID = GetTeamID(default);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out a, out _, "BrandBasicAttack_Frost_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out a, out _, "BrandBasicAttack_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "Spine", default, target, default, default, true, false, false, false, false, default, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class BrandBlaze : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 1100)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 1050, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class BrandBlazeMissile : Script
    {
        public int[] effect0 = {80, 120, 160, 200, 240};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int spellBaseDamage = 0;
            bool? isStealthed = null;
            //object? missileNetworkID = null;
            //object? nextBuffVars = null;
            bool? canSee = null;
            teamID = GetTeamID(default);
            spellBaseDamage = this.effect0[level];
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                DestroyMissile(missileNetworkID);
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "BrandSearParticle", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                if(GetBuffCountFromCaster(target, owner, "BrandAblaze") > 0)
                {
                    ApplyStun(attacker, target, 2);
                }
                ApplyDamage((ObjAIBase)attacker, target, spellBaseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.65f, 0, false, false, (ObjAIBase)attacker);
                SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            }
            else
            {
                if(target is Champion)
                {
                    DestroyMissile(missileNetworkID);
                    BreakSpellShields(target);
                    SpellBuffAdd((ObjAIBase)attacker, target, "BrandSearParticle", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    if(GetBuffCountFromCaster(target, owner, "BrandAblaze") > 0)
                    {
                        ApplyStun(attacker, target, 2);
                    }
                    ApplyDamage((ObjAIBase)attacker, target, spellBaseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.65f, 0, false, false, (ObjAIBase)attacker);
                    SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        DestroyMissile(missileNetworkID);
                        BreakSpellShields(target);
                        SpellBuffAdd((ObjAIBase)attacker, target, "BrandSearParticle", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        if(GetBuffCountFromCaster(target, owner, "BrandAblaze") > 0)
                        {
                            ApplyStun(attacker, target, 2);
                        }
                        ApplyDamage((ObjAIBase)attacker, target, spellBaseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0.65f, 0, false, false, (ObjAIBase)attacker);
                        SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class BrandConflagration : Script
    {
        public int[] effect0 = {70, 105, 140, 175, 210};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int brandSkinID = 0;
            TeamId teamID;
            Particle? varA = null;
            //object? _ = null;
            //object? nextBuffVars = null;
            brandSkinID = GetSkinID(attacker);
            teamID = GetTeamID(default);
            if(brandSkinID == 3)
            {
                SpellEffectCreate(out varA, out _, "BrandConflagration_buf_frost.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out varA, out _, "BrandConflagration_buf.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            }
            if(GetBuffCountFromCaster(target, owner, "BrandAblaze") > 0)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.55f, 0, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class BrandConflagrationMissile : Script
    {
        public int[] effect0 = {70, 105, 140, 175, 210};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int brandSkinID = 0;
            TeamId teamID;
            Particle? varA = null;
            //object? _ = null;
            //object? nextBuffVars = null;
            brandSkinID = GetSkinID(attacker);
            teamID = GetTeamID(default);
            if(brandSkinID == 3)
            {
                SpellEffectCreate(out varA, out _, "BrandConflagration_tar_frost.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out varA, out _, "BrandConflagration_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            }
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.55f, 0, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class BrandCritAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            int brandSkinID = 0;
            TeamId teamID;
            Particle? a = null;
            //object? _ = null;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            if(target is ObjAIBase)
            {
                brandSkinID = GetSkinID(owner);
                teamID = GetTeamID(default);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out a, out _, "BrandCritAttack_Frost_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out a, out _, "BrandCritAttack_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "Spine", default, target, default, default, true, false, false, false, false, default, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class BrandFissure : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int FissureDamage = 0;
            public float AblazeBonusDamage = 0;
        }
        public int[] effect0 = {75, 120, 165, 210, 255};
        public float[] effect1 = {93.75f, 150, 206.25f, 262.5f, 318.75f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Minion? other3 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            teamOfOwner = GetTeamID(default);
            other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", targetPos, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, (Champion)owner, default);
            nextBuffVars.FissureDamage = this.effect0[level];
            nextBuffVars.AblazeBonusDamage = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, false, false, default);
        }
    }
}




namespace Spells
{
    public class BrandScorchAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamOfOwner;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            float damageAmount = 0;
            teamOfOwner = GetTeamID(default);
            targetPos = GetUnitPosition(target);
            other3 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", targetPos, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, default, true, (Champion)attacker, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "BrandScorchGround", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            damageAmount = GetTotalAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
            RemoveOverrideAutoAttack(owner, false);
            SpellBuffRemove(owner, "BrandScorch", (ObjAIBase)owner, default);
        }
    }
}



namespace Spells
{
    public class BrandWildfire : Script
    {
        public int[] effect0 = {150, 250, 350, 400, 400};
        public int[] effect1 = {0, 0, 0, 0, 0};
        public int[] effect2 = {0, 0, 0, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            TeamId teamID;
            bool? doOnce = null;
            int damageToDeal = 0;
            //object? unit = null;
            bool? isStealthed = null;
            Vector3 attackerPos;
            bool? canSee = null;
            int brandSkinID = 0;
            Particle? ablazeHitEffect = null;
            //object? _ = null;
            SpellBuffClear(owner, "BrandWildfire");
            SpellBuffAdd((ObjAIBase)target, owner, "BrandWildfire", 5, 1, 4, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            teamID = GetTeamID(default);
            doOnce = false;
            damageToDeal = this.effect0[level];
            ForEachUnitInTargetAreaRandom((ObjAIBase)attacker, target.Position, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", default, false, 10, (unit) => 
            {
                if(unit != target)
                {
                    if(doOnce != true)
                    {
                        isStealthed = GetStealthed(unit);
                        if(isStealthed == false)
                        {
                            attackerPos = GetUnitPosition(target);
                            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            if(GetBuffCountFromCaster(target, attacker, "BrandAblaze") > 0)
                            {
                                SpellCast((ObjAIBase)attacker, unit, default, default, true, 4, SpellSlotType.ExtraSlots, level, true, true, false, false, false, attackerPos);
                            }
                            else
                            {
                                SpellCast((ObjAIBase)attacker, unit, default, default, true, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, attackerPos);
                            }
                            doOnce = true;
                        }
                        else
                        {
                            canSee = CanSeeTarget(attacker, unit);
                            if(canSee == true)
                            {
                                attackerPos = GetUnitPosition(target);
                                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                if(GetBuffCountFromCaster(target, attacker, "BrandAblaze") > 0)
                                {
                                    SpellCast((ObjAIBase)attacker, unit, default, default, true, 4, SpellSlotType.ExtraSlots, level, true, true, false, false, false, attackerPos);
                                }
                                else
                                {
                                    SpellCast((ObjAIBase)attacker, unit, default, default, true, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, attackerPos);
                                }
                                doOnce = true;
                            }
                        }
                    }
                }
            });
            if(GetBuffCountFromCaster(target, owner, "BrandAblaze") > 0)
            {
                brandSkinID = GetSkinID(attacker);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar_frost.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, damageToDeal + this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
            }
            else
            {
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, damageToDeal + this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
                brandSkinID = GetSkinID(attacker);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar_frost.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class BrandWildfireMissile : Script
    {
        public int[] effect0 = {150, 250, 350, 400, 350};
        public int[] effect1 = {0, 0, 0, 0, 0};
        public int[] effect2 = {0, 0, 0, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            int baseDamage = 0;
            bool? doOnce = null;
            int count = 0;
            //object? unit = null;
            bool? isStealthed = null;
            Vector3 attackerPos;
            bool? canSee = null;
            int brandSkinID = 0;
            TeamId teamID;
            Particle? ablazeHitEffect = null;
            //object? _ = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "BrandWildfire", 5, 1, 4, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            baseDamage = this.effect0[level];
            doOnce = false;
            count = GetBuffCountFromAll(owner, "BrandWildfire");
            if(count <= 4)
            {
                ForEachUnitInTargetAreaRandom((ObjAIBase)attacker, target.Position, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, 10, (unit) => 
                {
                    if(doOnce == false)
                    {
                        if(unit != target)
                        {
                            isStealthed = GetStealthed(unit);
                            if(isStealthed == false)
                            {
                                attackerPos = GetUnitPosition(target);
                                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                if(GetBuffCountFromCaster(target, attacker, "BrandAblaze") > 0)
                                {
                                    SpellCast((ObjAIBase)attacker, unit, default, default, true, 4, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                }
                                else
                                {
                                    SpellCast((ObjAIBase)attacker, unit, default, default, true, 1, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                }
                                doOnce = true;
                            }
                            else
                            {
                                canSee = CanSeeTarget(attacker, unit);
                                if(canSee == true)
                                {
                                    attackerPos = GetUnitPosition(target);
                                    level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                    if(GetBuffCountFromCaster(target, attacker, "BrandAblaze") > 0)
                                    {
                                        SpellCast((ObjAIBase)attacker, unit, default, default, true, 4, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                    }
                                    else
                                    {
                                        SpellCast((ObjAIBase)attacker, unit, default, default, true, 1, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                    }
                                    doOnce = true;
                                }
                            }
                        }
                    }
                });
            }
            if(GetBuffCountFromCaster(target, owner, "BrandAblaze") > 0)
            {
                brandSkinID = GetSkinID(attacker);
                teamID = GetTeamID(default);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar_frost.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage + this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
            }
            else
            {
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage + this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
                brandSkinID = GetSkinID(attacker);
                teamID = GetTeamID(default);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar_frost.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class BrandWildfireMissile2 : Script
    {
        public int[] effect0 = {150, 250, 350, 400, 350};
        public int[] effect1 = {0, 0, 0, 0, 0};
        public int[] effect2 = {0, 0, 0, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            int baseDamage = 0;
            bool? doOnce = null;
            int count = 0;
            //object? unit = null;
            bool? isStealthed = null;
            Vector3 attackerPos;
            bool? canSee = null;
            int brandSkinID = 0;
            TeamId teamID;
            Particle? ablazeHitEffect = null;
            //object? _ = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "BrandWildfire", 5, 1, 4, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            baseDamage = this.effect0[level];
            doOnce = false;
            count = GetBuffCountFromAll(owner, "BrandWildfire");
            if(count <= 4)
            {
                doOnce = false;
                ForEachUnitInTargetAreaRandom((ObjAIBase)attacker, target.Position, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, 10, (unit) => 
                {
                    if(doOnce == false)
                    {
                        if(unit != target)
                        {
                            isStealthed = GetStealthed(unit);
                            if(isStealthed == false)
                            {
                                attackerPos = GetUnitPosition(target);
                                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                if(GetBuffCountFromCaster(target, attacker, "BrandAblaze") > 0)
                                {
                                    SpellCast((ObjAIBase)attacker, unit, default, default, true, 5, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                }
                                else
                                {
                                    SpellCast((ObjAIBase)attacker, unit, default, default, true, 4, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                }
                                doOnce = true;
                            }
                            else
                            {
                                canSee = CanSeeTarget(attacker, unit);
                                if(canSee == true)
                                {
                                    attackerPos = GetUnitPosition(target);
                                    level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                    if(GetBuffCountFromCaster(target, attacker, "BrandAblaze") > 0)
                                    {
                                        SpellCast((ObjAIBase)attacker, unit, default, default, true, 5, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                    }
                                    else
                                    {
                                        SpellCast((ObjAIBase)attacker, unit, default, default, true, 4, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                    }
                                    doOnce = true;
                                }
                            }
                        }
                    }
                });
            }
            if(GetBuffCountFromCaster(target, owner, "BrandAblaze") > 0)
            {
                brandSkinID = GetSkinID(attacker);
                teamID = GetTeamID(default);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar_frost.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage + this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
            }
            else
            {
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage + this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
                brandSkinID = GetSkinID(attacker);
                teamID = GetTeamID(default);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar_frost.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class BrandWildfireMissile3 : Script
    {
        public int[] effect0 = {150, 250, 350, 400, 350};
        public int[] effect1 = {0, 0, 0, 0, 0};
        public int[] effect2 = {0, 0, 0, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            int baseDamage = 0;
            bool? doOnce = null;
            int count = 0;
            //object? unit = null;
            bool? isStealthed = null;
            Vector3 attackerPos;
            bool? canSee = null;
            int brandSkinID = 0;
            TeamId teamID;
            Particle? ablazeHitEffect = null;
            //object? _ = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "BrandWildfire", 5, 1, 4, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            baseDamage = this.effect0[level];
            doOnce = false;
            count = GetBuffCountFromAll(owner, "BrandWildfire");
            if(count <= 4)
            {
                ForEachUnitInTargetAreaRandom((ObjAIBase)attacker, target.Position, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "BrandWildfireMissile", false, 10, (unit) => 
                {
                    if(doOnce == false)
                    {
                        if(unit != target)
                        {
                            isStealthed = GetStealthed(unit);
                            if(isStealthed == false)
                            {
                                attackerPos = GetUnitPosition(target);
                                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                if(GetBuffCountFromCaster(target, attacker, "BrandAblaze") > 0)
                                {
                                    SpellCast((ObjAIBase)attacker, unit, default, default, true, 6, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                }
                                else
                                {
                                    SpellCast((ObjAIBase)attacker, unit, default, default, true, 5, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                }
                                doOnce = true;
                            }
                            else
                            {
                                canSee = CanSeeTarget(attacker, unit);
                                if(canSee == true)
                                {
                                    attackerPos = GetUnitPosition(target);
                                    level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                    if(GetBuffCountFromCaster(target, attacker, "BrandAblaze") > 0)
                                    {
                                        SpellCast((ObjAIBase)attacker, unit, default, default, true, 6, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                    }
                                    else
                                    {
                                        SpellCast((ObjAIBase)attacker, unit, default, default, true, 5, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                    }
                                    doOnce = true;
                                }
                            }
                        }
                    }
                });
            }
            if(GetBuffCountFromCaster(target, owner, "BrandAblaze") > 0)
            {
                brandSkinID = GetSkinID(attacker);
                teamID = GetTeamID(default);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar_frost.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage + this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
            }
            else
            {
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage + this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
                brandSkinID = GetSkinID(attacker);
                teamID = GetTeamID(default);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar_frost.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class BrandWildfireMissile4 : Script
    {
        public int[] effect0 = {150, 250, 350, 400, 350};
        public int[] effect1 = {0, 0, 0, 0, 0};
        public int[] effect2 = {0, 0, 0, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            int baseDamage = 0;
            bool? doOnce = null;
            int count = 0;
            //object? unit = null;
            bool? isStealthed = null;
            Vector3 attackerPos;
            bool? canSee = null;
            int brandSkinID = 0;
            TeamId teamID;
            Particle? ablazeHitEffect = null;
            //object? _ = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "BrandWildfire", 5, 1, 4, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            baseDamage = this.effect0[level];
            doOnce = false;
            count = GetBuffCountFromAll(owner, "BrandWildfire");
            if(count <= 4)
            {
                ForEachUnitInTargetAreaRandom((ObjAIBase)attacker, target.Position, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "BrandWildfireMissile", false, 10, (unit) => 
                {
                    if(doOnce == false)
                    {
                        if(unit != target)
                        {
                            isStealthed = GetStealthed(unit);
                            if(isStealthed == false)
                            {
                                attackerPos = GetUnitPosition(target);
                                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                if(GetBuffCountFromCaster(target, attacker, "BrandAblaze") > 0)
                                {
                                    SpellCast((ObjAIBase)attacker, unit, default, default, true, 7, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                }
                                else
                                {
                                    SpellCast((ObjAIBase)attacker, unit, default, default, true, 6, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                }
                                doOnce = true;
                            }
                            else
                            {
                                canSee = CanSeeTarget(attacker, unit);
                                if(canSee == true)
                                {
                                    attackerPos = GetUnitPosition(target);
                                    level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                    if(GetBuffCountFromCaster(target, attacker, "BrandAblaze") > 0)
                                    {
                                        SpellCast((ObjAIBase)attacker, unit, default, default, true, 7, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                    }
                                    else
                                    {
                                        SpellCast((ObjAIBase)attacker, unit, default, default, true, 6, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                    }
                                    doOnce = true;
                                }
                            }
                        }
                    }
                });
            }
            if(GetBuffCountFromCaster(target, owner, "BrandAblaze") > 0)
            {
                brandSkinID = GetSkinID(attacker);
                teamID = GetTeamID(default);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar_frost.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage + this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
            }
            else
            {
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage + this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
                brandSkinID = GetSkinID(attacker);
                teamID = GetTeamID(default);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar_frost.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class BrandWildfireMissile5 : Script
    {
        public int[] effect0 = {150, 250, 350, 400, 350};
        public int[] effect1 = {0, 0, 0, 0, 0};
        public int[] effect2 = {0, 0, 0, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            bool? doOnce = null;
            int baseDamage = 0;
            int count = 0;
            //object? unit = null;
            bool? isStealthed = null;
            Vector3 attackerPos;
            bool? canSee = null;
            int brandSkinID = 0;
            TeamId teamID;
            Particle? ablazeHitEffect = null;
            //object? _ = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "BrandWildfire", 5, 1, 4, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            doOnce = false;
            baseDamage = this.effect0[level];
            count = GetBuffCountFromAll(owner, "BrandWildfire");
            if(count <= 4)
            {
                ForEachUnitInTargetAreaRandom((ObjAIBase)attacker, target.Position, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "BrandWildfireMissile", false, 10, (unit) => 
                {
                    if(doOnce == false)
                    {
                        if(unit != target)
                        {
                            isStealthed = GetStealthed(unit);
                            if(isStealthed == false)
                            {
                                attackerPos = GetUnitPosition(target);
                                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                if(GetBuffCountFromCaster(target, attacker, "BrandAblaze") > 0)
                                {
                                    SpellCast((ObjAIBase)attacker, unit, default, default, true, 7, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                }
                                else
                                {
                                    SpellCast((ObjAIBase)attacker, unit, default, default, true, 7, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                }
                                doOnce = true;
                            }
                            else
                            {
                                canSee = CanSeeTarget(attacker, unit);
                                if(canSee == true)
                                {
                                    attackerPos = GetUnitPosition(target);
                                    level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                    if(GetBuffCountFromCaster(target, attacker, "BrandAblaze") > 0)
                                    {
                                        SpellCast((ObjAIBase)attacker, unit, default, default, true, 7, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                    }
                                    else
                                    {
                                        SpellCast((ObjAIBase)attacker, unit, default, default, true, 7, SpellSlotType.ExtraSlots, level, true, true, false, true, false, attackerPos);
                                    }
                                    doOnce = true;
                                }
                            }
                        }
                    }
                });
            }
            if(GetBuffCountFromCaster(target, owner, "BrandAblaze") > 0)
            {
                brandSkinID = GetSkinID(attacker);
                teamID = GetTeamID(default);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar_frost.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage + this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
            }
            else
            {
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "BrandAblaze", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage + this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
                brandSkinID = GetSkinID(attacker);
                teamID = GetTeamID(default);
                if(brandSkinID == 3)
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar_frost.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out ablazeHitEffect, out _, "BrandConflagration_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class Breathstealer : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "Breathstealer")
            {
                SetSlotSpellCooldownTimeVer2(90, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name1 == "Breathstealer")
            {
                SetSlotSpellCooldownTimeVer2(90, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name2 == "Breathstealer")
            {
                SetSlotSpellCooldownTimeVer2(90, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name3 == "Breathstealer")
            {
                SetSlotSpellCooldownTimeVer2(90, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name4 == "Breathstealer")
            {
                SetSlotSpellCooldownTimeVer2(90, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name5 == "Breathstealer")
            {
                SetSlotSpellCooldownTimeVer2(90, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            SetSpell((ObjAIBase)owner, 7, SpellSlotType.ExtraSlots, SpellbookType.SPELLBOOK_CHAMPION, "BreathstealerSpell");
            targetPos = GetUnitPosition(target);
            FaceDirection(owner, targetPos);
            SpellCast((ObjAIBase)owner, target, target.Position, target.Position, false, 7, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class BreathstealerSpell : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? AbilityPowerMod = null;
            public object? BonusDamageMod = null;
            public object? BaseDamageMod = null;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float debuffMod = 0;
            float currentAbilityPower = 0;
            float currentBonusDamage = 0;
            float currentBaseDamage = 0;
            float abilityPowerMod = 0;
            float bonusDamageMod = 0;
            float baseDamageMod = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            debuffMod = -0.7f;
            currentAbilityPower = GetFlatMagicDamageMod(target);
            currentBonusDamage = GetFlatPhysicalDamageMod(target);
            currentBaseDamage = GetBaseAttackDamage(target);
            abilityPowerMod = Math(debuffMod, MathOp.MO_MULTIPLY, currentAbilityPower);
            bonusDamageMod = Math(debuffMod, MathOp.MO_MULTIPLY, currentBonusDamage);
            baseDamageMod = Math(debuffMod, MathOp.MO_MULTIPLY, currentBaseDamage);
            nextBuffVars.AbilityPowerMod = abilityPowerMod;
            nextBuffVars.BonusDamageMod = bonusDamageMod;
            nextBuffVars.BaseDamageMod = baseDamageMod;
            SpellBuffAdd((ObjAIBase)owner, target, default, 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
        }
    }
}


namespace Spells
{
    public class BurningAgony : Script
    {
        public int[] effect0 = {20, 25, 30, 35, 40};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float health1 = 0;
            int level = 0;
            int healthCost = 0;
            health1 = GetHealth(owner);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level > 0)
            {
                healthCost = this.effect0[level];
                if(healthCost >= health1)
                {
                    SetReturnValue(default);
                }
                else
                {
                    SetReturnValue(default);
                }
            }
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            if(GetBuffCountFromCaster(owner, owner, "BurningAgony") > 0)
            {
                
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "BurningAgony") > 0)
            {
                SpellBuffRemove(owner, "BurningAgony", (ObjAIBase)owner, 0);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 30000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
        }
    }
}

namespace Spells
{
    public class Bushwhack : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            targetPos = GetCastSpellTargetPos();
            teamID = GetTeamID(default);
            other3 = SpawnMinion("Noxious Trap", "Nidalee_Spear", "idle.lua", targetPos, teamID, false, true, false, true, true, true, 0, false, false, (Champion)owner, default);
            PlayAnimation("Spell1", 1, other3, false, false, true);
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 240, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class BusterShot : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int KnockBackDistance = 0;
        }
        public int[] effect0 = {600, 800, 1000};
        public int[] effect1 = {300, 400, 500};
        public void AdjustCastInfo(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float bonusCastRange = 0;
            float newCastRange = 0;
            if(GetBuffCountFromCaster(owner, owner, "DrawABead") > 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                bonusCastRange = Math(level, MathOp.MO_MULTIPLY, 90);
                newCastRange = Math(bonusCastRange, MathOp.MO_ADD, 600);
                SetSpellCastRange(newCastRange);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? b = null;
            //object? _ = null;
            //object? unit = null;
            nextBuffVars.KnockBackDistance = this.effect0[level];
            ForEachUnitInTargetArea((ObjAIBase)attacker, target.Position, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                SpellEffectCreate(out b, out _, "tristana_bustershot_unit_impact.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
            });
            ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 1.5f, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class CH1ConcussionGrenade : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Minion? other2 = null;
            //object? nextBuffVars = null;
            level = GetCastSpellLevelPlusOne(default);
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            other2 = SpawnMinion("k", "TestCubeRender", "idle.lua", targetPos, teamID, true, true, false, false, true, true, 0, default, true, (Champion)attacker, default);
            SetNoRender(other2, default);
            if(GetBuffCountFromCaster(owner, owner, "UpgradeBuff") > 0)
            {
                SpellCast((ObjAIBase)owner, other2, targetPos, targetPos, false, 3, SpellSlotType.ExtraSlots, level, false, true, false, false, false, default);
            }
            else
            {
                SpellCast((ObjAIBase)owner, other2, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, false, true, false, false, false, default);
            }
            SpellBuffAdd((ObjAIBase)attacker, other2, "ExpirationTimer", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class CH1ConcussionGrenadeSpell : Script
    {
        public int[] effect0 = {80, 135, 190, 245, 300};
        public float[] effect1 = {1, 1.5f, 2, 2.5f, 3};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Particle? arr = null;
            //object? _ = null;
            //object? unit = null;
            //object? nextBuffVars = null;
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            teamID = GetTeamID(default);
            if(teamID == TeamId.TEAM_BLUE)
            {
                SpellEffectCreate(out arr, out _, "heimerdinger_CH1_grenade_tar.troy", default, TeamId.TEAM_BLUE, 250, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, target.Position, target, default, default, true, default, default, default, default, default, default);
            }
            else
            {
                SpellEffectCreate(out arr, out _, "heimerdinger_CH1_grenade_tar.troy", default, TeamId.TEAM_PURPLE, 250, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, target.Position, target, default, default, true, default, default, default, default, default, default);
            }
            ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectTurrets ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                if(unit is BaseTurret)
                {
                    
                }
                else
                {
                    ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
                }
                SpellEffectCreate(out arr, out _, "heimerdinger_CH1_grenade_unit_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, unit, unit, default, default, false, default, default, default, default, default, default);
            });
            ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)attacker, unit, "BlindingDart", 100, 1, this.effect1[level], default, BuffAddType.STACKS_AND_OVERLAPS, BuffType.BLIND, 0, true, false, default, default);
            });
            ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 125, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                ApplyStun(attacker, unit, 1.5f);
            });
        }
    }
}
namespace Spells
{
    public class CH1ConcussionGrenadeUpgrade : Script
    {
        public int[] effect0 = {80, 135, 190, 245, 300};
        public float[] effect1 = {1, 1.5f, 2, 2.5f, 3};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Particle? arr = null;
            //object? _ = null;
            //object? unit = null;
            //object? nextBuffVars = null;
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            teamID = GetTeamID(default);
            if(teamID == TeamId.TEAM_BLUE)
            {
                SpellEffectCreate(out arr, out _, "heimerdinger_CH1_grenade_tar.troy", default, TeamId.TEAM_BLUE, 250, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, target.Position, target, default, default, true, default, default, default, default, default, default);
            }
            else
            {
                SpellEffectCreate(out arr, out _, "heimerdinger_CH1_grenade_tar.troy", default, TeamId.TEAM_PURPLE, 250, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, target.Position, target, default, default, true, default, default, default, default, default, default);
            }
            ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectTurrets ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                if(unit is BaseTurret)
                {
                    
                }
                else
                {
                    ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
                }
                SpellEffectCreate(out arr, out _, "heimerdinger_CH1_grenade_unit_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, unit, unit, default, default, false, default, default, default, default, default, default);
            });
            ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)attacker, unit, "BlindingDart", 100, 1, this.effect1[level], default, BuffAddType.STACKS_AND_OVERLAPS, BuffType.BLIND, 0, true, false, default, default);
            });
            ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 125, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                ApplyStun(attacker, unit, 1.5f);
            });
        }
    }
}
namespace Spells
{
    public class CaitlynAceintheHole : Script
    {
        Particle? particleID = null;
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            //object? _ = null;
            FaceDirection(owner, target.Position);
            SpellBuffAdd((ObjAIBase)attacker, target, "CaitlynAceintheHole", 1, 1, 4, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellEffectCreate(out this.particleID, out _, "caitlyn_laser_beam_01.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "BUFFBONE_CSTM_WEAPON_5", default, target, "spine", default, false, false, false, false, false, default, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? isStealthed = null;
            TeamId team;
            //object? level = null;
            //object? nextBuffVars = null;
            isStealthed = GetStealthed(target);
            FaceDirection(owner, target.Position);
            team = GetTeamID(default);
            SpellCast((ObjAIBase)owner, target, target.Position, target.Position, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "IfHasBuffCheck", 1, 1, 2.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellEffectRemove(this.particleID);
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SetSlotSpellCooldownTime((ObjAIBase)owner, 3, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 5);
            SpellEffectRemove(this.particleID);
            SpellBuffRemove(target, "CaitlynAceintheHole", (ObjAIBase)owner, 0);
        }
    }
}
namespace Spells
{
    public class CaitlynAceintheHoleMissile : Script
    {
        public int[] effect0 = {250, 475, 700};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int baseDamage = 0;
            float totalDmg = 0;
            float baseDmg = 0;
            float bonusDmg = 0;
            float physPreMod = 0;
            float damageToDeal = 0;
            Particle? particle = null;
            //object? _ = null;
            //object? missileNetworkID = null;
            //object? unit = null;
            teamID = GetTeamID(default);
            targetPos = GetUnitPosition(target);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            BreakSpellShields(target);
            baseDamage = this.effect0[level];
            totalDmg = GetTotalAttackDamage(owner);
            baseDmg = GetBaseAttackDamage(owner);
            bonusDmg = Math(totalDmg, MathOp.MO_SUBTRACT, baseDmg);
            physPreMod = Math(2, MathOp.MO_MULTIPLY, bonusDmg);
            damageToDeal = Math(physPreMod, MathOp.MO_ADD, baseDamage);
            ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, true, true, (ObjAIBase)attacker);
            SpellEffectCreate(out particle, out _, "caitlyn_ace_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, default, default, targetPos, owner, default, default, true, default, default, default, default, default, default);
            SpellBuffRemove(attacker, "IfHasBuffCheck", (ObjAIBase)attacker, default);
            DestroyMissile(missileNetworkID);
            if(GetBuffCountFromCaster(target, attacker, "CaitlynAceInTheHole") > 0)
            {
                SpellBuffRemove(target, "CaitlynAceInTheHole", (ObjAIBase)attacker, default);
            }
            else
            {
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectEnemies AffectHeroes ", "CaitlynAceintheHole", true, (unit) => 
                {
                    SpellBuffRemove(unit, "CaitlynAceInTheHole", (ObjAIBase)attacker, default);
                });
            }
        }
    }
}

namespace Spells
{
    public class CaitlynEntrapment : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            bool? canMove = null;
            Vector3 ownerPos;
            float distance = 0;
            Vector3 pushbackPos;
            //object? nextBuffVars = null;
            canMove = GetCanMove(owner);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(distance > 800)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 850, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            pushbackPos = GetPointByUnitFacingOffset(owner, 10, 0);
            if(canMove == true)
            {
                SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                MoveAway(owner, pushbackPos, 1000, 3, 500, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.POSTPONE_CURRENT_ORDER, 0, ForceMovementOrdersFacing.KEEP_CURRENT_FACING);
            }
        }
    }
}
namespace Spells
{
    public class CaitlynEntrapmentMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {1, 1.25f, 1.5f, 1.75f, 2};
        public float[] effect1 = {1, 1.25f, 1.5f, 1.75f, 2};
        public int[] effect2 = {80, 130, 180, 230, 280};
        public float[] effect3 = {1, 1.25f, 1.5f, 1.75f, 2};
        public float[] effect4 = {1, 1.25f, 1.5f, 1.75f, 2};
        public int[] effect5 = {80, 130, 180, 230, 280};
        public float[] effect6 = {1, 1.25f, 1.5f, 1.75f, 2};
        public float[] effect7 = {1, 1.25f, 1.5f, 1.75f, 2};
        public int[] effect8 = {80, 130, 180, 230, 280};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            TargetExecute_nextBuffVars nextBuffVars = new();
            bool? isStealthed = null;
            Particle? asdf = null;
            //object? _ = null;
            //object? missileNetworkID = null;
            bool? canSee = null;
            teamID = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.MoveSpeedMod = -0.5f;
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, this.effect0[level], nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)attacker, target, default, 100, 1, this.effect1[level], nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, true, default);
                ApplyDamage((ObjAIBase)attacker, target, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.8f, 1, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out asdf, out _, "caitlyn_entrapment_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, owner, default, default, true, default, default, default, default, default, default);
                DestroyMissile(missileNetworkID);
            }
            else
            {
                if(target is Champion)
                {
                    BreakSpellShields(target);
                    SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, this.effect3[level], nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)attacker, target, default, 100, 1, this.effect4[level], nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, true, default);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect5[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.8f, 1, false, false, (ObjAIBase)attacker);
                    SpellEffectCreate(out asdf, out _, "caitlyn_entrapment_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, owner, default, default, true, default, default, default, default, default, default);
                    DestroyMissile(missileNetworkID);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        BreakSpellShields(target);
                        SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, this.effect6[level], nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                        SpellBuffAdd((ObjAIBase)attacker, target, default, 100, 1, this.effect7[level], nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, true, default);
                        ApplyDamage((ObjAIBase)attacker, target, this.effect8[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.8f, 1, false, false, (ObjAIBase)attacker);
                        SpellEffectCreate(out asdf, out _, "caitlyn_entrapment_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, owner, default, default, true, default, default, default, default, default, default);
                        DestroyMissile(missileNetworkID);
                    }
                }
            }
        }
    }
}


namespace Spells
{
    public class CaitlynHeadshotMissile : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float damageAmount = 0;
            //object? hitResult = null;
            TeamId teamID;
            Particle? motaExplosion = null;
            //object? _ = null;
            damageAmount = GetTotalAttackDamage(owner);
            if(target is not Champion)
            {
                if(hitResult == HitResult.HIT_Critical)
                {
                    damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.75f);
                    teamID = GetTeamID(default);
                    SpellEffectCreate(out motaExplosion, out _, "caitlyn_headshot_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, target, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                }
                else
                {
                    damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 2.5f);
                    teamID = GetTeamID(default);
                    SpellEffectCreate(out motaExplosion, out _, "caitlyn_headshot_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, target, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                }
            }
            else
            {
                if(hitResult == HitResult.HIT_Critical)
                {
                    damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.25f);
                    teamID = GetTeamID(default);
                    SpellEffectCreate(out motaExplosion, out _, "caitlyn_headshot_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, target, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                }
                else
                {
                    damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 1.5f);
                    teamID = GetTeamID(default);
                    SpellEffectCreate(out motaExplosion, out _, "caitlyn_headshot_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, target, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                }
            }
            ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
            RemoveOverrideAutoAttack(owner, false);
            SpellBuffRemove(owner, "CaitlynHeadshot", (ObjAIBase)owner, default);
        }
    }
}

namespace Spells
{
    public class CaitlynPiltoverPeacemaker : Script
    {
        public int[] effect0 = {20, 60, 100, 140, 180};
        public int[] effect1 = {20, 60, 100, 140, 180};
        public int[] effect2 = {20, 60, 100, 140, 180};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            bool? isStealthed = null;
            HitResult? hitResult = null;
            object? percentOfAttack = null;
            float baseDamage = 0;
            Particle? asdf = null;
            //object? _ = null;
            bool? canSee = null;
            teamID = GetTeamID(default);
            isStealthed = GetStealthed(target);
            hitResult = HitResult.HIT_Normal;
            percentOfAttack = charVars.PercentOfAttack;
            baseDamage = GetTotalAttackDamage(owner);
            baseDamage = Math(1.3f, MathOp.MO_MULTIPLY, baseDamage);
            if(isStealthed == false)
            {
                BreakSpellShields(target);
                SpellEffectCreate(out asdf, out _, "caitlyn_peaceMaker_tar_02.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, owner, default, default, true, false, false, false, false, default, default);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage + this.effect0[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, percentOfAttack, 0, 0, false, true, (ObjAIBase)attacker);
                charVars.PercentOfAttack = Math(charVars.PercentOfAttack, MathOp.MO_MULTIPLY, 0.85f);
                charVars.PercentOfAttack = Math(charVars.PercentOfAttack, MathOp.MO_MAX, 0.4f);
            }
            else
            {
                if(target is Champion)
                {
                    BreakSpellShields(target);
                    SpellEffectCreate(out asdf, out _, "caitlyn_peaceMaker_tar_02.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, owner, default, default, true, false, false, false, false, default, default);
                    ApplyDamage((ObjAIBase)attacker, target, baseDamage + this.effect1[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, percentOfAttack, 0, 0, false, true, (ObjAIBase)attacker);
                    charVars.PercentOfAttack = Math(charVars.PercentOfAttack, MathOp.MO_MULTIPLY, 0.85f);
                    charVars.PercentOfAttack = Math(charVars.PercentOfAttack, MathOp.MO_MAX, 0.4f);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        BreakSpellShields(target);
                        SpellEffectCreate(out asdf, out _, "caitlyn_peaceMaker_tar_02.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, owner, default, default, true, false, false, false, false, default, default);
                        ApplyDamage((ObjAIBase)attacker, target, baseDamage + this.effect2[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, percentOfAttack, 0, 0, false, true, (ObjAIBase)attacker);
                        charVars.PercentOfAttack = Math(charVars.PercentOfAttack, MathOp.MO_MULTIPLY, 0.85f);
                        charVars.PercentOfAttack = Math(charVars.PercentOfAttack, MathOp.MO_MAX, 0.4f);
                    }
                }
            }
        }
    }
}

namespace Spells
{
    public class CaitlynYordleTrap : Script
    {
        public int[] effect0 = {3, 3, 3, 3, 3};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int maxStacks = 0;
            float numFound = 0;
            int minDuration = 0;
            AttackableUnit? other2 = null;
            //object? unit = null;
            float durationRemaining = 0;
            TeamId teamID;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            maxStacks = this.effect0[level];
            numFound = 0;
            minDuration = 240;
            other2 = SetUnit(owner);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectFriends AffectMinions AffectUntargetable ", "CaitlynYordleTrap", true, (unit) => 
            {
                numFound = Math(numFound, MathOp.MO_ADD, 1);
                durationRemaining = GetBuffRemainingDuration(unit, "CaitlynYordleTrap");
                if(durationRemaining < minDuration)
                {
                    minDuration = durationRemaining;
                    InvalidateUnit(other2);
                    other2 = SetUnit(unit);
                }
            });
            if(numFound >= maxStacks)
            {
                if(owner != other2)
                {
                    ApplyDamage((ObjAIBase)other2, other2, 10000, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_INTERNALRAW, 1, 0, 1, false, false, (ObjAIBase)other2);
                }
            }
            targetPos = GetCastSpellTargetPos();
            teamID = GetTeamID(default);
            other3 = SpawnMinion("Noxious Trap", "CaitlynTrap", "idle.lua", targetPos, teamID, false, true, false, true, true, false, 0, false, false, (Champion)owner, default);
            PlayAnimation("Spell1", 1, other3, false, false, true);
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 240, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}










namespace Spells
{
    public class Cannibalism : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float LifestealPercent = 0;
            public float HealPercent = 0;
            public float AttackSpeedMod = 0;
        }
        public float[] effect0 = {0.5f, 0.75f, 1};
        public float[] effect1 = {0.25f, 0.375f, 0.5f};
        public float[] effect2 = {0.5f, 0.5f, 0.5f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.LifestealPercent = this.effect0[level];
            nextBuffVars.HealPercent = this.effect1[level];
            nextBuffVars.AttackSpeedMod = this.effect2[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "Cannibalism", 1, 1, 20, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}



namespace Spells
{
    public class CannonBarrage : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? CastPosition = null;
            public float MoveSpeedMod = 0;
            public int AttackSpeedMod = 0;
        }
        public float[] effect0 = {-0.25f, -0.25f, -0.25f};
        public int[] effect1 = {0, 0, 0, 0, 0};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Vector3 castPosition;
            SelfExecute_nextBuffVars nextBuffVars = new();
            Minion? other1 = null;
            teamOfOwner = GetTeamID(default);
            castPosition = GetCastSpellTargetPos();
            nextBuffVars.CastPosition = castPosition;
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            nextBuffVars.AttackSpeedMod = this.effect1[level];
            other1 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", castPosition, teamOfOwner ?? TEAM_CASTER, false, true, true, true, true, true, 0, false, true, default, default);
            SpellBuffAdd((ObjAIBase)owner, other1, "CannonBarrage", 1, 1, 6, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class CannonBarrageBall : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DamageAmount = 0;
        }
        public int[] effect0 = {75, 120, 165};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Minion? other3 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            teamOfOwner = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", targetPos, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, default, default);
            nextBuffVars.DamageAmount = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class CardMasterStackAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseDamage = 0;
            baseDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, default);
        }
    }
}







namespace Spells
{
    public class CarpetBomb : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public float SelfAP = 0;
            public object? Damage = null;
            public bool? WillRemove = null;
            public bool? WillMove = null;
            public object? SlashSpeed = null;
        }
        public int[] effect0 = {15, 16, 17, 18, 19};
        float tickDuration = 0;
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            int level = 0;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canCast != true)
            {
                SetReturnValue(default);
            }
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level > 0)
            {
                canMove = GetCanMove(owner);
                canCast = GetCanCast(owner);
                if(canMove == false)
                {
                    SetReturnValue(default);
                }
                if(canCast != true)
                {
                    SetReturnValue(default);
                }
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int tickAmount = 0;
            Vector3 ownerPos;
            float distance = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? damage = null;
            float moveSpeed = 0;
            float slashSpeed = 0;
            float duration = 0;
            tickAmount = this.effect0[level];
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 800)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 800, 0);
            }
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.SelfAP = GetFlatMagicDamageMod(owner);
            nextBuffVars.Damage = damage;
            nextBuffVars.WillRemove = false;
            ownerPos = GetUnitPosition(owner);
            moveSpeed = GetMovementSpeed(owner);
            slashSpeed = Math(moveSpeed, MathOp.MO_ADD, 650);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            duration = Math(distance, MathOp.MO_DIVIDE, slashSpeed);
            this.tickDuration = Math(duration, MathOp.MO_DIVIDE, tickAmount);
            nextBuffVars.WillMove = true;
            nextBuffVars.SlashSpeed = slashSpeed;
            SpellBuffAdd((ObjAIBase)attacker, owner, default, 1, 1, 0.05f + duration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, owner, "ValkyrieSound", 1, 1, duration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class CassiopeiaMiasma : Script
    {
        class OnMissileEnd_nextBuffVars
        {
            public int DamagePerTick = 0;
            public float MoveSpeedMod = 0;
        }
        public int[] effect0 = {25, 35, 45, 55, 65};
        public float[] effect1 = {-0.15f, -0.2f, -0.25f, -0.3f, -0.35f};
        public void OnMissileEnd(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            //object? missileEndPosition = null;
            Minion? other3 = null;
            int level = 0;
            OnMissileEnd_nextBuffVars nextBuffVars = new();
            teamID = GetTeamID(default);
            other3 = SpawnMinion("Test", "TestCubeRender", "idle.lua", missileEndPosition, teamID, false, true, false, true, true, true, 0, false, true, default, default);
            SetGhosted(other3, default);
            level = GetCastSpellLevelPlusOne(default);
            nextBuffVars.DamagePerTick = this.effect0[level];
            nextBuffVars.MoveSpeedMod = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 7, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "ExpirationTimer", 1, 1, 9, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class CassiopeiaNoxiousBlast : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float PoisonPerTick = 0;
        }
        public float[] effect0 = {25, 38.33f, 51.66f, 65, 78.33f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Minion? other3 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            teamOfOwner = GetTeamID(default);
            other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", targetPos, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, (Champion)owner, default);
            nextBuffVars.PoisonPerTick = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "ExpirationTimer", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class CassiopeiaPetrifyingGaze : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 targetPos;
            targetPos = GetCastSpellTargetPos();
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, false, true, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class CassiopeiaPetrifyingGazeSpell : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {-0.6f, -0.6f, -0.6f};
        public int[] effect1 = {200, 325, 450};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? particle2 = null;
            //object? _ = null;
            BreakSpellShields(target);
            teamID = GetTeamID(default);
            if(IsInFront(target, attacker))
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "CassiopeiaPetrifyingGaze", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
            }
            else
            {
                nextBuffVars.MoveSpeedMod = this.effect0[level];
                SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 1, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, true, false, default);
                SpellEffectCreate(out particle2, out _, "CassPetrifyMiss_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, target, false, target, "root", default, target, default, default, true, default, default, false, default, default, default);
            }
            ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
        }
    }
}

namespace Spells
{
    public class CassiopeiaTwinFang : Script
    {
        public int[] effect0 = {60, 95, 130, 165, 200};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Particle? particle = null;
            //object? _ = null;
            if(HasBuffOfType(target, BuffType.POISON))
            {
                teamID = GetTeamID(default);
                SetSlotSpellCooldownTimeVer2(0.5f, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
                SpellEffectCreate(out particle, out _, "CassioTwinFang_refreshsound.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, true, default, default, default, default, default, default);
            }
            BreakSpellShields(target);
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLPERSIST, 1, 0.55f, 1, false, false, (ObjAIBase)attacker);
        }
    }
}






namespace Spells
{
    public class ChaosTurretShrineBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            if(target is Champion)
            {
                ApplyDamage((ObjAIBase)attacker, target, 1000, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_INTERNALRAW, 1, 0, 0, false, false, (ObjAIBase)attacker);
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, 1000, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_RAW, 1, 0, 0, false, false, (ObjAIBase)attacker);
            }
        }
    }
}



namespace Spells
{
    public class ChronoShift : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? HealthPlusAbility = null;
            public bool? WillRemove = null;
        }
        public int[] effect0 = {600, 850, 1100};
        public int[] effect1 = {7, 7, 7};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float abilityPower = 0;
            int baseHealthBoost = 0;
            float abilityPowerb = 0;
            float abilityPowerMod = 0;
            float healthPlusAbility = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            abilityPower = GetFlatMagicDamageMod(owner);
            baseHealthBoost = this.effect0[level];
            abilityPowerb = Math(abilityPower, MathOp.MO_ADD, 0.1f);
            abilityPowerMod = Math(abilityPowerb, MathOp.MO_MULTIPLY, 2);
            healthPlusAbility = Math(abilityPowerMod, MathOp.MO_ADD, baseHealthBoost);
            nextBuffVars.HealthPlusAbility = healthPlusAbility;
            nextBuffVars.WillRemove = false;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect1[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}




namespace Spells
{
    public class Consume : Script
    {
        public int[] effect0 = {125, 180, 235, 290, 345};
        public float[] effect1 = {200, 262.5f, 325, 387.5f, 450};
        public int[] effect2 = {400, 525, 650, 775, 900};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? ar = null;
            //object? _ = null;
            float healthToInc = 0;
            float abilityPower = 0;
            SpellEffectCreate(out ar, out _, "Meditate_eff.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, false, false, default, default);
            healthToInc = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(owner);
            abilityPower = Math(abilityPower, MathOp.MO_MULTIPLY, 1);
            healthToInc = Math(healthToInc, MathOp.MO_ADD, abilityPower);
            IncHealth(owner, healthToInc, owner);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            if(GetBuffCountFromCaster(target, target, "ResistantSkin") > 0)
            {
                ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0, 1, false, false, (ObjAIBase)attacker);
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, this.effect2[level], DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0, 1, false, false, (ObjAIBase)attacker);
            }
        }
    }
}
namespace Spells
{
    public class CorkiBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class CorkiBasicAttack2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class CorkiCritAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float baseAttackDamage = 0;
            hitResult = HitResult.HIT_Critical;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}




namespace Spells
{
    public class CounterStrike : Script
    {
        public int[] effect0 = {80, 110, 140, 170, 200};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? addPart = null;
            //object? _ = null;
            SpellEffectCreate(out addPart, out _, "Counterstrike_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
            SpellBuffRemove(owner, "CounterStrikeCanCast", (ObjAIBase)owner, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
            ApplyStun(attacker, target, 1);
        }
    }
}








namespace Spells
{
    public class Crowstorm : Script
    {
        class ChannelingSuccessStop_nextBuffVars
        {
            public float DamageAmount = 0;
        }
        public float[] effect0 = {62.5f, 112.5f, 162.5f};
        Particle? confetti = null;
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            Vector3 castPos;
            TeamId teamID;
            int fiddlesticksSkinID = 0;
            //object? _ = null;
            castPos = GetCastSpellTargetPos();
            FaceDirection(owner, castPos);
            teamID = GetTeamID(default);
            fiddlesticksSkinID = GetSkinID(attacker);
            if(fiddlesticksSkinID == 6)
            {
                SpellEffectCreate(out this.confetti, out _, "Party_HornConfetti.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, "BUFFBONE_CSTM_HORN", default, attacker, default, default, false, false, false, false, false, default, default);
            }
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            Vector3 castPos;
            Particle? p3 = null;
            //object? _ = null;
            Particle? ar = null;
            Particle? ar1 = null;
            //object? unit = null;
            ChannelingSuccessStop_nextBuffVars nextBuffVars = new();
            int fiddlesticksSkinID = 0;
            teamID = GetTeamID(default);
            castPos = GetCastSpellTargetPos();
            SpellEffectCreate(out p3, out _, "summoner_flashback.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, castPos, target, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(out ar, out _, "summoner_cast.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, owner.Position, target, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(out ar1, out _, "summoner_flash.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, true, false, false, false, false, default, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, castPos, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)owner, unit, "ParanoiaMissChance", 1, 1, 1.2f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            });
            TeleportToPosition(owner, castPos);
            nextBuffVars.DamageAmount = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 5, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            teamID = GetTeamID(default);
            fiddlesticksSkinID = GetSkinID(attacker);
            if(fiddlesticksSkinID == 6)
            {
                SpellEffectRemove(this.confetti);
            }
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            int fiddlesticksSkinID = 0;
            teamID = GetTeamID(default);
            fiddlesticksSkinID = GetSkinID(attacker);
            if(fiddlesticksSkinID == 6)
            {
                SpellEffectRemove(this.confetti);
            }
        }
    }
}
namespace Spells
{
    public class CrypticGaze : Script
    {
        public int[] effect0 = {70, 125, 180, 240, 300};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0.9f, 0, false, false, (ObjAIBase)attacker);
            ApplyStun(attacker, target, 1.5f);
        }
    }
}
namespace Spells
{
    public class Crystallize : Script
    {
        public int[] effect0 = {4, 5, 6, 7, 8};
        public int[] effect1 = {400, 500, 600, 700, 800};
        public int[] effect2 = {200, 250, 300, 350, 400};
        int meltingTime = 0;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            TeamId teamID;
            int iter = 0;
            int lineWidth = 0;
            int halfLength = 0;
            bool? foundFirstPos = null;
            Vector3 facingPoint;
            //object? pos = null;
            Minion? other2 = null;
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "Crystallize") > 0)
            {
                
            }
            else
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                this.meltingTime = 5;
                targetPos = GetCastSpellTargetPos();
                ownerPos = GetUnitPosition(owner);
                distance = DistanceBetweenPoints(ownerPos, targetPos);
                teamID = GetTeamID(default);
                iter = this.effect0[level];
                lineWidth = this.effect1[level];
                halfLength = this.effect2[level];
                foundFirstPos = false;
                facingPoint = GetPointByUnitFacingOffset(owner, 9999, 0);
                ForEachPointOnLine(ownerPos, targetPos, lineWidth, distance, iter, (pos) => 
                {
                    other2 = SpawnMinion("IceBlock", "AniviaIceblock", "idle.lua", pos, teamID, true, true, true, true, false, true, 0, false, false, default, default);
                    FaceDirection(other2, facingPoint);
                    SpellBuffAdd((ObjAIBase)owner, other2, default, 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    SetGhostProof(other2, default);
                });
            }
        }
    }
}



namespace Spells
{
    public class CurseoftheSadMummy : Script
    {
        public int[] effect0 = {150, 250, 350};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 1, 1, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.CHARM, 0, true, false, default, default);
        }
    }
}


namespace Spells
{
    public class DarkBinding : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 1300)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 1150, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, default, 0, SpellSlotType.ExtraSlots, level, true, false, false, default, default, default);
        }
    }
}
namespace Spells
{
    public class DarkBindingMissile : Script
    {
        public int[] effect0 = {80, 135, 190, 245, 300};
        public float[] effect1 = {2, 2.25f, 2.5f, 2.75f, 3};
        public float[] effect2 = {2, 2.25f, 2.5f, 2.75f, 3};
        public float[] effect3 = {2, 2.25f, 2.5f, 2.75f, 3};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            bool? isStealthed = null;
            int damageAmount = 0;
            //object? missileNetworkID = null;
            //object? nextBuffVars = null;
            bool? canSee = null;
            isStealthed = GetStealthed(target);
            damageAmount = this.effect0[level];
            if(isStealthed == false)
            {
                DestroyMissile(missileNetworkID);
                ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.9f, 1, false, false, default);
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect1[level], default, BuffAddType.REPLACE_EXISTING, BuffType.CHARM, 0, true, false, default, default);
            }
            else
            {
                if(target is Champion)
                {
                    DestroyMissile(missileNetworkID);
                    ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.9f, 1, false, false, default);
                    SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect2[level], default, BuffAddType.REPLACE_EXISTING, BuffType.CHARM, 0, true, false, default, default);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        DestroyMissile(missileNetworkID);
                        ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.9f, 1, false, false, default);
                        SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect3[level], default, BuffAddType.REPLACE_EXISTING, BuffType.CHARM, 0, true, false, default, default);
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class DarkWind : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            int targetNum = 0;
            if(target is Champion)
            {
                SpellBuffAdd((ObjAIBase)owner, target, default, 1, 1, 1.2f, default, BuffAddType.RENEW_EXISTING, BuffType.SILENCE, 0, true, default, default, default);
            }
            targetNum = GetCastSpellTargetsHitPlusOne(default);
            if(targetNum == 1)
            {
                ApplyDamage((ObjAIBase)attacker, target, 100, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.35f, 1, false, false, default);
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, 100, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.35f, 1, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class Dazzle : Script
    {
        public int[] effect0 = {40, 70, 100, 130, 160};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Vector3 ownerPos;
            float distance = 0;
            float aPStat = 0;
            int baseDamage = 0;
            float maxMultiplier = 0;
            float dazzleDamage = 0;
            float castRange = 0;
            int fullDamageRange = 0;
            float varyingRange = 0;
            float multiplier = 0;
            ownerPos = GetUnitPosition(owner);
            targetPos = GetUnitPosition(target);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            aPStat = GetFlatMagicDamageMod(owner);
            aPStat = Math(0.4f, MathOp.MO_MULTIPLY, aPStat);
            baseDamage = this.effect0[level];
            maxMultiplier = 2;
            maxMultiplier = Math(maxMultiplier, MathOp.MO_SUBTRACT, 1);
            dazzleDamage = Math(baseDamage, MathOp.MO_ADD, aPStat);
            castRange = GetCastRange((ObjAIBase)owner, 2, SpellSlotType.SpellSlots);
            fullDamageRange = 250;
            varyingRange = Math(castRange, MathOp.MO_SUBTRACT, fullDamageRange);
            if(distance < castRange)
            {
                distance = Math(distance, MathOp.MO_SUBTRACT, fullDamageRange);
                multiplier = Math(distance, MathOp.MO_DIVIDE, varyingRange);
                multiplier = Math(1, MathOp.MO_SUBTRACT, multiplier);
                if(multiplier > 1)
                {
                    multiplier = 1;
                }
                multiplier = Math(multiplier, MathOp.MO_MULTIPLY, maxMultiplier);
                multiplier = Math(multiplier, MathOp.MO_ADD, 1);
                dazzleDamage = Math(dazzleDamage, MathOp.MO_MULTIPLY, multiplier);
            }
            ApplyStun(attacker, target, 1.5f);
            ApplyDamage((ObjAIBase)attacker, target, dazzleDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}








namespace Spells
{
    public class DeathLotus : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? Level = null;
        }
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SetReturnValue(default);
            ForEachUnitInTargetAreaRandom((ObjAIBase)owner, owner.Position, 550, "AffectEnemies AffectHeroes ", default, true, 1, (unit) => 
            {
                SetReturnValue(default);
            });
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            SpellBuffAdd((ObjAIBase)owner, owner, "DeathLotusSound", 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
            nextBuffVars.Level = level;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 3, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0.25f, true, false, default, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "DeathLotusSound", (ObjAIBase)owner, default);
            SpellBuffRemove(owner, "DeathLotus", (ObjAIBase)owner, default);
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "DeathLotusSound", (ObjAIBase)owner, default);
            SpellBuffRemove(owner, "DeathLotus", (ObjAIBase)owner, default);
        }
    }
}
namespace Spells
{
    public class DeathLotusMissile : Script
    {
        public int[] effect0 = {50, 65, 80};
        public int[] effect1 = {8, 12, 16, 20, 24};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int daggerBase = 0;
            int kIDamage = 0;
            float totalDamage = 0;
            float baseDamage = 0;
            float bonusDamage = 0;
            float dlBonusDamage = 0;
            float damageToDeal = 0;
            daggerBase = this.effect0[level];
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            kIDamage = this.effect1[level];
            totalDamage = GetTotalAttackDamage(owner);
            baseDamage = GetBaseAttackDamage(owner);
            bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseDamage);
            dlBonusDamage = Math(bonusDamage, MathOp.MO_MULTIPLY, 0.5f);
            damageToDeal = Math(dlBonusDamage, MathOp.MO_ADD, daggerBase);
            damageToDeal = Math(damageToDeal, MathOp.MO_ADD, kIDamage);
            ApplyDamage((ObjAIBase)owner, target, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.25f, 1, false, false, (ObjAIBase)attacker);
        }
    }
}

namespace Spells
{
    public class DeathfireGrasp : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            SetSpell((ObjAIBase)owner, 7, SpellSlotType.ExtraSlots, SpellbookType.SPELLBOOK_CHAMPION, "DeathfireGraspSpell");
            SpellCast((ObjAIBase)owner, target, target.Position, target.Position, default, 7, SpellSlotType.ExtraSlots, 1, true, true, false, default, default, default);
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "DeathfireGrasp")
            {
                SetSlotSpellCooldownTimeVer2(60, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name1 == "DeathfireGrasp")
            {
                SetSlotSpellCooldownTimeVer2(60, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name2 == "DeathfireGrasp")
            {
                SetSlotSpellCooldownTimeVer2(60, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name3 == "DeathfireGrasp")
            {
                SetSlotSpellCooldownTimeVer2(60, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name4 == "DeathfireGrasp")
            {
                SetSlotSpellCooldownTimeVer2(60, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name5 == "DeathfireGrasp")
            {
                SetSlotSpellCooldownTimeVer2(60, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
        }
    }
}
namespace Spells
{
    public class DeathfireGraspSpell : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float ap = 0;
            float apMod = 0;
            float percentBurn = 0;
            float curHealth = 0;
            float damageToDeal = 0;
            ap = GetFlatMagicDamageMod(owner);
            apMod = Math(0.00035f, MathOp.MO_MULTIPLY, ap);
            percentBurn = Math(0.3f, MathOp.MO_ADD, apMod);
            curHealth = GetHealth(target);
            damageToDeal = Math(percentBurn, MathOp.MO_MULTIPLY, curHealth);
            damageToDeal = Math(damageToDeal, MathOp.MO_MAX, 200);
            ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, default, false, false, default);
        }
    }
}

namespace Spells
{
    public class DeathsCaress : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            if(GetBuffCountFromCaster(owner, owner, "DeathsCaress") > 0)
            {
                SpellBuffRemove(owner, "DeathsCaress", (ObjAIBase)owner, default);
            }
            else
            {
                SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class DeathsCaressFull : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? TotalArmorAmount = null;
            public object? FinalArmorAmount = null;
            public int Ticktimer = 0;
        }
        public int[] effect0 = {100, 150, 200, 250, 300};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float abilityPower = 0;
            int armorAmount = 0;
            float bonusHealth = 0;
            float totalArmorAmount = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            abilityPower = GetFlatMagicDamageMod(target);
            armorAmount = this.effect0[level];
            bonusHealth = Math(abilityPower, MathOp.MO_MULTIPLY, 0.9f);
            totalArmorAmount = Math(bonusHealth, MathOp.MO_ADD, armorAmount);
            nextBuffVars.TotalArmorAmount = totalArmorAmount;
            nextBuffVars.FinalArmorAmount = totalArmorAmount;
            nextBuffVars.Ticktimer = 10;
            SpellBuffAdd((ObjAIBase)attacker, target, "DeathsCaress", 1, 1, 10, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class DebilitatingPoison : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {2, 2.6f, 3.2f, 3.8f, 4.4f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            nextBuffVars.MoveSpeedMod = -0.3f;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectEnemies AffectNeutral AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, this.effect0[level], nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, default, default);
            });
        }
    }
}
namespace Spells
{
    public class Deceive : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DCooldown = 0;
            public object? CastPos = null;
            public float CritDmgBonus = 0;
        }
        public int[] effect0 = {11, 11, 11, 11, 11};
        public float[] effect1 = {-0.6f, -0.4f, -0.2f, 0, 0.2f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            Particle? hi = null;
            //object? _ = null;
            Vector3 castPos;
            Vector3 ownerPos;
            float distance = 0;
            nextBuffVars.DCooldown = this.effect0[level];
            SpellEffectCreate(out hi, out _, "jackintheboxpoof2.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, owner.Position, owner, default, default, true, false, false, false, false, default, default);
            castPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, castPos);
            if(distance > 500)
            {
                FaceDirection(owner, castPos);
                castPos = GetPointByUnitFacingOffset(owner, 500, 0);
            }
            nextBuffVars.CastPos = castPos;
            nextBuffVars.CritDmgBonus = this.effect1[level];
            SealSpellSlot(0, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, SpellbookType.SPELLBOOK_CHAMPION);
            SpellBuffAdd((ObjAIBase)owner, owner, "DeceiveFade", 1, 1, 0.05f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SetSlotSpellCooldownTimeVer2(0, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
        }
    }
}



namespace Spells
{
    public class DefensiveBallCurl : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int ArmorAmount = 0;
            public int DamageReturn = 0;
        }
        public int[] effect0 = {50, 75, 100, 125, 150};
        public int[] effect1 = {15, 25, 35, 45, 55};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.ArmorAmount = this.effect0[level];
            nextBuffVars.DamageReturn = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, owner, "DefensiveBallCurl", 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class DefensiveBallCurlCancel : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "DefensiveBallCurl", (ObjAIBase)owner, default);
        }
    }
}
namespace Spells
{
    public class Defile : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "Defile") > 0)
            {
                SpellBuffRemove(owner, "Defile", (ObjAIBase)owner, 0);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "Defile", 1, 1, 30000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class DesperatePower : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float Vamp = 0;
            public object? Level = null;
        }
        public float[] effect0 = {0.15f, 0.2f, 0.25f};
        public int[] effect1 = {5, 6, 7};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.Vamp = this.effect0[level];
            nextBuffVars.Level = level;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect1[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class Destiny : Script
    {
        public int[] effect0 = {6, 8, 10};
        public int[] effect1 = {6, 8, 10};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            //object? unit = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "Destiny_marker", 1, 1, this.effect0[level], default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectEnemies AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, this.effect1[level], default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            });
            SetSpell((ObjAIBase)owner, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "Gate");
            SetSlotSpellCooldownTimeVer2(0.5f, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
        }
    }
}


namespace Spells
{
    public class DetonatingShot : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int Dotdmg = 0;
        }
        public int[] effect0 = {22, 28, 34, 40, 46};
        public int[] effect1 = {5, 5, 5, 5, 5};
        public int[] effect2 = {5, 5, 5, 5, 5};
        public int[] effect3 = {5, 5, 5, 5, 5};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            IssueOrder(owner, OrderType.AttackTo, default, target);
            SpellBuffRemove(owner, "DetonatingShot", (ObjAIBase)owner, 0);
            nextBuffVars.Dotdmg = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "ExplosiveShotDebuff", 1, 1, this.effect1[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 1, true, false, false, default);
            SpellBuffAdd((ObjAIBase)target, target, "Internal_50MS", 1, 1, this.effect2[level], nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "GrievousWound", 1, 1, this.effect3[level], nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
        }
    }
}





namespace Spells
{
    public class Disintegrate : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? ManaCost = null;
        }
        public int[] effect0 = {85, 125, 165, 205, 245};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int count = 0;
            float tempManaCost = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            TeamId teamID;
            int annieSkinID = 0;
            Particle? a = null;
            //object? _ = null;
            Particle? b = null;
            count = GetBuffCountFromCaster(owner, owner, "Pyromania_particle");
            if(count >= 1)
            {
                ApplyStun(attacker, target, charVars.StunDuration);
                SpellBuffRemove(owner, "Pyromania_particle", (ObjAIBase)owner, 0);
            }
            tempManaCost = GetPARCost(default);
            nextBuffVars.ManaCost = tempManaCost;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.7f, 0, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)owner, owner, "Pyromania", 5, 1, 25000, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            teamID = GetTeamID(default);
            annieSkinID = GetSkinID(owner);
            if(annieSkinID == 5)
            {
                SpellEffectCreate(out a, out _, "DisintegrateHit_tar_frost.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                SpellEffectCreate(out b, out _, "Disintegrate_hit_frost.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out a, out _, "DisintegrateHit_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                SpellEffectCreate(out b, out _, "Disintegrate_hit.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
            }
        }
    }
}





namespace Spells
{
    public class DrMundoMasochismAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}



namespace Spells
{
    public class Drain : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, target, "DrainCheck", 1, 1, 0.01f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            if(GetBuffCountFromCaster(target, attacker, "DrainCheck") > 0)
            {
                SpellCast((ObjAIBase)attacker, target, target.Position, target.Position, default, 0, SpellSlotType.ExtraSlots, level, true, false, false, true, default, default);
            }
        }
    }
}
namespace Spells
{
    public class DrainChannel : Script
    {
        class ChannelingStart_nextBuffVars
        {
            public float DrainPercent = 0;
            public bool? DrainedBool = null;
        }
        class ChannelingUpdateActions_nextBuffVars
        {
            public float DrainPercent = 0;
            public bool? DrainedBool = null;
        }
        public float[] effect0 = {0.6f, 0.65f, 0.7f, 0.75f, 0.8f};
        public int[] effect1 = {30, 45, 60, 75, 90};
        public float[] effect2 = {0.6f, 0.65f, 0.7f, 0.75f, 0.8f};
        public int[] effect3 = {30, 45, 60, 75, 90};
        Particle? particleID = null;
        float drainExecuted = 0;
        Particle? glow = null;
        Particle? confetti = null;
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float abilityPower = 0;
            ChannelingStart_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            int baseDamage = 0;
            float bonusDamage = 0;
            float damageToDeal = 0;
            TeamId teamID;
            int fiddlesticksSkinID = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            abilityPower = GetFlatMagicDamageMod(owner);
            SpellBuffAdd((ObjAIBase)owner, target, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "Fearmonger_marker", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.HEAL, 0, true, false, false, default);
            SpellEffectCreate(out this.particleID, out _, "Drain.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "spine", default, target, "spine", default, false, false, false, false, false, default, default);
            this.drainExecuted = GetTime();
            nextBuffVars.DrainPercent = this.effect0[level];
            nextBuffVars.DrainedBool = false;
            SpellBuffAdd((ObjAIBase)owner, owner, "GlobalDrain", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            baseDamage = this.effect1[level];
            bonusDamage = Math(abilityPower, MathOp.MO_MULTIPLY, 0.225f);
            damageToDeal = Math(bonusDamage, MathOp.MO_ADD, baseDamage);
            ApplyDamage((ObjAIBase)owner, target, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLPERSIST, 1, 0, 1, false, false, (ObjAIBase)owner);
            teamID = GetTeamID(default);
            fiddlesticksSkinID = GetSkinID(owner);
            if(fiddlesticksSkinID == 6)
            {
                SpellEffectCreate(out this.glow, out _, "Party_DrainGlow.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, "spine", default, false, false, false, false, false, default, default);
                SpellEffectCreate(out this.confetti, out _, "Party_HornConfetti.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, "BUFFBONE_CSTM_HORN", default, attacker, default, default, false, false, false, false, false, default, default);
            }
        }
        public void ChannelingUpdateActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float distance = 0;
            int level = 0;
            ChannelingUpdateActions_nextBuffVars nextBuffVars = new();
            float abilityPower = 0;
            int baseDamage = 0;
            float bonusDamage = 0;
            float damageToDeal = 0;
            if(ExecutePeriodically(0.5f, ref this.drainExecuted, false))
            {
                distance = DistanceBetweenObjects("Target", "Owner");
                if(distance >= 650)
                {
                    StopChanneling((ObjAIBase)owner, ChannelingStopCondition.Cancel, ChannelingStopSource.LostTarget);
                }
                if(target.IsDead)
                {
                    StopChanneling((ObjAIBase)owner, ChannelingStopCondition.Cancel, ChannelingStopSource.LostTarget);
                }
                else
                {
                    if(owner.IsDead)
                    {
                        SpellEffectRemove(this.particleID);
                    }
                    else
                    {
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        nextBuffVars.DrainPercent = this.effect2[level];
                        nextBuffVars.DrainedBool = false;
                        SpellBuffAdd((ObjAIBase)owner, owner, "GlobalDrain", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        abilityPower = GetFlatMagicDamageMod(owner);
                        baseDamage = this.effect3[level];
                        bonusDamage = Math(abilityPower, MathOp.MO_MULTIPLY, 0.225f);
                        damageToDeal = Math(bonusDamage, MathOp.MO_ADD, baseDamage);
                        ApplyDamage((ObjAIBase)owner, target, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLPERSIST, 1, 0, 1, false, false, (ObjAIBase)attacker);
                    }
                }
            }
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            int fiddlesticksSkinID = 0;
            if(target is ObjAIBase)
            {
                
            }
            else
            {
                SpellBuffRemove(target, "Drain", (ObjAIBase)owner, 0);
            }
            SpellBuffRemove(owner, "Fearmonger_marker", (ObjAIBase)owner, 0);
            SpellEffectRemove(this.particleID);
            teamID = GetTeamID(default);
            fiddlesticksSkinID = GetSkinID(owner);
            if(fiddlesticksSkinID == 6)
            {
                SpellEffectRemove(this.glow);
                SpellEffectRemove(this.confetti);
            }
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            int fiddlesticksSkinID = 0;
            if(target is ObjAIBase)
            {
                
            }
            else
            {
                SpellBuffRemove(target, "Drain", (ObjAIBase)owner, 0);
            }
            SpellBuffRemove(owner, "Fearmonger_marker", (ObjAIBase)owner, 0);
            SpellEffectRemove(this.particleID);
            teamID = GetTeamID(default);
            fiddlesticksSkinID = GetSkinID(owner);
            if(fiddlesticksSkinID == 6)
            {
                SpellEffectRemove(this.glow);
                SpellEffectRemove(this.confetti);
            }
        }
    }
}








namespace Spells
{
    public class Empower : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DamagePerStack = 0;
        }
        public int[] effect0 = {25, 35, 45, 55, 65};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.DamagePerStack = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 8, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class EmpowerTwo : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
            public int BonusDamage = 0;
        }
        public int[] effect0 = {9, 8, 7, 6, 5};
        public int[] effect1 = {60, 95, 130, 165, 200};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpellCooldown = this.effect0[level];
            nextBuffVars.BonusDamage = this.effect1[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "EmpowerTwo", 1, 1, 10, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SetSlotSpellCooldownTime((ObjAIBase)owner, 1, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0);
        }
    }
}

namespace Spells
{
    public class EnchantedCrystalArrow : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MovementSpeedMod = 0;
            public int AttackSpeedMod = 0;
        }
        public int[] effect0 = {250, 425, 600};
        public float[] effect1 = {-0.5f, -0.5f, -0.5f};
        public int[] effect2 = {0, 0, 0};
        public int[] effect3 = {3, 3, 3};
        public int[] effect4 = {125, 212, 300};
        public float[] effect5 = {-0.5f, -0.5f, -0.5f};
        public int[] effect6 = {0, 0, 0};
        public int[] effect7 = {3, 3, 3};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float distance = 0;
            float stunDuration = 0;
            //object? unit = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? missileNetworkID = null;
            distance = DistanceBetweenObjectAndPoint(target, charVars.CastPoint);
            stunDuration = Math(distance, MathOp.MO_MULTIPLY, 0.00125f);
            stunDuration = Math(stunDuration, MathOp.MO_MAX, 1);
            stunDuration = Math(stunDuration, MathOp.MO_MIN, 3.5f);
            ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                if(unit == target)
                {
                    ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 1, 1, false, false, (ObjAIBase)attacker);
                    SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, stunDuration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                    nextBuffVars.MovementSpeedMod = this.effect1[level];
                    nextBuffVars.AttackSpeedMod = this.effect2[level];
                    SpellBuffAdd((ObjAIBase)attacker, unit, "Chilled", 1, 1, this.effect3[level], nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                }
                else
                {
                    BreakSpellShields(target);
                    ApplyDamage((ObjAIBase)attacker, unit, this.effect4[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 1, false, false, (ObjAIBase)attacker);
                    nextBuffVars.MovementSpeedMod = this.effect5[level];
                    nextBuffVars.AttackSpeedMod = this.effect6[level];
                    SpellBuffAdd((ObjAIBase)attacker, unit, "Chilled", 1, 1, this.effect7[level], nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                }
            });
            DestroyMissile(missileNetworkID);
        }
    }
}


namespace Spells
{
    public class Enrage : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int BonusDamage = 0;
            public int BonusDamageIncrement = 0;
        }
        public int[] effect0 = {25, 35, 45, 55, 65};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "Enrage") > 0)
            {
                SpellBuffRemove(owner, "Enrage", (ObjAIBase)owner, 0);
            }
            else
            {
                nextBuffVars.BonusDamage = this.effect0[level];
                nextBuffVars.BonusDamageIncrement = 10;
                SpellBuffAdd((ObjAIBase)attacker, owner, "Enrage", 1, 1, 20000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
        }
    }
}















namespace Spells
{
    public class ExplosiveCask : Script
    {
        public int[] effect0 = {400, 600, 800};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? unit = null;
            //object? nextBuffVars = null;
            targetPos = GetCastSpellTargetPos();
            ForEachUnitInTargetArea((ObjAIBase)attacker, targetPos, 400, "", default, default, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, 0.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, default, default, default, default);
            });
            ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 1, default, false, false, default);
        }
    }
}

namespace Spells
{
    public class Expunge : Script
    {
        public int[] effect0 = {20, 30, 40, 50, 60};
        public int[] effect1 = {30, 60, 90, 120, 150};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            int explosionDamage = 0;
            //object? unit = null;
            int count = 0;
            int baseDamage = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            Particle? asdf = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            explosionDamage = this.effect0[level];
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                if(GetBuffCountFromCaster(unit, owner, "DeadlyVenom") > 0)
                {
                    BreakSpellShields(unit);
                    count = GetBuffCountFromAll(unit, "DeadlyVenom");
                    baseDamage = this.effect1[level];
                    bonusDamage = Math(count, MathOp.MO_MULTIPLY, explosionDamage);
                    totalDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                    ApplyDamage((ObjAIBase)attacker, unit, totalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 1, 1, false, false, (ObjAIBase)attacker);
                    SpellEffectCreate(out asdf, out _, "Expunge_tar_02.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, target, default, default, true, default, default, default, default, default, default);
                    SpellBuffRemoveStacks(unit, owner, "DeadlyVenom", 0);
                }
            });
        }
    }
}
namespace Spells
{
    public class EyeOfTheStorm : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? TotalArmorAmount = null;
            public int DamageBonus = 0;
        }
        public int[] effect0 = {80, 120, 160, 200, 240};
        public int[] effect1 = {14, 23, 32, 41, 50};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float abilityPower = 0;
            int armorAmount = 0;
            float totalArmorAmount = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            PlayAnimation("Spell3", 0, owner, false, false, false);
            abilityPower = GetFlatMagicDamageMod(attacker);
            armorAmount = this.effect0[level];
            abilityPower = Math(abilityPower, MathOp.MO_MULTIPLY, 0.9f);
            totalArmorAmount = Math(abilityPower, MathOp.MO_ADD, armorAmount);
            nextBuffVars.TotalArmorAmount = totalArmorAmount;
            nextBuffVars.DamageBonus = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "JannaEoTSBuff", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class EzrealArcaneShift : Script
    {
        Region? bubbleID = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int ownerSkinID = 0;
            Vector3 castPos;
            Vector3 ownerPos;
            float distance = 0;
            TeamId teamID;
            Particle? p3 = null;
            //object? _ = null;
            Particle? ar1 = null;
            TeamId casterID;
            bool? fired = null;
            //object? unit = null;
            bool? isStealthed = null;
            bool? canSee = null;
            ownerSkinID = GetSkinID(owner);
            castPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, castPos);
            FaceDirection(owner, castPos);
            if(distance >= 475)
            {
                castPos = GetPointByUnitFacingOffset(owner, 475, 0);
            }
            TeleportToPosition(owner, castPos);
            teamID = GetTeamID(default);
            if(ownerSkinID == 5)
            {
                if(teamID == TeamId.TEAM_BLUE)
                {
                    SpellEffectCreate(out p3, out _, "Ezreal_arcaneshift_cas_pulsefire.troy", default, TeamId.TEAM_BLUE, 225, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, false, false, false, false, default, default);
                    SpellEffectCreate(out ar1, out _, "Ezreal_arcaneshift_flash_pulsefire.troy", default, TeamId.TEAM_BLUE, 225, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out p3, out _, "Ezreal_arcaneshift_cas_pulsefire.troy", default, TeamId.TEAM_PURPLE, 225, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, false, false, false, false, default, default);
                    SpellEffectCreate(out ar1, out _, "Ezreal_arcaneshift_flash_pulsefire.troy", default, TeamId.TEAM_PURPLE, 225, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, true, false, false, false, false, default, default);
                }
            }
            else
            {
                if(teamID == TeamId.TEAM_BLUE)
                {
                    SpellEffectCreate(out p3, out _, "Ezreal_arcaneshift_cas.troy", default, TeamId.TEAM_BLUE, 225, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, false, false, false, false, default, default);
                    SpellEffectCreate(out ar1, out _, "Ezreal_arcaneshift_flash.troy", default, TeamId.TEAM_BLUE, 225, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out p3, out _, "Ezreal_arcaneshift_cas.troy", default, TeamId.TEAM_PURPLE, 225, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, false, false, false, false, default, default);
                    SpellEffectCreate(out ar1, out _, "Ezreal_arcaneshift_flash.troy", default, TeamId.TEAM_PURPLE, 225, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, true, false, false, false, false, default, default);
                }
            }
            casterID = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            fired = false;
            ForNClosestUnitsInTargetArea(owner, owner.Position, 750, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 5, true, default, (unit) => 
            {
                if(fired == false)
                {
                    isStealthed = GetStealthed(unit);
                    canSee = CanSeeTarget(owner, unit);
                    if(isStealthed == false)
                    {
                        this.bubbleID = AddUnitPerceptionBubble(casterID, 100, unit, 1, default, default, false);
                        FaceDirection(attacker, unit);
                        SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                        fired = true;
                    }
                    else if(unit is Champion)
                    {
                        this.bubbleID = AddUnitPerceptionBubble(casterID, 100, unit, 1, default, default, false);
                        FaceDirection(attacker, unit);
                        SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                        fired = true;
                    }
                    else if(canSee == true)
                    {
                        this.bubbleID = AddUnitPerceptionBubble(casterID, 100, unit, 1, default, default, false);
                        FaceDirection(attacker, unit);
                        SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                        fired = true;
                    }
                }
            });
        }
    }
}
namespace Spells
{
    public class EzrealArcaneShiftMissile : Script
    {
        public int[] effect0 = {75, 125, 175, 225, 275};
        public int[] effect1 = {0, 0, 0, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            ApplyDamage((ObjAIBase)owner, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "EzrealRisingSpellForce", 5, 1, 6 + this.effect1[level], default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class EzrealBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class EzrealBasicAttack2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class EzrealCritAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float baseAttackDamage = 0;
            hitResult = HitResult.HIT_Critical;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}

namespace Spells
{
    public class EzrealEssenceFlux : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 1050)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 1000, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 2, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class EzrealEssenceFluxMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float AttackSpeedMod = 0;
            public float AttackSpeedModNegative = 0;
        }
        public int[] effect0 = {0, 0, 0, 0, 0};
        public float[] effect1 = {0.2f, 0.25f, 0.3f, 0.35f, 0.4f};
        public float[] effect2 = {0.2f, 0.25f, 0.3f, 0.35f, 0.4f};
        public int[] effect3 = {80, 130, 180, 230, 280};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            float abilityPower = 0;
            float abilityPowerMod = 0;
            TeamId casterID;
            TeamId casterID2;
            Particle? asdf = null;
            //object? _ = null;
            float attackSpeedMod = 0;
            SpellBuffAdd((ObjAIBase)attacker, attacker, "EzrealRisingSpellForce", 5, 1, 6 + this.effect0[level], nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            abilityPower = GetFlatMagicDamageMod(attacker);
            abilityPowerMod = Math(abilityPower, MathOp.MO_MULTIPLY, 0.7f);
            casterID = GetTeamID(default);
            casterID2 = GetTeamID(default);
            SpellEffectCreate(out asdf, out _, "Ezreal_essenceflux_tar.troy", default, casterID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "root", default, target, default, default, true, false, false, false, false, default, default);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            attackSpeedMod = this.effect1[level];
            nextBuffVars.AttackSpeedMod = this.effect2[level];
            if(casterID == casterID2)
            {
                ApplyAssistMarker((ObjAIBase)attacker, target, 10);
                SpellBuffAdd((ObjAIBase)attacker, target, "EzrealEssenceFlux", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
            else
            {
                nextBuffVars.AttackSpeedModNegative = Math(attackSpeedMod, MathOp.MO_MULTIPLY, -1);
                BreakSpellShields(target);
                ApplyDamage((ObjAIBase)attacker, target, this.effect3[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
                SpellBuffAdd((ObjAIBase)attacker, target, "EzrealEssenceFluxMissile", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            }
        }
    }
}

namespace Spells
{
    public class EzrealMysticShot : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            int ownerSkinID = 0;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 1100)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 1050, 0);
            }
            ownerSkinID = GetSkinID(owner);
            if(ownerSkinID == 5)
            {
                SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 3, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            }
            else
            {
                SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class EzrealMysticShotMissile : Script
    {
        public int[] effect0 = {35, 55, 75, 95, 115};
        public int[] effect1 = {0, 0, 0, 0, 0};
        public int[] effect2 = {0, 0, 0, 0, 0};
        public int[] effect3 = {0, 0, 0, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float cooldown = 0;
            float cooldown1 = 0;
            float cooldown2 = 0;
            float cooldown3 = 0;
            int spellBaseDamage = 0;
            float baseDamage = 0;
            float attackDamage = 0;
            float damageVar = 0;
            float aP = 0;
            float finalAP = 0;
            float finalDamage = 0;
            bool? isStealthed = null;
            float newCooldown = 0;
            float newCooldown1 = 0;
            float newCooldown2 = 0;
            float newCooldown3 = 0;
            Particle? gragas = null;
            //object? _ = null;
            //object? missileNetworkID = null;
            //object? nextBuffVars = null;
            bool? canSee = null;
            teamID = GetTeamID(default);
            cooldown = GetSlotSpellCooldownTime((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            cooldown1 = GetSlotSpellCooldownTime((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            cooldown2 = GetSlotSpellCooldownTime((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            cooldown3 = GetSlotSpellCooldownTime((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            spellBaseDamage = this.effect0[level];
            baseDamage = GetTotalAttackDamage(owner);
            attackDamage = Math(1, MathOp.MO_MULTIPLY, baseDamage);
            damageVar = Math(spellBaseDamage, MathOp.MO_ADD, attackDamage);
            aP = GetFlatMagicDamageMod(owner);
            finalAP = Math(aP, MathOp.MO_MULTIPLY, 0.2f);
            finalDamage = Math(damageVar, MathOp.MO_ADD, finalAP);
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                if(cooldown > 0)
                {
                    newCooldown = Math(cooldown, MathOp.MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(newCooldown, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                }
                if(cooldown1 > 0)
                {
                    newCooldown1 = Math(cooldown1, MathOp.MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(newCooldown1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                }
                if(cooldown2 > 0)
                {
                    newCooldown2 = Math(cooldown2, MathOp.MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(newCooldown2, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                }
                if(cooldown3 > 0)
                {
                    newCooldown3 = Math(cooldown3, MathOp.MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(newCooldown3, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                }
                BreakSpellShields(target);
                ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out gragas, out _, "Ezreal_mysticshot_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                DestroyMissile(missileNetworkID);
                SpellBuffAdd((ObjAIBase)attacker, attacker, "EzrealRisingSpellForce", 5, 1, 6 + this.effect1[level], default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
            else
            {
                if(target is Champion)
                {
                    if(cooldown > 0)
                    {
                        newCooldown = Math(cooldown, MathOp.MO_SUBTRACT, 1);
                        SetSlotSpellCooldownTimeVer2(newCooldown, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                    }
                    if(cooldown1 > 0)
                    {
                        newCooldown1 = Math(cooldown1, MathOp.MO_SUBTRACT, 1);
                        SetSlotSpellCooldownTimeVer2(newCooldown1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                    }
                    if(cooldown2 > 0)
                    {
                        newCooldown2 = Math(cooldown2, MathOp.MO_SUBTRACT, 1);
                        SetSlotSpellCooldownTimeVer2(newCooldown2, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                    }
                    if(cooldown3 > 0)
                    {
                        newCooldown3 = Math(cooldown3, MathOp.MO_SUBTRACT, 1);
                        SetSlotSpellCooldownTimeVer2(newCooldown3, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                    }
                    BreakSpellShields(target);
                    ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
                    SpellEffectCreate(out gragas, out _, "Ezreal_mysticshot_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                    DestroyMissile(missileNetworkID);
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "EzrealRisingSpellForce", 5, 1, 6 + this.effect2[level], default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        if(cooldown > 0)
                        {
                            newCooldown = Math(cooldown, MathOp.MO_SUBTRACT, 1);
                            SetSlotSpellCooldownTimeVer2(newCooldown, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                        }
                        if(cooldown1 > 0)
                        {
                            newCooldown1 = Math(cooldown1, MathOp.MO_SUBTRACT, 1);
                            SetSlotSpellCooldownTimeVer2(newCooldown1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                        }
                        if(cooldown2 > 0)
                        {
                            newCooldown2 = Math(cooldown2, MathOp.MO_SUBTRACT, 1);
                            SetSlotSpellCooldownTimeVer2(newCooldown2, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                        }
                        if(cooldown3 > 0)
                        {
                            newCooldown3 = Math(cooldown3, MathOp.MO_SUBTRACT, 1);
                            SetSlotSpellCooldownTimeVer2(newCooldown3, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                        }
                        BreakSpellShields(target);
                        ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
                        SpellEffectCreate(out gragas, out _, "Ezreal_mysticshot_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                        DestroyMissile(missileNetworkID);
                        SpellBuffAdd((ObjAIBase)attacker, attacker, "EzrealRisingSpellForce", 5, 1, 6 + this.effect3[level], default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class EzrealMysticShotPulseMissile : Script
    {
        public int[] effect0 = {35, 55, 75, 95, 115};
        public int[] effect1 = {0, 0, 0, 0, 0};
        public int[] effect2 = {0, 0, 0, 0, 0};
        public int[] effect3 = {0, 0, 0, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float cooldown = 0;
            float cooldown1 = 0;
            float cooldown2 = 0;
            float cooldown3 = 0;
            int spellBaseDamage = 0;
            float baseDamage = 0;
            float attackDamage = 0;
            float damageVar = 0;
            float aP = 0;
            float finalAP = 0;
            float finalDamage = 0;
            bool? isStealthed = null;
            float newCooldown = 0;
            float newCooldown1 = 0;
            float newCooldown2 = 0;
            float newCooldown3 = 0;
            Particle? gragas = null;
            //object? _ = null;
            //object? missileNetworkID = null;
            //object? nextBuffVars = null;
            bool? canSee = null;
            teamID = GetTeamID(default);
            cooldown = GetSlotSpellCooldownTime((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            cooldown1 = GetSlotSpellCooldownTime((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            cooldown2 = GetSlotSpellCooldownTime((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            cooldown3 = GetSlotSpellCooldownTime((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            spellBaseDamage = this.effect0[level];
            baseDamage = GetTotalAttackDamage(owner);
            attackDamage = Math(1, MathOp.MO_MULTIPLY, baseDamage);
            damageVar = Math(spellBaseDamage, MathOp.MO_ADD, attackDamage);
            aP = GetFlatMagicDamageMod(owner);
            finalAP = Math(aP, MathOp.MO_MULTIPLY, 0.2f);
            finalDamage = Math(damageVar, MathOp.MO_ADD, finalAP);
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                if(cooldown > 0)
                {
                    newCooldown = Math(cooldown, MathOp.MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(newCooldown, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                }
                if(cooldown1 > 0)
                {
                    newCooldown1 = Math(cooldown1, MathOp.MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(newCooldown1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                }
                if(cooldown2 > 0)
                {
                    newCooldown2 = Math(cooldown2, MathOp.MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(newCooldown2, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                }
                if(cooldown3 > 0)
                {
                    newCooldown3 = Math(cooldown3, MathOp.MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(newCooldown3, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                }
                BreakSpellShields(target);
                ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out gragas, out _, "Ezreal_mysticshot_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                DestroyMissile(missileNetworkID);
                SpellBuffAdd((ObjAIBase)attacker, attacker, "EzrealRisingSpellForce", 5, 1, 6 + this.effect1[level], default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
            else
            {
                if(target is Champion)
                {
                    if(cooldown > 0)
                    {
                        newCooldown = Math(cooldown, MathOp.MO_SUBTRACT, 1);
                        SetSlotSpellCooldownTimeVer2(newCooldown, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                    }
                    if(cooldown1 > 0)
                    {
                        newCooldown1 = Math(cooldown1, MathOp.MO_SUBTRACT, 1);
                        SetSlotSpellCooldownTimeVer2(newCooldown1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                    }
                    if(cooldown2 > 0)
                    {
                        newCooldown2 = Math(cooldown2, MathOp.MO_SUBTRACT, 1);
                        SetSlotSpellCooldownTimeVer2(newCooldown2, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                    }
                    if(cooldown3 > 0)
                    {
                        newCooldown3 = Math(cooldown3, MathOp.MO_SUBTRACT, 1);
                        SetSlotSpellCooldownTimeVer2(newCooldown3, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                    }
                    BreakSpellShields(target);
                    ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
                    SpellEffectCreate(out gragas, out _, "Ezreal_mysticshot_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                    DestroyMissile(missileNetworkID);
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "EzrealRisingSpellForce", 5, 1, 6 + this.effect2[level], default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        if(cooldown > 0)
                        {
                            newCooldown = Math(cooldown, MathOp.MO_SUBTRACT, 1);
                            SetSlotSpellCooldownTimeVer2(newCooldown, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                        }
                        if(cooldown1 > 0)
                        {
                            newCooldown1 = Math(cooldown1, MathOp.MO_SUBTRACT, 1);
                            SetSlotSpellCooldownTimeVer2(newCooldown1, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                        }
                        if(cooldown2 > 0)
                        {
                            newCooldown2 = Math(cooldown2, MathOp.MO_SUBTRACT, 1);
                            SetSlotSpellCooldownTimeVer2(newCooldown2, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                        }
                        if(cooldown3 > 0)
                        {
                            newCooldown3 = Math(cooldown3, MathOp.MO_SUBTRACT, 1);
                            SetSlotSpellCooldownTimeVer2(newCooldown3, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)attacker, false);
                        }
                        BreakSpellShields(target);
                        ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
                        SpellEffectCreate(out gragas, out _, "Ezreal_mysticshot_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                        DestroyMissile(missileNetworkID);
                        SpellBuffAdd((ObjAIBase)attacker, attacker, "EzrealRisingSpellForce", 5, 1, 6 + this.effect3[level], default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    }
                }
            }
        }
    }
}

namespace Spells
{
    public class EzrealTrueshotBarrage : Script
    {
        public int[] effect0 = {0, 0, 0, 0, 0};
        public int[] effect1 = {350, 500, 650};
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float totalDamage = 0;
            float baseDamage = 0;
            float bonusDamage = 0;
            float spell3Display = 0;
            //object? spellSlot = null;
            totalDamage = GetTotalAttackDamage(owner);
            baseDamage = GetBaseAttackDamage(owner);
            bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseDamage);
            spell3Display = Math(bonusDamage, MathOp.MO_MULTIPLY, 1);
            SetSpellToolTipVar(spell3Display, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (Champion)owner);
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int ownerSkinID = 0;
            TeamId ownerTeamID;
            Particle? asdf = null;
            //object? _ = null;
            ownerSkinID = GetSkinID(owner);
            ownerTeamID = GetTeamID(default);
            if(ownerSkinID == 5)
            {
                SpellEffectCreate(out asdf, out _, "Ezreal_PulseFire_Ult_Thrusters.troy", default, ownerTeamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "BUFFBONE_Vent_Low_R", default, owner, default, default, true, false, false, false, false, default, default);
                SpellEffectCreate(out asdf, out _, "Ezreal_PulseFire_Ult_Thrusters.troy", default, ownerTeamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "BUFFBONE_Vent_Low_L", default, owner, default, default, true, false, false, false, false, default, default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            object? percentOfAttack = null;
            float totalDamage = 0;
            float baseDamage = 0;
            float bonusDamage = 0;
            Particle? asdf = null;
            //object? _ = null;
            //object? nextBuffVars = null;
            float physPreMod = 0;
            float physPostMod = 0;
            float aPPreMod = 0;
            float aPPostMod = 0;
            teamID = GetTeamID(default);
            percentOfAttack = charVars.PercentOfAttack;
            totalDamage = GetTotalAttackDamage(owner);
            baseDamage = GetBaseAttackDamage(owner);
            bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseDamage);
            bonusDamage = Math(1, MathOp.MO_MULTIPLY, bonusDamage);
            SpellEffectCreate(out asdf, out _, "Ezreal_TrueShot_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, default, default, true, false, false, false, false, default, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "EzrealRisingSpellForce", 5, 1, 6 + this.effect0[level], default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            physPreMod = GetFlatPhysicalDamageMod(owner);
            physPostMod = Math(1, MathOp.MO_MULTIPLY, physPreMod);
            aPPreMod = GetFlatMagicDamageMod(owner);
            aPPostMod = Math(0.9f, MathOp.MO_MULTIPLY, aPPreMod);
            ApplyDamage((ObjAIBase)owner, target, bonusDamage + this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, percentOfAttack, 0.9f, 1, false, false, (ObjAIBase)attacker);
            charVars.PercentOfAttack = Math(charVars.PercentOfAttack, MathOp.MO_MULTIPLY, 0.92f);
            charVars.PercentOfAttack = Math(charVars.PercentOfAttack, MathOp.MO_MAX, 0.3f);
        }
    }
}

namespace Spells
{
    public class FallenOne : Script
    {
        public int[] effect0 = {250, 400, 550};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? unit = null;
            //object? nextBuffVars = null;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectEnemies AffectHeroes ", default, true, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)attacker, unit, "FallenOneTarget", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            });
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? unit = null;
            Particle? particle = null;
            //object? _ = null;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectEnemies AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 0, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out particle, out _, "FallenOne_nova.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, target, default, default, false, default, default, false, default, default, default);
            });
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? unit = null;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectEnemies AffectHeroes ", default, true, (unit) => 
            {
                SpellBuffRemove(unit, "FallenOneTarget", (ObjAIBase)attacker, default);
            });
        }
    }
}
namespace Spells
{
    public class FallenOneExtra : Script
    {
        public int[] effect0 = {250, 400, 550};
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? unit = null;
            Particle? particle = null;
            //object? _ = null;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectEnemies AffectHeroes ", default, default, (unit) => 
            {
                BreakSpellShields(unit);
                ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.7f, default, false, false, default);
                SpellEffectCreate(out particle, out _, "FallenOne_nova.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, target, default, default, false, default, default, default, default, default, default);
            });
        }
    }
}




namespace Spells
{
    public class Feast : Script
    {
        public int[] effect0 = {0, 0, 0};
        public int[] effect1 = {300, 475, 650};
        public int[] effect2 = {1000, 1000, 1000};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int count = 0;
            int healthPerStack = 0;
            int feastBase = 0;
            float abilityPower = 0;
            float halfAbilityPower = 0;
            float feastHealth = 0;
            float targetHealth = 0;
            Particle? smokeBomb = null;
            //object? _ = null;
            //object? nextBuffVars = null;
            count = GetBuffCountFromCaster(owner, owner, "Feast");
            healthPerStack = this.effect0[level];
            if(target is Champion)
            {
                feastBase = this.effect1[level];
            }
            else
            {
                feastBase = this.effect2[level];
            }
            abilityPower = GetFlatMagicDamageMod(owner);
            halfAbilityPower = Math(abilityPower, MathOp.MO_MULTIPLY, 0.7f);
            feastHealth = Math(halfAbilityPower, MathOp.MO_ADD, feastBase);
            targetHealth = GetHealth(target);
            if(feastHealth >= targetHealth)
            {
                ApplyDamage((ObjAIBase)attacker, target, targetHealth, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0, 0, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out smokeBomb, out _, "chogath_feast_sign.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, false, false, false, false, default, default);
                if(target.IsDead)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "Feast", 6, 1, 30000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)owner, owner, "Feast_internal", 1, 1, 30000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, feastHealth, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 1, false, false, (ObjAIBase)attacker);
            }
        }
    }
}



namespace Spells
{
    public class FeralScream : Script
    {
        public int[] effect0 = {75, 125, 175, 225, 275};
        public float[] effect1 = {2, 2.25f, 2.5f, 2.75f, 3};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.7f, 1, false, false, (ObjAIBase)attacker);
            if(target is Champion)
            {
                ApplySilence(attacker, target, this.effect1[level]);
            }
        }
    }
}
namespace Spells
{
    public class FerociousHowl : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float DamageReduction = 0;
            public int BonusDamage = 0;
        }
        public float[] effect0 = {0.5f, 0.6f, 0.7f};
        public int[] effect1 = {60, 75, 90};
        public int[] effect2 = {7, 7, 7};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            SpellBuffRemoveType(owner, BuffType.STUN);
            SpellBuffRemoveType(owner, BuffType.SILENCE);
            SpellBuffRemoveType(owner, BuffType.TAUNT);
            SpellBuffRemoveType(owner, BuffType.POLYMORPH);
            SpellBuffRemoveType(owner, BuffType.SLOW);
            SpellBuffRemoveType(owner, BuffType.SNARE);
            SpellBuffRemoveType(owner, BuffType.SLEEP);
            SpellBuffRemoveType(owner, BuffType.FEAR);
            SpellBuffRemoveType(owner, BuffType.CHARM);
            SpellBuffRemoveType(owner, BuffType.SUPPRESSION);
            nextBuffVars.DamageReduction = this.effect0[level];
            nextBuffVars.BonusDamage = this.effect1[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, this.effect2[level], nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "AlistarTrample", 1, 1, 3, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class FiddleSticksDarkWindMissile : Script
    {
        public int[] effect0 = {65, 85, 105, 125, 145};
        public int[] effect1 = {0, 0, 0, 0, 0};
        Particle? a = null;
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            bool? doOnce = null;
            int baseDamage = 0;
            int count = 0;
            //object? unit = null;
            bool? isStealthed = null;
            Vector3 attackerPos;
            bool? canSee = null;
            //object? nextBuffVars = null;
            TeamId teamID;
            int fiddlesticksSkinID = 0;
            //object? _ = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            doOnce = false;
            baseDamage = this.effect0[level];
            count = GetBuffCountFromAll(owner, "FiddleSticksDarkWindMissile");
            if(count <= 3)
            {
                ForEachUnitInTargetAreaRandom((ObjAIBase)attacker, target.Position, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, 10, (unit) => 
                {
                    if(doOnce == false)
                    {
                        if(unit != target)
                        {
                            isStealthed = GetStealthed(unit);
                            if(isStealthed == false)
                            {
                                attackerPos = GetUnitPosition(owner);
                                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                doOnce = true;
                                SpellCast((ObjAIBase)attacker, unit, default, default, true, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, target.Position);
                            }
                            else
                            {
                                canSee = CanSeeTarget(attacker, unit);
                                if(canSee == true)
                                {
                                    attackerPos = GetUnitPosition(owner);
                                    level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                    doOnce = true;
                                    SpellCast((ObjAIBase)attacker, unit, default, default, true, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, target.Position);
                                }
                            }
                        }
                    }
                });
            }
            SpellBuffAdd((ObjAIBase)owner, owner, "FiddleSticksDarkWindMissile", 4, 1, 4, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "DarkWind", 1, 1, 1.2f, default, BuffAddType.RENEW_EXISTING, BuffType.SILENCE, 0, true, false, false, default);
            ApplyDamage((ObjAIBase)attacker, target, baseDamage + this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.45f, 0, false, false, (ObjAIBase)attacker);
            teamID = GetTeamID(default);
            fiddlesticksSkinID = GetSkinID(attacker);
            if(fiddlesticksSkinID == 6)
            {
                SpellEffectCreate(out this.a, out _, "Party_DarkWind_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out this.a, out _, "DarkWind_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            }
        }
    }
}
namespace Spells
{
    public class FiddlesticksDarkWind : Script
    {
        public int[] effect0 = {65, 85, 105, 125, 145};
        public int[] effect1 = {0, 0, 0, 0, 0};
        Particle? a = null;
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            bool? doOnce = null;
            int damageToDeal = 0;
            //object? unit = null;
            bool? isStealthed = null;
            Vector3 attackerPos;
            bool? canSee = null;
            //object? nextBuffVars = null;
            int fiddlesticksSkinID = 0;
            //object? _ = null;
            SpellBuffClear(owner, "FiddleSticksDarkWindMissile");
            teamID = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            doOnce = false;
            damageToDeal = this.effect0[level];
            ForEachUnitInTargetAreaRandom((ObjAIBase)attacker, target.Position, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", default, false, 10, (unit) => 
            {
                if(unit != target)
                {
                    if(doOnce != true)
                    {
                        isStealthed = GetStealthed(unit);
                        if(isStealthed == false)
                        {
                            attackerPos = GetUnitPosition(target);
                            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            SpellCast((ObjAIBase)attacker, unit, default, default, true, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, attackerPos);
                            doOnce = true;
                        }
                        else
                        {
                            canSee = CanSeeTarget(attacker, unit);
                            if(canSee == true)
                            {
                                attackerPos = GetUnitPosition(target);
                                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                SpellCast((ObjAIBase)attacker, unit, default, default, true, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, attackerPos);
                                doOnce = true;
                            }
                        }
                    }
                }
            });
            SpellBuffAdd((ObjAIBase)attacker, attacker, "FiddleSticksDarkWindMissile", 5, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "DarkWind", 1, 1, 1.2f, default, BuffAddType.RENEW_EXISTING, BuffType.SILENCE, 0, true, false, false, default);
            ApplyDamage((ObjAIBase)attacker, target, damageToDeal + this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.45f, 0, false, false, (ObjAIBase)attacker);
            teamID = GetTeamID(default);
            fiddlesticksSkinID = GetSkinID(attacker);
            if(fiddlesticksSkinID == 6)
            {
                SpellEffectCreate(out this.a, out _, "Party_DarkWind_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out this.a, out _, "DarkWind_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            }
        }
    }
}


namespace Spells
{
    public class FizzCleave : Script
    {
        public int[] effect0 = {30, 55, 80, 105, 130};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int bonusDamage = 0;
            float akaliDamage = 0;
            float akaliAP = 0;
            float damageToDeal = 0;
            bool? isStealthed = null;
            bool? canSee = null;
            bonusDamage = this.effect0[level];
            akaliDamage = GetTotalAttackDamage(owner);
            akaliAP = GetFlatMagicDamageMod(owner);
            akaliAP = Math(0.3f, MathOp.MO_MULTIPLY, akaliAP);
            akaliDamage = Math(akaliDamage, MathOp.MO_MULTIPLY, 0.6f);
            damageToDeal = Math(bonusDamage, MathOp.MO_ADD, akaliDamage);
            damageToDeal = Math(akaliAP, MathOp.MO_ADD, damageToDeal);
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                ApplyDamage((ObjAIBase)owner, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, true, false, (ObjAIBase)attacker);
            }
            else if(target is Champion)
            {
                ApplyDamage((ObjAIBase)owner, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, true, false, (ObjAIBase)attacker);
            }
            else
            {
                canSee = CanSeeTarget(owner, target);
                if(canSee == true)
                {
                    ApplyDamage((ObjAIBase)owner, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, true, false, (ObjAIBase)attacker);
                }
            }
        }
    }
}
namespace Spells
{
    public class FizzJump : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int Damage = 0;
        }
        public int[] effect0 = {70, 115, 160, 205, 250};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            int gravityVar = 0;
            int speedVar = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            if(distance >= 400)
            {
                gravityVar = 40;
                speedVar = 1325;
                FaceDirection(owner, targetPos);
                targetPos = GetPointByUnitFacingOffset(owner, 400, 0);
                distance = 400;
            }
            else if(distance >= 300)
            {
                gravityVar = 35;
                speedVar = 1075;
            }
            else if(distance >= 200)
            {
                gravityVar = 30;
                speedVar = 1025;
            }
            else if(distance >= 100)
            {
                gravityVar = 25;
                speedVar = 800;
            }
            else if(distance >= 25)
            {
                gravityVar = 20;
                speedVar = 800;
            }
            else if(distance < 25)
            {
                gravityVar = 20;
                speedVar = 800;
                targetPos = GetPointByUnitFacingOffset(owner, 25, 0);
            }
            DestroyMissileForTarget(owner);
            UnlockAnimation(owner, false);
            CancelAutoAttack(owner, true);
            PlayAnimation("Spell3a", 0.75f, owner, false, true, false);
            Move(owner, targetPos, speedVar, gravityVar, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, 500, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
            nextBuffVars.Damage = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "FizzJumpBuffer", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class FizzJumpBuffer : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 jumpBuffer;
            //object? nextBuffVars = null;
            jumpBuffer = GetCastSpellTargetPos();
            charVars.JumpBuffer = jumpBuffer;
            SpellBuffAdd((ObjAIBase)owner, owner, "FizzJumpBuffered", 1, 1, 1, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class FizzJumpTwo : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int Damage = 0;
        }
        public int[] effect0 = {70, 115, 160, 205, 250};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            int gravityVar = 0;
            int speedVar = 0;
            bool? result = null;
            float checkDistance = 0;
            bool? pathable = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            if(distance >= 300)
            {
                gravityVar = 30;
                speedVar = 1325;
                FaceDirection(owner, targetPos);
                targetPos = GetPointByUnitFacingOffset(owner, 300, 0);
                distance = 275;
                result = IsPathable(targetPos);
                if(result == false)
                {
                    checkDistance = 300;
                    while(checkDistance <= 400)
                    {
                        checkDistance = Math(checkDistance, MathOp.MO_ADD, 25);
                        targetPos = GetPointByUnitFacingOffset(owner, checkDistance, 0);
                        pathable = IsPathable(targetPos);
                        if(pathable == true)
                        {
                            distance = checkDistance;
                            checkDistance = 500;
                        }
                    }
                }
            }
            else if(distance >= 200)
            {
                gravityVar = 25;
                speedVar = 1175;
            }
            else if(distance >= 100)
            {
                gravityVar = 20;
                speedVar = 900;
            }
            else if(distance >= 25)
            {
                gravityVar = 15;
                speedVar = 825;
            }
            else if(distance < 25)
            {
                gravityVar = 15;
                speedVar = 800;
                targetPos = GetPointByUnitFacingOffset(owner, 25, 0);
            }
            Move(owner, targetPos, speedVar, gravityVar, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.POSTPONE_CURRENT_ORDER, 500, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
            nextBuffVars.Damage = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            PlayAnimation("Spell3d", 1, owner, false, true, false);
        }
    }
}

namespace Spells
{
    public class FizzMarinerDoom : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            //object? nextBuffVars = null;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 1250)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 1250, 0);
            }
            else if(distance <= 200)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 200, 0);
            }
            else
            {
                distance = Math(distance, MathOp.MO_ADD, 50);
                targetPos = GetPointByUnitFacingOffset(owner, distance, 0);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, "FizzMarinerDoom", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 4, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            charVars.UltFired = true;
        }
    }
}

namespace Spells
{
    public class FizzMarinerDoomBoom : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? unit = null;
            SpellBuffClear(owner, "FizzMarinerDoomMissile");
            ForEachChampion(TeamId.TEAM_UNKNOWN, default, true, (unit) => 
            {
                if(GetBuffCountFromCaster(unit, owner, "FizzMarinerDoomBomb") > 0)
                {
                    SpellBuffClear(unit, "FizzMarinerDoomBomb");
                }
            });
        }
    }
}
namespace Spells
{
    public class FizzMarinerDoomMissile : Script
    {
        class OnMissileEnd_nextBuffVars
        {
            public object? MissilePosition = null;
            public bool? WillStick = null;
        }
        class TargetExecute_nextBuffVars
        {
            public object? MissilePosition = null;
            public bool? WillStick = null;
        }
        bool? ultFired = null;
        public void OnMissileEnd(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            //object? missileEndPosition = null;
            OnMissileEnd_nextBuffVars nextBuffVars = new();
            if(this.ultFired == true)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                nextBuffVars.MissilePosition = missileEndPosition;
                nextBuffVars.WillStick = true;
                SpellBuffAdd((ObjAIBase)owner, owner, "FizzMarinerDoomMissile", 1, 1, 1.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                charVars.UltFired = false;
                this.ultFired = false;
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? missileNetworkID = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            Vector3 missileEndPosition;
            DestroyMissile(missileNetworkID);
            BreakSpellShields(target);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            SpellBuffAdd((ObjAIBase)attacker, target, "FizzMarinerDoomBomb", 1, 1, 1.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.DAMAGE, 0, true, false, false, default);
            charVars.UltFired = false;
            if(GetBuffCountFromCaster(target, default, "FizzMarinerDoomBomb") == 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                missileEndPosition = GetUnitPosition(target);
                nextBuffVars.MissilePosition = missileEndPosition;
                nextBuffVars.WillStick = false;
                SpellBuffAdd((ObjAIBase)owner, owner, "FizzMarinerDoomMissile", 1, 1, 1.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}




namespace Spells
{
    public class FizzPiercingStrike : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DamageDealt = 0;
            public object? OwnerPos = null;
        }
        public int[] effect0 = {10, 40, 70, 100, 130};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Vector3 ownerPos;
            float distance = 0;
            int okayCheckDistance = 0;
            float checkDistance = 0;
            float leapDistance = 0;
            float doubleCheckDistance = 0;
            bool? result = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetUnitPosition(target);
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            okayCheckDistance = 0;
            checkDistance = 0;
            leapDistance = Math(600, MathOp.MO_SUBTRACT, distance);
            FaceDirection(owner, target.Position);
            while(checkDistance <= leapDistance)
            {
                doubleCheckDistance = Math(checkDistance, MathOp.MO_ADD, distance);
                targetPos = GetPointByUnitFacingOffset(owner, doubleCheckDistance, 0);
                result = IsPathable(targetPos);
                if(result == false)
                {
                    checkDistance = Math(checkDistance, MathOp.MO_ADD, 601);
                }
                else
                {
                    okayCheckDistance = checkDistance;
                }
                checkDistance = Math(checkDistance, MathOp.MO_ADD, 25);
            }
            distance = Math(distance, MathOp.MO_ADD, okayCheckDistance);
            targetPos = GetPointByUnitFacingOffset(owner, distance, 0);
            nextBuffVars.DamageDealt = this.effect0[level];
            nextBuffVars.OwnerPos = ownerPos;
            Move(owner, targetPos, 1450, 0, 25, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, distance, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
            PlayAnimation("Spell1", 0, owner, false, false, false);
            SpellBuffAdd((ObjAIBase)target, attacker, default, 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(target is Champion)
            {
                IssueOrder(owner, OrderType.AttackTo, default, target);
            }
        }
    }
}
namespace Spells
{
    public class FizzQ1 : Script
    {
        public int[] effect0 = {75, 125, 175, 225, 275};
        Particle? particleID = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 castPos;
            Vector3 centerPos;
            //object? nextBuffVars = null;
            //object? unit = null;
            Vector3 skip;
            TeamId teamID;
            Vector3 startPos;
            Minion? other1 = null;
            Vector3 endPos;
            Minion? other2 = null;
            //object? _ = null;
            castPos = GetCastSpellTargetPos();
            FaceDirection(owner, castPos);
            centerPos = GetPointByUnitFacingOffset(owner, 225, 0);
            PlayAnimation("Attack1", 0.5f, owner, false, true, true);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            ForEachUnitInTargetRectangle(owner, centerPos, 80, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", true, default, (unit) => 
            {
                ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.66f, 0, false, false, (ObjAIBase)attacker);
                SpellBuffAdd((ObjAIBase)owner, unit, "RenektonBloodSplatterTarget", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            });
            SpellBuffAdd((ObjAIBase)owner, owner, "FizzUnlockAnimation", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            skip = GetPointByUnitFacingOffset(owner, 250, 0);
            Move(owner, skip, 600, 18, 25, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, 300, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
            CancelAutoAttack(owner, true);
            teamID = GetTeamID(default);
            startPos = GetPointByUnitFacingOffset(owner, -75, 0);
            other1 = SpawnMinion("TestCube", "TestCube", "idle.lua", startPos, teamID, false, true, true, true, true, true, 10, true, false, default, default);
            endPos = GetPointByUnitFacingOffset(owner, 550, 0);
            other2 = SpawnMinion("TestCube", "TestCube", "idle.lua", endPos, teamID, false, true, true, true, true, true, 10, true, false, default, default);
            SpellBuffAdd(other1, other1, "ExpirationTimer", 1, 1, 0.1f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd(other2, other2, "ExpirationTimer", 1, 1, 0.1f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellEffectCreate(out this.particleID, out _, "kennen_btl_beam.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, unit, false, other1, "head", default, other2, "head", default, true, false, false, false, false, default, default);
        }
    }
}
namespace Spells
{
    public class FizzQ2 : Script
    {
        public int[] effect0 = {40, 70, 100, 130, 160};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? unit = null;
            //object? nextBuffVars = null;
            SpellBuffClear(owner, "FizzUnlockAnimation");
            PlayAnimation("Spell6", 0, owner, false, true, true);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)owner, unit, "RenektonBloodSplatterTarget", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 0, false, false, (ObjAIBase)attacker);
            });
            SpellBuffAdd((ObjAIBase)owner, owner, "FizzUnlockAnimation", 1, 1, 0.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffClear(owner, "FizzQ1");
            CancelAutoAttack(owner, true);
        }
    }
}

namespace Spells
{
    public class FizzSeastonePassive : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 4, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class FizzSeastoneTrident : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "FizzSeastoneTridentActive", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}



namespace Spells
{
    public class FizzTempestTrap : Script
    {
        public int[] effect0 = {2, 2, 2, 2, 2};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            int maxStacks = 0;
            targetPos = GetCastSpellTargetPos();
            teamID = GetTeamID(default);
            other3 = SpawnMinion("Bantam Trap", "CaitlynTrap", "idle.lua", targetPos, teamID, false, true, false, true, true, false, 0, false, false, (Champion)owner, default);
            PlayAnimation("Spell1", 1, other3, false, false, true);
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 30, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            maxStacks = this.effect0[level];
            SpellBuffAdd(other3, owner, "FizzTempestTrapCount", maxStacks, 1, 30, default, BuffAddType.STACKS_AND_OVERLAPS, BuffType.INTERNAL, 0, false, false, false, default);
        }
    }
}









namespace Spells
{
    public class FlashFrost : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "FlashFrost") > 0)
            {
                SpellBuffRemove(owner, "FlashFrost", (ObjAIBase)owner, default);
            }
            else
            {
                level = GetCastSpellLevelPlusOne(default);
                targetPos = GetCastSpellTargetPos();
                SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0.285f);
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class FlashFrostSpell : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MovementSpeedMod = 0;
            public int AttackSpeedMod = 0;
        }
        public int[] effect0 = {60, 90, 120, 150, 180};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            BreakSpellShields(target);
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 1, false, false, (ObjAIBase)attacker);
            nextBuffVars.MovementSpeedMod = -0.2f;
            nextBuffVars.AttackSpeedMod = 0;
            SpellBuffAdd((ObjAIBase)attacker, target, "Chilled", 1, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, default, default);
        }
    }
}

namespace Spells
{
    public class FlaskOfCrystalWater : Script
    {
        class CanCast_tempTable1
        {
            public float ManaPercent = 0;
        }
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            CanCast_tempTable1 tempTable1 = new();
            tempTable1.ManaPercent = GetPARPercent(owner);
            if(tempTable1.ManaPercent > 0.99f)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)target, target, "FlaskOfCrystalWater", 5, 1, 15, default, BuffAddType.STACKS_AND_CONTINUE, BuffType.HEAL, 0, false, false, false, default);
            SpellBuffAdd((ObjAIBase)target, target, "Potion_Internal", 1, 1, 15, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.CountManaPotion = GetBuffCountFromAll(owner, "FlaskOfCrystalWater");
        }
    }
}

namespace Spells
{
    public class Fling : Script
    {
        public int[] effect0 = {100, 150, 200, 250, 300};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Vector3 landPos;
            float distance = 0;
            float delayTimer = 0;
            //object? nextBuffVars = null;
            targetPos = GetUnitPosition(target);
            landPos = GetPointByUnitFacingOffset(owner, 420, 180);
            distance = DistanceBetweenPoints(targetPos, landPos);
            delayTimer = Math(distance, MathOp.MO_DIVIDE, 1160);
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 1, 1, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, delayTimer, default, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class Flurry : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? MonkTotalDamage = null;
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? monkTotalDamage = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            charVars.FlurryScalar = 0.7f;
            nextBuffVars.MonkTotalDamage = monkTotalDamage;
            SpellBuffAdd((ObjAIBase)target, target, default, 1, 1, 0.58f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
        }
    }
}


namespace Spells
{
    public class ForcePulse : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public int AttackSpeedMod = 0;
        }
        public int[] effect0 = {80, 130, 180, 230, 280};
        public float[] effect1 = {-0.3f, -0.35f, -0.4f, -0.45f, -0.5f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "ForcePulseCanCast", (ObjAIBase)owner, 0);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.7f, 1, false, false, (ObjAIBase)attacker);
            nextBuffVars.MoveSpeedMod = this.effect1[level];
            nextBuffVars.AttackSpeedMod = 0;
            SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
        }
    }
}








namespace Spells
{
    public class FrostArcherIceArrowAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            float baseAttackDamage = 0;
            DebugSay(owner, "execute", default);
            if(target is ObjAIBase)
            {
                if(target is BaseTurret)
                {
                    
                }
                else
                {
                    DebugSay(owner, "add buff", default);
                    SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 0.1f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, default, default, default);
                }
            }
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, default);
        }
    }
}
namespace Spells
{
    public class FrostArrow : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            float baseAttackDamage = 0;
            if(target is ObjAIBase)
            {
                if(target is BaseTurret)
                {
                    
                }
                else
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "FrostArrowApplicator", 1, 1, 0.1f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}

namespace Spells
{
    public class FrostShot : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int ManaCostPerAttack = 0;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "FrostShot") > 0)
            {
                SpellBuffRemove(owner, "FrostShot", (ObjAIBase)owner, 0);
            }
            else
            {
                nextBuffVars.ManaCostPerAttack = 8;
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class Frostbite : Script
    {
        public int[] effect0 = {55, 85, 115, 145, 175};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float baseDamage = 0;
            int count = 0;
            Particle? smokeBomb = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            baseDamage = this.effect0[level];
            count = GetBuffCountFromAll(target, "Chilled");
            if(count > 0)
            {
                baseDamage = Math(2, MathOp.MO_MULTIPLY, baseDamage);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 1, 1, false, false, default);
                SpellEffectCreate(out smokeBomb, out _, "cryo_FrostBite_chilled_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.5f, 1, false, false, default);
            }
        }
    }
}



namespace Spells
{
    public class FullAutomatic : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int NumAttacks = 0;
            public int BonusDamage = 0;
        }
        public int[] effect0 = {5, 6, 7};
        public int[] effect1 = {15, 25, 35};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.NumAttacks = this.effect0[level];
            nextBuffVars.BonusDamage = this.effect1[level];
            OverrideAutoAttack(0, SpellSlotType.ExtraSlots, owner, level, false);
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 12, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "TwitchSprayAndPray", 10, nextBuffVars.NumAttacks, 12, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class GGSpray : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int ArmorMod = 0;
        }
        public int[] effect0 = {-1, -2, -3, -4, -5};
        public int[] effect1 = {10, 16, 22, 28, 34};
        public int[] effect2 = {10, 16, 22, 28, 34};
        public int[] effect3 = {10, 16, 22, 28, 34};
        public int[] effect4 = {10, 16, 22, 28, 34};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            int baseDamage = 0;
            float totalDamage = 0;
            float baseAD = 0;
            float bonusDamage = 0;
            bool? isStealthed = null;
            bool? canSee = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.ArmorMod = this.effect0[level];
            baseDamage = this.effect1[level];
            totalDamage = GetTotalAttackDamage(owner);
            baseAD = GetBaseAttackDamage(owner);
            bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseAD);
            bonusDamage = Math(0.2f, MathOp.MO_MULTIPLY, bonusDamage);
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "GatlingDebuff", 10, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.SHRED, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)owner, target, bonusDamage + this.effect2[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
            }
            else
            {
                if(target is Champion)
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "GatlingDebuff", 10, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.SHRED, 0, true, false, false, default);
                    ApplyDamage((ObjAIBase)owner, target, bonusDamage + this.effect3[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, "GatlingDebuff", 10, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.SHRED, 0, true, false, false, default);
                        ApplyDamage((ObjAIBase)owner, target, bonusDamage + this.effect4[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class GGun : Script
    {
        public int[] effect0 = {4, 4, 4, 4, 4};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect0[level], default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class GalioBulwark : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int BonusDefense = 0;
            public object? HealAmount = null;
        }
        public int[] effect0 = {30, 45, 60, 75, 90};
        public int[] effect1 = {25, 40, 55, 70, 85};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            int baseHeal = 0;
            float aPStat = 0;
            float bonusHeal = 0;
            float healAmount = 0;
            nextBuffVars.BonusDefense = this.effect0[level];
            baseHeal = this.effect1[level];
            aPStat = GetFlatMagicDamageMod(owner);
            bonusHeal = Math(aPStat, MathOp.MO_MULTIPLY, 0.3f);
            healAmount = Math(baseHeal, MathOp.MO_ADD, bonusHeal);
            nextBuffVars.HealAmount = healAmount;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class GalioIdolOfDurand : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            ApplyAssistMarker((ObjAIBase)owner, target, 10);
            SpellBuffAdd((ObjAIBase)owner, target, "GalioIdolOfDurandMarker", 1, 1, 2, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            BreakSpellShields(target);
            ApplyTaunt(owner, target, 2);
        }
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 2, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? unit = null;
            SpellBuffRemove(owner, "GalioIdolOfDurand", (ObjAIBase)owner, 0);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 575, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                ApplyDamage((ObjAIBase)owner, unit, 1, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, false, false, (ObjAIBase)owner);
            });
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? unit = null;
            SpellBuffRemove(owner, "GalioIdolOfDurand", (ObjAIBase)owner, 0);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 575, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                ApplyDamage((ObjAIBase)owner, unit, 1, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, false, false, (ObjAIBase)owner);
            });
        }
    }
}


namespace Spells
{
    public class GalioResoluteSmite : Script
    {
        class OnMissileEnd_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {-0.24f, -0.28f, -0.32f, -0.36f, -0.4f};
        public int[] effect1 = {80, 135, 190, 245, 300};
        public void OnMissileEnd(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            OnMissileEnd_nextBuffVars nextBuffVars = new();
            TeamId teamID;
            Particle? impactVFX = null;
            //object? _ = null;
            //object? missileEndPosition = null;
            //object? unit = null;
            Particle? targetVFX1 = null;
            Particle? targetVFX2 = null;
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            teamID = GetTeamID(default);
            if(teamID == TeamId.TEAM_BLUE)
            {
                SpellEffectCreate(out impactVFX, out _, "galio_concussiveBlast_mis_tar.troy", default, TeamId.TEAM_BLUE, 250, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, missileEndPosition, target, default, default, true, default, default, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out impactVFX, out _, "galio_concussiveBlast_mis_tar.troy", default, TeamId.TEAM_PURPLE, 250, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, missileEndPosition, target, default, default, true, default, default, false, false, default, default);
            }
            ForEachUnitInTargetArea((ObjAIBase)owner, missileEndPosition, 230, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (unit) => 
            {
                BreakSpellShields(unit);
                ApplyDamage((ObjAIBase)attacker, unit, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.7f, 1, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out targetVFX1, out _, "galio_concussiveBlast_unit_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, "head", unit, unit, default, default, false, default, default, false, false, default, default);
                SpellEffectCreate(out targetVFX2, out _, "galio_concussiveBlast_unit_tar_02.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, unit, unit, default, default, false, default, default, false, false, default, default);
                SpellBuffAdd((ObjAIBase)attacker, unit, default, 100, 1, 2.5f, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, true, false, default);
            });
        }
    }
}
namespace Spells
{
    public class GalioRighteousGust : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {0.2f, 0.28f, 0.36f, 0.44f, 0.52f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 ownerPos;
            float distance = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            Minion? other3 = null;
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            targetPos = GetPointByUnitFacingOffset(owner, 1100, 0);
            nextBuffVars.TargetPos = targetPos;
            other3 = SpawnMinion("RighteousGustLauncher", "TestCubeRender", "idle.lua", ownerPos, teamID ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, (Champion)owner, default);
            SpellBuffAdd((ObjAIBase)owner, other3, default, 1, 1, 5, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, attacker, "GalioRighteousGustHaste", 1, 1, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class GalioRighteousGustMissile : Script
    {
        class OnMissileUpdate_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {0.2f, 0.28f, 0.36f, 0.44f, 0.52f};
        public void OnMissileUpdate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int level = 0;
            Vector3 targetPos;
            OnMissileUpdate_nextBuffVars nextBuffVars = new();
            //object? missilePosition = null;
            Minion? other3 = null;
            teamID = GetTeamID(default);
            level = GetCastSpellLevelPlusOne(default);
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            other3 = SpawnMinion("RighteousGust", "TestCube", "idle.lua", missilePosition, teamID, false, false, false, false, false, true, 100, false, true, default, default);
            FaceDirection(other3, targetPos);
            SpellBuffAdd((ObjAIBase)owner, other3, default, 1, 1, 5, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class GarenBladestorm : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int BaseDamage = 0;
            public int SpellCooldown = 0;
            public float MoveSpeedMod = 0;
        }
        public int[] effect0 = {25, 45, 65, 85, 105};
        public int[] effect1 = {13, 12, 11, 10, 9};
        public float[] effect2 = {0.5f, 0.5f, 0.5f, 0.5f, 0.5f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.BaseDamage = this.effect0[level];
            nextBuffVars.SpellCooldown = this.effect1[level];
            SetSpell((ObjAIBase)owner, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "GarenBladestormLeave");
            SpellBuffRemoveType(owner, BuffType.SLOW);
            SpellBuffAdd((ObjAIBase)attacker, owner, "GarenBladestorm", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            nextBuffVars.MoveSpeedMod = this.effect2[level];
            SetSlotSpellCooldownTimeVer2(1, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
        }
    }
}
namespace Spells
{
    public class GarenBladestormLeave : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "GarenBladestorm", (ObjAIBase)owner, default);
        }
    }
}
namespace Spells
{
    public class GarenCommand : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float DamageReduction = 0;
            public object? TotalArmorAmount = null;
        }
        public int[] effect0 = {65, 100, 135, 170, 205};
        public float[] effect1 = {0.2f, 0.24f, 0.28f, 0.32f, 0.36f};
        public int[] effect2 = {3, 3, 3, 3, 3};
        Particle? particle = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            float abilityPower = 0;
            int armorAmount = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            int buffDuration = 0;
            float totalArmorAmount = 0;
            //object? _ = null;
            teamID = GetTeamID(default);
            abilityPower = GetFlatMagicDamageMod(attacker);
            armorAmount = this.effect0[level];
            nextBuffVars.DamageReduction = this.effect1[level];
            buffDuration = this.effect2[level];
            abilityPower = Math(abilityPower, MathOp.MO_MULTIPLY, 0.8f);
            totalArmorAmount = Math(abilityPower, MathOp.MO_ADD, armorAmount);
            nextBuffVars.TotalArmorAmount = totalArmorAmount;
            SpellEffectCreate(out this.particle, out _, "garen_command_cas.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, attacker, false, attacker, "C_BUFFBONE_GLB_CENTER_LOC", default, attacker, default, default, true, default, default, false, false, default, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, buffDuration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}




namespace Spells
{
    public class GarenJustice : Script
    {
        public float[] effect0 = {3.5f, 3, 2.5f};
        public int[] effect1 = {175, 350, 525};
        Particle? particle = null;
        Particle? particle2 = null;
        Particle? particle3 = null;
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float damageScale = 0;
            int damage = 0;
            float maxHP = 0;
            float currentHP = 0;
            //object? _ = null;
            float missingHP = 0;
            float exeDmg = 0;
            float finalDamage = 0;
            damageScale = this.effect0[level];
            damage = this.effect1[level];
            maxHP = GetMaxHealth(target);
            currentHP = GetHealth(target);
            SpellEffectCreate(out this.particle, out _, "garen_damacianJustice_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, attacker, false, attacker, "C_BUFFBONE_GLB_CHEST_LOC", default, attacker, default, default, false, default, default, default, default, default, default);
            missingHP = Math(maxHP, MathOp.MO_SUBTRACT, currentHP);
            exeDmg = Math(missingHP, MathOp.MO_DIVIDE, damageScale);
            finalDamage = Math(exeDmg, MathOp.MO_ADD, damage);
            BreakSpellShields(target);
            ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, false, (ObjAIBase)attacker);
            SpellEffectCreate(out this.particle2, out _, "garen_damacianJustice_tar_indicator.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, target, false, target, default, default, target, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(out this.particle3, out _, "garen_damacianJustice_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, target, false, target, default, default, target, default, default, false, default, default, default, default, default, default);
        }
    }
}
namespace Spells
{
    public class GarenJusticePreCast : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "GarenBladestorm") > 0)
            {
                SpellBuffRemove(owner, "GarenBladestorm", (ObjAIBase)owner, 0);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellCast((ObjAIBase)owner, target, default, default, false, 1, SpellSlotType.ExtraSlots, level, false, false, false, false, false, default);
        }
    }
}





namespace Spells
{
    public class GarenSlash2 : Script
    {
        public float[] effect0 = {2.5f, 2.5f, 2.5f, 2.5f, 2.5f};
        public int[] effect1 = {30, 45, 60, 75, 90};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float silenceDuration = 0;
            int bonusDamage = 0;
            float supremeDmg = 0;
            float scalingDamage = 0;
            float dealtDamage = 0;
            bool? hitResult = null;
            silenceDuration = this.effect0[level];
            bonusDamage = this.effect1[level];
            supremeDmg = GetTotalAttackDamage(owner);
            scalingDamage = Math(supremeDmg, MathOp.MO_MULTIPLY, 1.4f);
            dealtDamage = Math(scalingDamage, MathOp.MO_ADD, bonusDamage);
            hitResult = false;
            if(target is ObjAIBase)
            {
                BreakSpellShields(target);
                ApplyDamage((ObjAIBase)attacker, target, dealtDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, true, (ObjAIBase)attacker);
                if(target is not BaseTurret)
                {
                    ApplySilence(attacker, target, silenceDuration);
                }
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, dealtDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, true, (ObjAIBase)attacker);
            }
        }
    }
}
namespace Spells
{
    public class GarenSlash3 : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float SpeedMod = 0;
            public int SpellCooldown = 0;
            public float SilenceDuration = 0;
            public int BonusDamage = 0;
        }
        public float[] effect0 = {0.15f, 0.2f, 0.25f, 0.3f, 0.35f};
        public int[] effect1 = {12, 11, 10, 9, 8};
        public float[] effect2 = {1.5f, 2, 2.5f, 3, 3.5f};
        public int[] effect3 = {30, 45, 60, 75, 90};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            SetSlotSpellCooldownTimeVer2(0, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            nextBuffVars.SpeedMod = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "GarenFastMove", 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            nextBuffVars.SpellCooldown = this.effect1[level];
            nextBuffVars.SilenceDuration = this.effect2[level];
            nextBuffVars.BonusDamage = this.effect3[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 6, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class Gate : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? GateParticle = null;
            public object? GateParticle2 = null;
            public object? TargetPos = null;
        }
        Particle? gateParticle = null;
        Particle? gateParticle2 = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            SelfExecute_nextBuffVars nextBuffVars = new();
            TeamId teamID;
            targetPos = GetCastSpellTargetPos();
            targetPos = GetNearestPassablePosition(owner, targetPos);
            if(GetBuffCountFromCaster(owner, owner, "Destiny_marker") > 0)
            {
                teamOfOwner = GetTeamID(default);
                SpellEffectCreate(out this.gateParticle, out this.gateParticle2, "GateMarker_green.troy", "GateMarker_red.troy", teamOfOwner, 200, 0, TeamId.TEAM_UNKNOWN, default, false, default, default, targetPos, target, default, default, false, default, default, false, false, default, default);
                nextBuffVars.GateParticle = this.gateParticle;
                nextBuffVars.GateParticle2 = this.gateParticle2;
                nextBuffVars.TargetPos = targetPos;
                SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 1.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                SpellBuffRemove(owner, "Destiny_marker", (ObjAIBase)owner, 0);
            }
            else
            {
                SpellCast((ObjAIBase)owner, owner, targetPos, targetPos, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            }
            teamID = GetTeamID(default);
        }
    }
}





namespace Spells
{
    public class GatlingGun : Script
    {
        public float[] effect0 = {4, 4.5f, 5, 5.5f, 6};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect0[level], default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, default, default, default, default);
        }
    }
}
namespace Spells
{
    public class GatlingGunAttack : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? SpellLevel = null;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            float baseDamage = 0;
            //object? missileNetworkID = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.SpellLevel = level;
            baseDamage = GetBaseAttackDamage(owner);
            baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, 0.4f);
            SpellBuffAdd((ObjAIBase)attacker, target, "GatlingDebuff", 10, 1, 1, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_DEHANCER, 0, default, default, default, default);
            if(GetBuffCountFromCaster(target, owner, "GatlingDebuffCheck") > 0)
            {
                
            }
            else
            {
                ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, default, default, default, default);
                SpellBuffAdd((ObjAIBase)attacker, target, "GatlingDebuffCheck", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
                DestroyMissile(missileNetworkID);
            }
        }
    }
}


namespace Spells
{
    public class GlacialStorm : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DamagePerLevel = 0;
            public object? TargetPos = null;
            public int ManaCost = 0;
        }
        public int[] effect0 = {40, 60, 80};
        public int[] effect1 = {20, 25, 30};
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            if(GetBuffCountFromCaster(owner, owner, "GlacialStorm") > 0)
            {
                
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "GlacialStorm") > 0)
            {
                SpellBuffRemove(owner, "GlacialStorm", (ObjAIBase)owner, 0);
            }
            else
            {
                targetPos = GetCastSpellTargetPos();
                nextBuffVars.DamagePerLevel = this.effect0[level];
                nextBuffVars.TargetPos = targetPos;
                nextBuffVars.ManaCost = this.effect1[level];
                SpellBuffAdd((ObjAIBase)owner, owner, "GlacialStorm", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
        }
    }
}





namespace Spells
{
    public class GodofDeath : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DamageCap = 0;
            public float DamagePerc = 0;
            public int CurrentDamageTotal = 0;
            public int BonusHealth = 0;
        }
        public int[] effect0 = {300, 300, 300, 0, 0};
        public float[] effect1 = {0.03f, 0.04f, 0.05f, 0, 0};
        public int[] effect2 = {300, 450, 600, 0, 0};
        public int[] effect3 = {15, 15, 15};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.DamageCap = this.effect0[level];
            nextBuffVars.DamagePerc = this.effect1[level];
            nextBuffVars.CurrentDamageTotal = 0;
            nextBuffVars.BonusHealth = this.effect2[level];
            SpellBuffAdd((ObjAIBase)attacker, owner, default, 1, 1, this.effect3[level], nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class GoldCardLock : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            SealSpellSlot(1, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, default);
        }
    }
}
namespace Spells
{
    public class GoldCardPreAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            SpellCast((ObjAIBase)owner, target, target.Position, target.Position, false, 3, SpellSlotType.ExtraSlots, level, true, true, false, false, true, default);
            SpellBuffRemove(owner, "PickACard", (ObjAIBase)owner, default);
        }
    }
}

namespace Spells
{
    public class GragasBarrelRoll : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DamageLevel = 0;
            public object? TargetPos = null;
        }
        public int[] effect0 = {85, 140, 195, 250, 305};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.DamageLevel = this.effect0[level];
            nextBuffVars.TargetPos = targetPos;
            SpellBuffAdd((ObjAIBase)attacker, owner, "GragasBarrelRoll", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellCast((ObjAIBase)attacker, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}




namespace Spells
{
    public class GragasBarrelRollToggle : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "GragasBarrelRoll", (ObjAIBase)owner, default);
        }
    }
}
namespace Spells
{
    public class GragasBodySlam : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DashSpeed = 0;
            public object? TargetPos = null;
            public object? Distance = null;
            public int BonusDamage = 0;
            public int MinimumDamage = 0;
        }
        public int[] effect0 = {650, 750, 800, 950, 1050};
        public int[] effect1 = {80, 120, 160, 200, 240};
        public int[] effect2 = {50, 75, 100, 125, 150};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 ownerPos;
            float distance = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            if(distance >= 600)
            {
                FaceDirection(owner, targetPos);
                distance = 600;
                targetPos = GetPointByUnitFacingOffset(owner, 600, 0);
            }
            nextBuffVars.DashSpeed = this.effect0[level];
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.Distance = distance;
            nextBuffVars.BonusDamage = this.effect1[level];
            nextBuffVars.MinimumDamage = this.effect2[level];
            SpellBuffAdd((ObjAIBase)attacker, owner, "GragasBodySlam", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0.1f, true, false, false, default);
            SpellEffectCreate(out _, out _, "gragas_bodySlam_cas_02.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "GragasBodySlamHolder", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}



namespace Spells
{
    public class GragasDrunkenRage : Script
    {
        class ChannelingStart_nextBuffVars
        {
            public float ManaTick = 0;
        }
        class ChannelingSuccessStop_nextBuffVars
        {
            public int DamageIncrease = 0;
            public float DamageReduction = 0;
        }
        public float[] effect0 = {15, 22.5f, 30, 37.5f, 45};
        public int[] effect1 = {30, 40, 50, 60, 70};
        public float[] effect2 = {0.1f, 0.12f, 0.14f, 0.16f, 0.18f};
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            ChannelingStart_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "GragasBodySlamSelfSlow") > 0)
            {
                SpellBuffRemove(owner, "GragasBodySlamSelfSlow", (ObjAIBase)owner, default);
            }
            nextBuffVars.ManaTick = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 1.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.HEAL, 0, true, false, false, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            ChannelingSuccessStop_nextBuffVars nextBuffVars = new();
            nextBuffVars.DamageIncrease = this.effect1[level];
            nextBuffVars.DamageReduction = this.effect2[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "GragasDrunkenRageSelf", 1, 1, 20, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffRemove(owner, "GragasDrunkenRage", (ObjAIBase)owner, default);
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "GragasDrunkenRage", (ObjAIBase)owner, default);
        }
    }
}

namespace Spells
{
    public class GragasExplosiveCask : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 ownerPos;
            float distance = 0;
            Minion? other2 = null;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(targetPos, ownerPos);
            FaceDirection(owner, targetPos);
            if(distance > 1050)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 1050, 0);
            }
            other2 = SpawnMinion("k", "TestCubeRender", "idle.lua", targetPos, teamID, true, true, false, true, true, true, 0, default, true, (Champion)attacker, default);
            SpellCast((ObjAIBase)owner, other2, targetPos, targetPos, false, 1, SpellSlotType.ExtraSlots, level, false, true, false, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other2, "ExpirationTimer", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class GragasExplosiveCaskBoom : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int Speed = 0;
            public int Gravity = 0;
            public object? Center = null;
            public int Distance = 0;
            public int IdealDistance = 0;
        }
        public int[] effect0 = {200, 325, 450};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamofOwner;
            int gragasSkinID = 0;
            Particle? particle = null;
            //object? _ = null;
            //object? unit = null;
            Vector3 center;
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? arr = null;
            teamofOwner = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            gragasSkinID = GetSkinID(attacker);
            if(gragasSkinID == 4)
            {
                if(teamofOwner == TeamId.TEAM_BLUE)
                {
                    SpellEffectCreate(out particle, out _, "gragas_caskboom_classy.troy", default, TeamId.TEAM_BLUE, 100, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, target.Position, owner, default, target.Position, true, default, default, false, default, default, default);
                }
                else
                {
                    SpellEffectCreate(out particle, out _, "gragas_caskboom_classy.troy", default, TeamId.TEAM_PURPLE, 100, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, target.Position, owner, default, target.Position, true, default, default, false, default, default, default);
                }
            }
            else
            {
                if(teamofOwner == TeamId.TEAM_BLUE)
                {
                    SpellEffectCreate(out particle, out _, "gragas_caskboom.troy", default, TeamId.TEAM_BLUE, 100, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, target.Position, owner, default, target.Position, true, default, default, false, default, default, default);
                }
                else
                {
                    SpellEffectCreate(out particle, out _, "gragas_caskboom.troy", default, TeamId.TEAM_PURPLE, 100, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, target.Position, owner, default, target.Position, true, default, default, false, default, default, default);
                }
            }
            ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 430, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                center = GetCastSpellTargetPos();
                nextBuffVars.Speed = 900;
                nextBuffVars.Gravity = 5;
                nextBuffVars.Center = center;
                nextBuffVars.Distance = 900;
                nextBuffVars.IdealDistance = 900;
                ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 1, 1, false, false, (ObjAIBase)attacker);
                SpellBuffAdd((ObjAIBase)attacker, unit, "MoveAwayCollision", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                if(teamofOwner == TeamId.TEAM_BLUE)
                {
                    SpellEffectCreate(out arr, out _, "gragas_caskwine_tar.troy", default, TeamId.TEAM_BLUE, 100, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, unit, unit, default, default, true, default, default, false, default, default, default);
                }
                else
                {
                    SpellEffectCreate(out arr, out _, "gragas_caskwine_tar.troy", default, TeamId.TEAM_PURPLE, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, unit, unit, default, default, true, default, default, false, default, default, default);
                }
            });
        }
    }
}



namespace Spells
{
    public class GravesChargeShot : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            charVars.BriggsCastPos = GetUnitPosition(owner);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 600)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 600, 0);
            }
            SpellCast((ObjAIBase)attacker, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class GravesChargeShotFxMissile : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            
        }
    }
}
namespace Spells
{
    public class GravesChargeShotFxMissile2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            
        }
    }
}
namespace Spells
{
    public class GravesChargeShotShot : Script
    {
        public int[] effect0 = {250, 350, 450};
        public void OnMissileEnd(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamIDAttacker;
            TeamId teamIDTarget;
            Minion? other1 = null;
            //object? missileEndPosition = null;
            //object? nextBuffVars = null;
            float distance = 0;
            Vector3 spawnPos;
            Minion? other3 = null;
            Vector3 point1;
            Vector3 point2;
            Vector3 point3;
            Minion? other2 = null;
            Vector3 shockwaveTarget;
            //object? _1 = null;
            teamIDAttacker = GetTeamID(default);
            teamIDTarget = GetTeamID(default);
            other1 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", charVars.BriggsCastPos, teamIDAttacker ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, (Champion)owner, default);
            FaceDirection(other1, missileEndPosition);
            SpellBuffAdd((ObjAIBase)attacker, other1, "ExpirationTimer", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            distance = DistanceBetweenObjectAndPoint(other1, missileEndPosition);
            distance = Math(distance, MathOp.MO_SUBTRACT, 150);
            spawnPos = GetPointByUnitFacingOffset(other1, distance, 0);
            other3 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", spawnPos, teamIDAttacker ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, (Champion)owner, default);
            FaceDirection(other3, missileEndPosition);
            point1 = GetPointByUnitFacingOffset(other3, 400, 30);
            point2 = GetPointByUnitFacingOffset(other3, 400, -30);
            point3 = GetPointByUnitFacingOffset(other3, 400, 0);
            other2 = SpawnMinion("ParticleTarget", "SpellBook1", "idle.lua", point3, teamIDAttacker ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, (Champion)owner, default);
            FaceDirection(other2, other1.Position);
            shockwaveTarget = GetPointByUnitFacingOffset(other3, 700, 0);
            SpellBuffAdd((ObjAIBase)attacker, other2, "ExpirationTimer", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellCast((ObjAIBase)attacker, default, point1, point1, true, 5, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, spawnPos);
            SpellCast((ObjAIBase)attacker, default, point2, point2, true, 5, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, spawnPos);
            SpellCast((ObjAIBase)attacker, default, point3, point3, true, 6, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, spawnPos);
            SpellBuffAdd((ObjAIBase)attacker, other3, "ExpirationTimer", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellCast((ObjAIBase)attacker, target, missileEndPosition, missileEndPosition, true, 2, SpellSlotType.ExtraSlots, _1, false, true, false, true, false, other3.Position);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float spellBaseDamage = 0;
            //object? nextBuffVars = null;
            //object? missileNetworkID = null;
            float totalAD = 0;
            float baseAD = 0;
            float bonusAD = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            spellBaseDamage = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "GravesChargeShotShot", 1, 1, 0.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(target is Champion)
            {
                DestroyMissile(missileNetworkID);
                BreakSpellShields(target);
            }
            totalAD = GetTotalAttackDamage(owner);
            baseAD = GetBaseAttackDamage(owner);
            bonusAD = Math(totalAD, MathOp.MO_SUBTRACT, baseAD);
            bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 1.4f);
            spellBaseDamage = Math(bonusAD, MathOp.MO_ADD, spellBaseDamage);
            ApplyDamage((ObjAIBase)attacker, target, spellBaseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class GravesChargeShotXplode : Script
    {
        public int[] effect0 = {140, 250, 360};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseDmg = 0;
            float totalAD = 0;
            float baseAD = 0;
            float bonusAD = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(GetBuffCountFromCaster(target, attacker, "GravesChargeShotShot") == 0)
            {
                baseDmg = this.effect0[level];
                totalAD = GetTotalAttackDamage(attacker);
                baseAD = GetBaseAttackDamage(attacker);
                bonusAD = Math(totalAD, MathOp.MO_SUBTRACT, baseAD);
                bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 1.2f);
                baseDmg = Math(bonusAD, MathOp.MO_ADD, baseDmg);
                ApplyDamage((ObjAIBase)attacker, target, baseDmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
            }
        }
    }
}
namespace Spells
{
    public class GravesClusterShot : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 pos;
            pos = GetPointByUnitFacingOffset(owner, 925, 0);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 4, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 50, 0);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 7, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 925, 16);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 4, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 925, -16);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 4, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class GravesClusterShotAttack : Script
    {
        public int[] effect0 = {60, 105, 150, 195, 240};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamOfCaster;
            Particle? part = null;
            //object? _ = null;
            float totalDamage = 0;
            float baseDamage = 0;
            float bonusAD = 0;
            float bonusDamage = 0;
            int count = 0;
            //object? nextBuffVars = null;
            teamOfCaster = GetTeamID(default);
            SpellEffectCreate(out part, out _, "Graves_ClusterShot_Tar.troy", default, teamOfCaster, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, true, false, false, false, false, default, default);
            BreakSpellShields(target);
            totalDamage = GetTotalAttackDamage(attacker);
            baseDamage = GetBaseAttackDamage(owner);
            bonusAD = Math(totalDamage, MathOp.MO_SUBTRACT, baseDamage);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            bonusDamage = this.effect0[level];
            bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 0.8f);
            bonusDamage = Math(bonusAD, MathOp.MO_ADD, bonusDamage);
            count = GetBuffCountFromAll(target, "GravesClusterShotAttack");
            if(count > 0)
            {
                bonusDamage = Math(bonusDamage, MathOp.MO_MULTIPLY, 0.25f);
            }
            SpellBuffAdd((ObjAIBase)target, target, "GravesClusterShotAttack", 1, 1, 0.25f, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            ApplyDamage((ObjAIBase)attacker, target, bonusDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
        }
    }
}

namespace Spells
{
    public class GravesMove : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public object? Distance = null;
            public object? DashSpeed = null;
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 ownerPos;
            float moveSpeed = 0;
            float dashSpeed = 0;
            float distance = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            StopMove(attacker);
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            moveSpeed = GetMovementSpeed(owner);
            dashSpeed = Math(moveSpeed, MathOp.MO_ADD, 850);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            if(distance > 425)
            {
                distance = 425;
            }
            FaceDirection(owner, targetPos);
            targetPos = GetPointByUnitFacingOffset(owner, distance, 0);
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.Distance = distance;
            nextBuffVars.DashSpeed = dashSpeed;
            SpellBuffAdd((ObjAIBase)attacker, owner, default, 1, 1, 1.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0.1f, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class GravesMoveSteroid : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float AttackSpeedMod = 0;
        }
        public float[] effect0 = {0.4f, 0.55f, 0.7f, 0.85f, 1};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.AttackSpeedMod = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 7, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}





namespace Spells
{
    public class GravesPassiveShotAttack : Script
    {
        public int[] effect0 = {20, 20, 20, 35, 35, 35, 35, 50, 50, 50, 50, 65, 65, 65, 65, 80, 80, 80};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float damageToDeal = 0;
            int bonusDamage = 0;
            //object? nextBuffVars = null;
            //object? unit = null;
            level = GetLevel(attacker);
            teamID = GetTeamID(default);
            if(target is not BaseTurret)
            {
                damageToDeal = GetTotalAttackDamage(attacker);
                bonusDamage = this.effect0[level];
                damageToDeal = Math(bonusDamage, MathOp.MO_ADD, damageToDeal);
                ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
                damageToDeal = Math(0.5f, MathOp.MO_MULTIPLY, damageToDeal);
                SpellBuffAdd((ObjAIBase)attacker, target, "GravesPassiveShotAttack", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                ForEachUnitInTargetArea((ObjAIBase)attacker, target.Position, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", "GravesPassiveShotAttack", false, (unit) => 
                {
                    ApplyDamage((ObjAIBase)attacker, unit, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 0, false, false, (ObjAIBase)attacker);
                });
                SpellBuffRemove(attacker, "GravesPassiveShot", (ObjAIBase)attacker, 0);
                SpellBuffAdd((ObjAIBase)attacker, attacker, "GravesPassiveStack", 4, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
            }
            else
            {
                damageToDeal = GetTotalAttackDamage(attacker);
                ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            }
        }
    }
}

namespace Spells
{
    public class GravesSmokeGrenade : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 ownerPos;
            float distance = 0;
            Minion? other2 = null;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(targetPos, ownerPos);
            FaceDirection(owner, targetPos);
            if(distance > 950)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 950, 0);
            }
            other2 = SpawnMinion("k", "TestCubeRender10Vision", "idle.lua", targetPos, teamID, true, true, false, true, true, true, 50, false, true, (Champion)attacker, default);
            SpellCast((ObjAIBase)owner, other2, targetPos, targetPos, false, 3, SpellSlotType.ExtraSlots, level, false, false, false, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other2, "ExpirationTimer", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class GravesSmokeGrenadeBoom : Script
    {
        public float[] effect0 = {4.5f, 4.5f, 4.5f, 4.5f, 4.5f};
        public int[] effect1 = {5, 5, 5, 5, 5};
        public int[] effect2 = {60, 110, 160, 210, 260};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float buffDuration = 0;
            Particle? particle = null;
            //object? _ = null;
            float aD = 0;
            float bonusDamage = 0;
            //object? dmg = null;
            float totalDamage = 0;
            float remainder = 0;
            float ticks = 0;
            float tickDamage = 0;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            //object? unit = null;
            string? name = null;
            string? checkName = null;
            targetPos = GetUnitPosition(target);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            teamID = GetTeamID(default);
            buffDuration = this.effect0[level];
            SpellEffectCreate(out particle, out _, "Graves_SmokeGrenade_Boom.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, default, default, targetPos, default, default, targetPos, true, false, false, false, false, default, default);
            aD = GetFlatPhysicalDamageMod(owner);
            bonusDamage = Math(aD, MathOp.MO_MULTIPLY, 0.6f);
            totalDamage = Math(bonusDamage, MathOp.MO_ADD, dmg);
            remainder = Math(buffDuration, MathOp.MO_MODULO, 0.5f);
            ticks = Math(buffDuration, MathOp.MO_SUBTRACT, remainder);
            tickDamage = Math(totalDamage, MathOp.MO_DIVIDE, ticks);
            other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", targetPos, teamID ?? TEAM_CASTER, false, true, false, true, true, true, 50, false, true, (Champion)owner, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "GravesSmokeGrenade", 1, 1, this.effect1[level], default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            ForEachUnitInTargetArea((ObjAIBase)attacker, targetPos, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (unit) => 
            {
                BreakSpellShields(unit);
                ApplyDamage((ObjAIBase)attacker, unit, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 0, false, false, (ObjAIBase)attacker);
                if(unit is Champion)
                {
                    name = GetUnitSkinName(unit);
                    checkName = "Nocturne";
                    if(checkName == name)
                    {
                        SpellBuffAdd((ObjAIBase)attacker, unit, "GravesSmokeGrenadeSecretPassive", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, true, default);
                    }
                }
            });
        }
    }
}






namespace Spells
{
    public class H28GEvolutionTurret : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? BonusDamage = null;
            public float BonusHealthPreLevel4 = 0;
            public float BonusHealth = 0;
            public float BonusStats = 0;
            public int BonusArmor = 0;
        }
        public int[] effect0 = {1, 1, 2, 2, 2};
        public int[] effect1 = {0, 0, 0, 125, 125};
        public int[] effect2 = {30, 38, 46, 54, 62};
        public int[] effect3 = {0, 0, 0, 0, 0};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            if(GetBuffCountFromCaster(owner, owner, "HeimerdingerTurretReady") > 0)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int maxStacks = 0;
            int level4BonusHP = 0;
            float numFound = 0;
            int minDuration = 0;
            AttackableUnit? other2 = null;
            //object? unit = null;
            float durationRemaining = 0;
            TeamId teamID;
            float abilityPower = 0;
            float abilityPowerBonus = 0;
            int baseDamage = 0;
            float bonusDamage = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            int ownerLevel = 0;
            Minion? other3 = null;
            float remainingDuration = 0;
            SpellBuffRemove(owner, "HeimerdingerTurretReady", (ObjAIBase)owner, 0);
            maxStacks = this.effect0[level];
            level4BonusHP = this.effect1[level];
            numFound = 0;
            minDuration = 25000;
            other2 = SetUnit(owner);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectFriends AffectMinions ", "H28GEvolutionTurret", true, (unit) => 
            {
                numFound = Math(numFound, MathOp.MO_ADD, 1);
                durationRemaining = GetBuffRemainingDuration(unit, "H28GEvolutionTurret");
                if(durationRemaining < minDuration)
                {
                    minDuration = durationRemaining;
                    InvalidateUnit(other2);
                    other2 = SetUnit(unit);
                }
            });
            if(numFound >= maxStacks)
            {
                if(owner != other2)
                {
                    ApplyDamage((ObjAIBase)other2, other2, 10000, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_INTERNALRAW, 1, 0, 1, false, false, (ObjAIBase)other2);
                }
            }
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            abilityPower = GetFlatMagicDamageMod(owner);
            abilityPowerBonus = Math(abilityPower, MathOp.MO_MULTIPLY, 0.2f);
            baseDamage = this.effect2[level];
            bonusDamage = Math(baseDamage, MathOp.MO_ADD, abilityPowerBonus);
            nextBuffVars.BonusDamage = bonusDamage;
            ownerLevel = GetLevel(owner);
            nextBuffVars.BonusHealthPreLevel4 = Math(ownerLevel, MathOp.MO_MULTIPLY, 15);
            nextBuffVars.BonusHealth = Math(nextBuffVars.BonusHealthPreLevel4, MathOp.MO_ADD, level4BonusHP);
            nextBuffVars.BonusStats = Math(ownerLevel, MathOp.MO_MULTIPLY, 1);
            nextBuffVars.BonusArmor = this.effect3[level];
            if(GetBuffCountFromCaster(owner, owner, "UpgradeBuff") > 0)
            {
                other3 = SpawnMinion("H-28G Evolution Turret", "HeimerTBlue", "Minion.lua", targetPos, teamID, false, false, true, false, false, false, 0, false, false, (Champion)owner, default);
                remainingDuration = GetBuffRemainingDuration(owner, "UpgradeBuff");
                SpellBuffAdd((ObjAIBase)attacker, other3, "UpgradeSlow", 1, 1, remainingDuration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
            if(level == 5)
            {
                if(GetBuffCountFromCaster(owner, owner, "UpgradeBuff") == 0)
                {
                    other3 = SpawnMinion("H-28G Evolution Turret", "HeimerTRed", "Minion.lua", targetPos, teamID, false, false, true, false, false, false, 0, false, false, (Champion)owner, default);
                }
                SpellBuffAdd((ObjAIBase)owner, other3, "ExplosiveCartridges", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
            else if(level >= 2)
            {
                if(GetBuffCountFromCaster(owner, owner, "UpgradeBuff") == 0)
                {
                    other3 = SpawnMinion("H-28G Evolution Turret", "HeimerTGreen", "Minion.lua", targetPos, teamID, false, false, true, false, false, false, 0, false, false, (Champion)owner, default);
                }
                SpellBuffAdd((ObjAIBase)owner, other3, "UrAniumRounds", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
            else
            {
                if(GetBuffCountFromCaster(owner, owner, "UpgradeBuff") == 0)
                {
                    other3 = SpawnMinion("H-28G Evolution Turret", "HeimerTYellow", "Minion.lua", targetPos, teamID, false, false, true, false, false, false, 0, false, false, (Champion)owner, default);
                }
            }
            SpellBuffAdd((ObjAIBase)owner, other3, "UPGRADE!!!Proof", 1, 1, 6, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, other3, default, 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class H28GEvolutionTurretLvl2BasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float dmg = 0;
            teamID = GetTeamID(default);
            attacker = GetChampionBySkinName("Heimerdinger", teamID);
            dmg = GetTotalAttackDamage(owner);
            if(target is BaseTurret)
            {
                dmg = Math(dmg, MathOp.MO_DIVIDE, 2);
            }
            ApplyDamage((ObjAIBase)attacker, target, dmg, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0.35f, 1, false, false, default);
        }
    }
}
namespace Spells
{
    public class H28GEvolutionTurretLvl3BasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float dmg = 0;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            attacker = GetChampionBySkinName("Heimerdinger", teamID);
            dmg = GetTotalAttackDamage(owner);
            if(target is BaseTurret)
            {
                dmg = Math(dmg, MathOp.MO_DIVIDE, 2);
            }
            ApplyDamage((ObjAIBase)attacker, target, dmg, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0.35f, 1, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "UrAniumRoundsHit", 30, 1, 3, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
        }
    }
}







namespace Spells
{
    public class Hallucinate : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DamageAmount = 0;
            public float DamageDealt = 0;
            public float DamageTaken = 0;
        }
        public int[] effect0 = {300, 450, 600};
        public float[] effect1 = {0.7f, 0.7f, 0.7f};
        public float[] effect2 = {1.35f, 1.35f, 1.35f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            bool? isStealthed = null;
            Vector3 pos;
            Pet? other1 = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            SpellBuffRemoveType(owner, BuffType.COMBAT_ENCHANCER);
            SpellBuffRemoveType(owner, BuffType.COMBAT_DEHANCER);
            SpellBuffRemoveType(owner, BuffType.STUN);
            SpellBuffRemoveType(owner, BuffType.SILENCE);
            SpellBuffRemoveType(owner, BuffType.TAUNT);
            SpellBuffRemoveType(owner, BuffType.POLYMORPH);
            SpellBuffRemoveType(owner, BuffType.SLOW);
            SpellBuffRemoveType(owner, BuffType.SNARE);
            SpellBuffRemoveType(owner, BuffType.DAMAGE);
            SpellBuffRemoveType(owner, BuffType.HEAL);
            SpellBuffRemoveType(owner, BuffType.HASTE);
            SpellBuffRemoveType(owner, BuffType.SPELL_IMMUNITY);
            SpellBuffRemoveType(owner, BuffType.PHYSICAL_IMMUNITY);
            SpellBuffRemoveType(owner, BuffType.INVULNERABILITY);
            SpellBuffRemoveType(owner, BuffType.SLEEP);
            SpellBuffRemoveType(owner, BuffType.FEAR);
            SpellBuffRemoveType(owner, BuffType.CHARM);
            SpellBuffRemoveType(owner, BuffType.POISON);
            SpellBuffRemoveType(owner, BuffType.BLIND);
            SpellBuffRemoveType(owner, BuffType.SHRED);
            isStealthed = GetStealthed(owner);
            DestroyMissileForTarget(owner);
            if(isStealthed == false)
            {
                SpellCast((ObjAIBase)owner, owner, owner.Position, owner.Position, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            }
            else
            {
                pos = GetRandomPointInAreaUnit(owner, 100, 0);
                other1 = CloneUnitPet(owner, "Hallucinate", 18, pos, 0, 0, true);
                nextBuffVars.DamageAmount = this.effect0[level];
                nextBuffVars.DamageDealt = this.effect1[level];
                nextBuffVars.DamageTaken = this.effect2[level];
                SpellBuffAdd((ObjAIBase)attacker, other1, "HallucinateFull", 1, 1, 18, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, other1, "ChampionChampionDelta", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, other1, "APBonusDamageToTowers", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, other1, "Backstab", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                SetStealthed(other1, default);
            }
        }
    }
}

namespace Spells
{
    public class HallucinateFull : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DamageAmount = 0;
            public float DamageDealt = 0;
            public float DamageTaken = 0;
            public float ShacoDamageTaken = 0;
        }
        public int[] effect0 = {300, 450, 600};
        public float[] effect1 = {0.75f, 0.75f, 0.75f};
        public float[] effect2 = {1.5f, 1.5f, 1.5f};
        public float[] effect3 = {0.85f, 0.85f, 0.85f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            DestroyMissileForTarget(owner);
            nextBuffVars.DamageAmount = this.effect0[level];
            nextBuffVars.DamageDealt = this.effect1[level];
            nextBuffVars.DamageTaken = this.effect2[level];
            nextBuffVars.ShacoDamageTaken = this.effect3[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "HallucinateApplicator", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}






namespace Spells
{
    public class HateSpike : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? temp = null;
            temp = false;
            ForEachUnitInTargetAreaRandom((ObjAIBase)owner, owner.Position, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, 1, (unit) => 
            {
                temp = true;
            });
            if(temp == true)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? unit = null;
            ForNClosestUnitsInTargetArea(owner, owner.Position, 355, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", 1, true, default, (unit) => 
            {
                SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            });
        }
    }
}
namespace Spells
{
    public class HateSpikeLineMissile : Script
    {
        public int[] effect0 = {30, 50, 70, 90, 110};
        public int[] effect1 = {30, 50, 70, 90, 110};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            BreakSpellShields(target);
            if(target is Champion)
            {
                ApplyDamage((ObjAIBase)owner, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.33f, 1, false, false, (ObjAIBase)attacker);
                SpellBuffAdd((ObjAIBase)owner, target, "EvelynnSoulEater", 4, 1, 4, default, BuffAddType.STACKS_AND_RENEWS, BuffType.SHRED, 0, true, false, false, default);
            }
            else
            {
                ApplyDamage((ObjAIBase)owner, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.33f, 1, false, false, (ObjAIBase)attacker);
            }
        }
    }
}
namespace Spells
{
    public class HateSpikeMissile : Script
    {
        public float[] effect0 = {12.5f, 20, 27.5f, 35, 42.5f};
        public int[] effect1 = {25, 40, 55, 70, 85};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int hSCounter = 0;
            //object? nextBuffVars = null;
            hSCounter = GetCastSpellTargetsHitPlusOne(default);
            if(target is Champion)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "Malice_marker", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
            if(hSCounter == 2)
            {
                ApplyDamage((ObjAIBase)owner, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.14f, default, default, default, default);
            }
            else
            {
                ApplyDamage((ObjAIBase)owner, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.28f, default, default, default, default);
            }
        }
    }
}
namespace Spells
{
    public class HateSpikeMissileTwo : Script
    {
        public float[] effect0 = {12.5f, 20, 27.5f, 35, 42.5f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            ApplyDamage((ObjAIBase)owner, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.14f, default, default, default, default);
        }
    }
}

namespace Spells
{
    public class Headbutt : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int Damage = 0;
        }
        public int[] effect0 = {85, 130, 175, 220, 265};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            float distance = 0;
            float factor = 0;
            Vector3 targetPos;
            TeamId teamID;
            Minion? other1 = null;
            FaceDirection(owner, target.Position);
            nextBuffVars.Damage = this.effect0[level];
            distance = DistanceBetweenObjects("Attacker", "Target");
            factor = Math(distance, MathOp.MO_DIVIDE, 650);
            factor = Math(factor, MathOp.MO_MAX, 0.25f);
            factor = Math(factor, MathOp.MO_MIN, 0.9f);
            PlayAnimation("Spell2", factor, owner, false, false, false);
            targetPos = GetUnitPosition(target);
            Move(owner, targetPos, 1500, 2, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, distance, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
            teamID = GetTeamID(default);
            other1 = SpawnMinion("placeholder", "TestCube", "idle.lua", owner.Position, teamID, false, true, false, true, false, true, 0, false, false, (Champion)owner, default);
            FaceDirection(other1, target.Position);
            SpellBuffAdd((ObjAIBase)owner, target, "AlistarHeadbuttMarker", 1, 1, 3, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd(other1, other1, "ExpirationTimer", 1, 1, 3, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd(other1, owner, default, 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0.25f, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "AlistarTrample", 1, 1, 3, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, false, false, false, default);
        }
    }
}




namespace Spells
{
    public class HeimerTBlueBasicAttack : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MovementSpeedMod = 0;
            public int AttackSpeedMod = 0;
        }
        public float[] effect0 = {-0.2f, -0.25f, -0.3f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float dmg = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            teamID = GetTeamID(default);
            attacker = GetChampionBySkinName("Heimerdinger", teamID);
            dmg = GetTotalAttackDamage(owner);
            if(target is BaseTurret)
            {
                dmg = Math(dmg, MathOp.MO_DIVIDE, 2);
            }
            ApplyDamage((ObjAIBase)attacker, target, dmg, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 1, false, false, (ObjAIBase)owner);
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    nextBuffVars.MovementSpeedMod = this.effect0[level];
                    nextBuffVars.AttackSpeedMod = 0;
                    SpellBuffAdd((ObjAIBase)attacker, target, "Chilled", 100, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class HeimerTGreenBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float dmg = 0;
            teamID = GetTeamID(default);
            attacker = GetChampionBySkinName("Heimerdinger", teamID);
            dmg = GetTotalAttackDamage(owner);
            if(target is BaseTurret)
            {
                dmg = Math(dmg, MathOp.MO_DIVIDE, 2);
            }
            ApplyDamage((ObjAIBase)attacker, target, dmg, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 1, false, false, (ObjAIBase)owner);
        }
    }
}
namespace Spells
{
    public class HeimerTRedBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float dmg = 0;
            teamID = GetTeamID(default);
            attacker = GetChampionBySkinName("Heimerdinger", teamID);
            dmg = GetTotalAttackDamage(owner);
            if(target is BaseTurret)
            {
                dmg = Math(dmg, MathOp.MO_DIVIDE, 2);
            }
            ApplyDamage((ObjAIBase)attacker, target, dmg, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 1, false, false, (ObjAIBase)owner);
        }
    }
}
namespace Spells
{
    public class HeimerTYellowBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float dmg = 0;
            //object? _ = null;
            teamID = GetTeamID(default);
            attacker = GetChampionBySkinName("Heimerdinger", teamID);
            dmg = GetTotalAttackDamage(owner);
            if(target is BaseTurret)
            {
                dmg = Math(dmg, MathOp.MO_DIVIDE, 2);
            }
            ApplyDamage((ObjAIBase)attacker, target, dmg, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 1, false, false, (ObjAIBase)owner);
            if(GetBuffCountFromCaster(owner, attacker, "UpgradeSlow") > 0)
            {
                SpellEffectCreate(out _, out _, "AbsoluteZero_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
            }
        }
    }
}








namespace Spells
{
    public class HextechGunblade : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? casterVFX = null;
            //object? _ = null;
            //object? caster = null;
            SpellEffectCreate(out casterVFX, out _, "hexTech_Gunblade_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "root", default, caster, default, default, false, false, false, false, false, default, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "HextechGunblade")
            {
                SetSlotSpellCooldownTimeVer2(60, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name1 == "HextechGunblade")
            {
                SetSlotSpellCooldownTimeVer2(60, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name2 == "HextechGunblade")
            {
                SetSlotSpellCooldownTimeVer2(60, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name3 == "HextechGunblade")
            {
                SetSlotSpellCooldownTimeVer2(60, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name4 == "HextechGunblade")
            {
                SetSlotSpellCooldownTimeVer2(60, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name5 == "HextechGunblade")
            {
                SetSlotSpellCooldownTimeVer2(60, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            SetSpell((ObjAIBase)owner, 7, SpellSlotType.ExtraSlots, SpellbookType.SPELLBOOK_CHAMPION, "HextechGunbladeSpell");
            targetPos = GetUnitPosition(target);
            FaceDirection(owner, targetPos);
            SpellCast((ObjAIBase)owner, target, target.Position, target.Position, false, 7, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class HextechGunbladeSpell : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            ApplyDamage((ObjAIBase)attacker, target, 300, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0, 1, true, true, (ObjAIBase)attacker);
            nextBuffVars.MoveSpeedMod = -0.5f;
            SpellBuffAdd((ObjAIBase)attacker, target, "BilgewaterCutlass", 1, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.SLOW, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class HextechMicroRockets : Script
    {
        Region? bubbleID = null;
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? temp = null;
            //object? unit = null;
            bool? result = null;
            temp = false;
            ForEachUnitInTargetAreaRandom((ObjAIBase)owner, owner.Position, 1000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, 3, (unit) => 
            {
                result = CanSeeTarget(owner, unit);
                if(result == true)
                {
                    temp = true;
                }
            });
            if(temp == true)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId casterID;
            //object? unit = null;
            bool? result = null;
            casterID = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(GetBuffCountFromCaster(owner, owner, "UpgradeBuff") > 0)
            {
                ForNClosestUnitsInTargetArea(owner, owner.Position, 1000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 5, true, default, (unit) => 
                {
                    result = CanSeeTarget(owner, unit);
                    if(result == true)
                    {
                        this.bubbleID = AddUnitPerceptionBubble(casterID, 300, unit, 1, default, default, false);
                        SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                    }
                });
            }
            else
            {
                ForNClosestUnitsInTargetArea(owner, owner.Position, 1000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 3, true, default, (unit) => 
                {
                    result = CanSeeTarget(owner, unit);
                    if(result == true)
                    {
                        this.bubbleID = AddUnitPerceptionBubble(casterID, 300, unit, 1, default, default, false);
                        SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                    }
                });
            }
        }
    }
}
namespace Spells
{
    public class HextechMicroRocketsMissile : Script
    {
        public int[] effect0 = {85, 135, 185, 235, 285};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            ApplyDamage((ObjAIBase)owner, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.55f, 1, false, false, default);
        }
    }
}


namespace Spells
{
    public class HextechSweeper : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "HextechSweeper")
            {
                SetSlotSpellCooldownTimeVer2(60, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name1 == "HextechSweeper")
            {
                SetSlotSpellCooldownTimeVer2(60, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name2 == "HextechSweeper")
            {
                SetSlotSpellCooldownTimeVer2(60, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name3 == "HextechSweeper")
            {
                SetSlotSpellCooldownTimeVer2(60, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name4 == "HextechSweeper")
            {
                SetSlotSpellCooldownTimeVer2(60, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name5 == "HextechSweeper")
            {
                SetSlotSpellCooldownTimeVer2(60, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            SelfExecute_nextBuffVars nextBuffVars = new();
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.TargetPos = targetPos;
            SpellBuffAdd((ObjAIBase)attacker, attacker, "HextechSweeperArea", 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}



namespace Spells
{
    public class HideInShadows : Script
    {
        class TargetExecute_nextBuffVars
        {
            public Particle? A = null;
            public float InitialTime = 0;
            public float TimeLastHit = 0;
            public float AttackSpeedMod = 0;
            public int StealthDuration = 0;
        }
        public float[] effect0 = {0.3f, 0.4f, 0.5f, 0.6f, 0.7f};
        public int[] effect1 = {10, 20, 30, 40, 50};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            teamID = GetTeamID(default);
            if(GetBuffCountFromCaster(owner, owner, "HideInShadows") > 0)
            {
                SpellBuffRemove(owner, "HideInShadows", (ObjAIBase)owner, default);
                SpellBuffRemove(owner, "HideInShadows_internal", (ObjAIBase)owner, default);
            }
            else
            {
                SpellEffectCreate(out nextBuffVars.A, out _, "twitch_invis_cas.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, true, default, default, default, default, default, default);
                SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0);
                nextBuffVars.InitialTime = GetTime();
                nextBuffVars.TimeLastHit = GetTime();
                nextBuffVars.AttackSpeedMod = this.effect0[level];
                nextBuffVars.StealthDuration = this.effect1[level];
                SpellBuffAdd((ObjAIBase)owner, owner, "HideInShadows_internal", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}


namespace Spells
{
    public class Highlander : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public float AttackSpeedMod = 0;
        }
        public float[] effect0 = {0.4f, 0.6f, 0.8f};
        public int[] effect1 = {6, 9, 12};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            SpellBuffRemoveType(owner, BuffType.SLOW);
            SpellBuffRemoveType(owner, BuffType.SNARE);
            nextBuffVars.MoveSpeedMod = 0.4f;
            nextBuffVars.AttackSpeedMod = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect1[level], nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.HASTE, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class HowlingGale : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? CastPos = null;
            public object? FacePos = null;
            public int LifeTime = 0;
            public object? Level = null;
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int count = 0;
            Vector3 castPos;
            Vector3 facePos;
            SelfExecute_nextBuffVars nextBuffVars = new();
            SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0);
            count = GetBuffCountFromAll(owner, "HowlingGale");
            if(count >= 1)
            {
                SpellBuffRemove(owner, "HowlingGale", (ObjAIBase)owner, 0);
            }
            else
            {
                PlayAnimation("Spell1", 0, owner, false, false, false);
                targetPos = GetCastSpellTargetPos();
                FaceDirection(owner, targetPos);
                castPos = GetPointByUnitFacingOffset(owner, 100, 0);
                facePos = GetPointByUnitFacingOffset(owner, 200, 0);
                nextBuffVars.CastPos = castPos;
                nextBuffVars.FacePos = facePos;
                nextBuffVars.LifeTime = 0;
                nextBuffVars.Level = level;
                SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                SetTargetingType(0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, TargetingType.Self, owner);
            }
        }
    }
}

namespace Spells
{
    public class HowlingGaleSpell : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int Speed = 0;
            public int Gravity = 0;
            public int IdealDistance = 0;
            public object? Position = null;
        }
        public int[] effect0 = {60, 85, 110, 135, 160};
        public int[] effect1 = {60, 85, 110, 135, 160};
        public int[] effect2 = {60, 85, 110, 135, 160};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            bool? isStealthed = null;
            Vector3 bouncePos;
            bool? canSee = null;
            nextBuffVars.Speed = 150;
            nextBuffVars.Gravity = 45;
            nextBuffVars.IdealDistance = 100;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            isStealthed = GetStealthed(target);
            if(owner.Team != target.Team)
            {
                if(isStealthed == false)
                {
                    BreakSpellShields(target);
                    ApplyDamage((ObjAIBase)owner, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                    bouncePos = GetRandomPointInAreaUnit(target, 100, 100);
                    nextBuffVars.Position = bouncePos;
                    SpellBuffAdd((ObjAIBase)owner, target, "Move", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                }
                else
                {
                    if(target is Champion)
                    {
                        BreakSpellShields(target);
                        ApplyDamage((ObjAIBase)owner, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                        bouncePos = GetRandomPointInAreaUnit(target, 100, 100);
                        nextBuffVars.Position = bouncePos;
                        SpellBuffAdd((ObjAIBase)owner, target, "Move", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                    }
                    else
                    {
                        canSee = CanSeeTarget(owner, target);
                        if(canSee == true)
                        {
                            BreakSpellShields(target);
                            ApplyDamage((ObjAIBase)owner, target, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                            bouncePos = GetRandomPointInAreaUnit(target, 100, 100);
                            nextBuffVars.Position = bouncePos;
                            SpellBuffAdd((ObjAIBase)owner, target, "Move", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                        }
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class HowlingGaleSpell1 : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int Speed = 0;
            public int Gravity = 0;
            public int IdealDistance = 0;
            public object? Position = null;
        }
        public int[] effect0 = {85, 115, 150, 185, 220};
        public int[] effect1 = {85, 115, 150, 185, 220};
        public int[] effect2 = {85, 115, 150, 185, 220};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            bool? isStealthed = null;
            Vector3 bouncePos;
            bool? canSee = null;
            nextBuffVars.Speed = 150;
            nextBuffVars.Gravity = 45;
            nextBuffVars.IdealDistance = 100;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            isStealthed = GetStealthed(target);
            if(owner.Team != target.Team)
            {
                if(isStealthed == false)
                {
                    BreakSpellShields(target);
                    ApplyDamage((ObjAIBase)owner, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                    bouncePos = GetRandomPointInAreaUnit(target, 100, 100);
                    nextBuffVars.Position = bouncePos;
                    SpellBuffAdd((ObjAIBase)owner, target, "Move", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                }
                else
                {
                    if(target is Champion)
                    {
                        BreakSpellShields(target);
                        ApplyDamage((ObjAIBase)owner, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                        bouncePos = GetRandomPointInAreaUnit(target, 100, 100);
                        nextBuffVars.Position = bouncePos;
                        SpellBuffAdd((ObjAIBase)owner, target, "Move", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                    }
                    else
                    {
                        canSee = CanSeeTarget(owner, target);
                        if(canSee == true)
                        {
                            BreakSpellShields(target);
                            ApplyDamage((ObjAIBase)owner, target, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                            bouncePos = GetRandomPointInAreaUnit(target, 100, 100);
                            nextBuffVars.Position = bouncePos;
                            SpellBuffAdd((ObjAIBase)owner, target, "Move", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                        }
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class HowlingGaleSpell2 : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int Speed = 0;
            public int Gravity = 0;
            public int IdealDistance = 0;
            public object? Position = null;
        }
        public int[] effect0 = {110, 145, 190, 235, 280};
        public int[] effect1 = {110, 145, 190, 235, 280};
        public int[] effect2 = {110, 145, 190, 235, 280};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            bool? isStealthed = null;
            Vector3 bouncePos;
            bool? canSee = null;
            nextBuffVars.Speed = 150;
            nextBuffVars.Gravity = 45;
            nextBuffVars.IdealDistance = 100;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            isStealthed = GetStealthed(target);
            if(owner.Team != target.Team)
            {
                if(isStealthed == false)
                {
                    BreakSpellShields(target);
                    ApplyDamage((ObjAIBase)owner, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                    bouncePos = GetRandomPointInAreaUnit(target, 100, 100);
                    nextBuffVars.Position = bouncePos;
                    SpellBuffAdd((ObjAIBase)owner, target, "Move", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                }
                else
                {
                    if(target is Champion)
                    {
                        BreakSpellShields(target);
                        ApplyDamage((ObjAIBase)owner, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                        bouncePos = GetRandomPointInAreaUnit(target, 100, 100);
                        nextBuffVars.Position = bouncePos;
                        SpellBuffAdd((ObjAIBase)owner, target, "Move", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                    }
                    else
                    {
                        canSee = CanSeeTarget(owner, target);
                        if(canSee == true)
                        {
                            BreakSpellShields(target);
                            ApplyDamage((ObjAIBase)owner, target, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                            bouncePos = GetRandomPointInAreaUnit(target, 100, 100);
                            nextBuffVars.Position = bouncePos;
                            SpellBuffAdd((ObjAIBase)owner, target, "Move", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                        }
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class HowlingGaleSpell3 : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int Speed = 0;
            public int Gravity = 0;
            public int IdealDistance = 0;
            public object? Position = null;
        }
        public int[] effect0 = {135, 175, 230, 285, 340};
        public int[] effect1 = {135, 175, 230, 285, 340};
        public int[] effect2 = {135, 175, 230, 285, 340};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            bool? isStealthed = null;
            Vector3 bouncePos;
            bool? canSee = null;
            nextBuffVars.Speed = 150;
            nextBuffVars.Gravity = 45;
            nextBuffVars.IdealDistance = 100;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            isStealthed = GetStealthed(target);
            if(owner.Team != target.Team)
            {
                if(isStealthed == false)
                {
                    BreakSpellShields(target);
                    ApplyDamage((ObjAIBase)owner, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                    bouncePos = GetRandomPointInAreaUnit(target, 100, 100);
                    nextBuffVars.Position = bouncePos;
                    SpellBuffAdd((ObjAIBase)owner, target, "Move", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                }
                else
                {
                    if(target is Champion)
                    {
                        BreakSpellShields(target);
                        ApplyDamage((ObjAIBase)owner, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                        bouncePos = GetRandomPointInAreaUnit(target, 100, 100);
                        nextBuffVars.Position = bouncePos;
                        SpellBuffAdd((ObjAIBase)owner, target, "Move", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                    }
                    else
                    {
                        canSee = CanSeeTarget(owner, target);
                        if(canSee == true)
                        {
                            BreakSpellShields(target);
                            ApplyDamage((ObjAIBase)owner, target, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                            bouncePos = GetRandomPointInAreaUnit(target, 100, 100);
                            nextBuffVars.Position = bouncePos;
                            SpellBuffAdd((ObjAIBase)owner, target, "Move", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                        }
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class HowlingGaleSpell4 : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? Position = null;
            public int IdealDistance = 0;
            public int Speed = 0;
            public int Gravity = 0;
        }
        public int[] effect0 = {160, 220, 280, 340, 400};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Vector3 bouncePos;
            TargetExecute_nextBuffVars nextBuffVars = new();
            attacker = SetBuffCasterUnit();
            if(attacker != target)
            {
                BreakSpellShields(target);
                ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.8f, 1, false, false, (ObjAIBase)attacker);
                bouncePos = GetRandomPointInAreaUnit(target, 100, 100);
                nextBuffVars.Position = bouncePos;
                nextBuffVars.IdealDistance = 100;
                nextBuffVars.Speed = 100;
                nextBuffVars.Gravity = 20;
                SpellBuffAdd((ObjAIBase)attacker, target, "Move", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class HungeringStrike : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float DrainPercent = 0;
            public bool? DrainedBool = null;
        }
        public float[] effect0 = {0.08f, 0.11f, 0.14f, 0.17f, 0.2f};
        public int[] effect1 = {75, 125, 175, 225, 275};
        public int[] effect2 = {75, 125, 175, 225, 275};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int warwickSkinID = 0;
            Particle? a = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            float temp1 = 0;
            float maxHealth = 0;
            float percentDamage = 0;
            int minDamage = 0;
            float damageToDeal = 0;
            Particle? ar = null;
            warwickSkinID = GetSkinID(attacker);
            if(warwickSkinID == 6)
            {
                SpellEffectCreate(out a, out _, "HungeringStrikeFire_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out a, out _, "HungeringStrike_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            }
            nextBuffVars.DrainPercent = 0.8f;
            nextBuffVars.DrainedBool = false;
            SpellBuffAdd((ObjAIBase)attacker, attacker, "GlobalDrain", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(target is Champion)
            {
                temp1 = GetMaxHealth(target);
                maxHealth = this.effect0[level];
                percentDamage = Math(temp1, MathOp.MO_MULTIPLY, maxHealth);
                minDamage = this.effect1[level];
                damageToDeal = Math(minDamage, MathOp.MO_MAX, percentDamage);
                ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 1, 1, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out ar, out _, "Meditate_eff.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, target, default, default, false, false, false, false, false, default, default);
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 1, 1, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out ar, out _, "Meditate_eff.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, target, default, default, false, false, false, false, false, default, default);
            }
        }
    }
}


namespace Spells
{
    public class HuntersCall : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float AttackSpeedVar = 0;
            public float AttackSpeedOther = 0;
        }
        public float[] effect0 = {0.4f, 0.5f, 0.6f, 0.7f, 0.8f};
        public float[] effect1 = {0.2f, 0.25f, 0.3f, 0.35f, 0.4f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            nextBuffVars.AttackSpeedVar = this.effect0[level];
            nextBuffVars.AttackSpeedOther = this.effect1[level];
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectFriends AffectHeroes ", default, true, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)owner, unit, default, 1, 1, 10, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, default, default, default);
            });
        }
    }
}
namespace Spells
{
    public class IceBlast : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MovementSpeedMod = 0;
            public float AttackSpeedMod = 0;
        }
        public float[] effect0 = {-0.2f, -0.3f, -0.4f, -0.5f, -0.6f};
        public int[] effect1 = {85, 130, 175, 225, 275};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.MovementSpeedMod = this.effect0[level];
            nextBuffVars.AttackSpeedMod = -0.25f;
            ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 1, 1, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, "IceBlast", 100, 1, 4, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
        }
    }
}



namespace Spells
{
    public class Imbue : Script
    {
        public int[] effect0 = {60, 100, 140, 180, 220};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int baseHealAmount = 0;
            float aP = 0;
            float aPMod = 0;
            float healAmount = 0;
            float temp1 = 0;
            Particle? self = null;
            //object? _ = null;
            baseHealAmount = this.effect0[level];
            aP = GetFlatMagicDamageMod(owner);
            aPMod = Math(0.6f, MathOp.MO_MULTIPLY, aP);
            healAmount = Math(baseHealAmount, MathOp.MO_ADD, aPMod);
            if(target == owner)
            {
                healAmount = Math(healAmount, MathOp.MO_MULTIPLY, 1.4f);
                IncHealth(owner, healAmount, owner);
            }
            else
            {
                IncHealth(owner, healAmount, owner);
                temp1 = GetHealthPercent(target);
                if(temp1 < 1)
                {
                    IncHealth(target, healAmount, owner);
                    ApplyAssistMarker((ObjAIBase)attacker, target, 10);
                }
                SpellEffectCreate(out self, out _, "Global_Heal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, false, false, false, false, default, default);
            }
        }
    }
}
namespace Spells
{
    public class Incinerate : Script
    {
        public int[] effect0 = {80, 130, 180, 230, 280};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int count = 0;
            //object? nextBuffVars = null;
            charVars.SpellWillStun = false;
            count = GetBuffCountFromCaster(owner, owner, "Pyromania_particle");
            if(count >= 1)
            {
                charVars.SpellWillStun = true;
                SpellBuffRemove(owner, "Pyromania_particle", (ObjAIBase)owner, 0);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, "Pyromania", 5, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int annieSkinID = 0;
            Particle? a = null;
            //object? _ = null;
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.75f, 0, false, false, (ObjAIBase)attacker);
            if(charVars.SpellWillStun == true)
            {
                ApplyStun(attacker, target, charVars.StunDuration);
            }
            teamID = GetTeamID(default);
            annieSkinID = GetSkinID(owner);
            if(annieSkinID == 5)
            {
                SpellEffectCreate(out a, out _, "Incinerate_buf_frost.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out a, out _, "Incinerate_buf.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
            }
        }
    }
}

namespace Spells
{
    public class InfectedCleaver : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? pos = null;
            SpellCast((ObjAIBase)owner, default, pos, pos, default, 0, SpellSlotType.ExtraSlots, level, true, true, false, default, default, default);
        }
    }
}
namespace Spells
{
    public class InfectedCleaverMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveMod = 0;
        }
        public int[] effect0 = {80, 130, 180, 230, 280};
        public float[] effect1 = {-0.4f, -0.4f, -0.4f, -0.4f, -0.4f};
        public float[] effect2 = {0.15f, 0.18f, 0.21f, 0.23f, 0.25f};
        public int[] effect3 = {300, 400, 500, 600, 700};
        public int[] effect4 = {25, 30, 35, 40, 45};
        public int[] effect5 = {80, 130, 180, 230, 280};
        public float[] effect6 = {-0.4f, -0.4f, -0.4f, -0.4f, -0.4f};
        public float[] effect7 = {0.15f, 0.18f, 0.21f, 0.23f, 0.25f};
        public int[] effect8 = {300, 400, 500, 600, 700};
        public int[] effect9 = {25, 30, 35, 40, 45};
        public int[] effect10 = {80, 130, 180, 230, 280};
        public float[] effect11 = {-0.4f, -0.4f, -0.4f, -0.4f, -0.4f};
        public float[] effect12 = {0.15f, 0.18f, 0.21f, 0.23f, 0.25f};
        public int[] effect13 = {300, 400, 500, 600, 700};
        public int[] effect14 = {25, 30, 35, 40, 45};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int mundoID = 0;
            bool? isStealthed = null;
            int minDamage = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            float damageMod = 0;
            int maxDamage = 0;
            float health = 0;
            float percentDamage = 0;
            float tempDamage = 0;
            float damageDealt = 0;
            //object? missileNetworkID = null;
            int healthReturn = 0;
            Particle? hit = null;
            //object? _ = null;
            bool? canSee = null;
            teamID = GetTeamID(default);
            mundoID = GetSkinID(owner);
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                minDamage = this.effect0[level];
                nextBuffVars.MoveMod = this.effect1[level];
                damageMod = this.effect2[level];
                maxDamage = this.effect3[level];
                health = GetHealth(target);
                percentDamage = Math(health, MathOp.MO_MULTIPLY, damageMod);
                tempDamage = Math(minDamage, MathOp.MO_MAX, percentDamage);
                damageDealt = Math(tempDamage, MathOp.MO_MIN, maxDamage);
                ApplyDamage((ObjAIBase)attacker, target, damageDealt, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0, 1, false, false, (ObjAIBase)attacker);
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                DestroyMissile(missileNetworkID);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                healthReturn = this.effect4[level];
                IncHealth(owner, healthReturn, owner);
                if(mundoID == 4)
                {
                    SpellEffectCreate(out hit, out _, "dr_mundo_as_mundo_infected_cleaver_tar", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out hit, out _, "dr_mundo_infected_cleaver_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                }
            }
            else
            {
                if(target is Champion)
                {
                    minDamage = this.effect5[level];
                    nextBuffVars.MoveMod = this.effect6[level];
                    damageMod = this.effect7[level];
                    maxDamage = this.effect8[level];
                    health = GetHealth(target);
                    percentDamage = Math(health, MathOp.MO_MULTIPLY, damageMod);
                    tempDamage = Math(minDamage, MathOp.MO_MAX, percentDamage);
                    damageDealt = Math(tempDamage, MathOp.MO_MIN, maxDamage);
                    ApplyDamage((ObjAIBase)attacker, target, damageDealt, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0, 1, false, false, (ObjAIBase)attacker);
                    SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                    DestroyMissile(missileNetworkID);
                    if(mundoID == 4)
                    {
                        SpellEffectCreate(out hit, out _, "dr_mundo_as_mundo_infected_cleaver_tar", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                    }
                    else
                    {
                        SpellEffectCreate(out hit, out _, "dr_mundo_infected_cleaver_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                    }
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    healthReturn = this.effect9[level];
                    IncHealth(owner, healthReturn, owner);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        minDamage = this.effect10[level];
                        nextBuffVars.MoveMod = this.effect11[level];
                        damageMod = this.effect12[level];
                        maxDamage = this.effect13[level];
                        health = GetHealth(target);
                        percentDamage = Math(health, MathOp.MO_MULTIPLY, damageMod);
                        tempDamage = Math(minDamage, MathOp.MO_MAX, percentDamage);
                        damageDealt = Math(tempDamage, MathOp.MO_MIN, maxDamage);
                        ApplyDamage((ObjAIBase)attacker, target, damageDealt, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0, 1, false, false, (ObjAIBase)attacker);
                        SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                        DestroyMissile(missileNetworkID);
                        if(mundoID == 4)
                        {
                            SpellEffectCreate(out hit, out _, "dr_mundo_as_mundo_infected_cleaver_tar", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                        }
                        else
                        {
                            SpellEffectCreate(out hit, out _, "dr_mundo_infected_cleaver_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                        }
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        healthReturn = this.effect14[level];
                        IncHealth(owner, healthReturn, owner);
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class InfectedCleaverMissileCast : Script
    {
        public int[] effect0 = {50, 60, 70, 80, 90};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            int healthCost = 0;
            float health = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            healthCost = this.effect0[level];
            health = GetHealth(owner);
            if(health <= healthCost)
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 1000)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 850, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class InfernalGuardian : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int ArmorAmount = 0;
            public int MRAmount = 0;
            public int HealthAmount = 0;
            public float FinalDamage = 0;
        }
        public int[] effect0 = {0, 400, 800, 600, 800};
        public int[] effect1 = {0, 25, 50};
        public int[] effect2 = {0, 20, 40};
        public int[] effect3 = {0, 20, 40};
        public int[] effect4 = {0, 400, 800};
        public int[] effect5 = {35, 35, 35};
        public int[] effect6 = {200, 325, 450};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            int annieSkinID = 0;
            Particle? a = null;
            //object? _ = null;
            Pet? other1 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            int damageAmount = 0;
            float aPPreMod = 0;
            float aPPostMod = 0;
            int count = 0;
            targetPos = GetCastSpellTargetPos();
            teamID = GetTeamID(default);
            annieSkinID = GetSkinID(owner);
            if(annieSkinID == 5)
            {
                if(teamID == TeamId.TEAM_BLUE)
                {
                    SpellEffectCreate(out a, out _, "infernalguardian_tar_frost.troy", default, TeamId.TEAM_BLUE, 100, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, targetPos, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out a, out _, "infernalguardian_tar_frost.troy", default, TeamId.TEAM_PURPLE, 100, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, targetPos, target, default, default, true, false, false, false, false, default, default);
                }
            }
            else
            {
                if(teamID == TeamId.TEAM_BLUE)
                {
                    SpellEffectCreate(out a, out _, "InfernalGuardian_tar.troy", default, TeamId.TEAM_BLUE, 100, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, targetPos, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out a, out _, "InfernalGuardian_tar.troy", default, TeamId.TEAM_PURPLE, 100, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, targetPos, target, default, default, true, false, false, false, false, default, default);
                }
            }
            other1 = SpawnPet("Tibbers", "AnnieTibbers", "InfernalGuardian", default, 45, targetPos, this.effect0[level], this.effect1[level]);
            nextBuffVars.ArmorAmount = this.effect2[level];
            nextBuffVars.MRAmount = this.effect3[level];
            nextBuffVars.HealthAmount = this.effect4[level];
            damageAmount = damageAmount + this.effect5[level];
            aPPreMod = GetFlatMagicDamageMod(owner);
            aPPostMod = Math(0.2f, MathOp.MO_MULTIPLY, aPPreMod);
            nextBuffVars.FinalDamage = Math(damageAmount, MathOp.MO_ADD, aPPostMod);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "InfernalGuardianTimer", 1, 1, 45, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, other1, "InfernalGuardianBurning", 1, 1, 45, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            charVars.SpellWillStun = false;
            count = GetBuffCountFromCaster(owner, owner, "Pyromania_particle");
            if(count >= 1)
            {
                charVars.SpellWillStun = true;
                SpellBuffRemove(owner, "Pyromania_particle", (ObjAIBase)owner, 0);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, "Pyromania", 5, 1, 25000, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            if(charVars.SpellWillStun == true)
            {
                ApplyStun(attacker, target, charVars.StunDuration);
            }
            ApplyDamage((ObjAIBase)attacker, target, this.effect6[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.7f, 0, false, false, (ObjAIBase)attacker);
        }
    }
}


namespace Spells
{
    public class InfiniteDuress : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float LifestealBonus = 0;
            public int HitsRemaining = 0;
            public object? DamagePerTick = null;
        }
        public int[] effect0 = {200, 300, 400};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            Vector3 pos;
            bool? canMove = null;
            int baseDamage = 0;
            float totalAD = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            float damagePerTick = 0;
            SpellBuffAdd((ObjAIBase)owner, target, "Suppression", 100, 1, 1.8f, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SUPPRESSION, 0, true, false, false, default);
            pos = GetRandomPointInAreaUnit(target, 150, 150);
            TeleportToPosition(owner, pos);
            FaceDirection(attacker, target.Position);
            canMove = GetCanMove(target);
            if(canMove == false)
            {
                nextBuffVars.LifestealBonus = 0.3f;
                nextBuffVars.HitsRemaining = 5;
                SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                baseDamage = this.effect0[level];
                totalAD = GetTotalAttackDamage(owner);
                bonusDamage = Math(1.667f, MathOp.MO_MULTIPLY, totalAD);
                totalDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                damagePerTick = Math(totalDamage, MathOp.MO_DIVIDE, nextBuffVars.HitsRemaining);
                nextBuffVars.DamagePerTick = damagePerTick;
                SpellBuffAdd((ObjAIBase)owner, target, "InfiniteDuressChannel", 1, 1, 1.8f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "InfiniteDuressSound", 1, 1, 1.8f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                SpellCast((ObjAIBase)attacker, target, target.Position, target.Position, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, true, false, default);
            }
            else
            {
                IssueOrder(owner, OrderType.AttackTo, default, target);
            }
        }
    }
}
namespace Spells
{
    public class InfiniteDuressChannel : Script
    {
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(attacker, "InfiniteDuressSound", (ObjAIBase)attacker, 0);
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(attacker, "InfiniteDuressChannel", (ObjAIBase)attacker, 0);
            SpellBuffRemove(attacker, "InfiniteDuressSound", (ObjAIBase)attacker, 0);
            SpellBuffRemove(target, "Suppression", (ObjAIBase)attacker, 0);
        }
    }
}




namespace Spells
{
    public class Infuse : Script
    {
        public int[] effect0 = {25, 50, 75, 100, 125};
        public int[] effect1 = {25, 50, 75, 100, 125};
        public int[] effect2 = {50, 100, 150, 200, 250};
        public float[] effect3 = {1.5f, 1.75f, 2, 2.25f, 2.5f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Particle? infuse = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            if(target.Team == owner.Team)
            {
                ApplyAssistMarker((ObjAIBase)owner, target, 10);
                if(target != owner)
                {
                    IncPAR(target, this.effect0[level]);
                }
                IncPAR(owner, this.effect1[level]);
                SpellEffectCreate(out infuse, out _, "soraka_infuse_ally_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                if(target != owner)
                {
                    SpellEffectCreate(out infuse, out _, "soraka_infuse_ally_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, true, default, default, false, false, default, default);
                }
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                ApplySilence(attacker, target, this.effect3[level]);
                SpellEffectCreate(out infuse, out _, "soraka_infuse_enemy_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
            }
        }
    }
}
namespace Spells
{
    public class InnateSpellHeal : Script
    {
        class ChannelingStart_nextBuffVars
        {
            public object? TickWorth = null;
            public object? TickWorthMana = null;
        }
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float maxHP = 0;
            float maxMP = 0;
            float tickWorth = 0;
            float tickWorthMana = 0;
            ChannelingStart_nextBuffVars nextBuffVars = new();
            maxHP = GetMaxHealth(owner);
            maxMP = GetMaxPAR(owner);
            tickWorth = Math(maxHP, MathOp.MO_DIVIDE, 21);
            tickWorthMana = Math(maxMP, MathOp.MO_DIVIDE, 6);
            nextBuffVars.TickWorth = tickWorth;
            nextBuffVars.TickWorthMana = tickWorthMana;
            SpellBuffAdd((ObjAIBase)owner, owner, "InnateSpellHealCooldown", 1, 1, 20, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 13, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.HEAL, 0, true, false, false, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "Meditate", (ObjAIBase)owner, default);
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "InnateSpellHeal", (ObjAIBase)owner, default);
        }
    }
}





namespace Spells
{
    public class InsanityPotion : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int Stats = 0;
        }
        public int[] effect0 = {35, 50, 65};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            nextBuffVars.Stats = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 25, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellEffectCreate(out _, out _, "insanitypotion_buf.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "head", default, target, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(out _, out _, "insanitypotion_steam.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "bottletip", default, target, default, default, false, false, false, false, false, default, default);
        }
    }
}

namespace Spells
{
    public class Instagate : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? GateParticle = null;
            public Vector3 CurrentPos;
        }
        Particle? particle = null;
        Particle? particle2 = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            //object? _ = null;
            //object? gateParticle = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            teamOfOwner = GetTeamID(default);
            if(teamOfOwner == TeamId.TEAM_BLUE)
            {
                SpellEffectCreate(out this.particle, out _, "CardmasterTeleport_red.troy", default, TeamId.TEAM_BLUE, 200, 0, TeamId.TEAM_PURPLE, default, true, owner, default, default, target, default, default, false, default, default, default, default, default, default);
                SpellEffectCreate(out this.particle, out _, "GateMarker_red.troy", default, TeamId.TEAM_BLUE, 200, 0, TeamId.TEAM_PURPLE, default, true, default, default, targetPos, target, default, default, false, default, default, default, default, default, default);
                SpellEffectCreate(out this.particle2, out _, "GateMarker_green.troy", default, TeamId.TEAM_BLUE, 200, 0, TeamId.TEAM_BLUE, default, true, default, default, targetPos, target, default, default, false, default, default, default, default, default, default);
                SpellEffectCreate(out this.particle2, out _, "CardmasterTeleport_green.troy", default, TeamId.TEAM_BLUE, 200, 0, TeamId.TEAM_BLUE, default, true, owner, default, default, target, default, default, false, default, default, default, default, default, default);
            }
            else
            {
                SpellEffectCreate(out this.particle, out _, "CardmasterTeleport_red.troy", default, TeamId.TEAM_PURPLE, 200, 0, TeamId.TEAM_BLUE, default, true, owner, default, default, target, default, default, false, default, default, default, default, default, default);
                SpellEffectCreate(out this.particle, out _, "GateMarker_red.troy", default, TeamId.TEAM_PURPLE, 200, 0, TeamId.TEAM_BLUE, default, true, default, default, targetPos, target, default, default, false, default, default, default, default, default, default);
                SpellEffectCreate(out this.particle2, out _, "GateMarker_green.troy", default, TeamId.TEAM_PURPLE, 200, 0, TeamId.TEAM_PURPLE, default, true, default, default, targetPos, target, default, default, false, default, default, default, default, default, default);
                SpellEffectCreate(out this.particle2, out _, "CardmasterTeleport_green.troy", default, TeamId.TEAM_PURPLE, 200, 0, TeamId.TEAM_PURPLE, default, true, owner, default, default, target, default, default, false, default, default, default, default, default, default);
            }
            nextBuffVars.GateParticle = gateParticle;
            nextBuffVars.CurrentPos = GetUnitPosition(owner);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, default, default, default, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? castPosition = null;
            //object? _ = null;
            TeleportToPosition(owner, castPosition);
            SpellEffectCreate(out _, out _, "CardmasterTeleportArrive.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
            SpellBuffRemove(owner, "Gate", (ObjAIBase)owner, default);
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "Gate", (ObjAIBase)owner, default);
            SpellBuffRemove(owner, "Instagate", (ObjAIBase)owner, default);
        }
    }
}









namespace Spells
{
    public class IreliaEquilibriumStrike : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public int[] effect0 = {80, 130, 180, 230, 280};
        public float[] effect1 = {1, 1.25f, 1.5f, 1.75f, 2};
        public float[] effect2 = {1, 1.25f, 1.5f, 1.75f, 2};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float targetPercent = 0;
            float selfPercent = 0;
            Particle? a = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            targetPercent = GetHealthPercent(target);
            selfPercent = GetHealthPercent(attacker);
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
            if(targetPercent >= selfPercent)
            {
                ApplyStun(attacker, target, this.effect1[level]);
                SpellEffectCreate(out a, out _, "irelia_equilibriumStrike_tar_01.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
            }
            else
            {
                nextBuffVars.MoveSpeedMod = -0.6f;
                SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, this.effect2[level], nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                SpellEffectCreate(out a, out _, "irelia_equilibriumStrike_tar_02.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
            }
        }
    }
}
namespace Spells
{
    public class IreliaGatotsu : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public object? Distance = null;
            public object? DashSpeed = null;
            public float DamageVar = 0;
        }
        public int[] effect0 = {20, 50, 80, 110, 140};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            else if(canCast == false)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? smokeBomb = null;
            //object? _ = null;
            Vector3 ownerPos;
            Particle? p3 = null;
            float moveSpeed = 0;
            float dashSpeed = 0;
            float distance = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            int damageVar = 0;
            float baseDamage = 0;
            SpellEffectCreate(out smokeBomb, out _, "irelia_gotasu_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            ownerPos = GetUnitPosition(owner);
            SpellEffectCreate(out p3, out _, "irelia_gotasu_cast_01.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(out p3, out _, "irelia_gotasu_cast_02.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, false, false, false, false, default, default);
            targetPos = GetCastSpellTargetPos();
            moveSpeed = GetMovementSpeed(owner);
            dashSpeed = Math(moveSpeed, MathOp.MO_ADD, 1400);
            distance = DistanceBetweenObjects("Owner", "Target");
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.Distance = distance;
            nextBuffVars.DashSpeed = dashSpeed;
            damageVar = this.effect0[level];
            baseDamage = GetBaseAttackDamage(owner);
            nextBuffVars.DamageVar = Math(damageVar, MathOp.MO_ADD, baseDamage);
            SpellBuffAdd((ObjAIBase)target, owner, "IreliaGatotsuDash", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0.25f, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class IreliaHitenStyle : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "IreliaHitenStyle", (ObjAIBase)owner, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, owner, "IreliaHitenStyleCharged", 1, 1, 6, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
        }
    }
}



namespace Spells
{
    public class IreliaTranscendentBlades : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int NewCd = 0;
            public int Blades = 0;
        }
        public int[] effect0 = {60, 50, 40, 0, 0};
        public int[] effect1 = {10, 10, 10};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            int count = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "IreliaTranscendentBladesSpell") > 0)
            {
                level = GetCastSpellLevelPlusOne(default);
                targetPos = GetCastSpellTargetPos();
                ownerPos = GetUnitPosition(owner);
                distance = DistanceBetweenPoints(ownerPos, targetPos);
                count = GetBuffCountFromAll(owner, "IreliaTranscendentBladesSpell");
                SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                SetSlotSpellCooldownTime((ObjAIBase)owner, 3, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0.5f);
                SpellBuffRemove(owner, "IreliaTranscendentBladesSpell", (ObjAIBase)owner, default);
                if(count <= 1)
                {
                    SpellBuffRemove(owner, "IreliaTranscendentBlades", (ObjAIBase)owner, default);
                }
            }
            else
            {
                nextBuffVars.NewCd = this.effect0[level];
                nextBuffVars.Blades = 4;
                SpellBuffAdd((ObjAIBase)owner, owner, "IreliaTranscendentBlades", 1, 1, this.effect1[level], nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "IreliaTranscendentBladesSpell", 4, 4, 10, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                PlayAnimation("Spell4", 1.5f, owner, false, true, true);
                SetSlotSpellCooldownTime((ObjAIBase)owner, 3, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0.25f);
            }
        }
    }
}
namespace Spells
{
    public class IreliaTranscendentBladesSpell : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float DrainPercent = 0;
        }
        public int[] effect0 = {80, 120, 160};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int baseDamage = 0;
            float physPreMod = 0;
            float physPostMod = 0;
            float aPPreMod = 0;
            float aPPostMod = 0;
            TeamId ireliaTeamID;
            Particle? a = null;
            //object? _ = null;
            float damageToDeal1 = 0;
            float damageToDeal2 = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            BreakSpellShields(target);
            baseDamage = this.effect0[level];
            physPreMod = GetFlatPhysicalDamageMod(owner);
            physPostMod = Math(0.6f, MathOp.MO_MULTIPLY, physPreMod);
            aPPreMod = GetFlatMagicDamageMod(owner);
            aPPostMod = Math(0.5f, MathOp.MO_MULTIPLY, aPPreMod);
            ireliaTeamID = GetTeamID(default);
            SpellEffectCreate(out a, out _, "irelia_ult_tar.troy", default, ireliaTeamID, 10, 0, TeamId.TEAM_UNKNOWN, target, false, target, "root", default, target, default, default, true, default, default, false, false, default, default);
            damageToDeal1 = Math(physPostMod, MathOp.MO_ADD, baseDamage);
            damageToDeal2 = Math(aPPostMod, MathOp.MO_ADD, damageToDeal1);
            if(target is Champion)
            {
                nextBuffVars.DrainPercent = 0.25f;
            }
            else
            {
                nextBuffVars.DrainPercent = 0.1f;
            }
            SpellBuffAdd((ObjAIBase)owner, owner, "GlobalDrain", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            ApplyDamage((ObjAIBase)attacker, target, damageToDeal2, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
        }
    }
}



namespace Spells
{
    public class ItemPlacementMissile : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? missileNetworkID = null;
            //object? _ = null;
            if(GetBuffCountFromCaster(target, owner, "ItemPlacementMissile") > 0)
            {
                DestroyMissile(missileNetworkID);
            }
            SpellEffectCreate(out _, out _, "ItemPlacement_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, default, default, default, default, default, default);
        }
    }
}

namespace Spells
{
    public class JackInTheBox : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public int BonusHealth = 0;
            public float FearDuration = 0;
        }
        public int[] effect0 = {0, 100, 200, 300, 400};
        public float[] effect1 = {0.5f, 0.75f, 1, 1.25f, 1.5f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.BonusHealth = this.effect0[level];
            nextBuffVars.FearDuration = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, owner, "JackInTheBoxInternal", 1, 1, 0.1f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}







namespace Spells
{
    public class JarvanIVCataclysm : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int count = 0;
            //object? nextBuffVars = null;
            float distance = 0;
            count = GetBuffCountFromAll(owner, "JarvanIVCataclysm");
            if(count >= 1)
            {
                SpellBuffClear(owner, "JarvanIVCataclysm");
                SpellBuffClear(owner, "JarvanIVCataclysmAttack");
            }
            else
            {
                SpellBuffAdd((ObjAIBase)target, owner, "JarvanIVCataclysm", 1, 1, 3.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "UnstoppableForceMarker", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, target, "JarvanIVCataclysmVisibility", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "JarvanIVCataclysmSound", 1, 1, 0.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, true, default);
                distance = DistanceBetweenObjects("Attacker", "Target");
                targetPos = GetUnitPosition(target);
                Move(owner, targetPos, 2000, 150, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, 700, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
                SetSlotSpellCooldownTimeVer2(1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
        }
    }
}
namespace Spells
{
    public class JarvanIVCataclysmAttack : Script
    {
        public int[] effect0 = {200, 325, 450};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int baseDamage = 0;
            float physPreMod = 0;
            float physPostMod = 0;
            float damageToDeal = 0;
            //object? nextBuffVars = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            baseDamage = this.effect0[level];
            physPreMod = GetFlatPhysicalDamageMod(owner);
            physPostMod = Math(1.5f, MathOp.MO_MULTIPLY, physPreMod);
            damageToDeal = Math(physPostMod, MathOp.MO_ADD, baseDamage);
            ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, true, true, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "JarvanIVCataclysmCheck", 1, 1, 3.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffRemove(owner, "UnstoppableForceMarker", (ObjAIBase)owner, 0);
        }
    }
}




namespace Spells
{
    public class JarvanIVDemacianStandard : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? Level = null;
            public object? DamageToDeal = null;
        }
        public int[] effect0 = {60, 105, 150, 195, 240};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Particle? a = null;
            //object? _ = null;
            Minion? other3 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            int baseDamage = 0;
            float abilityPower = 0;
            float abilityPowerPostMod = 0;
            float damageToDeal = 0;
            teamOfOwner = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            SpellEffectCreate(out a, out _, "JarvanDemacianStandard_mis.troy", default, TeamId.TEAM_BLUE, 100, 0, TeamId.TEAM_UNKNOWN, attacker, false, attacker, "R_Hand", default, attacker, default, default, true, default, default, false, false, default, default);
            other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", targetPos, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, false, 0, false, false, (Champion)owner, default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.Level = level;
            baseDamage = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(owner);
            abilityPowerPostMod = Math(0.8f, MathOp.MO_MULTIPLY, abilityPower);
            damageToDeal = Math(abilityPowerPostMod, MathOp.MO_ADD, baseDamage);
            nextBuffVars.DamageToDeal = damageToDeal;
            SpellBuffAdd((ObjAIBase)attacker, other3, "JarvanIVDemacianStandardDelay", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            FaceDirection(owner, targetPos);
            PlayAnimation("Spell3", 0.75f, owner, false, true, false);
        }
    }
}




namespace Spells
{
    public class JarvanIVDragonStrike : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float ArmorDebuff = 0;
        }
        public int[] effect0 = {70, 115, 160, 205, 250};
        public float[] effect1 = {-0.1f, -0.14f, -0.18f, -0.22f, -0.26f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 damagePoint;
            TeamId teamID;
            float physPreMod = 0;
            int bonusDamage = 0;
            float dtD = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            bool? isStealthed = null;
            bool? canSee = null;
            Particle? asdf = null;
            //object? _ = null;
            targetPos = GetCastSpellTargetPos();
            FaceDirection(owner, targetPos);
            damagePoint = GetPointByUnitFacingOffset(owner, 425, 0);
            teamID = GetTeamID(default);
            physPreMod = GetFlatPhysicalDamageMod(owner);
            bonusDamage = this.effect0[level];
            physPreMod = Math(physPreMod, MathOp.MO_MULTIPLY, 1.2f);
            dtD = Math(bonusDamage, MathOp.MO_ADD, physPreMod);
            nextBuffVars.ArmorDebuff = this.effect1[level];
            ForEachUnitInTargetRectangle(owner, damagePoint, 68, 360, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", true, default, (unit) => 
            {
                isStealthed = GetStealthed(unit);
                if(isStealthed == false)
                {
                    BreakSpellShields(unit);
                    ApplyDamage((ObjAIBase)attacker, unit, dtD, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, true, (ObjAIBase)attacker);
                    SpellBuffAdd((ObjAIBase)attacker, unit, "JarvanIVDragonStrikeDebuff", 100, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SHRED, 0, true, false, false, default);
                }
                else
                {
                    if(unit is Champion)
                    {
                        BreakSpellShields(unit);
                        ApplyDamage((ObjAIBase)attacker, unit, dtD, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, true, (ObjAIBase)attacker);
                        SpellBuffAdd((ObjAIBase)attacker, unit, "JarvanIVDragonStrikeDebuff", 100, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SHRED, 0, true, false, false, default);
                    }
                    else
                    {
                        canSee = CanSeeTarget(owner, unit);
                        if(canSee == true)
                        {
                            BreakSpellShields(unit);
                            ApplyDamage((ObjAIBase)attacker, unit, dtD, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, true, (ObjAIBase)attacker);
                            SpellBuffAdd((ObjAIBase)attacker, unit, "JarvanIVDragonStrikeDebuff", 100, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SHRED, 0, true, false, false, default);
                        }
                    }
                }
            });
            ForEachUnitInTargetRectangle(owner, damagePoint, 150, 425, "AffectEnemies AffectFriends AffectMinions NotAffectSelf ", true, default, (unit) => 
            {
                if(GetBuffCountFromCaster(unit, attacker, "JarvanIVDemacianStandard") > 0)
                {
                    SpellBuffAdd(unit, owner, "JarvanIVDragonStrikePH", 1, 1, 0.75f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, true, default);
                    SpellBuffAdd(unit, unit, "JarvanIVDragonStrikeSound", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, true, default);
                    SpellEffectCreate(out asdf, out _, "caitlyn_peaceMaker_tar_02.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, "spine", default, unit, default, default, true, false, false, false, false, default, default);
                }
            });
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}





namespace Spells
{
    public class JarvanIVGoldenAegis : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? Shield = null;
            public float MoveSpeedMod = 0;
            public int AttackSpeedMod = 0;
        }
        public int[] effect0 = {50, 90, 130, 170, 210};
        public int[] effect1 = {20, 25, 30, 35, 40};
        public float[] effect2 = {-0.15f, -0.2f, -0.25f, -0.3f, -0.35f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int shieldAmount = 0;
            int shieldBonus = 0;
            float bonusShield = 0;
            float shield = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            Particle? a = null;
            //object? _ = null;
            //object? unit = null;
            Particle? asdf = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            shieldAmount = this.effect0[level];
            shieldBonus = this.effect1[level];
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 500, "AffectEnemies AffectHeroes ", default, true, (unit) => 
            {
                bonusShield = Math(bonusShield, MathOp.MO_ADD, shieldBonus);
            });
            shield = Math(shieldAmount, MathOp.MO_ADD, bonusShield);
            nextBuffVars.Shield = shield;
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            nextBuffVars.MoveSpeedMod = this.effect2[level];
            nextBuffVars.AttackSpeedMod = 0;
            SpellEffectCreate(out a, out _, "JarvanGoldenAegis_nova.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, false, default, default, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                SpellBuffAdd((ObjAIBase)attacker, unit, "Slow", 100, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                SpellEffectCreate(out asdf, out _, "JarvanGoldenAegis_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, default, false, unit, "spine", default, unit, default, default, true, default, default, false, default, default, default);
            });
        }
    }
}

namespace Spells
{
    public class JarvanIVMartialCadenceAttack : Script
    {
        public float[] effect0 = {0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.08f, 0.08f, 0.08f, 0.08f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float healthPerc = 0;
            float targetHealth = 0;
            float healthDamage = 0;
            float baseDamage = 0;
            //object? nextBuffVars = null;
            Particle? c = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            level = GetLevel(owner);
            healthPerc = this.effect0[level];
            targetHealth = GetHealth(target);
            healthDamage = Math(targetHealth, MathOp.MO_MULTIPLY, healthPerc);
            healthDamage = Math(400, MathOp.MO_MIN, healthDamage);
            healthDamage = Math(2, MathOp.MO_MAX, healthDamage);
            ApplyDamage((ObjAIBase)attacker, target, healthDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 0, false, false, (ObjAIBase)attacker);
            baseDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, "JarvanIVMartialCadenceCheck", 1, 1, 6, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellEffectCreate(out c, out _, "jarvincritattack_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            RemoveOverrideAutoAttack(owner, false);
        }
    }
}


namespace Spells
{
    public class JavelinToss : Script
    {
        public int[] effect0 = {55, 95, 140, 185, 230};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int baseDamage = 0;
            float aP = 0;
            float aPDamage = 0;
            float startingDamage = 0;
            baseDamage = this.effect0[level];
            aP = GetFlatMagicDamageMod(owner);
            aPDamage = Math(aP, MathOp.MO_MULTIPLY, 0.65f);
            startingDamage = Math(baseDamage, MathOp.MO_ADD, aPDamage);
            charVars.StartingDamage = startingDamage;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            bool? isStealthed = null;
            TeamId teamID;
            Particle? asffa = null;
            //object? _ = null;
            float distance = 0;
            float multiplicant = 0;
            float finalDamage = 0;
            //object? missileNetworkID = null;
            bool? canSee = null;
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                teamID = GetTeamID(default);
                SpellEffectCreate(out asffa, out _, "nidalee_javelinToss_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                BreakSpellShields(target);
                distance = DistanceBetweenObjects("Target", "Owner");
                multiplicant = Math(distance, MathOp.MO_DIVIDE, 1000);
                multiplicant = Math(multiplicant, MathOp.MO_ADD, 1);
                multiplicant = Math(multiplicant, MathOp.MO_MIN, 2.5f);
                finalDamage = Math(multiplicant, MathOp.MO_MULTIPLY, charVars.StartingDamage);
                ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 1, false, false, (ObjAIBase)attacker);
                DestroyMissile(missileNetworkID);
            }
            else
            {
                if(target is Champion)
                {
                    teamID = GetTeamID(default);
                    SpellEffectCreate(out asffa, out _, "nidalee_javelinToss_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                    BreakSpellShields(target);
                    distance = DistanceBetweenObjects("Target", "Owner");
                    multiplicant = Math(distance, MathOp.MO_DIVIDE, 1000);
                    multiplicant = Math(multiplicant, MathOp.MO_ADD, 1);
                    multiplicant = Math(multiplicant, MathOp.MO_MIN, 2.5f);
                    finalDamage = Math(multiplicant, MathOp.MO_MULTIPLY, charVars.StartingDamage);
                    ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 1, false, false, (ObjAIBase)attacker);
                    DestroyMissile(missileNetworkID);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        teamID = GetTeamID(default);
                        SpellEffectCreate(out asffa, out _, "nidalee_javelinToss_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                        BreakSpellShields(target);
                        distance = DistanceBetweenObjects("Target", "Owner");
                        multiplicant = Math(distance, MathOp.MO_DIVIDE, 1000);
                        multiplicant = Math(multiplicant, MathOp.MO_ADD, 1);
                        multiplicant = Math(multiplicant, MathOp.MO_MIN, 2.5f);
                        finalDamage = Math(multiplicant, MathOp.MO_MULTIPLY, charVars.StartingDamage);
                        ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 1, false, false, (ObjAIBase)attacker);
                        DestroyMissile(missileNetworkID);
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class JaxCounterStrike : Script
    {
        public int[] effect0 = {0, 0, 0, 0, 0};
        public float[] effect1 = {1.5f, 1.5f, 1.5f, 1.5f, 1.5f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            PlayAnimation("Spell3", 0, owner, false, false, false);
            charVars.NumCounter = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect1[level], default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class JaxCounterStrikeAttack : Script
    {
        public int[] effect0 = {40, 70, 100, 130, 160};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? addPart = null;
            //object? _ = null;
            PlayAnimation("Spell3B", 0, attacker, false, false, false);
            SpellEffectCreate(out addPart, out _, "Counterstrike_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int baseDmg = 0;
            float totalAD = 0;
            float baseAD = 0;
            float bonusAD = 0;
            float damage = 0;
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            baseDmg = this.effect0[level];
            totalAD = GetTotalAttackDamage(owner);
            baseAD = GetBaseAttackDamage(owner);
            bonusAD = Math(totalAD, MathOp.MO_SUBTRACT, baseAD);
            bonusAD = Math(bonusAD, MathOp.MO_MULTIPLY, 0.8f);
            damage = Math(bonusAD, MathOp.MO_ADD, baseDmg);
            damage = Math(charVars.NumCounter, MathOp.MO_ADD, damage);
            ApplyDamage((ObjAIBase)attacker, target, damage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
            ApplyStun(attacker, target, 1);
        }
    }
}
namespace Spells
{
    public class JaxEmpower : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DamagePerStack = 0;
        }
        public int[] effect0 = {25, 35, 45, 55, 65};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.DamagePerStack = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 8, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class JaxEmpowerTwo : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float SpellCooldown = 0;
            public int BonusDamage = 0;
        }
        public float[] effect0 = {9, 7.5f, 6, 4.5f, 3};
        public int[] effect1 = {20, 50, 80, 110, 140};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpellCooldown = this.effect0[level];
            nextBuffVars.BonusDamage = this.effect1[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "JaxEmpowerTwo", 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SetSlotSpellCooldownTime((ObjAIBase)owner, 1, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0);
        }
    }
}
namespace Spells
{
    public class JaxLeapStrike : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            float distance = 0;
            int gravityVar = 0;
            int speedVar = 0;
            Vector3 targetPos;
            float factor = 0;
            SpellBuffAdd((ObjAIBase)target, attacker, default, 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            distance = DistanceBetweenObjects("Attacker", "Target");
            if(distance >= 600)
            {
                gravityVar = 100;
                speedVar = 1450;
            }
            else if(distance >= 500)
            {
                gravityVar = 110;
                speedVar = 1300;
            }
            else if(distance >= 400)
            {
                gravityVar = 120;
                speedVar = 1150;
            }
            else if(distance >= 300)
            {
                gravityVar = 130;
                speedVar = 1100;
            }
            else if(distance >= 200)
            {
                gravityVar = 150;
                speedVar = 1000;
            }
            else if(distance >= 100)
            {
                gravityVar = 300;
                speedVar = 900;
            }
            else if(distance >= 0)
            {
                gravityVar = 1000;
                speedVar = 900;
            }
            targetPos = GetUnitPosition(target);
            Move(attacker, targetPos, speedVar, gravityVar, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, distance, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
            factor = Math(distance, MathOp.MO_DIVIDE, 700);
            factor = Math(factor, MathOp.MO_MAX, 0.25f);
            factor = Math(factor, MathOp.MO_MIN, 0.9f);
            PlayAnimation("Spell2", factor, attacker, false, false, false);
            if(owner.Team == target.Team)
            {
                if(GetBuffCountFromCaster(target, default, "SharedWardBuff") > 0)
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "Destealth", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class JaxLeapStrikeAttack : Script
    {
        public int[] effect0 = {70, 110, 150, 190, 230};
        public int[] effect1 = {40, 85, 130, 175, 220};
        Particle? particle = null;
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int bonusDamage = 0;
            float totalAD = 0;
            float baseAD = 0;
            float bonusAD = 0;
            float attackDamage = 0;
            float damageToDeal = 0;
            float baseAP = 0;
            float aPDamage = 0;
            //object? _ = null;
            //object? teamID = null;
            BreakSpellShields(target);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            bonusDamage = this.effect0[level];
            totalAD = GetTotalAttackDamage(owner);
            baseAD = GetBaseAttackDamage(owner);
            bonusAD = Math(totalAD, MathOp.MO_SUBTRACT, baseAD);
            attackDamage = Math(bonusAD, MathOp.MO_MULTIPLY, 1);
            damageToDeal = Math(bonusDamage, MathOp.MO_ADD, bonusAD);
            baseAP = GetFlatMagicDamageMod(owner);
            aPDamage = Math(baseAP, MathOp.MO_MULTIPLY, 0.6f);
            damageToDeal = Math(damageToDeal, MathOp.MO_ADD, aPDamage);
            ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, false, (ObjAIBase)attacker);
            if(GetBuffCountFromCaster(owner, owner, "JaxEmpowerTwo") > 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                BreakSpellShields(target);
                ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out this.particle, out _, "EmpowerTwoHit_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                SpellBuffRemove(owner, "JaxEmpowerTwo", (ObjAIBase)owner, 0);
            }
            if(target is Champion)
            {
                if(owner.Team != target.Team)
                {
                    IssueOrder(owner, OrderType.AttackTo, default, target);
                }
            }
        }
    }
}

namespace Spells
{
    public class JaxRelentlessAssault : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float SpeedBoost = 0;
        }
        public float[] effect0 = {0.3f, 0.35f, 0.4f};
        public int[] effect1 = {6, 6, 6};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            int duration = 0;
            nextBuffVars.SpeedBoost = this.effect0[level];
            duration = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, owner, "JaxRelentlessAssaultSpeed", 1, 1, duration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}



namespace Spells
{
    public class JaxRelentlessAttack : Script
    {
        public int[] effect0 = {100, 160, 220};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? hitResult = null;
            float baseAttackDamage = 0;
            Particle? a = null;
            //object? _ = null;
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    baseAttackDamage = GetBaseAttackDamage(owner);
                    ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
                    if(target is not BaseTurret)
                    {
                        if(target is ObjAIBase)
                        {
                            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            ApplyDamage((ObjAIBase)owner, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.7f, 1, false, false, (ObjAIBase)attacker);
                            SpellBuffRemove(owner, "JaxRelentlessAttack", (ObjAIBase)owner, 0);
                            SpellEffectCreate(out a, out _, "RelentlessAssault_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                        }
                    }
                }
            }
        }
    }
}

namespace Spells
{
    public class JudicatorDivineBlessing : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {0.15f, 0.17f, 0.19f, 0.21f, 0.23f};
        public int[] effect1 = {45, 85, 125, 165, 205};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            float abilityPower = 0;
            int healLevel = 0;
            float healAmount = 0;
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 2.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            abilityPower = GetFlatMagicDamageMod(owner);
            healLevel = this.effect1[level];
            abilityPower = Math(abilityPower, MathOp.MO_MULTIPLY, 0.35f);
            healAmount = Math(healLevel, MathOp.MO_ADD, abilityPower);
            IncHealth(target, healAmount, owner);
            ApplyAssistMarker((ObjAIBase)attacker, target, 10);
            SpellBuffAdd((ObjAIBase)owner, owner, "KayleDivineBlessingAnim", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class JudicatorIntervention : Script
    {
        public float[] effect0 = {2, 2.5f, 3};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "KayleInterventionAnim", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, target, default, 1, 1, this.effect0[level], default, BuffAddType.RENEW_EXISTING, BuffType.INVULNERABILITY, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class JudicatorReckoning : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {-0.35f, -0.35f, -0.35f, -0.35f, -0.35f};
        public int[] effect1 = {60, 110, 160, 210, 260};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            float aP = 0;
            float baseAD = 0;
            float totalAD = 0;
            float bonusAD = 0;
            float finalDamage = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            aP = GetFlatMagicDamageMod(owner);
            baseAD = GetBaseAttackDamage(owner);
            totalAD = GetTotalAttackDamage(owner);
            bonusAD = Math(totalAD, MathOp.MO_SUBTRACT, baseAD);
            bonusAD = Math(1, MathOp.MO_MULTIPLY, bonusAD);
            aP = Math(1, MathOp.MO_MULTIPLY, aP);
            finalDamage = Math(aP, MathOp.MO_ADD, bonusAD);
            ApplyDamage((ObjAIBase)attacker, target, finalDamage + this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, default, 100, 1, 4, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class JudicatorRighteousFury : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int AttackRangeIncrease = 0;
        }
        public int[] effect0 = {400, 400, 400, 400, 400};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.AttackRangeIncrease = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, owner, default, 1, 1, 10, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "KayleRighteousFuryAnim", 1, 1, 1, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class JudicatorRighteousFuryAttack : Script
    {
        public float[] effect0 = {0.2f, 0.25f, 0.3f, 0.35f, 0.4f};
        public int[] effect1 = {20, 30, 40, 50, 60};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float tAD = 0;
            float damagePercent = 0;
            float cleaveDamage = 0;
            float baseDamage = 0;
            float abilityPower = 0;
            int bonusDamage = 0;
            float damageToApply = 0;
            float damageToApplySlash = 0;
            //object? unit = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            tAD = GetTotalAttackDamage(owner);
            damagePercent = this.effect0[level];
            cleaveDamage = Math(tAD, MathOp.MO_MULTIPLY, damagePercent);
            baseDamage = GetBaseAttackDamage(owner);
            abilityPower = GetFlatMagicDamageMod(owner);
            bonusDamage = this.effect1[level];
            abilityPower = Math(0.2f, MathOp.MO_MULTIPLY, abilityPower);
            damageToApply = Math(bonusDamage, MathOp.MO_ADD, abilityPower);
            damageToApplySlash = Math(cleaveDamage, MathOp.MO_ADD, damageToApply);
            ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectTurrets ", default, true, (unit) => 
            {
                if(target is not BaseTurret)
                {
                    if(unit != target)
                    {
                        ApplyDamage((ObjAIBase)owner, unit, damageToApplySlash, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, false, false, (ObjAIBase)attacker);
                    }
                    else
                    {
                        ApplyDamage((ObjAIBase)owner, unit, damageToApply, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, false, false, (ObjAIBase)attacker);
                    }
                }
            });
        }
    }
}

namespace Spells
{
    public class KarmaChakra : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int count = 0;
            count = GetBuffCountFromAll(owner, "KarmaChakraCharge");
            if(count > 1)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int count = 0;
            //object? nextBuffVars = null;
            float remainingDuration = 0;
            count = GetBuffCountFromAll(owner, "KarmaChakraCharge");
            if(count > 2)
            {
                SpellBuffRemove(owner, "KarmaChakraCharge", (ObjAIBase)owner, charVars.MantraTimerCooldown);
                SpellBuffRemove(owner, "KarmaTwoMantraParticle", (ObjAIBase)owner, 0);
                SpellBuffAdd((ObjAIBase)owner, owner, "KarmaOneMantraParticle", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            else
            {
                SpellBuffRemove(owner, "KarmaOneMantraParticle", (ObjAIBase)owner, 0);
                SpellBuffRemove(owner, "KarmaChakraCharge", (ObjAIBase)owner, 0);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, default, 2, 1, 8, default, BuffAddType.STACKS_AND_OVERLAPS, BuffType.COMBAT_ENCHANCER, 0, false, false, false, default);
            if(GetBuffCountFromCaster(owner, owner, "KarmaChakraCharge") > 0)
            {
                SetSlotSpellCooldownTimeVer2(0, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, true);
            }
            else
            {
                remainingDuration = GetBuffRemainingDuration(owner, "KarmaChakraTimer");
                SetSlotSpellCooldownTimeVer2(remainingDuration, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, true);
            }
        }
    }
}



namespace Spells
{
    public class KarmaHeavenlyWave : Script
    {
        public int[] effect0 = {70, 110, 150, 190, 230, 270};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            if(GetBuffCountFromCaster(owner, owner, "KarmaChakra") > 0)
            {
                SpellBuffRemove(owner, "KarmaChakra", (ObjAIBase)owner, default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Particle? hitEffet = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
            SpellEffectCreate(out hitEffet, out _, "karma_heavenlyWave_unit_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
        }
    }
}
namespace Spells
{
    public class KarmaHeavenlyWaveC : Script
    {
        public int[] effect0 = {35, 55, 75, 95, 115, 135};
        public int[] effect1 = {70, 110, 150, 190, 230, 270};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float regen = 0;
            float karmaAP = 0;
            float aPToAdd = 0;
            float maxHealth = 0;
            float curHealth = 0;
            float missHealth = 0;
            float healthToRestore = 0;
            int baseHealthRestore = 0;
            Particle? br = null;
            //object? _ = null;
            Particle? ar = null;
            Particle? hitEffet = null;
            teamID = GetTeamID(default);
            if(target.Team == attacker.Team)
            {
                ApplyAssistMarker((ObjAIBase)attacker, target, 10);
                regen = 0.05f;
                karmaAP = GetFlatMagicDamageMod(owner);
                aPToAdd = Math(karmaAP, MathOp.MO_MULTIPLY, 0.0002f);
                regen = Math(aPToAdd, MathOp.MO_ADD, regen);
                maxHealth = GetMaxHealth(target);
                curHealth = GetHealth(target);
                missHealth = Math(maxHealth, MathOp.MO_SUBTRACT, curHealth);
                healthToRestore = Math(regen, MathOp.MO_MULTIPLY, missHealth);
                baseHealthRestore = this.effect0[level];
                healthToRestore = Math(baseHealthRestore, MathOp.MO_ADD, healthToRestore);
                IncHealth(target, healthToRestore, owner);
                if(target == attacker)
                {
                    SpellEffectCreate(out br, out _, "karma_heavenlyWave_self_heal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, default, default, default);
                }
                else
                {
                    SpellEffectCreate(out ar, out _, "karma_heavenlyWave_ally_heal.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, default, default, default);
                }
            }
            else
            {
                SpellEffectCreate(out hitEffet, out _, "karma_heavenlyWave_unit_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, default, default, default);
                ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
            }
        }
    }
}






namespace Spells
{
    public class KarmaSoulShield : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? TotalArmorAmount = null;
        }
        public int[] effect0 = {80, 120, 160, 200, 240, 280};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            float abilityPower = 0;
            int armorAmount = 0;
            float totalArmorAmount = 0;
            SpellBuffAdd((ObjAIBase)owner, owner, "KarmaSoulShieldAnim", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            abilityPower = GetFlatMagicDamageMod(attacker);
            armorAmount = this.effect0[level];
            abilityPower = Math(abilityPower, MathOp.MO_MULTIPLY, 0.8f);
            totalArmorAmount = Math(abilityPower, MathOp.MO_ADD, armorAmount);
            nextBuffVars.TotalArmorAmount = totalArmorAmount;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class KarmaSoulShieldC : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? TotalArmorAmount = null;
        }
        public int[] effect0 = {80, 120, 160, 200, 240, 280};
        public int[] effect1 = {0, 0, 0, 0, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            TargetExecute_nextBuffVars nextBuffVars = new();
            float abilityPower = 0;
            int armorAmount = 0;
            float totalArmorAmount = 0;
            Particle? a = null;
            //object? _ = null;
            //object? unit = null;
            Particle? aoehit = null;
            teamID = GetTeamID(default);
            SpellBuffAdd((ObjAIBase)owner, owner, "KarmaSoulShieldAnim", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            abilityPower = GetFlatMagicDamageMod(attacker);
            armorAmount = this.effect0[level];
            abilityPower = Math(abilityPower, MathOp.MO_MULTIPLY, 0.8f);
            totalArmorAmount = Math(abilityPower, MathOp.MO_ADD, armorAmount);
            nextBuffVars.TotalArmorAmount = totalArmorAmount;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellEffectCreate(out a, out _, "karma_soulShield_buf_mantra.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, default, default, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                SpellEffectCreate(out aoehit, out _, "karma_souldShiled_ult_unit_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, false, default, default, default);
                ApplyDamage((ObjAIBase)attacker, unit, armorAmount + this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.8f, 0, false, false, (ObjAIBase)attacker);
            });
        }
    }
}
namespace Spells
{
    public class KarmaSpiritBond : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float CooldownToRestore = 0;
            public int MantraBoolean = 0;
            public int DamageToDeal = 0;
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {7.5f, 7, 6.5f, 6, 5.5f, 5};
        public float[] effect1 = {35, 37.5f, 40, 42.5f, 45, 47.5f};
        public int[] effect2 = {80, 125, 170, 215, 260, 305};
        public float[] effect3 = {0.1f, 0.12f, 0.14f, 0.16f, 0.18f, 0.2f};
        public int[] effect4 = {5, 5, 5, 5, 5, 5};
        public int[] effect5 = {5, 5, 5, 5, 5, 5};
        public float[] effect6 = {-0.1f, -0.12f, -0.14f, -0.16f, -0.18f, -0.2f};
        public int[] effect7 = {5, 5, 5, 5, 5, 5};
        public int[] effect8 = {5, 5, 5, 5, 5, 5};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            bool? isStealthed = null;
            TeamId teamID;
            Particle? distanceBreak2 = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            float manaToRestore = 0;
            isStealthed = GetStealthed(target);
            if(isStealthed == true)
            {
                teamID = GetTeamID(default);
                SpellEffectCreate(out distanceBreak2, out _, "karma_spiritBond_break_overhead.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, true, default, default, false, false, default, default);
                nextBuffVars.CooldownToRestore = this.effect0[level];
                manaToRestore = this.effect1[level];
                IncPAR(owner, manaToRestore);
                SpellBuffAdd((ObjAIBase)owner, owner, "KarmaSBStealthBreak", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            else
            {
                nextBuffVars.MantraBoolean = 0;
                nextBuffVars.DamageToDeal = this.effect2[level];
                if(target.Team == attacker.Team)
                {
                    nextBuffVars.MoveSpeedMod = this.effect3[level];
                    SpellBuffAdd((ObjAIBase)attacker, target, "KarmaSpiritBond", 1, 1, this.effect4[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "KarmaSpiritBondAllySelfTooltip", 1, 1, this.effect5[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
                else
                {
                    nextBuffVars.MoveSpeedMod = this.effect6[level];
                    BreakSpellShields(target);
                    SpellBuffAdd((ObjAIBase)attacker, target, "KarmaSpiritBondC", 1, 1, this.effect7[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)target, owner, "KarmaSpiritBondEnemyTooltip", 1, 1, this.effect8[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)owner, target, "KarmaMantraSBSlow", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                }
            }
        }
    }
}

namespace Spells
{
    public class KarmaSpiritBondC : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float CooldownToRestore = 0;
            public int MantraBoolean = 0;
            public int DamageToDeal = 0;
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {7.5f, 7, 6.5f, 6, 5.5f, 5};
        public float[] effect1 = {35, 37.5f, 40, 42.5f, 45, 47.5f};
        public int[] effect2 = {80, 125, 170, 215, 260, 305};
        public float[] effect3 = {0.2f, 0.24f, 0.28f, 0.32f, 0.36f, 0.4f};
        public int[] effect4 = {5, 5, 5, 5, 5, 5};
        public int[] effect5 = {5, 5, 5, 5, 5, 5};
        public float[] effect6 = {-0.2f, -0.24f, -0.28f, -0.32f, -0.36f, -0.4f};
        public int[] effect7 = {5, 5, 5, 5, 5, 5};
        public int[] effect8 = {5, 5, 5, 5, 5, 5};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            bool? isStealthed = null;
            TeamId teamID;
            Particle? distanceBreak2 = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            float manaToRestore = 0;
            isStealthed = GetStealthed(target);
            if(isStealthed == true)
            {
                teamID = GetTeamID(default);
                SpellEffectCreate(out distanceBreak2, out _, "karma_spiritBond_break_overhead.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, true, default, default, false, false, default, default);
                nextBuffVars.CooldownToRestore = this.effect0[level];
                manaToRestore = this.effect1[level];
                IncPAR(owner, manaToRestore);
                SpellBuffAdd((ObjAIBase)owner, owner, "KarmaSBStealthBreak", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            else
            {
                nextBuffVars.MantraBoolean = 1;
                nextBuffVars.DamageToDeal = this.effect2[level];
                if(target.Team == attacker.Team)
                {
                    nextBuffVars.MoveSpeedMod = this.effect3[level];
                    SpellBuffAdd((ObjAIBase)attacker, target, "KarmaSpiritBond", 1, 1, this.effect4[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "KarmaSpiritBondAllySelfTooltip", 1, 1, this.effect5[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
                else
                {
                    nextBuffVars.MoveSpeedMod = this.effect6[level];
                    BreakSpellShields(target);
                    SpellBuffAdd((ObjAIBase)owner, target, "KarmaSpiritBondC", 1, 1, this.effect7[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)target, owner, "KarmaSpiritBondEnemyTooltip", 1, 1, this.effect8[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)owner, target, "KarmaMantraSBSlow", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                }
            }
        }
    }
}



namespace Spells
{
    public class KatsudionsGlueGun : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(target, owner, "Slow") > 0)
            {
                SpellBuffRemove(target, "Slow", (ObjAIBase)attacker, default);
                DebugSay(owner, "DISPELL SLOW !!", default);
            }
            else
            {
                nextBuffVars.MoveSpeedMod = -0.5f;
                DebugSay(owner, "TARGET SLOWED 50% !!", default);
                SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, default, default);
            }
        }
    }
}



namespace Spells
{
    public class KennenBringTheLight : Script
    {
        public int[] effect0 = {65, 95, 125, 155, 185};
        Particle? particleID = null;
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? temp = null;
            temp = false;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "KennenMarkofStorm", true, (unit) => 
            {
                temp = true;
            });
            if(temp == true)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            //object? unit = null;
            //object? nextBuffVars = null;
            int baseDamage = 0;
            //object? _ = null;
            Particle? hi = null;
            teamID = GetTeamID(default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 925, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                if(GetBuffCountFromCaster(unit, owner, "KennenMarkofStorm") > 0)
                {
                    BreakSpellShields(unit);
                    SpellBuffAdd((ObjAIBase)attacker, unit, "KennenMarkofStorm", 5, 1, 8, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                    baseDamage = this.effect0[level];
                    SpellEffectCreate(out this.particleID, out _, "kennen_btl_beam.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, unit, false, attacker, "head", default, unit, "root", default, true, default, default, default, default, default, default);
                    ApplyDamage((ObjAIBase)attacker, unit, baseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.55f, 1, false, false, (ObjAIBase)attacker);
                    SpellEffectCreate(out hi, out _, "kennen_btl_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, default, default, default, default);
                }
            });
        }
    }
}




namespace Spells
{
    public class KennenLRCancel : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SetSlotSpellCooldownTime((ObjAIBase)owner, 2, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0.5f);
            SpellBuffRemove(owner, "KennenLightningRush", (ObjAIBase)owner, default);
            SpellBuffRemove(owner, "KennenLightningRushDamage", (ObjAIBase)owner, default);
        }
    }
}

namespace Spells
{
    public class KennenLightningRush : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int RushDamage = 0;
        }
        public int[] effect0 = {85, 125, 165, 205, 245};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.RushDamage = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "KennenLightningRushDamage", 1, 1, 2.2f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0.1f, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 2, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.HASTE, 0, true, false, default, default);
            SetSpell((ObjAIBase)owner, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "KennenLRCancel");
            SetSlotSpellCooldownTime((ObjAIBase)owner, 2, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0.5f);
        }
    }
}




namespace Spells
{
    public class KennenMegaProc : Script
    {
        public float[] effect0 = {0.4f, 0.5f, 0.6f, 0.7f, 0.8f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? hitResult = null;
            //object? nextBuffVars = null;
            float damageMod = 0;
            float attackDamage = 0;
            float procDamage = 0;
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    if(target is ObjAIBase)
                    {
                        if(target is not BaseTurret)
                        {
                            if(GetBuffCountFromCaster(owner, owner, "KennenDoubleStrikeLive") > 0)
                            {
                                SpellBuffAdd((ObjAIBase)owner, target, "KennenMarkofStorm", 5, 1, 8, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                damageMod = this.effect0[level];
                                attackDamage = GetTotalAttackDamage(owner);
                                procDamage = Math(attackDamage, MathOp.MO_MULTIPLY, damageMod);
                                ApplyDamage((ObjAIBase)attacker, target, attackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
                                ApplyDamage((ObjAIBase)attacker, target, procDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                                SpellBuffRemove(owner, "KennenDoubleStrikeLive", (ObjAIBase)owner, default);
                                RemoveOverrideAutoAttack(owner, true);
                                charVars.Count = 0;
                            }
                            else
                            {
                                attackDamage = GetTotalAttackDamage(owner);
                                ApplyDamage((ObjAIBase)attacker, target, attackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
                            }
                        }
                        else
                        {
                            attackDamage = GetTotalAttackDamage(owner);
                            ApplyDamage((ObjAIBase)attacker, target, attackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
                        }
                    }
                    else
                    {
                        attackDamage = GetTotalAttackDamage(owner);
                        ApplyDamage((ObjAIBase)attacker, target, attackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
                    }
                }
            }
        }
    }
}



namespace Spells
{
    public class KennenShurikenHurl1 : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 1050)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 800, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class KennenShurikenHurlMissile1 : Script
    {
        public int[] effect0 = {75, 115, 155, 195, 235};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int properDamage = 0;
            bool? isStealthed = null;
            //object? nextBuffVars = null;
            Particle? gfasdf = null;
            //object? _ = null;
            //object? missileNetworkID = null;
            bool? canSee = null;
            teamID = GetTeamID(default);
            properDamage = this.effect0[level];
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "KennenMarkofStorm", 5, 1, 8, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, properDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out gfasdf, out _, "Kennen_ts_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, default, default, true, default, default, false, false, default, default);
                DestroyMissile(missileNetworkID);
            }
            else
            {
                if(target is Champion)
                {
                    BreakSpellShields(target);
                    SpellBuffAdd((ObjAIBase)attacker, target, "KennenMarkofStorm", 5, 1, 8, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                    ApplyDamage((ObjAIBase)attacker, target, properDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                    SpellEffectCreate(out gfasdf, out _, "Kennen_ts_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, default, default, true, default, default, false, false, default, default);
                    DestroyMissile(missileNetworkID);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        BreakSpellShields(target);
                        SpellBuffAdd((ObjAIBase)attacker, target, "KennenMarkofStorm", 5, 1, 8, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                        ApplyDamage((ObjAIBase)attacker, target, properDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                        SpellEffectCreate(out gfasdf, out _, "Kennen_ts_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, default, default, true, default, default, false, false, default, default);
                        DestroyMissile(missileNetworkID);
                    }
                }
            }
        }
    }
}

namespace Spells
{
    public class KennenShurikenStorm : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int BonusDamage = 0;
        }
        public int[] effect0 = {80, 145, 210};
        public int[] effect1 = {3, 4, 5};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.BonusDamage = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, this.effect1[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class KennenShurikenThrow : Script
    {
        public int[] effect0 = {75, 110, 145, 180, 215};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int properDamage = 0;
            //object? nextBuffVars = null;
            properDamage = this.effect0[level];
            BreakSpellShields(target);
            SpellBuffAdd((ObjAIBase)attacker, target, "KennenMarkofStorm", 5, 1, 8, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            ApplyDamage((ObjAIBase)attacker, target, properDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.5f, 1, false, false, (ObjAIBase)attacker);
        }
    }
}

namespace Spells
{
    public class KillerInstinct : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "KillerInstinct", 1, 1, 15, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}






namespace Spells
{
    public class KogMawBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            int kMSkinID = 0;
            Particle? a = null;
            //object? _ = null;
            baseAttackDamage = GetBaseAttackDamage(owner);
            kMSkinID = GetSkinID(attacker);
            if(target is ObjAIBase)
            {
                if(kMSkinID == 5)
                {
                    SpellEffectCreate(out a, out _, "KogMawChineseBasicAttack_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                }
                else
                {
                    SpellEffectCreate(out a, out _, "KogMawSpatter.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                }
            }
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class KogMawBasicAttack2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            int kMSkinID = 0;
            Particle? a = null;
            //object? _ = null;
            baseAttackDamage = GetBaseAttackDamage(owner);
            kMSkinID = GetSkinID(attacker);
            if(target is ObjAIBase)
            {
                if(kMSkinID == 5)
                {
                    SpellEffectCreate(out a, out _, "KogMawChineseBasicAttack_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                }
                else
                {
                    SpellEffectCreate(out a, out _, "KogMawSpatter.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                }
            }
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class KogMawBioArcaneBarrage : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int AttackRangeIncrease = 0;
        }
        public int[] effect0 = {130, 150, 170, 190, 210};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.AttackRangeIncrease = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 8, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class KogMawBioArcaneBarrageAttack : Script
    {
        public float[] effect0 = {0.02f, 0.03f, 0.04f, 0.05f, 0.06f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseDamage = 0;
            int kMSkinID = 0;
            Particle? a = null;
            //object? _ = null;
            //object? hitResult = null;
            float abilityPower = 0;
            float maxHealthDamage = 0;
            float bonusMaxHealthDamage = 0;
            float totalMaxHealthDamage = 0;
            float maxHealth = 0;
            float damageToApply = 0;
            TeamId teamId;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            baseDamage = GetBaseAttackDamage(owner);
            kMSkinID = GetSkinID(attacker);
            if(target is ObjAIBase)
            {
                if(kMSkinID == 5)
                {
                    SpellEffectCreate(out a, out _, "KogMawChineseBasicAttack_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out a, out _, "KogMawSpatter.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
            }
            ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    if(hitResult != HitResult.HIT_Dodge)
                    {
                        if(hitResult != HitResult.HIT_Miss)
                        {
                            abilityPower = GetFlatMagicDamageMod(owner);
                            maxHealthDamage = this.effect0[level];
                            bonusMaxHealthDamage = Math(0.0001f, MathOp.MO_MULTIPLY, abilityPower);
                            totalMaxHealthDamage = Math(bonusMaxHealthDamage, MathOp.MO_ADD, maxHealthDamage);
                            maxHealth = GetMaxHealth(target);
                            damageToApply = Math(maxHealth, MathOp.MO_MULTIPLY, totalMaxHealthDamage);
                            teamId = GetTeamID(default);
                            if(teamId == TeamId.TEAM_NEUTRAL)
                            {
                                damageToApply = Math(100, MathOp.MO_MIN, damageToApply);
                            }
                            ApplyDamage((ObjAIBase)attacker, target, damageToApply, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 0, false, false, (ObjAIBase)attacker);
                        }
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class KogMawCausticSpittle : Script
    {
        public int[] effect0 = {60, 110, 160, 210, 260};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0.7f, 1, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, "KogMawCausticSpittleCharged", 1, 1, 4, default, BuffAddType.REPLACE_EXISTING, BuffType.SHRED, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class KogMawCritAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float baseAttackDamage = 0;
            int kMSkinID = 0;
            Particle? a = null;
            //object? _ = null;
            hitResult = HitResult.HIT_Critical;
            baseAttackDamage = GetBaseAttackDamage(owner);
            kMSkinID = GetSkinID(attacker);
            if(target is ObjAIBase)
            {
                if(kMSkinID == 5)
                {
                    SpellEffectCreate(out a, out _, "KogMawChineseBasicAttack_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                }
                else
                {
                    SpellEffectCreate(out a, out _, "KogMawSpatter.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                }
            }
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}




namespace Spells
{
    public class KogMawLivingArtillery : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int BaseDamageAmount = 0;
            public object? BonusDamage = null;
            public object? FinalDamage = null;
            public Region? Bubble = null;
        }
        public int[] effect0 = {80, 120, 160};
        public int[] effect1 = {80, 120, 160};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            float aDRatio = 0;
            float bonusDamage = 0;
            Particle? a = null;
            //object? _ = null;
            Minion? other3 = null;
            float damageAmount = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            int count = 0;
            float count2 = 0;
            float extraCost = 0;
            teamOfOwner = GetTeamID(default);
            aDRatio = 0.5f;
            bonusDamage = GetFlatPhysicalDamageMod(owner);
            bonusDamage = Math(aDRatio, MathOp.MO_MULTIPLY, bonusDamage);
            targetPos = GetCastSpellTargetPos();
            SpellEffectCreate(out a, out _, "KogMawLivingArtillery_mis.troy", default, TeamId.TEAM_BLUE, 100, 0, TeamId.TEAM_UNKNOWN, attacker, false, attacker, "C_Mouth_d", default, attacker, default, default, true, default, default, false, false, default, default);
            other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", targetPos, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, (Champion)owner, default);
            damageAmount = this.effect0[level];
            nextBuffVars.BaseDamageAmount = this.effect1[level];
            nextBuffVars.BonusDamage = bonusDamage;
            damageAmount = Math(damageAmount, MathOp.MO_ADD, bonusDamage);
            nextBuffVars.FinalDamage = damageAmount;
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 0.75f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            count = GetBuffCountFromAll(owner, "KogMawLivingArtilleryCost");
            count2 = Math(1, MathOp.MO_ADD, count);
            extraCost = Math(40, MathOp.MO_MULTIPLY, count2);
            extraCost = Math(160, MathOp.MO_MIN, extraCost);
            SetPARCostInc((ObjAIBase)owner, 3, SpellSlotType.SpellSlots, extraCost, PrimaryAbilityResourceType.MANA);
            SpellBuffAdd((ObjAIBase)attacker, owner, "KogMawLivingArtilleryCost", 5, 1, 6, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            nextBuffVars.Bubble = AddPosPerceptionBubble(teamOfOwner, 100, targetPos, 1, default, false);
        }
    }
}


namespace Spells
{
    public class KogMawVoidOoze : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 1150)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 1100, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class KogMawVoidOozeMissile : Script
    {
        class OnMissileUpdate_nextBuffVars
        {
            public float SlowPercent = 0;
            public object? TargetPos = null;
        }
        public float[] effect0 = {-0.28f, -0.36f, -0.44f, -0.52f, -0.6f};
        public int[] effect1 = {60, 110, 160, 210, 260};
        public void OnMissileUpdate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, SpellMissile missileNetworkID)
        {
            int level = 0;
            OnMissileUpdate_nextBuffVars nextBuffVars = new();
            //object? missilePosition = null;
            Vector3 groundHeight;
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.SlowPercent = this.effect0[level];
            GetGroundHeight(missilePosition, groundHeight);
            groundHeight = ModifyPosition(default, default, default);
            nextBuffVars.TargetPos = groundHeight;
            SpellBuffAdd((ObjAIBase)owner, owner, "KogMawVoidOozeMissile", 100, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.INTERNAL, 0, false, false, false, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? varrr = null;
            //object? _ = null;
            //object? casterID2 = null;
            if(owner.Team != target.Team)
            {
                ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.7f, 1, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out varrr, out _, "KogMawVoidOoze_tar.troy", default, casterID2, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
            }
        }
    }
}

namespace Spells
{
    public class KriggersBarrier : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int ShieldHealth = 0;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(target, owner, "BlackShield") > 0)
            {
                SpellBuffRemove(target, "BlackShield", (ObjAIBase)attacker, default);
                DebugSay(owner, "DISPELL BlackShield", default);
            }
            else
            {
                nextBuffVars.ShieldHealth = 1000;
                DebugSay(owner, "ADD BlackShield 1000 Health", default);
                SpellBuffAdd((ObjAIBase)attacker, target, "BlackShield", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SPELL_IMMUNITY, 0, true, false, default, default);
            }
        }
    }
}
namespace Spells
{
    public class Landslide : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? Level = null;
        }
        public int[] effect0 = {60, 100, 140, 180, 220};
        Particle? partname = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            float armorAmount = 0;
            int baseDamage = 0;
            float armorDamage = 0;
            int malphiteSkinID = 0;
            //object? _ = null;
            //object? unit = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.Level = level;
            armorAmount = GetArmor(owner);
            baseDamage = this.effect0[level];
            armorAmount = Math(armorAmount, MathOp.MO_MULTIPLY, 0.5f);
            armorDamage = Math(armorAmount, MathOp.MO_ADD, baseDamage);
            malphiteSkinID = GetSkinID(owner);
            if(malphiteSkinID == 2)
            {
                SpellEffectCreate(out this.partname, out _, "landslide_blue_nova.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, owner.Position, target, default, default, true, default, default, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out this.partname, out _, "landslide_nova.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, owner.Position, target, default, default, true, default, default, false, false, default, default);
            }
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                ApplyDamage((ObjAIBase)attacker, unit, armorDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, false, false, (ObjAIBase)attacker);
                SpellBuffAdd((ObjAIBase)attacker, unit, "LandslideDebuff", 1, 1, 4, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            });
        }
    }
}


namespace Spells
{
    public class LayWaste : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DamageAmount = 0;
        }
        public int[] effect0 = {80, 120, 160, 200, 240};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Region? bubbleID = null;
            Minion? other3 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            teamOfOwner = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            bubbleID = AddPosPerceptionBubble(teamOfOwner, 200, targetPos, 1, default, false);
            other3 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", targetPos, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, (Champion)owner, default);
            nextBuffVars.DamageAmount = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class LayWasteExtra : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            
        }
    }
}
namespace Spells
{
    public class LeapStrike : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            float distance = 0;
            int gravityVar = 0;
            int speedVar = 0;
            Vector3 targetPos;
            float factor = 0;
            SpellBuffAdd((ObjAIBase)target, attacker, default, 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            distance = DistanceBetweenObjects("Attacker", "Target");
            if(distance >= 600)
            {
                gravityVar = 100;
                speedVar = 1450;
            }
            else if(distance >= 500)
            {
                gravityVar = 110;
                speedVar = 1300;
            }
            else if(distance >= 400)
            {
                gravityVar = 120;
                speedVar = 1150;
            }
            else if(distance >= 300)
            {
                gravityVar = 130;
                speedVar = 1100;
            }
            else if(distance >= 200)
            {
                gravityVar = 150;
                speedVar = 1000;
            }
            else if(distance >= 100)
            {
                gravityVar = 300;
                speedVar = 900;
            }
            else if(distance >= 0)
            {
                gravityVar = 1000;
                speedVar = 900;
            }
            targetPos = GetUnitPosition(target);
            Move(attacker, targetPos, speedVar, gravityVar, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, distance, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
            factor = Math(distance, MathOp.MO_DIVIDE, 700);
            factor = Math(factor, MathOp.MO_MAX, 0.25f);
            factor = Math(factor, MathOp.MO_MIN, 0.9f);
            PlayAnimation("Spell2", factor, attacker, false, false, false);
            if(owner.Team == target.Team)
            {
                if(GetBuffCountFromCaster(target, default, "SharedWardBuff") > 0)
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "Destealth", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
        }
    }
}

namespace Spells
{
    public class LeblancChaosOrb : Script
    {
        public int[] effect0 = {20, 40, 60, 80, 100};
        public int[] effect1 = {22, 44, 66, 88, 110};
        public int[] effect2 = {25, 50, 75, 100, 125};
        public int[] effect3 = {28, 56, 84, 112, 140};
        public int[] effect4 = {70, 110, 150, 190, 230};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(target, owner, "LeblancChaosOrb") > 0)
            {
                ApplySilence(attacker, target, 2);
                SpellBuffRemove(target, "LeblancChaosOrb", (ObjAIBase)owner, default);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.3f, 1, false, false, (ObjAIBase)attacker);
            }
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 3.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            if(GetBuffCountFromCaster(target, owner, "LeblancChaosOrbM") > 0)
            {
                ApplySilence(attacker, target, 2);
                SpellBuffRemove(target, "LeblancChaosOrbM", (ObjAIBase)owner, default);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.33f, 1, false, false, (ObjAIBase)attacker);
                }
                else if(level == 2)
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.375f, 1, false, false, (ObjAIBase)attacker);
                }
                else
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect3[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.42f, 1, false, false, (ObjAIBase)attacker);
                }
            }
            ApplyDamage((ObjAIBase)attacker, target, this.effect4[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class LeblancChaosOrbM : Script
    {
        public int[] effect0 = {22, 44, 66, 88, 110};
        public int[] effect1 = {25, 50, 75, 100, 125};
        public int[] effect2 = {28, 56, 84, 112, 140};
        public int[] effect3 = {20, 40, 60, 80, 100};
        public int[] effect4 = {77, 121, 165, 209, 253};
        public float[] effect5 = {87.5f, 137.5f, 187.5f, 237.5f, 287.5f};
        public int[] effect6 = {98, 154, 210, 266, 322};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(target, owner, "LeblancChaosOrbM") > 0)
            {
                ApplySilence(attacker, target, 2);
                SpellBuffRemove(target, "LeblancChaosOrbM", (ObjAIBase)owner, default);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.33f, 1, false, false, (ObjAIBase)attacker);
                }
                else if(level == 2)
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.375f, 1, false, false, (ObjAIBase)attacker);
                }
                else
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.42f, 1, false, false, (ObjAIBase)attacker);
                }
            }
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 3.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            if(GetBuffCountFromCaster(target, owner, "LeblancChaosOrb") > 0)
            {
                ApplySilence(attacker, target, 2);
                SpellBuffRemove(target, "LeblancChaosOrb", (ObjAIBase)owner, default);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                ApplyDamage((ObjAIBase)attacker, target, this.effect3[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.3f, 1, false, false, (ObjAIBase)attacker);
            }
            if(level == 1)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                ApplyDamage((ObjAIBase)attacker, target, this.effect4[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.66f, 1, false, false, (ObjAIBase)attacker);
            }
            else if(level == 2)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                ApplyDamage((ObjAIBase)attacker, target, this.effect5[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
            }
            else
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                ApplyDamage((ObjAIBase)attacker, target, this.effect6[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.84f, 1, false, false, (ObjAIBase)attacker);
            }
        }
    }
}






namespace Spells
{
    public class LeblancSlide : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int AEDamage = 0;
            public float SilenceDuration = 0;
            public object? OwnerPos = null;
            public object? CastPosition = null;
        }
        public int[] effect0 = {85, 125, 165, 205, 245};
        public float[] effect1 = {1.5f, 1.75f, 2, 2.25f, 2.5f};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            else if(canCast == false)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            Vector3 castPosition;
            TeamId casterID;
            Particle? smokeBomb1 = null;
            //object? _ = null;
            float distance = 0;
            TeamId teamOfOwner;
            SelfExecute_nextBuffVars nextBuffVars = new();
            ownerPos = GetUnitPosition(owner);
            castPosition = GetCastSpellTargetPos();
            casterID = GetTeamID(default);
            SpellEffectCreate(out smokeBomb1, out _, "leBlanc_displacement_cas.troy", default, casterID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, default, default, false, default, default, default);
            distance = DistanceBetweenPoints(ownerPos, castPosition);
            if(distance > 600)
            {
                FaceDirection(owner, castPosition);
                castPosition = GetPointByUnitFacingOffset(owner, 600, 0);
            }
            teamOfOwner = GetTeamID(default);
            nextBuffVars.AEDamage = this.effect0[level];
            nextBuffVars.SilenceDuration = this.effect1[level];
            nextBuffVars.OwnerPos = ownerPos;
            nextBuffVars.CastPosition = castPosition;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "LeblancSlideMove", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "LeblancSlideWallFix", 1, 1, 3.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class LeblancSlideM : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float SilenceDuration = 0;
            public object? OwnerPos = null;
            public object? CastPosition = null;
            public float AEDamage = 0;
        }
        public float[] effect0 = {1.5f, 1.75f, 2, 2.25f, 2.5f};
        public float[] effect1 = {93.5f, 137.5f, 181.5f, 225.5f, 269.5f};
        public float[] effect2 = {106.25f, 156.25f, 206.25f, 256.25f, 306.25f};
        public int[] effect3 = {119, 175, 231, 287, 343};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            else if(canCast == false)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            Vector3 castPosition;
            TeamId casterID;
            Particle? smokeBomb1 = null;
            //object? _ = null;
            float distance = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            SealSpellSlot(3, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, SpellbookType.SPELLBOOK_CHAMPION);
            SealSpellSlot(1, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, SpellbookType.SPELLBOOK_CHAMPION);
            ownerPos = GetUnitPosition(owner);
            castPosition = GetCastSpellTargetPos();
            casterID = GetTeamID(default);
            SpellEffectCreate(out smokeBomb1, out _, "leBlanc_displacement_cas_ult.troy", default, casterID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, default, default, false, default, default, default);
            distance = DistanceBetweenPoints(ownerPos, castPosition);
            if(distance > 600)
            {
                FaceDirection(owner, castPosition);
                castPosition = GetPointByUnitFacingOffset(owner, 600, 0);
            }
            nextBuffVars.SilenceDuration = this.effect0[level];
            nextBuffVars.OwnerPos = ownerPos;
            nextBuffVars.CastPosition = castPosition;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level == 1)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                nextBuffVars.AEDamage = this.effect1[level];
            }
            else if(level == 2)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                nextBuffVars.AEDamage = this.effect2[level];
            }
            else
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                nextBuffVars.AEDamage = this.effect3[level];
            }
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "LeblancSlideMoveM", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "LeblancSlideWallFixM", 1, 1, 3.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class LeblancSlideReturn : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            else if(canCast == false)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
    }
}
namespace Spells
{
    public class LeblancSlideReturnM : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            else if(canCast == false)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
    }
}


namespace Spells
{
    public class LeblancSoulShackle : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int BreakDamage = 0;
            public float BreakStun = 0;
            public bool? Broken = null;
            public float MoveSpeedMod = 0;
        }
        public int[] effect0 = {40, 65, 90, 115, 140};
        public float[] effect1 = {1, 1.3f, 1.6f, 1.9f, 2.2f};
        public float[] effect2 = {-0.25f, -0.25f, -0.25f, -0.25f, -0.25f};
        public int[] effect3 = {22, 44, 66, 88, 110};
        public int[] effect4 = {25, 50, 75, 100, 125};
        public int[] effect5 = {28, 56, 84, 112, 140};
        public int[] effect6 = {20, 40, 60, 80, 100};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? missileNetworkID = null;
            nextBuffVars.BreakDamage = this.effect0[level];
            nextBuffVars.BreakStun = this.effect1[level];
            nextBuffVars.Broken = false;
            SpellBuffAdd((ObjAIBase)attacker, target, "LeblancSoulShackle", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            ApplyDamage((ObjAIBase)attacker, target, nextBuffVars.BreakDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLPERSIST, 1, 0.5f, 1, false, false, (ObjAIBase)attacker);
            nextBuffVars.MoveSpeedMod = this.effect2[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
            DestroyMissile(missileNetworkID);
            if(GetBuffCountFromCaster(target, owner, "LeblancChaosOrbM") > 0)
            {
                ApplySilence(attacker, target, 2);
                SpellBuffRemove(target, "LeblancChaosOrbM", (ObjAIBase)owner, 0);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect3[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.33f, 1, false, false, (ObjAIBase)attacker);
                }
                else if(level == 2)
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect4[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.375f, 1, false, false, (ObjAIBase)attacker);
                }
                else
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect5[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.42f, 1, false, false, (ObjAIBase)attacker);
                }
            }
            if(GetBuffCountFromCaster(target, owner, "LeblancChaosOrb") > 0)
            {
                ApplySilence(attacker, target, 2);
                SpellBuffRemove(target, "LeblancChaosOrb", (ObjAIBase)owner, 0);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                ApplyDamage((ObjAIBase)attacker, target, this.effect6[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.3f, 1, false, false, (ObjAIBase)attacker);
            }
        }
    }
}
namespace Spells
{
    public class LeblancSoulShackleM : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float BreakDamage = 0;
            public float BreakStun = 0;
            public bool? Broken = null;
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {44, 71.5f, 99, 126.5f, 154};
        public float[] effect1 = {50, 81.25f, 112.5f, 143.75f, 175};
        public int[] effect2 = {56, 91, 126, 161, 196};
        public float[] effect3 = {1, 1.3f, 1.6f, 1.9f, 2.2f};
        public float[] effect4 = {-0.25f, -0.25f, -0.25f, -0.25f, -0.25f};
        public int[] effect5 = {22, 44, 66, 88, 110};
        public int[] effect6 = {25, 50, 75, 100, 125};
        public int[] effect7 = {28, 56, 84, 112, 140};
        public int[] effect8 = {20, 40, 60, 80, 100};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? missileNetworkID = null;
            if(level == 1)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                nextBuffVars.BreakDamage = this.effect0[level];
                ApplyDamage((ObjAIBase)attacker, target, nextBuffVars.BreakDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLPERSIST, 1, 0.55f, 1, false, false, (ObjAIBase)attacker);
            }
            else if(level == 2)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                nextBuffVars.BreakDamage = this.effect1[level];
                ApplyDamage((ObjAIBase)attacker, target, nextBuffVars.BreakDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLPERSIST, 1, 0.625f, 1, false, false, (ObjAIBase)attacker);
            }
            else
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                nextBuffVars.BreakDamage = this.effect2[level];
                ApplyDamage((ObjAIBase)attacker, target, nextBuffVars.BreakDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLPERSIST, 1, 0.7f, 1, false, false, (ObjAIBase)attacker);
            }
            nextBuffVars.BreakStun = this.effect3[level];
            nextBuffVars.Broken = false;
            SpellBuffAdd((ObjAIBase)attacker, target, "LeblancSoulShackleM", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            nextBuffVars.MoveSpeedMod = this.effect4[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
            DestroyMissile(missileNetworkID);
            if(GetBuffCountFromCaster(target, owner, "LeblancChaosOrbM") > 0)
            {
                ApplySilence(attacker, target, 2);
                SpellBuffRemove(target, "LeblancChaosOrbM", (ObjAIBase)owner, 0);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 1)
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect5[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.33f, 1, false, false, (ObjAIBase)attacker);
                }
                else if(level == 2)
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect6[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.375f, 1, false, false, (ObjAIBase)attacker);
                }
                else
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect7[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.42f, 1, false, false, (ObjAIBase)attacker);
                }
            }
            if(GetBuffCountFromCaster(target, owner, "LeblancChaosOrb") > 0)
            {
                ApplySilence(attacker, target, 2);
                SpellBuffRemove(target, "LeblancChaosOrb", (ObjAIBase)owner, 0);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                ApplyDamage((ObjAIBase)attacker, target, this.effect8[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.3f, 1, false, false, (ObjAIBase)attacker);
            }
        }
    }
}


namespace Spells
{
    public class LeeSinBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class LeeSinBasicAttack2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class LeeSinBasicAttack3 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class LeeSinBasicAttack4 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class LeonaShieldOfDaybreak : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
            public int SilenceDuration = 0;
            public int BonusDamage = 0;
        }
        public int[] effect0 = {12, 11, 10, 9, 8};
        public int[] effect1 = {1, 1, 1, 1, 1};
        public int[] effect2 = {35, 55, 75, 95, 115};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            SetSlotSpellCooldownTimeVer2(0, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            nextBuffVars.SpellCooldown = this.effect0[level];
            nextBuffVars.SilenceDuration = this.effect1[level];
            nextBuffVars.BonusDamage = this.effect2[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "LeonaShieldOfDaybreak", 1, 1, 6, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class LeonaShieldOfDaybreakAttack : Script
    {
        public float[] effect0 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public int[] effect1 = {40, 70, 100, 130, 160};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float slowPercent = 0;
            int bonusDamage = 0;
            float supremeDmg = 0;
            float dealtDamage = 0;
            bool? hitResult = null;
            Particle? temp = null;
            //object? _ = null;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            slowPercent = this.effect0[level];
            bonusDamage = this.effect1[level];
            supremeDmg = GetTotalAttackDamage(owner);
            dealtDamage = Math(supremeDmg, MathOp.MO_MULTIPLY, 1);
            hitResult = false;
            if(target is ObjAIBase)
            {
                targetPos = GetUnitPosition(target);
                SpellEffectCreate(out temp, out _, "Leona_ShieldOfDaybreak_nova.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, targetPos, target, default, default, true, default, default, false, false, default, default);
                SpellEffectCreate(out temp, out _, "Leona_ShieldOfDaybreak_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                ApplyDamage((ObjAIBase)attacker, target, dealtDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, true, (ObjAIBase)attacker);
                BreakSpellShields(target);
                ApplyDamage((ObjAIBase)attacker, target, bonusDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.3f, 0, false, true, (ObjAIBase)attacker);
                if(target is not BaseTurret)
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "LeonaSunlight", 1, 1, 3.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                    ApplyStun(attacker, target, 1);
                }
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, bonusDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.3f, 0, false, true, (ObjAIBase)attacker);
                ApplyDamage((ObjAIBase)attacker, target, dealtDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, true, (ObjAIBase)attacker);
            }
        }
    }
}
namespace Spells
{
    public class LeonaSolarBarrier : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DefenseBonus = 0;
            public int MagicDamage = 0;
        }
        public int[] effect0 = {30, 40, 50, 60, 70};
        public int[] effect1 = {60, 110, 160, 210, 260};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.DefenseBonus = this.effect0[level];
            nextBuffVars.MagicDamage = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, attacker, "LeonaSolarBarrier", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class LeonaSolarFlare : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? Distance = null;
            public int DamageAmount = 0;
            public object? Level = null;
            public Region? Bubble = null;
        }
        public int[] effect0 = {150, 250, 350};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Vector3 ownerPos;
            float distance = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            Particle? a = null;
            //object? _ = null;
            Minion? other3 = null;
            teamOfOwner = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(targetPos, ownerPos);
            nextBuffVars.Distance = distance;
            SpellEffectCreate(out a, out _, "Leona_SolarFlare_cas.troy", default, TeamId.TEAM_BLUE, 100, 0, TeamId.TEAM_UNKNOWN, attacker, false, attacker, "root", default, attacker, default, default, true, default, default, false, false, default, default);
            other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", targetPos, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, (Champion)owner, default);
            nextBuffVars.DamageAmount = this.effect0[level];
            nextBuffVars.Level = level;
            SpellBuffAdd((ObjAIBase)attacker, other3, "LeonaSolarFlare", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            nextBuffVars.Bubble = AddPosPerceptionBubble(teamOfOwner, 800, targetPos, 4, default, false);
            SpellBuffAdd((ObjAIBase)owner, owner, "LeonaSolarFlareVision", 1, 1, 3.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}




namespace Spells
{
    public class LeonaZenithBlade : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            //object? nextBuffVars = null;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 700)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 700, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            SetCanAttack(owner, default);
            SetCanMove(owner, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "LeonaZenithBlade", 1, 1, 0.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class LeonaZenithBladeMissile : Script
    {
        class OnMissileEnd_nextBuffVars
        {
            public object? Destination = null;
            public object? Distance = null;
        }
        public int[] effect0 = {60, 100, 140, 180, 220};
        public void OnMissileEnd(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            Vector3 ownerPos;
            int level = 0;
            //object? unit = null;
            float distance = 0;
            float finalDistance = 0;
            Vector3 targetPos;
            OnMissileEnd_nextBuffVars nextBuffVars = new();
            Particle? ar1 = null;
            //object? _ = null;
            SetCanAttack(owner, default);
            SetCanMove(owner, default);
            teamID = GetTeamID(default);
            ownerPos = GetUnitPosition(owner);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            ForNClosestUnitsInTargetArea(owner, owner.Position, 3000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectDead ", 1, true, "LeonaZenithBladeBuffOrder", (unit) => 
            {
                FaceDirection(owner, unit);
                distance = DistanceBetweenObjects("Owner", "Unit");
                finalDistance = Math(distance, MathOp.MO_ADD, 225);
                targetPos = GetPointByUnitFacingOffset(owner, finalDistance, 0);
                SpellBuffAdd((ObjAIBase)owner, unit, "LeonaZenithBladeRoot", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.CHARM, 0, true, false, false, default);
                nextBuffVars.Destination = targetPos;
                nextBuffVars.Distance = distance;
                SpellBuffAdd(unit, owner, default, 1, 1, 1.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellEffectCreate(out ar1, out _, "Leona_ZenithBlade_trail.troy", default, teamID, 225, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, true, default, default, false, false, default, default);
            });
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            //object? unit = null;
            //object? nextBuffVars = null;
            int damageToDeal = 0;
            Particle? temp = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            if(target is Champion)
            {
                ForEachUnitInTargetArea((ObjAIBase)attacker, attacker.Position, 3000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf AffectDead ", "LeonaZenithBladeBuffOrder", true, (unit) => 
                {
                    SpellBuffClear(unit, "LeonaZenithBladeBuffOrder");
                });
                SpellBuffAdd((ObjAIBase)attacker, target, "LeonaZenithBladeBuffOrder", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            BreakSpellShields(target);
            SpellBuffAdd((ObjAIBase)attacker, target, "LeonaSunlight", 1, 1, 3.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            damageToDeal = this.effect0[level];
            ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
            if(target is not Champion)
            {
                SpellEffectCreate(out temp, out _, "Leona_ZenithBlade_sound.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
            }
        }
    }
}






namespace Chars
{
    public class LichBane : Script
    {
        public void OnLaunchAttack(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "SheenDelay") == 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "SheenDelay", 1, 1, 1.4f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            }
        }
    }
}





namespace Spells
{
    public class LightstrikerBuff : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "LightstrikerBuff", 1, 1, 8, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "LightstrikerBuff")
            {
                SetSlotSpellCooldownTimeVer2(40, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name1 == "LightstrikerBuff")
            {
                SetSlotSpellCooldownTimeVer2(40, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name2 == "LightstrikerBuff")
            {
                SetSlotSpellCooldownTimeVer2(40, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name3 == "LightstrikerBuff")
            {
                SetSlotSpellCooldownTimeVer2(40, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name4 == "LightstrikerBuff")
            {
                SetSlotSpellCooldownTimeVer2(40, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name5 == "LightstrikerBuff")
            {
                SetSlotSpellCooldownTimeVer2(40, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
        }
    }
}







namespace Spells
{
    public class LuxLightBinding : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 1300)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 1150, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 4, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class LuxLightBindingDummy : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? missileNetworkID = null;
            DestroyMissile(missileNetworkID);
        }
    }
}
namespace Spells
{
    public class LuxLightBindingMis : Script
    {
        public int[] effect0 = {60, 110, 160, 210, 260};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float distance = 0;
            bool? isStealthed = null;
            int damageAmount = 0;
            int stunLength = 0;
            float halfDamage = 0;
            float halfSnare = 0;
            //object? nextBuffVars = null;
            bool? canSee = null;
            //object? missileNetworkID = null;
            distance = DistanceBetweenObjects("Owner", "Target");
            isStealthed = GetStealthed(target);
            damageAmount = this.effect0[level];
            stunLength = 2;
            halfDamage = Math(damageAmount, MathOp.MO_MULTIPLY, 0.5f);
            halfSnare = Math(stunLength, MathOp.MO_MULTIPLY, 0.5f);
            if(charVars.FirstTargetHit == false)
            {
                if(isStealthed == false)
                {
                    ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.7f, 1, false, false, (ObjAIBase)attacker);
                    SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, stunLength, default, BuffAddType.REPLACE_EXISTING, BuffType.CHARM, 0, true, false, default, default);
                    charVars.FirstTargetHit = true;
                    if(target is not BaseTurret)
                    {
                        SpellBuffAdd((ObjAIBase)owner, target, "LuxIlluminatingFraulein", 1, 1, 6, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
                    }
                }
                else
                {
                    if(target is Champion)
                    {
                        ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.7f, 1, false, false, (ObjAIBase)attacker);
                        SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, stunLength, default, BuffAddType.REPLACE_EXISTING, BuffType.CHARM, 0, true, false, default, default);
                        charVars.FirstTargetHit = true;
                        if(target is not BaseTurret)
                        {
                            SpellBuffAdd((ObjAIBase)owner, target, "LuxIlluminatingFraulein", 1, 1, 6, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
                        }
                    }
                    else
                    {
                        canSee = CanSeeTarget(owner, target);
                        if(canSee == true)
                        {
                            ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.7f, 1, false, false, (ObjAIBase)attacker);
                            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, stunLength, default, BuffAddType.REPLACE_EXISTING, BuffType.CHARM, 0, true, false, default, default);
                            charVars.FirstTargetHit = true;
                            if(target is not BaseTurret)
                            {
                                SpellBuffAdd((ObjAIBase)owner, target, "LuxIlluminatingFraulein", 1, 1, 6, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
                            }
                        }
                    }
                }
            }
            else
            {
                if(isStealthed == false)
                {
                    ApplyDamage((ObjAIBase)attacker, target, halfDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.35f, 1, false, false, (ObjAIBase)attacker);
                    SpellBuffAdd((ObjAIBase)attacker, target, "LuxLightBinding", 1, 1, halfSnare, default, BuffAddType.REPLACE_EXISTING, BuffType.CHARM, 0, true, false, default, default);
                    if(target is not BaseTurret)
                    {
                        SpellBuffAdd((ObjAIBase)owner, target, "LuxIlluminatingFraulein", 1, 1, 6, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
                    }
                    DestroyMissile(missileNetworkID);
                }
                else
                {
                    if(target is Champion)
                    {
                        ApplyDamage((ObjAIBase)attacker, target, halfDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.35f, 1, false, false, (ObjAIBase)attacker);
                        SpellBuffAdd((ObjAIBase)attacker, target, "LuxLightBinding", 1, 1, halfSnare, default, BuffAddType.REPLACE_EXISTING, BuffType.CHARM, 0, true, false, default, default);
                        if(target is not BaseTurret)
                        {
                            SpellBuffAdd((ObjAIBase)owner, target, "LuxIlluminatingFraulein", 1, 1, 6, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
                        }
                        DestroyMissile(missileNetworkID);
                    }
                    else
                    {
                        canSee = CanSeeTarget(owner, target);
                        if(canSee == true)
                        {
                            ApplyDamage((ObjAIBase)attacker, target, halfDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.35f, 1, false, false, (ObjAIBase)attacker);
                            SpellBuffAdd((ObjAIBase)attacker, target, "LuxLightBinding", 1, 1, halfSnare, default, BuffAddType.REPLACE_EXISTING, BuffType.CHARM, 0, true, false, default, default);
                            if(target is not BaseTurret)
                            {
                                SpellBuffAdd((ObjAIBase)owner, target, "LuxIlluminatingFraulein", 1, 1, 6, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
                            }
                            DestroyMissile(missileNetworkID);
                        }
                    }
                }
            }
        }
    }
}

namespace Spells
{
    public class LuxLightstrikeKugel : Script
    {
        class OnMissileEnd_nextBuffVars
        {
            public int LSCooldown = 0;
            public object? Position = null;
        }
        public int[] effect0 = {9, 9, 9, 9, 9};
        public void OnMissileEnd(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            OnMissileEnd_nextBuffVars nextBuffVars = new();
            //object? missileEndPosition = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.LSCooldown = this.effect0[level];
            nextBuffVars.Position = missileEndPosition;
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0.25f, true, false, false, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            SealSpellSlot(2, SpellSlotType.SpellSlots, (ObjAIBase)attacker, true, SpellbookType.SPELLBOOK_CHAMPION);
            SetSlotSpellCooldownTimeVer2(0, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
        }
    }
}
namespace Spells
{
    public class LuxLightstrikeToggle : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "LuxLightstrikeKugel", (ObjAIBase)owner, default);
        }
    }
}
namespace Spells
{
    public class LuxMaliceCannon : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 ownerPos;
            float distance = 0;
            Vector3 beam1;
            Vector3 beam3;
            Minion? other1 = null;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            Vector3 damagePoint;
            //object? _ = null;
            targetPos = GetCastSpellTargetPos();
            teamID = GetTeamID(default);
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            beam1 = GetPointByUnitFacingOffset(owner, 145, 0);
            beam3 = GetPointByUnitFacingOffset(owner, 3300, 0);
            other1 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 450, default, false, (Champion)owner, default);
            other3 = SpawnMinion("hiu", "TestCube", "idle.lua", beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 450, default, false, (Champion)owner, default);
            LinkVisibility(other1, other3);
            SpellBuffAdd((ObjAIBase)attacker, other1, "LuxMaliceCannonDeathFix", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "LuxMaliceCannonDeathFix", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd(other3, other3, "ExpirationTimer", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd(other1, owner, "LuxMaliceCannonPartFix", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd(other1, owner, "LuxMaliceCannonPartFix2", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd(other1, other3, "LuxMaliceCannonBeam", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd(other1, other1, "LuxMaliceCannonBall", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 2, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            damagePoint = GetPointByUnitFacingOffset(owner, 1650, 0);
            SpellEffectCreate(out _, out _, "LuxMaliceCannon_beammiddle.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, damagePoint, default, default, default, false, default, default, default, default, default, default);
        }
    }
}



namespace Spells
{
    public class LuxMaliceCannonMis : Script
    {
        public int[] effect0 = {300, 400, 500};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 damagePoint;
            TeamId teamID;
            //object? unit = null;
            Particle? motaExplosion = null;
            //object? _ = null;
            Particle? asdf = null;
            //object? nextBuffVars = null;
            damagePoint = GetPointByUnitFacingOffset(owner, 1650, 0);
            teamID = GetTeamID(default);
            ForEachUnitInTargetRectangle(owner, damagePoint, 100, 1700, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", true, default, (unit) => 
            {
                BreakSpellShields(unit);
                if(GetBuffCountFromCaster(unit, attacker, "LuxIlluminatingFraulein") > 0)
                {
                    teamID = GetTeamID(default);
                    ApplyDamage((ObjAIBase)attacker, unit, charVars.IlluminateDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, false, false, (ObjAIBase)attacker);
                    SpellEffectCreate(out motaExplosion, out _, "LuxPassive_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, false, default, default, default);
                    SpellBuffRemove(unit, "LuxIlluminatingFraulein", (ObjAIBase)attacker, default);
                }
                SpellEffectCreate(out asdf, out _, "LuxMaliceCannon_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, false, default, default, default);
                ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                if(unit is not BaseTurret)
                {
                    SpellBuffAdd((ObjAIBase)owner, unit, "LuxIlluminatingFraulein", 1, 1, 6, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
            });
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Vector3 damagePoint;
            damagePoint = GetPointByUnitFacingOffset(owner, 1650, 0);
        }
    }
}




namespace Spells
{
    public class LuxPrismaticWave : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? DamageBlock = null;
        }
        public int[] effect0 = {80, 105, 130, 155, 180};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            int baseDamageBlock = 0;
            float abilityPower = 0;
            float bonusHealth = 0;
            float damageBlock = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 1000)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 950, 0);
            }
            baseDamageBlock = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(owner);
            bonusHealth = Math(abilityPower, MathOp.MO_MULTIPLY, 0.35f);
            damageBlock = Math(baseDamageBlock, MathOp.MO_ADD, bonusHealth);
            nextBuffVars.DamageBlock = damageBlock;
            SpellBuffAdd((ObjAIBase)attacker, target, "LuxPrismaticWaveShieldSelf", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 3, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class LuxPrismaticWaveMissile : Script
    {
        class OnMissileEnd_nextBuffVars
        {
            public object? DamageBlock = null;
        }
        class TargetExecute_nextBuffVars
        {
            public object? DamageBlock = null;
        }
        public int[] effect0 = {80, 105, 130, 155, 180};
        public int[] effect1 = {80, 105, 130, 155, 180};
        public void OnMissileEnd(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            int baseDamageBlock = 0;
            float abilityPower = 0;
            float bonusHealth = 0;
            float damageBlock = 0;
            OnMissileEnd_nextBuffVars nextBuffVars = new();
            level = GetCastSpellLevelPlusOne(default);
            baseDamageBlock = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(attacker);
            bonusHealth = Math(abilityPower, MathOp.MO_MULTIPLY, 0.35f);
            damageBlock = Math(baseDamageBlock, MathOp.MO_ADD, bonusHealth);
            nextBuffVars.DamageBlock = damageBlock;
            SpellBuffAdd((ObjAIBase)attacker, attacker, "LuxPrismaticWaveShieldSelf", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int baseDamageBlock = 0;
            float abilityPower = 0;
            float bonusHealth = 0;
            float damageBlock = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(attacker != target)
            {
                baseDamageBlock = this.effect1[level];
                abilityPower = GetFlatMagicDamageMod(owner);
                bonusHealth = Math(abilityPower, MathOp.MO_MULTIPLY, 0.35f);
                damageBlock = Math(baseDamageBlock, MathOp.MO_ADD, bonusHealth);
                nextBuffVars.DamageBlock = damageBlock;
                SpellBuffAdd((ObjAIBase)attacker, target, "LuxPrismaticWaveShield", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
        }
    }
}










namespace Spells
{
    public class MaliceandSpite : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, target, "MaliceandSpite", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}







namespace Spells
{
    public class MalzaharVoidlingBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Champion? other1 = null;
            float dmg = 0;
            teamID = GetTeamID(default);
            other1 = GetChampionBySkinName("Malzahar", teamID);
            dmg = GetTotalAttackDamage(owner);
            ApplyDamage(other1, target, dmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class MalzaharVoidlingBasicAttack2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Champion? other1 = null;
            float dmg = 0;
            teamID = GetTeamID(default);
            other1 = GetChampionBySkinName("Malzahar", teamID);
            dmg = GetTotalAttackDamage(owner);
            ApplyDamage(other1, target, dmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class MalzaharVoidlingBasicAttack3 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Champion? other1 = null;
            float dmg = 0;
            teamID = GetTeamID(default);
            other1 = GetChampionBySkinName("Malzahar", teamID);
            dmg = GetTotalAttackDamage(owner);
            ApplyDamage(other1, target, dmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}








namespace Spells
{
    public class ManiacalCloak : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float TimeLastHit = 0;
            public bool? BuffAdded = null;
            public bool? WillFade = null;
            public int TotalCostPerTick = 0;
            public float StealthDelay = 0;
        }
        public int[] effect0 = {10, 10, 10};
        public float[] effect1 = {2.25f, 1.75f, 1.25f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "ManiacalCloak") > 0)
            {
                SpellBuffRemove(owner, "ManiacalCloak", (ObjAIBase)owner, default);
            }
            else
            {
                nextBuffVars.TimeLastHit = GetTime();
                nextBuffVars.BuffAdded = false;
                nextBuffVars.WillFade = false;
                nextBuffVars.TotalCostPerTick = this.effect0[level];
                nextBuffVars.StealthDelay = this.effect1[level];
                SpellBuffAdd((ObjAIBase)attacker, owner, default, 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, default, default, default, default);
            }
        }
    }
}
namespace Spells
{
    public class MaokaiDrain3 : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public float DefenseBonus = 0;
            public float CCReduction = 0;
            public int ManaCost = 0;
            public int BaseDamage = 0;
            public int BonusCap = 0;
        }
        public float[] effect0 = {0.8f, 0.8f, 0.8f};
        public float[] effect1 = {0.8f, 0.75f, 0.7f};
        public int[] effect2 = {15, 15, 15};
        public int[] effect3 = {100, 150, 200};
        public int[] effect4 = {200, 250, 300};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.DefenseBonus = this.effect0[level];
            nextBuffVars.CCReduction = this.effect1[level];
            nextBuffVars.ManaCost = this.effect2[level];
            nextBuffVars.BaseDamage = this.effect3[level];
            nextBuffVars.BonusCap = this.effect4[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "MaokaiDrain3", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class MaokaiDrain3Toggle : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "MaokaiDrain3", (ObjAIBase)owner, default);
        }
    }
}






namespace Spells
{
    public class MaokaiSapling2 : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Region? asdf = null;
            Vector3 ownerPos;
            float distance = 0;
            Minion? other2 = null;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            asdf = AddPosPerceptionBubble(teamID, 250, targetPos, 1, default, false);
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(targetPos, ownerPos);
            FaceDirection(owner, targetPos);
            other2 = SpawnMinion("k", "TestCubeRender10Vision", "idle.lua", targetPos, teamID, true, true, false, true, true, true, 1, default, true, (Champion)attacker, default);
            SpellBuffAdd((ObjAIBase)attacker, other2, "MaokaiSapling2", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellCast((ObjAIBase)owner, other2, targetPos, targetPos, false, 2, SpellSlotType.ExtraSlots, level, false, false, false, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other2, "ExpirationTimer", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class MaokaiSapling2Boom : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? MineDamageAmount = null;
            public bool? Sprung = null;
        }
        public int[] effect0 = {5, 5, 5, 5, 5};
        public int[] effect1 = {40, 75, 110, 145, 180};
        public int[] effect2 = {80, 130, 180, 230, 280};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int buffDuration = 0;
            Particle? particle = null;
            //object? _ = null;
            int damageAmount = 0;
            int mineDamageAmount = 0;
            //object? unit = null;
            Minion? other1 = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetUnitPosition(target);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            teamID = GetTeamID(default);
            buffDuration = this.effect0[level];
            SpellEffectCreate(out particle, out _, "maoki_sapling_unit_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, default, default, targetPos, default, default, targetPos, true, default, default, false, false, default, default);
            damageAmount = this.effect1[level];
            mineDamageAmount = this.effect2[level];
            ForEachUnitInTargetArea((ObjAIBase)attacker, targetPos, 240, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                ApplyDamage((ObjAIBase)attacker, unit, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
            });
            other1 = SpawnMinion("DoABarrelRoll", "MaokaiSproutling", "idle.lua", targetPos, teamID ?? TEAM_CASTER, false, false, false, false, false, false, 0, false, false, (Champion)attacker, default);
            SetCanMove(other1, default);
            SetCanAttack(other1, default);
            nextBuffVars.MineDamageAmount = mineDamageAmount;
            nextBuffVars.Sprung = false;
            SpellBuffAdd((ObjAIBase)attacker, other1, "MaokaiSaplingMine", 1, 1, 35, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class MaokaiTrunkLine : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public int[] effect0 = {70, 115, 160, 205, 250};
        public float[] effect1 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        Particle? partname = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            int baseDamage = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            TeamId teamOfOwner;
            //object? _ = null;
            //object? unit = null;
            bool? isStealthed = null;
            Particle? a = null;
            bool? canSee = null;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 650)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 600, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            baseDamage = this.effect0[level];
            nextBuffVars.MoveSpeedMod = this.effect1[level];
            teamOfOwner = GetTeamID(default);
            SpellEffectCreate(out this.partname, out _, "maoki_trunkSmash_cas.troy", default, teamOfOwner, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, owner.Position, target, default, default, true, default, default, default, default, default, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                SpellBuffRemove(unit, "MaokaiTrunkLine", (ObjAIBase)owner, default);
            });
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                if(GetBuffCountFromCaster(unit, owner, "MaokaiTrunkLine") == 0)
                {
                    isStealthed = GetStealthed(unit);
                    if(isStealthed == false)
                    {
                        SpellBuffAdd((ObjAIBase)owner, unit, "MaokaiTrunkLine", 1, 1, 2, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        BreakSpellShields(unit);
                        SpellEffectCreate(out a, out _, "PowerballHit.troy", default, teamOfOwner, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, default, default, default, default);
                        ApplyDamage((ObjAIBase)attacker, unit, baseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
                        SpellBuffAdd((ObjAIBase)attacker, unit, "Slow", 100, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, true, false, default);
                        SpellBuffAdd((ObjAIBase)attacker, unit, "MaokaiTrunkLineStun", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                    }
                    else
                    {
                        if(unit is Champion)
                        {
                            SpellBuffAdd((ObjAIBase)owner, unit, "MaokaiTrunkLine", 1, 1, 2, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                            BreakSpellShields(unit);
                            SpellEffectCreate(out a, out _, "PowerballHit.troy", default, teamOfOwner, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, default, default, default, default);
                            ApplyDamage((ObjAIBase)attacker, unit, baseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
                            SpellBuffAdd((ObjAIBase)attacker, unit, "Slow", 100, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, true, false, default);
                            SpellBuffAdd((ObjAIBase)attacker, unit, "MaokaiTrunkLineStun", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                        }
                        else
                        {
                            canSee = CanSeeTarget(owner, unit);
                            if(canSee == true)
                            {
                                SpellBuffAdd((ObjAIBase)owner, unit, "MaokaiTrunkLine", 1, 1, 2, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                                BreakSpellShields(unit);
                                SpellEffectCreate(out a, out _, "PowerballHit.troy", default, teamOfOwner, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, default, default, default, default);
                                ApplyDamage((ObjAIBase)attacker, unit, baseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
                                SpellBuffAdd((ObjAIBase)attacker, unit, "Slow", 100, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, true, false, default);
                                SpellBuffAdd((ObjAIBase)attacker, unit, "MaokaiTrunkLineStun", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                            }
                        }
                    }
                }
            });
        }
    }
}
namespace Spells
{
    public class MaokaiTrunkLineMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public int[] effect0 = {70, 115, 160, 205, 250};
        public float[] effect1 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int baseDamage = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            TeamId casterID;
            bool? isStealthed = null;
            Particle? asdf = null;
            //object? _ = null;
            bool? canSee = null;
            if(GetBuffCountFromCaster(target, owner, "MaokaiTrunkLine") == 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                baseDamage = this.effect0[level];
                nextBuffVars.MoveSpeedMod = this.effect1[level];
                casterID = GetTeamID(default);
                isStealthed = GetStealthed(target);
                if(isStealthed == false)
                {
                    SpellBuffAdd((ObjAIBase)owner, target, "MaokaiTrunkLine", 1, 1, 2, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    BreakSpellShields(target);
                    SpellEffectCreate(out asdf, out _, "maoki_trunkSmash_unit_tar_02.troy", default, casterID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                    SpellEffectCreate(out asdf, out _, "maoki_trunkSmash_unit_tar.troy", default, casterID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                    ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
                    SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, true, false, default);
                }
                else
                {
                    if(target is Champion)
                    {
                        SpellBuffAdd((ObjAIBase)owner, target, "MaokaiTrunkLine", 1, 1, 2, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        BreakSpellShields(target);
                        SpellEffectCreate(out asdf, out _, "maoki_trunkSmash_unit_tar_02.troy", default, casterID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                        SpellEffectCreate(out asdf, out _, "maoki_trunkSmash_unit_tar.troy", default, casterID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                        ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
                        SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, true, false, default);
                    }
                    else
                    {
                        canSee = CanSeeTarget(owner, target);
                        if(canSee == true)
                        {
                            SpellBuffAdd((ObjAIBase)owner, target, "MaokaiTrunkLine", 1, 1, 2, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                            BreakSpellShields(target);
                            SpellEffectCreate(out asdf, out _, "maoki_trunkSmash_unit_tar_02.troy", default, casterID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                            SpellEffectCreate(out asdf, out _, "maoki_trunkSmash_unit_tar.troy", default, casterID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                            ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
                            SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, true, false, default);
                        }
                    }
                }
            }
        }
    }
}

namespace Spells
{
    public class MaokaiUnstableGrowth : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int BaseDamage = 0;
            public float RootDuration = 0;
        }
        public int[] effect0 = {80, 115, 150, 185, 220};
        public float[] effect1 = {1, 1.25f, 1.5f, 1.75f, 2};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.BaseDamage = this.effect0[level];
            nextBuffVars.RootDuration = this.effect1[level];
            SpellBuffAdd((ObjAIBase)target, owner, "MaokaiUnstableGrowth", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}








namespace Spells
{
    public class Masochism : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float DamageMod = 0;
            public int BaseIncrease = 0;
        }
        public int[] effect0 = {25, 35, 45, 55, 65};
        public int[] effect1 = {-25, -35, -45, -55, -65};
        public float[] effect2 = {0.4f, 0.55f, 0.7f, 0.85f, 1};
        public int[] effect3 = {40, 55, 70, 85, 100};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            int healthCost = 0;
            float temp1 = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level > 0)
            {
                healthCost = this.effect0[level];
                temp1 = GetHealth(owner);
                if(temp1 >= healthCost)
                {
                    SetReturnValue(default);
                }
                else
                {
                    SetReturnValue(default);
                }
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int healthCost = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            healthCost = this.effect1[level];
            nextBuffVars.DamageMod = this.effect2[level];
            nextBuffVars.BaseIncrease = this.effect3[level];
            IncHealth(owner, healthCost, owner);
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class MasterYiDoubleStrike : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseDamage = 0;
            //object? nextBuffVars = null;
            baseDamage = GetBaseAttackDamage(owner);
            if(target is ObjAIBase)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 0.15f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, default);
            }
            ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, default);
            RemoveOverrideAutoAttack(owner, false);
            SpellBuffRemove(owner, "DoubleStrikeIcon", (ObjAIBase)owner, default);
        }
    }
}






namespace Spells
{
    public class Meditate : Script
    {
        class ChannelingStart_nextBuffVars
        {
            public object? HealthTick = null;
        }
        public float[] effect0 = {11.7f, 23.3f, 35, 46.7f, 58.3f};
        public float[] effect1 = {25, 50, 83.3f, 125, 183.3f};
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float healthTick = 0;
            float abilityPower = 0;
            ChannelingStart_nextBuffVars nextBuffVars = new();
            healthTick = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(owner);
            abilityPower = Math(abilityPower, MathOp.MO_MULTIPLY, 0.33f);
            healthTick = Math(healthTick, MathOp.MO_ADD, abilityPower);
            nextBuffVars.HealthTick = healthTick;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 4.9f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.HEAL, 0, true, false, default, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            IncHealth(owner, this.effect1[level], owner);
            SpellBuffRemove(owner, "Meditate", (ObjAIBase)owner, default);
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "Meditate", (ObjAIBase)owner, default);
        }
    }
}
namespace Spells
{
    public class MegaAdhesive : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float Duration = 0;
            public float SlowPercent = 0;
        }
        public float[] effect0 = {5.5f, 5.5f, 5.5f, 5.5f, 5.5f};
        public float[] effect1 = {-0.35f, -0.45f, -0.55f, -0.65f, -0.75f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 castPos;
            Minion? other2 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            teamID = GetTeamID(default);
            castPos = GetCastSpellTargetPos();
            other2 = SpawnMinion("k", "SpellBook1", "idle.lua", castPos, teamID, true, true, false, false, true, false, 0, default, true, default, default);
            nextBuffVars.Duration = this.effect0[level];
            nextBuffVars.SlowPercent = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, other2, default, 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)attacker, other2, "ExpirationTimer", 1, 1, 1 + nextBuffVars.Duration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
    }
}








namespace Spells
{
    public class MissFortuneBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class MissFortuneBasicAttack2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}


namespace Spells
{
    public class MissFortuneBulletTime : Script
    {
        //object? castPosition = null;
        float counter = 0;
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? castPosition = null;
            FaceDirection(owner, castPosition);
        }
        public void ChannelingUpdateActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            object? castPosition = null;
            Particle? goodluck = null;
            //object? _ = null;
            Vector3 point1;
            Vector3 point2;
            Vector3 point3;
            Vector3 point4;
            Vector3 point5;
            Vector3 point6;
            Vector3 point7;
            Vector3 point8;
            Vector3 point9;
            Vector3 point0;
            float count = 0;
            float modValue = 0;
            //object? nextBuffVars = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            castPosition = this.castPosition;
            this.counter = Math(this.counter, MathOp.MO_ADD, 1);
            SpellEffectCreate(out goodluck, out _, "missFortune_ult_cas_muzzle_flash.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "BUFFBONE_CSTM_WEAPON_3", default, owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(out goodluck, out _, "missFortune_ult_cas_muzzle_flash.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "BUFFBONE_CSTM_WEAPON_1", default, owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(out goodluck, out _, "missFortune_left_ult_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "L_weapon", default, owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(out goodluck, out _, "missFortune_ult_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "R_weapon", default, owner, default, default, false, default, default, default, default, default, default);
            point1 = GetPointByUnitFacingOffset(owner, 500, 15);
            point2 = GetPointByUnitFacingOffset(owner, 500, 9);
            point3 = GetPointByUnitFacingOffset(owner, 500, 3);
            point4 = GetPointByUnitFacingOffset(owner, 500, 357);
            point5 = GetPointByUnitFacingOffset(owner, 500, 351);
            point6 = GetPointByUnitFacingOffset(owner, 500, 345);
            point7 = GetPointByUnitFacingOffset(owner, 500, 350);
            point8 = GetPointByUnitFacingOffset(owner, 500, 345);
            point9 = GetPointByUnitFacingOffset(owner, 500, 340);
            point0 = GetPointByUnitFacingOffset(owner, 500, 0);
            count = GetBuffCountFromAll(owner, "MissFortuneWaves");
            modValue = Math(count, MathOp.MO_MODULO, 2);
            if(modValue == 0)
            {
                SpellCast((ObjAIBase)owner, default, point1, point1, false, 2, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                SpellCast((ObjAIBase)owner, default, point2, point2, false, 2, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                SpellCast((ObjAIBase)owner, default, point3, point3, false, 2, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                SpellCast((ObjAIBase)owner, default, point4, point4, false, 2, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                SpellCast((ObjAIBase)owner, default, point5, point5, false, 2, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                SpellCast((ObjAIBase)owner, default, point6, point6, false, 2, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                SpellCast((ObjAIBase)owner, default, point0, point8, false, 3, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            }
            if(modValue > 0)
            {
                SpellCast((ObjAIBase)owner, default, point1, point1, false, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                SpellCast((ObjAIBase)owner, default, point2, point2, false, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                SpellCast((ObjAIBase)owner, default, point3, point3, false, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                SpellCast((ObjAIBase)owner, default, point4, point4, false, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                SpellCast((ObjAIBase)owner, default, point5, point5, false, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                SpellCast((ObjAIBase)owner, default, point6, point6, false, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                SpellCast((ObjAIBase)owner, default, point0, point8, false, 3, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, "MissFortuneWaves", 8, 1, 4, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            count = Math(count, MathOp.MO_ADD, 1);
            if(count >= 8)
            {
                StopChanneling((ObjAIBase)owner, ChannelingStopCondition.Success, ChannelingStopSource.TimeCompleted);
            }
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "MissFortuneBulletSound", (ObjAIBase)owner, default);
            SpellBuffClear(owner, "MissFortuneWaves");
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "MissFortuneBulletSound", (ObjAIBase)owner, default);
            SpellBuffClear(owner, "MissFortuneWaves");
        }
    }
}
namespace Spells
{
    public class MissFortuneBulletTimeCast : Script
    {
        public int[] effect0 = {6, 9, 12, 15, 18};
        public float[] effect1 = {0.2f, 0.25f, 0.3f, 0.35f, 0.4f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseDmg = 0;
            int dmgPerLvl = 0;
            float perLevel = 0;
            float multiDmg = 0;
            float finalDmg = 0;
            int count = 0;
            baseDmg = GetTotalAttackDamage(owner);
            dmgPerLvl = this.effect0[level];
            perLevel = this.effect1[level];
            multiDmg = Math(baseDmg, MathOp.MO_MULTIPLY, perLevel);
            finalDmg = Math(multiDmg, MathOp.MO_ADD, dmgPerLvl);
            if(target is Champion)
            {
                finalDmg = Math(2, MathOp.MO_MULTIPLY, finalDmg);
                ApplyDamage((ObjAIBase)attacker, target, finalDmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, finalDmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
            }
            count = GetBuffCountFromAll(target, default);
        }
    }
}
namespace Spells
{
    public class MissFortuneBullets : Script
    {
        public int[] effect0 = {65, 95, 125, 185, 230};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int count = 0;
            int count1 = 0;
            TeamId teamID;
            //object? nextBuffVars = null;
            int baseDamage = 0;
            float totalDamage = 0;
            float baseAtkDmg = 0;
            float bonusDamage = 0;
            float aPPreMod = 0;
            float aPPostMod = 0;
            float aDAPBonus = 0;
            float finalDamage = 0;
            Particle? asdf = null;
            //object? _ = null;
            count = GetBuffCountFromAll(target, "MissfortuneBulletHolder");
            if(count <= 7)
            {
                count1 = GetBuffCountFromAll(target, "MissFortuneWaveHold");
                if(count1 < 1)
                {
                    teamID = GetTeamID(default);
                    SpellBuffAdd((ObjAIBase)attacker, target, "MissFortuneWaveHold", 2, 1, 0.05f, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)attacker, target, "MissfortuneBulletHolder", 9, 1, 6, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                    baseDamage = this.effect0[level];
                    totalDamage = GetTotalAttackDamage(owner);
                    baseAtkDmg = GetBaseAttackDamage(owner);
                    bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseAtkDmg);
                    bonusDamage = Math(0.45f, MathOp.MO_MULTIPLY, bonusDamage);
                    aPPreMod = GetFlatMagicDamageMod(owner);
                    aPPostMod = Math(0.2f, MathOp.MO_MULTIPLY, aPPreMod);
                    aDAPBonus = Math(bonusDamage, MathOp.MO_ADD, aPPostMod);
                    finalDamage = Math(baseDamage, MathOp.MO_ADD, aDAPBonus);
                    ApplyDamage((ObjAIBase)owner, target, finalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, false, false, (ObjAIBase)attacker);
                    SpellEffectCreate(out asdf, out _, "missFortune_bulletTime_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class MissFortuneBulletsClone : Script
    {
        public int[] effect0 = {65, 95, 125, 185, 230};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int count = 0;
            int count1 = 0;
            TeamId teamID;
            //object? nextBuffVars = null;
            int baseDamage = 0;
            float totalDamage = 0;
            float baseAtkDmg = 0;
            float bonusDamage = 0;
            float aPPreMod = 0;
            float aPPostMod = 0;
            float aDAPBonus = 0;
            float finalDamage = 0;
            Particle? asdf = null;
            //object? _ = null;
            count = GetBuffCountFromAll(target, "MissfortuneBulletHolder");
            if(count <= 7)
            {
                count1 = GetBuffCountFromAll(target, "MissFortunePlaceholder");
                if(count1 < 1)
                {
                    teamID = GetTeamID(default);
                    SpellBuffAdd((ObjAIBase)attacker, target, "MissFortunePlaceholder", 2, 1, 0.05f, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)attacker, target, "MissfortuneBulletHolder", 9, 1, 6, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                    baseDamage = this.effect0[level];
                    totalDamage = GetTotalAttackDamage(owner);
                    baseAtkDmg = GetBaseAttackDamage(owner);
                    bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseAtkDmg);
                    bonusDamage = Math(0.45f, MathOp.MO_MULTIPLY, bonusDamage);
                    aPPreMod = GetFlatMagicDamageMod(owner);
                    aPPostMod = Math(0.2f, MathOp.MO_MULTIPLY, aPPreMod);
                    aDAPBonus = Math(bonusDamage, MathOp.MO_ADD, aPPostMod);
                    finalDamage = Math(baseDamage, MathOp.MO_ADD, aDAPBonus);
                    ApplyDamage((ObjAIBase)owner, target, finalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, false, false, (ObjAIBase)attacker);
                    SpellEffectCreate(out asdf, out _, "missFortune_bulletTime_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class MissFortuneCritAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float baseAttackDamage = 0;
            hitResult = HitResult.HIT_Critical;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}



namespace Spells
{
    public class MissFortuneRShotExtra : Script
    {
        public int[] effect0 = {25, 60, 95, 130, 165};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            TeamId teamID;
            float attackDamage = 0;
            float attackBonus = 0;
            int abilityDamage = 0;
            float damageToDeal = 0;
            float ricochetDamage = 0;
            Particle? asdf = null;
            //object? _ = null;
            if(hitResult == HitResult.HIT_Critical)
            {
                hitResult = HitResult.HIT_Normal;
            }
            if(hitResult == HitResult.HIT_Dodge)
            {
                hitResult = HitResult.HIT_Normal;
            }
            if(hitResult == HitResult.HIT_Miss)
            {
                hitResult = HitResult.HIT_Normal;
            }
            teamID = GetTeamID(default);
            attackDamage = GetTotalAttackDamage(attacker);
            attackBonus = Math(0.75f, MathOp.MO_MULTIPLY, attackDamage);
            abilityDamage = this.effect0[level];
            damageToDeal = Math(attackBonus, MathOp.MO_ADD, abilityDamage);
            ricochetDamage = Math(damageToDeal, MathOp.MO_MULTIPLY, 1.15f);
            ApplyDamage((ObjAIBase)attacker, target, ricochetDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0.65f, 0, false, true, (ObjAIBase)attacker);
            SpellEffectCreate(out asdf, out _, "missFortune_richochet_tar_second_02.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
            SpellEffectCreate(out asdf, out _, "missFortune_richochet_tar_second.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
        }
    }
}

namespace Spells
{
    public class MissFortuneRicochetShot : Script
    {
        public int[] effect0 = {25, 60, 95, 130, 165};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            TeamId teamID;
            float attackDamage = 0;
            float attackBonus = 0;
            int abilityDamage = 0;
            float damageToDeal = 0;
            Particle? asdf = null;
            //object? _ = null;
            Minion? other1 = null;
            Vector3 leftPos;
            Vector3 rightPos;
            Minion? other2 = null;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            int eatHydra = 0;
            //object? unit = null;
            bool? isStealthed = null;
            if(hitResult == HitResult.HIT_Critical)
            {
                hitResult = HitResult.HIT_Normal;
            }
            if(hitResult == HitResult.HIT_Dodge)
            {
                hitResult = HitResult.HIT_Normal;
            }
            if(hitResult == HitResult.HIT_Miss)
            {
                hitResult = HitResult.HIT_Normal;
            }
            teamID = GetTeamID(default);
            attackDamage = GetTotalAttackDamage(attacker);
            attackBonus = Math(0.75f, MathOp.MO_MULTIPLY, attackDamage);
            abilityDamage = this.effect0[level];
            damageToDeal = Math(attackBonus, MathOp.MO_ADD, abilityDamage);
            ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, true, (ObjAIBase)attacker);
            SpellEffectCreate(out asdf, out _, "missFortune_richochet_tar_first.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
            other1 = SpawnMinion("LocationFinder", "TestCube", "idle.lua", target.Position, teamID, true, true, true, true, true, true, 0, default, true, default, default);
            FaceDirection(other1, attacker.Position);
            leftPos = GetPointByUnitFacingOffset(other1, 500, 90);
            rightPos = GetPointByUnitFacingOffset(other1, 500, 270);
            other2 = SpawnMinion("LocationFinder", "TestCube", "idle.lua", leftPos, teamID, true, true, true, true, true, true, 0, default, true, default, default);
            other3 = SpawnMinion("LocationFinder", "TestCube", "idle.lua", rightPos, teamID, true, true, true, true, true, true, 0, default, true, default, default);
            FaceDirection(other2, attacker.Position);
            FaceDirection(other3, attacker.Position);
            SpellBuffAdd((ObjAIBase)attacker, other1, "ExpirationTimer", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)attacker, other2, "ExpirationTimer", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "ExpirationTimer", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            targetPos = GetUnitPosition(other1);
            eatHydra = 0;
            ForEachUnitInTargetArea((ObjAIBase)attacker, other1.Position, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                if(IsBehind(other1, unit))
                {
                    isStealthed = GetStealthed(unit);
                    if(isStealthed == false)
                    {
                        SpellBuffAdd((ObjAIBase)attacker, unit, "MissFortuneRShotHolder", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                    }
                }
            });
            ForEachUnitInTargetArea((ObjAIBase)attacker, other2.Position, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "MissFortuneRShotHolder", true, (unit) => 
            {
                isStealthed = GetStealthed(unit);
                if(isStealthed == false)
                {
                    SpellBuffRemove(unit, "MissFortuneRShotHolder", (ObjAIBase)attacker, default);
                    SpellBuffAdd((ObjAIBase)attacker, unit, "MissFortuneRicochetShot", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                }
            });
            ForEachUnitInTargetArea((ObjAIBase)attacker, other3.Position, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "MissFortuneRShotHolder", true, (unit) => 
            {
                isStealthed = GetStealthed(unit);
                if(isStealthed == false)
                {
                    SpellBuffRemove(unit, "MissFortuneRShotHolder", (ObjAIBase)attacker, default);
                    SpellBuffAdd((ObjAIBase)attacker, unit, "MissFortuneRicochetShot", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                }
            });
            ForEachUnitInTargetAreaRandom((ObjAIBase)attacker, other1.Position, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "MissFortuneRShotHolder", true, 1, (unit) => 
            {
                SpellCast((ObjAIBase)attacker, unit, unit, unit, true, 0, SpellSlotType.ExtraSlots, level, false, true, false, false, false, targetPos);
                eatHydra = 1;
            });
            if(eatHydra < 1)
            {
                ForEachUnitInTargetAreaRandom((ObjAIBase)attacker, other1.Position, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "MissFortuneRicochetShot", true, 1, (unit) => 
                {
                    SpellCast((ObjAIBase)attacker, unit, unit, unit, true, 0, SpellSlotType.ExtraSlots, level, false, true, false, false, false, targetPos);
                });
            }
        }
    }
}



namespace Spells
{
    public class MissFortuneScattershot : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Region? bubbleID = null;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            teamOfOwner = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            bubbleID = AddPosPerceptionBubble(teamOfOwner, 200, targetPos, 2.6f, default, false);
            other3 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", targetPos, teamOfOwner ?? TEAM_CASTER, true, true, true, true, true, true, 0, default, true, (Champion)owner, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "MissFortuneScatterParticle", 1, 1, 2.75f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
    }
}


namespace Spells
{
    public class MissFortuneViciousStrikes : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float ASMod = 0;
        }
        public float[] effect0 = {0.3f, 0.35f, 0.4f, 0.45f, 0.5f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.ASMod = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}




namespace Spells
{
    public class MissileBarrage : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int count = 0;
            count = GetBuffCountFromAll(owner, "MissileBarrage");
            if(count <= 1)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 pos;
            int count = 0;
            Vector3 ownerPos;
            float distance = 0;
            int barrageCount = 0;
            //object? nextBuffVars = null;
            pos = GetCastSpellTargetPos();
            count = GetBuffCountFromAll(owner, "MissileBarrage");
            if(count >= 8)
            {
                SpellBuffRemove(owner, "MissileBarrage", (ObjAIBase)owner, charVars.ChargeCooldown);
            }
            else
            {
                SpellBuffRemove(owner, default, (ObjAIBase)owner, 0);
            }
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, pos);
            FaceDirection(owner, pos);
            if(distance > 1200)
            {
                pos = GetPointByUnitFacingOffset(owner, 1150, 0);
            }
            if(GetBuffCountFromCaster(owner, owner, "MBCheck2") > 0)
            {
                SpellCast((ObjAIBase)owner, default, pos, pos, false, 2, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
                SpellBuffRemove(owner, "MBCheck2", (ObjAIBase)owner, 0);
            }
            else
            {
                SpellCast((ObjAIBase)owner, default, pos, pos, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            }
            barrageCount = GetBuffCountFromAll(owner, "CorkiMissileBarrageNC");
            if(barrageCount == 3)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "MBCheck2", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                SpellBuffRemoveStacks(owner, owner, "CorkiMissileBarrageNC", 3);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "CorkiMissileBarrageNC", 3, 1, 25000, default, BuffAddType.STACKS_AND_RENEWS, BuffType.AURA, 0, true, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class MissileBarrageMissile : Script
    {
        public int[] effect0 = {120, 190, 260};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            bool? isStealthed = null;
            int baseDamage = 0;
            float totalAttackDamage = 0;
            float bonusAttackDamage = 0;
            float damageAmount = 0;
            Particle? part = null;
            //object? _ = null;
            //object? unit = null;
            //object? missileNetworkID = null;
            bool? canSee = null;
            teamID = GetTeamID(default);
            isStealthed = GetStealthed(target);
            baseDamage = this.effect0[level];
            totalAttackDamage = GetTotalAttackDamage(owner);
            bonusAttackDamage = Math(0.2f, MathOp.MO_MULTIPLY, totalAttackDamage);
            damageAmount = Math(bonusAttackDamage, MathOp.MO_ADD, baseDamage);
            if(isStealthed == false)
            {
                SpellEffectCreate(out part, out _, "corki_MissleBarrage_std_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", target.Position, target, default, default, true, default, default, false, false, default, default);
                targetPos = GetUnitPosition(target);
                ForEachUnitInTargetArea((ObjAIBase)attacker, targetPos, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                {
                    BreakSpellShields(unit);
                    ApplyDamage((ObjAIBase)attacker, unit, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.3f, 1, false, false, (ObjAIBase)attacker);
                });
                DestroyMissile(missileNetworkID);
            }
            else
            {
                if(target is Champion)
                {
                    SpellEffectCreate(out part, out _, "corki_MissleBarrage_std_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", target.Position, target, default, default, true, default, default, false, false, default, default);
                    targetPos = GetUnitPosition(target);
                    ForEachUnitInTargetArea((ObjAIBase)attacker, targetPos, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                    {
                        BreakSpellShields(unit);
                        ApplyDamage((ObjAIBase)attacker, unit, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.3f, 1, false, false, (ObjAIBase)attacker);
                    });
                    DestroyMissile(missileNetworkID);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        SpellEffectCreate(out part, out _, "corki_MissleBarrage_std_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", target.Position, target, default, default, true, default, default, false, false, default, default);
                        targetPos = GetUnitPosition(target);
                        ForEachUnitInTargetArea((ObjAIBase)attacker, targetPos, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                        {
                            BreakSpellShields(unit);
                            ApplyDamage((ObjAIBase)attacker, unit, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.3f, 1, false, false, (ObjAIBase)attacker);
                        });
                        DestroyMissile(missileNetworkID);
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class MissileBarrageMissile2 : Script
    {
        public int[] effect0 = {120, 190, 260};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            bool? isStealthed = null;
            int baseDamage = 0;
            float totalAttackDamage = 0;
            float bonusAttackDamage = 0;
            float damageAmount = 0;
            Particle? part = null;
            //object? _ = null;
            //object? unit = null;
            //object? missileNetworkID = null;
            bool? canSee = null;
            teamID = GetTeamID(default);
            isStealthed = GetStealthed(target);
            baseDamage = this.effect0[level];
            totalAttackDamage = GetTotalAttackDamage(owner);
            bonusAttackDamage = Math(0.2f, MathOp.MO_MULTIPLY, totalAttackDamage);
            damageAmount = Math(bonusAttackDamage, MathOp.MO_ADD, baseDamage);
            if(isStealthed == false)
            {
                SpellEffectCreate(out part, out _, "corki_MissleBarrage_DD_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", target.Position, target, default, default, true, default, default, false, false, default, default);
                targetPos = GetUnitPosition(target);
                ForEachUnitInTargetArea((ObjAIBase)attacker, targetPos, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                {
                    BreakSpellShields(unit);
                    ApplyDamage((ObjAIBase)attacker, unit, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1.5f, 0.3f, 1, false, false, (ObjAIBase)attacker);
                });
                DestroyMissile(missileNetworkID);
            }
            else
            {
                if(target is Champion)
                {
                    SpellEffectCreate(out part, out _, "corki_MissleBarrage_DD_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", target.Position, target, default, default, true, default, default, false, false, default, default);
                    targetPos = GetUnitPosition(target);
                    ForEachUnitInTargetArea((ObjAIBase)attacker, targetPos, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                    {
                        BreakSpellShields(unit);
                        ApplyDamage((ObjAIBase)attacker, unit, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1.5f, 0.3f, 1, false, false, (ObjAIBase)attacker);
                    });
                    DestroyMissile(missileNetworkID);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        SpellEffectCreate(out part, out _, "corki_MissleBarrage_DD_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", target.Position, target, default, default, true, default, default, false, false, default, default);
                        targetPos = GetUnitPosition(target);
                        ForEachUnitInTargetArea((ObjAIBase)attacker, targetPos, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                        {
                            BreakSpellShields(unit);
                            ApplyDamage((ObjAIBase)attacker, unit, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1.5f, 0.3f, 1, false, false, (ObjAIBase)attacker);
                        });
                        DestroyMissile(missileNetworkID);
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class MockingShout : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public int DamageMod = 0;
        }
        public float[] effect0 = {-0.3f, -0.375f, -0.45f, -0.525f, -0.6f};
        public int[] effect1 = {-20, -35, -50, -65, -80};
        public float[] effect2 = {-0.3f, -0.375f, -0.45f, -0.525f, -0.6f};
        public int[] effect3 = {-20, -35, -50, -65, -80};
        public int[] effect4 = {-20, -35, -50, -65, -80};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            bool? temp = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level > 0)
            {
                temp = false;
                ForEachUnitInTargetAreaRandom((ObjAIBase)owner, owner.Position, 800, "AffectEnemies AffectHeroes ", default, true, 1, (unit) => 
                {
                    temp = true;
                });
                if(temp == true)
                {
                    SetReturnValue(default);
                }
                else
                {
                    SetReturnValue(default);
                }
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "FacingMe") > 0)
            {
                nextBuffVars.MoveSpeedMod = this.effect0[level];
                nextBuffVars.DamageMod = this.effect1[level];
                SpellBuffAdd((ObjAIBase)attacker, target, "MockingShoutSlow", 1, 1, 4, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            }
            else
            {
                if(IsBehind(target, owner))
                {
                    nextBuffVars.MoveSpeedMod = this.effect2[level];
                    nextBuffVars.DamageMod = this.effect3[level];
                    SpellBuffAdd((ObjAIBase)attacker, target, "MockingShoutSlow", 1, 1, 4, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
                else
                {
                    nextBuffVars.DamageMod = this.effect4[level];
                    SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
            }
        }
    }
}

namespace Spells
{
    public class MoltenShield : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DamageReturn = 0;
            public int ArmorAmount = 0;
        }
        public int[] effect0 = {20, 30, 40, 50, 60};
        public int[] effect1 = {10, 20, 30, 40, 50};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.DamageReturn = 1 + this.effect0[level];
            nextBuffVars.ArmorAmount = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 15, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            if(GetBuffCountFromCaster(owner, owner, "Pyromania_particle") == 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "Pyromania", 5, 1, 25000, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            }
        }
    }
}





namespace Spells
{
    public class MonkeyKingConsume : Script
    {
        public int[] effect0 = {125, 180, 235, 290, 345};
        public int[] effect1 = {250, 300, 350, 400, 450};
        public int[] effect2 = {500, 600, 700, 800, 900};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? ar = null;
            //object? _ = null;
            float healthToInc = 0;
            float abilityPower = 0;
            SpellEffectCreate(out ar, out _, "Meditate_eff.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
            healthToInc = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(owner);
            abilityPower = Math(abilityPower, MathOp.MO_MULTIPLY, 1);
            healthToInc = Math(healthToInc, MathOp.MO_ADD, abilityPower);
            IncHealth(owner, healthToInc, owner);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            if(GetBuffCountFromCaster(target, target, "ResistantSkin") > 0)
            {
                ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0, 1, false, false, (ObjAIBase)attacker);
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, this.effect2[level], DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0, 1, false, false, (ObjAIBase)attacker);
            }
        }
    }
}
namespace Spells
{
    public class MonkeyKingDAHitC : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "MonkeyKingKillCloneE", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class MonkeyKingDecoy : Script
    {
        public int[] effect0 = {50, 55, 60, 65, 70};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            TeamId teamID;
            Vector3 ownerFacing;
            int manaCost = 0;
            Pet? other1 = null;
            //object? nextBuffVars = null;
            ownerPos = GetUnitPosition(owner);
            teamID = GetTeamID(default);
            ownerFacing = GetPointByUnitFacingOffset(owner, 100, 0);
            SetGhosted(owner, default);
            manaCost = this.effect0[level];
            Move(owner, ownerFacing, 3000, 0, 0, ForceMovementType.FIRST_WALL_HIT, ForceMovementOrdersType.POSTPONE_CURRENT_ORDER, 0, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
            other1 = CloneUnitPet(owner, "MonkeyKingDecoyDummy", 0, ownerPos, 0, 0, true);
            IssueOrder(other1, OrderType.Hold, default, other1);
            PlayAnimation("idle1", 0, other1, false, false, false);
            IncPAR(other1, manaCost);
            FaceDirection(other1, ownerFacing);
            SpellBuffAdd((ObjAIBase)owner, other1, "MonkeyKingDecoyClone", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "MonkeyKingDecoyStealth", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}




namespace Spells
{
    public class MonkeyKingDecoySwipe : Script
    {
        public int[] effect0 = {70, 115, 160, 205, 250};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int baseDamage = 0;
            TeamId teamID;
            Champion? caster = null;
            float monkeyKingAP = 0;
            float damageToDeal = 0;
            baseDamage = this.effect0[level];
            teamID = GetTeamID(default);
            caster = GetChampionBySkinName("MonkeyKing", teamID);
            monkeyKingAP = GetFlatMagicDamageMod(caster);
            monkeyKingAP = Math(0.6f, MathOp.MO_MULTIPLY, monkeyKingAP);
            damageToDeal = Math(baseDamage, MathOp.MO_ADD, monkeyKingAP);
            ApplyDamage(caster, target, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, true, false, caster);
        }
    }
}
namespace Spells
{
    public class MonkeyKingDoubleAttack : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
        }
        public int[] effect0 = {9, 8, 7, 6, 5};
        Particle? battleCries = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            //object? teamID = null;
            nextBuffVars.SpellCooldown = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 6, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0);
            SpellEffectCreate(out this.battleCries, out _, "xenZiou_battle_cry_weapon_01.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "weapon_a_bend3", default, owner, "weapon_b_bend3", default, false, default, default, false, false, default, default);
        }
    }
}

namespace Spells
{
    public class MonkeyKingDoubleAttackHit : Script
    {
        public int[] effect0 = {0, 0, 0, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float tAD = 0;
            float damageToDeal = 0;
            if(GetBuffCountFromCaster(owner, owner, "MonkeyKingPassive") > 0)
            {
                tAD = GetTotalAttackDamage(owner);
                damageToDeal = Math(2, MathOp.MO_MULTIPLY, tAD);
                ApplyDamage((ObjAIBase)attacker, target, damageToDeal + this.effect0[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 0, false, false, (ObjAIBase)attacker);
            }
        }
    }
}




namespace Spells
{
    public class MonkeyKingNimbus : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public object? Distance = null;
            public object? DashSpeed = null;
            public float AttackSpeedVar = 0;
            public float DamageVar = 0;
        }
        public float[] effect0 = {0.3f, 0.35f, 0.4f, 0.45f, 0.5f};
        public int[] effect1 = {60, 105, 150, 195, 240};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Vector3 ownerPos;
            Particle? p3 = null;
            //object? _ = null;
            float moveSpeed = 0;
            float dashSpeed = 0;
            float distance = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            int damageVar = 0;
            float bonusAD = 0;
            float bonusDamage = 0;
            float unitsHit = 0;
            //object? unit = null;
            bool? isStealthed = null;
            bool? canSee = null;
            Minion? other1 = null;
            teamID = GetTeamID(default);
            ownerPos = GetUnitPosition(owner);
            SpellEffectCreate(out p3, out _, "monkeyKing_Q_cas.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(out p3, out _, "monkeyKing_Q_cas.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, false, false, false, false, default, default);
            targetPos = GetCastSpellTargetPos();
            moveSpeed = GetMovementSpeed(owner);
            dashSpeed = Math(moveSpeed, MathOp.MO_ADD, 1050);
            distance = DistanceBetweenObjects("Owner", "Target");
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.Distance = distance;
            nextBuffVars.DashSpeed = dashSpeed;
            nextBuffVars.AttackSpeedVar = this.effect0[level];
            damageVar = this.effect1[level];
            bonusAD = GetFlatPhysicalDamageMod(owner);
            bonusDamage = Math(bonusAD, MathOp.MO_MULTIPLY, 0.8f);
            nextBuffVars.DamageVar = Math(bonusDamage, MathOp.MO_ADD, damageVar);
            SpellBuffAdd((ObjAIBase)target, owner, "MonkeyKingNimbusKick", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0.25f, true, false, true, default);
            if(GetBuffCountFromCaster(owner, owner, "MonkeyKingDecoyStealth") > 0)
            {
                SpellBuffRemove(owner, "MonkeyKingDecoyStealth", (ObjAIBase)owner, 0);
            }
            unitsHit = 0;
            ForNClosestUnitsInTargetArea(owner, target.Position, 320, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 10, true, default, (unit) => 
            {
                if(unitsHit < 2)
                {
                    if(unit != target)
                    {
                        isStealthed = GetStealthed(unit);
                        if(isStealthed == true)
                        {
                            canSee = CanSeeTarget(owner, unit);
                            if(canSee == true)
                            {
                                targetPos = GetUnitPosition(unit);
                                nextBuffVars.TargetPos = targetPos;
                                other1 = SpawnMinion("MonkeyKingClone", "MonkeyKingFlying", "Aggro.lua", ownerPos, teamID ?? TEAM_CASTER, false, false, false, false, false, true, 0, false, false, (Champion)owner, default);
                                SpellBuffAdd(unit, other1, "MonkeyKingNimbusKickClone", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0.25f, true, false, true, default);
                                unitsHit = Math(1, MathOp.MO_ADD, unitsHit);
                            }
                        }
                        else
                        {
                            targetPos = GetUnitPosition(unit);
                            nextBuffVars.TargetPos = targetPos;
                            other1 = SpawnMinion("MonkeyKingClone", "MonkeyKingFlying", "Aggro.lua", ownerPos, teamID ?? TEAM_CASTER, false, false, false, false, false, true, 0, false, false, (Champion)owner, default);
                            SpellBuffAdd(unit, other1, "MonkeyKingNimbusKickClone", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0.25f, true, false, true, default);
                            unitsHit = Math(1, MathOp.MO_ADD, unitsHit);
                        }
                    }
                }
            });
        }
    }
}




namespace Spells
{
    public class MonkeyKingNimbusStrike : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float LifestealStat = 0;
            public float DamageGain = 0;
        }
        public float[] effect0 = {0.01f, 0.01f, 0.01f, 0.01f, 0.01f};
        public int[] effect1 = {7, 14, 21, 28, 35};
        public float[] effect2 = {0.09f, 0.12f, 0.15f, 0.18f, 0.21f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float maxHealth = 0;
            float healthPercent = 0;
            int baseDamage = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            float healthDamage = 0;
            maxHealth = GetMaxHealth(owner);
            healthPercent = this.effect0[level];
            baseDamage = this.effect1[level];
            nextBuffVars.LifestealStat = this.effect2[level];
            healthDamage = Math(healthPercent, MathOp.MO_MULTIPLY, maxHealth);
            nextBuffVars.DamageGain = Math(healthDamage, MathOp.MO_ADD, baseDamage);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class MonkeyKingQAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}




namespace Spells
{
    public class MonkeyKingSpinToWin : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
            public int BaseDamage = 0;
            public float MoveSpeedMod = 0;
        }
        public int[] effect0 = {120, 105, 90, 90, 90};
        public int[] effect1 = {20, 110, 200, 0, 0};
        public float[] effect2 = {0.015f, 0.015f, 0.015f, 0.015f, 0.015f};
        public int[] effect3 = {4, 4, 4};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpellCooldown = this.effect0[level];
            nextBuffVars.BaseDamage = this.effect1[level];
            nextBuffVars.MoveSpeedMod = this.effect2[level];
            SpellBuffAdd((ObjAIBase)attacker, owner, default, 1, 1, this.effect3[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SetSpell((ObjAIBase)owner, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "MonkeyKingSpinToWinLeave");
            SetSlotSpellCooldownTimeVer2(1, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
        }
    }
}
namespace Spells
{
    public class MonkeyKingSpinToWinLeave : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "MonkeyKingSpinToWin", (ObjAIBase)owner, 0);
        }
    }
}
namespace Spells
{
    public class MonkeyKingSweep : Script
    {
        public int[] effect0 = {30, 55, 80, 105, 130};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int bonusDamage = 0;
            float akaliDamage = 0;
            float akaliAP = 0;
            float damageToDeal = 0;
            bool? isStealthed = null;
            bool? canSee = null;
            bonusDamage = this.effect0[level];
            akaliDamage = GetTotalAttackDamage(owner);
            akaliAP = GetFlatMagicDamageMod(owner);
            akaliAP = Math(0.3f, MathOp.MO_MULTIPLY, akaliAP);
            akaliDamage = Math(akaliDamage, MathOp.MO_MULTIPLY, 0.6f);
            damageToDeal = Math(bonusDamage, MathOp.MO_ADD, akaliDamage);
            damageToDeal = Math(akaliAP, MathOp.MO_ADD, damageToDeal);
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                ApplyDamage((ObjAIBase)owner, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, true, false, (ObjAIBase)attacker);
            }
            else if(target is Champion)
            {
                ApplyDamage((ObjAIBase)owner, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, true, false, (ObjAIBase)attacker);
            }
            else
            {
                canSee = CanSeeTarget(owner, target);
                if(canSee == true)
                {
                    ApplyDamage((ObjAIBase)owner, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, true, false, (ObjAIBase)attacker);
                }
            }
        }
    }
}



namespace Spells
{
    public class MonsterRegenSpell : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Particle? ar = null;
            //object? _ = null;
            Particle? arr = null;
            float healthPercent = 0;
            float missingHealthPercent = 0;
            float healthToRestore = 0;
            teamID = GetTeamID(default);
            SpellEffectCreate(out ar, out _, "VampHeal.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(out arr, out _, "Meditate_eff.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, false, false, false, false, default, default);
            healthPercent = GetHealthPercent(target);
            missingHealthPercent = Math(1, MathOp.MO_SUBTRACT, healthPercent);
            healthToRestore = Math(60, MathOp.MO_MULTIPLY, missingHealthPercent);
            healthToRestore = Math(10, MathOp.MO_MAX, healthToRestore);
            IncHealth(target, healthToRestore, target);
        }
    }
}










namespace Spells
{
    public class MordekaiserChildrenOfTheGrave : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? LifestealPercent = null;
            public object? DamageToDeal = null;
        }
        public float[] effect0 = {0.24f, 0.29f, 0.34f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float mordAP = 0;
            float damageToDeal = 0;
            float maxHealth = 0;
            float mordAP1 = 0;
            float initialDamageToDeal = 0;
            float tickDamage = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            mordAP = GetFlatMagicDamageMod(owner);
            damageToDeal = this.effect0[level];
            maxHealth = GetMaxHealth(target);
            mordAP1 = Math(mordAP, MathOp.MO_MULTIPLY, 0.0004f);
            damageToDeal = Math(damageToDeal, MathOp.MO_ADD, mordAP1);
            damageToDeal = Math(damageToDeal, MathOp.MO_MULTIPLY, 0.5f);
            initialDamageToDeal = Math(maxHealth, MathOp.MO_MULTIPLY, damageToDeal);
            tickDamage = Math(damageToDeal, MathOp.MO_MULTIPLY, 0.1f);
            nextBuffVars.LifestealPercent = tickDamage;
            SpellBuffAdd((ObjAIBase)owner, target, default, 1, 1, 10.4f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, false, false, default);
            nextBuffVars.DamageToDeal = initialDamageToDeal;
            SpellBuffAdd((ObjAIBase)target, attacker, "MordekaiserCOTGDot", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class MordekaiserCreepingDeath : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DamagePerTick = 0;
            public int DefenseStats = 0;
        }
        public int[] effect0 = {24, 38, 52, 66, 80};
        public int[] effect1 = {10, 15, 20, 25, 30};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.DamagePerTick = this.effect0[level];
            nextBuffVars.DefenseStats = this.effect1[level];
            if(GetBuffCountFromCaster(target, owner, "MordekaiserCreepingDeathCheck") > 0)
            {
                if(target.Team == owner.Team)
                {
                    SpellBuffAdd((ObjAIBase)owner, target, default, 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
            }
            else
            {
                if(target.Team != owner.Team)
                {
                    SpellBuffAdd((ObjAIBase)target, owner, "MordekaiserCreepingDeathDebuff", 100, 1, 0.001f, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class MordekaiserCreepingDeathCast : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DamagePerTick = 0;
            public int DefenseStats = 0;
        }
        public int[] effect0 = {26, 32, 38, 44, 50};
        public int[] effect1 = {24, 38, 52, 66, 80};
        public int[] effect2 = {10, 15, 20, 25, 30};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float healthCost = 0;
            float temp1 = 0;
            healthCost = this.effect0[level];
            temp1 = GetHealth(owner);
            if(healthCost >= temp1)
            {
                healthCost = Math(temp1, MathOp.MO_SUBTRACT, 1);
            }
            healthCost = Math(healthCost, MathOp.MO_MULTIPLY, -1);
            IncHealth(owner, healthCost, owner);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            SpellBuffAdd((ObjAIBase)owner, target, "MordekaiserCreepingDeathCheck", 1, 1, 30, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(target == owner)
            {
                nextBuffVars.DamagePerTick = this.effect1[level];
                nextBuffVars.DefenseStats = this.effect2[level];
                SpellBuffAdd((ObjAIBase)owner, target, "MordekaiserCreepingDeath", 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
            else
            {
                SpellCast((ObjAIBase)owner, target, default, default, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, true, false, default);
            }
        }
    }
}






namespace Spells
{
    public class MordekaiserMaceOfSpades : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
        }
        public int[] effect0 = {25, 32, 39, 46, 53};
        public int[] effect1 = {8, 7, 6, 5, 4};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float healthCost = 0;
            float temp1 = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            healthCost = this.effect0[level];
            temp1 = GetHealth(owner);
            if(healthCost >= temp1)
            {
                healthCost = Math(temp1, MathOp.MO_SUBTRACT, 1);
            }
            healthCost = Math(healthCost, MathOp.MO_MULTIPLY, -1);
            IncHealth(owner, healthCost, owner);
            nextBuffVars.SpellCooldown = this.effect1[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 10, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0);
        }
    }
}

namespace Spells
{
    public class MordekaiserNukeOfTheBeast : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? BaseDamage = null;
        }
        public int[] effect0 = {80, 110, 140, 170, 200};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Particle? aasdf = null;
            //object? _ = null;
            float baseDamage = 0;
            float baseDamage = 0;
            float totalDamage = 0;
            float bonusDamage = 0;
            float abilityPower = 0;
            float bonusAPDamage = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            teamID = GetTeamID(default);
            SpellEffectCreate(out aasdf, out _, "mordakaiser_maceOfSpades_tar2.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            baseDamage = this.effect0[level];
            baseDamage = GetBaseAttackDamage(owner);
            totalDamage = GetTotalAttackDamage(owner);
            bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseDamage);
            baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
            abilityPower = GetFlatMagicDamageMod(owner);
            bonusAPDamage = Math(abilityPower, MathOp.MO_MULTIPLY, 0.4f);
            baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusAPDamage);
            nextBuffVars.BaseDamage = baseDamage;
            SpellBuffAdd((ObjAIBase)target, owner, "MordekaiserNukeOfTheBeastDmg", 5, 1, 0.001f, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class MordekaiserSyphonOfDestruction : Script
    {
        public int[] effect0 = {24, 36, 48, 60, 72};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 castPos;
            float healthCost = 0;
            float temp1 = 0;
            castPos = GetCastSpellTargetPos();
            healthCost = this.effect0[level];
            temp1 = GetHealth(owner);
            if(healthCost >= temp1)
            {
                healthCost = Math(temp1, MathOp.MO_SUBTRACT, 1);
            }
            healthCost = Math(healthCost, MathOp.MO_MULTIPLY, -1);
            IncHealth(owner, healthCost, owner);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            //object? nextBuffVars = null;
            Particle? asdf = null;
            //object? _ = null;
            Particle? asdf1 = null;
            teamID = GetTeamID(default);
            SpellBuffAdd((ObjAIBase)target, owner, "MordekaiserSyphonDmg", 100, 1, 0.001f, default, BuffAddType.STACKS_AND_OVERLAPS, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "MordekaiserSyphonParticle", 1, 1, 0.2f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellEffectCreate(out asdf, out _, "mordakaiser_siphonOfDestruction_tar_02.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(out asdf1, out _, "mordakaiser_siphonOfDestruction_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
        }
    }
}

namespace Spells
{
    public class Mourning : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? part1 = null;
            //object? _ = null;
            //object? nextBuffVars = null;
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            SpellEffectCreate(out part1, out _, "executionersCalling_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "root", default, target, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(out part1, out _, "executionersCalling_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "head", default, target, default, default, false, default, default, default, default, default, default);
            SpellBuffAdd((ObjAIBase)target, target, "Internal_50MS", 1, 1, 8, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "GrievousWound", 1, 1, 8, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "Mourning")
            {
                SetSlotSpellCooldownTimeVer2(20, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name1 == "Mourning")
            {
                SetSlotSpellCooldownTimeVer2(20, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name2 == "Mourning")
            {
                SetSlotSpellCooldownTimeVer2(20, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name3 == "Mourning")
            {
                SetSlotSpellCooldownTimeVer2(20, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name4 == "Mourning")
            {
                SetSlotSpellCooldownTimeVer2(20, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name5 == "Mourning")
            {
                SetSlotSpellCooldownTimeVer2(20, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
        }
    }
}



namespace Spells
{
    public class MoveQuick : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.HASTE, 0, true, false, false, default);
        }
    }
}











namespace Spells
{
    public class NetherBlade : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, owner, "NetherBladeBuff", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, false, false, false, default);
        }
    }
}


namespace Spells
{
    public class NidaleeTakedownAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseDamage = 0;
            float weaponDamage = 0;
            float damage = 0;
            object? takedownDamage = null;
            float healthPercent = 0;
            float bonusPercent = 0;
            //object? _ = null;
            baseDamage = GetBaseAttackDamage(owner);
            weaponDamage = GetFlatPhysicalDamageMod(owner);
            damage = Math(baseDamage, MathOp.MO_ADD, weaponDamage);
            if(target is ObjAIBase)
            {
                if(target is BaseTurret)
                {
                    ApplyDamage((ObjAIBase)attacker, target, damage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 1, default, false, false, default);
                }
                else
                {
                    takedownDamage = charVars.TakedownDamage;
                    damage = Math(damage, MathOp.MO_ADD, takedownDamage);
                    healthPercent = GetHealthPercent(target);
                    bonusPercent = Math(1, MathOp.MO_SUBTRACT, healthPercent);
                    bonusPercent = Math(2, MathOp.MO_MULTIPLY, bonusPercent);
                    bonusPercent = Math(1, MathOp.MO_ADD, bonusPercent);
                    damage = Math(damage, MathOp.MO_MULTIPLY, bonusPercent);
                    BreakSpellShields(target);
                    ApplyDamage((ObjAIBase)attacker, target, damage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 1, default, true, true, default);
                    SpellEffectCreate(out _, out _, "nidalee_cougar_takedown_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, default, default, default, default, default, default);
                }
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, damage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 1, default, false, false, default);
            }
            SpellBuffRemove(owner, "Takedown", (ObjAIBase)owner, default);
        }
    }
}





namespace Spells
{
    public class NocturneDuskbringer : Script
    {
        class OnMissileUpdate_nextBuffVars
        {
            public float HastePercent = 0;
            public int BonusAD = 0;
        }
        class SelfExecute_nextBuffVars
        {
            public float HastePercent = 0;
            public int BonusAD = 0;
        }
        class TargetExecute_nextBuffVars
        {
            public float HastePercent = 0;
            public int BonusAD = 0;
            public object? LastPosition = null;
        }
        public float[] effect0 = {0.15f, 0.2f, 0.25f, 0.3f, 0.35f};
        public int[] effect1 = {15, 25, 35, 45, 55};
        public float[] effect2 = {0.15f, 0.2f, 0.25f, 0.3f, 0.35f};
        public int[] effect3 = {15, 25, 35, 45, 55};
        public float[] effect4 = {0.15f, 0.2f, 0.25f, 0.3f, 0.35f};
        public int[] effect5 = {15, 25, 35, 45, 55};
        public float[] effect6 = {48.75f, 86.25f, 123.75f, 161.25f, 198.75f};
        public float[] effect7 = {48.75f, 86.25f, 123.75f, 161.25f, 198.75f};
        public float[] effect8 = {48.75f, 86.25f, 123.75f, 161.25f, 198.75f};
        public float[] effect9 = {48.75f, 86.25f, 123.75f, 161.25f, 198.75f};
        public void OnMissileUpdate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, SpellMissile missileNetworkID)
        {
            int level = 0;
            OnMissileUpdate_nextBuffVars nextBuffVars = new();
            TeamId teamID;
            //object? missilePosition = null;
            Vector3 groundHeight;
            Minion? other3 = null;
            Vector3 targetPos;
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.HastePercent = this.effect0[level];
            nextBuffVars.BonusAD = this.effect1[level];
            teamID = GetTeamID(default);
            GetGroundHeight(missilePosition, groundHeight);
            groundHeight = ModifyPosition(default, default, default);
            other3 = SpawnMinion("DarkPath", "testcube", "idle.lua", groundHeight, teamID ?? TEAM_CASTER, true, true, true, true, false, true, 0, false, true, default, default);
            targetPos = GetCastSpellTargetPos();
            FaceDirection(other3, targetPos);
            SpellBuffAdd((ObjAIBase)owner, other3, default, 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.HastePercent = this.effect2[level];
            nextBuffVars.BonusAD = this.effect3[level];
            SpellBuffAdd((ObjAIBase)attacker, attacker, "NocturneDuskbringerHaste", 1, 1, 0.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int nocturneSkinID = 0;
            TeamId teamID;
            TargetExecute_nextBuffVars nextBuffVars = new();
            Vector3 myPosition;
            Minion? other3 = null;
            TeamId teamID2;
            float physPreMod = 0;
            float physPostMod = 0;
            bool? isStealthed = null;
            Vector3 lastPosition;
            Particle? targettrail = null;
            //object? _ = null;
            bool? canSee = null;
            nocturneSkinID = GetSkinID(owner);
            teamID = GetTeamID(default);
            if(target == owner)
            {
                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                nextBuffVars.HastePercent = this.effect4[level];
                nextBuffVars.BonusAD = this.effect5[level];
                teamID = GetTeamID(default);
                myPosition = GetUnitPosition(owner);
                other3 = SpawnMinion("DarkPath", "testcube", "idle.lua", myPosition, teamID ?? TEAM_CASTER, true, true, true, true, false, true, 0, false, true, default, default);
                targetPos = GetCastSpellTargetPos();
                FaceDirection(other3, targetPos);
                SpellBuffAdd((ObjAIBase)owner, other3, default, 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            else
            {
                teamID2 = GetTeamID(default);
                physPreMod = GetFlatPhysicalDamageMod(owner);
                physPostMod = Math(0.75f, MathOp.MO_MULTIPLY, physPreMod);
                isStealthed = GetStealthed(target);
                if(isStealthed == false)
                {
                    if(target is Champion)
                    {
                        BreakSpellShields(target);
                        lastPosition = GetPointByUnitFacingOffset(target, 2000, 0);
                        nextBuffVars.LastPosition = lastPosition;
                        SpellBuffAdd((ObjAIBase)owner, target, "NocturneDuskbringerTrail", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        SpellEffectCreate(out targettrail, out _, "NocturneDuskbringer_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                        ApplyDamage((ObjAIBase)attacker, target, physPostMod + this.effect6[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, true, (ObjAIBase)attacker);
                        if(nocturneSkinID == 1)
                        {
                            SpellEffectCreate(out targettrail, out _, "NocturneDuskbringer_frost_buf.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, target, default, default, target, default, default, false, false, false, false, false, default, default);
                        }
                        else
                        {
                            SpellEffectCreate(out targettrail, out _, "NocturneDuskbringer_buf.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, target, default, default, target, default, default, false, false, false, false, false, default, default);
                        }
                    }
                    else
                    {
                        BreakSpellShields(target);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        SpellEffectCreate(out targettrail, out _, "NocturneDuskbringer_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                        ApplyDamage((ObjAIBase)attacker, target, physPostMod + this.effect7[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, true, (ObjAIBase)attacker);
                    }
                }
                else
                {
                    if(target is Champion)
                    {
                        BreakSpellShields(target);
                        lastPosition = GetPointByUnitFacingOffset(target, 2000, 0);
                        nextBuffVars.LastPosition = lastPosition;
                        SpellBuffAdd((ObjAIBase)owner, target, "NocturneDuskbringerTrail", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        SpellEffectCreate(out targettrail, out _, "NocturneDuskbringer_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                        SpellEffectCreate(out targettrail, out _, "NocturneDuskbringer_buf.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, target, default, default, target, default, default, false, false, false, false, false, default, default);
                        ApplyDamage((ObjAIBase)attacker, target, physPostMod + this.effect8[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, true, (ObjAIBase)attacker);
                        if(nocturneSkinID == 1)
                        {
                            SpellEffectCreate(out targettrail, out _, "NocturneDuskbringer_frost_buf.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, target, default, default, target, default, default, false, false, false, false, false, default, default);
                        }
                        else
                        {
                            SpellEffectCreate(out targettrail, out _, "NocturneDuskbringer_buf.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, target, default, default, target, default, default, false, false, false, false, false, default, default);
                        }
                    }
                    else
                    {
                        canSee = CanSeeTarget(owner, target);
                        if(canSee == true)
                        {
                            BreakSpellShields(target);
                            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            SpellEffectCreate(out targettrail, out _, "NocturneDuskbringer_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                            ApplyDamage((ObjAIBase)attacker, target, physPostMod + this.effect9[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, true, (ObjAIBase)attacker);
                        }
                    }
                }
            }
        }
    }
}


namespace Spells
{
    public class NocturneParanoia : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int NewCd = 0;
            public int SightReduction = 0;
            public int SpellLevel = 0;
        }
        public int[] effect0 = {160, 130, 100, 0, 0};
        public int[] effect1 = {-300, -300, -300};
        public int[] effect2 = {1, 2, 3};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            SelfExecute_nextBuffVars nextBuffVars = new();
            Particle? asdf = null;
            //object? _ = null;
            //object? unit = null;
            teamOfOwner = GetTeamID(default);
            if(teamOfOwner == 100)
            {
                FadeInColorFadeEffect(0, 0, 75, 1, 0.3f, TeamId.TEAM_BLUE);
                FadeOutColorFadeEffect(1, TeamId.TEAM_PURPLE);
                FadeInColorFadeEffect(75, 0, 0, 1, 0.3f, TeamId.TEAM_PURPLE);
            }
            else
            {
                FadeInColorFadeEffect(0, 0, 75, 1, 0.3f, TeamId.TEAM_PURPLE);
                FadeOutColorFadeEffect(1, TeamId.TEAM_BLUE);
                FadeInColorFadeEffect(75, 0, 0, 1, 0.3f, TeamId.TEAM_BLUE);
            }
            if(GetBuffCountFromCaster(attacker, attacker, "NocturneParanoia") > 0)
            {
                
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                PlayAnimation("Spell4b", 1, owner, false, false, true);
                nextBuffVars.NewCd = this.effect0[level];
                SpellBuffAdd((ObjAIBase)owner, owner, "NocturneParanoia", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "NocturneParanoiaParticle", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, true, default);
                SetSlotSpellCooldownTime((ObjAIBase)attacker, 3, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0.25f);
                nextBuffVars.SightReduction = this.effect1[level];
                nextBuffVars.SpellLevel = this.effect2[level];
                if(teamOfOwner == 100)
                {
                    ForEachChampion(TeamId.TEAM_BLUE, default, true, (unit) => 
                    {
                        SpellEffectCreate(out asdf, out _, "NocturneParanoiaStartOrderFriend.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, unit, true, unit, "root", default, unit, default, default, false, default, default, false, default, default, default);
                    });
                    ForEachChampion(TeamId.TEAM_PURPLE, default, true, (unit) => 
                    {
                        SpellEffectCreate(out asdf, out _, "NocturneParanoiaStartOrderFoe.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, unit, true, unit, "root", default, unit, default, default, false, default, default, false, default, default, default);
                        SpellBuffAdd((ObjAIBase)attacker, unit, "NocturneParanoiaTargeting", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, true, default);
                        BreakSpellShields(unit);
                        SpellBuffAdd((ObjAIBase)attacker, unit, "NocturneParanoiaTarget", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, true, default);
                        ApplyNearSight(attacker, unit, 4);
                    });
                    ForEachChampion(TeamId.TEAM_UNKNOWN, default, true, (unit) => 
                    {
                        SpellBuffAdd((ObjAIBase)attacker, unit, "NocturneParanoiaTargetOrder", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, true, default);
                    });
                }
                else
                {
                    ForEachChampion(TeamId.TEAM_PURPLE, default, true, (unit) => 
                    {
                        SpellEffectCreate(out asdf, out _, "NocturneParanoiaStartChaosFriend.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, unit, true, unit, "root", default, unit, default, default, false, default, default, false, default, default, default);
                    });
                    ForEachChampion(TeamId.TEAM_BLUE, default, true, (unit) => 
                    {
                        SpellEffectCreate(out asdf, out _, "NocturneParanoiaStartChaosFoe.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, unit, true, unit, "root", default, unit, default, default, false, default, default, false, default, default, default);
                        SpellBuffAdd((ObjAIBase)attacker, unit, "NocturneParanoiaTargeting", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, true, default);
                        BreakSpellShields(unit);
                        SpellBuffAdd((ObjAIBase)attacker, unit, "NocturneParanoiaTarget", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, true, default);
                        ApplyNearSight(attacker, unit, 4);
                    });
                    ForEachChampion(TeamId.TEAM_UNKNOWN, default, true, (unit) => 
                    {
                        SpellBuffAdd((ObjAIBase)attacker, unit, "NocturneParanoiaTargetChaos", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, true, default);
                    });
                }
            }
        }
    }
}
namespace Spells
{
    public class NocturneParanoia2 : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DashSpeed = 0;
            public object? TargetPos = null;
            public object? Distance = null;
            public object? GreenDash = null;
        }
        Particle? greenDash = null;
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            else if(canCast == false)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamOfOwner;
            //object? unit = null;
            Vector3 ownerPos;
            float distance = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            teamOfOwner = GetTeamID(default);
            if(GetBuffCountFromCaster(attacker, attacker, "NocturneParanoia") > 0)
            {
                if(teamOfOwner == TeamId.TEAM_BLUE)
                {
                    ForEachChampion(TeamId.TEAM_PURPLE, default, true, (unit) => 
                    {
                        SpellBuffRemove(unit, "NocturneParanoiaTargeting", (ObjAIBase)attacker, default);
                    });
                }
                else
                {
                    ForEachChampion(TeamId.TEAM_BLUE, default, true, (unit) => 
                    {
                        SpellBuffRemove(unit, "NocturneParanoiaTargeting", (ObjAIBase)attacker, default);
                    });
                }
                ownerPos = GetUnitPosition(attacker);
                targetPos = GetUnitPosition(target);
                distance = DistanceBetweenObjects("Owner", "Target");
                nextBuffVars.DashSpeed = 1800;
                nextBuffVars.TargetPos = targetPos;
                nextBuffVars.Distance = distance;
                SpellBuffAdd((ObjAIBase)owner, owner, "UnstoppableForceMarker", 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                if(teamOfOwner == TeamId.TEAM_BLUE)
                {
                    SpellEffectCreate(out this.greenDash, out _, "NocturneParanoiaTeamTarget.troy", default, TeamId.TEAM_PURPLE, 0, 0, TeamId.TEAM_BLUE, default, false, target, default, default, target, default, default, false, default, default, false, default, default, default);
                }
                else
                {
                    SpellEffectCreate(out this.greenDash, out _, "NocturneParanoiaTeamTarget.troy", default, TeamId.TEAM_BLUE, 0, 0, TeamId.TEAM_PURPLE, default, false, target, default, default, target, default, default, false, default, default, false, default, default, default);
                }
                nextBuffVars.GreenDash = this.greenDash;
                SpellBuffAdd((ObjAIBase)target, owner, "NocturneParanoiaDash", 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0.25f, true, false, true, default);
                SpellBuffRemove(attacker, "NocturneParanoia", (ObjAIBase)attacker, default);
            }
        }
    }
}










namespace Spells
{
    public class NocturneShroudofDarkness : Script
    {
        bool? willRemove = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            this.willRemove = false;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 2, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            PlayAnimation("Spell2", 1, owner, false, true, true);
        }
    }
}


namespace Spells
{
    public class NocturneUmbraBladesAttack : Script
    {
        public int[] effect0 = {15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 25, 25, 25, 25, 25, 25};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int heal = 0;
            float dmg = 0;
            //object? hitResult = null;
            float mainDmg = 0;
            Particle? fadeParticle = null;
            //object? _ = null;
            //object? unit = null;
            //object? nextBuffVars = null;
            bool? isStealthed = null;
            bool? canSee = null;
            teamID = GetTeamID(default);
            level = GetLevel(owner);
            heal = this.effect0[level];
            dmg = GetTotalAttackDamage(owner);
            if(hitResult == HitResult.HIT_Critical)
            {
                mainDmg = Math(dmg, MathOp.MO_MULTIPLY, 1.1f);
            }
            else
            {
                mainDmg = Math(dmg, MathOp.MO_MULTIPLY, 1.2f);
            }
            ApplyDamage((ObjAIBase)attacker, target, mainDmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
            IncHealth(owner, heal, owner);
            dmg = Math(dmg, MathOp.MO_MULTIPLY, 1.2f);
            SpellEffectCreate(out fadeParticle, out _, "NocturneUmbraBlades_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, unit, target, default, default, true, default, default, false, default, default, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "IfHasBuffCheck", 1, 1, 0.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            ForEachUnitInTargetArea((ObjAIBase)attacker, attacker.Position, 360, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                if(GetBuffCountFromCaster(unit, attacker, "IfHasBuffCheck") == 0)
                {
                    isStealthed = GetStealthed(unit);
                    if(isStealthed == false)
                    {
                        SpellEffectCreate(out fadeParticle, out _, "NocturneUmbraBlades_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, unit, unit, default, default, true, default, default, false, default, default, default);
                        ApplyDamage((ObjAIBase)attacker, unit, dmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 0, false, true, (ObjAIBase)attacker);
                        IncHealth(owner, heal, owner);
                    }
                    else
                    {
                        if(unit is Champion)
                        {
                            SpellEffectCreate(out fadeParticle, out _, "NocturneUmbraBlades_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, unit, unit, default, default, true, default, default, false, default, default, default);
                            ApplyDamage((ObjAIBase)attacker, unit, dmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 0, false, true, (ObjAIBase)attacker);
                            IncHealth(owner, heal, owner);
                        }
                        else
                        {
                            canSee = CanSeeTarget(owner, unit);
                            if(canSee == true)
                            {
                                SpellEffectCreate(out fadeParticle, out _, "NocturneUmbraBlades_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, unit, unit, default, default, true, default, default, false, default, default, default);
                                ApplyDamage((ObjAIBase)attacker, unit, dmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 0, false, true, (ObjAIBase)attacker);
                                IncHealth(owner, heal, owner);
                            }
                        }
                    }
                }
            });
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, attacker, "NocturneUmbraBladesAttack", 1, 1, 0.01f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class NocturneUnspeakableHorror : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float FearDuration = 0;
            public float BaseDamage = 0;
        }
        public float[] effect0 = {1, 1.25f, 1.5f, 1.75f, 2};
        public float[] effect1 = {12.5f, 25, 37.5f, 50, 62.5f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            PlayAnimation("Spell3", 1, owner, false, false, true);
            BreakSpellShields(target);
            nextBuffVars.FearDuration = this.effect0[level];
            nextBuffVars.BaseDamage = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class NullLance : Script
    {
        public int[] effect0 = {80, 130, 180, 230, 280};
        public float[] effect1 = {1, 1.4f, 1.8f, 2.2f, 2.6f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.7f, 1, false, false, (ObjAIBase)attacker);
            ApplySilence(attacker, target, this.effect1[level]);
        }
    }
}

namespace Spells
{
    public class Obduracy : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float PercMod = 0;
        }
        public float[] effect0 = {0.2f, 0.25f, 0.3f, 0.35f, 0.4f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.PercMod = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "ObduracyBuff", 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class ObduracyAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}














namespace Spells
{
    public class OdinCaptureChannel : Script
    {
        int hasPrilisasBlessing = 0;
        Particle? particleID = null;
        Particle? particleID2 = null;
        int chargeTimePassed = 0;
        bool? removeAnim = null;
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            int prilisasBlessingCount = 0;
            TeamId teamOfOwner;
            float mana = 0;
            float maxMana = 0;
            float pAR_Percent = 0;
            SpellBuffAdd((ObjAIBase)attacker, attacker, "OdinCaptureImmobile", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "OdinGuardianSuppression", 1, 1, 30, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 30, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, true, default);
            this.hasPrilisasBlessing = 0;
            prilisasBlessingCount = GetBuffCountFromAll(owner, "PrilisasBlessing");
            if(prilisasBlessingCount > 0)
            {
                this.hasPrilisasBlessing = 1;
                SpellBuffAdd((ObjAIBase)owner, target, "PrilisasBlessing", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            teamOfOwner = GetTeamID(default);
            if(teamOfOwner == TeamId.TEAM_BLUE)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "OdinGuardianSuppressionOrder", 10, 1, 30, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                SpellEffectCreate(out this.particleID, out this.particleID2, "OdinCaptureBeam.troy", "OdinCaptureBeam.troy", TeamId.TEAM_BLUE, 10, 0, TeamId.TEAM_PURPLE, owner, false, owner, "BUFFBONE_GLB_CHANNEL_LOC", default, target, "crystal", default, false, false, false, false, false, default, default);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "OdinGuardianSuppressionChaos", 10, 1, 30, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                SpellEffectCreate(out this.particleID, out this.particleID2, "OdinCaptureBeam.troy", "OdinCaptureBeam.troy", TeamId.TEAM_PURPLE, 10, 0, TeamId.TEAM_BLUE, owner, false, owner, "BUFFBONE_GLB_CHANNEL_LOC", default, target, "crystal", default, false, false, false, false, false, default, default);
            }
            this.chargeTimePassed = 0;
            mana = GetPAR(target);
            maxMana = GetMaxPAR(target);
            pAR_Percent = Math(mana, MathOp.MO_DIVIDE, maxMana);
            if(pAR_Percent > 0.8f)
            {
                if(owner.Team != target.Team)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "OdinScoreNinja", 1, 1, 30, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
            PlayAnimation("Channel_WNDUP", 0, owner, true, true, false);
            this.removeAnim = true;
        }
        public void ChannelingUpdateActions(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? accumTime = null;
            TeamId teamOfOwner;
            //object? nextBuffVars = null;
            float distance = 0;
            if(accumTime >= 1.5f)
            {
                if(GetBuffCountFromCaster(owner, owner, "OdinShrineBombBuff") > 0)
                {
                    teamOfOwner = GetTeamID(default);
                    if(teamOfOwner == TeamId.TEAM_BLUE)
                    {
                        SpellBuffAdd((ObjAIBase)owner, target, "OdinBombTickOrder", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)owner, target, "OdinBombTickChaos", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    }
                    SpellBuffClear(owner, "OdinShrineBombBuff");
                }
                if(this.removeAnim != false)
                {
                    UnlockAnimation(owner, true);
                    PlayAnimation("Channel", 0, owner, true, true, false);
                    this.removeAnim = false;
                }
            }
            distance = DistanceBetweenObjects("Owner", "Target");
            if(distance >= 525)
            {
                SpellBuffClear(owner, "OdinShrineBombBuff");
                SpellBuffClear(owner, "OdinCaptureChannel");
            }
        }
        public void ChannelingUpdateStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? accumTime = null;
            TeamId teamOfOwner;
            TeamId targetTeam;
            TeamId myTeam;
            if(this.chargeTimePassed == 0)
            {
                if(accumTime > 1.5f)
                {
                    this.chargeTimePassed = 1;
                    SpellEffectRemove(this.particleID);
                    SpellEffectRemove(this.particleID2);
                    teamOfOwner = GetTeamID(default);
                    if(teamOfOwner == TeamId.TEAM_BLUE)
                    {
                        SpellEffectCreate(out this.particleID, out this.particleID2, "OdinCaptureBeamEngaged_red.troy", "OdinCaptureBeamEngaged_green.troy", TeamId.TEAM_PURPLE, 10, 0, TeamId.TEAM_PURPLE, owner, false, owner, "BUFFBONE_GLB_CHANNEL_LOC", default, target, "crystal", default, false, false, false, false, false, default, default);
                    }
                    else
                    {
                        SpellEffectCreate(out this.particleID, out this.particleID2, "OdinCaptureBeamEngaged_green.troy", "OdinCaptureBeamEngaged_red.troy", TeamId.TEAM_PURPLE, 10, 0, TeamId.TEAM_PURPLE, owner, false, owner, "BUFFBONE_GLB_CHANNEL_LOC", default, target, "crystal", default, false, false, false, false, false, default, default);
                    }
                }
            }
            if(GetBuffCountFromCaster(owner, owner, "OdinCaptureChannel") == 0)
            {
                StopChanneling((ObjAIBase)owner, ChannelingStopCondition.Cancel, ChannelingStopSource.Move);
            }
            teamOfOwner = GetTeamID(default);
            if(teamOfOwner == TeamId.TEAM_BLUE)
            {
                if(GetBuffCountFromCaster(target, owner, "OdinGuardianSuppressionOrder") == 0)
                {
                    StopChanneling((ObjAIBase)owner, ChannelingStopCondition.Cancel, ChannelingStopSource.Move);
                }
            }
            else
            {
                if(GetBuffCountFromCaster(target, owner, "OdinGuardianSuppressionChaos") == 0)
                {
                    StopChanneling((ObjAIBase)owner, ChannelingStopCondition.Cancel, ChannelingStopSource.Move);
                }
            }
            targetTeam = GetTeamID(default);
            myTeam = GetTeamID(default);
            if(myTeam == targetTeam)
            {
                StopChanneling((ObjAIBase)owner, ChannelingStopCondition.Success, ChannelingStopSource.Move);
            }
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int cooldownToSet = 0;
            //object? nextBuffVars = null;
            SpellEffectRemove(this.particleID);
            SpellEffectRemove(this.particleID2);
            SpellBuffRemoveStacks(target, owner, "OdinGuardianSuppressionChaos", 1);
            SpellBuffRemoveStacks(target, owner, "OdinGuardianSuppressionOrder", 1);
            if(target.IsDead)
            {
                cooldownToSet = 0;
            }
            else
            {
                SetUseSlotSpellCooldownTime(3, owner, false);
                cooldownToSet = 3;
                SpellBuffAdd((ObjAIBase)owner, owner, "OdinCaptureChannelCooldownBuff", 1, 1, cooldownToSet, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            }
            SpellBuffClear(owner, "OdinScoreNinja");
            UnlockAnimation(owner, true);
            if(this.hasPrilisasBlessing == 1)
            {
                SpellBuffRemoveStacks(target, owner, "PrilisasBlessing", 1);
            }
            SpellBuffClear(owner, "OdinCaptureChannel");
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? _ = null;
            int cooldownToSet = 0;
            //object? nextBuffVars = null;
            SpellEffectCreate(out _, out _, "OdinCaptureCancel.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "spine", default, owner, "spine", default, false, false, false, false, false, default, default);
            UnlockAnimation(owner, true);
            SpellEffectRemove(this.particleID);
            SpellBuffRemoveStacks(target, owner, "OdinGuardianSuppressionChaos", 1);
            SpellBuffRemoveStacks(target, owner, "OdinGuardianSuppressionOrder", 1);
            SpellEffectRemove(this.particleID2);
            SpellBuffClear(owner, "OdinScoreNinja");
            if(target.IsDead)
            {
                cooldownToSet = 0;
            }
            else
            {
                SetUseSlotSpellCooldownTime(3, owner, false);
                cooldownToSet = 3;
                SpellBuffAdd((ObjAIBase)owner, owner, "OdinCaptureChannelCooldownBuff", 1, 1, cooldownToSet, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            }
            if(this.hasPrilisasBlessing == 1)
            {
                SpellBuffRemoveStacks(target, owner, "PrilisasBlessing", 1);
            }
            SpellBuffClear(owner, "OdinCaptureChannel");
        }
    }
}
namespace Spells
{
    public class OdinCaptureChannelBomb : Script
    {
        Particle? particleID = null;
        Particle? particleID2 = null;
        int chargeTimePassed = 0;
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? _ = null;
            int count = 0;
            //object? nextBuffVars = null;
            TeamId teamOfOwner;
            SpellEffectCreate(out this.particleID, out _, "OdinCaptureBeam.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "BUFFBONE_GLB_CHANNEL_LOC", default, target, "spine", default, false, false, false, false, false, default, default);
            SpellEffectCreate(out this.particleID2, out _, "OdinCaptureBeam.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "BUFFBONE_GLB_CHANNEL_LOC", default, target, "spine", default, false, false, false, false, false, default, default);
            count = GetBuffCountFromAll(target, "OdinBombSuppression");
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 30, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, true, default);
            teamOfOwner = GetTeamID(default);
            this.chargeTimePassed = 0;
            SpellBuffAdd((ObjAIBase)attacker, attacker, "OdinChannelVision", 1, 1, 30, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void ChannelingUpdateStats(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? accumTime = null;
            //object? _ = null;
            int count = 0;
            TeamId teamOfOwner;
            //object? nextBuffVars = null;
            if(this.chargeTimePassed == 0)
            {
                if(accumTime > 1.5f)
                {
                    this.chargeTimePassed = 1;
                    SpellEffectRemove(this.particleID);
                    SpellEffectRemove(this.particleID2);
                    SpellEffectCreate(out this.particleID, out _, "OdinCaptureBeamEngaged.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "BUFFBONE_GLB_CHANNEL_LOC", default, target, "spine", default, false, false, false, false, false, default, default);
                    SpellEffectCreate(out this.particleID2, out _, "OdinCaptureBeamEngaged.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "BUFFBONE_GLB_CHANNEL_LOC", default, target, "spine", default, false, false, false, false, false, default, default);
                    UnlockAnimation(owner, true);
                    PlayAnimation("Channel", 0, owner, true, true, false);
                }
            }
            if(GetBuffCountFromCaster(owner, owner, "OdinCaptureChannelBomb") == 0)
            {
                StopChanneling((ObjAIBase)owner, ChannelingStopCondition.Cancel, ChannelingStopSource.Move);
            }
            if(this.chargeTimePassed == 1)
            {
                if(GetBuffCountFromCaster(owner, owner, "OdinCaptureChannelBomb") > 0)
                {
                    count = GetBuffCountFromAll(target, "OdinBombSuppression");
                    if(count == 0)
                    {
                        teamOfOwner = GetTeamID(default);
                        if(teamOfOwner == TeamId.TEAM_BLUE)
                        {
                            SpellBuffAdd((ObjAIBase)owner, target, "OdinBombSuppressionOrder", 10, 1, 30, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                        else
                        {
                            SpellBuffAdd((ObjAIBase)owner, target, "OdinBombSuppressionChaos", 10, 1, 30, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                        SpellBuffAdd((ObjAIBase)owner, target, "OdinBombSuppression", 1, 1, 10, default, BuffAddType.STACKS_AND_OVERLAPS, BuffType.AURA, 0, true, false, false, default);
                    }
                }
            }
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int cooldownToSet = 0;
            SpellEffectRemove(this.particleID);
            SpellBuffRemove(target, "OdinGuardianSuppressionBomb", (ObjAIBase)attacker, 0);
            SpellEffectRemove(this.particleID2);
            SpellBuffRemove(attacker, "OdinChannelVision", (ObjAIBase)attacker, 0);
            if(target.IsDead)
            {
                cooldownToSet = 0;
                SetUseSlotSpellCooldownTime(0, owner, false);
            }
            else
            {
                cooldownToSet = 4;
                SetUseSlotSpellCooldownTime(4, owner, false);
            }
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int cooldownToSet = 0;
            //object? _ = null;
            if(GetBuffCountFromCaster(owner, owner, "OdinBombSuccessParticle") > 0)
            {
                SpellBuffRemove(owner, "OdinCaptureChannelBomb", (ObjAIBase)owner, 0);
                SpellEffectRemove(this.particleID);
                SpellBuffRemoveStacks(target, owner, "OdinBombSuppressionChaos", 1);
                SpellBuffRemoveStacks(target, owner, "OdinBombSuppressionOrder", 1);
                SpellEffectRemove(this.particleID2);
                SpellBuffRemove(attacker, "OdinChannelVision", (ObjAIBase)attacker, 0);
                if(target.IsDead)
                {
                    cooldownToSet = 0;
                    SetUseSlotSpellCooldownTime(0, owner, false);
                }
                else
                {
                    cooldownToSet = 4;
                    SetUseSlotSpellCooldownTime(4, owner, false);
                }
                SpellBuffRemoveStacks(target, owner, "OdinBombSuppression", 1);
            }
            else
            {
                SpellBuffRemove(owner, "OdinCaptureChannelBomb", (ObjAIBase)owner, 0);
                SpellEffectCreate(out _, out _, "OdinCaptureCancel.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "spine", default, owner, "spine", default, false, false, false, false, false, default, default);
                SpellEffectRemove(this.particleID);
                SpellBuffRemoveStacks(target, owner, "OdinBombSuppressionChaos", 1);
                SpellBuffRemoveStacks(target, owner, "OdinBombSuppressionOrder", 1);
                SpellEffectRemove(this.particleID2);
                SpellBuffRemove(attacker, "OdinChannelVision", (ObjAIBase)attacker, 0);
                if(target.IsDead)
                {
                    cooldownToSet = 0;
                    SetUseSlotSpellCooldownTime(0, owner, false);
                }
                else
                {
                    cooldownToSet = 4;
                    SetUseSlotSpellCooldownTime(4, owner, false);
                }
                SpellBuffRemoveStacks(target, owner, "OdinBombSuppression", 1);
            }
        }
    }
}




















namespace Spells
{
    public class OdinDisintegrate : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int cooldownTotal = 0;
            float targetMaxHealth = 0;
            float damage = 0;
            cooldownTotal = 1;
            SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownTotal);
            targetMaxHealth = GetMaxHealth(target);
            damage = Math(targetMaxHealth, MathOp.MO_MULTIPLY, 0.0525f);
            ApplyDamage((ObjAIBase)attacker, target, damage, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_RAW, 1, 0, 0, true, true, (ObjAIBase)attacker);
        }
    }
}



namespace Spells
{
    public class OdinEntropicClaymore : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? ar = null;
            //object? _ = null;
            //object? nextBuffVars = null;
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            SpellEffectCreate(out ar, out _, "spectral_fury_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "OdinEntropicClaymore")
            {
                SetSlotSpellCooldownTimeVer2(60, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name1 == "OdinEntropicClaymore")
            {
                SetSlotSpellCooldownTimeVer2(60, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name2 == "OdinEntropicClaymore")
            {
                SetSlotSpellCooldownTimeVer2(60, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name3 == "OdinEntropicClaymore")
            {
                SetSlotSpellCooldownTimeVer2(60, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name4 == "OdinEntropicClaymore")
            {
                SetSlotSpellCooldownTimeVer2(60, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name5 == "OdinEntropicClaymore")
            {
                SetSlotSpellCooldownTimeVer2(60, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
        }
    }
}







namespace Spells
{
    public class OdinGuardianSpellAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float attackDamage = 0;
            attackDamage = GetTotalAttackDamage(owner);
            ApplyDamage((ObjAIBase)owner, target, attackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)owner);
        }
    }
}
namespace Spells
{
    public class OdinGuardianSpellAttackCast : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            if(GetBuffCountFromCaster(owner, owner, "Stun") > 0)
            {
                
            }
            else
            {
                SpellCast((ObjAIBase)owner, target, default, default, false, 0, SpellSlotType.ExtraSlots, 1, false, false, false, false, false, default);
            }
        }
    }
}















namespace Spells
{
    public class OdinMinionSpellAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float myMaxHealth = 0;
            TeamId targetTeamID;
            string? skinName = null;
            float healthToDecreaseBy = 0;
            TeamId myTeamID;
            float healthPercent = 0;
            float attackerMaxHealth = 0;
            float damageReturn = 0;
            Particle? noEstada = null;
            //object? _ = null;
            //object? nextBuffVars = null;
            myMaxHealth = GetMaxPAR(target);
            targetTeamID = GetTeamID(default);
            skinName = GetUnitSkinName(owner);
            if(GetBuffCountFromCaster(attacker, attacker, "OdinGolemBombBuff") > 0)
            {
                if(targetTeamID == TeamId.TEAM_NEUTRAL)
                {
                    healthToDecreaseBy = Math(0.06f, MathOp.MO_MULTIPLY, myMaxHealth);
                }
                else
                {
                    healthToDecreaseBy = Math(0.12f, MathOp.MO_MULTIPLY, myMaxHealth);
                }
            }
            else
            {
                if(GetBuffCountFromCaster(owner, owner, "OdinSuperMinion") > 0)
                {
                    if(targetTeamID == TeamId.TEAM_NEUTRAL)
                    {
                        healthToDecreaseBy = Math(0.015f, MathOp.MO_MULTIPLY, myMaxHealth);
                    }
                    else
                    {
                        healthToDecreaseBy = Math(0.03f, MathOp.MO_MULTIPLY, myMaxHealth);
                    }
                }
                else if(targetTeamID == TeamId.TEAM_NEUTRAL)
                {
                    healthToDecreaseBy = Math(0.01f, MathOp.MO_MULTIPLY, myMaxHealth);
                }
                else
                {
                    healthToDecreaseBy = Math(0.02f, MathOp.MO_MULTIPLY, myMaxHealth);
                }
            }
            myTeamID = GetTeamID(default);
            if(targetTeamID == TeamId.TEAM_NEUTRAL)
            {
                if(myTeamID == TeamId.TEAM_BLUE)
                {
                    healthToDecreaseBy = Math(healthToDecreaseBy, MathOp.MO_MULTIPLY, 1);
                }
                else
                {
                    healthToDecreaseBy = Math(healthToDecreaseBy, MathOp.MO_MULTIPLY, -1);
                }
            }
            else
            {
                healthToDecreaseBy = Math(healthToDecreaseBy, MathOp.MO_MULTIPLY, -1);
            }
            if(targetTeamID != myTeamID)
            {
                IncPAR(target, healthToDecreaseBy);
            }
            if(targetTeamID == TeamId.TEAM_NEUTRAL)
            {
                healthPercent = GetHealthPercent(target);
                attackerMaxHealth = GetMaxHealth(attacker);
                if(GetBuffCountFromCaster(attacker, attacker, "OdinGolemBombBuff") > 0)
                {
                    damageReturn = Math(0.01f, MathOp.MO_MULTIPLY, attackerMaxHealth);
                    SpellEffectCreate(out noEstada, out _, "Thornmail_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, target, default, default, false, default, default, false, false, default, default);
                }
                else
                {
                    if(GetBuffCountFromCaster(attacker, default, "SummonerOdinPromote") > 0)
                    {
                        damageReturn = Math(0.075f, MathOp.MO_MULTIPLY, attackerMaxHealth);
                    }
                    else
                    {
                        damageReturn = Math(0.25f, MathOp.MO_MULTIPLY, attackerMaxHealth);
                        SpellEffectCreate(out noEstada, out _, "Thornmail_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, target, default, default, false, default, default, false, false, default, default);
                    }
                }
                ApplyDamage((ObjAIBase)target, owner, damageReturn, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_RAW, 1, 0, 0, false, false, (ObjAIBase)target);
            }
            SpellBuffAdd((ObjAIBase)owner, target, "OdinMinionSpellAttack", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class OdinObeliskAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            float damagePercent = 0;
            TeamId targetTeam;
            float health = 0;
            float damageAmount = 0;
            TeamId myTeam;
            float currentHealthPercent = 0;
            SpellBuffAdd((ObjAIBase)attacker, target, "OdinGrdObeliskSuppression", 1, 1, 1.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            damagePercent = 0.15f;
            targetTeam = GetTeamID(default);
            if(targetTeam == TeamId.TEAM_NEUTRAL)
            {
                damagePercent = Math(damagePercent, MathOp.MO_MULTIPLY, 0.5f);
            }
            health = GetMaxHealth(target);
            damageAmount = Math(health, MathOp.MO_MULTIPLY, damagePercent);
            myTeam = GetTeamID(default);
            if(targetTeam == TeamId.TEAM_NEUTRAL)
            {
                if(myTeam == TeamId.TEAM_BLUE)
                {
                    currentHealthPercent = GetHealthPercent(target);
                    if(currentHealthPercent >= 0.96f)
                    {
                        ApplyDamage((ObjAIBase)attacker, target, 100000000, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_INTERNALRAW, 1, 0, 0, false, false, (ObjAIBase)attacker);
                    }
                    else
                    {
                        IncHealth(target, damageAmount, owner);
                    }
                }
                else
                {
                    ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_INTERNALRAW, 1, 0, 0, false, false, (ObjAIBase)attacker);
                }
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, damageAmount, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_INTERNALRAW, 1, 0, 0, false, false, (ObjAIBase)attacker);
            }
        }
    }
}












namespace Spells
{
    public class OdinRecall : Script
    {
        class ChannelingStart_nextBuffVars
        {
            public bool? WillRemove = null;
        }
        Particle? particleID = null;
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            ChannelingStart_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            nextBuffVars.WillRemove = false;
            SpellEffectCreate(out this.particleID, out _, "TeleportHome.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, false, false, false, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 4.4f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            Vector3 camPos;
            //object? _ = null;
            teamID = GetTeamID(default);
            SpellEffectRemove(this.particleID);
            if(teamID == TeamId.TEAM_BLUE)
            {
                TeleportToKeyLocation(attacker, SPAWN_LOCATION, TeamId.TEAM_BLUE);
            }
            else if(default == default)
            {
                TeleportToKeyLocation(attacker, SPAWN_LOCATION, TeamId.TEAM_PURPLE);
            }
            camPos = GetUnitPosition(owner);
            SetCameraPosition("Owner", camPos);
            SpellEffectCreate(out _, out _, "teleportarrive.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, false, false, false, false, default, default);
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellEffectRemove(this.particleID);
            SpellBuffRemove(owner, "OdinRecall", (ObjAIBase)owner, 0);
        }
    }
}
namespace Spells
{
    public class OdinRecallImproved : Script
    {
        class ChannelingStart_nextBuffVars
        {
            public bool? WillRemove = null;
        }
        Particle? particleID = null;
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            ChannelingStart_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            nextBuffVars.WillRemove = false;
            SpellEffectCreate(out this.particleID, out _, "TeleportHome_shortImproved.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, false, false, false, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 4.4f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            Vector3 camPos;
            //object? _ = null;
            teamID = GetTeamID(default);
            if(teamID == TeamId.TEAM_BLUE)
            {
                TeleportToKeyLocation(attacker, SPAWN_LOCATION, TeamId.TEAM_BLUE);
            }
            else if(default == default)
            {
                TeleportToKeyLocation(attacker, SPAWN_LOCATION, TeamId.TEAM_PURPLE);
            }
            camPos = GetUnitPosition(owner);
            SetCameraPosition("Owner", camPos);
            SpellEffectCreate(out _, out _, "teleportarrive.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, false, false, false, false, default, default);
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellEffectRemove(this.particleID);
            SpellBuffRemove(owner, "OdinRecallImproved", (ObjAIBase)owner, 0);
        }
    }
}
namespace Spells
{
    public class OdinRegenerationPotion : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float curHealth = 0;
            float maxHealth = 0;
            float percentHealth = 0;
            curHealth = GetHealth(target);
            maxHealth = GetMaxHealth(owner);
            percentHealth = Math(curHealth, MathOp.MO_DIVIDE, maxHealth);
            if(percentHealth > 0.99f)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 20, default, BuffAddType.RENEW_EXISTING, BuffType.HEAL, 0, true, false, false, default);
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "OdinRegenerationPotion")
            {
                SetSlotSpellCooldownTimeVer2(60, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name1 == "OdinRegenerationPotion")
            {
                SetSlotSpellCooldownTimeVer2(60, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name2 == "OdinRegenerationPotion")
            {
                SetSlotSpellCooldownTimeVer2(60, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name3 == "OdinRegenerationPotion")
            {
                SetSlotSpellCooldownTimeVer2(60, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name4 == "OdinRegenerationPotion")
            {
                SetSlotSpellCooldownTimeVer2(60, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name5 == "OdinRegenerationPotion")
            {
                SetSlotSpellCooldownTimeVer2(60, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
        }
    }
}





































namespace Spells
{
    public class OdynsVeil : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? a = null;
            //object? _ = null;
            float finalDamage = 0;
            //object? unit = null;
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            SpellEffectCreate(out a, out _, "OdynsVeil_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            finalDamage = Math(200, MathOp.MO_ADD, charVars.StoredDamage);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                ApplyDamage((ObjAIBase)attacker, unit, finalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
            });
            charVars.StoredDamage = 0;
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "odynsveil")
            {
                SetSlotSpellCooldownTimeVer2(90, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name1 == "odynsveil")
            {
                SetSlotSpellCooldownTimeVer2(90, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name2 == "odynsveil")
            {
                SetSlotSpellCooldownTimeVer2(90, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name3 == "odynsveil")
            {
                SetSlotSpellCooldownTimeVer2(90, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name4 == "odynsveil")
            {
                SetSlotSpellCooldownTimeVer2(90, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name5 == "odynsveil")
            {
                SetSlotSpellCooldownTimeVer2(90, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
        }
    }
}



namespace Spells
{
    public class OlafAxeThrow : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MovementSpeedMod = 0;
            public int AttackSpeedMod = 0;
        }
        public float[] effect0 = {-0.24f, -0.28f, -0.32f, -0.36f, -0.4f};
        public int[] effect1 = {0, 0, 0, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.MovementSpeedMod = this.effect0[level];
            nextBuffVars.AttackSpeedMod = this.effect1[level];
            BreakSpellShields(target);
            SpellBuffAdd((ObjAIBase)owner, target, "olafSlow", 100, 1, 2.5f, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "OlafAxeThrowDamage", 1, 1, 0.25f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class OlafBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class OlafBasicAttack2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}


namespace Spells
{
    public class OlafCritAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float baseAttackDamage = 0;
            hitResult = HitResult.HIT_Critical;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class OlafFrenziedStrikes : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float LifestealStat = 0;
            public float DamageGain = 0;
        }
        public float[] effect0 = {0.01f, 0.01f, 0.01f, 0.01f, 0.01f};
        public int[] effect1 = {7, 14, 21, 28, 35};
        public float[] effect2 = {0.09f, 0.12f, 0.15f, 0.18f, 0.21f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float maxHealth = 0;
            float healthPercent = 0;
            int baseDamage = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            float healthDamage = 0;
            maxHealth = GetMaxHealth(owner);
            healthPercent = this.effect0[level];
            baseDamage = this.effect1[level];
            nextBuffVars.LifestealStat = this.effect2[level];
            healthDamage = Math(healthPercent, MathOp.MO_MULTIPLY, maxHealth);
            nextBuffVars.DamageGain = Math(healthDamage, MathOp.MO_ADD, baseDamage);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class OlafRagnarok : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DamageAbsorption = 0;
        }
        public int[] effect0 = {20, 30, 40};
        public int[] effect1 = {6, 6, 6};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.DamageAbsorption = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect1[level], nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class OlafRecklessStrike : Script
    {
        public int[] effect0 = {40, 64, 88, 112, 136};
        public int[] effect1 = {100, 160, 220, 280, 340};
        Particle? particleID = null;
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            int selfDamage = 0;
            float currentHealth = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            selfDamage = this.effect0[level];
            currentHealth = GetHealth(owner);
            if(currentHealth <= selfDamage)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int bonusDamage = 0;
            float selfDamage = 0;
            Particle? b = null;
            //object? _ = null;
            Particle? a = null;
            Particle? c = null;
            bonusDamage = this.effect1[level];
            selfDamage = Math(bonusDamage, MathOp.MO_MULTIPLY, 0.4f);
            SpellEffectCreate(out b, out _, "olaf_recklessSwing_tar_02.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
            SpellEffectCreate(out this.particleID, out _, "olaf_recklessStrike_axe_charge.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "BUFFBONE_WEAPON_L_2", default, owner, "BUFFBONE_WEAPON_L_4", default, false, default, default, default, default, default, default);
            SpellEffectCreate(out this.particleID, out _, "olaf_recklessStrike_axe_charge.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "BUFFBONE_WEAPON_R_2", default, owner, "BUFFBONE_WEAPON_R_4", default, false, default, default, default, default, default, default);
            SpellEffectCreate(out a, out _, "olaf_recklessSwing_tar_04.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
            SpellEffectCreate(out c, out _, "olaf_recklessSwing_tar_05.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
            SpellEffectCreate(out c, out _, "olaf_recklessSwing_tar_03.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
            ApplyDamage((ObjAIBase)attacker, target, bonusDamage, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 1, false, false, (ObjAIBase)attacker);
            ApplyDamage((ObjAIBase)attacker, attacker, selfDamage, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class OnTheHunt : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public float AttackSpeedMod = 0;
            public float AllyAttackSpeedMod = 0;
        }
        public float[] effect0 = {0.25f, 0.25f, 0.25f};
        public float[] effect1 = {0.3f, 0.45f, 0.6f};
        public float[] effect2 = {0.15f, 0.225f, 0.3f};
        public int[] effect3 = {15, 15, 15};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            nextBuffVars.AttackSpeedMod = this.effect1[level];
            nextBuffVars.AllyAttackSpeedMod = this.effect2[level];
            SpellBuffAdd((ObjAIBase)attacker, attacker, "OnTheHunt", 1, 1, this.effect3[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.HASTE, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class OracleElixirSight : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)target, target, default, 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class OracleExtractSight : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)target, target, default, 1, 1, 300, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class OrderTurretShrineBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            if(target is Champion)
            {
                ApplyDamage((ObjAIBase)attacker, target, 1000, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_INTERNALRAW, 1, 0, 0, false, false, (ObjAIBase)attacker);
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, 1000, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_RAW, 1, 0, 0, false, false, (ObjAIBase)attacker);
            }
        }
    }
}

namespace Spells
{
    public class OrianaDamageIzuna : Script
    {
        class OnMissileEnd_nextBuffVars
        {
            public float MovementSpeedMod = 0;
            public int AttackSpeedMod = 0;
            public object? TotalDamage = null;
        }
        class TargetExecute_nextBuffVars
        {
            public object? TotalDamage = null;
        }
        public float[] effect0 = {-0.24f, -0.28f, -0.32f, -0.36f, -0.4f};
        public int[] effect1 = {0, 0, 0, 0, 0};
        public int[] effect2 = {60, 100, 140, 180, 220};
        public int[] effect3 = {50, 80, 110, 140, 170};
        //object? targetPos = null;
        bool? landed = null;
        public void OnMissileEnd(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? correctSpell = null;
            float duration = 0;
            //object? spellName = null;
            TeamId teamID;
            object? targetPos = null;
            //object? missileEndPosition = null;
            Minion? other3 = null;
            OnMissileEnd_nextBuffVars nextBuffVars = new();
            int level = 0;
            //object? unit = null;
            int baseDamage = 0;
            float aP = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            correctSpell = false;
            duration = GetBuffRemainingDuration(owner, "OrianaIzuna");
            if(spellName == "yomuizuna")
            {
                correctSpell = true;
            }
            else if(spellName == "OrianaIzuna")
            {
                correctSpell = true;
            }
            else if(spellName == "OrianaFastIzuna")
            {
                correctSpell = true;
            }
            else if(spellName == "yomufastizuna")
            {
                correctSpell = true;
            }
            if(duration >= 0.001f)
            {
                if(correctSpell == true)
                {
                    teamID = GetTeamID(default);
                    targetPos = this.targetPos;
                    other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", missileEndPosition, teamID, false, true, false, true, true, true, 0, default, true, (Champion)owner, default);
                    SpellBuffAdd((ObjAIBase)owner, other3, "OrianaGhost", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)owner, other3, "OrianaGhostMinion", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    nextBuffVars.MovementSpeedMod = this.effect0[level];
                    nextBuffVars.AttackSpeedMod = this.effect1[level];
                    ForEachUnitInTargetArea((ObjAIBase)attacker, other3.Position, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "OrianaIzunaDamage", false, (unit) => 
                    {
                        BreakSpellShields(unit);
                        baseDamage = this.effect2[level];
                        aP = GetFlatMagicDamageMod(owner);
                        bonusDamage = Math(aP, MathOp.MO_MULTIPLY, 0.5f);
                        totalDamage = Math(bonusDamage, MathOp.MO_ADD, baseDamage);
                        nextBuffVars.TotalDamage = totalDamage;
                        SpellBuffAdd((ObjAIBase)attacker, unit, "OrianaIzunaDamage", 1, 1, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    });
                    charVars.GhostAlive = false;
                    DestroyMissile(charVars.MissileID);
                    SpellBuffClear(owner, "OrianaIzuna");
                    this.landed = true;
                }
                else
                {
                    Say(owner, "SpellName: ", correctSpell);
                }
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int baseDamage = 0;
            float aP = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(target, attacker, "OrianaIzunaDamage") == 0)
            {
                BreakSpellShields(target);
                baseDamage = this.effect3[level];
                aP = GetFlatMagicDamageMod(owner);
                bonusDamage = Math(aP, MathOp.MO_MULTIPLY, 0.5f);
                totalDamage = Math(bonusDamage, MathOp.MO_ADD, baseDamage);
                totalDamage = Math(1.25f, MathOp.MO_MULTIPLY, totalDamage);
                nextBuffVars.TotalDamage = totalDamage;
                SpellBuffAdd((ObjAIBase)attacker, target, "OrianaIzunaDamage", 1, 1, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class OrianaDetonateCommand : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public int Distance = 0;
            public int IdealDistance = 0;
            public int Gravity = 0;
            public int Speed = 0;
            public object? Center = null;
        }
        public int[] effect0 = {150, 225, 300};
        public float[] effect1 = {-0.4f, -0.5f, -0.6f};
        public int[] effect2 = {415, 415, 415, 415, 415};
        Particle? particle = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            float damage = 0;
            bool? deployed = null;
            int rangeVar = 0;
            float selfAP = 0;
            float bonusDamage = 0;
            TeamId teamID;
            //object? unit = null;
            int currentType = 0;
            AttackableUnit? other1 = null;
            bool? isStealthed = null;
            //object? _ = null;
            bool? canSee = null;
            bool? validTarget = null;
            Vector3 oldPos;
            Particle? temp = null;
            Vector3 newPos;
            SpellBuffAdd((ObjAIBase)owner, owner, "OrianaGlobalCooldown", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            damage = this.effect0[level];
            deployed = false;
            nextBuffVars.MoveSpeedMod = this.effect1[level];
            rangeVar = this.effect2[level];
            selfAP = GetFlatMagicDamageMod(owner);
            bonusDamage = Math(selfAP, MathOp.MO_MULTIPLY, 0.7f);
            damage = Math(damage, MathOp.MO_ADD, bonusDamage);
            teamID = GetTeamID(default);
            ForNClosestUnitsInTargetArea(owner, owner.Position, 25000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", 1, true, "OrianaGhost", (unit) => 
            {
                deployed = true;
                targetPos = GetUnitPosition(unit);
                if(unit is Champion)
                {
                    currentType = 0;
                }
                else
                {
                    currentType = 1;
                }
                other1 = SetUnit(unit);
            });
            if(deployed == false)
            {
                if(GetBuffCountFromCaster(owner, default, "OriannaBallTracker") > 0)
                {
                    currentType = 5;
                    targetPos = charVars.BallPosition;
                }
                else
                {
                    targetPos = GetUnitPosition(owner);
                    currentType = 3;
                    targetPos = GetPointByUnitFacingOffset(owner, 0, 0);
                }
            }
            if(currentType != charVars.UltimateType)
            {
                currentType = 5;
                targetPos = charVars.UltimateTargetPos;
            }
            if(currentType == 0)
            {
                isStealthed = GetStealthed(other1);
                if(isStealthed == false)
                {
                    SpellEffectCreate(out this.particle, out _, "Oriana_Shockwave_nova_ally.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, other1, "SpinnigTopRidge", targetPos, default, default, targetPos, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out this.particle, out _, "Oriana_Shockwave_nova.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, targetPos, default, default, targetPos, true, false, false, false, false, default, default);
                }
            }
            else if(currentType == 1)
            {
                SpellEffectCreate(out this.particle, out _, "Oriana_Shockwave_nova.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, other1, "SpinnigTopRidge", targetPos, default, default, targetPos, true, false, false, false, false, default, default);
            }
            else if(currentType == 2)
            {
                SpellEffectCreate(out this.particle, out _, "Oriana_Shockwave_nova.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, "SpinnigTopRidge", targetPos, default, default, targetPos, true, false, false, false, false, default, default);
            }
            else if(currentType == 3)
            {
                SpellEffectCreate(out this.particle, out _, "Oriana_Shockwave_nova.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "SpinnigTopRidge", targetPos, default, default, targetPos, true, false, false, false, false, default, default);
            }
            else if(currentType == 5)
            {
                SpellEffectCreate(out this.particle, out _, "Oriana_Shockwave_nova.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, targetPos, default, default, targetPos, true, false, false, false, false, default, default);
            }
            ForEachUnitInTargetArea((ObjAIBase)owner, targetPos, rangeVar, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                canSee = CanSeeTarget(owner, unit);
                validTarget = true;
                if(unit is not Champion)
                {
                    if(canSee == false)
                    {
                        validTarget = false;
                    }
                }
                if(validTarget == true)
                {
                    BreakSpellShields(unit);
                    oldPos = GetPointByUnitFacingOffset(unit, 425, 0);
                    FaceDirection(unit, targetPos);
                    SpellEffectCreate(out temp, out _, "OrianaDetonate_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                    ApplyDamage((ObjAIBase)owner, unit, damage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)owner);
                    newPos = GetPointByUnitFacingOffset(unit, 425, -180);
                    FaceDirection(unit, oldPos);
                    nextBuffVars.Distance = 790;
                    nextBuffVars.IdealDistance = 870;
                    nextBuffVars.Gravity = 25;
                    nextBuffVars.Speed = 775;
                    nextBuffVars.Center = newPos;
                    SpellBuffAdd((ObjAIBase)owner, unit, "OrianaStun", 1, 1, 0.75f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)owner, unit, "MoveAwayCollision", 1, 1, 0.75f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                }
            });
        }
    }
}
namespace Spells
{
    public class OrianaDissonance : Script
    {
        bool? hit = null;
        public void OnMissileEnd(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? correctSpell = null;
            float duration = 0;
            //object? spellName = null;
            correctSpell = false;
            duration = GetBuffRemainingDuration(owner, "OrianaDissonance");
            if(spellName == "yomudissonance")
            {
                correctSpell = true;
            }
            else if(spellName == "OrianaDissonance")
            {
                correctSpell = true;
            }
            if(duration >= 0.01f)
            {
                if(correctSpell == true)
                {
                    this.hit = true;
                    charVars.GhostAlive = false;
                    DestroyMissile(charVars.MissileID);
                    SpellBuffClear(owner, "OrianaDissonance");
                }
            }
        }
        public void OnMissileUpdate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, SpellMissile missileNetworkID)
        {
            //object? missilePosition = null;
            //object? unit = null;
            //object? nextBuffVars = null;
            ForEachUnitInTargetArea((ObjAIBase)owner, missilePosition, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                if(GetBuffCountFromCaster(unit, owner, "OrianaShock") == 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, unit, "OrianaShock", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
            });
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            //object? missileNetworkID = null;
            SpellBuffAdd((ObjAIBase)attacker, target, "OrianaGhostEnemy", 1, 1, 4, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            DestroyMissile(missileNetworkID);
        }
    }
}
namespace Spells
{
    public class OrianaDissonanceBackup : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? GhostAlive = null;
            public object? CastPos = null;
            public object? TargetPos = null;
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            int castRange = 0;
            float distance = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            bool? deployed = null;
            //object? unit = null;
            Vector3 castPos;
            targetPos = GetCastSpellTargetPos();
            FaceDirection(owner, targetPos);
            ownerPos = GetUnitPosition(owner);
            castRange = 1640;
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            if(distance > castRange)
            {
                targetPos = GetPointByUnitFacingOffset(owner, castRange, 0);
            }
            nextBuffVars.GhostAlive = charVars.GhostAlive;
            deployed = false;
            ForNClosestUnitsInTargetArea(owner, owner.Position, 25000, "AffectFriends AffectMinions AffectHeroes ", 1, true, "OrianaGhost", (unit) => 
            {
                deployed = true;
                targetPos = GetCastSpellTargetPos();
                distance = DistanceBetweenObjectAndPoint(owner, targetPos);
                if(distance > castRange)
                {
                    targetPos = GetPointByUnitFacingOffset(owner, castRange, 0);
                }
                castPos = GetUnitPosition(unit);
                nextBuffVars.CastPos = castPos;
                nextBuffVars.TargetPos = targetPos;
                SpellCast((ObjAIBase)owner, default, targetPos, targetPos, true, 5, SpellSlotType.ExtraSlots, level, true, true, false, false, false, castPos);
            });
            if(deployed == false)
            {
                if(charVars.GhostAlive == true)
                {
                    
                }
                else
                {
                    castPos = GetUnitPosition(owner);
                    nextBuffVars.CastPos = castPos;
                    nextBuffVars.TargetPos = targetPos;
                    SpellCast((ObjAIBase)owner, default, targetPos, targetPos, true, 5, SpellSlotType.ExtraSlots, level, true, true, false, false, false, castPos);
                }
            }
            PlayAnimation("Spell2", 1.25f, owner, true, false, true);
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "OrianaGlobalCooldown", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class OrianaDissonanceCommand : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int Level = 0;
            public object? Particle2 = null;
            public object? Particle = null;
            public object? TargetPos = null;
        }
        public int[] effect0 = {70, 115, 160, 205, 250};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            TeamId teamID;
            float damage = 0;
            bool? deployed = null;
            float selfAP = 0;
            float bonusDamage = 0;
            //object? unit = null;
            Particle? particle = null;
            Particle? particle2 = null;
            Particle? temp = null;
            //object? _ = null;
            PlayAnimation("Spell2", 0, owner, false, true, false);
            SpellBuffAdd((ObjAIBase)owner, owner, "OrianaGlobalCooldown", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            teamID = GetTeamID(default);
            damage = this.effect0[level];
            deployed = false;
            selfAP = GetFlatMagicDamageMod(owner);
            bonusDamage = Math(selfAP, MathOp.MO_MULTIPLY, 0.5f);
            damage = Math(damage, MathOp.MO_ADD, bonusDamage);
            ForNClosestUnitsInTargetArea(owner, owner.Position, 25000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf AffectUntargetable ", 1, true, "OrianaGhost", (unit) => 
            {
                deployed = true;
                targetPos = GetUnitPosition(unit);
                if(unit is Champion)
                {
                    SpellEffectCreate(out particle, out particle2, "OrianaDissonance_ally_green.troy", "OrianaDissonance_ally_red.troy", teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, targetPos, default, default, targetPos, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out particle, out particle2, "OrianaDissonance_ball_green.troy", "OrianaDissonance_ball_red.troy", teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, targetPos, default, default, targetPos, true, false, false, false, false, default, default);
                }
            });
            if(deployed == false)
            {
                targetPos = GetUnitPosition(owner);
                if(GetBuffCountFromCaster(owner, default, "OriannaBallTracker") > 0)
                {
                    targetPos = charVars.BallPosition;
                }
                SpellEffectCreate(out particle, out particle2, "OrianaDissonance_cas_green.troy", "OrianaDissonance_cas_red.troy", teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, targetPos, default, default, targetPos, true, false, false, false, false, default, default);
            }
            ForEachUnitInTargetArea((ObjAIBase)owner, targetPos, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                SpellEffectCreate(out temp, out _, "OrianaDissonance_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                ApplyDamage((ObjAIBase)owner, unit, damage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)owner);
                nextBuffVars.Level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                SpellBuffAdd((ObjAIBase)attacker, unit, "OrianaSlow", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
            });
            ForEachUnitInTargetArea((ObjAIBase)owner, targetPos, 225, "AffectFriends AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                nextBuffVars.Level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                SpellBuffAdd((ObjAIBase)attacker, unit, "OrianaHaste", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            });
            nextBuffVars.Particle2 = particle2;
            nextBuffVars.Particle = particle;
            nextBuffVars.TargetPos = targetPos;
            SpellBuffAdd((ObjAIBase)owner, owner, "OrianaDissonanceWave", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}










namespace Spells
{
    public class OrianaIzuna : Script
    {
        class OnMissileEnd_nextBuffVars
        {
            public object? TotalDamage = null;
        }
        class TargetExecute_nextBuffVars
        {
            public object? TotalDamage = null;
        }
        public int[] effect0 = {60, 100, 140, 180, 220};
        public int[] effect1 = {60, 100, 140, 180, 220};
        bool? landed = null;
        //object? targetPos = null;
        public void OnMissileEnd(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? correctSpell = null;
            float duration = 0;
            //object? spellName = null;
            TeamId teamID;
            object? targetPos = null;
            //object? missileEndPosition = null;
            Minion? other3 = null;
            int level = 0;
            Particle? temp = null;
            //object? _ = null;
            int baseDamage = 0;
            float aP = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            OnMissileEnd_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            correctSpell = false;
            duration = GetBuffRemainingDuration(owner, "OrianaIzuna");
            if(spellName == "orianaizuna")
            {
                correctSpell = true;
            }
            else if(spellName == "OrianaIzuna")
            {
                correctSpell = true;
            }
            if(default == default)
            {
                charVars.GhostAlive = false;
                SpellBuffClear(owner, "OrianaIzuna");
                this.landed = true;
            }
            if(duration >= 0.001f)
            {
                if(correctSpell == true)
                {
                    teamID = GetTeamID(default);
                    targetPos = this.targetPos;
                    other3 = SpawnMinion("TheDoomBall", "OriannaBall", "idle.lua", missileEndPosition, teamID, false, true, false, true, true, true, 0, false, true, (Champion)owner, default);
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    SpellEffectCreate(out temp, out _, "Oriana_Izuna_nova.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, missileEndPosition, default, default, missileEndPosition, true, default, default, false, false, default, default);
                    ForEachUnitInTargetArea((ObjAIBase)attacker, other3.Position, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (unit) => 
                    {
                        baseDamage = this.effect0[level];
                        aP = GetFlatMagicDamageMod(owner);
                        bonusDamage = Math(aP, MathOp.MO_MULTIPLY, 0.6f);
                        totalDamage = Math(bonusDamage, MathOp.MO_ADD, baseDamage);
                        totalDamage = Math(totalDamage, MathOp.MO_MULTIPLY, charVars.IzunaPercent);
                        charVars.IzunaPercent = Math(0.9f, MathOp.MO_MULTIPLY, charVars.IzunaPercent);
                        charVars.IzunaPercent = Math(0.4f, MathOp.MO_MAX, charVars.IzunaPercent);
                        nextBuffVars.TotalDamage = totalDamage;
                        if(GetBuffCountFromCaster(unit, default, "OrianaIzunaDamage") == 0)
                        {
                            BreakSpellShields(unit);
                            SpellBuffAdd((ObjAIBase)attacker, unit, "OrianaIzunaDamage", 1, 1, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                    });
                }
            }
            DestroyMissile(charVars.MissileID);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int baseDamage = 0;
            float aP = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(target, default, "OrianaIzunaDamaged") == 0)
            {
                baseDamage = this.effect1[level];
                aP = GetFlatMagicDamageMod(owner);
                bonusDamage = Math(aP, MathOp.MO_MULTIPLY, 0.6f);
                totalDamage = Math(bonusDamage, MathOp.MO_ADD, baseDamage);
                totalDamage = Math(totalDamage, MathOp.MO_MULTIPLY, charVars.IzunaPercent);
                charVars.IzunaPercent = Math(0.9f, MathOp.MO_MULTIPLY, charVars.IzunaPercent);
                charVars.IzunaPercent = Math(0.4f, MathOp.MO_MAX, charVars.IzunaPercent);
                BreakSpellShields(target);
                nextBuffVars.TotalDamage = totalDamage;
                SpellBuffAdd((ObjAIBase)attacker, target, "OrianaIzunaDamage", 1, 1, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class OrianaIzunaCommand : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? GhostAlive = null;
            public object? TargetPos = null;
            public object? CastPos = null;
            public object? TotalDamage = null;
        }
        public int[] effect0 = {60, 100, 140, 180, 220};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            int castRange = 0;
            float distance = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            bool? deployed = null;
            bool? shiftWithoutMissile = null;
            //object? unit = null;
            Vector3 castPos;
            TeamId teamID;
            Minion? other3 = null;
            Particle? temp = null;
            //object? _ = null;
            int baseDamage = 0;
            float aP = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            Vector3 leftPoint;
            Vector3 rightPoint;
            float leftDistance = 0;
            float rightDistance = 0;
            SpellBuffClear(owner, "OrianaGhostSelf");
            SetSpellOffsetTarget(3, SpellSlotType.SpellSlots, "JunkName", SpellbookType.SPELLBOOK_CHAMPION, owner, owner);
            SetSpellOffsetTarget(1, SpellSlotType.SpellSlots, "JunkName", SpellbookType.SPELLBOOK_CHAMPION, owner, owner);
            SpellBuffClear(owner, "OrianaBlendDelay");
            targetPos = GetCastSpellTargetPos();
            FaceDirection(owner, targetPos);
            ownerPos = GetUnitPosition(owner);
            charVars.IzunaPercent = 1;
            castRange = 885;
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            if(distance > castRange)
            {
                FaceDirection(owner, targetPos);
                targetPos = GetPointByUnitFacingOffset(owner, castRange, 0);
            }
            if(distance <= 150)
            {
                FaceDirection(owner, targetPos);
                targetPos = GetPointByUnitFacingOffset(owner, 150, 0);
            }
            nextBuffVars.GhostAlive = charVars.GhostAlive;
            deployed = false;
            shiftWithoutMissile = false;
            ForNClosestUnitsInTargetArea(owner, owner.Position, 25000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf AffectUntargetable ", 1, true, "OrianaGhost", (unit) => 
            {
                deployed = true;
                targetPos = GetCastSpellTargetPos();
                distance = DistanceBetweenObjectAndPoint(owner, targetPos);
                if(distance > castRange)
                {
                    targetPos = GetPointByUnitFacingOffset(owner, castRange, 0);
                }
                castPos = GetUnitPosition(unit);
                SpellBuffClear(unit, "OrianaGhost");
                distance = DistanceBetweenPoints(castPos, targetPos);
                if(distance >= 75)
                {
                    nextBuffVars.TargetPos = targetPos;
                    nextBuffVars.CastPos = castPos;
                    SpellBuffAdd((ObjAIBase)owner, owner, "OrianaIzuna", 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    SpellCast((ObjAIBase)owner, default, targetPos, targetPos, true, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, castPos);
                }
                else
                {
                    shiftWithoutMissile = true;
                }
            });
            if(deployed == false)
            {
                if(GetBuffCountFromCaster(owner, default, "OriannaBallTracker") > 0)
                {
                    castPos = charVars.BallPosition;
                    SpellBuffClear(owner, "OriannaBallTracker");
                    targetPos = GetCastSpellTargetPos();
                    distance = DistanceBetweenObjectAndPoint(owner, targetPos);
                    if(distance > castRange)
                    {
                        targetPos = GetPointByUnitFacingOffset(owner, castRange, 0);
                    }
                    distance = DistanceBetweenPoints(charVars.BallPosition, targetPos);
                    if(distance >= 75)
                    {
                        nextBuffVars.TargetPos = targetPos;
                        nextBuffVars.CastPos = charVars.BallPosition;
                        SpellBuffAdd((ObjAIBase)owner, owner, "OrianaIzuna", 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        SpellCast((ObjAIBase)owner, default, targetPos, targetPos, true, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, charVars.BallPosition);
                    }
                    else
                    {
                        castPos = charVars.BallPosition;
                        shiftWithoutMissile = true;
                    }
                }
                else
                {
                    castPos = GetUnitPosition(owner);
                    distance = DistanceBetweenPoints(castPos, targetPos);
                    if(distance >= 75)
                    {
                        nextBuffVars.TargetPos = targetPos;
                        nextBuffVars.CastPos = castPos;
                        SpellBuffAdd((ObjAIBase)owner, owner, "OrianaIzuna", 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        SpellCast((ObjAIBase)owner, default, targetPos, targetPos, true, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, castPos);
                    }
                    else
                    {
                        shiftWithoutMissile = true;
                    }
                }
            }
            if(shiftWithoutMissile == true)
            {
                teamID = GetTeamID(default);
                other3 = SpawnMinion("TheDoomBall", "OriannaBall", "idle.lua", targetPos, teamID, false, true, false, true, true, true, 0, default, true, (Champion)owner, default);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                SpellEffectCreate(out temp, out _, "Oriana_Izuna_nova.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, targetPos, default, default, targetPos, true, default, default, false, false, default, default);
                ForEachUnitInTargetArea((ObjAIBase)attacker, other3.Position, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (unit) => 
                {
                    baseDamage = this.effect0[level];
                    aP = GetFlatMagicDamageMod(owner);
                    bonusDamage = Math(aP, MathOp.MO_MULTIPLY, 0.6f);
                    totalDamage = Math(bonusDamage, MathOp.MO_ADD, baseDamage);
                    totalDamage = Math(totalDamage, MathOp.MO_MULTIPLY, charVars.IzunaPercent);
                    charVars.IzunaPercent = Math(0.9f, MathOp.MO_MULTIPLY, charVars.IzunaPercent);
                    charVars.IzunaPercent = Math(0.4f, MathOp.MO_MAX, charVars.IzunaPercent);
                    nextBuffVars.TotalDamage = totalDamage;
                    if(GetBuffCountFromCaster(unit, default, "OrianaIzunaDamage") == 0)
                    {
                        BreakSpellShields(unit);
                        SpellBuffAdd((ObjAIBase)owner, unit, "OrianaIzunaDamage", 1, 1, 1, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    }
                });
            }
            SpellBuffAdd((ObjAIBase)owner, owner, "OrianaGlobalCooldown", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            leftPoint = GetPointByUnitFacingOffset(owner, 500, 90);
            rightPoint = GetPointByUnitFacingOffset(owner, 500, -90);
            leftDistance = DistanceBetweenPoints(castPos, leftPoint);
            rightDistance = DistanceBetweenPoints(castPos, rightPoint);
            if(leftDistance >= rightDistance)
            {
                PlayAnimation("Spell1b", 1, owner, true, false, false);
            }
            else
            {
                PlayAnimation("Spell1", 1, owner, true, false, false);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class OrianaIzunaFastCommand : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? GhostAlive = null;
            public object? CastPos = null;
            public object? TargetPos = null;
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            bool? deployed = null;
            //object? unit = null;
            Vector3 castPos;
            SpellBuffClear(owner, "0");
            SpellBuffClear(owner, "OrianaGhostSelf");
            targetPos = GetCastSpellTargetPos();
            FaceDirection(owner, targetPos);
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            if(distance > 775)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 800, 0);
            }
            nextBuffVars.GhostAlive = charVars.GhostAlive;
            deployed = false;
            ForNClosestUnitsInTargetArea(owner, owner.Position, 25000, "AffectFriends AffectMinions AffectHeroes ", 1, true, "OrianaGhost", (unit) => 
            {
                deployed = true;
                targetPos = GetCastSpellTargetPos();
                distance = DistanceBetweenObjectAndPoint(owner, targetPos);
                if(distance > 775)
                {
                    targetPos = GetPointByUnitFacingOffset(owner, 750, 0);
                }
                castPos = GetUnitPosition(unit);
                nextBuffVars.CastPos = castPos;
                nextBuffVars.TargetPos = targetPos;
                SpellBuffAdd((ObjAIBase)owner, owner, "OrianaIzuna", 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                SpellBuffClear(unit, "OrianaGhost");
                if(GetBuffCountFromCaster(owner, owner, "OrianaDesperatePower") > 0)
                {
                    SpellCast((ObjAIBase)owner, default, targetPos, targetPos, true, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, castPos);
                }
                else
                {
                    SpellCast((ObjAIBase)owner, default, targetPos, targetPos, true, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, castPos);
                }
            });
            if(deployed == false)
            {
                if(charVars.GhostAlive == true)
                {
                    
                }
                else
                {
                    castPos = GetUnitPosition(owner);
                    nextBuffVars.CastPos = castPos;
                    nextBuffVars.TargetPos = targetPos;
                    SpellBuffAdd((ObjAIBase)owner, owner, "OrianaIzuna", 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    if(GetBuffCountFromCaster(owner, owner, "OrianaDesperatePower") > 0)
                    {
                        SpellCast((ObjAIBase)owner, default, targetPos, targetPos, true, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, castPos);
                    }
                    else
                    {
                        SpellCast((ObjAIBase)owner, default, targetPos, targetPos, true, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, castPos);
                    }
                }
            }
            PlayAnimation("Spell2", 1.25f, owner, true, false, true);
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "OrianaGlobalCooldown", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}




namespace Spells
{
    public class OrianaRedact : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? DamageBlock = null;
            public object? TotalDamage = null;
        }
        public int[] effect0 = {80, 120, 160, 200, 240};
        bool? hit = null;
        public void OnMissileEnd(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? correctSpell = null;
            float duration = 0;
            //object? spellName = null;
            bool? found = null;
            //object? missileEndPosition = null;
            TeamId teamID;
            Particle? temp = null;
            //object? _ = null;
            //object? nextBuffVars = null;
            //object? caster = null;
            correctSpell = false;
            duration = GetBuffRemainingDuration(owner, "OrianaRedact");
            if(spellName == "orianaredact")
            {
                correctSpell = true;
            }
            else if(spellName == "OrianaRedact")
            {
                correctSpell = true;
            }
            if(correctSpell == true)
            {
                this.hit = true;
                charVars.GhostAlive = false;
                SpellBuffClear(owner, "OrianaRedact");
            }
            if(duration >= 0.01f)
            {
                found = false;
                ForNClosestUnitsInTargetArea(owner, missileEndPosition, 25000, "AffectFriends AffectMinions AffectHeroes AffectUntargetable ", 1, true, "OrianaGhost", (unit) => 
                {
                    found = true;
                });
                ForNClosestUnitsInTargetArea(owner, missileEndPosition, 25000, "AffectFriends AffectMinions AffectHeroes AffectUntargetable ", 1, true, "OrianaGhostSelf", (unit) => 
                {
                    found = true;
                });
                if(found == false)
                {
                    teamID = GetTeamID(default);
                    SpellEffectCreate(out temp, out _, "Orianna_Ball_Flash.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, "root", missileEndPosition, owner, default, default, false, false, false, false, false, default, default);
                    SpellBuffAdd((ObjAIBase)owner, owner, "OrianaGhostSelf", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    SpellEffectCreate(out temp, out _, "Orianna_Ball_Flash_Reverse.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, caster, false, owner, "SpinnigBottomRidge", default, owner, default, default, false, false, false, false, false, default, default);
                }
            }
            DestroyMissile(charVars.MissileID);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int baseDamageBlock = 0;
            float selfAP = 0;
            float bonusShield = 0;
            float totalShield = 0;
            float halfShield = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? missileNetworkID = null;
            baseDamageBlock = this.effect0[level];
            selfAP = GetFlatMagicDamageMod(owner);
            bonusShield = Math(selfAP, MathOp.MO_MULTIPLY, 0.4f);
            totalShield = Math(bonusShield, MathOp.MO_ADD, baseDamageBlock);
            halfShield = Math(0.75f, MathOp.MO_MULTIPLY, totalShield);
            if(target != owner)
            {
                if(GetBuffCountFromCaster(target, owner, "OrianaRedactTarget") > 0)
                {
                    if(!target.IsDead)
                    {
                        SpellBuffAdd((ObjAIBase)owner, target, "OrianaGhost", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        nextBuffVars.DamageBlock = totalShield;
                        SpellBuffAdd((ObjAIBase)owner, target, "OrianaRedactShield", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                        SpellBuffClear(target, "OrianaRedactTarget");
                    }
                    DestroyMissile(missileNetworkID);
                }
                else if(target.Team != owner.Team)
                {
                    nextBuffVars.TotalDamage = halfShield;
                    SpellBuffAdd((ObjAIBase)attacker, target, "OrianaRedactDamage", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
                else if(target is Champion)
                {
                    
                }
            }
            else
            {
                if(GetBuffCountFromCaster(target, owner, "OrianaRedactTarget") > 0)
                {
                    if(!owner.IsDead)
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "OrianaGhostSelf", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        nextBuffVars.DamageBlock = totalShield;
                        SpellBuffAdd((ObjAIBase)owner, owner, "OrianaRedactShield", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                        SpellBuffClear(target, "OrianaRedactTarget");
                    }
                    DestroyMissile(missileNetworkID);
                }
            }
        }
    }
}
namespace Spells
{
    public class OrianaRedactCommand : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? DamageBlock = null;
        }
        public int[] effect0 = {80, 120, 160, 200, 240};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? unit = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            bool? deployed = null;
            int baseDamageBlock = 0;
            float selfAP = 0;
            float bonusShield = 0;
            float totalShield = 0;
            Vector3 castPos;
            float minDistance = 0;
            SetSpellOffsetTarget(1, SpellSlotType.SpellSlots, "JunkName", SpellbookType.SPELLBOOK_CHAMPION, owner, owner);
            SetSpellOffsetTarget(3, SpellSlotType.SpellSlots, "JunkName", SpellbookType.SPELLBOOK_CHAMPION, owner, owner);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectFriends AffectHeroes ", default, true, (unit) => 
            {
                SpellBuffClear(unit, "OrianaRedactTarget");
            });
            SpellBuffAdd((ObjAIBase)owner, owner, "OrianaGlobalCooldown", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, target, "OrianaRedactTarget", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            deployed = false;
            baseDamageBlock = this.effect0[level];
            selfAP = GetFlatMagicDamageMod(owner);
            bonusShield = Math(selfAP, MathOp.MO_MULTIPLY, 0.4f);
            totalShield = Math(bonusShield, MathOp.MO_ADD, baseDamageBlock);
            ForNClosestUnitsInTargetArea(owner, owner.Position, 25000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf AffectUntargetable ", 1, true, "OrianaGhost", (unit) => 
            {
                SpellBuffClear(owner, "OrianaGhostSelf");
                SpellBuffClear(owner, "OrianaBlendDelay");
                deployed = true;
                if(GetBuffCountFromCaster(target, owner, "OrianaGhost") > 0)
                {
                    nextBuffVars.DamageBlock = totalShield;
                    SpellBuffAdd((ObjAIBase)owner, target, "OrianaRedactShield", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
                else
                {
                    SpellBuffClear(unit, "OrianaGhost");
                    SpellBuffClear(owner, "OrianaBlendDelay");
                    castPos = GetUnitPosition(unit);
                    targetPos = GetUnitPosition(target);
                    minDistance = DistanceBetweenPoints(castPos, targetPos);
                    if(minDistance <= 100)
                    {
                        nextBuffVars.DamageBlock = totalShield;
                        SpellBuffAdd((ObjAIBase)owner, target, "OrianaRedactShield", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                        if(target != owner)
                        {
                            SpellBuffAdd((ObjAIBase)owner, target, "OrianaGhost", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        }
                        else
                        {
                            SpellBuffAdd((ObjAIBase)owner, target, "OrianaGhostSelf", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        }
                    }
                    else
                    {
                        nextBuffVars.DamageBlock = totalShield;
                        SpellBuffAdd((ObjAIBase)owner, owner, "OrianaRedact", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        SpellCast((ObjAIBase)owner, target, target.Position, target.Position, true, 2, SpellSlotType.ExtraSlots, level, false, true, false, false, false, castPos);
                    }
                }
            });
            if(deployed == false)
            {
                if(GetBuffCountFromCaster(owner, default, "OriannaBallTracker") > 0)
                {
                    SpellBuffClear(owner, "OriannaBallTracker");
                    targetPos = GetUnitPosition(target);
                    castPos = charVars.BallPosition;
                    minDistance = DistanceBetweenPoints(castPos, targetPos);
                    if(minDistance <= 100)
                    {
                        nextBuffVars.DamageBlock = totalShield;
                        SpellBuffAdd((ObjAIBase)owner, target, "OrianaRedactShield", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                        if(target != owner)
                        {
                            SpellBuffAdd((ObjAIBase)owner, target, "OrianaGhost", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        }
                        else
                        {
                            SpellBuffAdd((ObjAIBase)owner, target, "OrianaGhostSelf", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        }
                    }
                    else
                    {
                        nextBuffVars.DamageBlock = totalShield;
                        SpellBuffAdd((ObjAIBase)owner, owner, "OrianaRedact", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        SpellCast((ObjAIBase)owner, target, target.Position, target.Position, true, 2, SpellSlotType.ExtraSlots, level, false, true, false, false, false, castPos);
                    }
                }
                else if(target != owner)
                {
                    SpellBuffClear(owner, "OrianaGhostSelf");
                    SpellBuffClear(owner, "OrianaBlendDelay");
                    castPos = GetUnitPosition(owner);
                    SpellBuffAdd((ObjAIBase)owner, owner, "OrianaRedact", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    SpellCast((ObjAIBase)owner, target, target.Position, target.Position, true, 2, SpellSlotType.ExtraSlots, level, false, true, false, false, false, castPos);
                }
                else
                {
                    nextBuffVars.DamageBlock = totalShield;
                    SpellBuffAdd((ObjAIBase)owner, owner, "OrianaRedactShield", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
            }
            PlayAnimation("Spell3", 0, owner, false, true, false);
        }
    }
}

namespace Spells
{
    public class OrianaRedactFastCommand : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? DamageBlock = null;
        }
        public int[] effect0 = {40, 70, 100, 130, 160};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            bool? deployed = null;
            int baseDamageBlock = 0;
            float selfAP = 0;
            float bonusShield = 0;
            float totalShield = 0;
            //object? unit = null;
            Vector3 castPos;
            PlayAnimation("Spell2", 1.25f, owner, false, false, true);
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "OrianaGlobalCooldown", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, target, "OrianaRedactTarget", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            deployed = false;
            baseDamageBlock = this.effect0[level];
            selfAP = GetFlatMagicDamageMod(owner);
            bonusShield = Math(selfAP, MathOp.MO_MULTIPLY, 0.7f);
            totalShield = Math(bonusShield, MathOp.MO_ADD, baseDamageBlock);
            ForNClosestUnitsInTargetArea(owner, owner.Position, 25000, "AffectFriends AffectMinions AffectHeroes ", 1, true, "OrianaGhost", (unit) => 
            {
                SpellBuffClear(owner, "OrianaGhostSelf");
                deployed = true;
                if(GetBuffCountFromCaster(target, owner, "OrianaGhost") > 0)
                {
                    nextBuffVars.DamageBlock = totalShield;
                    SpellBuffAdd((ObjAIBase)owner, target, "OrianaRedactShield", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
                else
                {
                    SpellBuffClear(unit, "OrianaGhost");
                    castPos = GetUnitPosition(unit);
                    nextBuffVars.DamageBlock = totalShield;
                    SpellBuffAdd((ObjAIBase)owner, owner, "OrianaRedact", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    if(GetBuffCountFromCaster(owner, owner, "OrianaDesperatePower") > 0)
                    {
                        SpellCast((ObjAIBase)owner, target, target.Position, target.Position, true, 2, SpellSlotType.ExtraSlots, level, false, true, false, false, false, castPos);
                    }
                    else
                    {
                        SpellCast((ObjAIBase)owner, target, target.Position, target.Position, true, 2, SpellSlotType.ExtraSlots, level, false, true, false, false, false, castPos);
                    }
                    nextBuffVars.DamageBlock = totalShield;
                    SpellBuffAdd((ObjAIBase)owner, unit, "OrianaRedactShield", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
            });
            if(deployed == false)
            {
                if(charVars.GhostAlive == true)
                {
                    
                }
                else if(target != owner)
                {
                    SpellBuffClear(owner, "OrianaGhostSelf");
                    castPos = GetUnitPosition(owner);
                    nextBuffVars.DamageBlock = totalShield;
                    SpellBuffAdd((ObjAIBase)owner, owner, "OrianaRedact", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    if(GetBuffCountFromCaster(owner, owner, "OrianaDesperatePower") > 0)
                    {
                        SpellCast((ObjAIBase)owner, target, target.Position, target.Position, true, 2, SpellSlotType.ExtraSlots, level, false, true, false, false, false, castPos);
                    }
                    else
                    {
                        SpellCast((ObjAIBase)owner, target, target.Position, target.Position, true, 2, SpellSlotType.ExtraSlots, level, false, true, false, false, false, castPos);
                    }
                    nextBuffVars.DamageBlock = totalShield;
                    SpellBuffAdd((ObjAIBase)owner, owner, "OrianaRedactShield", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
                else
                {
                    nextBuffVars.DamageBlock = totalShield;
                    SpellBuffAdd((ObjAIBase)owner, owner, "OrianaRedactShield", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                }
            }
        }
    }
}


namespace Spells
{
    public class OrianaReturn : Script
    {
        bool? hit = null;
        public void OnMissileEnd(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? correctSpell = null;
            float duration = 0;
            //object? spellName = null;
            correctSpell = false;
            duration = GetBuffRemainingDuration(owner, "OrianaReturn");
            if(spellName == "yomureturn")
            {
                correctSpell = true;
            }
            else if(spellName == "OrianaReturn")
            {
                correctSpell = true;
            }
            if(duration >= 0.01f)
            {
                if(correctSpell == true)
                {
                    this.hit = true;
                    charVars.GhostAlive = false;
                    DestroyMissile(charVars.MissileID);
                    SpellBuffClear(owner, "OrianaReturn");
                }
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, attacker, "OrianaGhostSelf", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffClear(owner, "OrianaReturn");
        }
    }
}







namespace Spells
{
    public class Overdrive : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public float AttackSpeedMod = 0;
        }
        public float[] effect0 = {0.16f, 0.2f, 0.24f, 0.28f, 0.32f};
        public float[] effect1 = {0.3f, 0.38f, 0.46f, 0.54f, 0.62f};
        public int[] effect2 = {8, 8, 8, 8, 8};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            nextBuffVars.AttackSpeedMod = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect2[level], nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.HASTE, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class Overload : Script
    {
        public int[] effect0 = {40, 65, 90, 115, 140};
        public float[] effect1 = {0.5f, 0.5f, 0.5f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? _ = null;
            TeamId teamID;
            float pAR = 0;
            int baseDamage = 0;
            float aoEDamage = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            Particle? part = null;
            //object? unit = null;
            SpellEffectCreate(out _, out _, "overload_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "root", default, target, "root", default, false, default, default, false, false, default, default);
            teamID = GetTeamID(default);
            pAR = GetMaxPAR(owner);
            baseDamage = this.effect0[level];
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            aoEDamage = this.effect1[level];
            bonusDamage = Math(pAR, MathOp.MO_MULTIPLY, 0.08f);
            totalDamage = Math(bonusDamage, MathOp.MO_ADD, baseDamage);
            aoEDamage = Math(totalDamage, MathOp.MO_MULTIPLY, aoEDamage);
            ApplyDamage((ObjAIBase)attacker, target, totalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.2f, 1, false, false, (ObjAIBase)attacker);
            if(GetBuffCountFromCaster(owner, owner, "DesperatePower") > 0)
            {
                SpellEffectCreate(out part, out _, "DesperatePower_aoe.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                {
                    if(target != unit)
                    {
                        SpellEffectCreate(out part, out _, "ManaLeach_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, false, false, default, default);
                        ApplyDamage((ObjAIBase)attacker, unit, aoEDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.1f, 1, false, false, (ObjAIBase)attacker);
                    }
                });
            }
        }
    }
}

namespace Spells
{
    public class PantheonBasicAttack : Script
    {
        public float[] effect0 = {0.15f, 0.15f, 0.15f, 0.15f, 0.15f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float tarHP = 0;
            float hpThreshold = 0;
            float baseDamage = 0;
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    if(GetBuffCountFromCaster(owner, owner, "Pantheon_CertainDeath") > 0)
                    {
                        if(target is ObjAIBase)
                        {
                            if(target is not BaseTurret)
                            {
                                tarHP = GetHealthPercent(target);
                                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                hpThreshold = this.effect0[level];
                                if(tarHP <= hpThreshold)
                                {
                                    hitResult = HitResult.HIT_Critical;
                                }
                            }
                        }
                    }
                }
            }
            baseDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 1, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class PantheonBasicAttack2 : Script
    {
        public float[] effect0 = {0.15f, 0.15f, 0.15f, 0.15f, 0.15f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float tarHP = 0;
            float hpThreshold = 0;
            float baseDamage = 0;
            if(hitResult != HitResult.HIT_Dodge)
            {
                if(hitResult != HitResult.HIT_Miss)
                {
                    if(GetBuffCountFromCaster(owner, owner, "Pantheon_CertainDeath") > 0)
                    {
                        if(target is ObjAIBase)
                        {
                            if(target is not BaseTurret)
                            {
                                tarHP = GetHealthPercent(target);
                                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                hpThreshold = this.effect0[level];
                                if(tarHP <= hpThreshold)
                                {
                                    hitResult = HitResult.HIT_Critical;
                                }
                            }
                        }
                    }
                }
            }
            baseDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 1, 1, false, false, (ObjAIBase)attacker);
        }
    }
}









namespace Spells
{
    public class Pantheon_GrandSkyfall_Fall : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public int DamageRank = 0;
        }
        public int[] effect0 = {400, 700, 1000};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            SetCameraPosition("Owner", targetPos);
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.DamageRank = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_GrandSkyfall_Fall", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 2, true, false, false, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "Pantheon_GrandSkyfall_Fall", (ObjAIBase)owner, 0);
        }
    }
}

namespace Spells
{
    public class Pantheon_GrandSkyfall_Jump : Script
    {
        class ChannelingSuccessStop_nextBuffVars
        {
            public object? TargetPos = null;
            public object? Particle = null;
        }
        public float[] effect0 = {90, 166.67f, 235.33f};
        //object? targetPos = null;
        Particle? part = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            int count = 0;
            targetPos = GetCastSpellTargetPos();
            targetPos = GetNearestPassablePosition(owner, targetPos);
            charVars.TargetPos = targetPos;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            FaceDirection(owner, targetPos);
            if(GetBuffCountFromCaster(owner, owner, "Pantheon_AegisShield2") == 0)
            {
                if(GetBuffCountFromCaster(owner, owner, "Pantheon_AegisShield") == 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_Aegis_Counter", 5, 1, 25000, default, BuffAddType.STACKS_AND_OVERLAPS, BuffType.AURA, 0, false, false, false, default);
                    count = GetBuffCountFromAll(owner, "Pantheon_Aegis_Counter");
                    if(count >= 4)
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_AegisShield", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        SpellBuffClear(owner, "Pantheon_Aegis_Counter");
                    }
                }
            }
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            object? targetPos = null;
            int level = 0;
            ChannelingSuccessStop_nextBuffVars nextBuffVars = new();
            Particle? b = null;
            float smnCooldown0 = 0;
            float smnCooldown1 = 0;
            teamID = GetTeamID(default);
            SpellBuffRemove(owner, "Pantheon_GrandSkyfall_Jump", (ObjAIBase)owner, 0);
            targetPos = charVars.TargetPos;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.TargetPos = this.targetPos;
            SetCanCast(owner, default);
            SpellCast((ObjAIBase)owner, default, this.targetPos, this.targetPos, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, true, false, default);
            SpellEffectCreate(out this.part, out b, "pantheon_grandskyfall_up.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, owner.Position, target, default, default, true, default, default, false, false, default, default);
            nextBuffVars.Particle = charVars.Particle;
            SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_GrandSkyfall", 1, 1, 1.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            smnCooldown0 = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
            smnCooldown1 = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
            SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_GS_ParticleRed", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(smnCooldown0 < 2.75f)
            {
                SetSlotSpellCooldownTimeVer2(2, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (ObjAIBase)owner, false);
            }
            if(smnCooldown1 < 2.75f)
            {
                SetSlotSpellCooldownTimeVer2(2, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (ObjAIBase)owner, false);
            }
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float manaRefund = 0;
            SetSlotSpellCooldownTimeVer2(10, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            manaRefund = this.effect0[level];
            IncPAR(owner, manaRefund);
            SpellBuffRemove(owner, "Pantheon_GrandSkyfall_Jump", (ObjAIBase)owner, 0);
            SpellBuffRemove(owner, "Pantheon_GS_Particle", (ObjAIBase)owner, 0);
            SpellBuffRemove(owner, "Pantheon_GS_ParticleRed", (ObjAIBase)owner, 0);
        }
    }
}
namespace Spells
{
    public class Pantheon_Heartseeker : Script
    {
        class ChannelingStart_nextBuffVars
        {
            public object? CastPosition = null;
            public object? SourcePosition = null;
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            
        }
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? castPosition = null;
            ChannelingStart_nextBuffVars nextBuffVars = new();
            Vector3 sourcePosition;
            int count = 0;
            nextBuffVars.CastPosition = castPosition;
            FaceDirection(owner, castPosition);
            sourcePosition = GetPointByUnitFacingOffset(owner, -25, 0);
            nextBuffVars.SourcePosition = sourcePosition;
            SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_Heartseeker", 1, 1, 0.75f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0.25f, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_HeartseekerSound", 1, 1, 0.75f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_HeartseekerChannel", 1, 1, 15, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(GetBuffCountFromCaster(owner, owner, "Pantheon_AegisShield2") == 0)
            {
                if(GetBuffCountFromCaster(owner, owner, "Pantheon_AegisShield") == 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_Aegis_Counter", 5, 1, 25000, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.AURA, 0, false, false, false, default);
                    count = GetBuffCountFromAll(owner, "Pantheon_Aegis_Counter");
                    if(count >= 4)
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_AegisShield", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        SpellBuffClear(owner, "Pantheon_Aegis_Counter");
                    }
                }
            }
        }
        public void ChannelingStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "Pantheon_HeartseekerChannel", (ObjAIBase)owner, 0);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "Pantheon_Heartseeker", (ObjAIBase)owner, 0);
            SpellBuffRemove(owner, "Pantheon_HeartseekerSound", (ObjAIBase)owner, 0);
            SpellBuffRemove(owner, "Pantheon_HeartseekerChannel", (ObjAIBase)owner, 0);
        }
    }
}
namespace Spells
{
    public class Pantheon_HeartseekerChannel : Script
    {
        public int[] effect0 = {13, 23, 33, 43, 53};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float totalDamage = 0;
            float baseDamage = 0;
            int dmgPerLvl = 0;
            float bonusDamage = 0;
            float finalDamage = 0;
            bool? isStealthed = null;
            bool? canSee = null;
            totalDamage = GetTotalAttackDamage(owner);
            baseDamage = GetBaseAttackDamage(owner);
            dmgPerLvl = this.effect0[level];
            bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseDamage);
            bonusDamage = Math(bonusDamage, MathOp.MO_MULTIPLY, 0.6f);
            finalDamage = Math(bonusDamage, MathOp.MO_ADD, dmgPerLvl);
            isStealthed = GetStealthed(target);
            if(target is Champion)
            {
                finalDamage = Math(2, MathOp.MO_MULTIPLY, finalDamage);
            }
            if(isStealthed == false)
            {
                ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
            }
            else if(target is Champion)
            {
                ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
            }
            else
            {
                canSee = CanSeeTarget(owner, target);
                if(canSee == true)
                {
                    ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                }
            }
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffClear(owner, "Pantheon_HeartseekerChannel");
        }
    }
}

namespace Spells
{
    public class Pantheon_LeapBash : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DamageLvl = 0;
            public int StunLength = 0;
        }
        public int[] effect0 = {50, 75, 100, 125, 150};
        public int[] effect1 = {1, 1, 1, 1, 1};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            int count = 0;
            SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_AegisShield", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            if(GetBuffCountFromCaster(owner, owner, "Pantheon_AegisShield2") == 0)
            {
                if(GetBuffCountFromCaster(owner, owner, "Pantheon_AegisShield") == 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_Aegis_Counter", 5, 1, 25000, default, BuffAddType.STACKS_AND_OVERLAPS, BuffType.AURA, 0, false, false, false, default);
                    count = GetBuffCountFromAll(owner, "Pantheon_Aegis_Counter");
                    if(count >= 4)
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_AegisShield", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        SpellBuffClear(owner, "Pantheon_Aegis_Counter");
                    }
                }
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            float distance = 0;
            int gravityVar = 0;
            int speedVar = 0;
            float factor = 0;
            Vector3 targetPos;
            nextBuffVars.DamageLvl = this.effect0[level];
            nextBuffVars.StunLength = this.effect1[level];
            SpellBuffAdd((ObjAIBase)target, owner, default, 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            distance = DistanceBetweenObjects("Attacker", "Target");
            if(distance >= 600)
            {
                gravityVar = 60;
                speedVar = 1150;
            }
            else if(distance >= 500)
            {
                gravityVar = 70;
                speedVar = 1075;
            }
            else if(distance >= 375)
            {
                gravityVar = 80;
                speedVar = 1000;
            }
            else if(distance >= 275)
            {
                gravityVar = 100;
                speedVar = 950;
            }
            else if(distance >= 175)
            {
                gravityVar = 120;
                speedVar = 900;
            }
            else if(distance >= 75)
            {
                gravityVar = 150;
                speedVar = 875;
            }
            else if(distance >= 0)
            {
                gravityVar = 300;
                speedVar = 850;
            }
            factor = Math(distance, MathOp.MO_DIVIDE, 600);
            factor = Math(factor, MathOp.MO_MAX, 0.75f);
            factor = Math(factor, MathOp.MO_MIN, 1.5f);
            PlayAnimation("Spell2", factor, attacker, false, false, true);
            targetPos = GetUnitPosition(target);
            Move(attacker, targetPos, speedVar, gravityVar, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, distance, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
        }
    }
}
namespace Spells
{
    public class Pantheon_Throw : Script
    {
        public int[] effect0 = {65, 105, 145, 185, 225};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            int count = 0;
            if(GetBuffCountFromCaster(owner, owner, "Pantheon_AegisShield2") == 0)
            {
                if(GetBuffCountFromCaster(owner, owner, "Pantheon_AegisShield") == 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_Aegis_Counter", 5, 1, 25000, default, BuffAddType.STACKS_AND_OVERLAPS, BuffType.AURA, 0, false, false, false, default);
                    count = GetBuffCountFromAll(owner, "Pantheon_Aegis_Counter");
                    if(count >= 4)
                    {
                        SpellBuffAdd((ObjAIBase)owner, owner, "Pantheon_AegisShield", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                        SpellBuffClear(owner, "Pantheon_Aegis_Counter");
                    }
                }
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float atkDmg = 0;
            float baseDamage = 0;
            int throwDmg = 0;
            float bonusDamage = 0;
            float finalDamage = 0;
            float maxHP = 0;
            float currentHP = 0;
            float critHealth = 0;
            atkDmg = GetTotalAttackDamage(owner);
            baseDamage = GetBaseAttackDamage(owner);
            throwDmg = this.effect0[level];
            bonusDamage = Math(atkDmg, MathOp.MO_SUBTRACT, baseDamage);
            bonusDamage = Math(bonusDamage, MathOp.MO_MULTIPLY, 1.4f);
            finalDamage = Math(bonusDamage, MathOp.MO_ADD, throwDmg);
            maxHP = GetMaxHealth(target);
            currentHP = GetHealth(target);
            critHealth = Math(maxHP, MathOp.MO_MULTIPLY, 0.15f);
            if(currentHP <= critHealth)
            {
                if(GetBuffCountFromCaster(owner, owner, "Pantheon_CertainDeath") > 0)
                {
                    finalDamage = Math(1.5f, MathOp.MO_MULTIPLY, finalDamage);
                }
            }
            ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, true, (ObjAIBase)attacker);
        }
    }
}


namespace Spells
{
    public class Parley : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int GoldGain = 0;
        }
        public int[] effect0 = {4, 5, 6, 7, 8};
        public int[] effect1 = {20, 45, 70, 95, 120};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float critChance = 0;
            HitResult? hitResult = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            int parBaseDamage = 0;
            float baseDamage = 0;
            float damageVar = 0;
            critChance = GetFlatCritChanceMod(attacker);
            if(RandomChance() < critChance)
            {
                hitResult = HitResult.HIT_Critical;
            }
            else
            {
                hitResult = HitResult.HIT_Normal;
            }
            BreakSpellShields(target);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.GoldGain = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            parBaseDamage = this.effect1[level];
            baseDamage = GetBaseAttackDamage(owner);
            baseDamage = Math(1, MathOp.MO_MULTIPLY, baseDamage);
            damageVar = Math(parBaseDamage, MathOp.MO_ADD, baseDamage);
            ApplyDamage((ObjAIBase)attacker, target, damageVar, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}





namespace Spells
{
    public class PhosphorusBomb : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            SelfExecute_nextBuffVars nextBuffVars = new();
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.TargetPos = targetPos;
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class PickACard : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int Counter = 0;
            public bool? WillRemove = null;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? rnd1 = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(rnd1 < 0.34f)
            {
                nextBuffVars.Counter = 0;
                SetSpell((ObjAIBase)owner, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "BlueCardLock");
                SetSlotSpellCooldownTime((ObjAIBase)owner, 1, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0.005f);
            }
            else if(rnd1 < 0.67f)
            {
                nextBuffVars.Counter = 2;
                SetSpell((ObjAIBase)owner, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "RedCardLock");
                SetSlotSpellCooldownTime((ObjAIBase)owner, 1, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0.005f);
            }
            else
            {
                nextBuffVars.Counter = 4;
                SetSpell((ObjAIBase)owner, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "GoldCardLock");
                SetSlotSpellCooldownTime((ObjAIBase)owner, 1, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0.005f);
            }
            nextBuffVars.WillRemove = false;
            SpellBuffAdd((ObjAIBase)owner, target, "PickACard_tracker", 1, 1, 10, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, target, "PickACard", 1, 1, 10, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class PickACardLock : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            SealSpellSlot(1, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, SpellbookType.SPELLBOOK_CHAMPION);
        }
    }
}



namespace Spells
{
    public class PoisonTrail : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? LastPosition = null;
            public int DamagePerTick = 0;
            public int ManaCost = 0;
        }
        public int[] effect0 = {22, 34, 46, 58, 70};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 pos;
            SelfExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "PoisonTrail") > 0)
            {
                SpellBuffRemove(owner, "PoisonTrail", (ObjAIBase)owner, 0);
                SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 1);
            }
            else
            {
                pos = GetUnitPosition(owner);
                nextBuffVars.LastPosition = pos;
                nextBuffVars.DamagePerTick = this.effect0[level];
                nextBuffVars.ManaCost = 13;
                SpellBuffAdd((ObjAIBase)owner, owner, "PoisonTrail", 1, 1, 20000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
        }
    }
}








namespace Spells
{
    public class PoppyDevastatingBlow : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
            public int BonusDamage = 0;
        }
        public int[] effect0 = {8, 7, 6, 5, 4};
        public int[] effect1 = {20, 40, 60, 80, 100};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpellCooldown = this.effect0[level];
            nextBuffVars.BonusDamage = this.effect1[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 10, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0);
        }
    }
}
namespace Spells
{
    public class PoppyDiplomaticImmunity : Script
    {
        public int[] effect0 = {6, 7, 8};
        public int[] effect1 = {6, 7, 8};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, target, "PoppyDITarget", 1, 1, this.effect0[level], default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyDITargetDmg", 1, 1, this.effect1[level], default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
    }
}

namespace Spells
{
    public class PoppyHeroicCharge : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public int Damage = 0;
            public int DamageTwo = 0;
            public bool? WillMove = null;
            public bool? WillRemove = null;
            public object? SlashSpeed = null;
        }
        public int[] effect0 = {50, 75, 100, 125, 150};
        public int[] effect1 = {75, 125, 175, 225, 275};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            Vector3 ownerPos;
            float moveSpeed = 0;
            float slashSpeed = 0;
            float distance = 0;
            float duration = 0;
            targetPos = GetUnitPosition(target);
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.Damage = this.effect0[level];
            nextBuffVars.DamageTwo = this.effect1[level];
            nextBuffVars.WillMove = true;
            nextBuffVars.WillRemove = false;
            ownerPos = GetUnitPosition(owner);
            moveSpeed = GetMovementSpeed(owner);
            slashSpeed = Math(moveSpeed, MathOp.MO_ADD, 1200);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            duration = Math(distance, MathOp.MO_DIVIDE, slashSpeed);
            nextBuffVars.SlashSpeed = slashSpeed;
            SpellBuffAdd((ObjAIBase)target, owner, default, 1, 1, 0.25f + duration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyHeroicChargePoppyFix", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}










namespace Spells
{
    public class PoppyParagonOfDemacia : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyParagonStats", 10, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyParagonStats", 10, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyParagonStats", 10, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyParagonStats", 10, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyParagonStats", 10, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyParagonStats", 10, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyParagonStats", 10, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyParagonStats", 10, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyParagonStats", 10, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyParagonStats", 10, 1, 5, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyParagonParticle", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyParagonSpeed", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "PoppyParagonIcon", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, default, default, default, default);
        }
    }
}






namespace Spells
{
    public class PotionOfBrilliance : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 240, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class PotionOfElusiveness : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 240, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class PotionOfGiantStrength : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 240, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
        }
    }
}

namespace Spells
{
    public class Pounce : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? Pos = null;
        }
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Vector3 pos;
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            teamID = GetTeamID(default);
            pos = GetPointByUnitFacingOffset(owner, 375, 0);
            nextBuffVars.Pos = pos;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellEffectCreate(out _, out _, "nidalee_cougarPounce_cas.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
        }
    }
}
namespace Spells
{
    public class PowerBall : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int AoEDamage = 0;
            public float SlowPercent = 0;
            public float MoveSpeedMod = 0;
            public TeamId CasterID;
        }
        public int[] effect0 = {100, 150, 200, 250, 300};
        public float[] effect1 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public float[] effect2 = {0.03f, 0.03f, 0.03f, 0.03f, 0.03f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            float reductionPerc = 0;
            float cooldownTime = 0;
            //object? _ = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            teamID = GetTeamID(default);
            reductionPerc = GetPercentCooldownMod(owner);
            reductionPerc = Math(1, MathOp.MO_ADD, reductionPerc);
            cooldownTime = Math(10, MathOp.MO_MULTIPLY, reductionPerc);
            if(GetBuffCountFromCaster(owner, owner, "PowerBall") > 0)
            {
                SpellBuffRemove(owner, "PowerBall", (ObjAIBase)owner, 0);
                SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownTime);
                SetCanAttack(owner, default);
                PopAllCharacterData(owner);
                SpellEffectCreate(out _, out _, "PowerBallStop.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, true, false, false, false, false, default, default);
            }
            else
            {
                nextBuffVars.AoEDamage = this.effect0[level];
                nextBuffVars.SlowPercent = this.effect1[level];
                nextBuffVars.MoveSpeedMod = this.effect2[level];
                nextBuffVars.CasterID = GetTeamID(default);
                SpellBuffAdd((ObjAIBase)attacker, owner, "PowerBall", 1, 1, 7, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.HASTE, 0, true, false, false, default);
                SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 1);
            }
        }
    }
}

namespace Spells
{
    public class PowerFist : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
        }
        public int[] effect0 = {9, 8, 7, 6, 5};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpellCooldown = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 10, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SetSlotSpellCooldownTime((ObjAIBase)owner, 2, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0);
        }
    }
}
namespace Spells
{
    public class PowerFistAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}




namespace Spells
{
    public class PrideShield : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? ShieldHealth = null;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float aP = 0;
            float aPBonus = 0;
            float shieldHealth = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            aP = GetFlatMagicDamageMod(owner);
            aPBonus = Math(aP, MathOp.MO_MULTIPLY, 1.5f);
            shieldHealth = Math(aPBonus, MathOp.MO_ADD, 200);
            nextBuffVars.ShieldHealth = shieldHealth;
            SpellBuffAdd((ObjAIBase)owner, owner, "PrideShield", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 1, default, default, default, default);
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "PrideShield")
            {
                SetSlotSpellCooldownTimeVer2(45, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name1 == "PrideShield")
            {
                SetSlotSpellCooldownTimeVer2(45, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name2 == "PrideShield")
            {
                SetSlotSpellCooldownTimeVer2(45, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name3 == "PrideShield")
            {
                SetSlotSpellCooldownTimeVer2(45, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name4 == "PrideShield")
            {
                SetSlotSpellCooldownTimeVer2(45, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name5 == "PrideShield")
            {
                SetSlotSpellCooldownTimeVer2(45, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
        }
    }
}
namespace Spells
{
    public class PrilisasBlessing : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? particle = null;
            //object? _ = null;
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            SpellEffectCreate(out particle, out _, "Haste_proc.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, default, default, false, default, default, default);
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            nextBuffVars.MoveSpeedMod = 0.3f;
            SpellBuffAdd((ObjAIBase)owner, owner, "Haste", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            if(name == "prilisasblessing")
            {
                SetSlotSpellCooldownTimeVer2(60, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name1 == "prilisasblessing")
            {
                SetSlotSpellCooldownTimeVer2(60, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name2 == "prilisasblessing")
            {
                SetSlotSpellCooldownTimeVer2(60, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name3 == "prilisasblessing")
            {
                SetSlotSpellCooldownTimeVer2(60, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name4 == "prilisasblessing")
            {
                SetSlotSpellCooldownTimeVer2(60, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name5 == "prilisasblessing")
            {
                SetSlotSpellCooldownTimeVer2(60, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
        }
    }
}
namespace Spells
{
    public class PrimalSurge : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float ASMod = 0;
        }
        public float[] effect0 = {0.2f, 0.3f, 0.4f, 0.5f, 0.6f};
        public int[] effect1 = {50, 85, 120, 155, 190};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            float tempAbilityPower = 0;
            float healthToRestore = 0;
            float healingBonus = 0;
            nextBuffVars.ASMod = this.effect0[level];
            tempAbilityPower = GetFlatMagicDamageMod(owner);
            healthToRestore = this.effect1[level];
            healingBonus = Math(tempAbilityPower, MathOp.MO_MULTIPLY, 0.7f);
            healthToRestore = Math(healingBonus, MathOp.MO_ADD, healthToRestore);
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 7, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            IncHealth(target, healthToRestore, owner);
        }
    }
}



namespace Spells
{
    public class Propel : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, target, default, 1, 1, 1.2f, default, BuffAddType.RENEW_EXISTING, BuffType.STUN, 0, default, default, default, default);
        }
    }
}



namespace Spells
{
    public class Pulverize : Script
    {
        public int[] effect0 = {60, 105, 150, 195, 240};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            //object? unit = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "AlistarTrample", 1, 1, 3, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, false, false, false, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                SpellBuffAdd((ObjAIBase)owner, unit, "Pulverize", 1, 1, 1, default, BuffAddType.RENEW_EXISTING, BuffType.STUN, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 1, false, false, (ObjAIBase)attacker);
            });
        }
    }
}
namespace Spells
{
    public class PuncturingTaunt : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int ArmorDebuff = 0;
        }
        public int[] effect0 = {-10, -15, -20, -25, -30};
        public float[] effect1 = {1, 1.5f, 2, 2.5f, 3};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            float tauntDuration = 0;
            nextBuffVars.ArmorDebuff = this.effect0[level];
            tauntDuration = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "PuncturingTauntArmorDebuff", 1, 1, tauntDuration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SHRED, 0, true, false, false, default);
            ApplyTaunt(attacker, target, tauntDuration);
        }
    }
}

namespace Spells
{
    public class PurpleCapote : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int ShieldHealth = 0;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "PurpleCapote")
            {
                SetSlotSpellCooldownTimeVer2(60, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name1 == "PurpleCapote")
            {
                SetSlotSpellCooldownTimeVer2(60, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name2 == "PurpleCapote")
            {
                SetSlotSpellCooldownTimeVer2(60, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name3 == "PurpleCapote")
            {
                SetSlotSpellCooldownTimeVer2(60, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name4 == "PurpleCapote")
            {
                SetSlotSpellCooldownTimeVer2(60, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name5 == "PurpleCapote")
            {
                SetSlotSpellCooldownTimeVer2(60, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            nextBuffVars.ShieldHealth = 400;
            SpellBuffAdd((ObjAIBase)owner, owner, "PurpleCapote", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}



namespace Spells
{
    public class QuicksilverSash : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? castParticle = null;
            //object? _ = null;
            float slotCheck = 0;
            string? name = null;
            SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            DispellNegativeBuffs(owner);
            slotCheck = 0;
            while(slotCheck <= 5)
            {
                name = GetSlotSpellName((ObjAIBase)owner, slotCheck, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
                if(name == "QuicksilverSash")
                {
                    SetSlotSpellCooldownTimeVer2(90, slotCheck, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                }
                slotCheck = Math(slotCheck, MathOp.MO_ADD, 1);
            }
        }
    }
}



namespace Spells
{
    public class RaiseMorale : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public float AttackDmgMod = 0;
        }
        public float[] effect0 = {0.08f, 0.11f, 0.14f, 0.17f, 0.2f};
        public int[] effect1 = {12, 19, 26, 33, 40};
        public float[] effect2 = {0.04f, 0.055f, 0.07f, 0.085f, 0.1f};
        public float[] effect3 = {6, 9.5f, 13, 16.5f, 20};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            SpellBuffRemove(owner, "RaiseMorale", (ObjAIBase)owner, 0);
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            nextBuffVars.AttackDmgMod = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, attacker, "RaiseMoraleTeamBuff", 1, 1, 7, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            nextBuffVars.MoveSpeedMod = this.effect2[level];
            nextBuffVars.AttackDmgMod = this.effect3[level];
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1500, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)attacker, unit, "RaiseMoraleTeamBuff", 1, 1, 7, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            });
        }
    }
}




namespace Spells
{
    public class RanduinsOmen : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public float AttackSpeedMod = 0;
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? a = null;
            //object? _ = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            float castArmor = 0;
            float castMR = 0;
            float defTotal = 0;
            float finalSlow = 0;
            //object? unit = null;
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            SpellEffectCreate(out a, out _, "RanduinsOmen_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, false, false, default, default);
            nextBuffVars.MoveSpeedMod = -0.35f;
            nextBuffVars.AttackSpeedMod = -0.35f;
            castArmor = GetArmor(owner);
            castMR = GetSpellBlock(owner);
            defTotal = Math(castArmor, MathOp.MO_ADD, castMR);
            defTotal = Math(defTotal, MathOp.MO_DIVIDE, 100);
            defTotal = Math(defTotal, MathOp.MO_MULTIPLY, 0.5f);
            finalSlow = Math(defTotal, MathOp.MO_ADD, 1);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)attacker, unit, "Slow", 100, 1, finalSlow, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)attacker, unit, "BlackOmen", 1, 1, finalSlow, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                ApplyAssistMarker((ObjAIBase)attacker, unit, 10);
            });
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "randuinsomen")
            {
                SetSlotSpellCooldownTimeVer2(60, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name1 == "randuinsomen")
            {
                SetSlotSpellCooldownTimeVer2(60, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name2 == "randuinsomen")
            {
                SetSlotSpellCooldownTimeVer2(60, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name3 == "randuinsomen")
            {
                SetSlotSpellCooldownTimeVer2(60, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name4 == "randuinsomen")
            {
                SetSlotSpellCooldownTimeVer2(60, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name5 == "randuinsomen")
            {
                SetSlotSpellCooldownTimeVer2(60, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
        }
    }
}
namespace Spells
{
    public class RapidFire : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float AttackSpeedMod = 0;
        }
        public float[] effect0 = {0.3f, 0.45f, 0.6f, 0.75f, 0.9f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.AttackSpeedMod = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 7, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class Ravage : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int ArmorMod = 0;
        }
        public int[] effect0 = {80, 135, 190, 255, 320};
        public int[] effect1 = {-10, -14, -18, -22, -26};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 1, 1, false, false, (ObjAIBase)attacker);
            nextBuffVars.ArmorMod = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 5, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SHRED, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class ReapTheWhirlwind : Script
    {
        class ChannelingStart_nextBuffVars
        {
            public object? TickAmount = null;
        }
        public int[] effect0 = {35, 55, 75};
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int baseTickAmount = 0;
            float aPAmount = 0;
            float aPTickBonus = 0;
            float tickAmount = 0;
            ChannelingStart_nextBuffVars nextBuffVars = new();
            baseTickAmount = this.effect0[level];
            aPAmount = GetFlatMagicDamageMod(owner);
            aPTickBonus = Math(aPAmount, MathOp.MO_MULTIPLY, 0.175f);
            tickAmount = Math(baseTickAmount, MathOp.MO_ADD, aPTickBonus);
            nextBuffVars.TickAmount = tickAmount;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 10, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0.25f, true, false, false, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "ReapTheWhirlwind", (ObjAIBase)owner, 0);
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellBuffRemove(owner, "ReapTheWhirlwind", (ObjAIBase)owner, 0);
        }
    }
}




namespace Spells
{
    public class Recall : Script
    {
        class ChannelingStart_nextBuffVars
        {
            public bool? WillRemove = null;
        }
        Particle? particleID = null;
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            ChannelingStart_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            nextBuffVars.WillRemove = false;
            SpellEffectCreate(out this.particleID, out _, "TeleportHome.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, default, default, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 7.9f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, default, default, default, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            Vector3 camPos;
            //object? _ = null;
            teamID = GetTeamID(default);
            if(teamID == TeamId.TEAM_BLUE)
            {
                TeleportToKeyLocation(attacker, SPAWN_LOCATION, TeamId.TEAM_BLUE);
            }
            else if(default == default)
            {
                TeleportToKeyLocation(attacker, SPAWN_LOCATION, TeamId.TEAM_PURPLE);
            }
            camPos = GetUnitPosition(owner);
            SetCameraPosition("Owner", camPos);
            SpellEffectCreate(out _, out _, "teleportarrive.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, default, default, default, default, default, default);
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellEffectRemove(this.particleID);
            SpellBuffRemove(owner, "Recall", (ObjAIBase)owner, default);
        }
    }
}
namespace Spells
{
    public class RecallImproved : Script
    {
        class ChannelingStart_nextBuffVars
        {
            public bool? WillRemove = null;
        }
        Particle? particleID = null;
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            ChannelingStart_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            nextBuffVars.WillRemove = false;
            SpellEffectCreate(out this.particleID, out _, "TeleportHomeImproved.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, false, false, false, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 7.9f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            Vector3 camPos;
            //object? _ = null;
            teamID = GetTeamID(default);
            if(teamID == TeamId.TEAM_BLUE)
            {
                TeleportToKeyLocation(attacker, SPAWN_LOCATION, TeamId.TEAM_BLUE);
            }
            else if(default == default)
            {
                TeleportToKeyLocation(attacker, SPAWN_LOCATION, TeamId.TEAM_PURPLE);
            }
            camPos = GetUnitPosition(owner);
            SetCameraPosition("Owner", camPos);
            SpellEffectCreate(out _, out _, "teleportarrive.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, false, false, false, false, default, default);
        }
        public void ChannelingCancelStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SpellEffectRemove(this.particleID);
            SpellBuffRemove(owner, "RecallImproved", (ObjAIBase)owner, 0);
        }
    }
}

namespace Spells
{
    public class RedCardAttack : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public int[] effect0 = {30, 45, 60, 75, 90};
        public float[] effect1 = {-0.3f, -0.35f, -0.4f, -0.45f, -0.5f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "PickaCard", (ObjAIBase)owner, default);
            SpellBuffRemove(owner, "RedCardPreAttack", (ObjAIBase)owner, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float attackDamage = 0;
            int bonusDamage = 0;
            float redCardDamage = 0;
            Particle? arrm8y = null;
            //object? _ = null;
            float baseDamage = 0;
            //object? targetPosition = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            teamID = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            attackDamage = GetTotalAttackDamage(owner);
            bonusDamage = this.effect0[level];
            redCardDamage = Math(attackDamage, MathOp.MO_ADD, bonusDamage);
            if(target is ObjAIBase)
            {
                ApplyDamage((ObjAIBase)attacker, target, 0, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out arrm8y, out _, "PickaCard_red_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, default, default, default);
                if(target is BaseTurret)
                {
                    ApplyDamage((ObjAIBase)attacker, target, redCardDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
                }
            }
            else
            {
                baseDamage = GetBaseAttackDamage(attacker);
                SpellEffectCreate(out arrm8y, out _, "PickaCard_red_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, targetPosition, default, default, targetPosition, false, default, default, false, default, default, default);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            }
            nextBuffVars.MoveSpeedMod = this.effect1[level];
            ForEachUnitInTargetArea((ObjAIBase)attacker, target.Position, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                ApplyDamage((ObjAIBase)attacker, unit, redCardDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
                SpellBuffAdd((ObjAIBase)attacker, unit, "CardmasterSlow", 100, 1, 2.5f, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
            });
        }
    }
}
namespace Spells
{
    public class RedCardLock : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            SealSpellSlot(1, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, default);
        }
    }
}
namespace Spells
{
    public class RedCardPreAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            SpellCast((ObjAIBase)owner, target, target.Position, target.Position, false, 2, SpellSlotType.ExtraSlots, level, true, true, false, false, true, default);
            SpellBuffRemove(owner, "PickACard", (ObjAIBase)owner, default);
        }
    }
}
namespace Spells
{
    public class Red_Minion_MechRangeBasicAttack : Script
    {
        public int[] effect0 = {40, 55, 70, 85, 100};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int dmg = 0;
            float abilityPower = 0;
            float abilityPowerBonus = 0;
            float totalDmg = 0;
            teamID = GetTeamID(default);
            attacker = GetChampionBySkinName("Jester", teamID);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            dmg = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(attacker);
            abilityPowerBonus = Math(abilityPower, MathOp.MO_MULTIPLY, 0.35f);
            totalDmg = Math(dmg, MathOp.MO_ADD, abilityPowerBonus);
            if(target is not Champion)
            {
                totalDmg = Math(totalDmg, MathOp.MO_MULTIPLY, 0.5f);
            }
            ApplyDamage((ObjAIBase)attacker, target, totalDmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, default, default, default, default);
        }
    }
}
namespace Spells
{
    public class Red_Minion_MechRangeBasicAttack2 : Script
    {
        public int[] effect0 = {40, 55, 70, 85, 100};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int dmg = 0;
            float abilityPower = 0;
            float abilityPowerBonus = 0;
            float totalDmg = 0;
            teamID = GetTeamID(default);
            attacker = GetChampionBySkinName("Jester", teamID);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            dmg = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(attacker);
            abilityPowerBonus = Math(abilityPower, MathOp.MO_MULTIPLY, 0.35f);
            totalDmg = Math(dmg, MathOp.MO_ADD, abilityPowerBonus);
            if(target is not Champion)
            {
                totalDmg = Math(totalDmg, MathOp.MO_MULTIPLY, 0.5f);
            }
            ApplyDamage((ObjAIBase)attacker, target, totalDmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, default, default, default, default);
        }
    }
}
namespace Spells
{
    public class Red_Minion_MechRangeCritAttack : Script
    {
        public int[] effect0 = {40, 55, 70, 85, 100};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int dmg = 0;
            float abilityPower = 0;
            float abilityPowerBonus = 0;
            float totalDmg = 0;
            teamID = GetTeamID(default);
            attacker = GetChampionBySkinName("Jester", teamID);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            dmg = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(attacker);
            abilityPowerBonus = Math(abilityPower, MathOp.MO_MULTIPLY, 0.35f);
            totalDmg = Math(dmg, MathOp.MO_ADD, abilityPowerBonus);
            if(target is not Champion)
            {
                totalDmg = Math(totalDmg, MathOp.MO_MULTIPLY, 0.5f);
            }
            ApplyDamage((ObjAIBase)attacker, target, totalDmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, default, default, default, default);
        }
    }
}

namespace Spells
{
    public class RegenerationPotion : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float percentHealth = 0;
            percentHealth = GetHealthPercent(target);
            if(percentHealth > 0.99f)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)target, target, "RegenerationPotion", 5, 1, 15, default, BuffAddType.STACKS_AND_CONTINUE, BuffType.HEAL, 0, false, false, false, default);
            SpellBuffAdd((ObjAIBase)target, target, "Potion_Internal", 1, 1, 15, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            charVars.CountHealthPotion = GetBuffCountFromAll(owner, "RegenerationPotion");
        }
    }
}




namespace Spells
{
    public class RelentlessAssault : Script
    {
        public float[] effect0 = {5, 6.5f, 8};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float duration = 0;
            //object? nextBuffVars = null;
            duration = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, owner, "ArmsmasterRelentlessMR", 1, 1, duration, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
        }
    }
}


namespace Spells
{
    public class RemoveScurvy : Script
    {
        public int[] effect0 = {80, 150, 220, 290, 360};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int healLevel = 0;
            float abilityPower = 0;
            float healAmount = 0;
            SpellBuffRemoveType(owner, BuffType.STUN);
            SpellBuffRemoveType(owner, BuffType.CHARM);
            SpellBuffRemoveType(owner, BuffType.FEAR);
            SpellBuffRemoveType(owner, BuffType.SLEEP);
            SpellBuffRemoveType(owner, BuffType.SNARE);
            SpellBuffRemoveType(owner, BuffType.SLOW);
            SpellBuffRemoveType(owner, BuffType.TAUNT);
            SpellBuffRemoveType(owner, BuffType.POLYMORPH);
            SpellBuffRemoveType(owner, BuffType.SILENCE);
            SpellBuffRemoveType(owner, BuffType.SUPPRESSION);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            healLevel = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(owner);
            abilityPower = Math(abilityPower, MathOp.MO_MULTIPLY, 1);
            healAmount = Math(healLevel, MathOp.MO_ADD, abilityPower);
            IncHealth(owner, healAmount, owner);
            if(GetBuffCountFromCaster(owner, owner, "PirateScurvy") > 0)
            {
                SpellBuffRemove(owner, "PirateScurvy", (ObjAIBase)owner, default);
            }
        }
    }
}

namespace Spells
{
    public class RenektonCleave : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float DrainPercent = 0;
            public int MaxDrain = 0;
        }
        public int[] effect0 = {5, 5, 5, 5, 5};
        public int[] effect1 = {60, 90, 120, 150, 180};
        public int[] effect2 = {150, 225, 300, 375, 450};
        public int[] effect3 = {50, 75, 100, 125, 150};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            float ragePercent = 0;
            float healthPercent = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            int furyGainIncrement = 0;
            float furyGain = 0;
            int bonusDamage = 0;
            float weaponDamage = 0;
            float baseDamage = 0;
            float damageToDeal = 0;
            float rangeVar = 0;
            Particle? c = null;
            //object? _ = null;
            bool? shouldHit = null;
            //object? unit = null;
            bool? visible = null;
            teamID = GetTeamID(default);
            ragePercent = GetPARPercent(owner);
            healthPercent = GetHealthPercent(owner);
            SpellBuffAdd((ObjAIBase)owner, owner, "RenektonUnlockAnimationCleave", 1, 1, 0.24f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            PlayAnimation("Spell1", 0, owner, false, false, true);
            furyGainIncrement = this.effect0[level];
            furyGain = 0;
            bonusDamage = this.effect1[level];
            weaponDamage = GetTotalAttackDamage(owner);
            baseDamage = GetBaseAttackDamage(owner);
            weaponDamage = Math(weaponDamage, MathOp.MO_SUBTRACT, baseDamage);
            weaponDamage = Math(weaponDamage, MathOp.MO_MULTIPLY, 0.8f);
            damageToDeal = Math(bonusDamage, MathOp.MO_ADD, weaponDamage);
            rangeVar = 400;
            if(GetBuffCountFromCaster(owner, owner, "RenektonReignOfTheTyrant") > 0)
            {
                rangeVar = Math(1.2f, MathOp.MO_MULTIPLY, rangeVar);
            }
            if(ragePercent >= 0.5f)
            {
                SpellEffectCreate(out c, out _, "renektoncleave_trail_rage.troy ", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, owner, "spine", default, owner, default, default, true, default, default, false, default, default, default);
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, rangeVar, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                {
                    shouldHit = true;
                    visible = CanSeeTarget(owner, unit);
                    if(visible == false)
                    {
                        if(unit is not Champion)
                        {
                            shouldHit = false;
                        }
                    }
                    if(shouldHit == true)
                    {
                        nextBuffVars.DrainPercent = 0.1f;
                        nextBuffVars.MaxDrain = this.effect2[level];
                        SpellBuffAdd((ObjAIBase)attacker, target, "RenektonCleaveDrain", 1, 1, 0.25f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        BreakSpellShields(unit);
                        if(visible == true)
                        {
                            SpellBuffAdd((ObjAIBase)owner, unit, "RenektonBloodSplatterTarget", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                        if(unit is Champion)
                        {
                            ApplyDamage((ObjAIBase)owner, unit, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1.5f, 0, 0, true, false, (ObjAIBase)attacker);
                        }
                        else
                        {
                            ApplyDamage((ObjAIBase)owner, unit, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1.5f, 0, 0, true, false, (ObjAIBase)attacker);
                        }
                    }
                });
                IncPAR(owner, -50);
                SpellBuffClear(owner, "RenektonRageReady");
            }
            else
            {
                SpellEffectCreate(out c, out _, "renektoncleave_trail.troy ", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, owner, "spine", default, owner, default, default, true, default, default, false, default, default, default);
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, rangeVar, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                {
                    shouldHit = true;
                    visible = CanSeeTarget(owner, unit);
                    if(visible == false)
                    {
                        if(unit is not Champion)
                        {
                            shouldHit = false;
                        }
                    }
                    if(shouldHit == true)
                    {
                        nextBuffVars.DrainPercent = 0.05f;
                        nextBuffVars.MaxDrain = this.effect3[level];
                        BreakSpellShields(unit);
                        SpellBuffAdd((ObjAIBase)attacker, target, "RenektonCleaveDrain", 1, 1, 0.25f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        if(unit is Champion)
                        {
                            ApplyDamage((ObjAIBase)owner, unit, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, true, false, (ObjAIBase)attacker);
                        }
                        else
                        {
                            ApplyDamage((ObjAIBase)owner, unit, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, true, false, (ObjAIBase)attacker);
                        }
                        furyGain = Math(furyGain, MathOp.MO_ADD, furyGainIncrement);
                        furyGain = Math(furyGain, MathOp.MO_MIN, 25);
                        if(visible == true)
                        {
                            SpellBuffAdd((ObjAIBase)owner, unit, "RenektonBloodSplatterTarget", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        }
                    }
                });
                IncPAR(owner, furyGain);
                if(healthPercent <= charVars.RageThreshold)
                {
                    furyGain = Math(0.5f, MathOp.MO_MULTIPLY, furyGain);
                    IncPAR(owner, furyGain);
                }
            }
            SpellBuffClear(owner, "RenektonCleaveDrain");
        }
    }
}

namespace Spells
{
    public class RenektonDice : Script
    {
        class SelfExecute_nextBuffVars
        {
            public bool? DiceVersion = null;
            public object? DashSpeed = null;
            public int BonusDamage = 0;
            public float ArmorShred = 0;
            public object? Distance = null;
            public object? TargetPos = null;
        }
        public int[] effect0 = {20, 18, 16, 14, 12};
        public int[] effect1 = {30, 60, 90, 120, 150};
        public float[] effect2 = {-0.15f, -0.175f, -0.2f, -0.225f, -0.25f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? unit = null;
            Vector3 ownerPos;
            float moveSpeed = 0;
            float dashSpeed = 0;
            float distance = 0;
            float cooldownMod = 0;
            float multiplier = 0;
            int cooldownTime = 0;
            float debuffTime = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", true, (unit) => 
            {
                SpellBuffClear(unit, "RenektonTargetSliced");
            });
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            moveSpeed = GetMovementSpeed(owner);
            dashSpeed = Math(moveSpeed, MathOp.MO_ADD, 750);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            if(distance >= 0)
            {
                FaceDirection(owner, targetPos);
                distance = 450;
                targetPos = GetPointByUnitFacingOffset(owner, 450, 0);
            }
            if(GetBuffCountFromCaster(owner, owner, "RenektonSliceAndDiceDelay") == 0)
            {
                cooldownMod = GetPercentCooldownMod(owner);
                multiplier = Math(1, MathOp.MO_ADD, cooldownMod);
                cooldownTime = this.effect0[level];
                debuffTime = Math(multiplier, MathOp.MO_MULTIPLY, cooldownTime);
                SpellBuffAdd((ObjAIBase)owner, owner, "RenektonSliceAndDiceTimer", 1, 1, debuffTime, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                nextBuffVars.DiceVersion = false;
            }
            else
            {
                nextBuffVars.DiceVersion = true;
                SpellBuffClear(owner, "RenektonSliceAndDiceDelay");
            }
            nextBuffVars.DashSpeed = dashSpeed;
            nextBuffVars.BonusDamage = this.effect1[level];
            nextBuffVars.ArmorShred = this.effect2[level];
            nextBuffVars.Distance = distance;
            nextBuffVars.TargetPos = targetPos;
            SpellBuffAdd((ObjAIBase)attacker, owner, "RenektonSliceAndDice", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0.1f, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class RenektonExecute : Script
    {
        public int[] effect0 = {5, 15, 25, 35, 45};
        public float[] effect1 = {0.75f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f};
        public int[] effect2 = {1, 1, 1, 1, 1};
        public int[] effect3 = {1, 1, 1, 1, 1};
        public int[] effect4 = {1, 1, 1, 1, 1};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float ragePercent = 0;
            bool? furyBonus = null;
            int bonusDamage = 0;
            float currentFury = 0;
            //object? nextBuffVars = null;
            float baseDamage = 0;
            float bonusPercent = 0;
            float postFury = 0;
            float furyCost = 0;
            if(hitResult == HitResult.HIT_Critical)
            {
                hitResult = HitResult.HIT_Normal;
            }
            if(hitResult == HitResult.HIT_Miss)
            {
                hitResult = HitResult.HIT_Normal;
            }
            ragePercent = GetPARPercent(owner);
            furyBonus = false;
            bonusDamage = this.effect0[level];
            if(ragePercent >= 0.5f)
            {
                furyBonus = true;
                IncPAR(owner, -50);
                currentFury = GetPAR(owner);
            }
            BreakSpellShields(target);
            if(furyBonus == true)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "RenektonUnlockAnimation", 1, 1, 0.51f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "RenektonUnlockAnimation", 1, 1, 0.3f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            baseDamage = GetBaseAttackDamage(owner);
            bonusPercent = this.effect1[level];
            baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, bonusPercent);
            baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
            ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, this.effect2[level], 0, bonusPercent, false, true, (ObjAIBase)attacker);
            if(target is ObjAIBase)
            {
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, this.effect3[level], 0, bonusPercent, false, true, (ObjAIBase)attacker);
                if(furyBonus == false)
                {
                    ApplyStun(attacker, target, 0.75f);
                }
            }
            if(furyBonus == true)
            {
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, this.effect4[level], 0, bonusPercent, false, true, (ObjAIBase)attacker);
                SpellBuffClear(owner, "RenektonRageReady");
            }
            if(furyBonus == true)
            {
                postFury = GetPAR(owner);
                furyCost = Math(currentFury, MathOp.MO_SUBTRACT, postFury);
                IncPAR(owner, furyCost);
                ApplyStun(attacker, target, 1.5f);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, "RenektonWeaponGlowFade", 1, 1, 1, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SetDodgePiercing(owner, false);
        }
    }
}
namespace Spells
{
    public class RenektonExecuteAttack : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int BonusDamage = 0;
        }
        public int[] effect0 = {35, 70, 105, 140, 175};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            float ragePercent = 0;
            float damageAmount = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.BonusDamage = this.effect0[level];
            SpellBuffRemove(owner, "RenektonPreExecute", (ObjAIBase)owner, default);
            if(target is ObjAIBase)
            {
                if(target is BaseTurret)
                {
                    
                }
                else
                {
                    ragePercent = GetPARPercent(owner);
                    if(ragePercent >= 0.5f)
                    {
                        SpellCast((ObjAIBase)attacker, target, default, default, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, true, true, default);
                        charVars.Swung = true;
                    }
                    else
                    {
                        SpellCast((ObjAIBase)attacker, target, default, default, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, true, true, default);
                        charVars.Swung = true;
                    }
                }
            }
            damageAmount = Math(damageAmount, MathOp.MO_MULTIPLY, 0);
        }
    }
}

namespace Spells
{
    public class RenektonPreExecute : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
            public int BonusDamage = 0;
        }
        public int[] effect0 = {13, 12, 11, 10, 9};
        public int[] effect1 = {35, 70, 105, 140, 175};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            float ragePercent = 0;
            SetSlotSpellCooldownTimeVer2(0, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            nextBuffVars.SpellCooldown = this.effect0[level];
            nextBuffVars.BonusDamage = this.effect1[level];
            ragePercent = GetPAR(owner);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 6, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class RenektonReignOfTheTyrant : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? Level = null;
            public int BonusHealth = 0;
            public float MaximumSpeed = 0;
            public float BurnDamage = 0;
        }
        public int[] effect0 = {300, 450, 600};
        public int[] effect1 = {20, 35, 50};
        public float[] effect2 = {0.75f, 1, 1.25f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            int baseBurn = 0;
            float selfAP = 0;
            float aPBonus = 0;
            nextBuffVars.Level = level;
            nextBuffVars.BonusHealth = this.effect0[level];
            baseBurn = this.effect1[level];
            nextBuffVars.MaximumSpeed = this.effect2[level];
            selfAP = GetFlatMagicDamageMod(owner);
            aPBonus = Math(0.05f, MathOp.MO_MULTIPLY, selfAP);
            nextBuffVars.BurnDamage = Math(baseBurn, MathOp.MO_ADD, aPBonus);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 15, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class RenektonSliceAndDice : Script
    {
        class SelfExecute_nextBuffVars
        {
            public bool? DiceVersion = null;
            public object? DashSpeed = null;
            public int BonusDamage = 0;
            public float ArmorShred = 0;
            public object? Distance = null;
            public object? TargetPos = null;
        }
        public int[] effect0 = {18, 17, 16, 15, 14};
        public int[] effect1 = {30, 60, 90, 120, 150};
        public float[] effect2 = {-0.15f, -0.175f, -0.2f, -0.225f, -0.25f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? unit = null;
            Vector3 ownerPos;
            float moveSpeed = 0;
            float dashSpeed = 0;
            float distance = 0;
            float cooldownMod = 0;
            float multiplier = 0;
            int cooldownTime = 0;
            float debuffTime = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", true, (unit) => 
            {
                SpellBuffClear(unit, "RenektonTargetSliced");
            });
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            moveSpeed = GetMovementSpeed(owner);
            dashSpeed = Math(moveSpeed, MathOp.MO_ADD, 750);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            if(distance >= 0)
            {
                FaceDirection(owner, targetPos);
                distance = 450;
                targetPos = GetPointByUnitFacingOffset(owner, 450, 0);
            }
            if(GetBuffCountFromCaster(owner, owner, "RenektonSliceAndDiceDelay") == 0)
            {
                cooldownMod = GetPercentCooldownMod(owner);
                multiplier = Math(1, MathOp.MO_ADD, cooldownMod);
                cooldownTime = this.effect0[level];
                debuffTime = Math(multiplier, MathOp.MO_MULTIPLY, cooldownTime);
                SpellBuffAdd((ObjAIBase)owner, owner, "RenektonSliceAndDiceTimer", 1, 1, debuffTime, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                nextBuffVars.DiceVersion = false;
            }
            else
            {
                nextBuffVars.DiceVersion = true;
                SpellBuffClear(owner, "RenektonSliceAndDiceDelay");
            }
            nextBuffVars.DashSpeed = dashSpeed;
            nextBuffVars.BonusDamage = this.effect1[level];
            nextBuffVars.ArmorShred = this.effect2[level];
            nextBuffVars.Distance = distance;
            nextBuffVars.TargetPos = targetPos;
            SpellBuffAdd((ObjAIBase)attacker, owner, "RenektonSliceAndDice", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0.1f, true, false, false, default);
        }
    }
}



namespace Spells
{
    public class RenektonSuperExecute : Script
    {
        public int[] effect0 = {5, 15, 25, 35, 45};
        public float[] effect1 = {0.75f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f};
        public int[] effect2 = {1, 1, 1, 1, 1};
        public int[] effect3 = {1, 1, 1, 1, 1};
        public int[] effect4 = {1, 1, 1, 1, 1};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float ragePercent = 0;
            bool? furyBonus = null;
            int bonusDamage = 0;
            float currentFury = 0;
            //object? nextBuffVars = null;
            float baseDamage = 0;
            float bonusPercent = 0;
            float postFury = 0;
            float furyCost = 0;
            if(hitResult == HitResult.HIT_Critical)
            {
                hitResult = HitResult.HIT_Normal;
            }
            if(hitResult == HitResult.HIT_Miss)
            {
                hitResult = HitResult.HIT_Normal;
            }
            ragePercent = GetPARPercent(owner);
            furyBonus = false;
            bonusDamage = this.effect0[level];
            if(ragePercent >= 0.5f)
            {
                furyBonus = true;
                IncPAR(owner, -50);
                currentFury = GetPAR(owner);
            }
            BreakSpellShields(target);
            if(furyBonus == true)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "RenektonUnlockAnimation", 1, 1, 0.51f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "RenektonUnlockAnimation", 1, 1, 0.3f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            baseDamage = GetBaseAttackDamage(owner);
            bonusPercent = this.effect1[level];
            baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, bonusPercent);
            baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
            ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, this.effect2[level], 0, bonusPercent, false, true, (ObjAIBase)attacker);
            if(target is ObjAIBase)
            {
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, this.effect3[level], 0, bonusPercent, false, true, (ObjAIBase)attacker);
                if(furyBonus == false)
                {
                    ApplyStun(attacker, target, 0.75f);
                }
            }
            if(furyBonus == true)
            {
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, this.effect4[level], 0, bonusPercent, false, true, (ObjAIBase)attacker);
                SpellBuffClear(owner, "RenektonRageReady");
            }
            if(furyBonus == true)
            {
                postFury = GetPAR(owner);
                furyCost = Math(currentFury, MathOp.MO_SUBTRACT, postFury);
                IncPAR(owner, furyCost);
                ApplyStun(attacker, target, 1.5f);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, "RenektonWeaponGlowFade", 1, 1, 1, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SetDodgePiercing(owner, false);
        }
    }
}













namespace Spells
{
    public class RespawnClassic : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            ReincarnateHero(owner);
        }
    }
}



namespace Spells
{
    public class Rewind : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float spellCD1 = 0;
            float spellCD1a = 0;
            float spellCD1b = 0;
            //object? _ = null;
            float spellCD3 = 0;
            float spellCD3a = 0;
            float spellCD3b = 0;
            float spellCD4 = 0;
            float spellCD4a = 0;
            float spellCD4b = 0;
            spellCD1 = GetSlotSpellCooldownTime((ObjAIBase)target, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            spellCD1a = Math(spellCD1, MathOp.MO_ADD, -10);
            spellCD1b = Math(spellCD1a, MathOp.MO_MAX, 0);
            SetSlotSpellCooldownTimeVer2(spellCD1b, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)target, false);
            SpellEffectCreate(out _, out _, "ChronoRefresh_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, default, default, false, default, default, default);
            spellCD3 = GetSlotSpellCooldownTime((ObjAIBase)target, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            spellCD3a = Math(spellCD3, MathOp.MO_ADD, -10);
            spellCD3b = Math(spellCD3a, MathOp.MO_MAX, 0);
            SetSlotSpellCooldownTimeVer2(spellCD3b, 2, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)target, false);
            spellCD4 = GetSlotSpellCooldownTime((ObjAIBase)target, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            spellCD4a = Math(spellCD4, MathOp.MO_ADD, -10);
            spellCD4b = Math(spellCD4a, MathOp.MO_MAX, 0);
            SetSlotSpellCooldownTimeVer2(spellCD4b, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)target, true);
        }
    }
}
namespace Spells
{
    public class Ricochet : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float SpellCooldown = 0;
        }
        public float[] effect0 = {9, 7.5f, 6, 4.5f, 3};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            SetSlotSpellCooldownTimeVer2(0, 1, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            nextBuffVars.SpellCooldown = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "Ricochet", 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class RicochetAttack : Script
    {
        public int[] effect0 = {20, 35, 50, 65, 80};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int targetNum = 0;
            float baseAttackDamage = 0;
            float bonusAD = 0;
            float totalAD = 0;
            float multipliedAD = 0;
            int baseDamage = 0;
            float damageToDeal = 0;
            float counter = 0;
            float damagePercent = 0;
            targetNum = GetCastSpellTargetsHitPlusOne(default);
            baseAttackDamage = GetBaseAttackDamage(owner);
            bonusAD = GetFlatPhysicalDamageMod(owner);
            totalAD = Math(baseAttackDamage, MathOp.MO_ADD, bonusAD);
            multipliedAD = Math(totalAD, MathOp.MO_MULTIPLY, 1);
            baseDamage = this.effect0[level];
            damageToDeal = Math(baseDamage, MathOp.MO_ADD, multipliedAD);
            SpellBuffRemove(attacker, "Ricochet", (ObjAIBase)attacker, 0);
            if(targetNum == 1)
            {
                ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
            }
            else
            {
                counter = 1;
                damagePercent = 1;
                while(counter < targetNum)
                {
                    damagePercent = Math(damagePercent, MathOp.MO_MULTIPLY, 0.8f);
                    counter = Math(counter, MathOp.MO_ADD, 1);
                }
                ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_PROC, damagePercent, 0, 0, false, false, (ObjAIBase)attacker);
            }
        }
    }
}
namespace Spells
{
    public class RiftWalk : Script
    {
        public int[] effect0 = {60, 90, 120};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 castPos;
            Vector3 ownerPos;
            float distance = 0;
            TeamId casterID;
            Particle? p3 = null;
            //object? _ = null;
            int count = 0;
            int damage = 0;
            float count2 = 0;
            float totalDamage = 0;
            //object? unit = null;
            float extraCost = 0;
            //object? nextBuffVars = null;
            Particle? ar1 = null;
            castPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, castPos);
            FaceDirection(owner, castPos);
            if(distance >= 700)
            {
                castPos = GetPointByUnitFacingOffset(owner, 700, 0);
            }
            casterID = GetTeamID(default);
            if(casterID == TeamId.TEAM_BLUE)
            {
                SpellEffectCreate(out p3, out _, "Riftwalk_flashback.troy", default, TeamId.TEAM_BLUE, 250, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, false, false, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out p3, out _, "Riftwalk_flashback.troy", default, TeamId.TEAM_PURPLE, 250, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, ownerPos, target, default, default, true, false, false, false, false, default, default);
            }
            TeleportToPosition(owner, castPos);
            count = GetBuffCountFromAll(owner, "Riftwalk");
            damage = this.effect0[level];
            count2 = Math(1, MathOp.MO_ADD, count);
            totalDamage = Math(damage, MathOp.MO_MULTIPLY, count2);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 270, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                ApplyDamage((ObjAIBase)attacker, unit, totalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 1, false, false, (ObjAIBase)attacker);
            });
            extraCost = Math(100, MathOp.MO_MULTIPLY, count2);
            SetPARCostInc((ObjAIBase)owner, 3, SpellSlotType.SpellSlots, extraCost, PrimaryAbilityResourceType.MANA);
            SpellBuffAdd((ObjAIBase)attacker, owner, "RiftWalk", 10, 1, 8, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            if(casterID == TeamId.TEAM_BLUE)
            {
                SpellEffectCreate(out ar1, out _, "Riftwalk_flash.troy", default, TeamId.TEAM_BLUE, 250, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, castPos, target, default, default, true, false, false, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out ar1, out _, "Riftwalk_flash.troy", default, TeamId.TEAM_PURPLE, 250, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, castPos, target, default, default, true, false, false, false, false, default, default);
            }
        }
    }
}


namespace Spells
{
    public class RivenFeint : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? DamageBlock = null;
        }
        public int[] effect0 = {60, 90, 120, 150, 180};
        public float[] effect1 = {2.5f, 2.5f, 2.5f, 2.5f, 2.5f};
        Particle? temp_ = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float distance = 0;
            Vector3 pos;
            float baseMS = 0;
            float bonusMS = 0;
            int baseDamageBlock = 0;
            float totalAD = 0;
            float baseAD = 0;
            float bonusAD = 0;
            float bonusHealth = 0;
            float damageBlock = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            targetPos = GetCastSpellTargetPos();
            FaceDirection(owner, targetPos);
            distance = DistanceBetweenObjectAndPoint(owner, targetPos);
            pos = GetPointByUnitFacingOffset(owner, 250, 0);
            baseMS = GetFlatMovementSpeedMod(owner);
            bonusMS = Math(baseMS, MathOp.MO_ADD, 650);
            PlayAnimation("Spell3", 0, owner, false, true, false);
            Move(owner, pos, 900 + bonusMS, 0, 0, ForceMovementType.FIRST_WALL_HIT, ForceMovementOrdersType.CANCEL_ORDER, 325, ForceMovementOrdersFacing.KEEP_CURRENT_FACING);
            baseDamageBlock = this.effect0[level];
            totalAD = GetTotalAttackDamage(owner);
            baseAD = GetBaseAttackDamage(owner);
            bonusAD = Math(totalAD, MathOp.MO_SUBTRACT, baseAD);
            bonusHealth = Math(bonusAD, MathOp.MO_MULTIPLY, 1);
            damageBlock = Math(baseDamageBlock, MathOp.MO_ADD, bonusHealth);
            nextBuffVars.DamageBlock = damageBlock;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, this.effect1[level], nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellEffectCreate(out this.temp_, out _, "exile_E_mis.troy  ", "exile_E_mis.troy  ", TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, false, false, false, false, default, default);
        }
    }
}
namespace Spells
{
    public class RivenFengShuiEngine : Script
    {
        public int[] effect0 = {15, 15, 15};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect0[level], default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class RivenIzunaBlade : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 pos;
            SpellBuffClear(owner, "RivenWindSlashReady");
            targetPos = GetCastSpellTargetPos();
            FaceDirection(owner, targetPos);
            pos = GetPointByUnitFacingOffset(owner, 150, 0);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 150, 9);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 3, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 150, -9);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 3, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            if(GetBuffCountFromCaster(owner, owner, "RivenFengShuiEngine") > 0)
            {
                SetSlotSpellCooldownTimeVer2(0, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                SealSpellSlot(3, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, SpellbookType.SPELLBOOK_CHAMPION);
            }
        }
    }
}

namespace Spells
{
    public class RivenLightsaberMissile : Script
    {
        public int[] effect0 = {80, 120, 160, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            float healthPercent = 0;
            float bonusRatio = 0;
            float multiplier = 0;
            if(GetBuffCountFromCaster(target, owner, "RivenLightsaberMissileDebuff") == 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                SpellBuffAdd((ObjAIBase)attacker, target, "RivenLightsaberMissileDebuff", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                BreakSpellShields(target);
                healthPercent = GetHealthPercent(target);
                bonusRatio = Math(1, MathOp.MO_SUBTRACT, healthPercent);
                bonusRatio = Math(bonusRatio, MathOp.MO_DIVIDE, 0.75f);
                bonusRatio = Math(bonusRatio, MathOp.MO_MIN, 1);
                bonusRatio = Math(2, MathOp.MO_MULTIPLY, bonusRatio);
                multiplier = Math(1, MathOp.MO_ADD, bonusRatio);
                ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, multiplier, 0, 0.6f, false, false, (ObjAIBase)attacker);
            }
        }
    }
}

namespace Spells
{
    public class RivenLightsaberMissileSide : Script
    {
        public int[] effect0 = {80, 120, 160, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            float healthPercent = 0;
            float bonusRatio = 0;
            float multiplier = 0;
            if(GetBuffCountFromCaster(target, owner, "RivenLightsaberMissileDebuff") == 0)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "RivenLightsaberMissileDebuff", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                BreakSpellShields(target);
                healthPercent = GetHealthPercent(target);
                bonusRatio = Math(1, MathOp.MO_SUBTRACT, healthPercent);
                bonusRatio = Math(bonusRatio, MathOp.MO_DIVIDE, 0.75f);
                bonusRatio = Math(bonusRatio, MathOp.MO_MIN, 1);
                bonusRatio = Math(2, MathOp.MO_MULTIPLY, bonusRatio);
                multiplier = Math(1, MathOp.MO_ADD, bonusRatio);
                ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, multiplier, 0, 0.6f, false, false, (ObjAIBase)attacker);
                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            }
        }
    }
}
namespace Spells
{
    public class RivenMartyr : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            
        }
    }
}






namespace Spells
{
    public class RivenTriCleave : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? Count = null;
            public object? TargetPos = null;
        }
        public int[] effect0 = {13, 13, 13, 13, 13};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int count = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            float cDReduction = 0;
            int baseCD = 0;
            float lowerCD = 0;
            float newCD = 0;
            float distance = 0;
            int maxRange = 0;
            Vector3 pos;
            Vector3 castPos;
            bool? lockOn = null;
            //object? unit = null;
            bool? canSee = null;
            AttackableUnit? other1 = null;
            bool? isMoving = null;
            Vector3 leadPos;
            Vector3 checkPos;
            bool? canMove = null;
            bool? pathable = null;
            SpellBuffClear(owner, "RivenTriCleaveUnlock");
            CancelAutoAttack(owner, true);
            targetPos = GetCastSpellTargetPos();
            count = GetBuffCountFromCaster(owner, default, "RivenTriCleave");
            SpellBuffAdd((ObjAIBase)owner, owner, "RivenTriCleave", 3, 1, 3.75f, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            if(count == 0)
            {
                cDReduction = GetPercentCooldownMod(owner);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                baseCD = this.effect0[level];
                lowerCD = Math(baseCD, MathOp.MO_MULTIPLY, cDReduction);
                newCD = Math(baseCD, MathOp.MO_ADD, lowerCD);
                newCD = Math(1, MathOp.MO_MULTIPLY, newCD);
                SpellBuffAdd((ObjAIBase)owner, owner, "RivenTriCleaveCooldown", 1, 1, newCD, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            distance = 240;
            maxRange = 240;
            if(distance >= maxRange)
            {
                pos = GetPointByUnitFacingOffset(owner, maxRange, 0);
            }
            else
            {
                distance = Math(distance, MathOp.MO_MAX, 75);
                pos = GetPointByUnitFacingOffset(owner, distance, 0);
            }
            castPos = GetCastSpellTargetPos();
            lockOn = false;
            ForNClosestUnitsInTargetArea(owner, castPos, 175, "AffectEnemies AffectNeutral AffectMinions ", 1, true, default, (unit) => 
            {
                canSee = CanSeeTarget(owner, unit);
                if(canSee == true)
                {
                    other1 = SetUnit(unit);
                    lockOn = true;
                    IssueOrder(owner, OrderType.AttackTo, default, unit);
                }
            });
            ForNClosestUnitsInTargetArea(owner, castPos, 150, "AffectEnemies AffectHeroes ", 1, true, default, (unit) => 
            {
                canSee = CanSeeTarget(owner, unit);
                if(canSee == true)
                {
                    other1 = SetUnit(unit);
                    lockOn = true;
                    IssueOrder(owner, OrderType.AttackTo, default, unit);
                }
            });
            if(lockOn == true)
            {
                FaceDirection(owner, other1.Position);
                distance = DistanceBetweenObjects("Owner", "Other1");
                isMoving = IsMoving(other1);
                if(isMoving == false)
                {
                    distance = Math(distance, MathOp.MO_SUBTRACT, 25);
                }
                else
                {
                    leadPos = GetPointByUnitFacingOffset(other1, 125, 0);
                    FaceDirection(owner, leadPos);
                    distance = DistanceBetweenObjectAndPoint(owner, leadPos);
                }
                if(distance >= maxRange)
                {
                    pos = GetPointByUnitFacingOffset(owner, maxRange, 0);
                }
                else
                {
                    distance = Math(distance, MathOp.MO_MAX, 25);
                    pos = GetPointByUnitFacingOffset(owner, distance, 0);
                }
            }
            nextBuffVars.Count = count;
            nextBuffVars.TargetPos = targetPos;
            checkPos = GetPointByUnitFacingOffset(owner, 75, 0);
            canMove = GetCanMove(owner);
            if(canMove == false)
            {
                pos = GetPointByUnitFacingOffset(owner, 40, 0);
            }
            pathable = IsPathable(checkPos);
            if(pathable == false)
            {
                checkPos = GetPointByUnitFacingOffset(owner, 125, 0);
                pathable = IsPathable(checkPos);
                if(pathable == false)
                {
                    pos = GetPointByUnitFacingOffset(owner, 75, 180);
                }
            }
            if(count == 0)
            {
                UnlockAnimation(owner, true);
                PlayAnimation("Spell1a", 0, owner, false, true, true);
                SpellBuffAdd((ObjAIBase)owner, owner, "RivenTriCleaveSoundOne", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, true, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "RivenTriCleaveBuffer", 1, 1, 0.4f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SetSlotSpellCooldownTimeVer2(0.25f, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                SpellBuffAdd((ObjAIBase)owner, owner, "RivenTriCleaveDamage", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.75f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                Move(owner, pos, 825, 15, 15, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.POSTPONE_CURRENT_ORDER, 275, ForceMovementOrdersFacing.KEEP_CURRENT_FACING);
            }
            if(count == 1)
            {
                UnlockAnimation(owner, true);
                PlayAnimation("Spell1b", 0, owner, false, true, true);
                SpellBuffAdd((ObjAIBase)owner, owner, "RivenTriCleaveSoundTwo", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, true, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "RivenTriCleaveBufferB", 1, 1, 0.4f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SetSlotSpellCooldownTimeVer2(0.25f, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                SpellBuffAdd((ObjAIBase)owner, owner, "RivenTriCleaveDamage", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.75f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                Move(owner, pos, 825, 15, 15, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.POSTPONE_CURRENT_ORDER, 275, ForceMovementOrdersFacing.KEEP_CURRENT_FACING);
            }
            if(count == 2)
            {
                UnlockAnimation(owner, true);
                PlayAnimation("Spell1c", 0, owner, false, true, true);
                SpellBuffAdd((ObjAIBase)owner, owner, "RivenTriCleaveSoundThree", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, true, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "RivenTriCleaveDamage", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.75f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                Move(owner, pos, 900, 75, 15, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.POSTPONE_CURRENT_ORDER, 375, ForceMovementOrdersFacing.KEEP_CURRENT_FACING);
                SpellBuffClear(owner, "RivenTriCleave");
            }
            SpellBuffAdd((ObjAIBase)owner, owner, "RivenSword", 1, 1, 1.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class RivenTriCleaveBuffer : Script
    {
        class SelfExecute_nextBuffVars
        {
            public bool? ChampionLock = null;
            public object? TargetPos = null;
            public object? Level = null;
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.ChampionLock = false;
            ForNClosestUnitsInTargetArea(owner, targetPos, 125, "AffectEnemies AffectHeroes ", 1, true, default, (unit) => 
            {
                targetPos = GetUnitPosition(unit);
                nextBuffVars.ChampionLock = true;
                SpellBuffAdd((ObjAIBase)owner, unit, "RivenTriCleaveBufferLock", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            });
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.Level = level;
            SpellBuffAdd((ObjAIBase)owner, owner, "RivenTriCleaveBuffered", 1, 1, 0.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class RivenTriCleaveBufferB : Script
    {
        class SelfExecute_nextBuffVars
        {
            public bool? ChampionLock = null;
            public object? TargetPos = null;
            public object? Level = null;
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.ChampionLock = false;
            ForNClosestUnitsInTargetArea(owner, targetPos, 125, "AffectEnemies AffectHeroes ", 1, true, default, (unit) => 
            {
                targetPos = GetUnitPosition(unit);
                nextBuffVars.ChampionLock = true;
                SpellBuffAdd((ObjAIBase)owner, unit, "RivenTriCleaveBufferLock", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            });
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.Level = level;
            SpellBuffAdd((ObjAIBase)owner, owner, "RivenTriCleaveBuffered", 1, 1, 0.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}














namespace Spells
{
    public class RocketGrab : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 1050)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 900, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, default, 0, SpellSlotType.ExtraSlots, level, true, false, false, default, default, default);
        }
    }
}

namespace Spells
{
    public class RocketGrabMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public bool? WillRemove = null;
            public object? ParticleID = null;
        }
        public int[] effect0 = {60, 120, 180, 240, 300};
        public int[] effect1 = {60, 120, 180, 240, 300};
        public int[] effect2 = {60, 120, 180, 240, 300};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            bool? isStealthed = null;
            float distance = 0;
            float time = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? particleID = null;
            //object? _ = null;
            //object? missileNetworkID = null;
            bool? canSee = null;
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                distance = DistanceBetweenObjects("Target", "Attacker");
                time = Math(distance, MathOp.MO_DIVIDE, 1350);
                nextBuffVars.WillRemove = false;
                SpellEffectCreate(out particleID, out _, "FistReturn_mis.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "head", default, owner, "R_hand", default, false, false, false, false, false, default, default);
                nextBuffVars.ParticleID = particleID;
                SpellBuffAdd((ObjAIBase)target, attacker, default, 1, 1, time, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                BreakSpellShields(target);
                ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.8f, 0, false, false, (ObjAIBase)attacker);
                ApplyStun(attacker, target, 0.6f);
                DestroyMissile(missileNetworkID);
                SpellBuffAdd((ObjAIBase)attacker, target, "RocketGrab2", 1, 1, 0.6f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
            }
            else
            {
                if(target is Champion)
                {
                    distance = DistanceBetweenObjects("Target", "Attacker");
                    time = Math(distance, MathOp.MO_DIVIDE, 1350);
                    nextBuffVars.WillRemove = false;
                    SpellEffectCreate(out particleID, out _, "FistReturn_mis.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "head", default, owner, "R_hand", default, false, false, false, false, false, default, default);
                    nextBuffVars.ParticleID = particleID;
                    SpellBuffAdd((ObjAIBase)target, attacker, default, 1, 1, time, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    BreakSpellShields(target);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 1, 0, false, false, (ObjAIBase)attacker);
                    ApplyStun(attacker, target, 0.6f);
                    DestroyMissile(missileNetworkID);
                    SpellBuffAdd((ObjAIBase)attacker, target, "RocketGrab2", 1, 1, 0.6f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        distance = DistanceBetweenObjects("Target", "Attacker");
                        time = Math(distance, MathOp.MO_DIVIDE, 1350);
                        nextBuffVars.WillRemove = false;
                        SpellEffectCreate(out particleID, out _, "FistReturn_mis.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "head", default, owner, "R_hand", default, false, false, false, false, false, default, default);
                        nextBuffVars.ParticleID = particleID;
                        SpellBuffAdd((ObjAIBase)target, attacker, default, 1, 1, time, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        BreakSpellShields(target);
                        ApplyDamage((ObjAIBase)attacker, target, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 1, 0, false, false, (ObjAIBase)attacker);
                        ApplyStun(attacker, target, 0.6f);
                        DestroyMissile(missileNetworkID);
                        SpellBuffAdd((ObjAIBase)attacker, target, "RocketGrab2", 1, 1, 0.6f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class RocketJump : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int Damage = 0;
        }
        public int[] effect0 = {70, 115, 160, 205, 250};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            int gravityVar = 0;
            int speedVar = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            if(distance >= 900)
            {
                gravityVar = 50;
                speedVar = 1200;
                FaceDirection(owner, targetPos);
                targetPos = GetPointByUnitFacingOffset(owner, 900, 0);
                distance = 900;
            }
            else if(distance >= 600)
            {
                gravityVar = 50;
                speedVar = 1200;
            }
            else if(distance >= 500)
            {
                gravityVar = 80;
                speedVar = 1200;
            }
            else if(distance >= 400)
            {
                gravityVar = 100;
                speedVar = 1100;
            }
            else if(distance >= 300)
            {
                gravityVar = 120;
                speedVar = 1025;
            }
            else if(distance >= 200)
            {
                gravityVar = 150;
                speedVar = 975;
            }
            else if(distance >= 100)
            {
                gravityVar = 300;
                speedVar = 800;
            }
            else if(distance >= 0)
            {
                gravityVar = 1000;
                speedVar = 800;
            }
            Move(owner, targetPos, speedVar, gravityVar, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, distance, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
            nextBuffVars.Damage = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}




namespace Spells
{
    public class RumbleCarpetBomb : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Vector3 targetPosStart;
            Vector3 targetPosEnd;
            Minion? other1 = null;
            //object? nextBuffVars = null;
            TeamId teamID;
            teamOfOwner = GetTeamID(default);
            targetPosStart = GetCastSpellTargetPos();
            targetPosEnd = GetCastSpellDragEndPos();
            other1 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", targetPosStart, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, default, true, (Champion)owner, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "ExpirationTimer", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            FaceDirection(other1, targetPosEnd);
            targetPosEnd = GetPointByUnitFacingOffset(other1, 1200, 0);
            teamID = GetTeamID(default);
            SpellCast((ObjAIBase)owner, default, targetPosEnd, targetPosEnd, true, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, targetPosStart);
            SpellBuffAdd((ObjAIBase)owner, owner, "RumbleHeatDelay", 1, 1, 2, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            IncPAR(owner, 0);
            SpellBuffAdd((ObjAIBase)owner, owner, "RumbleCarpetBomb", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellCast((ObjAIBase)owner, owner, owner.Position, default, true, 2, SpellSlotType.ExtraSlots, level, true, false, false, true, false, targetPosStart);
        }
    }
}







namespace Spells
{
    public class RumbleCarpetBombMissile : Script
    {
        class OnMissileUpdate_nextBuffVars
        {
            public object? MissilePosition = null;
        }
        public int[] effect0 = {150, 225, 300};
        public int[] effect1 = {150, 225, 300};
        Particle? particle = null;
        Particle? particle1 = null;
        public void OnMissileUpdate(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, SpellMissile missileNetworkID)
        {
            TeamId teamOfOwner;
            //object? missilePosition = null;
            Vector3 groundHeight;
            OnMissileUpdate_nextBuffVars nextBuffVars = new();
            int count = 0;
            Minion? other1 = null;
            int rumbleSkinID = 0;
            //object? _ = null;
            int level = 0;
            //object? unit = null;
            teamOfOwner = GetTeamID(default);
            GetGroundHeight(missilePosition, groundHeight);
            groundHeight = ModifyPosition(default, default, default);
            nextBuffVars.MissilePosition = groundHeight;
            SpellBuffAdd((ObjAIBase)attacker, attacker, "RumbleCarpetBombMissile", 5, 1, 0.25f, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.INTERNAL, 0, false, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "RumbleCarpetBomb", 1, 1, 4.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, false, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "RumbleCarpetBombCounter", 6, 1, 4.5f, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            count = GetBuffCountFromAll(attacker, "RumbleCarpetBombCounter");
            if(count == 1)
            {
                other1 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", missilePosition, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, (Champion)owner, default);
                SpellBuffAdd((ObjAIBase)attacker, other1, "ExpirationTimer", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)attacker, other1, "RumbleCarpetBombSound1", 1, 1, 5, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            }
            if(count == 6)
            {
                other1 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", missilePosition, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, (Champion)owner, default);
                SpellBuffAdd((ObjAIBase)attacker, other1, "ExpirationTimer", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)attacker, other1, "RumbleCarpetBombSound2", 1, 1, 5, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            }
            rumbleSkinID = GetSkinID(attacker);
            SpellEffectCreate(out this.particle, out _, "rumble_ult_placeholder_01.troy", default, teamOfOwner, 200, 0, TeamId.TEAM_UNKNOWN, default, false, default, default, missilePosition, target, default, default, true, default, default, false, false, default, default);
            if(rumbleSkinID == 2)
            {
                SpellEffectCreate(out this.particle1, out _, "rumble_incoming_mis_cannon_ball.troy", default, teamOfOwner, 200, 0, TeamId.TEAM_UNKNOWN, default, false, default, default, missilePosition, target, default, default, true, default, default, false, false, default, default);
            }
            else if(rumbleSkinID == 1)
            {
                SpellEffectCreate(out this.particle1, out _, "rumble_incoming_mis_pineapple.troy", default, teamOfOwner, 200, 0, TeamId.TEAM_UNKNOWN, default, false, default, default, missilePosition, target, default, default, true, default, default, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out this.particle1, out _, "rumble_incoming_mis.troy", default, teamOfOwner, 200, 0, TeamId.TEAM_UNKNOWN, default, false, default, default, missilePosition, target, default, default, true, default, default, false, false, default, default);
            }
            ForEachUnitInTargetArea((ObjAIBase)attacker, missilePosition, 205, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(teamOfOwner == TeamId.TEAM_BLUE)
                {
                    if(GetBuffCountFromCaster(unit, attacker, "RumbleCarpetBombBuffOrder") == 0)
                    {
                        SpellBuffAdd((ObjAIBase)attacker, unit, "RumbleCarpetBombBuffOrder", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        BreakSpellShields(unit);
                        ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
                    }
                }
                else
                {
                    if(GetBuffCountFromCaster(unit, attacker, "RumbleCarpetBombBuffDest") == 0)
                    {
                        SpellBuffAdd((ObjAIBase)attacker, unit, "RumbleCarpetBombBuffDest", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        BreakSpellShields(unit);
                        ApplyDamage((ObjAIBase)attacker, unit, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
                    }
                }
            });
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            bool? isStealthed = null;
            teamID = GetTeamID(default);
            isStealthed = GetStealthed(target);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            targetPos = GetUnitPosition(target);
            charVars.Counter = 0;
        }
    }
}




namespace Spells
{
    public class RumbleFlameThrower : Script
    {
        public int[] effect0 = {20, 20, 20, 20, 20};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float par = 0;
            //object? nextBuffVars = null;
            int initialHeatCost = 0;
            if(GetBuffCountFromCaster(owner, owner, "BLARGH") > 0)
            {
                SpellBuffRemove(owner, "RumbleFlameThrower", (ObjAIBase)owner, 0);
            }
            else
            {
                par = GetPAR(target);
                if(par >= 80)
                {
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "RumbleOverheat", 1, 1, 5.25f, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    SetPARColorOverride(owner, 255, 0, 0, 255, 175, 0, 0, 255);
                }
                if(GetBuffCountFromCaster(owner, owner, "RumbleDangerZone") > 0)
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "RumbleFlameThrowerBuff", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
                SpellBuffAdd((ObjAIBase)attacker, owner, "RumbleFlameThrower", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                initialHeatCost = this.effect0[level];
                IncPAR(owner, initialHeatCost);
                SpellBuffAdd((ObjAIBase)attacker, target, "RumbleHeatDelay", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}


namespace Spells
{
    public class RumbleFlameThrowerSpray : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? Level = null;
        }
        public int[] effect0 = {15, 30, 45, 60, 75};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            float damage = 0;
            float aP = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.Level = level;
            damage = this.effect0[level];
            aP = GetFlatMagicDamageMod(owner);
            aP = Math(aP, MathOp.MO_MULTIPLY, 0.225f);
            damage = Math(aP, MathOp.MO_ADD, damage);
            if(target is not Champion)
            {
                damage = Math(damage, MathOp.MO_MULTIPLY, 0.5f);
            }
            ApplyDamage((ObjAIBase)owner, target, damage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class RumbleFlameThrowerSpraySuper : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? Level = null;
        }
        public int[] effect0 = {15, 30, 45, 60, 75};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            float damage = 0;
            float aP = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.Level = level;
            damage = this.effect0[level];
            aP = GetFlatMagicDamageMod(owner);
            aP = Math(aP, MathOp.MO_MULTIPLY, 0.225f);
            damage = Math(aP, MathOp.MO_ADD, damage);
            damage = Math(damage, MathOp.MO_MULTIPLY, 1.3f);
            if(target is not Champion)
            {
                damage = Math(damage, MathOp.MO_MULTIPLY, 0.5f);
            }
            ApplyDamage((ObjAIBase)owner, target, damage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class RumbleGrenade : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float BaseCDR = 0;
            public float CDRMod = 0;
        }
        public int[] effect0 = {20, 20, 20, 20, 20};
        public int[] effect1 = {0, 0, 0, 0, 0};
        public int[] effect2 = {10, 10, 10, 10, 10};
        object? cooldown = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            int firstCost = 0;
            int secondCost = 0;
            float cDRMod = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            float par = 0;
            targetPos = GetCastSpellTargetPos();
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            firstCost = this.effect0[level];
            secondCost = this.effect1[level];
            if(1 == 1)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                cDRMod = GetPercentCooldownMod(attacker);
                nextBuffVars.BaseCDR = this.effect2[level];
                nextBuffVars.CDRMod = Math(-1, MathOp.MO_MULTIPLY, cDRMod);
                nextBuffVars.CDRMod = Math(1, MathOp.MO_SUBTRACT, nextBuffVars.CDRMod);
                nextBuffVars.BaseCDR = Math(nextBuffVars.CDRMod, MathOp.MO_MULTIPLY, nextBuffVars.BaseCDR);
            }
            if(distance > 800)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 750, 0);
            }
            this.cooldown = nextBuffVars.BaseCDR;
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 3, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            if(GetBuffCountFromCaster(owner, owner, "RumbleGrenadeCounter") == 0)
            {
                par = GetPAR(target);
                if(par >= 80)
                {
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "RumbleOverheat", 1, 1, 5.25f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                    SetPARColorOverride(owner, 255, 0, 0, 255, 175, 0, 0, 255);
                }
                SpellBuffAdd((ObjAIBase)attacker, attacker, "RumbleGrenadeCounter", 1, 1, 3.5f, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)attacker, attacker, "RumbleGrenadeCD", 1, 1, this.cooldown, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                IncPAR(owner, firstCost);
                SpellBuffAdd((ObjAIBase)attacker, attacker, "RumbleHeatDelay", 1, 1, 3, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                if(GetBuffCountFromCaster(owner, owner, "RumbleDangerZone") > 0)
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "RumbleGrenadeDZ", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
            else
            {
                SpellBuffRemove(owner, "RumbleGrenadeCounter", (ObjAIBase)owner, default);
                SpellBuffRemove(owner, default, (ObjAIBase)owner, default);
                IncPAR(owner, secondCost);
                SpellBuffClear(owner, "RumbleGrenadeCounter");
            }
        }
    }
}




namespace Spells
{
    public class RumbleGrenadeMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float SlowAmount = 0;
        }
        public int[] effect0 = {55, 85, 115, 145, 175};
        public int[] effect1 = {3, 3, 3, 3, 3};
        public float[] effect2 = {-0.3f, -0.4f, -0.5f, -0.6f, -0.7f};
        public float[] effect3 = {-0.15f, -0.2f, -0.25f, -0.3f, -0.35f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float dmg = 0;
            int disable = 0;
            float aP = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? gragas = null;
            //object? _ = null;
            //object? missileNetworkID = null;
            bool? isStealthed = null;
            teamID = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            dmg = this.effect0[level];
            disable = this.effect1[level];
            aP = 0.5f;
            if(GetBuffCountFromCaster(owner, owner, "RumbleGrenadeDZ") > 0)
            {
                dmg = Math(1.3f, MathOp.MO_MULTIPLY, dmg);
                aP = Math(1.3f, MathOp.MO_MULTIPLY, aP);
            }
            if(GetBuffCountFromCaster(target, owner, "RumbleGrenadeDebuff") > 0)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "RumbleGrenadeZapEffect", 1, 1, 0.1f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                BreakSpellShields(target);
                nextBuffVars.SlowAmount = this.effect2[level];
                if(GetBuffCountFromCaster(owner, owner, "RumbleGrenadeDZ") > 0)
                {
                    nextBuffVars.SlowAmount = Math(1.3f, MathOp.MO_MULTIPLY, nextBuffVars.SlowAmount);
                }
                SpellBuffAdd((ObjAIBase)attacker, target, "RumbleGrenadeSlow", 1, 1, disable, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "RumbleGrenadeZapEffect", 1, 1, 0.1f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                BreakSpellShields(target);
                nextBuffVars.SlowAmount = this.effect3[level];
                if(GetBuffCountFromCaster(owner, owner, "RumbleGrenadeDZ") > 0)
                {
                    nextBuffVars.SlowAmount = Math(1.3f, MathOp.MO_MULTIPLY, nextBuffVars.SlowAmount);
                }
                SpellBuffAdd((ObjAIBase)attacker, target, "RumbleGrenadeDebuff", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)attacker, target, "RumbleGrenadeSlow", 1, 1, disable, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
            }
            if(target is Champion)
            {
                SpellEffectCreate(out gragas, out _, "rumble_taze_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, default, default, default);
                ApplyDamage((ObjAIBase)attacker, target, dmg, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, aP, 0, false, false, (ObjAIBase)attacker);
                DestroyMissile(missileNetworkID);
            }
            else
            {
                isStealthed = GetStealthed(target);
                if(isStealthed == false)
                {
                    SpellEffectCreate(out gragas, out _, "rumble_taze_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, default, default, default);
                    ApplyDamage((ObjAIBase)attacker, target, dmg, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, aP, 0, false, false, (ObjAIBase)attacker);
                    DestroyMissile(missileNetworkID);
                    SpellBuffAdd((ObjAIBase)attacker, target, "RumbleGrenadeZapEffect", 1, 1, 0.1f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
        }
    }
}









namespace Spells
{
    public class RumbleOverheatAttack : Script
    {
        public int[] effect0 = {25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110};
        int punchdmg = 0;
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    if(GetBuffCountFromCaster(owner, owner, "RumbleOverheat") > 0)
                    {
                        level = GetLevel(owner);
                        this.punchdmg = this.effect0[level];
                        level = GetLevel(owner);
                        ApplyDamage((ObjAIBase)attacker, target, this.punchdmg, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0.3f, 1, false, false, (ObjAIBase)attacker);
                    }
                }
            }
        }
    }
}


namespace Spells
{
    public class RumbleShield : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? DamageBlock = null;
            public float SpeedBoost = 0;
        }
        public int[] effect0 = {50, 80, 110, 140, 170};
        public int[] effect1 = {2, 2, 2, 2, 2};
        public float[] effect2 = {0.1f, 0.15f, 0.2f, 0.25f, 0.3f};
        public int[] effect3 = {20, 20, 20, 20, 20};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float par = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            int baseDamageBlock = 0;
            float abilityPower = 0;
            float bonusHealth = 0;
            float damageBlock = 0;
            int baseHeatCost = 0;
            par = GetPAR(target);
            if(par >= 80)
            {
                SpellBuffAdd((ObjAIBase)attacker, attacker, "RumbleOverheat", 1, 1, 5.25f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
                SetPARColorOverride(owner, 255, 0, 0, 255, 175, 0, 0, 255);
            }
            if(GetBuffCountFromCaster(owner, owner, "RumbleShield") > 0)
            {
                SpellBuffRemove(owner, "RumbleShield", (ObjAIBase)owner, default);
            }
            baseDamageBlock = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(owner);
            bonusHealth = Math(abilityPower, MathOp.MO_MULTIPLY, 0.4f);
            damageBlock = Math(baseDamageBlock, MathOp.MO_ADD, bonusHealth);
            if(GetBuffCountFromCaster(target, target, "RumbleDangerZone") > 0)
            {
                damageBlock = Math(1.3f, MathOp.MO_MULTIPLY, damageBlock);
            }
            nextBuffVars.DamageBlock = damageBlock;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect1[level], nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "RumbleHeatDelay", 1, 1, 3, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            nextBuffVars.SpeedBoost = this.effect2[level];
            if(GetBuffCountFromCaster(target, target, "RumbleDangerZone") > 0)
            {
                nextBuffVars.SpeedBoost = Math(1.3f, MathOp.MO_MULTIPLY, nextBuffVars.SpeedBoost);
            }
            baseHeatCost = this.effect3[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "RumbleShieldBuff", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            IncPAR(owner, baseHeatCost);
        }
    }
}

namespace Spells
{
    public class RunePrison : Script
    {
        public float[] effect0 = {1, 1.25f, 1.5f, 1.75f, 2};
        public int[] effect1 = {60, 95, 130, 165, 200};
        public float[] effect2 = {0.5f, 0.5f, 0.5f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            int baseDamage = 0;
            TeamId teamID;
            float pAR = 0;
            float aoEDamage = 0;
            float manaDamage = 0;
            float totalDamage = 0;
            Particle? part = null;
            //object? _ = null;
            //object? unit = null;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect0[level], default, BuffAddType.RENEW_EXISTING, BuffType.CHARM, 0, true, false, false, default);
            baseDamage = this.effect1[level];
            teamID = GetTeamID(default);
            pAR = GetMaxPAR(owner);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            aoEDamage = this.effect2[level];
            manaDamage = Math(pAR, MathOp.MO_MULTIPLY, 0.05f);
            totalDamage = Math(manaDamage, MathOp.MO_ADD, baseDamage);
            aoEDamage = Math(totalDamage, MathOp.MO_MULTIPLY, aoEDamage);
            ApplyDamage((ObjAIBase)attacker, target, totalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
            if(GetBuffCountFromCaster(owner, owner, "DesperatePower") > 0)
            {
                SpellEffectCreate(out part, out _, "DesperatePower_aoe.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                {
                    if(target != unit)
                    {
                        SpellEffectCreate(out part, out _, "ManaLeach_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, default, default, default, default);
                        ApplyDamage((ObjAIBase)attacker, unit, aoEDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.3f, 1, false, false, (ObjAIBase)attacker);
                    }
                });
            }
        }
    }
}
namespace Spells
{
    public class Rupture : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DamageAmount = 0;
            public float MoveSpeedMod = 0;
        }
        public int[] effect0 = {80, 135, 190, 245, 305};
        public float[] effect1 = {-0.6f, -0.6f, -0.6f, -0.6f, -0.6f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Minion? other3 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            teamOfOwner = GetTeamID(default);
            other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", targetPos, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, (Champion)owner, default);
            nextBuffVars.DamageAmount = this.effect0[level];
            nextBuffVars.MoveSpeedMod = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 0.75f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, false, false, default);
        }
    }
}



namespace Spells
{
    public class RyzeDesperatePowerAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseDamage = 0;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            baseDamage = GetBaseAttackDamage(owner);
            if(level == 1)
            {
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0.3f, default, false, false, default);
            }
            else if(level == 2)
            {
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0.4f, default, false, false, default);
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0.5f, default, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class SadMummyBandageToss : Script
    {
        class TargetExecute_nextBuffVars
        {
            public bool? WillRemove = null;
            public Particle? ParticleID = null;
        }
        public int[] effect0 = {80, 140, 200, 260, 320};
        public int[] effect1 = {80, 140, 200, 260, 320};
        public int[] effect2 = {80, 140, 200, 260, 320};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            canMove = GetCanMove(owner);
            if(canMove == false)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            bool? isStealthed = null;
            float distance = 0;
            Vector3 landPos;
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            Particle? gfasdf = null;
            //object? missileNetworkID = null;
            bool? canSee = null;
            teamID = GetTeamID(default);
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                distance = DistanceBetweenObjects("Target", "Attacker");
                landPos = GetUnitPosition(target);
                nextBuffVars.WillRemove = false;
                SpellEffectCreate(out nextBuffVars.ParticleID, out _, "Bandage_beam.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, "spine", default, target, "R_hand", default, true, default, default, false, false, default, default);
                Move(attacker, landPos, 1350, 5, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, distance, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
                SpellBuffAdd((ObjAIBase)target, attacker, default, 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 1, 1, false, false, (ObjAIBase)attacker);
                ApplyStun(attacker, target, 1);
                SpellEffectCreate(out gfasdf, out _, "BandageToss_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, default, default, true, default, default, false, false, default, default);
                DestroyMissile(missileNetworkID);
            }
            else
            {
                if(target is Champion)
                {
                    distance = DistanceBetweenObjects("Target", "Attacker");
                    landPos = GetUnitPosition(target);
                    nextBuffVars.WillRemove = false;
                    SpellEffectCreate(out nextBuffVars.ParticleID, out _, "Bandage_beam.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, "spine", default, target, "R_hand", default, true, default, default, false, false, default, default);
                    Move(attacker, landPos, 1350, 5, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, distance, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
                    SpellBuffAdd((ObjAIBase)target, attacker, default, 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 1, 1, false, false, (ObjAIBase)attacker);
                    ApplyStun(attacker, target, 1);
                    SpellEffectCreate(out gfasdf, out _, "BandageToss_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, default, default, true, default, default, false, false, default, default);
                    DestroyMissile(missileNetworkID);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        distance = DistanceBetweenObjects("Target", "Attacker");
                        landPos = GetUnitPosition(target);
                        nextBuffVars.WillRemove = false;
                        SpellEffectCreate(out nextBuffVars.ParticleID, out _, "Bandage_beam.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, "spine", default, target, "R_hand", default, true, default, default, false, false, default, default);
                        Move(attacker, landPos, 1350, 5, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, distance, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
                        SpellBuffAdd((ObjAIBase)target, attacker, default, 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        ApplyDamage((ObjAIBase)attacker, target, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 1, 1, false, false, (ObjAIBase)attacker);
                        ApplyStun(attacker, target, 1);
                        SpellEffectCreate(out gfasdf, out _, "BandageToss_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, default, default, true, default, default, false, false, default, default);
                        DestroyMissile(missileNetworkID);
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class Sadism : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float SpeedMod = 0;
        }
        public float[] effect0 = {0.15f, 0.25f, 0.35f};
        public int[] effect1 = {12, 12, 12};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float health = 0;
            float healthLoss = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            Particle? activate = null;
            //object? _ = null;
            health = GetHealth(target);
            healthLoss = Math(-0.2f, MathOp.MO_MULTIPLY, health);
            IncHealth(owner, healthLoss, owner);
            nextBuffVars.SpeedMod = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect1[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.HASTE, 0, true, false, false, default);
            SpellEffectCreate(out activate, out _, "dr_mundo_sadism_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "pelvis", default, target, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(out activate, out _, "dr_mundo_sadism_cas_02.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "R_hand", default, target, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(out activate, out _, "dr_mundo_sadism_cas_02.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "L_hand", default, target, default, default, false, false, false, false, false, default, default);
        }
    }
}

namespace Spells
{
    public class ScoutsBounty : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int BonusGold = 0;
            public int ArmorReduction = 0;
        }
        public int[] effect0 = {100, 150, 200};
        public int[] effect1 = {-30, -45, -60};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.BonusGold = this.effect0[level];
            nextBuffVars.ArmorReduction = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 30, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, default, default, default, default);
        }
    }
}





namespace Spells
{
    public class SeismicShard : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? Level = null;
        }
        public int[] effect0 = {70, 120, 170, 220, 270};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.Level = level;
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, "SeismicShardBuff", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, default, default);
        }
    }
}

namespace Spells
{
    public class SejuaniArcticAssault : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DashSpeed = 0;
            public object? TargetPos = null;
            public object? Distance = null;
            public int DamageToDeal = 0;
            public int Defenses = 0;
        }
        public int[] effect0 = {60, 90, 130, 170, 210};
        public int[] effect1 = {20, 30, 40, 50, 60};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 ownerPos;
            float distance = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? _ = null;
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            charVars.OwnerPos = ownerPos;
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance >= 650)
            {
                distance = 650;
                targetPos = GetPointByUnitFacingOffset(owner, distance, 0);
            }
            nextBuffVars.DashSpeed = 850;
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.Distance = distance;
            nextBuffVars.DamageToDeal = this.effect0[level];
            nextBuffVars.Defenses = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, owner, "SejuaniArcticAssault", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0.1f, true, false, false, default);
            SpellEffectCreate(out _, out _, "sejuani_arctic_assault_cas_02.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
        }
    }
}




namespace Spells
{
    public class SejuaniFrostApply : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MovementSpeedMod = 0;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            int frostDuration = 0;
            TeamId teamID;
            nextBuffVars.MovementSpeedMod = -0.1f;
            frostDuration = 3;
            teamID = GetTeamID(default);
            if(target is Champion)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniFrostApplyParticle", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                if(teamID == TeamId.TEAM_BLUE)
                {
                    if(GetBuffCountFromCaster(target, owner, "SejuaniWintersClaw") > 0)
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniFrostTracker", 1, 1, frostDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniFrost", 1, 1, frostDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                    }
                }
                else
                {
                    if(GetBuffCountFromCaster(target, owner, "SejuaniWintersClawChaos") > 0)
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniFrostTracker", 1, 1, frostDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniFrostChaos", 1, 1, frostDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                    }
                }
            }
            else if(default is not BaseTurret)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniFrostApplyPartMinion", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                if(teamID == TeamId.TEAM_BLUE)
                {
                    if(GetBuffCountFromCaster(target, owner, "SejuaniWintersClaw") > 0)
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniFrostTracker", 1, 1, frostDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniFrost", 1, 1, frostDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                        if(GetBuffCountFromCaster(target, target, "ResistantSkin") > 0)
                        {
                            SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniFrostResist", 1, 1, frostDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                        }
                        if(GetBuffCountFromCaster(target, target, "ResistantSkinDragon") > 0)
                        {
                            SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniFrostResist", 1, 1, frostDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                        }
                    }
                }
                else
                {
                    if(GetBuffCountFromCaster(target, owner, "SejuaniWintersClawChaos") > 0)
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniFrostTracker", 1, 1, frostDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniFrostChaos", 1, 1, frostDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                        if(GetBuffCountFromCaster(target, target, "ResistantSkin") > 0)
                        {
                            SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniFrostResistChaos", 1, 1, frostDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                        }
                        if(GetBuffCountFromCaster(target, target, "ResistantSkinDragon") > 0)
                        {
                            SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniFrostResistChaos", 1, 1, frostDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                        }
                    }
                }
            }
        }
    }
}






namespace Spells
{
    public class SejuaniGlacialPrison : Script
    {
        public int[] effect0 = {150, 250, 350};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            bool? isStealthed = null;
            int stunDuration = 0;
            int prisonDamage = 0;
            //object? nextBuffVars = null;
            //object? missileNetworkID = null;
            bool? canSee = null;
            isStealthed = GetStealthed(target);
            stunDuration = 2;
            prisonDamage = this.effect0[level];
            if(isStealthed == false)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniGlacialPrisonCheck", 1, 1, stunDuration, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                DestroyMissile(missileNetworkID);
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, stunDuration, default, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, prisonDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.8f, 1, false, false, (ObjAIBase)attacker);
                SpellCast((ObjAIBase)attacker, target, default, default, false, 1, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            }
            else
            {
                if(target is Champion)
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniGlacialPrisonCheck", 1, 1, stunDuration, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    DestroyMissile(missileNetworkID);
                    BreakSpellShields(target);
                    SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, stunDuration, default, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                    ApplyDamage((ObjAIBase)attacker, target, prisonDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.8f, 1, false, false, (ObjAIBase)attacker);
                    SpellCast((ObjAIBase)attacker, target, default, default, false, 1, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, "SejuaniGlacialPrisonCheck", 1, 1, stunDuration, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        DestroyMissile(missileNetworkID);
                        BreakSpellShields(target);
                        SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, stunDuration, default, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                        ApplyDamage((ObjAIBase)attacker, target, prisonDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.8f, 1, false, false, (ObjAIBase)attacker);
                        SpellCast((ObjAIBase)attacker, target, default, default, false, 1, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
                    }
                }
            }
        }
    }
}


namespace Spells
{
    public class SejuaniGlacialPrisonStart : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? PrisonDamage = null;
            public int SecondaryDuration = 0;
        }
        public int[] effect0 = {150, 250, 350};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int prisonDamage = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            Vector3 ownerPos;
            float distance = 0;
            TeamId teamID;
            Region? perBubb = null;
            prisonDamage = this.effect0[level];
            nextBuffVars.PrisonDamage = prisonDamage;
            nextBuffVars.SecondaryDuration = 1;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 1000)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 1000, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 3, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            ForNClosestUnitsInTargetArea(owner, owner.Position, 2000, "AffectEnemies AffectHeroes ", 1, true, default, (unit) => 
            {
                teamID = GetTeamID(default);
                perBubb = AddUnitPerceptionBubble(teamID, 30, owner, 1, default, owner, false);
            });
        }
    }
}
namespace Spells
{
    public class SejuaniNorthernWinds : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DamagePerTick = 0;
            public float MaxHPPercent = 0;
            public float FrostBonus = 0;
        }
        public int[] effect0 = {12, 20, 28, 36, 44};
        public float[] effect1 = {0.01f, 0.0125f, 0.015f, 0.0175f, 0.02f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.DamagePerTick = this.effect0[level];
            nextBuffVars.MaxHPPercent = this.effect1[level];
            nextBuffVars.FrostBonus = 1.5f;
            SpellBuffAdd((ObjAIBase)owner, target, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class SejuaniWintersClaw : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MovementSpeedMod = 0;
            public float AttackSpeedMod = 0;
        }
        public float[] effect0 = {-0.3f, -0.4f, -0.5f, -0.6f, -0.7f};
        public float[] effect1 = {-0.3f, -0.35f, -0.4f, -0.45f, -0.5f};
        public int[] effect2 = {60, 110, 160, 210, 260};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            TeamId teamID;
            SetReturnValue(default);
            teamID = GetTeamID(default);
            if(teamID == TeamId.TEAM_BLUE)
            {
                ForEachUnitInTargetAreaRandom((ObjAIBase)owner, owner.Position, 900, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "SejuaniFrost", true, 1, (unit) => 
                {
                    SetReturnValue(default);
                });
                ForEachUnitInTargetAreaRandom((ObjAIBase)owner, owner.Position, 900, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "SejuaniFrostResist", true, 1, (unit) => 
                {
                    SetReturnValue(default);
                });
            }
            else
            {
                ForEachUnitInTargetAreaRandom((ObjAIBase)owner, owner.Position, 900, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "SejuaniFrostChaos", true, 1, (unit) => 
                {
                    SetReturnValue(default);
                });
                ForEachUnitInTargetAreaRandom((ObjAIBase)owner, owner.Position, 900, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "SejuaniFrostResistChaos", true, 1, (unit) => 
                {
                    SetReturnValue(default);
                });
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Particle? particle1 = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            SpellEffectCreate(out particle1, out _, "Sejuani_WintersClaw_cas.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "L_UpArm", default, owner, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(out particle1, out _, "Sejuani_WintersClaw_cas_02.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, true, false, false, false, false, default, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            TargetExecute_nextBuffVars nextBuffVars = new();
            int damageToDeal = 0;
            bool? damageThis = null;
            Particle? particle1 = null;
            //object? _ = null;
            //object? unit = null;
            teamID = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.MovementSpeedMod = this.effect0[level];
            nextBuffVars.AttackSpeedMod = this.effect1[level];
            damageToDeal = this.effect2[level];
            damageThis = false;
            if(teamID == TeamId.TEAM_BLUE)
            {
                if(GetBuffCountFromCaster(target, owner, "SejuaniFrost") > 0)
                {
                    damageThis = true;
                }
                if(GetBuffCountFromCaster(target, owner, "SejuaniFrostResist") > 0)
                {
                    damageThis = true;
                }
                if(damageThis == true)
                {
                    SpellEffectCreate(out particle1, out _, "Sejuani_WintersClaw_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, unit, default, default, false, false, false, false, false, default, default);
                    BreakSpellShields(target);
                    SpellBuffAdd((ObjAIBase)owner, target, "SejuaniWintersClaw", 1, 1, charVars.FrostDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                    ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
                }
            }
            else
            {
                if(GetBuffCountFromCaster(target, owner, "SejuaniFrostChaos") > 0)
                {
                    damageThis = true;
                }
                if(GetBuffCountFromCaster(target, owner, "SejuaniFrostResistChaos") > 0)
                {
                    damageThis = true;
                }
                if(damageThis == true)
                {
                    SpellEffectCreate(out particle1, out _, "Sejuani_WintersClaw_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, unit, default, default, false, false, false, false, false, default, default);
                    BreakSpellShields(target);
                    SpellBuffAdd((ObjAIBase)owner, target, "SejuaniWintersClawChaos", 1, 1, charVars.FrostDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                    ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
                }
            }
        }
    }
}




namespace Spells
{
    public class ShacoBoxBasicAttack : Script
    {
        public int[] effect0 = {35, 55, 75, 95, 115};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int dmg = 0;
            teamID = GetTeamID(default);
            attacker = GetChampionBySkinName("Shaco", TeamId.TEAM_BLUE);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            dmg = this.effect0[level];
            ApplyDamage((ObjAIBase)attacker, target, dmg, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0.25f, 1, false, false, (ObjAIBase)owner);
        }
    }
}
namespace Spells
{
    public class ShacoBoxSpell : Script
    {
        public int[] effect0 = {35, 50, 65, 80, 95};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int dmg = 0;
            teamID = GetTeamID(default);
            attacker = GetChampionBySkinName("Shaco", teamID);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            dmg = this.effect0[level];
            ApplyDamage((ObjAIBase)attacker, target, dmg, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0.2f, 1, false, false, (ObjAIBase)owner);
        }
    }
}
namespace Spells
{
    public class ShadowStep : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float DamageReduction = 0;
        }
        public int[] effect0 = {80, 120, 160, 200, 240};
        public int[] effect1 = {8, 12, 16, 20, 24};
        public float[] effect2 = {0.15f, 0.2f, 0.25f, 0.3f, 0.35f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? smokeBomb = null;
            //object? _ = null;
            Vector3 castPos;
            int ownerskinid = 0;
            Particle? p3 = null;
            SpellEffectCreate(out smokeBomb, out _, "katarina_shadowStep_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            castPos = GetUnitPosition(owner);
            ownerskinid = GetSkinID(owner);
            if(ownerskinid == 6)
            {
                SpellEffectCreate(out p3, out _, "katarina_shadowStep_Sand_return.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, castPos, target, default, default, true, false, false, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out p3, out _, "katarina_shadowStep_return.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, castPos, target, default, default, true, false, false, false, false, default, default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float distance = 0;
            float finalDistance = 0;
            bool? temp = null;
            float damageVar = 0;
            int kIDamage = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? pH = null;
            //object? _ = null;
            FaceDirection(owner, target.Position);
            distance = DistanceBetweenObjects("Owner", "Target");
            finalDistance = Math(distance, MathOp.MO_ADD, 0);
            finalDistance = Math(finalDistance, MathOp.MO_ADD, 250);
            targetPos = GetPointByUnitFacingOffset(owner, finalDistance, 0);
            temp = IsPathable(targetPos);
            if(temp == false)
            {
                finalDistance = Math(finalDistance, MathOp.MO_SUBTRACT, 200);
            }
            targetPos = GetPointByUnitFacingOffset(owner, finalDistance, 0);
            TeleportToPosition(owner, targetPos);
            damageVar = this.effect0[level];
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            kIDamage = this.effect1[level];
            damageVar = Math(damageVar, MathOp.MO_ADD, kIDamage);
            if(GetBuffCountFromCaster(owner, owner, "KillerInstinct") > 0)
            {
                nextBuffVars.DamageReduction = this.effect2[level];
                SpellBuffAdd((ObjAIBase)attacker, owner, "ShadowStepDodge", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                SpellBuffRemove(owner, "KillerInstinct", (ObjAIBase)owner, 0);
            }
            if(target.Team != owner.Team)
            {
                SpellEffectCreate(out pH, out _, "katarina_shadowStep_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, targetPos, target, default, default, true, false, false, false, false, default, default);
                ApplyDamage((ObjAIBase)attacker, target, damageVar, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.75f, 1, false, false, (ObjAIBase)attacker);
                if(target is Champion)
                {
                    IssueOrder(owner, OrderType.AttackTo, default, target);
                }
            }
            else
            {
                if(GetBuffCountFromCaster(target, default, "SharedWardBuff") > 0)
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "Destealth", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
        }
    }
}

namespace Spells
{
    public class ShadowWalk : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float InitialTime = 0;
            public float TimeLastHit = 0;
            public float MoveSpeedMod = 0;
            public int StealthDuration = 0;
            public object? TeamID = null;
            public bool? WillRemove = null;
        }
        public float[] effect0 = {-0.3f, -0.35f, -0.4f, -0.45f, -0.5f};
        public int[] effect1 = {10, 20, 30, 40, 50};
        //object? teamID = null;
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            bool? temp = null;
            Particle? particle = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            teamID = GetTeamID(default);
            temp = GetStealthed(owner);
            if(temp == true)
            {
                SpellBuffRemove(owner, "ShadowWalk", (ObjAIBase)owner, 0);
                SpellBuffRemove(owner, "ShadowWalk_internal", (ObjAIBase)owner, 0);
            }
            else
            {
                SpellEffectCreate(out particle, out _, "evelyn_invis_cas.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, true, default, default, false, false, default, default);
                SetSlotSpellCooldownTime((ObjAIBase)owner, 1, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0);
                nextBuffVars.InitialTime = GetTime();
                nextBuffVars.TimeLastHit = GetTime();
                nextBuffVars.MoveSpeedMod = this.effect0[level];
                nextBuffVars.StealthDuration = this.effect1[level];
                nextBuffVars.TeamID = this.teamID;
                nextBuffVars.WillRemove = false;
                SpellBuffAdd((ObjAIBase)owner, owner, "ShadowWalk_internal", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
        }
    }
}




namespace Spells
{
    public class Shatter : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int ArmorReduction = 0;
        }
        public int[] effect0 = {60, 105, 150, 195, 240};
        public int[] effect1 = {-10, -15, -20, -25, -30};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Particle? hi = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            SpellEffectCreate(out hi, out _, "Shatter_nova.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, true, false, false, false, false, default, default);
            SpellBuffRemove(owner, "ShatterSelfBonus", (ObjAIBase)owner, 0);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            BreakSpellShields(target);
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
            nextBuffVars.ArmorReduction = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "Shatter", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SHRED, 0, true, false, false, default);
        }
    }
}


namespace Chars
{
    public class Sheen : Script
    {
        public void OnLaunchAttack(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "SheenDelay") == 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "SheenDelay", 1, 1, 1.4f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            }
        }
    }
}


namespace Spells
{
    public class ShellBash : Script
    {
        public int[] effect0 = {100, 125, 150, 175, 200};
        public float[] effect1 = {1, 1.5f, 2, 2.5f, 3};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            if(GetBuffCountFromCaster(owner, owner, "DefensiveBallCurl") > 0)
            {
                SetReturnValue(default);
            }
            else
            {
                if(GetBuffCountFromCaster(owner, owner, "PowerBall") > 0)
                {
                    SetReturnValue(default);
                }
                else
                {
                    SetReturnValue(default);
                }
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_DEFAULT, 1, 1, default, default, default, default);
            ApplyStun(attacker, target, this.effect1[level]);
        }
    }
}
namespace Spells
{
    public class ShenDestabilize : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int ArmorMod = 0;
            public float LifeReturn = 0;
            public float NinjaBonus = 0;
        }
        public int[] effect0 = {-15, -22, -29, -36, -43};
        public float[] effect1 = {0.1f, 0.15f, 0.2f, 0.25f, 0.3f};
        public float[] effect2 = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.ArmorMod = this.effect0[level];
            nextBuffVars.LifeReturn = this.effect1[level];
            nextBuffVars.NinjaBonus = this.effect2[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, default, default, default, default);
        }
    }
}
namespace Spells
{
    public class ShenFeint : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? DamageBlock = null;
        }
        public int[] effect0 = {50, 100, 150, 200, 250};
        public float[] effect1 = {2.5f, 2.5f, 2.5f, 2.5f, 2.5f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int baseDamageBlock = 0;
            float abilityPower = 0;
            float bonusHealth = 0;
            float damageBlock = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            baseDamageBlock = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(owner);
            bonusHealth = Math(abilityPower, MathOp.MO_MULTIPLY, 0.75f);
            damageBlock = Math(baseDamageBlock, MathOp.MO_ADD, bonusHealth);
            nextBuffVars.DamageBlock = damageBlock;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect1[level], nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class ShenKiAttack : Script
    {
        public int[] effect0 = {10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? hi = null;
            //object? _ = null;
            float baseDmg = 0;
            float maxHP = 0;
            float bonusDmgFromHP = 0;
            int shurikenDamage = 0;
            float damageToDeal = 0;
            if(target is ObjAIBase)
            {
                SpellEffectCreate(out hi, out _, "Globalhit_red.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, owner.Position, owner, default, default, true, default, default, false, default, default, default);
            }
            baseDmg = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseDmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            maxHP = GetFlatHPPoolMod(owner);
            bonusDmgFromHP = Math(maxHP, MathOp.MO_MULTIPLY, 0.08f);
            level = GetLevel(owner);
            shurikenDamage = this.effect0[level];
            damageToDeal = Math(bonusDmgFromHP, MathOp.MO_ADD, shurikenDamage);
            ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 1, false, false, (ObjAIBase)attacker);
            SpellBuffRemove(attacker, "ShenWayOfTheNinjaAura", (ObjAIBase)attacker, 0);
        }
    }
}

namespace Spells
{
    public class ShenShadowDash : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public object? Distance = null;
            public object? DashSpeed = null;
            public float TauntDuration = 0;
            public object? EnergyRefunds = null;
        }
        public float[] effect0 = {1, 1.25f, 1.5f, 1.75f, 2};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 ownerPos;
            float moveSpeed = 0;
            float dashSpeed = 0;
            float distance = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            float energyRefunds = 0;
            //object? unit = null;
            Particle? targetParticle = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            moveSpeed = GetMovementSpeed(owner);
            dashSpeed = Math(moveSpeed, MathOp.MO_ADD, 800);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            if(distance >= 575)
            {
                FaceDirection(owner, targetPos);
                distance = 575;
                targetPos = GetPointByUnitFacingOffset(owner, 575, 0);
            }
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.Distance = distance;
            nextBuffVars.DashSpeed = dashSpeed;
            nextBuffVars.TauntDuration = this.effect0[level];
            energyRefunds = 1;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 150, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                if(GetBuffCountFromCaster(unit, owner, "ShenShadowDashCooldown") == 0)
                {
                    SpellBuffAdd((ObjAIBase)owner, unit, "ShenShadowDashCooldown", 1, 1, nextBuffVars.TauntDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    BreakSpellShields(unit);
                    ApplyTaunt(attacker, unit, nextBuffVars.TauntDuration);
                    SpellEffectCreate(out targetParticle, out _, "shen_shadowDash_unit_impact.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, true, default, default, false, false, default, default);
                    if(unit is Champion)
                    {
                        if(energyRefunds >= 1)
                        {
                            IncPAR(owner, 40);
                            energyRefunds = Math(energyRefunds, MathOp.MO_SUBTRACT, 1);
                        }
                    }
                }
            });
            nextBuffVars.EnergyRefunds = energyRefunds;
            SpellBuffAdd((ObjAIBase)attacker, owner, default, 1, 1, 1.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0.1f, true, false, false, default);
        }
    }
}




namespace Spells
{
    public class ShenShadowStep : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            float distance = 0;
            int gravityVar = 0;
            int speedVar = 0;
            SpellBuffAdd((ObjAIBase)target, attacker, default, 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            distance = DistanceBetweenObjects("Attacker", "Target");
            if(distance >= 600)
            {
                gravityVar = 70;
                speedVar = 1150;
            }
            else if(distance >= 500)
            {
                gravityVar = 80;
                speedVar = 1150;
            }
            else if(distance >= 400)
            {
                gravityVar = 100;
                speedVar = 1080;
            }
            else if(distance >= 300)
            {
                gravityVar = 120;
                speedVar = 1010;
            }
            else if(distance >= 200)
            {
                gravityVar = 150;
                speedVar = 950;
            }
            else if(distance >= 100)
            {
                gravityVar = 300;
                speedVar = 900;
            }
            else if(distance >= 0)
            {
                gravityVar = 1000;
                speedVar = 900;
            }
            Move(attacker, target.Position, speedVar, gravityVar, 100, ForceMovementType.FURTHEST_WITHIN_RANGE, default, default, default);
        }
    }
}
namespace Spells
{
    public class ShenShurikenStormToss : Script
    {
        public int[] effect0 = {26, 32, 38, 44, 50, 56, 62, 68, 74, 80, 86, 92, 98, 104, 110, 116, 122, 128};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamOfOwner;
            int damageToDeal = 0;
            teamOfOwner = GetTeamID(default);
            attacker = GetChampionBySkinName("Shen", teamOfOwner);
            level = GetLevel(attacker);
            damageToDeal = this.effect0[level];
            ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.25f, 0, false, false, default);
        }
    }
}
namespace Spells
{
    public class ShenStandUnited : Script
    {
        class ChannelingStart_nextBuffVars
        {
            public object? ShieldHealth = null;
        }
        public int[] effect0 = {200, 475, 750};
        public void ChannelingStart(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            ChannelingStart_nextBuffVars nextBuffVars = new();
            int baseShieldHealth = 0;
            float abilityPower = 0;
            float bonusShieldHealth = 0;
            float shieldHealth = 0;
            SpellBuffAdd((ObjAIBase)attacker, owner, default, 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            baseShieldHealth = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(owner);
            bonusShieldHealth = Math(1.5f, MathOp.MO_MULTIPLY, abilityPower);
            shieldHealth = Math(baseShieldHealth, MathOp.MO_ADD, bonusShieldHealth);
            nextBuffVars.ShieldHealth = shieldHealth;
            SpellBuffAdd((ObjAIBase)owner, target, "ShenStandUnitedShield", 1, 1, 7.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "ShenStandUnitedTarget", 1, 1, 2.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
        public void ChannelingSuccessStop(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            Vector3 castPos;
            DestroyMissileForTarget(owner);
            castPos = GetPointByUnitFacingOffset(target, 150, 180);
            TeleportToPosition(owner, castPos);
        }
    }
}


namespace Spells
{
    public class ShenVorpalStar : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float LifeTapMod = 0;
        }
        public int[] effect0 = {70, 115, 140, 175, 210};
        public float[] effect1 = {6, 8.66f, 11.33f, 14, 16.66f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? hit = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.75f, 0, false, false, (ObjAIBase)attacker);
            nextBuffVars.LifeTapMod = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            SpellEffectCreate(out hit, out _, "shen_vorpalStar_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
        }
    }
}



namespace Spells
{
    public class ShurelyasCrest : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            Particle? a = null;
            //object? _ = null;
            //object? unit = null;
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            SetSpell((ObjAIBase)owner, 7, SpellSlotType.ExtraSlots, SpellbookType.SPELLBOOK_CHAMPION, "ShurelyasSpell");
            nextBuffVars.MoveSpeedMod = 0.4f;
            SpellEffectCreate(out a, out _, "ShurelyasCrest_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, false, false, default, default);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 700, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (unit) => 
            {
                SpellCast((ObjAIBase)owner, unit, unit, unit, false, 7, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            });
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 700, "AffectFriends AffectHeroes ", default, true, (unit) => 
            {
                ApplyAssistMarker((ObjAIBase)attacker, unit, 10);
                SpellBuffAdd((ObjAIBase)owner, unit, "Haste", 100, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.HASTE, 0, true, false, false, default);
            });
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "shurelyascrest")
            {
                SetSlotSpellCooldownTimeVer2(60, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name1 == "shurelyascrest")
            {
                SetSlotSpellCooldownTimeVer2(60, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name2 == "shurelyascrest")
            {
                SetSlotSpellCooldownTimeVer2(60, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name3 == "shurelyascrest")
            {
                SetSlotSpellCooldownTimeVer2(60, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name4 == "shurelyascrest")
            {
                SetSlotSpellCooldownTimeVer2(60, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name5 == "shurelyascrest")
            {
                SetSlotSpellCooldownTimeVer2(60, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
        }
    }
}
namespace Spells
{
    public class ShurelyasSpell : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? particle = null;
            //object? _ = null;
            SpellEffectCreate(out particle, out _, "Haste_proc.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, default, default, default, default, default, default);
        }
    }
}
namespace Spells
{
    public class ShyvanaDoubleAttack : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
        }
        public int[] effect0 = {10, 9, 8, 7, 6};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpellCooldown = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 6, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0);
        }
    }
}
namespace Spells
{
    public class ShyvanaDoubleAttackDragon : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
        }
        public int[] effect0 = {10, 9, 8, 7, 6};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpellCooldown = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 6, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0);
        }
    }
}
namespace Spells
{
    public class ShyvanaDoubleAttackHit : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            //object? nextBuffVars = null;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaDoubleAttackHit", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class ShyvanaDoubleAttackHitDragon : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            //object? nextBuffVars = null;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaDoubleAttackHitDragon", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class ShyvanaFireball : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 850)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 925, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class ShyvanaFireballDragon : Script
    {
        public int[] effect0 = {70, 110, 150, 190, 230};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Particle? a = null;
            //object? _ = null;
            int spellBaseDamage = 0;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            SpellEffectCreate(out a, out _, "shyvana_flameBreath_dragon_burn.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            spellBaseDamage = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaFireballParticle", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            ApplyDamage((ObjAIBase)attacker, target, spellBaseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaFireballMissile", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class ShyvanaFireballDragon2 : Script
    {
        public int[] effect0 = {80, 125, 170, 215, 260};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 point1;
            Vector3 point2;
            Vector3 point3;
            Vector3 point4;
            Vector3 point5;
            point1 = GetPointByUnitFacingOffset(owner, 300, 20);
            point2 = GetPointByUnitFacingOffset(owner, 300, -20);
            point3 = GetPointByUnitFacingOffset(owner, 325, 0);
            SpellCast((ObjAIBase)owner, default, point1, point1, false, 4, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            SpellCast((ObjAIBase)attacker, default, point2, point2, false, 4, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            SpellCast((ObjAIBase)attacker, default, point3, point3, false, 4, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            point4 = GetPointByUnitFacingOffset(owner, 310, 10);
            point5 = GetPointByUnitFacingOffset(owner, 310, -10);
            SpellCast((ObjAIBase)attacker, default, point4, point5, false, 4, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            SpellCast((ObjAIBase)attacker, default, point5, point5, false, 4, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int spellBaseDamage = 0;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            spellBaseDamage = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaFireballParticle", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            ApplyDamage((ObjAIBase)attacker, target, spellBaseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 0, false, false, (ObjAIBase)attacker);
            if(default is Champion)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaFireballMissile", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaFireballMissileMinion", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class ShyvanaFireballDragon3 : Script
    {
        public int[] effect0 = {70, 110, 150, 190, 230};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Particle? a = null;
            //object? _ = null;
            int spellBaseDamage = 0;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            SpellEffectCreate(out a, out _, "Incinerate_buf.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            spellBaseDamage = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaFireballParticle", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            ApplyDamage((ObjAIBase)attacker, target, spellBaseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaFireballMissile", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 pointToSpawn;
            Vector3 pointToFace;
            Minion? other1 = null;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            pointToSpawn = GetPointByUnitFacingOffset(owner, 25, 0);
            pointToFace = GetPointByUnitFacingOffset(owner, -100, 0);
            other1 = SpawnMinion("ConeBreathMarker", "TestCubeRender10Vision", "idle.lua", pointToSpawn, teamID, false, true, false, false, false, true, 1, false, false, (Champion)owner, default);
            FaceDirection(other1, pointToFace);
            SpellBuffAdd((ObjAIBase)attacker, other1, "ShyvanaFireballDragonMinion", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class ShyvanaFireballDragonFxMissile : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            
        }
    }
}

namespace Spells
{
    public class ShyvanaFireballMissile : Script
    {
        public int[] effect0 = {80, 125, 170, 215, 260};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int spellBaseDamage = 0;
            bool? isStealthed = null;
            //object? missileNetworkID = null;
            //object? nextBuffVars = null;
            bool? canSee = null;
            teamID = GetTeamID(default);
            spellBaseDamage = this.effect0[level];
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                DestroyMissile(missileNetworkID);
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaFireballParticle", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, spellBaseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.6f, 0, false, false, (ObjAIBase)attacker);
                SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaFireballMissile", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            }
            else
            {
                if(target is Champion)
                {
                    DestroyMissile(missileNetworkID);
                    BreakSpellShields(target);
                    SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaFireballParticle", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    ApplyDamage((ObjAIBase)attacker, target, spellBaseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.6f, 0, false, false, (ObjAIBase)attacker);
                    SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaFireballMissile", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        DestroyMissile(missileNetworkID);
                        BreakSpellShields(target);
                        SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaFireballParticle", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                        ApplyDamage((ObjAIBase)attacker, target, spellBaseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0.6f, 0, false, false, (ObjAIBase)attacker);
                        SpellBuffAdd((ObjAIBase)attacker, target, "ShyvanaFireballMissile", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                    }
                }
            }
        }
    }
}




namespace Spells
{
    public class ShyvanaImmolateDragon : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float MovementSpeed = 0;
            public int DamagePerTick = 0;
        }
        public float[] effect0 = {0.3f, 0.35f, 0.4f, 0.45f, 0.5f};
        public int[] effect1 = {25, 40, 55, 70, 85};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.MovementSpeed = this.effect0[level];
            nextBuffVars.DamagePerTick = this.effect1[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 3, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class ShyvanaImmolationAura : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float MovementSpeed = 0;
            public int DamagePerTick = 0;
        }
        public float[] effect0 = {0.3f, 0.35f, 0.4f, 0.45f, 0.5f};
        public int[] effect1 = {25, 40, 55, 70, 85};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.MovementSpeed = this.effect0[level];
            nextBuffVars.DamagePerTick = this.effect1[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 3, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class ShyvanaTransformCast : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            float currentPAR = 0;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            currentPAR = GetPAR(owner);
            if(currentPAR != 100)
            {
                SetReturnValue(default);
            }
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
            if(GetBuffCountFromCaster(owner, owner, "ShyvanaTransform") > 0)
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            targetPos = GetPointByUnitFacingOffset(owner, 75 + distance, 0);
            if(distance < 300)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 375, 0);
            }
            if(distance > 950)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 950, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 2, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}



namespace Spells
{
    public class ShyvanaTransformLeap : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
        }
        public int[] effect0 = {25000, 25000, 25000};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            float distance = 0;
            targetPos = GetCastSpellTargetPos();
            SpellBuffAdd((ObjAIBase)owner, owner, "ShyvanaTransform", 1, 1, this.effect0[level], nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            nextBuffVars.TargetPos = targetPos;
            SpellBuffAdd((ObjAIBase)target, owner, "ShyvanaTransformLeap", 1, 1, 3.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, true, default);
            distance = DistanceBetweenObjectAndPoint(owner, targetPos);
            Move(owner, targetPos, 1100, 10, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, 0, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
        }
    }
}

namespace Spells
{
    public class SightWard : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            other3 = SpawnMinion("SightWard", "SightWard", "idle.lua", targetPos, teamID, true, true, false, false, false, false, 0, true, false, (Champion)owner, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "SharedWardBuff", 1, 1, 180, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 180, default, BuffAddType.REPLACE_EXISTING, BuffType.INVISIBILITY, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "ItemPlacementMissile", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(avatarVars.Scout == true)
            {
                SpellBuffAdd((ObjAIBase)attacker, other3, "MasteryScoutBuff", 1, 1, 180, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            SetSpell((ObjAIBase)owner, 7, SpellSlotType.ExtraSlots, SpellbookType.SPELLBOOK_CHAMPION, "ItemPlacementMissile");
            FaceDirection(owner, targetPos);
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 7, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
        }
    }
}




namespace Spells
{
    public class SiphoningStrikeNew : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
        }
        public int[] effect0 = {8, 7, 6, 5, 4};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpellCooldown = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 10, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0);
        }
    }
}




namespace Spells
{
    public class SkarnerExoskeleton : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? DamageBlock = null;
            public float MSBonus = 0;
            public float ASBonus = 0;
        }
        public int[] effect0 = {70, 115, 160, 205, 250};
        public float[] effect1 = {0.15f, 0.17f, 0.19f, 0.21f, 0.23f};
        public float[] effect2 = {0.3f, 0.35f, 0.4f, 0.45f, 0.5f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int baseDamageBlock = 0;
            //object? instanceVars = null;
            float abilityPower = 0;
            float bonusHealth = 0;
            float damageBlock = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            baseDamageBlock = this.effect0[level];
            PlayAnimation("Spell2", 0, owner, false, false, false);
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.5f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            abilityPower = GetFlatMagicDamageMod(owner);
            bonusHealth = Math(abilityPower, MathOp.MO_MULTIPLY, 0.6f);
            damageBlock = Math(baseDamageBlock, MathOp.MO_ADD, bonusHealth);
            nextBuffVars.DamageBlock = damageBlock;
            nextBuffVars.MSBonus = this.effect1[level];
            nextBuffVars.ASBonus = this.effect2[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "SkarnerExoskeleton", 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class SkarnerFracture : Script
    {
        Particle? partname = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            //object? _ = null;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 600)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 600, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            SpellEffectCreate(out this.partname, out _, "Skarner_Fracture_Cas.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, owner.Position, target, default, default, true, default, default, false, false, default, default);
        }
    }
}
namespace Spells
{
    public class SkarnerFractureMissile : Script
    {
        public int[] effect0 = {80, 120, 160, 200, 240};
        public int[] effect1 = {30, 45, 60, 75, 90};
        public float[] effect2 = {1, 0.5f, 0.25f, 0.125f, 0.0625f, 0.0625f, 0.0625f, 0.0625f, 0.0625f, 0.0625f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, float level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int count = 0;
            TeamId teamID;
            float healingAmount = 0;
            float aPStat = 0;
            float bonusHeal = 0;
            float healingMod = 0;
            Particle? motaExplosion = null;
            //object? _ = null;
            Particle? healVFX = null;
            //object? nextBuffVars = null;
            BreakSpellShields(target);
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.7f, 1, false, false, (ObjAIBase)attacker);
            if(target.IsDead)
            {
                count = GetBuffCountFromCaster(attacker, attacker, "SkarnerFracture");
                teamID = GetTeamID(default);
                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                healingAmount = this.effect1[level];
                aPStat = GetFlatMagicDamageMod(attacker);
                bonusHeal = Math(aPStat, MathOp.MO_MULTIPLY, 0.3f);
                healingAmount = Math(healingAmount, MathOp.MO_ADD, bonusHeal);
                level = count;
                level = Math(level, MathOp.MO_ADD, 1);
                healingMod = this.effect2[level];
                healingAmount = Math(healingAmount, MathOp.MO_MULTIPLY, healingMod);
                SpellEffectCreate(out motaExplosion, out _, "Skarner_Fracture_Tar_Consume.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                IncHealth(attacker, healingAmount, attacker);
                SpellEffectCreate(out healVFX, out _, "galio_bulwark_heal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, attacker, false, attacker, default, default, attacker, default, default, true, false, false, false, false, default, default);
                SpellBuffAdd((ObjAIBase)attacker, attacker, "SkarnerFracture", 8, 1, 6, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "SkarnerFractureMissile", 1, 1, 6, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class SkarnerImpale : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? Victim = null;
        }
        public int[] effect0 = {100, 150, 200, 0, 0};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float suppressionDuration = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            int damagePerTick = 0;
            float hP = 0;
            Vector3 pos;
            suppressionDuration = 1.75f;
            nextBuffVars.Victim = target;
            SpellBuffAdd((ObjAIBase)attacker, target, "SkarnerImpale", 1, 1, suppressionDuration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SUPPRESSION, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)target, owner, "SkarnerImpaleBuff", 1, 1, suppressionDuration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            damagePerTick = this.effect0[level];
            ApplyDamage((ObjAIBase)attacker, target, damagePerTick, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.5f, 0, false, false, (ObjAIBase)attacker);
            hP = GetHealth(target);
            if(hP > 0)
            {
                IssueOrder(owner, OrderType.Hold, default, owner);
                pos = GetPointByUnitFacingOffset(owner, 100, 180);
                FaceDirection(owner, pos);
                PlayAnimation("Spell4_Idleback", 0, owner, false, false, false);
            }
        }
    }
}



namespace Spells
{
    public class SkarnerVirulentSlash : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float SlowPercent = 0;
        }
        public int[] effect0 = {25, 40, 55, 70, 85};
        public int[] effect1 = {24, 36, 48, 60, 72};
        public float[] effect2 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        Particle? partname = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int baseDamage = 0;
            int procDamage = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            float ratioVar = 0;
            TeamId teamID;
            //object? instanceVars = null;
            int count = 0;
            //object? _ = null;
            bool? championHit = null;
            //object? unit = null;
            Particle? temp = null;
            baseDamage = this.effect0[level];
            procDamage = this.effect1[level];
            nextBuffVars.SlowPercent = this.effect2[level];
            ratioVar = 0.3f;
            teamID = GetTeamID(default);
            PlayAnimation("Spell1", 0, owner, false, true, false);
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.5f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            count = GetBuffCountFromCaster(owner, owner, "SkarnerVirulentSlash");
            if(count == 0)
            {
                SpellEffectCreate(out this.partname, out _, "Skarner_Crystal_Slash_Mini_Nova.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, owner.Position, target, default, default, true, false, false, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out this.partname, out _, "Skarner_Crystal_Slash_Buf.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, owner.Position, target, default, default, true, false, false, false, false, default, default);
            }
            championHit = false;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                ApplyDamage((ObjAIBase)attacker, unit, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0.8f, false, false, (ObjAIBase)attacker);
                championHit = true;
                if(count == 0)
                {
                    SpellEffectCreate(out temp, out _, "chogath_basic_attack_01.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                }
                else
                {
                    ApplyDamage((ObjAIBase)attacker, unit, procDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.4f, 0, false, false, (ObjAIBase)attacker);
                    SpellEffectCreate(out temp, out _, "Skarner_Crystal_Slash_Tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd((ObjAIBase)owner, unit, "SkarnerVirulentSlashSlow", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                }
            });
            if(championHit == true)
            {
                SpellBuffAdd((ObjAIBase)attacker, attacker, "SkarnerVirulentSlash", 1, 1, 5, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                if(count == 0)
                {
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "SkarnerVirulentSlashEnergy1", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
        }
    }
}










namespace Spells
{
    public class SonaAriaofPerseverance : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DefenseBonus = 0;
        }
        public int[] effect0 = {40, 60, 80, 100, 120};
        public int[] effect1 = {8, 11, 14, 17, 20};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            float cooldownPerc = 0;
            float currentCD = 0;
            TeamId casterID;
            string? jumpTarget = null;
            int jumpTargetHealth_ = 0;
            //object? unit = null;
            float unitHealth_ = 0;
            object? other1 = null;
            float aPMod = 0;
            Particle? self = null;
            //object? _ = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "SonaAriaofPerseverance", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(GetBuffCountFromCaster(owner, owner, "SonaPowerChord") > 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "SonaAriaofPerseveranceCheck", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            cooldownPerc = GetPercentCooldownMod(owner);
            cooldownPerc = Math(1, MathOp.MO_ADD, cooldownPerc);
            cooldownPerc = Math(2, MathOp.MO_MULTIPLY, cooldownPerc);
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 2, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            casterID = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            jumpTarget = NoTargetYet;
            jumpTargetHealth_ = 1;
            ForEachUnitInTargetAreaRandom((ObjAIBase)owner, owner.Position, 1000, "AffectFriends AffectHeroes NotAffectSelf ", default, true, 999, (unit) => 
            {
                if(jumpTarget == NoValidTarget)
                {
                    jumpTarget = unit;
                }
                unitHealth_ = GetHealthPercent(unit);
                if(unitHealth_ < jumpTargetHealth_)
                {
                    jumpTarget = unit;
                    jumpTargetHealth_ = unitHealth_;
                }
            });
            if(jumpTarget != NoValidTarget)
            {
                other1 = jumpTarget;
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1200, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (unit) => 
                {
                    if(unit == other1)
                    {
                        SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                    }
                });
            }
            aPMod = GetFlatMagicDamageMod(attacker);
            aPMod = Math(aPMod, MathOp.MO_MULTIPLY, 0.25f);
            IncHealth(owner, aPMod + this.effect0[level], attacker);
            SpellEffectCreate(out self, out _, "Global_Heal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, false, false, false, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "SonaAriaofPerseveranceAura", 1, 1, 2.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            PlayAnimation("Spell2", 1, owner, false, true, true);
            nextBuffVars.DefenseBonus = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, attacker, "SonaAriaShield", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class SonaAriaofPerseveranceAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float attackDamage = 0;
            attackDamage = GetTotalAttackDamage(owner);
            ApplyDamage((ObjAIBase)owner, target, attackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
        }
    }
}



namespace Spells
{
    public class SonaAriaofPerseveranceMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DefenseBonus = 0;
        }
        public int[] effect0 = {40, 60, 80, 100, 120};
        public int[] effect1 = {8, 11, 14, 17, 20};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float aPMod = 0;
            Particle? self = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            aPMod = GetFlatMagicDamageMod(attacker);
            aPMod = Math(aPMod, MathOp.MO_MULTIPLY, 0.25f);
            IncHealth(target, aPMod + this.effect0[level], attacker);
            SpellEffectCreate(out self, out _, "Global_Heal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, target, false, target, default, default, target, default, default, false, false, false, false, false, default, default);
            ApplyAssistMarker((ObjAIBase)attacker, target, 10);
            nextBuffVars.DefenseBonus = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "SonaAriaShield", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class SonaAriaofPerseveranceUpgrade : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? TotalDamage = null;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int levelDamage = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            float attackDamage = 0;
            levelDamage = GetLevel(owner);
            bonusDamage = Math(levelDamage, MathOp.MO_MULTIPLY, 9);
            totalDamage = Math(bonusDamage, MathOp.MO_ADD, 14);
            nextBuffVars.TotalDamage = totalDamage;
            attackDamage = GetTotalAttackDamage(owner);
            ApplyDamage((ObjAIBase)owner, target, attackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "IfHasBuffCheck", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    BreakSpellShields(target);
                    SpellBuffAdd((ObjAIBase)attacker, target, "SonaPowerChordDebuff", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
            }
            SpellBuffAdd((ObjAIBase)attacker, target, "SonaAriaPCDeathRecapFix", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffRemove(owner, "SonaPowerChord", (ObjAIBase)owner, 0);
        }
    }
}
namespace Spells
{
    public class SonaBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class SonaBasicAttack2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class SonaCrescendo : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float DamageAmount = 0;
        }
        public float[] effect0 = {50, 83.3f, 116.6f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.DamageAmount = this.effect0[level];
            BreakSpellShields(target);
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 1.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class SonaCritAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float baseAttackDamage = 0;
            hitResult = HitResult.HIT_Critical;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}

namespace Spells
{
    public class SonaHymnofValor : Script
    {
        Region? bubbleID = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            float cooldownPerc = 0;
            float currentCD = 0;
            TeamId casterID;
            float availChamps = 0;
            //object? unit = null;
            bool? result = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "SonaHymnofValor", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(GetBuffCountFromCaster(owner, owner, "SonaPowerChord") > 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "SonaHymnofValorCheck", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            cooldownPerc = GetPercentCooldownMod(owner);
            cooldownPerc = Math(1, MathOp.MO_ADD, cooldownPerc);
            cooldownPerc = Math(2, MathOp.MO_MULTIPLY, cooldownPerc);
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 1, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 2, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            casterID = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            availChamps = 0;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 650, "AffectEnemies AffectHeroes ", default, true, (unit) => 
            {
                availChamps = Math(availChamps, MathOp.MO_ADD, 1);
            });
            if(availChamps == 1)
            {
                ForNClosestUnitsInTargetArea(owner, owner.Position, 650, "AffectEnemies AffectHeroes ", 1, true, default, (unit) => 
                {
                    result = CanSeeTarget(owner, unit);
                    if(result == true)
                    {
                        this.bubbleID = AddUnitPerceptionBubble(casterID, 300, unit, 1, default, default, false);
                        SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                    }
                });
                ForNClosestUnitsInTargetArea(owner, owner.Position, 850, "AffectEnemies AffectNeutral AffectMinions ", 1, true, default, (unit) => 
                {
                    result = CanSeeTarget(owner, unit);
                    if(result == true)
                    {
                        this.bubbleID = AddUnitPerceptionBubble(casterID, 300, unit, 1, default, default, false);
                        SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                    }
                });
            }
            if(availChamps >= 2)
            {
                ForNClosestUnitsInTargetArea(owner, owner.Position, 650, "AffectEnemies AffectHeroes ", 2, true, default, (unit) => 
                {
                    result = CanSeeTarget(owner, unit);
                    if(result == true)
                    {
                        this.bubbleID = AddUnitPerceptionBubble(casterID, 300, unit, 1, default, default, false);
                        SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                    }
                });
            }
            if(availChamps == 0)
            {
                ForNClosestUnitsInTargetArea(owner, owner.Position, 850, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 2, true, default, (unit) => 
                {
                    result = CanSeeTarget(owner, unit);
                    if(result == true)
                    {
                        this.bubbleID = AddUnitPerceptionBubble(casterID, 300, unit, 1, default, default, false);
                        SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                    }
                });
            }
            SpellBuffAdd((ObjAIBase)owner, owner, "SonaHymnofValorAura", 1, 1, 2.5f, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            PlayAnimation("Spell1", 1, owner, false, true, true);
        }
    }
}
namespace Spells
{
    public class SonaHymnofValorAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float attackDamage = 0;
            attackDamage = GetTotalAttackDamage(owner);
            ApplyDamage((ObjAIBase)owner, target, attackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class SonaHymnofValorAttackUpgrade : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? TotalDamage = null;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int levelDamage = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            float attackDamage = 0;
            levelDamage = GetLevel(owner);
            bonusDamage = Math(levelDamage, MathOp.MO_MULTIPLY, 9);
            totalDamage = Math(bonusDamage, MathOp.MO_ADD, 14);
            totalDamage = Math(totalDamage, MathOp.MO_MULTIPLY, 2);
            nextBuffVars.TotalDamage = totalDamage;
            attackDamage = GetTotalAttackDamage(owner);
            ApplyDamage((ObjAIBase)owner, target, attackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, "SonaHymnPCDeathRecapFix", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "IfHasBuffCheck", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffRemove(owner, "SonaPowerChord", (ObjAIBase)owner, 0);
        }
    }
}



namespace Spells
{
    public class SonaHymnofValorMissile : Script
    {
        public int[] effect0 = {50, 100, 150, 200, 250};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            BreakSpellShields(target);
            ApplyDamage((ObjAIBase)owner, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.7f, 1, false, false, (ObjAIBase)attacker);
        }
    }
}




namespace Spells
{
    public class SonaPowerChordMissile : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float dmg = 0;
            dmg = GetTotalAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, dmg, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class SonaSongPCDeathRecapFix : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int levelDamage = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            float attackDamage = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            levelDamage = GetLevel(owner);
            bonusDamage = Math(levelDamage, MathOp.MO_MULTIPLY, 9);
            totalDamage = Math(bonusDamage, MathOp.MO_ADD, 14);
            attackDamage = GetTotalAttackDamage(owner);
            ApplyDamage((ObjAIBase)owner, target, attackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "IfHasBuffCheck", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    BreakSpellShields(target);
                    nextBuffVars.MoveSpeedMod = -0.4f;
                    SpellBuffAdd((ObjAIBase)owner, target, "Slow", 1, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                }
            }
            ApplyDamage((ObjAIBase)owner, target, totalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, false, (ObjAIBase)attacker);
            SpellBuffRemove(owner, "SonaPowerChord", (ObjAIBase)owner, 0);
        }
    }
}
namespace Spells
{
    public class SonaSongofDiscord : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {0.08f, 0.1f, 0.12f, 0.14f, 0.16f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            float cooldownPerc = 0;
            float currentCD = 0;
            //object? unit = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "SonaSongofDiscord", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(GetBuffCountFromCaster(owner, owner, "SonaPowerChord") > 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "SonaSongofDiscordCheck", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            cooldownPerc = GetPercentCooldownMod(owner);
            cooldownPerc = Math(1, MathOp.MO_ADD, cooldownPerc);
            cooldownPerc = Math(2, MathOp.MO_MULTIPLY, cooldownPerc);
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 1, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1000, "AffectFriends AffectHeroes ", default, true, (unit) => 
            {
                SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 6, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            });
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1000, "AffectFriends AffectMinions ", default, true, (unit) => 
            {
                ApplyAssistMarker((ObjAIBase)attacker, unit, 10);
                SpellBuffAdd((ObjAIBase)owner, unit, "SonaSongofDiscordHaste", 1, 1, 1.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.HASTE, 0, true, false, false, default);
            });
            SpellBuffAdd((ObjAIBase)owner, owner, "SonaSongofDiscordAura", 1, 1, 2.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            PlayAnimation("Spell3", 1, owner, false, true, true);
        }
    }
}
namespace Spells
{
    public class SonaSongofDiscordAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float attackDamage = 0;
            attackDamage = GetTotalAttackDamage(owner);
            ApplyDamage((ObjAIBase)owner, target, attackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class SonaSongofDiscordAttackUpgrade : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? TotalDamage = null;
            public float MoveSpeedMod = 0;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int levelDamage = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            float attackDamage = 0;
            levelDamage = GetLevel(owner);
            bonusDamage = Math(levelDamage, MathOp.MO_MULTIPLY, 9);
            totalDamage = Math(bonusDamage, MathOp.MO_ADD, 14);
            nextBuffVars.TotalDamage = totalDamage;
            attackDamage = GetTotalAttackDamage(owner);
            ApplyDamage((ObjAIBase)owner, target, attackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "IfHasBuffCheck", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    BreakSpellShields(target);
                    nextBuffVars.MoveSpeedMod = -0.4f;
                    SpellBuffAdd((ObjAIBase)owner, target, "Slow", 1, 1, 2, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                }
            }
            SpellBuffAdd((ObjAIBase)attacker, target, "SonaSongPCDeathRecapFix", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffRemove(owner, "SonaPowerChord", (ObjAIBase)owner, 0);
        }
    }
}





namespace Spells
{
    public class SonaSongofDiscordMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {0.06f, 0.08f, 0.1f, 0.12f, 0.14f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            ApplyAssistMarker((ObjAIBase)attacker, target, 10);
            SpellBuffAdd((ObjAIBase)attacker, target, "SonaSongofDiscordHaste", 1, 1, 1.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.HASTE, 0, true, false, default, default);
        }
    }
}




namespace Spells
{
    public class SoulShackles : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int BreakDamage = 0;
            public float BreakStun = 0;
            public bool? Broken = null;
            public float MoveSpeedMod = 0;
            public int AttackSpeedMod = 0;
        }
        public int[] effect0 = {175, 250, 325};
        public float[] effect1 = {1.5f, 1.5f, 1.5f};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            SetReturnValue(default);
            ForEachUnitInTargetAreaRandom((ObjAIBase)owner, owner.Position, 600, "AffectEnemies AffectHeroes ", default, true, 1, (unit) => 
            {
                SetReturnValue(default);
            });
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "SoulShacklesOwner", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.BreakDamage = this.effect0[level];
            nextBuffVars.BreakStun = this.effect1[level];
            nextBuffVars.Broken = false;
            SpellBuffAdd((ObjAIBase)attacker, target, "SoulShackles", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            ApplyDamage((ObjAIBase)attacker, target, nextBuffVars.BreakDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.8f, 1, false, false, (ObjAIBase)attacker);
            nextBuffVars.MoveSpeedMod = -0.2f;
            nextBuffVars.AttackSpeedMod = 0;
            SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
        }
    }
}






namespace Spells
{
    public class SowTheWind : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int AttackSpeedMod = 0;
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {-0.24f, -0.3f, -0.36f, -0.42f, -0.48f};
        public int[] effect1 = {60, 115, 170, 225, 280};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? asdf = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            BreakSpellShields(target);
            nextBuffVars.AttackSpeedMod = 0;
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.8f, 1, false, false, (ObjAIBase)attacker);
            SpellEffectCreate(out asdf, out _, "SowTheWind_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, 4, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, default, default);
        }
    }
}



namespace Spells
{
    public class SpellFlux : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int ResistanceMod = 0;
        }
        public int[] effect0 = {-12, -15, -18, -21, -24};
        public int[] effect1 = {50, 70, 90, 110, 130};
        public float[] effect2 = {0.5f, 0.5f, 0.5f, 0.5f, 0.5f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            TargetExecute_nextBuffVars nextBuffVars = new();
            int damage = 0;
            float aoEDamage = 0;
            float ultDamage = 0;
            Particle? asdf = null;
            //object? _ = null;
            Particle? part = null;
            //object? unit = null;
            Particle? part2 = null;
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            teamID = GetTeamID(default);
            nextBuffVars.ResistanceMod = this.effect0[level];
            damage = this.effect1[level];
            aoEDamage = this.effect2[level];
            ultDamage = Math(damage, MathOp.MO_MULTIPLY, aoEDamage);
            SpellEffectCreate(out asdf, out _, "SpellFlux_tar2.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            if(target != owner)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 5, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SHRED, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, damage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.35f, 1, false, false, (ObjAIBase)attacker);
                if(GetBuffCountFromCaster(owner, owner, "DesperatePower") > 0)
                {
                    SpellEffectCreate(out part, out _, "DesperatePower_aoe.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                    ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                    {
                        if(target != unit)
                        {
                            SpellEffectCreate(out part2, out _, "ManaLeach_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                            ApplyDamage((ObjAIBase)attacker, unit, ultDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.175f, 1, false, false, (ObjAIBase)attacker);
                        }
                    });
                }
            }
        }
    }
}

namespace Spells
{
    public class SpellShield : Script
    {
        bool? willRemove = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            this.willRemove = false;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 3, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, default, default, default, default);
        }
    }
}



namespace Spells
{
    public class SpiralBlade : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 1000)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 950, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class SpiralBladeMissile : Script
    {
        public int[] effect0 = {70, 115, 160, 205, 250};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            object? percentOfAttack = null;
            float totalDamage = 0;
            float baseDamage = 0;
            float bonusDamage = 0;
            float aP = 0;
            float aPDamage = 0;
            float damageToDeal = 0;
            Particle? afa = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            percentOfAttack = charVars.PercentOfAttack;
            totalDamage = GetTotalAttackDamage(owner);
            baseDamage = GetBaseAttackDamage(owner);
            bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseDamage);
            bonusDamage = Math(1.1f, MathOp.MO_MULTIPLY, bonusDamage);
            aP = GetFlatMagicDamageMod(owner);
            aPDamage = Math(0.5f, MathOp.MO_MULTIPLY, aP);
            damageToDeal = Math(bonusDamage, MathOp.MO_ADD, aPDamage);
            ApplyDamage((ObjAIBase)attacker, target, damageToDeal + this.effect0[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, percentOfAttack, 0, 0, false, false, (ObjAIBase)attacker);
            charVars.PercentOfAttack = Math(charVars.PercentOfAttack, MathOp.MO_MULTIPLY, 0.8f);
            charVars.PercentOfAttack = Math(charVars.PercentOfAttack, MathOp.MO_MAX, 0.4f);
            SpellEffectCreate(out afa, out _, "SpiralBlade_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, default, default, true, false, false, false, false, default, default);
        }
    }
}
namespace Spells
{
    public class SpiritFire : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int InitialDamage = 0;
            public int Damage = 0;
            public object? TargetPos = null;
            public int ArmorReduction = 0;
        }
        public int[] effect0 = {55, 95, 135, 175, 215};
        public int[] effect1 = {55, 95, 135, 175, 215};
        public int[] effect2 = {-20, -25, -30, -35, -40};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.InitialDamage = this.effect0[level];
            nextBuffVars.Damage = this.effect1[level];
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.ArmorReduction = this.effect2[level];
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}




namespace Spells
{
    public class SprayAndPrayAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId twitchTeamId;
            float baseDamage = 0;
            int twitchSkinID = 0;
            Particle? a = null;
            //object? _ = null;
            twitchTeamId = GetTeamID(default);
            baseDamage = GetBaseAttackDamage(owner);
            twitchSkinID = GetSkinID(attacker);
            if(target is ObjAIBase)
            {
                if(twitchSkinID == 4)
                {
                    SpellEffectCreate(out a, out _, "twitch_gangster_sprayandPray_tar.troy", default, twitchTeamId, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                }
                else if(twitchSkinID == 5)
                {
                    SpellEffectCreate(out a, out _, "twitch_punk_sprayandPray_tar.troy", default, twitchTeamId, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                }
                else
                {
                    SpellEffectCreate(out a, out _, "twitch_sprayandPray_tar.troy", default, twitchTeamId, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                }
            }
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)owner);
        }
    }
}
namespace Spells
{
    public class Starcall : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DamageToDeal = 0;
            public int StarcallShred = 0;
        }
        public int[] effect0 = {60, 85, 110, 135, 160};
        public int[] effect1 = {-8, -9, -10, -11, -12};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? temp = null;
            temp = false;
            ForEachUnitInTargetAreaRandom((ObjAIBase)owner, owner.Position, 610, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, 1, (unit) => 
            {
                temp = true;
            });
            if(temp == true)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.DamageToDeal = this.effect0[level];
            nextBuffVars.StarcallShred = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "StarcallDamage", 1, 1, 0.4f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class StaticField : Script
    {
        public int[] effect0 = {250, 375, 500};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? _ = null;
            SpellBuffRemove(owner, "StaticField", (ObjAIBase)owner, default);
            SpellEffectCreate(out _, out _, "StaticField_nova.prt", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, default, default, default, default, default, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 1, 1, false, false, (ObjAIBase)attacker);
            ApplySilence(attacker, target, 0.5f);
        }
    }
}





namespace Spells
{
    public class SummonerBattleCry : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float ScaleCoef = 0;
            public int ScaleCap = 0;
            public float APMod = 0;
            public float AttackSpeedMod = 0;
        }
        public int[] effect0 = {10, 14, 18, 22, 26, 30, 34, 38, 42, 48, 52, 54, 58, 62, 66, 70, 74, 78};
        public float[] effect1 = {0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f};
        public int[] effect2 = {10, 14, 18, 22, 26, 30, 34, 38, 42, 48, 52, 54, 58, 62, 66, 70, 74, 78};
        public float[] effect3 = {0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f};
        public int[] effect4 = {12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12};
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            float aPMod = 0;
            float attackSpeedMod = 0;
            //object? spellSlot = null;
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            level = GetLevel(owner);
            aPMod = this.effect0[level];
            attackSpeedMod = this.effect1[level];
            if(avatarVars.OffensiveMastery == 1)
            {
                aPMod = Math(aPMod, MathOp.MO_MULTIPLY, 1.1f);
                attackSpeedMod = Math(attackSpeedMod, MathOp.MO_ADD, 0.05f);
            }
            attackSpeedMod = Math(attackSpeedMod, MathOp.MO_MULTIPLY, 100);
            SetSpellToolTipVar(attackSpeedMod, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            SetSpellToolTipVar(aPMod, 2, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            baseCooldown = 180;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetSpellToolTipVar(baseCooldown, 3, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            baseCooldown = 180;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? castParticle = null;
            //object? _ = null;
            nextBuffVars.ScaleCoef = 0.04f;
            nextBuffVars.ScaleCap = 0;
            SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            level = GetLevel(owner);
            nextBuffVars.APMod = this.effect2[level];
            nextBuffVars.AttackSpeedMod = this.effect3[level];
            if(avatarVars.OffensiveMastery == 1)
            {
                nextBuffVars.APMod = Math(nextBuffVars.APMod, MathOp.MO_MULTIPLY, 1.1f);
                nextBuffVars.AttackSpeedMod = Math(nextBuffVars.AttackSpeedMod, MathOp.MO_ADD, 0.05f);
            }
            SpellBuffAdd((ObjAIBase)attacker, attacker, "SummonerBattleCry", 1, 1, this.effect4[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.HASTE, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class SummonerBoost : Script
    {
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            //object? spellSlot = null;
            baseCooldown = 210;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetSpellToolTipVar(baseCooldown, 2, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            if(avatarVars.DefensiveMastery == 1)
            {
                SetSpellToolTipVar(4, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            }
            else
            {
                SetSpellToolTipVar(3, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            }
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            baseCooldown = 210;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? castParticle = null;
            //object? _ = null;
            Particle? boostParticle = null;
            //object? nextBuffVars = null;
            SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(out boostParticle, out _, "Summoner_Boost.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, true, false, false, false, false, default, default);
            SpellBuffRemoveType(owner, BuffType.BLIND);
            SpellBuffRemoveType(owner, BuffType.SILENCE);
            SpellBuffRemoveType(owner, BuffType.STUN);
            SpellBuffRemoveType(owner, BuffType.SILENCE);
            SpellBuffRemoveType(owner, BuffType.TAUNT);
            SpellBuffRemoveType(owner, BuffType.SLOW);
            SpellBuffRemoveType(owner, BuffType.SNARE);
            SpellBuffRemoveType(owner, BuffType.SLEEP);
            SpellBuffRemoveType(owner, BuffType.FEAR);
            SpellBuffRemoveType(owner, BuffType.CHARM);
            SpellBuffRemoveType(owner, BuffType.BLIND);
            SpellBuffClear(target, "SummonerExhaust");
            SpellBuffClear(target, "ExhaustSlow");
            SpellBuffClear(target, "ExhaustDebuff");
            SpellBuffClear(target, "SummonerDot");
            if(avatarVars.DefensiveMastery == 1)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 4, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
        }
    }
}

namespace Spells
{
    public class SummonerClairvoyance : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? ParticleID = null;
            public object? ParticleID2 = null;
            public Region? Bubble = null;
        }
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float baseCooldown = 0;
            //object? summonerCooldownBonus = null;
            float cooldownMultiplier = 0;
            //object? spellSlot = null;
            float duration = 0;
            baseCooldown = 70;
            if(summonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetSpellToolTipVar(baseCooldown, 2, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            duration = 4;
            if(avatarVars.UtilityMastery == 1)
            {
                duration = Math(2, MathOp.MO_ADD, duration);
            }
            SetSpellToolTipVar(duration, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? summonerCooldownBonus = null;
            float cooldownMultiplier = 0;
            float baseCooldown = 0;
            if(summonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(70, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? castParticle = null;
            //object? _ = null;
            TeamId teamID;
            Particle? particleID = null;
            Particle? particleID2 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            float duration = 0;
            targetPos = GetCastSpellTargetPos();
            SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            teamID = GetTeamID(default);
            SpellEffectCreate(out particleID, out particleID2, "ClairvoyanceEyeLong_green.troy", "ClairvoyanceEyeLong_red.troy", teamID, 0, 0, TeamId.TEAM_UNKNOWN, default, false, default, default, targetPos, target, default, default, false, false, false, false, false, default, default);
            nextBuffVars.ParticleID = particleID;
            nextBuffVars.ParticleID2 = particleID2;
            duration = 4;
            if(avatarVars.UtilityMastery == 1)
            {
                duration = Math(2, MathOp.MO_ADD, duration);
            }
            nextBuffVars.Bubble = AddPosPerceptionBubble(teamID, 1400, targetPos, duration, default, false);
            SpellBuffAdd((ObjAIBase)attacker, owner, default, 1, 1, duration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class SummonerDot : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? Level = null;
        }
        public int[] effect0 = {70, 90, 110, 130, 150, 170, 190, 210, 230, 250, 270, 290, 310, 330, 350, 370, 390, 410};
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            int igniteDamage = 0;
            //object? spellSlot = null;
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            level = GetLevel(owner);
            igniteDamage = this.effect0[level];
            SetSpellToolTipVar(igniteDamage, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            baseCooldown = 180;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetSpellToolTipVar(baseCooldown, 2, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float cooldownMultiplier = 0;
            float baseCooldown = 0;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(180, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? castParticle = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            level = GetLevel(owner);
            nextBuffVars.Level = level;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)target, target, "Internal_50MS", 1, 1, 5, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "GrievousWound", 1, 1, 5, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class SummonerExhaust : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public int ArmorMod = 0;
        }
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            //object? spellSlot = null;
            baseCooldown = 210;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetSpellToolTipVar(baseCooldown, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float cooldownMultiplier = 0;
            float baseCooldown = 0;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(210, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? castParticle = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            nextBuffVars.MoveSpeedMod = -0.4f;
            SpellBuffAdd((ObjAIBase)attacker, target, "ExhaustSlow", 1, 1, 2.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "SummonerExhaust", 1, 1, 2.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            if(avatarVars.OffensiveMastery == 1)
            {
                nextBuffVars.ArmorMod = -10;
                SpellBuffAdd((ObjAIBase)attacker, target, "ExhaustDebuff", 1, 1, 2.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, true, default);
            }
        }
    }
}
namespace Spells
{
    public class SummonerFlash : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? CastPos = null;
        }
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            //object? spellSlot = null;
            if(avatarVars.UtilityMastery == 1)
            {
                baseCooldown = 250;
            }
            else
            {
                baseCooldown = 265;
            }
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetSpellToolTipVar(baseCooldown, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            if(avatarVars.UtilityMastery == 1)
            {
                baseCooldown = 250;
            }
            else
            {
                baseCooldown = 265;
            }
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 castPos;
            Vector3 ownerPos;
            float distance = 0;
            Particle? p3 = null;
            //object? _ = null;
            Particle? ar = null;
            Particle? ar1 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            castPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, castPos);
            FaceDirection(owner, castPos);
            if(distance > 400)
            {
                castPos = GetPointByUnitFacingOffset(owner, 400, 0);
            }
            StopChanneling((ObjAIBase)target, ChannelingStopCondition.Cancel, ChannelingStopSource.Move);
            SpellEffectCreate(out p3, out _, "summoner_flashback.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, castPos, target, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(out ar, out _, "summoner_cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, owner.Position, target, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(out ar1, out _, "summoner_flash.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            if(GetBuffCountFromCaster(owner, owner, "FlashBeenHit") > 0)
            {
                nextBuffVars.CastPos = castPos;
                SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            else
            {
                TeleportToPosition(owner, castPos);
            }
        }
    }
}
namespace Spells
{
    public class SummonerFortify : Script
    {
        class TargetExecute_nextBuffVars
        {
            public bool? Splash = null;
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float cooldownMultiplier = 0;
            float baseCooldown = 0;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(300, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? ar = null;
            //object? _ = null;
            SpellEffectCreate(out ar, out _, "summoner_cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
            if(GetBuffCountFromCaster(owner, owner, "FortifyBuff") > 0)
            {
                SpellBuffRemove(owner, "FortifyBuff", (ObjAIBase)owner, default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(avatarVars.FortifySplashDamage == 1)
            {
                nextBuffVars.Splash = true;
            }
            else
            {
                nextBuffVars.Splash = false;
            }
            if(target is BaseTurret)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INVULNERABILITY, 0, true, default, default, default);
            }
        }
    }
}
namespace Spells
{
    public class SummonerHaste : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float moveSpeedMod = 0;
            //object? spellSlot = null;
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            if(avatarVars.OffensiveMastery == 1)
            {
                moveSpeedMod = 0.35f;
            }
            else
            {
                moveSpeedMod = 0.27f;
            }
            moveSpeedMod = Math(moveSpeedMod, MathOp.MO_MULTIPLY, 100);
            SetSpellToolTipVar(moveSpeedMod, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            baseCooldown = 210;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetSpellToolTipVar(baseCooldown, 2, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float cooldownMultiplier = 0;
            float baseCooldown = 0;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(210, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? ar = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            SpellEffectCreate(out ar, out _, "summoner_cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            nextBuffVars.MoveSpeedMod = 0.27f;
            if(avatarVars.OffensiveMastery == 1)
            {
                nextBuffVars.MoveSpeedMod = 0.35f;
            }
            SpellBuffAdd((ObjAIBase)owner, target, default, 1, 1, 10, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.HASTE, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class SummonerHeal : Script
    {
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int ownerLevel = 0;
            float bonusHeal = 0;
            float totalHeal = 0;
            float secondaryHeal = 0;
            //object? spellSlot = null;
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            ownerLevel = GetLevel(owner);
            bonusHeal = Math(ownerLevel, MathOp.MO_MULTIPLY, 25);
            totalHeal = Math(bonusHeal, MathOp.MO_ADD, 140);
            if(avatarVars.DefensiveMastery == 1)
            {
                totalHeal = Math(totalHeal, MathOp.MO_MULTIPLY, 1.1f);
            }
            secondaryHeal = Math(totalHeal, MathOp.MO_MULTIPLY, 0.5f);
            SetSpellToolTipVar(totalHeal, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            SetSpellToolTipVar(secondaryHeal, 2, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            baseCooldown = 270;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetSpellToolTipVar(baseCooldown, 3, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float cooldownMultiplier = 0;
            float baseCooldown = 0;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(270, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? ar = null;
            //object? _ = null;
            SpellEffectCreate(out ar, out _, "summoner_cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int ownerLevel = 0;
            float bonusHeal = 0;
            float totalHeal = 0;
            float secondaryHeal = 0;
            //object? nextBuffVars = null;
            ownerLevel = GetLevel(owner);
            bonusHeal = Math(ownerLevel, MathOp.MO_MULTIPLY, 25);
            totalHeal = Math(bonusHeal, MathOp.MO_ADD, 140);
            if(avatarVars.DefensiveMastery == 1)
            {
                totalHeal = Math(totalHeal, MathOp.MO_MULTIPLY, 1.1f);
            }
            secondaryHeal = Math(totalHeal, MathOp.MO_MULTIPLY, 0.5f);
            if(GetBuffCountFromCaster(target, target, "SummonerHealCheck") > 0)
            {
                if(target == owner)
                {
                    IncHealth(target, totalHeal, owner);
                }
                else
                {
                    secondaryHeal = Math(secondaryHeal, MathOp.MO_MULTIPLY, 0.5f);
                    IncHealth(target, secondaryHeal, owner);
                    ApplyAssistMarker((ObjAIBase)attacker, target, 10);
                }
            }
            else
            {
                if(target == owner)
                {
                    IncHealth(target, totalHeal, owner);
                }
                else
                {
                    IncHealth(target, secondaryHeal, owner);
                    ApplyAssistMarker((ObjAIBase)attacker, target, 10);
                }
            }
            if(GetBuffCountFromCaster(target, target, "SummonerHealCheck") == 0)
            {
                SpellBuffAdd((ObjAIBase)target, target, "SummonerHealCheck", 1, 1, 25, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            }
        }
    }
}

namespace Spells
{
    public class SummonerMana : Script
    {
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int ownerLevel = 0;
            float bonusMana = 0;
            float totalMana = 0;
            float secondaryMana = 0;
            //object? spellSlot = null;
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            ownerLevel = GetLevel(owner);
            bonusMana = Math(ownerLevel, MathOp.MO_MULTIPLY, 30);
            totalMana = Math(bonusMana, MathOp.MO_ADD, 160);
            if(avatarVars.UtilityMastery == 1)
            {
                totalMana = Math(totalMana, MathOp.MO_MULTIPLY, 1.2f);
            }
            secondaryMana = Math(totalMana, MathOp.MO_MULTIPLY, 0.5f);
            SetSpellToolTipVar(totalMana, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            SetSpellToolTipVar(secondaryMana, 2, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            baseCooldown = 180;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetSpellToolTipVar(baseCooldown, 3, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float cooldownMultiplier = 0;
            float baseCooldown = 0;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(180, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? castParticle = null;
            //object? _ = null;
            int ownerLevel = 0;
            float bonusMana = 0;
            float totalMana = 0;
            float secondaryMana = 0;
            //object? unit = null;
            SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            ownerLevel = GetLevel(owner);
            bonusMana = Math(ownerLevel, MathOp.MO_MULTIPLY, 30);
            totalMana = Math(bonusMana, MathOp.MO_ADD, 160);
            if(avatarVars.UtilityMastery == 1)
            {
                totalMana = Math(totalMana, MathOp.MO_MULTIPLY, 1.2f);
            }
            secondaryMana = Math(totalMana, MathOp.MO_MULTIPLY, 0.5f);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 600, "AffectFriends AffectHeroes ", default, true, (unit) => 
            {
                SpellEffectCreate(out castParticle, out _, "Summoner_Mana.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, false, false, false, false, false, default, default);
                if(unit == owner)
                {
                    IncPAR(unit, totalMana);
                }
                else
                {
                    IncPAR(unit, secondaryMana);
                }
            });
        }
    }
}
namespace Spells
{
    public class SummonerOdinGarrison : Script
    {
        class SelfExecute_nextBuffVars
        {
            public bool? Splash = null;
        }
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            if(ExecutePeriodically(0.25f, ref avatarVars.LastTimeExecutedGarrison, true))
            {
                avatarVars.CanCastGarrison = false;
                ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1250, "AffectEnemies AffectFriends AffectMinions NotAffectSelf AffectUseable AffectWards ", "OdinGuardianBuff", true, (unit) => 
                {
                    avatarVars.CanCastGarrison = true;
                });
            }
            SetReturnValue(avatarVars.CanCastGarrison);
        }
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            //object? spellSlot = null;
            baseCooldown = 210;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetSpellToolTipVar(baseCooldown, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float cooldownMultiplier = 0;
            float baseCooldown = 0;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(210, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? ar = null;
            //object? _ = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            TeamId teamOfOwner;
            TeamId teamOfTarget;
            //object? unit = null;
            string? slotName = null;
            SpellEffectCreate(out ar, out _, "summoner_cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            ForNClosestUnitsInTargetArea(owner, owner.Position, 1800, "AffectEnemies AffectFriends AffectMinions AffectTurrets AffectUseable AffectWards ", 1, true, "OdinGuardianBuff", (unit) => 
            {
                if(avatarVars.DefensiveMastery == 1)
                {
                    nextBuffVars.Splash = true;
                }
                else
                {
                    nextBuffVars.Splash = false;
                }
                teamOfOwner = GetTeamID(default);
                teamOfTarget = GetTeamID(default);
                if(GetBuffCountFromCaster(unit, unit, "OdinGuardianBuff") > 0)
                {
                    if(teamOfOwner == teamOfTarget)
                    {
                        SpellBuffAdd((ObjAIBase)owner, unit, default, 1, 1, 8, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INVULNERABILITY, 0, true, false, false, default);
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)owner, unit, "SummonerOdinGarrisonDebuff", 1, 1, 8, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INVULNERABILITY, 0, true, false, false, default);
                    }
                }
                else
                {
                    slotName = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots);
                    if(slotName == "SummonerOdinGarrison")
                    {
                        SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots, 1);
                    }
                    else
                    {
                        SetSlotSpellCooldownTime((ObjAIBase)owner, 1, SpellbookType.SPELLBOOK_SUMMONER, SpellSlotType.SpellSlots, 1);
                    }
                }
            });
        }
    }
}

namespace Spells
{
    public class SummonerPromoteSR : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? BonusHealth = null;
            public object? BonusArmor = null;
            public object? TotalMR = null;
        }
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            //object? unit = null;
            if(GetBuffCountFromCaster(owner, owner, "OdinPlayerBuff") > 0)
            {
                if(ExecutePeriodically(0.25f, ref avatarVars.LastTimeExecutedPromote, true))
                {
                    avatarVars.CanCastPromote = false;
                    ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1000, "AffectFriends AffectMinions NotAffectSelf ", "OdinSuperMinion", true, (unit) => 
                    {
                        if(GetBuffCountFromCaster(unit, default, "SummonerOdinPromote") == 0)
                        {
                            if(GetBuffCountFromCaster(unit, default, "OdinSuperMinion") > 0)
                            {
                                avatarVars.CanCastPromote = true;
                            }
                        }
                    });
                }
            }
            SetReturnValue(avatarVars.CanCastPromote);
            else
            {
                if(ExecutePeriodically(0.25f, ref avatarVars.LastTimeExecutedPromote, true))
                {
                    avatarVars.CanCastPromote = false;
                    ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 1000, "AffectFriends AffectMinions NotAffectSelf ", "PromoteMeBuff", true, (unit) => 
                    {
                        if(GetBuffCountFromCaster(unit, default, "SummonerPromoteSR") == 0)
                        {
                            if(GetBuffCountFromCaster(unit, default, "PromoteMeBuff") > 0)
                            {
                                avatarVars.CanCastPromote = true;
                            }
                        }
                    });
                }
            }
            SetReturnValue(avatarVars.CanCastPromote);
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            baseCooldown = 180;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            if(avatarVars.PromoteCooldownBonus != 0)
            {
                baseCooldown = Math(baseCooldown, MathOp.MO_SUBTRACT, avatarVars.PromoteCooldownBonus);
            }
            SetReturnValue(baseCooldown);
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int ownerLevel = 0;
            float bonusHealth = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            float count = 0;
            string? skinName = null;
            Particle? castParticle = null;
            //object? _ = null;
            float bonusArmor = 0;
            float totalMR = 0;
            if(GetBuffCountFromCaster(owner, owner, "OdinPlayerBuff") > 0)
            {
                ownerLevel = GetLevel(owner);
                bonusHealth = Math(ownerLevel, MathOp.MO_MULTIPLY, 75);
                bonusHealth = Math(bonusHealth, MathOp.MO_ADD, 200);
                nextBuffVars.BonusHealth = bonusHealth;
                ForNClosestUnitsInTargetArea(owner, owner.Position, 1000, "AffectFriends AffectMinions NotAffectSelf ", 1, true, "OdinSuperMinion", (unit) => 
                {
                    if(GetBuffCountFromCaster(unit, default, "SummonerOdinPromote") > 0)
                    {
                        ForNClosestUnitsInTargetArea(owner, owner.Position, 1000, "AffectFriends AffectMinions NotAffectSelf ", 2, true, "OdinSuperMinion", (unit) => 
                        {
                            if(GetBuffCountFromCaster(unit, default, "SummonerOdinPromote") > 0)
                            {
                                count = Math(count, MathOp.MO_ADD, 1);
                                if(count >= 2)
                                {
                                    ForNClosestUnitsInTargetArea(owner, owner.Position, 1000, "AffectFriends AffectMinions NotAffectSelf ", 3, true, "OdinSuperMinion", (unit) => 
                                    {
                                        if(GetBuffCountFromCaster(unit, default, "SummonerOdinPromote") > 0)
                                        {
                                            count = Math(count, MathOp.MO_MAX, 0);
                                            count = Math(count, MathOp.MO_ADD, 1);
                                            if(count >= 3)
                                            {
                                                ForNClosestUnitsInTargetArea(owner, owner.Position, 1000, "AffectFriends AffectMinions NotAffectSelf ", 4, true, "OdinSuperMinion", (unit) => 
                                                {
                                                    if(GetBuffCountFromCaster(unit, default, "SummonerOdinPromote") == 0)
                                                    {
                                                        skinName = GetUnitSkinName(unit);
                                                        if(skinName == "OdinBlueSuperminion")
                                                        {
                                                            SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, unit, default, default, false, false, false, false, false, default, default);
                                                            SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, 3600, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                                                            IncHealth(unit, 10000, unit);
                                                        }
                                                        else if(skinName == "OdinRedSuperminion")
                                                        {
                                                            SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, unit, default, default, false, false, false, false, false, default, default);
                                                            SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, 3600, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                                                            IncHealth(unit, 10000, unit);
                                                        }
                                                    }
                                                });
                                            }
                                        }
                                        if(GetBuffCountFromCaster(unit, default, "SummonerOdinPromote") == 0)
                                        {
                                            skinName = GetUnitSkinName(unit);
                                            if(skinName == "OdinBlueSuperminion")
                                            {
                                                SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, unit, default, default, false, false, false, false, false, default, default);
                                                SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, 3600, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                                                IncHealth(unit, 10000, unit);
                                            }
                                            else if(skinName == "OdinRedSuperminion")
                                            {
                                                SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, unit, default, default, false, false, false, false, false, default, default);
                                                SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, 3600, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                                                IncHealth(unit, 10000, unit);
                                            }
                                        }
                                    });
                                }
                            }
                            if(GetBuffCountFromCaster(unit, default, "SummonerOdinPromote") == 0)
                            {
                                skinName = GetUnitSkinName(unit);
                                if(skinName == "OdinBlueSuperminion")
                                {
                                    SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, unit, default, default, false, false, false, false, false, default, default);
                                    SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, 3600, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                                    IncHealth(unit, 10000, unit);
                                }
                                else if(skinName == "OdinRedSuperminion")
                                {
                                    SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, unit, default, default, false, false, false, false, false, default, default);
                                    SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, 3600, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                                    IncHealth(unit, 10000, unit);
                                }
                            }
                        });
                    }
                    if(GetBuffCountFromCaster(unit, default, "SummonerOdinPromote") == 0)
                    {
                        skinName = GetUnitSkinName(unit);
                        if(skinName == "OdinBlueSuperminion")
                        {
                            SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, unit, default, default, false, false, false, false, false, default, default);
                            SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, 3600, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                            IncHealth(unit, 10000, unit);
                        }
                        else if(skinName == "OdinRedSuperminion")
                        {
                            SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, unit, default, default, false, false, false, false, false, default, default);
                            SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, 3600, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                            IncHealth(unit, 10000, unit);
                        }
                    }
                });
            }
            else
            {
                ownerLevel = GetLevel(owner);
                bonusHealth = Math(ownerLevel, MathOp.MO_MULTIPLY, 100);
                bonusHealth = Math(bonusHealth, MathOp.MO_ADD, 100);
                nextBuffVars.BonusHealth = bonusHealth;
                bonusArmor = Math(5, MathOp.MO_MULTIPLY, ownerLevel);
                bonusArmor = Math(bonusArmor, MathOp.MO_ADD, 20);
                nextBuffVars.BonusArmor = bonusArmor;
                totalMR = Math(0.75f, MathOp.MO_MULTIPLY, ownerLevel);
                totalMR = Math(totalMR, MathOp.MO_ADD, 10);
                nextBuffVars.TotalMR = totalMR;
                ForNClosestUnitsInTargetArea(attacker, attacker.Position, 1000, "AffectFriends AffectMinions AlwaysSelf ", 1, true, "PromoteMeBuff", (unit) => 
                {
                    SpellBuffAdd((ObjAIBase)attacker, unit, "SummonerPromoteSR", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    SpellBuffRemove(unit, "PromoteBuff", (ObjAIBase)owner, 0);
                });
            }
        }
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            //object? spellSlot = null;
            baseCooldown = 180;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetSpellToolTipVar(baseCooldown, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
        }
    }
}
namespace Spells
{
    public class SummonerRally : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float FinalHPRegen = 0;
            public object? BonusHealth = null;
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float cooldownMultiplier = 0;
            float baseCooldown = 0;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(270, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? castParticle = null;
            //object? _ = null;
            Vector3 minionPos;
            Particle? ba = null;
            TeamId ownerID;
            float duration = 0;
            Minion? other3 = null;
            int ownerLevel = 0;
            float bonusHealth = 0;
            float bonusRegen = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, false, default, default, default);
            minionPos = GetPointByUnitFacingOffset(owner, 200, 0);
            SpellEffectCreate(out ba, out _, "summoner_flash.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, minionPos, target, default, default, false, default, default, false, default, default, default);
            ownerID = GetTeamID(default);
            duration = 15;
            if(avatarVars.RallyDurationBonus == 5)
            {
                duration = Math(avatarVars.RallyDurationBonus, MathOp.MO_ADD, duration);
            }
            else if(avatarVars.RallyDurationBonus == 10)
            {
                duration = Math(avatarVars.RallyDurationBonus, MathOp.MO_ADD, duration);
            }
            other3 = SpawnMinion("Beacon", "SummonerBeacon", "idle.lua", minionPos, ownerID, true, true, false, false, true, false, 0, true, false, default, default);
            ownerLevel = GetLevel(owner);
            bonusHealth = Math(ownerLevel, MathOp.MO_MULTIPLY, 25);
            bonusRegen = Math(ownerLevel, MathOp.MO_MULTIPLY, 1.5f);
            nextBuffVars.FinalHPRegen = Math(bonusRegen, MathOp.MO_ADD, 15);
            nextBuffVars.BonusHealth = bonusHealth;
            if(avatarVars.RallyAPMod == 70)
            {
                SpellBuffAdd((ObjAIBase)owner, other3, "BeaconAuraAP", 1, 1, duration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, other3, "BeaconAura", 1, 1, duration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class SummonerRevive : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public int HealthMod = 0;
        }
        public int[] effect0 = {220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560};
        public int[] effect1 = {220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            if(owner.IsDead)
            {
                SetReturnValue(default);
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            int healthMod = 0;
            //object? spellSlot = null;
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            level = GetLevel(owner);
            healthMod = this.effect0[level];
            SetSpellToolTipVar(healthMod, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            baseCooldown = 540;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetSpellToolTipVar(baseCooldown, 2, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float cooldownMultiplier = 0;
            float baseCooldown = 0;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(540, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? ar = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            SpellEffectCreate(out ar, out _, "summoner_cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, owner.Position, target, default, default, false, false, false, false, false, default, default);
            ReincarnateHero(owner);
            if(avatarVars.DefensiveMastery == 1)
            {
                nextBuffVars.MoveSpeedMod = 1.25f;
                SpellBuffAdd((ObjAIBase)owner, target, "SummonerReviveSpeedBoost", 1, 1, 12, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.HASTE, 0, true, false, false, default);
            }
            level = GetLevel(owner);
            nextBuffVars.HealthMod = this.effect1[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "ReviveMarker", 1, 1, 120, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class SummonerSmite : Script
    {
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int ownerLevel = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            //object? spellSlot = null;
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            ownerLevel = GetLevel(owner);
            bonusDamage = Math(ownerLevel, MathOp.MO_MULTIPLY, 25);
            totalDamage = Math(bonusDamage, MathOp.MO_ADD, 420);
            SetSpellToolTipVar(totalDamage, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            baseCooldown = 70;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetSpellToolTipVar(baseCooldown, 2, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float cooldownMultiplier = 0;
            float baseCooldown = 0;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(70, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? castParticle = null;
            //object? _ = null;
            int ownerLevel = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            SpellEffectCreate(out castParticle, out _, "Summoner_Cast.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, false, false, false, false, default, default);
            ownerLevel = GetLevel(owner);
            bonusDamage = Math(ownerLevel, MathOp.MO_MULTIPLY, 25);
            totalDamage = Math(bonusDamage, MathOp.MO_ADD, 420);
            ApplyDamage((ObjAIBase)attacker, target, totalDamage, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 1, false, false, (ObjAIBase)attacker);
            if(avatarVars.DefensiveMastery == 1)
            {
                IncGold(owner, 10);
            }
        }
    }
}
namespace Spells
{
    public class SummonerTeleport : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? CastPosition = null;
            public object? BuffDuration = null;
        }
        public void UpdateTooltip(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float duration = 0;
            //object? spellSlot = null;
            float baseCooldown = 0;
            float cooldownMultiplier = 0;
            duration = 4;
            if(avatarVars.UtilityMastery == 1)
            {
                duration = 3.5f;
            }
            SetSpellToolTipVar(duration, 1, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
            baseCooldown = 300;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(baseCooldown, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetSpellToolTipVar(baseCooldown, 2, spellSlot, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_SUMMONER, (Champion)attacker);
        }
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            float cooldownMultiplier = 0;
            float baseCooldown = 0;
            if(avatarVars.SummonerCooldownBonus != 0)
            {
                cooldownMultiplier = Math(1, MathOp.MO_SUBTRACT, avatarVars.SummonerCooldownBonus);
                baseCooldown = Math(300, MathOp.MO_MULTIPLY, cooldownMultiplier);
            }
            SetReturnValue(baseCooldown);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Vector3 castPosition;
            TargetExecute_nextBuffVars nextBuffVars = new();
            float duration = 0;
            charVars.TeleportCancelled = false;
            if(GetBuffCountFromCaster(owner, owner, "SummonerTeleport") > 0)
            {
                SpellBuffRemove(owner, "SummonerTeleport", (ObjAIBase)owner, 0);
            }
            else
            {
                castPosition = GetRandomPointInAreaUnit(target, 100, 50);
                nextBuffVars.CastPosition = castPosition;
                if(avatarVars.UtilityMastery == 1)
                {
                    duration = 3.5f;
                }
                else
                {
                    duration = 4;
                }
                nextBuffVars.BuffDuration = duration;
                SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, duration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
                if(target is ObjAIBase)
                {
                    if(target is BaseTurret)
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, "Teleport_Turret", 1, 1, nextBuffVars.BuffDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.STUN, 0, true, false, false, default);
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, "Teleport_Target", 1, 1, 0.1f + nextBuffVars.BuffDuration, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.STUN, 0, true, false, false, default);
                    }
                }
                SpellBuffAdd((ObjAIBase)target, owner, "Teleport_DeathRemoval", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                if(GetBuffCountFromCaster(target, default, "SharedWardBuff") > 0)
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "Destealth", 1, 1, 1 + nextBuffVars.BuffDuration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class SummonerTestForceSpell : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? unit = null;
            ForNClosestUnitsInTargetArea(owner, owner.Position, 3000, "AffectEnemies AffectNeutral AffectHeroes ", 1, true, default, (unit) => 
            {
                level = GetSlotSpellLevel(unit, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                if(level == 0)
                {
                    IncSpellLevel(unit, 0, SpellSlotType.SpellSlots);
                }
                SpellCast(unit, owner, default, default, false, 0, SpellSlotType.SpellSlots, 0, true, true, false, false, false, default);
            });
        }
    }
}




namespace Spells
{
    public class SwainBeam : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public int AttackSpeedMod = 0;
            public int DamagePerHalfSecond = 0;
        }
        public float[] effect0 = {-0.2f, -0.23f, -0.26f, -0.29f, -0.32f};
        public int[] effect1 = {25, 40, 55, 70, 85};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Vector3 ravenPosition;
            TeamId teamID;
            Minion? other3 = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            ravenPosition = GetPointByUnitFacingOffset(owner, 100, 0);
            teamID = GetTeamID(default);
            other3 = SpawnMinion("HiddenMinion", "SwainBeam", "idle.lua", ravenPosition, teamID, false, true, false, true, true, true, 0, default, false, (Champion)owner, default);
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            nextBuffVars.AttackSpeedMod = 0;
            nextBuffVars.DamagePerHalfSecond = this.effect1[level];
            if(target is Champion)
            {
                SpellBuffAdd((ObjAIBase)owner, target, "SwainBeamDamage", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, false, default, default);
                SpellBuffAdd((ObjAIBase)owner, owner, "SwainBeamSelf", 1, 1, 3.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, default, default);
                SpellBuffAdd((ObjAIBase)target, other3, default, 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "SwainBeamSelf", 1, 1, 3.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
                if(GetBuffCountFromCaster(target, default, "ResistantSkin") > 0)
                {
                    SpellBuffAdd((ObjAIBase)target, owner, "SwainBeamDamageMinionNashor", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
                }
                else
                {
                    SpellBuffAdd((ObjAIBase)owner, target, "SwainBeamDamageMinion", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
                    SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, 3, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, default, default);
                }
                SpellBuffAdd((ObjAIBase)target, other3, "SwainBeamMinion", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, default, default);
            }
        }
    }
}








namespace Spells
{
    public class SwainMetaHeal : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? ar = null;
            //object? _ = null;
            SpellEffectCreate(out ar, out _, "swain_heal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, target, default, default, false, default, default, false, false, default, default);
        }
    }
}
namespace Spells
{
    public class SwainMetaHealTorment : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? ar = null;
            //object? _ = null;
            SpellEffectCreate(out ar, out _, "swain_heal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, target, default, default, false, default, default, false, false, default, default);
        }
    }
}
namespace Spells
{
    public class SwainMetaNuke : Script
    {
        class TargetExecute_nextBuffVars
        {
            public bool? DrainedBool = null;
            public float DrainPercent = 0;
        }
        public int[] effect0 = {50, 70, 90};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? ar = null;
            //object? _ = null;
            bool? isTargetable = null;
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.DrainedBool = false;
            SpellEffectCreate(out ar, out _, "swain_heal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, target, default, default, false, default, default, false, false, default, default);
            targetPos = GetCastSpellTargetPos();
            SpellCast((ObjAIBase)attacker, owner, attacker.Position, owner.Position, true, 2, SpellSlotType.ExtraSlots, level, true, true, false, false, false, targetPos);
            isTargetable = GetTargetable(attacker);
            if(target is Champion)
            {
                nextBuffVars.DrainPercent = 0.75f;
            }
            else
            {
                nextBuffVars.DrainPercent = 0.25f;
            }
            if(isTargetable != true)
            {
                SpellEffectCreate(out ar, out _, "swain_heal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, target, default, default, false, default, default, false, false, default, default);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, "GlobalDrain", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.2f, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class SwainMetamorphism : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int ManaCostInc = 0;
            public int ManaCost = 0;
        }
        public int[] effect0 = {5, 7, 9};
        public int[] effect1 = {30, 32, 34};
        public int[] effect2 = {0, 0, 0};
        public void AdjustCooldown(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            if(GetBuffCountFromCaster(owner, owner, "SwainMetamorphism") > 0)
            {
                
            }
            else
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "SwainMetamorphism") > 0)
            {
                SpellBuffRemove(owner, "SwainMetamorphism", (ObjAIBase)owner, 0);
            }
            else
            {
                nextBuffVars.ManaCostInc = this.effect0[level];
                nextBuffVars.ManaCost = this.effect1[level];
                SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 25000 + this.effect2[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class SwainShadowGrasp : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int RootDuration = 0;
            public int GraspDamage = 0;
        }
        public int[] effect0 = {2, 2, 2, 2, 2};
        public int[] effect1 = {80, 120, 160, 200, 240};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Minion? other3 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            teamOfOwner = GetTeamID(default);
            other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", targetPos, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, (Champion)owner, default);
            nextBuffVars.RootDuration = this.effect0[level];
            nextBuffVars.GraspDamage = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 0.75f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class SwainTorment : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float DoTDamage = 0;
            public float SwainMultiplier = 0;
        }
        public float[] effect0 = {18.75f, 28.75f, 38.75f, 48.75f, 58.75f};
        public float[] effect1 = {1.08f, 1.11f, 1.14f, 1.17f, 1.2f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.DoTDamage = this.effect0[level];
            nextBuffVars.SwainMultiplier = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, false, default, default);
        }
    }
}


namespace Spells
{
    public class SweepingBlow : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 0.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, default, default);
            ApplyDamage((ObjAIBase)attacker, target, 200, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 1, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class Swipe : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? hitEffect = null;
            //object? _ = null;
            if(IsInFront(owner, target))
            {
                SpellEffectCreate(out hitEffect, out _, "nidalee_cougar_swipe_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, false, false, false, false, default, default);
                ApplyDamage((ObjAIBase)attacker, target, charVars.SwipeDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
            }
        }
    }
}


namespace Spells
{
    public class Takedown : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
        }
        public int[] effect0 = {5, 5, 5, 5, 5};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpellCooldown = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 10, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0);
        }
    }
}

namespace Spells
{
    public class TalonCutthroat : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float AmpValue = 0;
        }
        public int[] effect0 = {80, 120, 160, 200, 240};
        public int[] effect1 = {1, 1, 1, 1, 1};
        public int[] effect2 = {8, 12, 16, 20, 24};
        public float[] effect3 = {1, 1.5f, 2, 2.5f, 3};
        public float[] effect4 = {1.03f, 1.06f, 1.09f, 1.12f, 1.15f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId ownerTeam;
            Vector3 castPos;
            Particle? p3 = null;
            //object? _ = null;
            ownerTeam = GetTeamID(default);
            castPos = GetUnitPosition(owner);
            SpellEffectCreate(out p3, out _, "talon_E_cast.troy", default, ownerTeam, 1, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, castPos, target, default, default, true, false, false, false, false, default, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float distance = 0;
            float finalDistance = 0;
            float damageVar = 0;
            int silenceDur = 0;
            float kIDamage = 0;
            Particle? pH = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            FaceDirection(owner, target.Position);
            distance = DistanceBetweenObjects("Owner", "Target");
            finalDistance = Math(distance, MathOp.MO_ADD, 175);
            targetPos = GetPointByUnitFacingOffset(owner, finalDistance, 0);
            TeleportToPosition(owner, targetPos);
            damageVar = this.effect0[level];
            silenceDur = this.effect1[level];
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            kIDamage = this.effect2[level];
            damageVar = Math(damageVar, MathOp.MO_ADD, kIDamage);
            kIDamage = this.effect3[level];
            if(target.Team != owner.Team)
            {
                SpellEffectCreate(out pH, out _, "talon_E_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, targetPos, target, default, default, true, false, false, false, false, default, default);
                ApplySilence(attacker, target, silenceDur);
                nextBuffVars.AmpValue = this.effect4[level];
                SpellBuffAdd((ObjAIBase)attacker, target, "TalonDamageAmp", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
                if(target is Champion)
                {
                    IssueOrder(owner, OrderType.AttackTo, default, target);
                }
            }
        }
    }
}



namespace Spells
{
    public class TalonNoxianDiplomacy : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "TalonNoxianDiplomacyBuff", 1, 1, 5, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, false, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "TalonNoxianDiplomacy", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SealSpellSlot(0, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, SpellbookType.SPELLBOOK_CHAMPION);
            SetSlotSpellCooldownTimeVer2(0, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            CancelAutoAttack(owner, true);
        }
    }
}
namespace Spells
{
    public class TalonNoxianDiplomacyAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}

namespace Spells
{
    public class TalonRake : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            Vector3 pos;
            SpellBuffAdd((ObjAIBase)owner, owner, "TalonRakeMissileOne", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            pos = GetPointByUnitFacingOffset(owner, 750, 0);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 750, 20);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 750, -20);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}

namespace Spells
{
    public class TalonRakeMissileOne : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public float MovementSpeedMod = 0;
        }
        public int[] effect0 = {30, 55, 80, 105, 130};
        public float[] effect1 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public float[] effect2 = {-0.15f, -0.2f, -0.25f, -0.3f, -0.35f};
        public int[] effect3 = {30, 55, 80, 105, 130};
        public float[] effect4 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public float[] effect5 = {-0.15f, -0.2f, -0.25f, -0.3f, -0.35f};
        public int[] effect6 = {30, 55, 80, 105, 130};
        public float[] effect7 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public float[] effect8 = {-0.15f, -0.2f, -0.25f, -0.3f, -0.35f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int count = 0;
            TeamId ownerTeamID;
            bool? isStealthed = null;
            Particle? part = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            float baseDamage = 0;
            float totalAD = 0;
            int bonusDamage = 0;
            bool? canSee = null;
            count = GetBuffCountFromCaster(target, target, "TalonRakeMissileOneMarker");
            ownerTeamID = GetTeamID(default);
            if(count == 0)
            {
                isStealthed = GetStealthed(target);
                if(isStealthed == false)
                {
                    SpellEffectCreate(out part, out _, "talon_w_tar.troy", default, ownerTeamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd((ObjAIBase)target, target, "TalonRakeMissileOneMarker", 9, 1, 0.5f, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                    BreakSpellShields(target);
                    baseDamage = GetBaseAttackDamage(owner);
                    totalAD = GetTotalAttackDamage(owner);
                    baseDamage = Math(totalAD, MathOp.MO_SUBTRACT, baseDamage);
                    baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, 0.6f);
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    bonusDamage = this.effect0[level];
                    baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                    ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    nextBuffVars.MoveSpeedMod = this.effect1[level];
                    SpellBuffAdd((ObjAIBase)attacker, target, "TalonSlow", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                    if(level >= 1)
                    {
                        nextBuffVars.MovementSpeedMod = this.effect2[level];
                    }
                }
                else
                {
                    if(target is Champion)
                    {
                        SpellEffectCreate(out part, out _, "talon_w_tar.troy", default, ownerTeamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, true, false, false, false, false, default, default);
                        SpellBuffAdd((ObjAIBase)target, target, "TalonRakeMissileOneMarker", 9, 1, 0.5f, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                        BreakSpellShields(target);
                        baseDamage = GetBaseAttackDamage(owner);
                        totalAD = GetTotalAttackDamage(owner);
                        baseDamage = Math(totalAD, MathOp.MO_SUBTRACT, baseDamage);
                        baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, 0.6f);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        bonusDamage = this.effect3[level];
                        baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                        ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        nextBuffVars.MoveSpeedMod = this.effect4[level];
                        SpellBuffAdd((ObjAIBase)attacker, target, "TalonSlow", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                        if(level >= 1)
                        {
                            nextBuffVars.MovementSpeedMod = this.effect5[level];
                        }
                    }
                    else
                    {
                        canSee = CanSeeTarget(owner, target);
                        if(canSee == true)
                        {
                            SpellEffectCreate(out part, out _, "talon_w_tar.troy", default, ownerTeamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, true, false, false, false, false, default, default);
                            SpellBuffAdd((ObjAIBase)target, target, "TalonRakeMissileOneMarker", 9, 1, 0.5f, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                            BreakSpellShields(target);
                            baseDamage = GetBaseAttackDamage(owner);
                            totalAD = GetTotalAttackDamage(owner);
                            baseDamage = Math(totalAD, MathOp.MO_SUBTRACT, baseDamage);
                            baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, 0.6f);
                            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            bonusDamage = this.effect6[level];
                            baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                            ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            nextBuffVars.MoveSpeedMod = this.effect7[level];
                            SpellBuffAdd((ObjAIBase)attacker, target, "TalonSlow", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                            if(level >= 1)
                            {
                                nextBuffVars.MovementSpeedMod = this.effect8[level];
                            }
                        }
                    }
                }
            }
        }
    }
}

namespace Spells
{
    public class TalonRakeMissileTwo : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public int[] effect0 = {30, 55, 80, 105, 130};
        public float[] effect1 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public int[] effect2 = {30, 55, 80, 105, 130};
        public float[] effect3 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public int[] effect4 = {30, 55, 80, 105, 130};
        public float[] effect5 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int count = 0;
            TeamId ownerTeam;
            TeamId targetTeam;
            bool? isStealthed = null;
            Particle? part = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            float baseDamage = 0;
            float totalAD = 0;
            int bonusDamage = 0;
            bool? canSee = null;
            //object? missileNetworkID = null;
            count = GetBuffCountFromCaster(target, target, "TalonRakeMissileTwo");
            ownerTeam = GetTeamID(default);
            targetTeam = GetTeamID(default);
            if(targetTeam != ownerTeam)
            {
                if(count == 0)
                {
                    isStealthed = GetStealthed(target);
                    if(isStealthed == false)
                    {
                        SpellEffectCreate(out part, out _, "talon_w_tar.troy", default, ownerTeam, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, true, false, false, false, false, default, default);
                        SpellBuffAdd((ObjAIBase)target, target, "TalonRakeMissileTwo", 1, 1, 1, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                        BreakSpellShields(target);
                        baseDamage = GetBaseAttackDamage(owner);
                        totalAD = GetTotalAttackDamage(owner);
                        baseDamage = Math(totalAD, MathOp.MO_SUBTRACT, baseDamage);
                        baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, 0.6f);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        bonusDamage = this.effect0[level];
                        baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                        ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        nextBuffVars.MoveSpeedMod = this.effect1[level];
                        SpellBuffAdd((ObjAIBase)attacker, target, "TalonSlow", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                    }
                    else
                    {
                        if(target is Champion)
                        {
                            SpellEffectCreate(out part, out _, "talon_w_tar.troy", default, ownerTeam, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, true, false, false, false, false, default, default);
                            SpellBuffAdd((ObjAIBase)target, target, "TalonRakeMissileTwo", 1, 1, 1, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                            BreakSpellShields(target);
                            baseDamage = GetBaseAttackDamage(owner);
                            totalAD = GetTotalAttackDamage(owner);
                            baseDamage = Math(totalAD, MathOp.MO_SUBTRACT, baseDamage);
                            baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, 0.6f);
                            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            bonusDamage = this.effect2[level];
                            baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                            ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            nextBuffVars.MoveSpeedMod = this.effect3[level];
                            SpellBuffAdd((ObjAIBase)attacker, target, "TalonSlow", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                        }
                        else
                        {
                            canSee = CanSeeTarget(owner, target);
                            if(canSee == true)
                            {
                                SpellEffectCreate(out part, out _, "talon_w_tar.troy", default, ownerTeam, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, true, false, false, false, false, default, default);
                                SpellBuffAdd((ObjAIBase)target, target, "TalonRakeMissileTwo", 1, 1, 1, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                                BreakSpellShields(target);
                                baseDamage = GetBaseAttackDamage(owner);
                                totalAD = GetTotalAttackDamage(owner);
                                baseDamage = Math(totalAD, MathOp.MO_SUBTRACT, baseDamage);
                                baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, 0.6f);
                                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                bonusDamage = this.effect4[level];
                                baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                                ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                nextBuffVars.MoveSpeedMod = this.effect5[level];
                                SpellBuffAdd((ObjAIBase)attacker, target, "TalonSlow", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                            }
                        }
                    }
                }
            }
            else if(target == owner)
            {
                DestroyMissile(missileNetworkID);
            }
        }
    }
}
namespace Spells
{
    public class TalonShadowAssault : Script
    {
        Particle? particleZ = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? _ = null;
            //object? nextBuffVars = null;
            Vector3 pos;
            SpellEffectCreate(out this.particleZ, out _, "talon_ult_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "root", default, attacker, default, default, false, false, false, false, true, default, default);
            SpellEffectCreate(out this.particleZ, out _, "talon_invis_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, attacker, default, default, false, false, false, false, true, default, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "TalonShadowAssaultAnimBuff", 1, 1, 0.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TalonShadowAssaultBuff", 1, 1, 2.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "TalonShadowAssaultMisOne", 1, 1, 10000, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 1000, 0);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 3, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 1000, 135);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 3, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 1000, -90);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 3, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 1000, 45);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 3, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 1000, 180);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 3, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 1000, -45);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 3, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 1000, 90);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 3, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            pos = GetPointByUnitFacingOffset(owner, 1000, -135);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 3, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            SetSpell((ObjAIBase)owner, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "TalonShadowAssaultToggle");
            SetCanCast(owner, default);
            SealSpellSlot(3, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, SpellbookType.SPELLBOOK_CHAMPION);
            SetSlotSpellCooldownTimeVer2(0.5f, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
        }
    }
}




namespace Spells
{
    public class TalonShadowAssaultMisOne : Script
    {
        public int[] effect0 = {120, 190, 260, 85, 100};
        public int[] effect1 = {120, 190, 260, 85, 100};
        public int[] effect2 = {120, 190, 260, 85, 100};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int count = 0;
            TeamId ownerTeam;
            bool? isStealthed = null;
            Particle? part = null;
            //object? _ = null;
            //object? nextBuffVars = null;
            float baseDamage = 0;
            float totalAD = 0;
            int bonusDamage = 0;
            bool? canSee = null;
            count = GetBuffCountFromCaster(target, target, "TalonShadowAssaultMisBuff");
            ownerTeam = GetTeamID(default);
            if(count == 0)
            {
                isStealthed = GetStealthed(target);
                if(isStealthed == false)
                {
                    SpellEffectCreate(out part, out _, "talon_ult_tar.troy", default, ownerTeam, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd((ObjAIBase)target, target, "TalonShadowAssaultMisBuff", 9, 1, 0.5f, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                    BreakSpellShields(target);
                    baseDamage = GetBaseAttackDamage(owner);
                    totalAD = GetTotalAttackDamage(owner);
                    baseDamage = Math(totalAD, MathOp.MO_SUBTRACT, baseDamage);
                    baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, 0.9f);
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    bonusDamage = this.effect0[level];
                    baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                    ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                }
                else
                {
                    if(target is Champion)
                    {
                        SpellEffectCreate(out part, out _, "talon_ult_tar.troy", default, ownerTeam, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, true, false, false, false, false, default, default);
                        SpellBuffAdd((ObjAIBase)target, target, "TalonShadowAssaultMisBuff", 9, 1, 0.5f, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                        BreakSpellShields(target);
                        baseDamage = GetBaseAttackDamage(owner);
                        totalAD = GetTotalAttackDamage(owner);
                        baseDamage = Math(totalAD, MathOp.MO_SUBTRACT, baseDamage);
                        baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, 0.9f);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        bonusDamage = this.effect1[level];
                        baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                        ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    }
                    else
                    {
                        canSee = CanSeeTarget(owner, target);
                        if(canSee == true)
                        {
                            SpellEffectCreate(out part, out _, "bowmaster_BasicAttack_tar.troy", default, ownerTeam, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, true, false, false, false, false, default, default);
                            SpellBuffAdd((ObjAIBase)target, target, "TalonShadowAssaultMisBuff", 9, 1, 0.5f, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                            BreakSpellShields(target);
                            baseDamage = GetBaseAttackDamage(owner);
                            totalAD = GetTotalAttackDamage(owner);
                            baseDamage = Math(totalAD, MathOp.MO_SUBTRACT, baseDamage);
                            baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, 0.9f);
                            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            bonusDamage = this.effect2[level];
                            baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                            ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        }
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class TalonShadowAssaultMisTwo : Script
    {
        public int[] effect0 = {120, 190, 260, 85, 100};
        public int[] effect1 = {120, 190, 260, 85, 100};
        public int[] effect2 = {120, 190, 260, 85, 100};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int count = 0;
            TeamId ownerTeam;
            TeamId targetTeam;
            bool? isStealthed = null;
            Particle? part = null;
            //object? _ = null;
            //object? nextBuffVars = null;
            float baseDamage = 0;
            float totalAD = 0;
            int bonusDamage = 0;
            bool? canSee = null;
            //object? missileNetworkID = null;
            count = GetBuffCountFromCaster(target, target, "TalonShadowAssaultMisTwo");
            ownerTeam = GetTeamID(default);
            targetTeam = GetTeamID(default);
            if(targetTeam != ownerTeam)
            {
                if(count == 0)
                {
                    isStealthed = GetStealthed(target);
                    if(isStealthed == false)
                    {
                        SpellEffectCreate(out part, out _, "talon_ult_tar.troy", default, ownerTeam, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, true, false, false, false, false, default, default);
                        SpellBuffAdd((ObjAIBase)target, target, "TalonShadowAssaultMisTwo", 1, 1, 1, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                        BreakSpellShields(target);
                        baseDamage = GetBaseAttackDamage(owner);
                        totalAD = GetTotalAttackDamage(owner);
                        baseDamage = Math(totalAD, MathOp.MO_SUBTRACT, baseDamage);
                        baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, 0.9f);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        bonusDamage = this.effect0[level];
                        baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                        ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    }
                    else
                    {
                        if(target is Champion)
                        {
                            SpellEffectCreate(out part, out _, "talon_ult_tar.troy", default, ownerTeam, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, true, false, false, false, false, default, default);
                            SpellBuffAdd((ObjAIBase)target, target, "TalonShadowAssaultMisTwo", 1, 1, 1, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                            BreakSpellShields(target);
                            baseDamage = GetBaseAttackDamage(owner);
                            totalAD = GetTotalAttackDamage(owner);
                            baseDamage = Math(totalAD, MathOp.MO_SUBTRACT, baseDamage);
                            baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, 0.9f);
                            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            bonusDamage = this.effect1[level];
                            baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                            ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        }
                        else
                        {
                            canSee = CanSeeTarget(owner, target);
                            if(canSee == true)
                            {
                                SpellEffectCreate(out part, out _, "bowmaster_BasicAttack_tar.troy", default, ownerTeam, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, true, false, false, false, false, default, default);
                                SpellBuffAdd((ObjAIBase)target, target, "TalonShadowAssaultMisTwo", 1, 1, 1, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                                BreakSpellShields(target);
                                baseDamage = GetBaseAttackDamage(owner);
                                totalAD = GetTotalAttackDamage(owner);
                                baseDamage = Math(totalAD, MathOp.MO_SUBTRACT, baseDamage);
                                baseDamage = Math(baseDamage, MathOp.MO_MULTIPLY, 0.9f);
                                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                                bonusDamage = this.effect2[level];
                                baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                                DebugSay(owner, "DAMAGE", baseDamage);
                                ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            }
                        }
                    }
                }
            }
            else if(target == owner)
            {
                DestroyMissile(missileNetworkID);
            }
        }
    }
}

namespace Spells
{
    public class TalonShadowAssaultToggle : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "TalonShadowAssaultBuff", (ObjAIBase)owner, 0);
            SpellBuffRemove(owner, "TalonShadowAssaultMisOne", (ObjAIBase)owner, 0);
        }
    }
}

namespace Spells
{
    public class Tantrum : Script
    {
        public int[] effect0 = {75, 100, 125, 150, 175};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? hi = null;
            //object? _ = null;
            SpellEffectCreate(out hi, out _, "Tantrum_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.5f, 1, false, false, (ObjAIBase)attacker);
        }
    }
}



namespace Spells
{
    public class TaricHammerSmash : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DamageIncrease = 0;
            public int AbilityPower = 0;
        }
        public int[] effect0 = {30, 50, 70};
        public int[] effect1 = {30, 50, 70};
        public int[] effect2 = {150, 250, 350};
        Particle? partname = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Particle? hi1 = null;
            //object? _ = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            Particle? shatterz = null;
            teamID = GetTeamID(default);
            SpellEffectCreate(out hi1, out _, "TaricHammerSmash_shatter.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(out this.partname, out _, "TaricHammerSmash_nova.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, owner.Position, target, default, default, true, false, false, false, false, default, default);
            nextBuffVars.DamageIncrease = this.effect0[level];
            nextBuffVars.AbilityPower = this.effect1[level];
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                ApplyDamage((ObjAIBase)attacker, unit, this.effect2[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.7f, 0, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out shatterz, out _, "Taric_GemStorm_Tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
            });
            SpellBuffAdd((ObjAIBase)attacker, attacker, "Radiance", 1, 1, 10, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}






namespace Spells
{
    public class TeemoBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class TeemoBasicAttack2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class TeemoCritAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float baseAttackDamage = 0;
            hitResult = HitResult.HIT_Critical;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}






namespace Spells
{
    public class TeleportCancel : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            if(GetBuffCountFromCaster(owner, owner, "SummonerTeleport") > 0)
            {
                charVars.TeleportCancelled = true;
                SpellBuffRemove(owner, "SummonerTeleport", (ObjAIBase)owner, 0);
            }
        }
    }
}



namespace Spells
{
    public class Terrify : Script
    {
        public float[] effect0 = {1, 1.5f, 2, 2.5f, 3};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            ApplyAssistMarker((ObjAIBase)attacker, target, 10);
            ApplyFear(attacker, target, this.effect0[level]);
        }
    }
}

namespace Spells
{
    public class TimeBomb : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DamageLevel = 0;
        }
        public int[] effect0 = {90, 145, 200, 260, 320};
        public int[] effect1 = {90, 145, 200, 260, 320};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? par = null;
            //object? _ = null;
            //object? unit = null;
            TeamId ownerID;
            Champion? caster = null;
            int damageToDeal = 0;
            nextBuffVars.DamageLevel = this.effect0[level];
            if(GetBuffCountFromCaster(target, owner, "TimeBomb") > 0)
            {
                SpellEffectCreate(out par, out _, "TimeBombExplo.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                ForEachUnitInTargetArea((ObjAIBase)attacker, target.Position, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                {
                    ApplyDamage((ObjAIBase)attacker, unit, nextBuffVars.DamageLevel, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.9f, 1, false, false, (ObjAIBase)attacker);
                });
            }
            else
            {
                ownerID = GetTeamID(default);
                if(ownerID == 100)
                {
                    caster = GetChampionBySkinName("Zilean", TeamId.TEAM_PURPLE);
                }
                else
                {
                    caster = GetChampionBySkinName("Zilean", TeamId.TEAM_BLUE);
                }
                if(GetBuffCountFromCaster(target, caster, "TimeBomb") > 0)
                {
                    SpellEffectCreate(out par, out _, "TimeBombExplo.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    damageToDeal = this.effect1[level];
                    ForEachUnitInTargetArea(caster, target.Position, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
                    {
                        ApplyDamage(caster, unit, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.9f, 0, false, false, caster);
                    });
                }
            }
            if(!target.IsDead)
            {
                SpellBuffAdd((ObjAIBase)owner, target, default, 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 1, true, false, false, default);
            }
        }
    }
}

namespace Spells
{
    public class TimeWarp : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float SpeedMod = 0;
            public int AttackSpeedMod = 0;
        }
        public float[] effect0 = {2.5f, 3.25f, 4, 4.75f, 5.5f};
        public float[] effect1 = {2.5f, 3.25f, 4, 4.75f, 5.5f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(target.Team == owner.Team)
            {
                nextBuffVars.SpeedMod = 0.55f;
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect0[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.HASTE, 0, true, default, default, default);
            }
            else
            {
                nextBuffVars.AttackSpeedMod = 0;
                nextBuffVars.SpeedMod = -0.55f;
                SpellBuffAdd((ObjAIBase)attacker, target, "TimeWarpSlow", 1, 1, this.effect1[level], nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, default, default, default);
            }
        }
    }
}

namespace Spells
{
    public class TormentedSoil : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public int DamagePerTick = 0;
            public int MRminus = 0;
        }
        public int[] effect0 = {25, 40, 55, 70, 85};
        public int[] effect1 = {-4, -5, -6, -7, -8};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.DamagePerTick = this.effect0[level];
            nextBuffVars.MRminus = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class TosajirosGlare : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(target, owner, "LuxLightBinding") > 0)
            {
                SpellBuffRemove(target, "LuxLightBinding", (ObjAIBase)attacker, default);
                DebugSay(owner, "DISPELL ROOT !!", default);
            }
            else
            {
                nextBuffVars.MoveSpeedMod = -0.5f;
                DebugSay(owner, "TARGET BINDED !!", default);
                SpellBuffAdd((ObjAIBase)attacker, target, "LuxLightBinding", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.CHARM, 0, true, false, default, default);
            }
        }
    }
}

namespace Spells
{
    public class ToxicShotAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            float attackDamage = 0;
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    SpellBuffAdd((ObjAIBase)owner, owner, "ToxicShotApplicator", 1, 1, 0.1f, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
            attackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, attackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}






namespace Spells
{
    public class Tremors2 : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int TremDamage = 0;
        }
        public int[] effect0 = {65, 130, 195};
        public int[] effect1 = {8, 8, 8, 8, 8};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.TremDamage = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect1[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class TristanaBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class TristanaBasicAttack2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class TristanaCritAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float baseAttackDamage = 0;
            hitResult = HitResult.HIT_Critical;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}

namespace Spells
{
    public class TriumphantRoar : Script
    {
        public int[] effect0 = {60, 90, 120, 150, 180};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float abilityPower = 0;
            int baseHeal = 0;
            float finalHeal = 0;
            Particle? par = null;
            //object? _ = null;
            float temp1 = 0;
            //object? unit = null;
            //object? nextBuffVars = null;
            abilityPower = GetFlatMagicDamageMod(owner);
            abilityPower = Math(abilityPower, MathOp.MO_MULTIPLY, 0.2f);
            baseHeal = this.effect0[level];
            finalHeal = Math(baseHeal, MathOp.MO_ADD, abilityPower);
            IncHealth(owner, finalHeal, owner);
            SpellEffectCreate(out par, out _, "Meditate_eff.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, true, default, default, false, false, default, default);
            finalHeal = Math(finalHeal, MathOp.MO_DIVIDE, 2);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 575, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", default, true, (unit) => 
            {
                temp1 = GetHealthPercent(target);
                if(temp1 < 1)
                {
                    ApplyAssistMarker((ObjAIBase)attacker, target, 10);
                }
                IncHealth(unit, finalHeal, owner);
                SpellEffectCreate(out par, out _, "Meditate_eff.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, target, default, default, true, default, default, false, false, default, default);
            });
            SpellBuffAdd((ObjAIBase)owner, owner, "AlistarTrample", 1, 1, 3, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class TrueSight : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)target, target, default, 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, default, default, default, default);
        }
    }
}
namespace Spells
{
    public class TrundleCircle : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int ID = 0;
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Minion? other3 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            if(GetBuffCountFromCaster(owner, owner, "Crystallize") > 0)
            {
                
            }
            else
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                targetPos = GetCastSpellTargetPos();
                teamID = GetTeamID(default);
                other3 = SpawnMinion("PlagueBlock", "TrundleWall", "idle.lua", targetPos, teamID, true, true, true, true, false, true, 0, false, false, default, default);
                nextBuffVars.ID = 1;
                SpellBuffAdd((ObjAIBase)owner, other3, "TrundleCircle", 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                FaceDirection(other3, owner.Position);
            }
        }
    }
}
namespace Spells
{
    public class TrundleDesecrate : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            TeamId teamID;
            Minion? other1 = null;
            //object? nextBuffVars = null;
            ownerPos = GetCastSpellTargetPos();
            teamID = GetTeamID(default);
            other1 = SpawnMinion("birds", "TestCube", "idle.lua", ownerPos, teamID, true, true, true, true, true, true, 0, false, true, default, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "TrundleDesecrate", 1, 1, 8, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            PlayAnimation("Spell2", 1, owner, false, true, true);
        }
    }
}



namespace Spells
{
    public class TrundlePain : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DamageDealt = 0;
            public float Survivability = 0;
        }
        public int[] effect0 = {100, 175, 250};
        public float[] effect1 = {0.15f, 0.2f, 0.25f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            BreakSpellShields(target);
            nextBuffVars.DamageDealt = this.effect0[level];
            nextBuffVars.Survivability = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "TrundlePain", 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "TrundlePainShred", 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SHRED, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class TrundleQ : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int SapVar = 0;
            public float NegSapVar = 0;
        }
        public float[] effect0 = {0.8f, 0.9f, 1, 1.1f, 1.2f};
        public int[] effect1 = {30, 45, 60, 75, 90};
        public int[] effect2 = {20, 25, 30, 35, 40};
        public float[] effect3 = {-10, -12.5f, -15, -17.5f, -20};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float scaling = 0;
            Vector3 attackerPos;
            float distance = 0;
            int bonusDamage = 0;
            float totalDamage = 0;
            float scaledDamage = 0;
            float dtD = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? asdf = null;
            //object? _ = null;
            if(hitResult == HitResult.HIT_Critical)
            {
                hitResult = HitResult.HIT_Normal;
            }
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            scaling = this.effect0[level];
            attackerPos = GetUnitPosition(attacker);
            targetPos = GetUnitPosition(target);
            distance = DistanceBetweenObjects("Attacker", "Target");
            targetPos = GetPointByUnitFacingOffset(attacker, 50, 0);
            bonusDamage = this.effect1[level];
            totalDamage = GetTotalAttackDamage(attacker);
            scaledDamage = Math(scaling, MathOp.MO_MULTIPLY, totalDamage);
            dtD = Math(scaledDamage, MathOp.MO_ADD, bonusDamage);
            ApplyDamage((ObjAIBase)attacker, target, dtD, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, true, (ObjAIBase)attacker);
            nextBuffVars.SapVar = this.effect2[level];
            nextBuffVars.NegSapVar = this.effect3[level];
            SpellEffectCreate(out asdf, out _, "globalhit_physical.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, default, default, false, false, default, default);
            SpellBuffAdd((ObjAIBase)attacker, target, "TrundleQDebuff", 1, 1, 8, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, owner, "UnlockAnimation", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            Move(attacker, targetPos, 100, 0, 25, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, 50, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
            if(distance >= 75)
            {
                PlayAnimation("Spell1a", 0, attacker, false, true, true);
            }
            else
            {
                PlayAnimation("Spell1", 0, attacker, false, true, true);
            }
        }
    }
}

namespace Spells
{
    public class TrundleTrollSmash : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
        }
        public int[] effect0 = {4, 4, 4, 4, 4};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            SetSlotSpellCooldownTimeVer2(0, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            nextBuffVars.SpellCooldown = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 7, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}



















namespace Spells
{
    public class TwitchBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class TwitchBasicAttack2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class TwitchBasicAttack3 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class TwitchCritAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float baseAttackDamage = 0;
            hitResult = HitResult.HIT_Critical;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}

namespace Spells
{
    public class TwoShivPoison : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public float MissChance = 0;
        }
        public int[] effect0 = {40, 80, 120, 160, 200};
        public float[] effect1 = {-0.2f, -0.225f, -0.25f, -0.275f, -0.3f};
        public float[] effect2 = {0.2f, 0.225f, 0.25f, 0.275f, 0.3f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float attackDamage = 0;
            float attackDamageMod = 0;
            float backstabBonus = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            attackDamage = GetTotalAttackDamage(owner);
            attackDamageMod = Math(attackDamage, MathOp.MO_MULTIPLY, 0.5f);
            backstabBonus = 0;
            if(GetBuffCountFromCaster(owner, owner, "CastFromBehind") > 0)
            {
                backstabBonus = 0.2f;
            }
            else
            {
                if(IsInFront(owner, target))
                {
                    if(IsBehind(target, owner))
                    {
                        backstabBonus = 0.2f;
                    }
                }
            }
            ApplyDamage((ObjAIBase)attacker, target, attackDamageMod + this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1 + backstabBonus, 1, 1, false, false, (ObjAIBase)attacker);
            nextBuffVars.MoveSpeedMod = this.effect1[level];
            nextBuffVars.MissChance = this.effect2[level];
            SpellBuffAdd((ObjAIBase)owner, target, "TwoShivPoison", 1, 1, 3, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class UFSlash : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public int Damage = 0;
            public object? SlashSpeed = null;
            public float StunDuration = 0;
        }
        public int[] effect0 = {200, 300, 400, 270, 330};
        public float[] effect1 = {1.5f, 1.75f, 2};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            canMove = GetCanMove(owner);
            if(canMove == false)
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            Vector3 ownerPos;
            float moveSpeed = 0;
            float slashSpeed = 0;
            float distance = 0;
            float duration = 0;
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.Damage = this.effect0[level];
            ownerPos = GetUnitPosition(owner);
            moveSpeed = GetMovementSpeed(owner);
            slashSpeed = Math(moveSpeed, MathOp.MO_ADD, 1000);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            duration = Math(distance, MathOp.MO_DIVIDE, slashSpeed);
            nextBuffVars.SlashSpeed = slashSpeed;
            nextBuffVars.StunDuration = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, owner, default, 1, 1, duration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UnstoppableForceMarker", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class UPGRADE___ : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? unit = null;
            //object? nextBuffVars = null;
            float maxHP = 0;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 25000, "AffectFriends AffectMinions ", "H28GEvolutionTurret", true, (unit) => 
            {
                if(GetBuffCountFromCaster(unit, attacker, "H28GEvolutionTurret") > 0)
                {
                    SpellBuffAdd((ObjAIBase)attacker, unit, "UpgradeSlow", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    maxHP = GetMaxHealth(unit);
                    IncHealth(unit, maxHP, attacker);
                }
            });
            SpellBuffAdd((ObjAIBase)attacker, attacker, "UpgradeBuff", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}


namespace Spells
{
    public class UdyrBearAttack : Script
    {
        public int[] effect0 = {5, 5, 5, 5, 5};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseDamage = 0;
            //object? nextBuffVars = null;
            Particle? c = null;
            //object? _ = null;
            baseDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 1, 1, false, false, default);
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    if(GetBuffCountFromCaster(target, attacker, "UdyrBearStunCheck") > 0)
                    {
                        
                    }
                    else
                    {
                        SpellBuffAdd((ObjAIBase)attacker, target, "UdyrBearStunCheck", 1, 1, this.effect0[level], default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, default, default, default, default);
                        BreakSpellShields(target);
                        ApplyStun(attacker, target, 1);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        SpellEffectCreate(out c, out _, "udyr_bear_slam.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, default, default, default, default, default, default);
                    }
                }
            }
        }
    }
}
namespace Spells
{
    public class UdyrBearStance : Script
    {
        public float[] effect0 = {2, 2.5f, 3, 3.5f, 4};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float cooldownPerc = 0;
            float currentCD = 0;
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "UdyrPhoenixStance") > 0)
            {
                SpellBuffRemove(owner, "UdyrPhoenixStance", (ObjAIBase)owner, default);
            }
            if(GetBuffCountFromCaster(owner, owner, "UdyrTurtleStance") > 0)
            {
                SpellBuffRemove(owner, "UdyrTurtleStance", (ObjAIBase)owner, default);
            }
            if(GetBuffCountFromCaster(owner, owner, "UdyrTigerStance") > 0)
            {
                SpellBuffRemove(owner, "UdyrTigerStance", (ObjAIBase)owner, default);
            }
            cooldownPerc = GetPercentCooldownMod(owner);
            cooldownPerc = Math(1, MathOp.MO_ADD, cooldownPerc);
            cooldownPerc = Math(1.5f, MathOp.MO_MULTIPLY, cooldownPerc);
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 1, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 3, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UdyrBearActivation", 1, 1, this.effect0[level], default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
        }
    }
}

namespace Spells
{
    public class UdyrDoubleStrike : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseDamage = 0;
            //object? nextBuffVars = null;
            baseDamage = GetBaseAttackDamage(owner);
            if(target is ObjAIBase)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 0.15f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, default, default, default, default);
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 0.33f, 0, default, false, false, default);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 0.33f, 0, default, false, false, default);
            }
            ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 0.33f, 0, default, false, false, default);
        }
    }
}






namespace Spells
{
    public class UdyrPhoenixAttack : Script
    {
        float count = 0;
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float baseDamage = 0;
            Particle? a = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            baseDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 1, 1, false, false, (ObjAIBase)attacker);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            this.count = Math(1, MathOp.MO_ADD, this.count);
            if(target is ObjAIBase)
            {
                if(charVars.Count >= 3)
                {
                    SpellEffectCreate(out a, out _, "PhoenixBreath_cas.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "goatee", default, target, default, default, true, default, default, default, default, default, default);
                    targetPos = GetPointByUnitFacingOffset(owner, 400, 0);
                    SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
                    charVars.Count = 0;
                }
            }
        }
    }
}
namespace Spells
{
    public class UdyrPhoenixBreath : Script
    {
        public int[] effect0 = {40, 80, 120, 160, 200};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.25f, 0, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class UdyrPhoenixStance : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float cooldownPerc = 0;
            float currentCD = 0;
            //object? nextBuffVars = null;
            Particle? phoenixparticle = null;
            //object? _ = null;
            if(GetBuffCountFromCaster(owner, owner, "UdyrBearStance") > 0)
            {
                SpellBuffRemove(owner, "UdyrBearStance", (ObjAIBase)owner, default);
            }
            if(GetBuffCountFromCaster(owner, owner, "UdyrTigerStance") > 0)
            {
                SpellBuffRemove(owner, "UdyrTigerStance", (ObjAIBase)owner, default);
            }
            if(GetBuffCountFromCaster(owner, owner, "UdyrTurtleStance") > 0)
            {
                SpellBuffRemove(owner, "UdyrTurtleStance", (ObjAIBase)owner, default);
            }
            cooldownPerc = GetPercentCooldownMod(owner);
            cooldownPerc = Math(1, MathOp.MO_ADD, cooldownPerc);
            cooldownPerc = Math(1.5f, MathOp.MO_MULTIPLY, cooldownPerc);
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 1, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 2, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
            SpellEffectCreate(out phoenixparticle, out _, "PhoenixStance.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UdyrPhoenixActivation", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class UdyrTigerAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float baseDamage = 0;
            Particle? a = null;
            //object? _ = null;
            Particle? agsdg = null;
            teamID = GetTeamID(default);
            baseDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    SpellEffectCreate(out a, out _, "udyr_tiger_claw_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, default, default, default);
                    SpellEffectCreate(out agsdg, out _, "udyr_tiger_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, default, default, default);
                }
            }
        }
    }
}



namespace Spells
{
    public class UdyrTigerStance : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float ActiveAttackSpeed = 0;
            public float PassiveAttackSpeed = 0;
        }
        public float[] effect0 = {0.15f, 0.2f, 0.25f, 0.3f, 0.35f};
        public float[] effect1 = {0.2f, 0.25f, 0.3f, 0.35f, 0.4f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float cooldownPerc = 0;
            float currentCD = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            TeamId teamID;
            Particle? tigerparticle = null;
            //object? _ = null;
            if(GetBuffCountFromCaster(owner, owner, "UdyrBearStance") > 0)
            {
                SpellBuffRemove(owner, "UdyrBearStance", (ObjAIBase)owner, 0);
            }
            if(GetBuffCountFromCaster(owner, owner, "UdyrPhoenixStance") > 0)
            {
                SpellBuffRemove(owner, "UdyrPhoenixStance", (ObjAIBase)owner, 0);
            }
            if(GetBuffCountFromCaster(owner, owner, "UdyrTurtleStance") > 0)
            {
                SpellBuffRemove(owner, "UdyrTurtleStance", (ObjAIBase)owner, 0);
            }
            cooldownPerc = GetPercentCooldownMod(owner);
            cooldownPerc = Math(1, MathOp.MO_ADD, cooldownPerc);
            cooldownPerc = Math(1.5f, MathOp.MO_MULTIPLY, cooldownPerc);
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 1, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 2, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 3, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            nextBuffVars.ActiveAttackSpeed = this.effect0[level];
            nextBuffVars.PassiveAttackSpeed = this.effect1[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UdyrTigerPunch", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            teamID = GetTeamID(default);
            SpellEffectCreate(out tigerparticle, out _, "TigerStance.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, true, default, default, false, false, default, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "UdyrTigerShred", 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class UdyrTurtleAttack : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float DrainPercent = 0;
            public float ManaDrainPercent = 0;
        }
        public float[] effect0 = {0.1f, 0.12f, 0.14f, 0.16f, 0.18f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? lifestealParticle = null;
            //object? _ = null;
            float baseDamage = 0;
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    nextBuffVars.DrainPercent = this.effect0[level];
                    nextBuffVars.ManaDrainPercent = Math(0.5f, MathOp.MO_MULTIPLY, nextBuffVars.DrainPercent);
                    SpellEffectCreate(out lifestealParticle, out _, "ItemLifesteal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, false, false, false, false, false, default, default);
                    SpellEffectCreate(out lifestealParticle, out _, "globalhit_physical.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, false, false, false, false, default, default);
                    SpellBuffAdd((ObjAIBase)attacker, attacker, "GlobalDrainMana", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
            baseDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 1, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class UdyrTurtleStance : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? ShieldAmount = null;
        }
        public int[] effect0 = {60, 100, 140, 180, 220};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float cooldownPerc = 0;
            float currentCD = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            float aPAmount = 0;
            float shieldAmount = 0;
            if(GetBuffCountFromCaster(owner, owner, "UdyrBearStance") > 0)
            {
                SpellBuffRemove(owner, "UdyrBearStance", (ObjAIBase)owner, default);
            }
            if(GetBuffCountFromCaster(owner, owner, "UdyrTigerStance") > 0)
            {
                SpellBuffRemove(owner, "UdyrTigerStance", (ObjAIBase)owner, default);
            }
            if(GetBuffCountFromCaster(owner, owner, "UdyrPhoenixStance") > 0)
            {
                SpellBuffRemove(owner, "UdyrPhoenixStance", (ObjAIBase)owner, default);
            }
            if(GetBuffCountFromCaster(owner, owner, "UdyrTurtleActivation") > 0)
            {
                SpellBuffRemove(owner, "UdyrTurtleActivation", (ObjAIBase)owner, default);
            }
            cooldownPerc = GetPercentCooldownMod(owner);
            cooldownPerc = Math(1, MathOp.MO_ADD, cooldownPerc);
            cooldownPerc = Math(1.5f, MathOp.MO_MULTIPLY, cooldownPerc);
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 2, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            currentCD = GetSlotSpellCooldownTime((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(currentCD <= cooldownPerc)
            {
                SetSlotSpellCooldownTime((ObjAIBase)owner, 3, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, cooldownPerc);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 25000, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
            aPAmount = GetFlatMagicDamageMod(owner);
            aPAmount = Math(0.5f, MathOp.MO_MULTIPLY, aPAmount);
            shieldAmount = this.effect0[level];
            shieldAmount = Math(aPAmount, MathOp.MO_ADD, shieldAmount);
            nextBuffVars.ShieldAmount = shieldAmount;
            SpellBuffAdd((ObjAIBase)owner, owner, "UdyrTurtleActivation", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class UndyingRage : Script
    {
        public int[] effect0 = {50, 75, 100};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            IncPAR(owner, this.effect0[level]);
        }
    }
}









namespace Spells
{
    public class UrfSpell : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            
        }
    }
}



namespace Spells
{
    public class UrgotHeatseekingHomeMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public int[] effect0 = {10, 40, 70, 100, 130};
        public float[] effect1 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int baseDamage = 0;
            float attackDamage = 0;
            float scaling = 0;
            float bonusAD = 0;
            float totalDamage = 0;
            bool? hitResult = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            Particle? asdf = null;
            //object? _ = null;
            //object? missileNetworkID = null;
            teamID = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            baseDamage = this.effect0[level];
            attackDamage = GetTotalAttackDamage(owner);
            scaling = 0.85f;
            bonusAD = Math(scaling, MathOp.MO_MULTIPLY, attackDamage);
            totalDamage = Math(baseDamage, MathOp.MO_ADD, bonusAD);
            hitResult = false;
            BreakSpellShields(target);
            ApplyDamage((ObjAIBase)owner, target, totalDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, true, (ObjAIBase)attacker);
            if(GetBuffCountFromCaster(owner, owner, "UrgotTerrorCapacitorActive2") > 0)
            {
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                nextBuffVars.MoveSpeedMod = this.effect1[level];
                SpellBuffAdd((ObjAIBase)attacker, target, "UrgotSlow", 100, 1, 1.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, false, default);
            }
            SpellBuffAdd((ObjAIBase)owner, target, "UrgotEntropyPassive", 1, 1, 2.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            SpellEffectCreate(out asdf, out _, "UrgotHeatSeekingMissile_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
            DestroyMissile(missileNetworkID);
        }
    }
}
namespace Spells
{
    public class UrgotHeatseekingLineMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public int[] effect0 = {10, 40, 70, 100, 130};
        public float[] effect1 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public float[] effect2 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public float[] effect3 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int baseDamage = 0;
            float attackDamage = 0;
            float bonusAD = 0;
            float totalDamage = 0;
            bool? isStealthed = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? missileNetworkID = null;
            Particle? asdf1 = null;
            //object? _ = null;
            Particle? asdf = null;
            bool? canSee = null;
            teamID = GetTeamID(default);
            baseDamage = this.effect0[level];
            attackDamage = GetTotalAttackDamage(owner);
            bonusAD = Math(0.85f, MathOp.MO_MULTIPLY, attackDamage);
            totalDamage = Math(baseDamage, MathOp.MO_ADD, bonusAD);
            isStealthed = GetStealthed(target);
            if(isStealthed == false)
            {
                BreakSpellShields(target);
                ApplyDamage((ObjAIBase)owner, target, totalDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, true, (ObjAIBase)attacker);
                if(GetBuffCountFromCaster(owner, owner, "UrgotTerrorCapacitorActive2") > 0)
                {
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    nextBuffVars.MoveSpeedMod = this.effect1[level];
                    SpellBuffAdd((ObjAIBase)attacker, target, "UrgotSlow", 100, 1, 1.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                }
                DestroyMissile(missileNetworkID);
                SpellEffectCreate(out asdf1, out _, "BloodSlash.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, default, default, true, default, default, false, false, default, default);
                SpellEffectCreate(out asdf, out _, "UrgotHeatSeekingMissile_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                SpellBuffAdd((ObjAIBase)owner, target, "UrgotEntropyPassive", 1, 1, 2.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            }
            else
            {
                if(target is Champion)
                {
                    BreakSpellShields(target);
                    ApplyDamage((ObjAIBase)owner, target, totalDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, true, (ObjAIBase)attacker);
                    if(GetBuffCountFromCaster(owner, owner, "UrgotTerrorCapacitorActive2") > 0)
                    {
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        nextBuffVars.MoveSpeedMod = this.effect2[level];
                        SpellBuffAdd((ObjAIBase)attacker, target, "UrgotSlow", 100, 1, 1.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                    }
                    DestroyMissile(missileNetworkID);
                    SpellEffectCreate(out asdf1, out _, "BloodSlash.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, default, default, true, default, default, false, false, default, default);
                    SpellEffectCreate(out asdf, out _, "UrgotHeatSeekingMissile_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                    SpellBuffAdd((ObjAIBase)owner, target, "UrgotEntropyPassive", 1, 1, 2.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
                else
                {
                    canSee = CanSeeTarget(owner, target);
                    if(canSee == true)
                    {
                        BreakSpellShields(target);
                        ApplyDamage((ObjAIBase)owner, target, totalDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, true, (ObjAIBase)attacker);
                        if(GetBuffCountFromCaster(owner, owner, "UrgotTerrorCapacitorActive2") > 0)
                        {
                            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            nextBuffVars.MoveSpeedMod = this.effect3[level];
                            SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 100, 1, 1.5f, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
                        }
                        DestroyMissile(missileNetworkID);
                        SpellEffectCreate(out asdf1, out _, "BloodSlash.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, "spine", default, target, default, default, true, default, default, false, false, default, default);
                        SpellEffectCreate(out asdf, out _, "UrgotHeatSeekingMissile_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
                        SpellBuffAdd((ObjAIBase)owner, target, "UrgotEntropyPassive", 1, 1, 2.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                    }
                }
            }
        }
    }
}

namespace Spells
{
    public class UrgotHeatseekingMissile : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            int homed = 0;
            float distance = 0;
            TeamId teamID;
            float distanceObjs = 0;
            Particle? hit = null;
            //object? _ = null;
            //object? unit = null;
            targetPos = GetCastSpellTargetPos();
            FaceDirection(owner, targetPos);
            ownerPos = GetUnitPosition(owner);
            homed = 0;
            distance = DistanceBetweenPoints(targetPos, ownerPos);
            teamID = GetTeamID(default);
            if(distance <= 3000)
            {
                ForNClosestUnitsInTargetArea(owner, targetPos, 350, "AffectEnemies AffectNeutral AffectHeroes ", 999, true, "UrgotCorrosiveDebuff", (unit) => 
                {
                    if(homed == 0)
                    {
                        distanceObjs = DistanceBetweenObjects("Owner", "Unit");
                        if(distanceObjs <= 1200)
                        {
                            SpellEffectCreate(out hit, out _, "UrgotHeatseekingIndicator.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, true, default, default, targetPos, default, default, targetPos, true, default, default, default, default, default, default);
                            homed = 1;
                            SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
                            SpellEffectCreate(out hit, out _, "UrgotTargetIndicator.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, default, default, default, default);
                        }
                    }
                });
                if(homed == 0)
                {
                    ForNClosestUnitsInTargetArea(owner, targetPos, 350, "AffectEnemies AffectNeutral AffectMinions ", 999, true, "UrgotCorrosiveDebuff", (unit) => 
                    {
                        if(homed == 0)
                        {
                            distanceObjs = DistanceBetweenObjects("Owner", "Unit");
                            if(distanceObjs <= 1200)
                            {
                                SpellEffectCreate(out hit, out _, "UrgotHeatseekingIndicator.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, true, default, default, targetPos, default, default, targetPos, true, default, default, default, default, default, default);
                                homed = 1;
                                SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
                                SpellEffectCreate(out hit, out _, "UrgotTargetIndicator.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, default, default, default, default);
                            }
                        }
                    });
                }
            }
            if(homed == 0)
            {
                SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, false, false, owner.Position);
            }
        }
    }
}
namespace Spells
{
    public class UrgotPlasmaGrenade : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 ownerPos;
            float distance = 0;
            Minion? other2 = null;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(targetPos, ownerPos);
            FaceDirection(owner, targetPos);
            if(distance > 950)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 950, 0);
            }
            other2 = SpawnMinion("k", "TestCubeRender", "idle.lua", targetPos, teamID, true, true, false, true, true, true, 0, default, true, (Champion)attacker, default);
            SpellCast((ObjAIBase)owner, other2, targetPos, targetPos, false, 2, SpellSlotType.ExtraSlots, level, false, false, false, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other2, "ExpirationTimer", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, default, default);
        }
    }
}
namespace Spells
{
    public class UrgotPlasmaGrenadeBoom : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float ArmorReduced = 0;
            public object? TickDamage = null;
        }
        public int[] effect0 = {5, 5, 5, 5, 5};
        public int[] effect1 = {75, 130, 185, 240, 295};
        public float[] effect2 = {-0.12f, -0.14f, -0.16f, -0.18f, -0.2f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int buffDuration = 0;
            Particle? particle = null;
            //object? _ = null;
            float aD = 0;
            int dmg = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            float remainder = 0;
            float ticks = 0;
            float tickDamage = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            bool? isStealthed = null;
            bool? canSee = null;
            targetPos = GetUnitPosition(target);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            teamID = GetTeamID(default);
            buffDuration = this.effect0[level];
            SpellEffectCreate(out particle, out _, "UrgotPlasmaGrenade_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, default, false, default, default, targetPos, default, default, targetPos, true, false, false, false, false, default, default);
            aD = GetFlatPhysicalDamageMod(owner);
            dmg = this.effect1[level];
            bonusDamage = Math(aD, MathOp.MO_MULTIPLY, 0.6f);
            totalDamage = Math(bonusDamage, MathOp.MO_ADD, dmg);
            remainder = Math(buffDuration, MathOp.MO_MODULO, 0.5f);
            ticks = Math(buffDuration, MathOp.MO_SUBTRACT, remainder);
            tickDamage = Math(totalDamage, MathOp.MO_DIVIDE, ticks);
            nextBuffVars.ArmorReduced = this.effect2[level];
            ForEachUnitInTargetArea((ObjAIBase)owner, targetPos, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (unit) => 
            {
                isStealthed = GetStealthed(unit);
                if(isStealthed == false)
                {
                    BreakSpellShields(unit);
                    nextBuffVars.TickDamage = tickDamage;
                    SpellBuffAdd((ObjAIBase)owner, unit, "UrgotCorrosiveDebuff", 1, 1, buffDuration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, true, false, default);
                    SpellBuffAdd((ObjAIBase)owner, unit, default, 1, 1, buffDuration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SHRED, 0, true, true, false, default);
                }
                else
                {
                    if(unit is Champion)
                    {
                        BreakSpellShields(unit);
                        nextBuffVars.TickDamage = tickDamage;
                        SpellBuffAdd((ObjAIBase)owner, unit, "UrgotCorrosiveDebuff", 1, 1, buffDuration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, true, false, default);
                    }
                    else
                    {
                        canSee = CanSeeTarget(owner, unit);
                        if(canSee == true)
                        {
                            BreakSpellShields(unit);
                            nextBuffVars.TickDamage = tickDamage;
                            SpellBuffAdd((ObjAIBase)owner, unit, "UrgotCorrosiveDebuff", 1, 1, buffDuration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0, true, true, false, default);
                        }
                    }
                }
            });
        }
    }
}

namespace Spells
{
    public class UrgotSwap2 : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? GateParticle = null;
            public object? TargetPos = null;
            public object? DefInc = null;
        }
        public int[] effect0 = {80, 105, 130};
        Particle? gateParticle = null;
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamOfOwner;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            int defInc = 0;
            int manaRefund = 0;
            if(target is Champion)
            {
                targetPos = GetCastSpellTargetPos();
                teamOfOwner = GetTeamID(default);
                SpellEffectCreate(out this.gateParticle, out _, "UrgotSwapTarget.troy", default, teamOfOwner, 200, 0, TeamId.TEAM_UNKNOWN, default, false, target, default, default, target, "root", default, false, default, default, false, false, default, default);
                nextBuffVars.GateParticle = this.gateParticle;
                nextBuffVars.TargetPos = targetPos;
                FaceDirection(owner, targetPos);
                SpellBuffAdd((ObjAIBase)owner, owner, "UrgotSwapMarker", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, target, "UrgotSwapMarker", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)target, owner, "UrgotSwapMissile", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                defInc = this.effect0[level];
                nextBuffVars.DefInc = defInc;
                SpellBuffAdd((ObjAIBase)attacker, attacker, "UrgotSwapDef", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                BreakSpellShields(target);
                SpellBuffAdd((ObjAIBase)attacker, target, "Suppression", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SUPPRESSION, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)owner, target, "UrgotSwapTarget", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)target, owner, default, 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            else
            {
                SetSlotSpellCooldownTimeVer2(5, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                manaRefund = 120;
                IncPAR(owner, manaRefund);
            }
        }
    }
}



namespace Spells
{
    public class UrgotSwapMissile : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int count = 0;
            //object? missileNetworkID = null;
            count = GetBuffCountFromAll(target, "UrgotSwapMarker");
            if(count != 0)
            {
                DestroyMissile(missileNetworkID);
            }
        }
    }
}
namespace Spells
{
    public class UrgotSwapMissile2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int count = 0;
            //object? missileNetworkID = null;
            count = GetBuffCountFromAll(target, "UrgotSwapMarker");
            if(count != 0)
            {
                DestroyMissile(missileNetworkID);
            }
        }
    }
}

namespace Spells
{
    public class UrgotTerrorCapacitorActive2 : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? Shield = null;
        }
        public int[] effect0 = {80, 140, 200, 260, 320};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int shieldAmount = 0;
            float abilityPower = 0;
            float bonusShield = 0;
            float shield = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            shieldAmount = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(owner);
            bonusShield = Math(abilityPower, MathOp.MO_MULTIPLY, 0.8f);
            shield = Math(shieldAmount, MathOp.MO_ADD, bonusShield);
            nextBuffVars.Shield = shield;
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 7, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class VayneCondemn : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            charVars.CastPoint = GetUnitPosition(owner);
            SpellCast((ObjAIBase)owner, target, target.Position, target.Position, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}
namespace Spells
{
    public class VayneCondemnMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? CastPoint = null;
            public object? Damage = null;
        }
        public int[] effect0 = {45, 80, 115, 150, 185};
        public float[] effect1 = {0.04f, 0.05f, 0.06f, 0.07f, 0.08f};
        public int[] effect2 = {20, 30, 40, 50, 60};
        public int[] effect3 = {45, 80, 115, 150, 185};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            float damage = 0;
            float aD = 0;
            float bonusDamage = 0;
            Particle? hi = null;
            //object? _ = null;
            int count = 0;
            TeamId teamID;
            TeamId teamIDTarget;
            Particle? gragas = null;
            float tarMaxHealth = 0;
            float rankScaling = 0;
            int flatScaling = 0;
            float damageToDeal = 0;
            nextBuffVars.CastPoint = charVars.CastPoint;
            damage = this.effect0[level];
            aD = GetFlatPhysicalDamageMod(owner);
            bonusDamage = Math(aD, MathOp.MO_MULTIPLY, 0.5f);
            damage = Math(damage, MathOp.MO_ADD, bonusDamage);
            nextBuffVars.Damage = damage;
            SpellEffectCreate(out hi, out _, "vayne_E_tar.troy", default, TeamId.TEAM_NEUTRAL, 200, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, target.Position, target, default, default, true, false, false, false, false, default, default);
            if(GetBuffCountFromCaster(attacker, attacker, "VayneSilveredBolts") > 0)
            {
                count = GetBuffCountFromCaster(target, attacker, "VayneSilveredDebuff");
                if(count == 2)
                {
                    teamID = GetTeamID(default);
                    teamIDTarget = GetTeamID(default);
                    SpellEffectCreate(out gragas, out _, "vayne_W_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, target, false, default, default, target.Position, target, default, default, true, false, false, false, false, default, default);
                    level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    SpellBuffClear(target, "VayneSilveredDebuff");
                    tarMaxHealth = GetMaxHealth(target);
                    rankScaling = this.effect1[level];
                    flatScaling = this.effect2[level];
                    damageToDeal = Math(tarMaxHealth, MathOp.MO_MULTIPLY, rankScaling);
                    damageToDeal = Math(damageToDeal, MathOp.MO_ADD, flatScaling);
                    if(teamIDTarget == TeamId.TEAM_NEUTRAL)
                    {
                        damageToDeal = Math(damageToDeal, MathOp.MO_MIN, 200);
                    }
                    ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 0, false, false, (ObjAIBase)attacker);
                }
                else
                {
                    SpellBuffAdd((ObjAIBase)attacker, target, "VayneSilveredDebuff", 3, 1, 3.5f, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                }
            }
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            ApplyDamage((ObjAIBase)attacker, target, this.effect3[level], DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.5f, 0.5f, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, "VayneCondemnMissile", 1, 1, 0.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class VayneInquisition : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int ADMod = 0;
        }
        public int[] effect0 = {25, 40, 55};
        public int[] effect1 = {8, 10, 12};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.ADMod = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, target, "VayneInquisition", 1, 1, this.effect1[level], nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}






namespace Spells
{
    public class VayneTumble : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DashSpeed = 0;
            public int Distance = 0;
            public object? TargetPos = null;
        }
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove == false)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 ownerPos;
            float moveSpeed = 0;
            float dashSpeed = 0;
            float distance = 0;
            Particle? hi = null;
            //object? _ = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            moveSpeed = GetMovementSpeed(owner);
            dashSpeed = Math(moveSpeed, MathOp.MO_ADD, 500);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            SpellEffectCreate(out hi, out _, "vayne_ult_invis_cas_02.troy", default, TeamId.TEAM_NEUTRAL, 150, 0, TeamId.TEAM_UNKNOWN, default, false, owner, "C_BUFFBONE_GLB_CHEST_LOC", owner.Position, owner, default, default, true, false, false, false, false, default, default);
            if(distance >= 0)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 300, 0);
            }
            nextBuffVars.DashSpeed = 900;
            nextBuffVars.Distance = 300;
            nextBuffVars.TargetPos = targetPos;
            SetSlotSpellCooldownTimeVer2(0, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            SealSpellSlot(0, SpellSlotType.SpellSlots, (ObjAIBase)owner, true, SpellbookType.SPELLBOOK_CHAMPION);
            SpellBuffAdd((ObjAIBase)attacker, owner, "VayneTumble", 1, 1, 0.5f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0.1f, true, false, false, default);
            CancelAutoAttack(owner, true);
            if(GetBuffCountFromCaster(owner, owner, "VayneInquisition") > 0)
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "VayneTumbleFade", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
            SpellBuffAdd((ObjAIBase)attacker, owner, "VayneTumbleBonus", 1, 1, 6.75f, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0.1f, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class VayneTumbleAttack : Script
    {
        public float[] effect0 = {0.3f, 0.35f, 0.4f, 0.45f, 0.5f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float critChance = 0;
            float scalingDamage = 0;
            float baseAttackDamage = 0;
            HitResult? hitResult = null;
            float damageVar = 0;
            float critDamage = 0;
            Particle? hi = null;
            //object? _ = null;
            critChance = GetFlatCritChanceMod(attacker);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            scalingDamage = this.effect0[level];
            baseAttackDamage = GetTotalAttackDamage(owner);
            if(target is ObjAIBase)
            {
                if(target is BaseTurret)
                {
                    hitResult = HitResult.HIT_Normal;
                    damageVar = baseAttackDamage;
                }
                else
                {
                    if(RandomChance() < critChance)
                    {
                        hitResult = HitResult.HIT_Critical;
                        critDamage = GetFlatCritDamageMod(attacker);
                        critDamage = Math(critDamage, MathOp.MO_ADD, 2);
                        scalingDamage = Math(scalingDamage, MathOp.MO_DIVIDE, critDamage);
                    }
                    else
                    {
                        hitResult = HitResult.HIT_Normal;
                    }
                    scalingDamage = Math(1, MathOp.MO_ADD, scalingDamage);
                    damageVar = Math(baseAttackDamage, MathOp.MO_MULTIPLY, scalingDamage);
                }
            }
            else
            {
                hitResult = HitResult.HIT_Normal;
                damageVar = baseAttackDamage;
            }
            ApplyDamage((ObjAIBase)attacker, target, damageVar, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
            if(target is ObjAIBase)
            {
                if(target is BaseTurret)
                {
                    
                }
                else
                {
                    SpellEffectCreate(out hi, out _, "vayne_Q_tar.troy", default, TeamId.TEAM_NEUTRAL, 200, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, owner.Position, target, default, default, true, false, false, false, false, default, default);
                    SpellBuffRemove(owner, "VayneTumbleBonus", (ObjAIBase)owner, 0);
                    SpellBuffRemove(owner, "VayneTumbleFade", (ObjAIBase)owner, 0);
                }
            }
        }
    }
}



namespace Spells
{
    public class VayneTumbleUltAttack : Script
    {
        public float[] effect0 = {0.4f, 0.45f, 0.5f, 0.55f, 0.6f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float critChance = 0;
            float scalingDamage = 0;
            float baseAttackDamage = 0;
            HitResult? hitResult = null;
            float damageVar = 0;
            float critDamage = 0;
            Particle? hi = null;
            //object? _ = null;
            critChance = GetFlatCritChanceMod(attacker);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            scalingDamage = this.effect0[level];
            baseAttackDamage = GetTotalAttackDamage(owner);
            if(target is ObjAIBase)
            {
                if(target is BaseTurret)
                {
                    hitResult = HitResult.HIT_Normal;
                    damageVar = baseAttackDamage;
                }
                else
                {
                    if(RandomChance() < critChance)
                    {
                        hitResult = HitResult.HIT_Critical;
                        critDamage = GetFlatCritDamageMod(attacker);
                        critDamage = Math(critDamage, MathOp.MO_ADD, 2);
                        scalingDamage = Math(scalingDamage, MathOp.MO_DIVIDE, critDamage);
                    }
                    else
                    {
                        hitResult = HitResult.HIT_Normal;
                    }
                    scalingDamage = Math(1, MathOp.MO_ADD, scalingDamage);
                    damageVar = Math(baseAttackDamage, MathOp.MO_MULTIPLY, scalingDamage);
                }
            }
            else
            {
                hitResult = HitResult.HIT_Normal;
                damageVar = baseAttackDamage;
            }
            ApplyDamage((ObjAIBase)attacker, target, damageVar, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
            if(target is ObjAIBase)
            {
                if(target is BaseTurret)
                {
                    
                }
                else
                {
                    SpellEffectCreate(out hi, out _, "vayne_Q_tar.troy", default, TeamId.TEAM_NEUTRAL, 200, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, owner.Position, target, default, default, true, default, default, false, false, default, default);
                    SpellBuffRemove(owner, "VayneTumbleBonus", (ObjAIBase)owner, 0);
                    SpellBuffRemove(owner, "VayneTumbleFade", (ObjAIBase)owner, 0);
                }
            }
        }
    }
}
namespace Spells
{
    public class VeigarBalefulStrike : Script
    {
        public int[] effect0 = {80, 125, 170, 215, 260};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            if(!target.IsDead)
            {
                SpellBuffAdd((ObjAIBase)target, owner, default, 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class VeigarDarkMatter : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DamageAmount = 0;
        }
        public int[] effect0 = {120, 170, 220, 270, 320};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Region? bubbleID = null;
            Minion? other3 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            teamOfOwner = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            bubbleID = AddPosPerceptionBubble(teamOfOwner, 300, targetPos, 1, default, false);
            other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", targetPos, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, default, true, (Champion)owner, default);
            nextBuffVars.DamageAmount = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 1.2f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class VeigarEventHorizon : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public float StunDuration = 0;
        }
        public float[] effect0 = {1.5f, 1.75f, 2, 2.25f, 2.5f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            TeamId teamOfOwner;
            Minion? other3 = null;
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.TargetPos = targetPos;
            teamOfOwner = GetTeamID(default);
            other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", targetPos, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, false, 0, false, true, (Champion)owner, default);
            nextBuffVars.StunDuration = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, other3, default, 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.DAMAGE, 0.1f, true, false, false, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            ApplyAssistMarker((ObjAIBase)attacker, target, 10);
        }
    }
}


namespace Spells
{
    public class VeigarPrimordialBurst : Script
    {
        public int[] effect0 = {250, 375, 500};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float targetAP = 0;
            float totalDamage = 0;
            targetAP = GetFlatMagicDamageMod(target);
            targetAP = Math(targetAP, MathOp.MO_MULTIPLY, 0.8f);
            totalDamage = this.effect0[level];
            totalDamage = Math(targetAP, MathOp.MO_ADD, totalDamage);
            ApplyDamage((ObjAIBase)attacker, target, totalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 1.2f, 1, false, false, (ObjAIBase)attacker);
        }
    }
}




namespace Spells
{
    public class ViktorChaosStorm : Script
    {
        public int[] effect0 = {0, 400, 800, 600, 800};
        public int[] effect1 = {0, 25, 50};
        public int[] effect2 = {150, 250, 350};
        Fade? blah = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Pet? other1 = null;
            //object? unit = null;
            //object? nextBuffVars = null;
            targetPos = GetCastSpellTargetPos();
            other1 = SpawnPet("Tibbers", "TempMovableChar", "InfernalGuardian", "StormIdle.lua", 7, targetPos, this.effect0[level], this.effect1[level]);
            ForNClosestUnitsInTargetArea(owner, targetPos, 350, "AffectEnemies AffectHeroes ", 1, true, default, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)owner, unit, "ViktorChaosStormGuide", 1, 1, 7, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            });
            SetTargetable(other1, default);
            SetInvulnerable(other1, default);
            StopMove(other1);
            this.blah = PushCharacterFade(other1, 0, default, this.blah);
            SpellBuffAdd((ObjAIBase)owner, other1, "ViktorChaosStormAOE", 1, 1, 7, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "ViktorChaosStormTimer", 1, 1, 7, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "ViktorExpirationTimer", 1, 1, 7, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SetSpell((ObjAIBase)owner, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, "ViktorChaosStormGuide");
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Vector3 spellTargetPos;
            int baseDamage = 0;
            float aPPreMod = 0;
            float aPPostMod = 0;
            float finalDamage = 0;
            Particle? hi = null;
            //object? _ = null;
            //object? unit = null;
            spellTargetPos = GetCastSpellTargetPos();
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            baseDamage = this.effect2[level];
            aPPreMod = GetFlatMagicDamageMod(owner);
            aPPostMod = Math(0.55f, MathOp.MO_MULTIPLY, aPPreMod);
            finalDamage = Math(baseDamage, MathOp.MO_ADD, aPPostMod);
            BreakSpellShields(target);
            ApplyDamage((ObjAIBase)attacker, target, finalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
            ApplySilence(owner, target, 0.5f);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 2000, "AffectFriends AffectMinions AffectHeroes AffectUntargetable ", "ViktorChaosStormAOE", true, (unit) => 
            {
                SpellEffectCreate(out hi, out _, "Viktor_ChaosStorm_hit.troy", default, TeamId.TEAM_NEUTRAL, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, "Head", default, target, "Spine", default, true, false, false, false, false, default, default);
            });
        }
    }
}

namespace Spells
{
    public class ViktorChaosStormGuide : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float hMCSStartTime = 0;
            float hMCSCurrTime = 0;
            float remainingBuffTime = 0;
            bool? hasTarget = null;
            Vector3 centerPos;
            //object? unit = null;
            //object? nextBuffVars = null;
            TeamId teamID;
            Minion? other2 = null;
            hMCSStartTime = GetBuffStartTime(owner, "ViktorChaosStormGuide");
            hMCSCurrTime = GetTime();
            remainingBuffTime = Math(hMCSCurrTime, MathOp.MO_MULTIPLY, hMCSStartTime);
            hasTarget = false;
            centerPos = GetUnitPosition(owner);
            targetPos = GetCastSpellTargetPos();
            ForEachUnitInTargetArea((ObjAIBase)owner, centerPos, 25000, "AffectEnemies AffectFriends AffectMinions AffectHeroes AffectUntargetable ", "ViktorChaosStormGuide", true, (unit) => 
            {
                if(GetBuffCountFromCaster(unit, owner, "ViktorChaosStormGuide") > 0)
                {
                    if(unit is Champion)
                    {
                        SpellBuffRemove(unit, "ViktorChaosStormGuide", (ObjAIBase)owner, 0);
                    }
                    else
                    {
                        SetInvulnerable(unit, default);
                        ApplyDamage(unit, unit, 25000, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 0, false, false, unit);
                    }
                }
            });
            ForNClosestUnitsInTargetArea(owner, targetPos, 150, "AffectEnemies AffectHeroes ", 1, true, default, (unit) => 
            {
                SpellBuffAdd((ObjAIBase)attacker, unit, "ViktorChaosStormGuide", 1, 1, 7, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                hasTarget = true;
            });
            if(hasTarget == false)
            {
                teamID = GetTeamID(default);
                other2 = SpawnMinion("GuideMarker", "TestCube", default, targetPos, teamID, false, true, false, true, false, true, 0, false, false, default, default);
                SpellBuffAdd((ObjAIBase)attacker, other2, "ViktorExpirationTimer", 1, 1, 7, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                SpellBuffAdd((ObjAIBase)attacker, other2, "ViktorChaosStormGuide", 1, 1, 7 + remainingBuffTime, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
            else
            {
                
            }
        }
    }
}

namespace Spells
{
    public class ViktorDeathRay : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? DamageForDot = null;
        }
        public int[] effect0 = {70, 115, 160, 205, 250};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Vector3 targetPosStart;
            Vector3 targetPosEnd;
            Minion? other1 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            TeamId teamID;
            int baseDamage = 0;
            float aPVAL = 0;
            float aPBONUS = 0;
            float totalDamage = 0;
            float damageForDot = 0;
            //object? unit = null;
            Particle? a = null;
            //object? _ = null;
            PlayAnimation("Spell3", 0, owner, false, false, false);
            teamOfOwner = GetTeamID(default);
            targetPosStart = GetCastSpellTargetPos();
            targetPosEnd = GetCastSpellDragEndPos();
            other1 = SpawnMinion("MaokaiSproutling", "MaokaiSproutling", "idle.lua", targetPosStart, teamOfOwner ?? TEAM_CASTER, false, false, false, false, true, true, 0, false, true, (Champion)owner, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "ViktorExpirationTimer", 1, 1, 2.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            FaceDirection(other1, targetPosEnd);
            targetPosEnd = GetPointByUnitFacingOffset(other1, 700, 0);
            teamID = GetTeamID(default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "ViktorDeathRay", 1, 1, 3, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            Move(other1, targetPosEnd, 550, 0, 0, ForceMovementType.FURTHEST_WITHIN_RANGE, ForceMovementOrdersType.CANCEL_ORDER, 500, ForceMovementOrdersFacing.FACE_MOVEMENT_DIRECTION);
            baseDamage = this.effect0[level];
            aPVAL = GetFlatMagicDamageMod(owner);
            aPBONUS = Math(aPVAL, MathOp.MO_MULTIPLY, 0.7f);
            totalDamage = Math(aPBONUS, MathOp.MO_ADD, baseDamage);
            damageForDot = Math(totalDamage, MathOp.MO_MULTIPLY, 0.075f);
            ForEachUnitInTargetArea((ObjAIBase)owner, targetPosStart, 140, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                if(GetBuffCountFromCaster(unit, owner, "ViktorDeathRayBuff") == 0)
                {
                    BreakSpellShields(unit);
                    ApplyDamage((ObjAIBase)attacker, unit, totalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 0, false, false, (ObjAIBase)attacker);
                    SpellEffectCreate(out a, out _, "ViktorEntropicBeam_hit.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd((ObjAIBase)owner, unit, "ViktorDeathRayBuff", 1, 1, 1.25f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
                    if(GetBuffCountFromCaster(owner, owner, "ViktorAugmentE") > 0)
                    {
                        nextBuffVars.DamageForDot = damageForDot;
                        SpellBuffAdd((ObjAIBase)owner, unit, "ViktorDeathRayDOT", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
                    }
                }
            });
        }
    }
}



namespace Spells
{
    public class ViktorGravitonField : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public int ManaCost = 0;
        }
        public int[] effect0 = {20, 25, 30};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.ManaCost = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "ViktorGravitonField", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class ViktorGravitonFieldAugment : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public int ManaCost = 0;
        }
        public int[] effect0 = {20, 25, 30};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.ManaCost = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "ViktorGravitonField", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}





namespace Spells
{
    public class ViktorPowerTransfer : Script
    {
        public int[] effect0 = {80, 125, 170, 215, 260};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            //object? nextBuffVars = null;
            int baseDamage = 0;
            float aPVAL = 0;
            float aPBONUS = 0;
            teamID = GetTeamID(default);
            SpellBuffAdd((ObjAIBase)attacker, owner, "ViktorPowerTransfer", 1, 1, 0.25f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            baseDamage = this.effect0[level];
            aPVAL = GetFlatMagicDamageMod(owner);
            aPBONUS = Math(aPVAL, MathOp.MO_MULTIPLY, 0.65f);
            charVars.TotalDamage = Math(aPBONUS, MathOp.MO_ADD, baseDamage);
            if(target is Champion)
            {
                charVars.IsChampTarget = true;
                ApplyDamage((ObjAIBase)attacker, target, charVars.TotalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 1, false, false, (ObjAIBase)attacker);
            }
            else
            {
                charVars.IsChampTarget = true;
                ApplyDamage((ObjAIBase)attacker, target, charVars.TotalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 1, false, false, (ObjAIBase)attacker);
            }
            targetPos = GetUnitPosition(target);
            SpellCast((ObjAIBase)owner, owner, default, default, true, 2, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, targetPos);
        }
    }
}

namespace Spells
{
    public class ViktorPowerTransferReturn : Script
    {
        public int[] effect0 = {40, 65, 90, 115, 140};
        public float[] effect1 = {0.5f, 0.5f, 0.5f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float pAR = 0;
            int baseDamage = 0;
            float aoEDamage = 0;
            float bonusDamage = 0;
            float totalDamage = 0;
            TeamId ownerTeam;
            TeamId targetTeam;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            pAR = GetMaxPAR(owner);
            baseDamage = this.effect0[level];
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            aoEDamage = this.effect1[level];
            bonusDamage = Math(pAR, MathOp.MO_MULTIPLY, 0.08f);
            totalDamage = Math(bonusDamage, MathOp.MO_ADD, baseDamage);
            aoEDamage = Math(totalDamage, MathOp.MO_MULTIPLY, aoEDamage);
            ownerTeam = GetTeamID(default);
            targetTeam = GetTeamID(default);
            if(owner.Team != target.Team)
            {
                ApplyDamage((ObjAIBase)attacker, target, totalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.2f, 1, false, false, (ObjAIBase)attacker);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "ViktorPowerTransferReturn", 1, 1, 3, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            }
        }
    }
}
namespace Spells
{
    public class VisionWard : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            other3 = SpawnMinion("VisionWard", "VisionWard", "idle.lua", targetPos, teamID, true, true, false, false, false, false, 0, true, false, (Champion)owner, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "SharedWardBuff", 1, 1, 180, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, default, 1, 1, 180, default, BuffAddType.REPLACE_EXISTING, BuffType.INVISIBILITY, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "ItemPlacementMissile", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SetSpell((ObjAIBase)owner, 7, SpellSlotType.ExtraSlots, SpellbookType.SPELLBOOK_CHAMPION, "ItemPlacementMissile");
            FaceDirection(owner, targetPos);
            if(avatarVars.Scout == true)
            {
                SpellBuffAdd((ObjAIBase)attacker, other3, "MasteryScoutBuff", 1, 1, 180, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 7, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
        }
    }
}




namespace Spells
{
    public class VladimirBasicAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class VladimirBasicAttack2 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class VladimirBasicAttack3 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class VladimirBasicAttack4 : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseAttackDamage = 0;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}

namespace Spells
{
    public class VladimirCritAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float baseAttackDamage = 0;
            hitResult = HitResult.HIT_Critical;
            baseAttackDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)attacker, target, baseAttackDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
        }
    }
}

namespace Spells
{
    public class VladimirHemoplague : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float currentHealth = 0;
            TeamId teamID;
            Vector3 ownerPos;
            float distance = 0;
            Minion? other2 = null;
            //object? nextBuffVars = null;
            currentHealth = GetHealth(owner);
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(targetPos, ownerPos);
            FaceDirection(owner, targetPos);
            if(distance > 701)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 1050, 0);
            }
            other2 = SpawnMinion("k", "TestCubeRender", "idle.lua", targetPos, teamID, true, true, false, true, true, true, 0, false, true, (Champion)attacker, default);
            SpellCast((ObjAIBase)owner, other2, targetPos, targetPos, false, 2, SpellSlotType.ExtraSlots, level, false, true, false, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other2, "ExpirationTimer", 1, 1, 1, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class VladimirHemoplagueMissile : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DamagePerLevel = 0;
            public float DamageIncrease = 0;
            public object? TargetPos = null;
        }
        public int[] effect0 = {150, 250, 350};
        public float[] effect1 = {-0.14f, -0.14f, -0.14f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            TeamId teamofOwner;
            int vladSkinID = 0;
            Particle? particle = null;
            //object? _ = null;
            //object? unit = null;
            SpellBuffAdd((ObjAIBase)owner, owner, "UnlockAnimation", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            PlayAnimation("Spell4", 0.5f, owner, false, true, true);
            teamofOwner = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            vladSkinID = GetSkinID(owner);
            if(vladSkinID == 5)
            {
                if(teamofOwner == TeamId.TEAM_BLUE)
                {
                    SpellEffectCreate(out particle, out _, "VladHemoplague_BloodKing_nova.troy", default, TeamId.TEAM_BLUE, 100, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, target.Position, owner, default, target.Position, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out particle, out _, "VladHemoplague_BloodKing_nova.troy", default, TeamId.TEAM_PURPLE, 100, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, target.Position, owner, default, target.Position, true, false, false, false, false, default, default);
                }
            }
            else
            {
                if(teamofOwner == TeamId.TEAM_BLUE)
                {
                    SpellEffectCreate(out particle, out _, "VladHemoplague_nova.troy", default, TeamId.TEAM_BLUE, 100, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, target.Position, owner, default, target.Position, true, false, false, false, false, default, default);
                }
                else
                {
                    SpellEffectCreate(out particle, out _, "VladHemoplague_nova.troy", default, TeamId.TEAM_PURPLE, 100, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, target.Position, owner, default, target.Position, true, false, false, false, false, default, default);
                }
            }
            nextBuffVars.DamagePerLevel = this.effect0[level];
            nextBuffVars.DamageIncrease = this.effect1[level];
            nextBuffVars.TargetPos = targetPos;
            ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                SpellBuffAdd((ObjAIBase)attacker, unit, "VladimirHemoplagueDebuff", 1, 1, 5, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.DAMAGE, 0, true, false, false, default);
            });
        }
    }
}
namespace Spells
{
    public class VladimirSanguinePool : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public float DamageTick = 0;
        }
        public float[] effect0 = {-0.4f, -0.4f, -0.4f, -0.4f, -0.4f};
        public float[] effect1 = {20, 33.75f, 47.5f, 61.25f, 75};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float currentHealth = 0;
            float healthCost = 0;
            Particle? hi = null;
            //object? _ = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            float damageTick = 0;
            float maxHP = 0;
            int baseHP = 0;
            int healthPerLevel = 0;
            float levelHealth = 0;
            float totalBaseHealth = 0;
            float totalBonusHealth = 0;
            float healthMod = 0;
            DestroyMissileForTarget(owner);
            currentHealth = GetHealth(owner);
            healthCost = Math(currentHealth, MathOp.MO_MULTIPLY, -0.2f);
            IncHealth(owner, healthCost, owner);
            SpellEffectCreate(out hi, out _, "Vlad_Bloodking_Blood_Skin.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, owner.Position, owner, default, default, true, false, false, false, false, default, default);
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            damageTick = this.effect1[level];
            maxHP = GetMaxHealth(owner);
            baseHP = 400;
            healthPerLevel = 85;
            level = GetLevel(owner);
            levelHealth = Math(level, MathOp.MO_MULTIPLY, healthPerLevel);
            totalBaseHealth = Math(levelHealth, MathOp.MO_ADD, baseHP);
            totalBonusHealth = Math(maxHP, MathOp.MO_SUBTRACT, totalBaseHealth);
            healthMod = Math(totalBonusHealth, MathOp.MO_MULTIPLY, 0.0375f);
            nextBuffVars.DamageTick = Math(healthMod, MathOp.MO_ADD, damageTick);
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class VladimirTidesofBlood : Script
    {
        public int[] effect0 = {30, 40, 50, 60, 70};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int count = 0;
            float multiplier = 0;
            float healthCost = 0;
            float temp1 = 0;
            TeamId casterID;
            bool? canSee = null;
            //object? unit = null;
            //object? nextBuffVars = null;
            count = GetBuffCountFromAll(owner, "VladimirTidesofBloodCost");
            charVars.NumTideStacks = count;
            multiplier = Math(count, MathOp.MO_MULTIPLY, 0.25f);
            multiplier = Math(multiplier, MathOp.MO_ADD, 1);
            healthCost = this.effect0[level];
            healthCost = Math(healthCost, MathOp.MO_MULTIPLY, multiplier);
            temp1 = GetHealth(owner);
            if(healthCost >= temp1)
            {
                healthCost = Math(temp1, MathOp.MO_SUBTRACT, 1);
            }
            healthCost = Math(healthCost, MathOp.MO_MULTIPLY, -1);
            IncHealth(owner, healthCost, owner);
            casterID = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 620, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                canSee = CanSeeTarget(owner, target);
                if(canSee == true)
                {
                    SpellCast((ObjAIBase)owner, unit, owner.Position, owner.Position, false, 4, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
                }
            });
            SpellBuffAdd((ObjAIBase)attacker, attacker, "VladimirTidesofBloodCost", 4, 1, 10, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "VladimirTidesofBloodNuke", 1, 1, 10, default, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class VladimirTidesofBloodHeal : Script
    {
        public float[] effect0 = {30, 57.5f, 85, 112.5f, 140};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float aPMod = 0;
            Particle? self = null;
            //object? _ = null;
            aPMod = GetFlatMagicDamageMod(attacker);
            aPMod = Math(aPMod, MathOp.MO_MULTIPLY, 0.325f);
            IncHealth(target, aPMod + this.effect0[level], attacker);
            SpellEffectCreate(out self, out _, "BriefHeal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, target, false, target, default, default, target, default, default, false, default, default, default, default, default, default);
            ApplyAssistMarker((ObjAIBase)attacker, target, 10);
        }
    }
}
namespace Spells
{
    public class VladimirTidesofBloodNuke : Script
    {
        public int[] effect0 = {60, 90, 120, 150, 180};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float multiplier = 0;
            int baseDamage = 0;
            float finalDamage = 0;
            TeamId teamID;
            int vladimirSkinID = 0;
            Particle? a = null;
            //object? _ = null;
            multiplier = Math(charVars.NumTideStacks, MathOp.MO_MULTIPLY, 0.25f);
            multiplier = Math(multiplier, MathOp.MO_ADD, 1);
            baseDamage = this.effect0[level];
            finalDamage = Math(baseDamage, MathOp.MO_MULTIPLY, multiplier);
            BreakSpellShields(target);
            ApplyDamage((ObjAIBase)owner, target, finalDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.45f, 1, false, false, (ObjAIBase)attacker);
            teamID = GetTeamID(default);
            vladimirSkinID = GetSkinID(owner);
            if(vladimirSkinID == 5)
            {
                SpellEffectCreate(out a, out _, "VladTidesofBlood_BloodKing_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            }
            else
            {
                SpellEffectCreate(out a, out _, "VladTidesofBlood_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            }
        }
    }
}
namespace Spells
{
    public class VladimirTransfusion : Script
    {
        public int[] effect0 = {0, 0, 0, 0, 0};
        public int[] effect1 = {90, 125, 160, 195, 230};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            float healthCost = 0;
            float temp1 = 0;
            healthCost = this.effect0[level];
            temp1 = GetHealth(owner);
            if(healthCost >= temp1)
            {
                healthCost = Math(temp1, MathOp.MO_SUBTRACT, 1);
            }
            healthCost = Math(healthCost, MathOp.MO_MULTIPLY, -1);
            IncHealth(owner, healthCost, owner);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            targetPos = GetCastSpellTargetPos();
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            ApplyDamage((ObjAIBase)attacker, target, this.effect1[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
            SpellCast((ObjAIBase)attacker, owner, attacker.Position, owner.Position, true, 1, SpellSlotType.ExtraSlots, level, true, true, false, false, false, targetPos);
        }
    }
}
namespace Spells
{
    public class VladimirTransfusionHeal : Script
    {
        public int[] effect0 = {15, 25, 35, 45, 55};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int baseHeal = 0;
            float abilityPower = 0;
            float abilityPowerMod = 0;
            float totalHeal = 0;
            Particle? ar = null;
            //object? _ = null;
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            baseHeal = this.effect0[level];
            abilityPower = GetFlatMagicDamageMod(attacker);
            abilityPowerMod = Math(abilityPower, MathOp.MO_MULTIPLY, 0.25f);
            totalHeal = Math(abilityPowerMod, MathOp.MO_ADD, baseHeal);
            IncHealth(target, totalHeal, attacker);
            SpellEffectCreate(out ar, out _, "VampHeal.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, attacker, default, default, target, default, default, false, false, false, false, false, default, default);
        }
    }
}



namespace Spells
{
    public class VoidWalk : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? CastPos = null;
        }
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 castPos;
            Vector3 ownerPos;
            float distance = 0;
            Particle? p3 = null;
            //object? _ = null;
            Particle? ar1 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            string? name = null;
            string? name2 = null;
            string? name1 = null;
            string? name3 = null;
            string? name5 = null;
            string? name4 = null;
            DestroyMissileForTarget(owner);
            castPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, castPos);
            FaceDirection(owner, castPos);
            if(distance > 450)
            {
                castPos = GetPointByUnitFacingOffset(owner, 425, 0);
            }
            StopChanneling((ObjAIBase)target, ChannelingStopCondition.Cancel, ChannelingStopSource.Move);
            SpellEffectCreate(out p3, out _, "summoner_flashback.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, castPos, target, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(out ar1, out _, "summoner_flash.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
            if(GetBuffCountFromCaster(owner, owner, "FlashBeenHit") > 0)
            {
                nextBuffVars.CastPos = castPos;
                SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, default, default, default);
            }
            else
            {
                TeleportToPosition(owner, castPos);
            }
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "RanduinsOmen")
            {
                SetSlotSpellCooldownTimeVer2(60, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name1 == "RanduinsOmen")
            {
                SetSlotSpellCooldownTimeVer2(60, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name2 == "RanduinsOmen")
            {
                SetSlotSpellCooldownTimeVer2(60, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name3 == "RanduinsOmen")
            {
                SetSlotSpellCooldownTimeVer2(60, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name4 == "RanduinsOmen")
            {
                SetSlotSpellCooldownTimeVer2(60, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name5 == "RanduinsOmen")
            {
                SetSlotSpellCooldownTimeVer2(60, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
        }
    }
}
namespace Spells
{
    public class VolibearE : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float VolibearESlow = 0;
            public int VolibearEExtender = 0;
        }
        public float[] effect0 = {-0.3f, -0.35f, -0.4f, -0.45f, -0.5f};
        public int[] effect1 = {2, 2, 2, 2, 2};
        public int[] effect2 = {60, 105, 150, 195, 240};
        public int[] effect3 = {3, 3, 3, 3, 3};
        Particle? partname = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            //object? _ = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            int damageToDeal = 0;
            Particle? targetParticle = null;
            //object? unit = null;
            teamID = GetTeamID(default);
            SpellEffectCreate(out this.partname, out _, "volibear_E_aoe_indicator.troy", default, teamID, 350, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, owner.Position, target, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(out this.partname, out _, "volibear_E_aoe_indicator_02.troy", default, teamID, 350, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, owner.Position, target, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(out _, out _, "Volibear_E_cas_blast.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, owner.Position, default, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(out _, out _, "Volibear_E_cas.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, owner.Position, default, default, default, true, false, false, false, false, default, default);
            nextBuffVars.VolibearESlow = this.effect0[level];
            nextBuffVars.VolibearEExtender = this.effect1[level];
            damageToDeal = this.effect2[level];
            ForEachUnitInTargetArea((ObjAIBase)attacker, attacker.Position, 425, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                SpellEffectCreate(out targetParticle, out _, "volibear_E_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                BreakSpellShields(unit);
                SpellBuffAdd((ObjAIBase)attacker, unit, default, 1, 1, this.effect3[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)attacker, unit, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 0, false, false, (ObjAIBase)attacker);
                if(unit is not Champion)
                {
                    if(!unit.IsDead)
                    {
                        ApplyFear(owner, unit, 2);
                    }
                }
            });
        }
    }
}







namespace Spells
{
    public class VolibearQ : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
            public float SpeedMod = 0;
        }
        public int[] effect0 = {12, 11, 10, 9, 8};
        public float[] effect1 = {0.45f, 0.45f, 0.45f, 0.45f, 0.45f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpellCooldown = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SetSlotSpellCooldownTimeVer2(0, 0, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            nextBuffVars.SpeedMod = this.effect1[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "VolibearQSpeed", 1, 1, 4, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class VolibearQAttack : Script
    {
        class TargetExecute_nextBuffVars
        {
            public object? BouncePos = null;
        }
        public int[] effect0 = {30, 60, 90, 120, 150};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float critChance = 0;
            float bonusDamage = 0;
            float baseAttackDamage = 0;
            HitResult? hitResult = null;
            float critDamage = 0;
            float damageVar = 0;
            TeamId teamID;
            Particle? kennenss = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            critChance = GetFlatCritChanceMod(attacker);
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            bonusDamage = this.effect0[level];
            baseAttackDamage = GetTotalAttackDamage(owner);
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    if(RandomChance() < critChance)
                    {
                        hitResult = HitResult.HIT_Critical;
                        critDamage = GetFlatCritDamageMod(attacker);
                        critDamage = Math(critDamage, MathOp.MO_ADD, 2);
                        bonusDamage = Math(bonusDamage, MathOp.MO_DIVIDE, critDamage);
                    }
                    else
                    {
                        hitResult = HitResult.HIT_Normal;
                    }
                }
                else
                {
                    hitResult = HitResult.HIT_Normal;
                }
            }
            else
            {
                hitResult = HitResult.HIT_Normal;
            }
            damageVar = Math(baseAttackDamage, MathOp.MO_ADD, bonusDamage);
            ApplyDamage((ObjAIBase)attacker, target, damageVar, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
            SpellBuffRemove(owner, "VolibearQ", (ObjAIBase)owner, 0);
            if(target is ObjAIBase)
            {
                if(target is not BaseTurret)
                {
                    BreakSpellShields(target);
                    teamID = GetTeamID(default);
                    SpellEffectCreate(out kennenss, out _, "Volibear_Q_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, attacker, false, target, "C_BUFFBONE_GLB_CENTER_LOC", default, target, default, default, true, false, false, false, false, default, default);
                    nextBuffVars.BouncePos = charVars.BouncePos;
                    SpellBuffAdd((ObjAIBase)attacker, target, "VolibearQExtra", 1, 1, 0.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, false, true, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class VolibearQExtra : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            
        }
    }
}



namespace Spells
{
    public class VolibearR : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int VolibearRDamage = 0;
            public int VolibearRSpeed = 0;
            public float VolibearRRatio = 0;
        }
        public int[] effect0 = {75, 115, 155};
        public int[] effect1 = {0, 0, 0};
        public int[] effect2 = {4, 5, 6};
        public int[] effect3 = {12, 12, 12};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            int volibearRCharges = 0;
            nextBuffVars.VolibearRDamage = this.effect0[level];
            nextBuffVars.VolibearRSpeed = this.effect1[level];
            nextBuffVars.VolibearRRatio = 0.3f;
            volibearRCharges = this.effect2[level];
            SpellBuffAdd((ObjAIBase)owner, owner, "VolibearRApplicator", 1, 1, this.effect3[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            CancelAutoAttack(owner, true);
        }
    }
}




namespace Spells
{
    public class VolibearW : Script
    {
        public int[] effect0 = {80, 125, 170, 215, 260};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int count = 0;
            SetReturnValue(default);
            count = GetBuffCountFromAll(owner, "VolibearWStats");
            if(count == 3)
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            bool? debuffFound = null;
            TeamId teamID;
            Particle? part1 = null;
            Particle? part2 = null;
            float damage = 0;
            float hPPoolMod = 0;
            float maxHP = 0;
            float currentHP = 0;
            float missingHP = 0;
            float missingHPPerc = 0;
            debuffFound = false;
            teamID = GetTeamID(default);
            SpellEffectCreate(out part1, out part2, "VolibearW_tar.troy", "VolibearW_tar.troy", teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            BreakSpellShields(target);
            damage = this.effect0[level];
            hPPoolMod = GetFlatHPPoolMod(attacker);
            hPPoolMod = Math(hPPoolMod, MathOp.MO_MULTIPLY, 0.15f);
            damage = Math(hPPoolMod, MathOp.MO_ADD, damage);
            maxHP = GetMaxHealth(target);
            currentHP = GetHealth(target);
            missingHP = Math(maxHP, MathOp.MO_SUBTRACT, currentHP);
            missingHPPerc = Math(missingHP, MathOp.MO_DIVIDE, maxHP);
            missingHPPerc = Math(missingHPPerc, MathOp.MO_ADD, 1);
            damage = Math(missingHPPerc, MathOp.MO_MULTIPLY, damage);
            ApplyDamage((ObjAIBase)attacker, target, damage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, false, (ObjAIBase)attacker);
        }
    }
}





namespace Spells
{
    public class Volley : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 pos;
            pos = GetPointByUnitFacingOffset(owner, 1000, -14);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 0, SpellSlotType.ExtraSlots, 1, true, true, false, false, default, default);
            pos = GetPointByUnitFacingOffset(owner, 1000, 0);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 0, SpellSlotType.ExtraSlots, 1, true, true, false, false, default, default);
            pos = GetPointByUnitFacingOffset(owner, 1000, 7);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 0, SpellSlotType.ExtraSlots, 1, true, true, false, false, default, default);
            pos = GetPointByUnitFacingOffset(owner, 1000, -7);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 0, SpellSlotType.ExtraSlots, 1, true, true, false, false, default, default);
            pos = GetPointByUnitFacingOffset(owner, 1000, 14);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 0, SpellSlotType.ExtraSlots, 1, true, true, false, false, default, default);
            pos = GetPointByUnitFacingOffset(owner, 1000, -21);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 0, SpellSlotType.ExtraSlots, 1, true, true, false, false, default, default);
            pos = GetPointByUnitFacingOffset(owner, 1000, 21);
            SpellCast((ObjAIBase)owner, default, pos, pos, false, 0, SpellSlotType.ExtraSlots, 1, true, true, false, false, default, default);
        }
    }
}
namespace Spells
{
    public class VolleyAttack : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MovementSpeedMod = 0;
        }
        public int[] effect0 = {40, 50, 60, 70, 80};
        public float[] effect1 = {-0.15f, -0.2f, -0.25f, -0.3f, -0.35f};
        public int[] effect2 = {40, 50, 60, 70, 80};
        public float[] effect3 = {-0.15f, -0.2f, -0.25f, -0.3f, -0.35f};
        public int[] effect4 = {40, 50, 60, 70, 80};
        public float[] effect5 = {-0.15f, -0.2f, -0.25f, -0.3f, -0.35f};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            int count = 0;
            bool? isStealthed = null;
            Particle? part = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            float baseDamage = 0;
            int bonusDamage = 0;
            //object? missileNetworkID = null;
            bool? canSee = null;
            count = GetBuffCountFromCaster(target, target, "VolleyAttack");
            if(count == 0)
            {
                isStealthed = GetStealthed(target);
                if(isStealthed == false)
                {
                    SpellEffectCreate(out part, out _, "bowmaster_BasicAttack_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, false, default, default, default, default, default, default);
                    SpellBuffAdd((ObjAIBase)target, target, "VolleyAttack", 9, 1, 0.5f, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, default, default);
                    BreakSpellShields(target);
                    baseDamage = GetBaseAttackDamage(owner);
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    bonusDamage = this.effect0[level];
                    baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                    ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, false, false, default);
                    level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                    if(level >= 1)
                    {
                        nextBuffVars.MovementSpeedMod = this.effect1[level];
                        SpellBuffAdd((ObjAIBase)owner, target, "FrostArrow", 1, 1, 2, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, default, default);
                    }
                    DestroyMissile(missileNetworkID);
                }
                else
                {
                    if(target is Champion)
                    {
                        SpellEffectCreate(out part, out _, "bowmaster_BasicAttack_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, false, default, default, default, default, default, default);
                        SpellBuffAdd((ObjAIBase)target, target, "VolleyAttack", 9, 1, 0.5f, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, default, default);
                        BreakSpellShields(target);
                        baseDamage = GetBaseAttackDamage(owner);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        bonusDamage = this.effect2[level];
                        baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                        ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, false, false, default);
                        level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                        if(level >= 1)
                        {
                            nextBuffVars.MovementSpeedMod = this.effect3[level];
                            SpellBuffAdd((ObjAIBase)owner, target, "FrostArrow", 1, 1, 2, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, default, default);
                        }
                        DestroyMissile(missileNetworkID);
                    }
                    else
                    {
                        canSee = CanSeeTarget(owner, target);
                        if(canSee == true)
                        {
                            SpellEffectCreate(out part, out _, "bowmaster_BasicAttack_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, target.Position, target, default, default, false, default, default, default, default, default, default);
                            SpellBuffAdd((ObjAIBase)target, target, "VolleyAttack", 9, 1, 0.5f, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, default, default);
                            BreakSpellShields(target);
                            baseDamage = GetBaseAttackDamage(owner);
                            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            bonusDamage = this.effect4[level];
                            baseDamage = Math(baseDamage, MathOp.MO_ADD, bonusDamage);
                            ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0, 1, false, false, default);
                            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                            if(level >= 1)
                            {
                                nextBuffVars.MovementSpeedMod = this.effect5[level];
                                SpellBuffAdd((ObjAIBase)owner, target, "FrostArrow", 1, 1, 2, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.SLOW, 0, true, false, default, default);
                            }
                            DestroyMissile(missileNetworkID);
                        }
                    }
                }
            }
        }
    }
}


namespace Spells
{
    public class VorpalSpikes : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            if(GetBuffCountFromCaster(owner, owner, "VorpalSpikes") > 0)
            {
                SpellBuffRemove(owner, "VorpalSpikes", (ObjAIBase)owner, default);
            }
            else
            {
                SpellBuffAdd((ObjAIBase)owner, owner, "VorpalSpikes", 1, 1, 25000, default, BuffAddType.RENEW_EXISTING, BuffType.AURA, 0, true, false, default, default);
            }
        }
    }
}
namespace Spells
{
    public class VorpalSpikesMissle : Script
    {
        public int[] effect0 = {20, 35, 50, 65, 80};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            if(GetBuffCountFromCaster(target, attacker, "VorpalSpikesMissleBuff") > 0)
            {
                SpellBuffRemove(owner, "VorpalSpikesMissleBuff", (ObjAIBase)owner, default);
            }
            else
            {
                ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.3f, 1, false, false, (ObjAIBase)attacker);
            }
        }
    }
}

namespace Spells
{
    public class WallOfPain : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public int ArmorMod = 0;
            public object? Pos = null;
        }
        public int[] effect0 = {17, 19, 21, 23, 25};
        public int[] effect1 = {800, 900, 1000, 1100, 1200};
        public float[] effect2 = {-0.4f, -0.5f, -0.6f, -0.7f, -0.8f};
        public int[] effect3 = {-15, -20, -25, -30, -35};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            TeamId teamID;
            int iterations = 0;
            int lineWidth = 0;
            bool? foundFirstPos = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? pos = null;
            object? firstPos = null;
            object? lastPos = null;
            Minion? other1 = null;
            Minion? other2 = null;
            Minion? other3 = null;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            teamID = GetTeamID(default);
            iterations = this.effect0[level];
            lineWidth = this.effect1[level];
            foundFirstPos = false;
            nextBuffVars.MoveSpeedMod = this.effect2[level];
            nextBuffVars.ArmorMod = this.effect3[level];
            ForEachPointOnLine(ownerPos, targetPos, lineWidth, distance, iterations, (pos) => 
            {
                nextBuffVars.Pos = pos;
                SpellBuffAdd((ObjAIBase)owner, owner, default, 50, 1, 5, nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0.1f, true, false, false, default);
                if(foundFirstPos == false)
                {
                    firstPos = pos;
                    foundFirstPos = true;
                }
                lastPos = pos;
            });
            other1 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", firstPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, true, (Champion)owner, default);
            SpellBuffAdd(other1, other1, "ExpirationTimer", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            other2 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", lastPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, true, (Champion)owner, default);
            SpellBuffAdd(other2, other2, "ExpirationTimer", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd(other1, other2, "WallOfPainBeam", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            LinkVisibility(other1, other2);
            other3 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", targetPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300 + lineWidth, false, true, (Champion)owner, default);
            SpellBuffAdd(other3, other3, "ExpirationTimer", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            LinkVisibility(other1, other3);
            LinkVisibility(other2, other3);
        }
    }
}








namespace Spells
{
    public class WildCards : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 pos;
            Vector3 pos1;
            Minion? other1 = null;
            Vector3 pos2;
            Vector3 pos3;
            //object? nextBuffVars = null;
            StopChanneling((ObjAIBase)owner, ChannelingStopCondition.NotCancelled, ChannelingStopSource.NotCancelled);
            teamID = GetTeamID(default);
            pos = GetPointByUnitFacingOffset(owner, 30, 0);
            pos1 = GetPointByUnitFacingOffset(owner, 1000, 0);
            other1 = SpawnMinion("TestCube", "TestCubeRender", "idle.lua", pos, teamID ?? TEAM_CASTER, false, true, false, true, false, true, 0, false, true, (Champion)owner, default);
            pos2 = GetPointByUnitFacingOffset(owner, 1000, -28);
            pos3 = GetPointByUnitFacingOffset(owner, 1000, 28);
            SetSpell(other1, 0, SpellSlotType.ExtraSlots, SpellbookType.SPELLBOOK_CHAMPION, "SealFateMissile");
            SpellCast(other1, default, pos1, pos1, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            SpellCast(other1, default, pos2, pos2, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            SpellCast(other1, default, pos3, pos3, false, 0, SpellSlotType.ExtraSlots, level, true, true, false, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, default, 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 6, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "ExpirationTimer", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 6, true, false, false, default);
        }
    }
}




namespace Spells
{
    public class Wish : Script
    {
        public int[] effect0 = {200, 320, 440};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float spellPower = 0;
            int baseHealthToHeal = 0;
            float spellPowerBonus = 0;
            float healthToHeal = 0;
            float temp1 = 0;
            Particle? infuse = null;
            //object? _ = null;
            teamID = GetTeamID(default);
            spellPower = GetFlatMagicDamageMod(owner);
            baseHealthToHeal = this.effect0[level];
            spellPowerBonus = Math(spellPower, MathOp.MO_MULTIPLY, 0.7f);
            healthToHeal = Math(baseHealthToHeal, MathOp.MO_ADD, spellPowerBonus);
            IncHealth(target, healthToHeal, owner);
            temp1 = GetHealthPercent(target);
            if(temp1 < 1)
            {
                SpellEffectCreate(out infuse, out _, "Wish_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
                ApplyAssistMarker((ObjAIBase)owner, target, 10);
            }
        }
    }
}
namespace Spells
{
    public class Wither : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float SpeedMod = 0;
            public float BonusSpeedMod = 0;
        }
        public float[] effect0 = {-0.35f, -0.35f, -0.35f, -0.35f, -0.35f};
        public float[] effect1 = {-0.03f, -0.06f, -0.09f, -0.12f, -0.15f};
        public int[] effect2 = {5, 5, 5, 5, 5};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpeedMod = this.effect0[level];
            nextBuffVars.BonusSpeedMod = this.effect1[level];
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, this.effect2[level], nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, false, false, default);
        }
    }
}




namespace Spells
{
    public class WormAttack : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            float baseDamage = 0;
            //object? nextBuffVars = null;
            baseDamage = GetBaseAttackDamage(owner);
            ApplyDamage((ObjAIBase)owner, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 0.7f, 0, 1, false, false, (ObjAIBase)attacker);
            SpellBuffAdd((ObjAIBase)attacker, target, default, 1, 1, 2.5f, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
        }
    }
}









namespace Spells
{
    public class WrathoftheAncients : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, attacker, default, 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class WriggleLantern : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            int newCooldown = 0;
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            other3 = SpawnMinion("WriggleLantern", "WriggleLantern", "idle.lua", targetPos, teamID, true, true, false, false, false, false, 0, true, false, (Champion)owner, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "SharedWardBuff", 1, 1, 180, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, other3, "WriggleLanternWard", 1, 1, 180, default, BuffAddType.REPLACE_EXISTING, BuffType.INVISIBILITY, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "ItemPlacementMissile", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            if(avatarVars.Scout == true)
            {
                SpellBuffAdd((ObjAIBase)attacker, other3, "MasteryScoutBuff", 1, 1, 180, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            }
            SetSpell((ObjAIBase)owner, 7, SpellSlotType.ExtraSlots, SpellbookType.SPELLBOOK_CHAMPION, "ItemPlacementMissile");
            FaceDirection(owner, targetPos);
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 7, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            newCooldown = 180;
            if(name == "wrigglelantern")
            {
                SetSlotSpellCooldownTimeVer2(newCooldown, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name1 == "wrigglelantern")
            {
                SetSlotSpellCooldownTimeVer2(newCooldown, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name2 == "wrigglelantern")
            {
                SetSlotSpellCooldownTimeVer2(newCooldown, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name3 == "wrigglelantern")
            {
                SetSlotSpellCooldownTimeVer2(newCooldown, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name4 == "wrigglelantern")
            {
                SetSlotSpellCooldownTimeVer2(newCooldown, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name5 == "wrigglelantern")
            {
                SetSlotSpellCooldownTimeVer2(newCooldown, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
        }
    }
}

namespace Spells
{
    public class WujuStyle : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "WujuStyle", (ObjAIBase)owner, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)attacker, owner, "WujuStyleSuperCharged", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
        }
    }
}

namespace Spells
{
    public class XenZhaoBattleCry : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float SelfASMod = 0;
        }
        public float[] effect0 = {0.2f, 0.25f, 0.3f, 0.35f, 0.4f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.SelfASMod = this.effect0[level];
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}





namespace Spells
{
    public class XenZhaoComboTarget : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class XenZhaoParry : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float Count = 0;
            public int MRByLevel = 0;
            public int ScalingArmor = 0;
            public int ScalingMR = 0;
            public float CountMR = 0;
            public float TotalMR = 0;
            public float CountArmor = 0;
            public float TotalArmor = 0;
        }
        public int[] effect0 = {125, 225, 325};
        public float[] effect1 = {0.15f, 0.15f, 0.15f};
        public int[] effect2 = {25, 25, 25, 60, 70};
        public int[] effect3 = {25, 25, 25, 60, 70};
        public int[] effect4 = {7, 10, 13};
        public int[] effect5 = {7, 10, 13};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int dtD = 0;
            float percentByLevel = 0;
            Particle? p3 = null;
            //object? _ = null;
            //object? castPos = null;
            //object? weaponDmgBonus = null;
            float dtDReal = 0;
            TeamId teamID;
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            float currentHP = 0;
            float percentDmg = 0;
            bool? isStealthed = null;
            Particle? bye = null;
            Particle? gda = null;
            Particle? asdf = null;
            bool? canSee = null;
            int armorAmount = 0;
            dtD = this.effect0[level];
            percentByLevel = this.effect1[level];
            SpellEffectCreate(out p3, out _, "xenZiou_ult_cas.troy", default, TeamId.TEAM_NEUTRAL, 900, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, "BUFFBONE_CSTM_WEAPON_1", castPos, owner, default, default, true, false, false, false, false, default, default);
            dtDReal = Math(dtD, MathOp.MO_ADD, weaponDmgBonus);
            teamID = GetTeamID(default);
            nextBuffVars.Count = 0;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                currentHP = GetHealth(unit);
                percentDmg = Math(currentHP, MathOp.MO_MULTIPLY, percentByLevel);
                dtDReal = Math(dtD, MathOp.MO_ADD, percentDmg);
                isStealthed = GetStealthed(unit);
                SpellEffectCreate(out bye, out _, "xenZiou_utl_tar_02.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                SpellEffectCreate(out gda, out _, "xenZiou_utl_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                SpellEffectCreate(out asdf, out _, "xenZiou_utl_tar_03.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                if(unit is not Champion)
                {
                    if(dtDReal > 600)
                    {
                        dtDReal = 600;
                    }
                }
                if(unit is Champion)
                {
                    nextBuffVars.Count = Math(1, MathOp.MO_ADD, nextBuffVars.Count);
                }
                if(isStealthed == false)
                {
                    ApplyDamage((ObjAIBase)attacker, unit, dtDReal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 0, false, false, (ObjAIBase)attacker);
                }
                else if(unit is Champion)
                {
                    ApplyDamage((ObjAIBase)attacker, unit, dtDReal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 0, false, false, (ObjAIBase)attacker);
                }
                else
                {
                    canSee = CanSeeTarget(owner, unit);
                    if(canSee == true)
                    {
                        ApplyDamage((ObjAIBase)attacker, unit, dtDReal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 0, false, false, (ObjAIBase)attacker);
                    }
                }
            });
            nextBuffVars.MRByLevel = this.effect2[level];
            armorAmount = this.effect3[level];
            nextBuffVars.ScalingArmor = this.effect4[level];
            nextBuffVars.ScalingMR = this.effect5[level];
            nextBuffVars.CountMR = Math(nextBuffVars.Count, MathOp.MO_MULTIPLY, nextBuffVars.ScalingMR);
            nextBuffVars.TotalMR = Math(nextBuffVars.CountMR, MathOp.MO_ADD, nextBuffVars.MRByLevel);
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            nextBuffVars.CountArmor = Math(nextBuffVars.Count, MathOp.MO_MULTIPLY, nextBuffVars.ScalingArmor);
            nextBuffVars.TotalArmor = Math(nextBuffVars.CountArmor, MathOp.MO_ADD, armorAmount);
            SpellBuffAdd((ObjAIBase)owner, owner, "XenZhaoSweepArmor", 1, 1, 6, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class XenZhaoParryCast : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float Count = 0;
        }
        public int[] effect0 = {150, 200, 250};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            int dtD = 0;
            Particle? a = null;
            //object? _ = null;
            //object? unit = null;
            float weaponDmg = 0;
            float weaponDmgBonus = 0;
            float dtDReal = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            dtD = this.effect0[level];
            SpellEffectCreate(out a, out _, default, default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, unit, default, default, false, default, default, false, default, default, default);
            weaponDmg = GetTotalAttackDamage(owner);
            weaponDmgBonus = Math(weaponDmg, MathOp.MO_MULTIPLY, 0.4f);
            dtDReal = Math(dtD, MathOp.MO_ADD, weaponDmgBonus);
            nextBuffVars.Count = 0;
            ForEachUnitInTargetArea((ObjAIBase)owner, owner.Position, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                ApplyDamage((ObjAIBase)attacker, unit, dtDReal, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_PROC, 1, 0, 0, false, false, (ObjAIBase)attacker);
                if(unit is Champion)
                {
                    nextBuffVars.Count = Math(1, MathOp.MO_ADD, nextBuffVars.Count);
                }
            });
        }
    }
}

namespace Spells
{
    public class XenZhaoSweep : Script
    {
        class TargetExecute_nextBuffVars
        {
            public int DamageDealt = 0;
            public object? TargetPos = null;
            public object? Distance = null;
            public int BonusDamage = 0;
        }
        public int[] effect0 = {70, 110, 150, 190, 230};
        public int[] effect1 = {80, 120, 160, 200, 240};
        Particle? targetParticle = null;
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? _ = null;
            Vector3 ownerPos;
            float distance = 0;
            TargetExecute_nextBuffVars nextBuffVars = new();
            SpellEffectCreate(out this.targetParticle, out _, "xenZiou_AudaciousCharge_tar_unit_instant.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, false, false, false, false, default, default);
            targetPos = GetUnitPosition(target);
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            nextBuffVars.DamageDealt = this.effect0[level];
            nextBuffVars.TargetPos = targetPos;
            nextBuffVars.Distance = distance;
            nextBuffVars.BonusDamage = this.effect1[level];
            SpellBuffAdd((ObjAIBase)target, attacker, "XenZhaoSweep", 1, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}

namespace Spells
{
    public class XenZhaoThrust : Script
    {
        public int[] effect0 = {15, 30, 45, 60, 75};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float attackDmg = 0;
            int combo1DamageLeet = 0;
            float combo1Damage = 0;
            Particle? bye = null;
            //object? _ = null;
            //object? nextBuffVars = null;
            float comboDamageCrit = 0;
            if(hitResult == HitResult.HIT_Dodge)
            {
                hitResult = HitResult.HIT_Normal;
            }
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            attackDmg = GetTotalAttackDamage(owner);
            combo1DamageLeet = this.effect0[level];
            combo1Damage = Math(combo1DamageLeet, MathOp.MO_ADD, attackDmg);
            SpellEffectCreate(out bye, out _, "xenZiou_ChainAttack_cas_01.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(out bye, out _, "xenZiou_ChainAttack_01.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, default, default, default, default, default, default);
            SpellBuffRemove(owner, "XenZhaoComboTarget", (ObjAIBase)owner, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "XenZhaoComboAuto", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            if(hitResult == HitResult.HIT_Critical)
            {
                comboDamageCrit = Math(attackDmg, MathOp.MO_MULTIPLY, 2);
                combo1Damage = Math(combo1DamageLeet, MathOp.MO_ADD, comboDamageCrit);
            }
            ApplyDamage((ObjAIBase)attacker, target, combo1Damage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, true, (ObjAIBase)attacker);
            IssueOrder(attacker, OrderType.AttackTo, default, target);
        }
    }
}
namespace Spells
{
    public class XenZhaoThrust2 : Script
    {
        public int[] effect0 = {15, 30, 45, 60, 75};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float attackDmg = 0;
            int combo1DamageLeet = 0;
            float combo1Damage = 0;
            Particle? bye = null;
            //object? _ = null;
            float comboDamageCrit = 0;
            //object? nextBuffVars = null;
            if(hitResult == HitResult.HIT_Dodge)
            {
                hitResult = HitResult.HIT_Normal;
            }
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            attackDmg = GetTotalAttackDamage(owner);
            combo1DamageLeet = this.effect0[level];
            combo1Damage = Math(combo1DamageLeet, MathOp.MO_ADD, attackDmg);
            SpellEffectCreate(out bye, out _, "xenZiou_ChainAttack_02.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, default, default, default, default, default, default);
            if(hitResult == HitResult.HIT_Critical)
            {
                comboDamageCrit = Math(attackDmg, MathOp.MO_MULTIPLY, 2);
                combo1Damage = Math(combo1DamageLeet, MathOp.MO_ADD, comboDamageCrit);
            }
            ApplyDamage((ObjAIBase)attacker, target, combo1Damage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, true, (ObjAIBase)attacker);
            SpellBuffRemove(attacker, "XenZhaoComboAuto", (ObjAIBase)attacker, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "XenZhaoComboAutoFinish", 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            IssueOrder(attacker, OrderType.AttackTo, default, target);
        }
    }
}
namespace Spells
{
    public class XenZhaoThrust3 : Script
    {
        public int[] effect0 = {15, 30, 45, 60, 75};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            HitResult? hitResult = null;
            float attackDmg = 0;
            int combo1DamageLeet = 0;
            float combo1Damage = 0;
            int count = 0;
            Particle? bye = null;
            //object? _ = null;
            float comboDamageCrit = 0;
            //object? nextBuffVars = null;
            if(hitResult == HitResult.HIT_Dodge)
            {
                hitResult = HitResult.HIT_Normal;
            }
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            attackDmg = GetTotalAttackDamage(owner);
            combo1DamageLeet = this.effect0[level];
            combo1Damage = Math(combo1DamageLeet, MathOp.MO_ADD, attackDmg);
            count = GetBuffCountFromAll(owner, "XenZhaoComboCounter");
            SpellEffectCreate(out bye, out _, "xenZiou_ChainAttack_03.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, default, default, default, default, default, default);
            if(hitResult == HitResult.HIT_Critical)
            {
                comboDamageCrit = Math(attackDmg, MathOp.MO_MULTIPLY, 2);
                combo1Damage = Math(combo1DamageLeet, MathOp.MO_ADD, comboDamageCrit);
            }
            ApplyDamage((ObjAIBase)attacker, target, combo1Damage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, true, (ObjAIBase)attacker);
            SpellBuffRemove(attacker, "XenZhaoComboAutoFinish", (ObjAIBase)attacker, default);
            BreakSpellShields(target);
            SpellBuffAdd((ObjAIBase)owner, target, "XenZhaoKnockup", 1, 1, 0.5f, default, BuffAddType.STACKS_AND_OVERLAPS, BuffType.STUN, 0, true, false, default, default);
        }
    }
}

namespace Spells
{
    public class XerathArcaneBarrage : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? Distance = null;
            public float SlowAmount = 0;
            public int DamageAmount = 0;
            public object? Level = null;
            public Region? Bubble = null;
        }
        public float[] effect0 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public int[] effect1 = {150, 200, 250, 0, 0};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Vector3 ownerPos;
            float distance = 0;
            SelfExecute_nextBuffVars nextBuffVars = new();
            Particle? a = null;
            //object? _ = null;
            Minion? other3 = null;
            teamOfOwner = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(targetPos, ownerPos);
            nextBuffVars.Distance = distance;
            SpellEffectCreate(out a, out _, "Xerath_E_cas.troy", default, TeamId.TEAM_BLUE, 100, 0, TeamId.TEAM_UNKNOWN, attacker, false, attacker, "chest", default, attacker, default, default, true, false, false, false, false, default, default);
            other3 = SpawnMinion("HiddenMinion", "XerathArcaneBarrageLauncher", "idle.lua", targetPos, teamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, (Champion)owner, default);
            nextBuffVars.SlowAmount = this.effect0[level];
            nextBuffVars.DamageAmount = this.effect1[level];
            nextBuffVars.Level = level;
            SpellBuffAdd((ObjAIBase)attacker, other3, "XerathArcaneBarrage", 1, 1, 1, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            nextBuffVars.Bubble = AddPosPerceptionBubble(teamOfOwner, 600, targetPos, 4, default, false);
            SpellBuffAdd((ObjAIBase)owner, owner, "XerathArcaneBarrageVision", 1, 1, 3.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellCast(other3, owner, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, true, false, default);
        }
    }
}

namespace Spells
{
    public class XerathArcaneBarrageMinion : Script
    {
        public int[] effect0 = {125, 200, 275, 0, 0};
        Particle? a = null;
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            int damageAmount = 0;
            Vector3 ownerPos;
            //object? _ = null;
            Particle? asdf = null;
            //object? unit = null;
            Particle? asdf2 = null;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            level = GetSlotSpellLevel((ObjAIBase)target, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            damageAmount = this.effect0[level];
            ownerPos = GetUnitPosition(owner);
            SpellEffectCreate(out this.a, out _, "Xerath_E_tar.troy", default, teamID, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, default, default, ownerPos, true, false, false, false, false, default, default);
            ForEachUnitInTargetArea((ObjAIBase)target, owner.Position, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                SpellEffectCreate(out asdf, out _, "Xerath_Barrage_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                BreakSpellShields(unit);
                ApplyDamage((ObjAIBase)target, unit, damageAmount, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 0, false, false, (ObjAIBase)target);
                if(GetBuffCountFromCaster(unit, target, "XerathMageChains") > 0)
                {
                    SpellEffectCreate(out asdf2, out _, "Xerath_MageChains_consume.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd((ObjAIBase)target, unit, "XerathMageChainsRoot", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, true, false, default);
                    SpellBuffRemove(unit, "XerathMageChains", (ObjAIBase)target, 0);
                }
            });
            SetTargetable(owner, default);
            ApplyDamage((ObjAIBase)owner, owner, 1000, DamageType.DAMAGE_TYPE_TRUE, DamageSource.DAMAGE_SOURCE_INTERNALRAW, 1, 0, 0, false, false, (ObjAIBase)attacker);
        }
    }
}

namespace Spells
{
    public class XerathArcaneBarrageWrapper : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            targetPos = GetCastSpellTargetPos();
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 2, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            if(GetBuffCountFromCaster(owner, owner, "XerathArcaneBarrageBarrage") > 0)
            {
                SpellBuffRemove(owner, "XerathArcaneBarrageBarrage", (ObjAIBase)owner, 0);
                if(GetBuffCountFromCaster(owner, owner, "XerathArcaneBarrageBarrage") > 0)
                {
                    SetSlotSpellCooldownTimeVer2(0.6f, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                }
            }
            else
            {
                if(GetBuffCountFromCaster(owner, owner, "XerathArcaneBarrageWrapper") == 0)
                {
                    SetSlotSpellCooldownTimeVer2(0.6f, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                    SpellBuffAdd((ObjAIBase)owner, owner, "XerathArcaneBarrageBarrage", 3, 2, 12, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)owner, owner, "XerathArcaneBarrageWrapper", 1, 1, 15, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class XerathArcaneBarrageWrapperExt : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            //object? nextBuffVars = null;
            targetPos = GetCastSpellTargetPos();
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 2, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
            if(GetBuffCountFromCaster(owner, owner, "XerathArcaneBarrageBarrage") > 0)
            {
                SpellBuffRemove(owner, "XerathArcaneBarrageBarrage", (ObjAIBase)owner, 0);
                if(GetBuffCountFromCaster(owner, owner, "XerathArcaneBarrageBarrage") > 0)
                {
                    SetSlotSpellCooldownTimeVer2(0.6f, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                }
            }
            else
            {
                if(GetBuffCountFromCaster(owner, owner, "XerathArcaneBarrageWrapper") == 0)
                {
                    SetSlotSpellCooldownTimeVer2(0.6f, 3, SpellSlotType.SpellSlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
                    SpellBuffAdd((ObjAIBase)owner, owner, "XerathArcaneBarrageBarrage", 3, 2, 12, default, BuffAddType.STACKS_AND_RENEWS, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
                    SpellBuffAdd((ObjAIBase)owner, owner, "XerathArcaneBarrageWrapper", 1, 1, 15, default, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                }
            }
        }
    }
}
namespace Spells
{
    public class XerathArcanopulse : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 ownerPos;
            float distance = 0;
            Vector3 beam1;
            Vector3 beam3;
            Minion? other1 = null;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            targetPos = GetCastSpellTargetPos();
            teamID = GetTeamID(default);
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            beam1 = GetPointByUnitFacingOffset(owner, 145, 0);
            beam3 = GetPointByUnitFacingOffset(owner, 1100, 0);
            other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", beam1, teamID, false, true, false, false, false, true, 1, false, false, (Champion)owner, default);
            other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", beam3, teamID, false, true, false, false, false, true, 1, false, false, (Champion)owner, default);
            FaceDirection(other1, other3.Position);
            LinkVisibility(other1, other3);
            SpellBuffAdd((ObjAIBase)attacker, other1, "XerathArcanopulseDeath", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "XerathArcanopulseDeath", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "ExpirationTimer", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "ExpirationTimer", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd(other3, other1, "XerathArcanopulsePartFix", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd(other3, other1, "XerathArcanopulsePartFix2", 1, 1, 2, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd(other1, other3, "XerathArcanopulseBeam", 1, 1, 4, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, other1, "XerathArcanopulseBall", 1, 1, 4, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}


namespace Spells
{
    public class XerathArcanopulseDamage : Script
    {
        public int[] effect0 = {75, 115, 155, 195, 235};
        Particle? particleID = null;
        Particle? particleID2 = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Vector3 beam1;
            Vector3 beam3;
            Minion? other1 = null;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            Vector3 damagePoint;
            //object? unit = null;
            Particle? asdf = null;
            //object? _ = null;
            Particle? asdf2 = null;
            teamOfOwner = GetTeamID(default);
            beam1 = GetPointByUnitFacingOffset(owner, 145, 0);
            beam3 = GetPointByUnitFacingOffset(owner, 1100, 0);
            other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", beam1, teamOfOwner ?? TEAM_CASTER, false, true, false, false, false, true, 1, false, false, (Champion)owner, default);
            other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", beam3, teamOfOwner ?? TEAM_CASTER, false, true, false, false, false, true, 1, false, false, (Champion)owner, default);
            FaceDirection(other1, other3.Position);
            LinkVisibility(other1, other3);
            SpellBuffAdd(other3, other1, "XerathArcanopulsePartFix", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd(other3, other1, "XerathArcanopulsePartFix2", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "XerathArcanopulseDeath", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "XerathArcanopulseDeath", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "ExpirationTimer", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "ExpirationTimer", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SetForceRenderParticles(other1, default);
            SetForceRenderParticles(other3, default);
            SpellEffectCreate(out this.particleID, out this.particleID2, "XerathR_beam.troy", "XerathR_beam.troy", teamOfOwner, 550, 0, TeamId.TEAM_UNKNOWN, owner, false, other3, "top", default, other1, "top", default, true, false, false, false, false, default, default);
            damagePoint = GetPointByUnitFacingOffset(owner, 500, 0);
            ForEachUnitInTargetRectangle(owner, damagePoint, 95, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", true, default, (unit) => 
            {
                BreakSpellShields(unit);
                SpellEffectCreate(out asdf, out _, "Xerath_beam_hit.troy", default, teamOfOwner, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
                if(GetBuffCountFromCaster(unit, owner, "XerathMageChains") > 0)
                {
                    SpellEffectCreate(out asdf2, out _, "Xerath_MageChains_consume.troy", default, teamOfOwner, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd((ObjAIBase)owner, unit, "XerathMageChainsRoot", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, true, false, default);
                    SpellBuffRemove(unit, "XerathMageChains", (ObjAIBase)owner, 0);
                }
            });
        }
    }
}
namespace Spells
{
    public class XerathArcanopulseDamageExtended : Script
    {
        public int[] effect0 = {75, 115, 155, 195, 235};
        Particle? particleID = null;
        Particle? particleID2 = null;
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamOfOwner;
            Vector3 beam1;
            Vector3 beam3;
            Minion? other1 = null;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            Vector3 damagePoint;
            //object? unit = null;
            Particle? asdf = null;
            //object? _ = null;
            Particle? asdf2 = null;
            teamOfOwner = GetTeamID(default);
            beam1 = GetPointByUnitFacingOffset(owner, 145, 0);
            beam3 = GetPointByUnitFacingOffset(owner, 1600, 0);
            other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", beam1, teamOfOwner ?? TEAM_CASTER, false, true, false, false, false, true, 1, false, false, (Champion)owner, default);
            other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", beam3, teamOfOwner ?? TEAM_CASTER, false, true, false, false, false, true, 1, false, false, (Champion)owner, default);
            FaceDirection(other1, other3.Position);
            LinkVisibility(other1, other3);
            SpellBuffAdd(other3, other1, "XerathArcanopulsePartFix", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd(other3, other1, "XerathArcanopulsePartFix2", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "XerathArcanopulseDeath", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "XerathArcanopulseDeath", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "ExpirationTimer", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "ExpirationTimer", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SetForceRenderParticles(other1, default);
            SetForceRenderParticles(other3, default);
            SpellEffectCreate(out this.particleID, out this.particleID2, "XerathR_beam.troy", "XerathR_beam.troy", teamOfOwner, 550, 0, TeamId.TEAM_UNKNOWN, owner, false, other3, "top", default, other1, "top", default, true, false, false, false, false, default, default);
            damagePoint = GetPointByUnitFacingOffset(owner, 800, 0);
            ForEachUnitInTargetRectangle(owner, damagePoint, 95, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", true, default, (unit) => 
            {
                BreakSpellShields(unit);
                SpellEffectCreate(out asdf, out _, "Xerath_beam_hit.troy", default, teamOfOwner, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
                if(GetBuffCountFromCaster(unit, owner, "XerathMageChains") > 0)
                {
                    SpellEffectCreate(out asdf2, out _, "Xerath_MageChains_consume.troy", default, teamOfOwner, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd((ObjAIBase)owner, unit, "XerathMageChainsRoot", 1, 1, 1.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.STUN, 0, true, true, false, default);
                    SpellBuffRemove(unit, "XerathMageChains", (ObjAIBase)owner, 0);
                }
            });
        }
    }
}

namespace Spells
{
    public class XerathArcanopulseExtended : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Vector3 ownerPos;
            float distance = 0;
            Vector3 beam1;
            Vector3 beam3;
            Minion? other1 = null;
            Minion? other3 = null;
            //object? nextBuffVars = null;
            targetPos = GetCastSpellTargetPos();
            teamID = GetTeamID(default);
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            beam1 = GetPointByUnitFacingOffset(owner, 145, 0);
            beam3 = GetPointByUnitFacingOffset(owner, 1600, 0);
            other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", beam1, teamID, false, true, false, false, false, true, 1, false, false, (Champion)owner, default);
            other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", beam3, teamID, false, true, false, false, false, true, 1, false, false, (Champion)owner, default);
            FaceDirection(other1, other3.Position);
            LinkVisibility(other1, other3);
            SpellBuffAdd((ObjAIBase)attacker, other1, "XerathArcanopulseDeath", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "XerathArcanopulseDeath", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "ExpirationTimer", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other3, "ExpirationTimer", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd(other3, other1, "XerathArcanopulseWPartFix", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd(other3, other1, "XerathArcanopulseWPartFix2", 1, 1, 3, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd(other1, other3, "XerathArcanopulseBeam", 1, 1, 4, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, other1, "XerathArcanopulseBall", 1, 1, 4, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}







namespace Spells
{
    public class XerathLocusOfPowerToggle : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "XerathLocusOfPower", (ObjAIBase)owner, 0);
        }
    }
}
namespace Spells
{
    public class XerathMageChains : Script
    {
        public int[] effect0 = {70, 120, 170, 220, 270};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Particle? a = null;
            //object? _ = null;
            bool? debuff = null;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            SpellEffectCreate(out a, out _, "Xerath_Bolt_hit_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            debuff = true;
            if(GetBuffCountFromCaster(target, target, "ResistantSkinDragon") > 0)
            {
                debuff = false;
            }
            if(GetBuffCountFromCaster(target, target, "ResistantSkin") > 0)
            {
                debuff = false;
            }
            if(debuff == true)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "XerathMageChains", 1, 1, 4, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            }
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.7f, 0, false, false, (ObjAIBase)attacker);
        }
    }
}
namespace Spells
{
    public class XerathMageChainsExtended : Script
    {
        public int[] effect0 = {70, 120, 170, 220, 270};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            Particle? a = null;
            //object? _ = null;
            Particle? b = null;
            bool? debuff = null;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            SpellEffectCreate(out a, out _, "Xerath_Bolt_hit_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(out b, out _, "Xerath_Bolt_hit.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, false, false, false, false, default, default);
            debuff = true;
            if(GetBuffCountFromCaster(target, target, "ResistantSkinDragon") > 0)
            {
                debuff = false;
            }
            if(GetBuffCountFromCaster(target, target, "ResistantSkin") > 0)
            {
                debuff = false;
            }
            if(debuff == true)
            {
                SpellBuffAdd((ObjAIBase)attacker, target, "XerathMageChains", 1, 1, 4, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_DEHANCER, 0, true, false, false, default);
            }
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.7f, 0, false, false, (ObjAIBase)attacker);
        }
    }
}

namespace Spells
{
    public class YorickActiveDecayed : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public int[] effect0 = {80, 140, 200, 260, 320};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Particle? e = null;
            //object? _ = null;
            TargetExecute_nextBuffVars nextBuffVars = new();
            //object? unit = null;
            Particle? b = null;
            SpellEffectCreate(out e, out _, "YorickPHDecayedExplosion.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, false, default, default, false, false, default, default);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.MoveSpeedMod = -0.5f;
            ForEachUnitInTargetArea((ObjAIBase)owner, target.Position, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                SpellEffectCreate(out b, out _, "tristana_explosiveShot_unit_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, false, false, default, default);
                ApplyDamage((ObjAIBase)attacker, unit, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.6f, 1, false, false, (ObjAIBase)attacker);
                SpellBuffAdd((ObjAIBase)attacker, unit, "YorickDecayedSlow", 100, 1, 2, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
            });
        }
    }
}


namespace Spells
{
    public class YorickDeathGrip : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int DamageToDeal = 0;
            public object? Pos = null;
            public int DurationLevel = 0;
        }
        public int[] effect0 = {19, 19, 19, 19, 19};
        public int[] effect1 = {900, 900, 900, 900, 900};
        public int[] effect2 = {200, 300, 400, 400, 400};
        public float[] effect3 = {0.5f, 0.5f, 0.5f};
        public int[] effect4 = {5, 7, 9};
        public int[] effect5 = {5, 7, 9};
        public int[] effect6 = {5, 7, 9};
        public float[] effect7 = {0.5f, 0.5f, 0.5f};
        public int[] effect8 = {5, 7, 9};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            TeamId teamID;
            int iterations = 0;
            int lineWidth = 0;
            bool? foundFirstPos = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            //object? pos = null;
            object? firstPos = null;
            object? lastPos = null;
            Minion? other1 = null;
            Minion? other2 = null;
            Minion? other3 = null;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            teamID = GetTeamID(default);
            iterations = this.effect0[level];
            lineWidth = this.effect1[level];
            foundFirstPos = false;
            nextBuffVars.DamageToDeal = this.effect2[level];
            ForEachPointOnLine(ownerPos, targetPos, lineWidth, distance, iterations, (pos) => 
            {
                nextBuffVars.Pos = pos;
                SpellBuffAdd((ObjAIBase)owner, owner, "YorickDeathGripDelay", 50, 1, this.effect3[level], nextBuffVars, BuffAddType.STACKS_AND_RENEWS, BuffType.INTERNAL, 0, true, false, false, default);
                if(foundFirstPos == false)
                {
                    firstPos = pos;
                    foundFirstPos = true;
                }
                lastPos = pos;
            });
            other1 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", firstPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, true, (Champion)owner, default);
            SpellBuffAdd(other1, other1, "ExpirationTimer", 1, 1, this.effect4[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            other2 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", lastPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, true, (Champion)owner, default);
            SpellBuffAdd(other2, other2, "ExpirationTimer", 1, 1, this.effect5[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            nextBuffVars.DurationLevel = this.effect6[level];
            SpellBuffAdd(other1, other2, "YorickDeathGripBeamDelay", 1, 1, this.effect7[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            LinkVisibility(other1, other2);
            other3 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", targetPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300 + lineWidth, default, true, (Champion)owner, default);
            SpellBuffAdd(other3, other3, "ExpirationTimer", 1, 1, this.effect8[level], nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            LinkVisibility(other1, other3);
            LinkVisibility(other2, other3);
        }
    }
}






namespace Spells
{
    public class YorickDecayed : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            if(GetBuffCountFromCaster(owner, default, "YorickSummonDecayed") > 0)
            {
                SpellBuffClear(owner, "YorickSummonDecayed");
            }
            targetPos = GetCastSpellTargetPos();
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, true, false, default);
        }
    }
}


















namespace Spells
{
    public class YorickRARevive : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            Vector3 pos;
            Pet? other1 = null;
            float temp1 = 0;
            //object? nextBuffVars = null;
            pos = GetUnitPosition(target);
            other1 = CloneUnitPet(target, "YorickRARevive", 0, pos, 0, 0, false);
            temp1 = GetMaxHealth(other1);
            IncHealth(other1, temp1, other1);
            SpellBuffAdd((ObjAIBase)owner, other1, "YorickRAPetBuff2", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd(other1, owner, "YorickRARemovePet", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}




namespace Spells
{
    public class YorickRavenous : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float DrainPercent = 0;
            public bool? DrainedBool = null;
        }
        public float[] effect0 = {0.4f, 0.4f, 0.4f, 0.4f, 0.4f};
        public int[] effect1 = {55, 85, 115, 145, 175};
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            float distance = 0;
            int baseDamage = 0;
            float bonusAD = 0;
            float damageToDeal = 0;
            TeamId teamID;
            Particle? lifestealEffect = null;
            //object? _ = null;
            Particle? hitEffect = null;
            if(GetBuffCountFromCaster(owner, default, "YorickSummonRavenous") > 0)
            {
                SpellBuffClear(owner, "YorickSummonRavenous");
            }
            SpellBuffAdd((ObjAIBase)owner, target, "YorickRavenousPrimaryTarget", 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            BreakSpellShields(target);
            distance = DistanceBetweenObjects("Owner", "Target");
            distance = Math(distance, MathOp.MO_ADD, 250);
            targetPos = GetPointByUnitFacingOffset(owner, distance, 0);
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 1, SpellSlotType.ExtraSlots, level, true, false, false, true, false, default);
            nextBuffVars.DrainPercent = this.effect0[level];
            nextBuffVars.DrainedBool = false;
            SpellBuffAdd((ObjAIBase)owner, owner, "GlobalDrain", 1, 1, 0.01f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            baseDamage = this.effect1[level];
            bonusAD = GetFlatPhysicalDamageMod(owner);
            damageToDeal = Math(baseDamage, MathOp.MO_ADD, bonusAD);
            ApplyDamage((ObjAIBase)attacker, target, damageToDeal, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0, 0, false, false, (ObjAIBase)attacker);
            teamID = GetTeamID(default);
            SpellEffectCreate(out lifestealEffect, out _, "yorick_ravenousGhoul_activeHeal.troy", default, teamID, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, owner, default, default, true, default, default, false, false, default, default);
            SpellEffectCreate(out hitEffect, out _, "yorick_ravenousGhoul_cas_tar.troy", default, teamID, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, false, false, default, default);
        }
    }
}




namespace Spells
{
    public class YorickReviveAlly : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            bool? zombie = null;
            SpellBuffAdd((ObjAIBase)owner, target, "YorickReviveAllySelf", 1, 1, 10, default, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            zombie = GetIsZombie(owner);
            if(zombie == false)
            {
                SpellCast((ObjAIBase)owner, target, owner.Position, owner.Position, false, 3, SpellSlotType.ExtraSlots, 1, true, true, false, false, false, default);
            }
        }
    }
}


namespace Spells
{
    public class YorickSpectral : Script
    {
        class SelfExecute_nextBuffVars
        {
            public int SpellCooldown = 0;
            public int BonusDamage = 0;
        }
        public int[] effect0 = {9, 8, 7, 6, 5};
        public int[] effect1 = {30, 60, 90, 120, 150};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            nextBuffVars.SpellCooldown = this.effect0[level];
            nextBuffVars.BonusDamage = this.effect1[level];
            if(GetBuffCountFromCaster(owner, owner, "YorickSpectralUnlock") > 0)
            {
                SpellBuffRemove(owner, "YorickSpectralUnlock", (ObjAIBase)owner, 0);
            }
            SpellBuffAdd((ObjAIBase)owner, owner, default, 1, 1, 10, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "YorickSpectralUnlock", 1, 1, 11, nextBuffVars, BuffAddType.RENEW_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SetSlotSpellCooldownTime((ObjAIBase)owner, 0, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots, 0);
        }
    }
}





namespace Spells
{
    public class YorickSummonDecayed : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
        }
        public float[] effect0 = {-0.1f, -0.125f, -0.15f, -0.175f, -0.2f};
        public int[] effect1 = {60, 95, 130, 165, 200};
        public float[] effect2 = {-0.2f, -0.25f, -0.3f, -0.35f, -0.4f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Minion? other1 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            Particle? e = null;
            //object? _ = null;
            int baseDamage = 0;
            float yorickAD = 0;
            //object? unit = null;
            Particle? b = null;
            targetPos = GetCastSpellTargetPos();
            teamID = GetTeamID(default);
            other1 = SpawnMinion("Inky", "YorickDecayedGhoul", "YorickPHPet.lua", targetPos, teamID, false, false, true, false, false, false, 0, false, false, (Champion)owner, default);
            SpellBuffAdd(other1, attacker, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            nextBuffVars.MoveSpeedMod = this.effect0[level];
            SpellBuffAdd((ObjAIBase)attacker, other1, "YorickDecayedDiseaseCloud", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "YorickDecayedLogic", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellEffectCreate(out e, out _, "yorick_necroExplosion.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, other1, default, default, other1, default, default, false, default, default, false, false, default, default);
            baseDamage = this.effect1[level];
            yorickAD = GetFlatPhysicalDamageMod(owner);
            nextBuffVars.MoveSpeedMod = this.effect2[level];
            ForEachUnitInTargetArea((ObjAIBase)owner, other1.Position, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (unit) => 
            {
                BreakSpellShields(unit);
                SpellEffectCreate(out b, out _, "yorick_necroExplosion_unit_tar.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, unit, default, default, unit, default, default, true, default, default, false, false, default, default);
                SpellBuffAdd((ObjAIBase)owner, unit, "YorickDecayedSlow", 100, 1, 1.5f, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.SLOW, 0, true, false, false, default);
                ApplyDamage((ObjAIBase)owner, unit, baseDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 1, 0, false, false, (ObjAIBase)owner);
            });
        }
    }
}
namespace Spells
{
    public class YorickSummonRavenous : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Minion? other1 = null;
            //object? nextBuffVars = null;
            teamID = GetTeamID(default);
            targetPos = GetCastSpellTargetPos();
            other1 = SpawnMinion("Blinky", "YorickRavenousGhoul", "YorickPHPet.lua", targetPos, teamID, false, false, true, false, false, false, 0, false, false, (Champion)owner, default);
            SpellBuffAdd(other1, attacker, default, 1, 1, 5, default, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "YorickRavenousLogic", 1, 1, 25000, default, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class YorickSummonSpectral : Script
    {
        class SelfExecute_nextBuffVars
        {
            public float MovementSpeedPercent = 0;
            public int AttackDamageMod = 0;
        }
        public float[] effect0 = {0.15f, 0.2f, 0.25f, 0.3f, 0.35f};
        public int[] effect1 = {8, 16, 24, 32, 40};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            TeamId teamID;
            Minion? other1 = null;
            SelfExecute_nextBuffVars nextBuffVars = new();
            level = GetSlotSpellLevel((ObjAIBase)attacker, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            targetPos = GetCastSpellTargetPos();
            teamID = GetTeamID(default);
            other1 = SpawnMinion("Clyde", "YorickSpectralGhoul", "YorickPHPet.lua", targetPos, teamID, false, false, true, false, false, false, 0, false, false, (Champion)owner, default);
            nextBuffVars.MovementSpeedPercent = this.effect0[level];
            nextBuffVars.AttackDamageMod = this.effect1[level];
            SpellBuffAdd(other1, attacker, default, 1, 1, 5, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)attacker, other1, "YorickSpectralLogic", 1, 1, 25000, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.AURA, 0, true, false, false, default);
            SpellBuffAdd((ObjAIBase)owner, owner, "YorickActiveSpectral", 1, 1, 4, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false, default);
        }
    }
}



namespace Spells
{
    public class YoumusBlade : Script
    {
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Particle? ar = null;
            //object? _ = null;
            //object? nextBuffVars = null;
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            SpellEffectCreate(out ar, out _, "spectral_fury_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, owner, false, owner, default, default, target, default, default, false, default, default, default, default, default, default);
            SpellBuffAdd((ObjAIBase)attacker, attacker, "SpectralFury", 1, 1, 4, default, BuffAddType.RENEW_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, default, default);
            charVars.SpectralCount = 0;
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "YoumusBlade")
            {
                SetSlotSpellCooldownTimeVer2(60, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name1 == "YoumusBlade")
            {
                SetSlotSpellCooldownTimeVer2(60, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name2 == "YoumusBlade")
            {
                SetSlotSpellCooldownTimeVer2(60, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name3 == "YoumusBlade")
            {
                SetSlotSpellCooldownTimeVer2(60, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name4 == "YoumusBlade")
            {
                SetSlotSpellCooldownTimeVer2(60, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
            if(name5 == "YoumusBlade")
            {
                SetSlotSpellCooldownTimeVer2(60, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, default);
            }
        }
    }
}
namespace Spells
{
    public class ZhonyasHourglass : Script
    {
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            //object? nextBuffVars = null;
            string? name = null;
            string? name1 = null;
            string? name2 = null;
            string? name3 = null;
            string? name4 = null;
            string? name5 = null;
            SpellBuffRemove(owner, "Gate", (ObjAIBase)owner, 0);
            StopChanneling((ObjAIBase)owner, ChannelingStopCondition.Cancel, ChannelingStopSource.StunnedOrSilencedOrTaunted);
            SpellBuffAdd((ObjAIBase)owner, owner, "ZhonyasRingShield", 1, 1, 2.5f, default, BuffAddType.REPLACE_EXISTING, BuffType.INVULNERABILITY, 0, true, false, false, default);
            name = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name1 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name2 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name3 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name4 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            name5 = GetSlotSpellName((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.InventorySlots);
            if(name == "ZhonyasHourglass")
            {
                SetSlotSpellCooldownTimeVer2(90, 0, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name1 == "ZhonyasHourglass")
            {
                SetSlotSpellCooldownTimeVer2(90, 1, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name2 == "ZhonyasHourglass")
            {
                SetSlotSpellCooldownTimeVer2(90, 2, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name3 == "ZhonyasHourglass")
            {
                SetSlotSpellCooldownTimeVer2(90, 3, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name4 == "ZhonyasHourglass")
            {
                SetSlotSpellCooldownTimeVer2(90, 4, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
            if(name5 == "ZhonyasHourglass")
            {
                SetSlotSpellCooldownTimeVer2(90, 5, SpellSlotType.InventorySlots, SpellbookType.SPELLBOOK_CHAMPION, (ObjAIBase)owner, false);
            }
        }
    }
}






namespace Spells
{
    public class Forcepulsechaos : Script
    {
        class TargetExecute_nextBuffVars
        {
            public float MoveSpeedMod = 0;
            public int AttackSpeedMod = 0;
        }
        public int[] effect0 = {60, 120, 180, 240, 300};
        public float[] effect1 = {-0.3f, -0.35f, -0.4f, -0.45f, -0.5f};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "ForcePulseCanCast", (ObjAIBase)owner, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TargetExecute_nextBuffVars nextBuffVars = new();
            ApplyDamage((ObjAIBase)attacker, target, this.effect0[level], DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 1, 1, false, false, default);
            nextBuffVars.MoveSpeedMod = this.effect1[level];
            nextBuffVars.AttackSpeedMod = 0;
            SpellBuffAdd((ObjAIBase)attacker, target, "Slow", 1, 100, 3, nextBuffVars, BuffAddType.STACKS_AND_OVERLAPS, BuffType.SLOW, 0, true, default, default, default);
        }
    }
}
namespace Spells
{
    public class Goldcardattack : Script
    {
        public float[] effect0 = {15, 22.5f, 30, 37.5f, 45};
        public float[] effect1 = {1, 1.25f, 1.5f, 1.75f, 2};
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SpellBuffRemove(owner, "GoldCardPreAttack", (ObjAIBase)owner, default);
            SpellBuffRemove(owner, "PickACard", (ObjAIBase)owner, default);
        }
        public void TargetExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos, SpellMissile missileNetworkID)
        {
            TeamId teamID;
            float totalDamage = 0;
            float bonusDamage = 0;
            float goldCardDamage = 0;
            Particle? arrm8y = null;
            //object? _ = null;
            float baseDamage = 0;
            Vector3 targetPosition;
            teamID = GetTeamID(default);
            if(target is ObjAIBase)
            {
                BreakSpellShields(target);
                level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
                totalDamage = GetTotalAttackDamage(owner);
                bonusDamage = this.effect0[level];
                goldCardDamage = Math(bonusDamage, MathOp.MO_ADD, totalDamage);
                ApplyDamage((ObjAIBase)attacker, target, 0, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 0, false, false, (ObjAIBase)attacker);
                ApplyDamage((ObjAIBase)attacker, target, goldCardDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELL, 1, 0.4f, 1, false, false, (ObjAIBase)attacker);
                SpellEffectCreate(out arrm8y, out _, "PickaCard_yellow_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, target, default, default, target, default, default, true, default, default, default, default, default, default);
                if(target is not BaseTurret)
                {
                    ApplyStun(attacker, target, this.effect1[level]);
                }
            }
            else
            {
                baseDamage = GetBaseAttackDamage(attacker);
                ApplyDamage((ObjAIBase)attacker, target, baseDamage, DamageType.DAMAGE_TYPE_PHYSICAL, DamageSource.DAMAGE_SOURCE_ATTACK, 1, 0, 1, false, false, (ObjAIBase)attacker);
                targetPosition = GetCastSpellTargetPos();
                SpellEffectCreate(out arrm8y, out _, "PickaCard_yellow_tar.troy", default, teamID, 10, 0, TeamId.TEAM_UNKNOWN, owner, false, default, default, targetPosition, default, default, default, true, default, default, default, default, default, default);
            }
        }
    }
}


namespace Spells
{
    public class Slash : Script
    {
        class SelfExecute_nextBuffVars
        {
            public object? TargetPos = null;
            public float Damage = 0;
            public bool? WillRemove = null;
            public bool? WillMove = null;
            public object? SlashSpeed = null;
        }
        public int[] effect0 = {70, 100, 130, 160, 190};
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            bool? canMove = null;
            bool? canCast = null;
            canMove = GetCanMove(owner);
            canCast = GetCanCast(owner);
            if(canMove != true)
            {
                SetReturnValue(default);
            }
            if(canCast != true)
            {
                SetReturnValue(default);
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            SelfExecute_nextBuffVars nextBuffVars = new();
            int baseAbilityDamage = 0;
            float totalDamage = 0;
            float baseDamage = 0;
            float bonusDamage = 0;
            float abilityPower = 0;
            Vector3 ownerPos;
            float slashSpeed = 0;
            float distance = 0;
            float duration = 0;
            targetPos = GetCastSpellTargetPos();
            nextBuffVars.TargetPos = targetPos;
            baseAbilityDamage = this.effect0[level];
            totalDamage = GetTotalAttackDamage(owner);
            baseDamage = GetBaseAttackDamage(owner);
            bonusDamage = Math(totalDamage, MathOp.MO_SUBTRACT, baseDamage);
            bonusDamage = Math(1.2f, MathOp.MO_MULTIPLY, bonusDamage);
            abilityPower = GetFlatMagicDamageMod(owner);
            bonusDamage = Math(abilityPower, MathOp.MO_ADD, bonusDamage);
            nextBuffVars.Damage = Math(baseAbilityDamage, MathOp.MO_ADD, bonusDamage);
            nextBuffVars.WillRemove = false;
            ownerPos = GetUnitPosition(owner);
            slashSpeed = 900;
            slashSpeed = Math(slashSpeed, MathOp.MO_MAX, 425);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            duration = Math(distance, MathOp.MO_DIVIDE, slashSpeed);
            nextBuffVars.WillMove = true;
            nextBuffVars.SlashSpeed = slashSpeed;
            SpellBuffAdd((ObjAIBase)attacker, owner, default, 1, 1, 0.05f + duration, nextBuffVars, BuffAddType.REPLACE_EXISTING, BuffType.INTERNAL, 0, true, false, false, default);
        }
    }
}
namespace Spells
{
    public class SlashCast : Script
    {
        public void CanCast(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target)
        {
            int level = 0;
            bool? canMove = null;
            level = GetSlotSpellLevel((ObjAIBase)owner, default, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            if(level > 0)
            {
                canMove = GetCanMove(owner);
                if(canMove == false)
                {
                    SetReturnValue(default);
                }
            }
        }
        public void SelfExecute(AttackableUnit owner, AttackableUnit attacker, AttackableUnit target, int level, Vector3 targetPos)
        {
            Vector3 ownerPos;
            float distance = 0;
            targetPos = GetCastSpellTargetPos();
            ownerPos = GetUnitPosition(owner);
            distance = DistanceBetweenPoints(ownerPos, targetPos);
            FaceDirection(owner, targetPos);
            if(distance > 650)
            {
                targetPos = GetPointByUnitFacingOffset(owner, 645, 0);
            }
            SpellCast((ObjAIBase)owner, default, targetPos, targetPos, false, 0, SpellSlotType.ExtraSlots, level, true, false, false, false, false, default);
        }
    }
}

