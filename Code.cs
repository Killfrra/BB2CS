using System.Numerics;
using static Functions;

public class Code
{
    #region VarDecl
    long? lastTooltip = null;
    long? AP = null;
    long? AS = null;
    long? hpRegen = null;
    float? DamageVar = null;
    long? numberUpgrades = null;
    float? lifeStealMod = null;
    float? spellVampMod = null;
    long? damageMod = null;
    bool? KillMe = null;
    long? TotalArmorAmount = null;
    float? PreviousTakeDamageTime = null;
    long? DealtDamage = null;
    float? TotalDamageOT = null;
    long? TimePassed = null;
    float? PreviousGameTime = null;
    long? IsCancelled = null;
    TeamId? MyTeamID = null;
    TeamId? OldMyTeamID = null;
    float? NextAttackTime = null;
    long? TickNumber = null;
    bool? Broken = null;
    long? SprungCount = null;
    bool? Detonated = null;
    Region? PerceptionBubble = null;
    bool? Sprung = null;
    Object? HomingBeacon = null;
    bool? Active = null;
    Vector3? LastPosition = null;
    float? HealAmount = null;
    float? TempMana = null;
    float? hitsRemaining = null;
    float? ticksRemaining = null;
    bool? executeOnce = null;
    float? APTotal = null;
    float? AttackTotal = null;
    float? WeaponDamage = null;
    float? TickDamage = null;
    long? retaunts = null;
    float? oldArmorAmount = null;
    long? ShieldHealth = null;
    long? BrushChecks = null;
    bool? Activated = null;
    Fade? ID = null;
    bool? HasDealtDamage = null;
    bool? WillRemove = null;
    float? ArmorAmount = null;
    long? TicksRemaining = null;
    long? Timer = null;
    double? MoveSpeedMod = null;
    Object? DefenseToAdd = null;
    bool? SoundClear = null;
    float? TotalMR = null;
    float? abilityPower = null;
    float? Ticktimer = null;
    long? LastCrit = null;
    float? APPERLEV = null;
    float? ManaCost = null;
    float? CurrentDamageTotal = null;
    long? Counter = null;
    bool? removeParticle = null;
    long? Count = null;
    long? LastLifesteal = null;
    Object? BaseDamage = null;
    float? APMod = null;
    long? HPMod = null;
    float? AkaliAP = null;
    float? AddBonusDmgPerc = null;
    float? DmgMult = null;
    float? AkaliDmg = null;
    float? AdditionalVampPercent = null;
    float? VampPercentTooltip = null;
    long? ManaShield = null;
    long? amountToSubtract = null;
    bool? HitUnit = null;
    bool? DoOnce = null;
    Object? MovementSpeed = null;
    bool? GhostSpawned = null;
    bool? PickUp = null;
    long? DOTCounter = null;
    float? InstancedArmor = null;
    float? InstancedMR = null;
    long? Delay = null;
    bool? PartCreated = null;
    bool? VOSoundCreated = null;
    bool? Feared = null;
    long? LastSunlightDamage = null;
    bool? HitTarget = null;
    bool? Exploded = null;
    long? Ready = null;
    bool? WillMove = null;
    int? CasterID = null;
    Object? TestAmount = null;
    long? AreaRadius = null;
    Object? BurnDmg = null;
    Object? punchdmg = null;
    long? LastHeal = null;
    bool? BuffAdded = null;
    bool? WillFade = null;
    float? TimeLastHit = null;
    float? CooldownResevoir = null;
    float? OwnerHealth = null;
    float? MaxMana = null;
    float? OwnerMana = null;
    long? MaxPlayerLevel = null;
    float? ScaleCoef = null;
    float? ScaleCap = null;
    long? PercentBonus = null;
    float? expPercentBonus = null;
    int? NumAlliedChampions = null;
    TeamId? MyTeam = null;
    Region? BubbleID = null;
    Region? BubbleID2 = null;
    long? MassiveBoostOverseer = null;
    float? ArmorMod = null;
    float? ResistMod = null;
    float? DamageMod = null;
    long? Looper = null;
    Region? ThisBubble = null;
    float? PercentReduction = null;
    Object? movementSpeedMod = null;
    long? _1ce = null;
    Object? ArmorBonus = null;
    float? APHealthAdded = null;
    float? AttackHealthAdded = null;
    float? DamageAdded = null;
    bool? CooledDown = null;
    bool? IsActive = null;
    Object? LifeTime = null;
    float? SpeedMod = null;
    double? HasteBoost = null;
    double? BonusDmgPerc = null;
    double? BaseVampPercent = null;
    bool? OneFrame = null;
    long? TicksLeft = null;
    long? CurrentState = null;
    long? PreviousState = null;
    long? IsDisabled = null;
    long? bonusCrit = null;
    long? numTicks = null;
    bool? WillBeam = null;
    bool? IsDead = null;
    long? CooldownVar = null;
    float? BonusAttack = null;
    Region? Bubble = null;
    Vector3? ParticlePosition = null;
    bool? removePart = null;
    float? DamageMultiplier = null;
    float? ActivateTime = null;
    long? SlotNum = null;
    bool? Interrupted = null;
    float? StartTime = null;
    bool? DrainedBool = null;
    Region? bubbleID = null;
    double? DamageTakenFromGuardian = null;
    Object? MoveSpeedBuff = null;
    string? ChaosTeam = null;
    string? OrderTeam = null;
    Region? OrderBubble = null;
    Region? ChaosBubble = null;
    long? DamageIncMod = null;
    long? APIncMod = null;
    string? orderTeam = null;
    string? chaosTeam = null;
    float? ChannelStartTime = null;
    Region? BubbleID3 = null;
    Region? BubbleID4 = null;
    float? BounceCounter = null;
    float? TotalDamage = null;
    float? PrevSpellTrigger = null;
    float? MassiveSpeedMod = null;
    Vector3? StartPosition = null;
    double? VampVar = null;
    double? SpellVampVar = null;
    float? DefenseMod = null;
    float? MaximumArmor = null;
    float? MaximumResist = null;
    float? MaximumDamage = null;
    long? BonusHealth = null;
    float? TowerHP = null;
    float? HealPerTick = null;
    long? TotalShield = null;
    long? ADBuff = null;
    double? LSBuff = null;
    float? TickWorth = null;
    float? TickWorthMana = null;
    float? BonusDamage = null;
    float? BonusResist = null;
    bool? doNotTeleport = null;
    long? LeblancVisionBubble = null;
    Region? a = null;
    TeamId? TeamID = null;
    Region? UnitPerceptionBubble = null;
    bool? HasHitGround = null;
    float? InitialTime = null;
    float? InitialPercentReduction = null;
    float? TotalHits = null;
    Region? BubbleStuff = null;
    Region? b = null;
    float? DamageIncrease = null;
    long? AbilityPower = null;
    Object? damageThreshold = null;
    long? AegisCounter = null;
    long? CooldownBonus = null;
    long? activations = null;
    bool? ParticleAlive = null;
    long? NumHitsRemaining = null;
    Region? VictimBubble = null;
    bool? willPop = null;
    int? RedShift = null;
    float? Value = null;
    float? lastAttackTime = null;
    float? DamageToDeal = null;
    float? MordAP = null;
    float? MordDmg = null;
    float? ArmorIncrease = null;
    int? TeemoSkinID = null;
    bool? HasParticle = null;
    long? SowCast = null;
    Vector3? CastPos = null;
    bool? CustomRun = null;
    long? ShurikenDamage = null;
    float? LastHit = null;
    long? DebuffDuration = null;
    float? DamagePerTickFirst = null;
    TeamId? teamID = null;
    int? LastCount = null;
    float? DamageInc = null;
    float? ArmorInc = null;
    Object? Level = null;
    float? HitCount = null;
    bool? HasCreatedRing = null;
    Object? NewCd = null;
    bool? willRemove = null;
    int? RavenID = null;
    long? Frozen = null;
    float? AttackSpeedBoost = null;
    bool? hasDealtDamage = null;
    long? DamageTaken = null;
    long? MRDebuff = null;
    Object? manaRegen = null;
    float? Duration = null;
    float? TimeBetweenTicks = null;
    Object? DefenseBonus = null;
    Fade? LitRush = null;
    int? VladSkinID = null;
    float? BonusAD = null;
    Object? AttackSpeed = null;
    int? BlitzcrankID = null;
    long? MissileAlive = null;
    Object? FlashMissileId = null;
    bool? RageBonus = null;
    long? BonusSpeed = null;
    bool? Swung = null;
    float? DrainCount = null;
    float? DrainAmount = null;
    float? DamagePerTick = null;
    Object? AbilityPowerInc = null;
    Object? AttackDamageInc = null;
    int? SeaHorseID = null;
    Object? VampPercent = null;
    bool? AlphaStrikeLaunched = null;
    bool? Landed = null;
    Object? CD0 = null;
    Object? CD1 = null;
    Object? CD2 = null;
    int? CougarID = null;
    AttackableUnit? Caster = null;
    bool? MinionBall = null;
    bool? Hit = null;
    Object? SelfParticle = null;
    Region? TempVision = null;
    long? DotCounter = null;
    float? ModdedDamage = null;
    float? DamageSecond = null;
    float? OwnerArmor = null;
    float? OwnerMR = null;
    float? LowerArmor = null;
    float? LowerMR = null;
    float? Survivability = null;
    Object? Range = null;
    long? TimeToFear = null;
    Fade? Temp = null;
    long? FailCount = null;
    Object? Defense = null;
    double? MSPenalty = null;
    long? RangeIncrease = null;
    Region? TempID = null;
    Object? SlowAmount = null;
    Object? Lifetime = null;
    float? VolibearRDamage = null;
    float? VolibearRRatio = null;
    long? lastF1 = null;
    bool? Critical = null;
    long? furyPerHit = null;
    long? furyPerCrit = null;
    long? furyPerKill = null;
    TeamId? AttackerTeamID = null;
    Region? UnitBubble = null;
    double? PercentMod = null;
    TeamId? TeamOfOwner = null;
    bool? COTGFound = null;
    Fade? Fade = null;
    long? RainCount = null;
    Object? AttackSpeedMod = null;
    Object? DamageCounter = null;
    float? NegMoveSpeed = null;
    long? LastMana = null;
    bool? Collide = null;
    bool? HasHit = null;
    Object? SpeedParticle = null;
    bool? Failed = null;
    bool? DoOnce2 = null;
    float? StartingLevel = null;
    bool? HasHealed = null;
    float? TotalHealth = null;
    float? TotalPAR = null;
    float? TotalPAREnergy = null;
    Object? ADRatio = null;
    float? IncreasedArmor = null;
    float? IncreasedDamage = null;
    bool? IsKarthus = null;
    bool? IsKogMaw = null;
    Object? SlowValue = null;
    float? DamageTwo = null;
    Object? MoveSpeedVar = null;
    float? ApMod = null;
    float? BonusAttackSpeed = null;
    long? AttackCounter = null;
    float? BonusAP = null;
    float? InitialHealth = null;
    bool? _100Destroyed = null;
    bool? _66Destroyed = null;
    bool? bountyActive = null;
    Object? DamageRank = null;
    float? PetDamage = null;
    float? PetAP = null;
    Vector3? TargetPos = null;
    float? BaseDamageAmount = null;
    float? FinalDamage = null;
    float? AttackRangeIncrease = null;
    float? StatBoost = null;
    float? BonusArmor = null;
    Object? oldStoredAmount = null;
    long? ShieldAbsorb = null;
    Object? DamageBlock = null;
    long? shieldHealth = null;
    long? Shield = null;
    long? ShieldAmount = null;
    float? StatBoostInc = null;
    float? OwnerLevel = null;
    Object? AkaliDamageVar = null;
    float? RenekthonDamage = null;
    long? BonusMana = null;
    long? BonusAbilityPower = null;
    long? CurrentPar = null;
    long? SmallDamageAmount = null;
    float? BlockAmount = null;
    Object? BonusAttackPercentage = null;
    Object? AttackPercentage = null;
    long? BaseCDR = null;
    float? Blades = null;
    long? count = null;
    AttackableUnit? Attacker1 = null;
    TeamId? TeamIDAttacker = null;
    Fade? blah = null;
    long? MeltingTime = null;
    float? TickDuration = null;
    Object? Cooldown = null;
    long? HasPrilisasBlessing = null;
    long? ChargeTimePassed = null;
    bool? RemoveAnim = null;
    float? DrainExecuted = null;
    float? counter = null;
    Object? TickTock = null;
    Object? RageBonusDamage = null;
    long? PhysicalDamageBonus = null;
    long? PercentLifeSteal = null;
    float? ExtraHP = null;
    float? ExtraRegen = null;
    float? EnergyRefunds = null;
    Object? ManaRegenBonus = null;
    Object? passiveAttackSpeed = null;
    Object? armorMod = null;
    Object? cost0 = null;
    Object? cost2 = null;
    Object? cost3 = null;
    bool? UltFired = null;
    float? numAttacks = null;
    long? MissilePosition = null;
    float? LastTimeExecuted = null;
    #endregion
    public void BuffOnUpdateActions()
    {
        #region VarDecl
        Vector3? CurPos = null;
        TeamId? TeamID = null;
        Minion? Other3 = null;
        float? MoveSpeed = null;
        float? MoveSpeedMod = null;
        Object? Level = null;
        Object? tooltipAmount = null;
        float? AbilityPowerStart = null;
        float? AttackSpeedStart = null;
        float? maxMana = null;
        float? CurrentDamage = null;
        float? healthPercent = null;
        float? maxHealth = null;
        float? HealthToInc = null;
        float? lifeStealMod = null;
        float? spellVampMod = null;
        Object? ForitfyCheck = null;
        float? Cooldown = null;
        Object? ForitfyCheck2 = null;
        TeamId? teamID = null;
        float? numOtherNinjas = null;
        float? CurrentTime = null;
        float? TimePassed = null;
        int? ChaosChannelBuff = null;
        int? OrderChannelCount = null;
        float? TotalBuffCount = null;
        float? modifier = null;
        float? PAR_to_modify = null;
        float? MaxPAR = null;
        float? CurrentPAR = null;
        float? PAR_Percent = null;
        float? NewDuration = null;
        int? Count = null;
        float? HealAmount = null;
        int? Count1 = null;
        int? Count2 = null;
        float? MaxHealth = null;
        float? HalfHealth = null;
        float? CurHealth = null;
        float? BonusShieldHP = null;
        string? UnitName = null;
        float? MyMaxHealth = null;
        float? HealthToDecreaseBy = null;
        float? PercentHealth = null;
        float? CurrentGameTime = null;
        float? CurrentTimePassed = null;
        float? TimeRemaining = null;
        float? ToPrint = null;
        float? Distance = null;
        long? Run = null;
        bool? KilledGuardian = null;
        Object? SSCD1 = null;
        Object? SSCD2 = null;
        float? NewSSCD1 = null;
        float? NewSSCD2 = null;
        float? DamageMultiplier = null;
        int? PrilisasBlessingCount = null;
        float? TotalHP = null;
        float? DtD = null;
        bool? FoundTarget = null;
        int? Count3 = null;
        float? gameTime = null;
        float? aoeReduction = null;
        Minion? Other1 = null;
        bool? CanSee = null;
        TeamId? UnitTeam = null;
        float? CurMana = null;
        float? NegMana = null;
        Vector3? TargetPos = null;
        Vector3? OwnerPos = null;
        float? OwnerMana = null;
        float? NegManaCost = null;
        Vector3? FrontPos = null;
        float? MaxHP = null;
        float? Speed = null;
        float? PlusBonus = null;
        float? UpperBound = null;
        float? LowerBound = null;
        float? Duration = null;
        float? MonkTotalDamage = null;
        float? BaseRange = null;
        float? Range = null;
        float? Health = null;
        float? HealthPercent = null;
        Vector3? CastPosition = null;
        Object? sourcePosition = null;
        float? DamageIncrease = null;
        float? AbilityPower = null;
        bool? isMoving = null;
        Vector3? Position = null;
        float? CritChance = null;
        float? CritDamage = null;
        float? totalDamage = null;
        float? baseDamage = null;
        float? bonusDamage = null;
        float? RatioDamage = null;
        float? PreBonusCrit = null;
        float? DamageToDealHero = null;
        float? CritHero = null;
        float? CritMinion = null;
        Object? DamageToDeal = null;
        bool? canSee = null;
        bool? isStealthed = null;
        float? TempTime = null;
        float? TimeSinceLastHit = null;
        float? dist = null;
        Object? Pos = null;
        float? MS = null;
        Object? FlashCheck = null;
        long? unitFound = null;
        bool? zombie = null;
        float? Temp1 = null;
        bool? targetable = null;
        float? curTime = null;
        float? timeElapsed = null;
        long? baseCooldown = null;
        float? CooldownMod = null;
        float? newCooldown = null;
        float? MaxEnergy = null;
        float? ShieldMax = null;
        Object? shieldPercent = null;
        float? ShieldDecay = null;
        float? tooltipNumber = null;
        float? HPPool = null;
        bool? BrushCheck = null;
        Vector3? CurPosition = null;
        Vector3? LastPosition = null;
        bool? IsInvuln = null;
        TeamId? MushroomTeamID = null;
        Object? ShurikenDamage = null;
        float? BonusDmgFromHP = null;
        float? FinalDamage = null;
        float? CurTime = null;
        bool? collide = null;
        bool? IsStealthed = null;
        float? StackDamage = null;
        Object? DamageAmount = null;
        TeamId? TeamOfOwner = null;
        float? DamagePerTick = null;
        float? TotalAttackDamage = null;
        float? DamagePerSecond = null;
        float? OwnerLevel = null;
        AttackableUnit? Caster = null;
        TeamId? OwnerTeamID = null;
        float? APPreMod = null;
        float? APPostMod = null;
        float? AP = null;
        TeamId? OwnerTeam = null;
        Vector3? LaserPos = null;
        Object? BaseDamage = null;
        float? APVAL = null;
        float? APBONUS = null;
        float? TotalDamage = null;
        float? DamageForDot = null;
        Object? CurrentCrit = null;
        float? TooltipCritChance = null;
        long? MaxMissiles = null;
        bool? Result = null;
        bool? canCast = null;
        Object? DamageCap = null;
        float? DamagePerc = null;
        float? AbilityPowerMod = null;
        float? AbilityPowerBonus = null;
        float? HToDamage = null;
        Object? SpellCD1 = null;
        float? SpellCD1a = null;
        Object? SpellCD2 = null;
        float? SpellCD2a = null;
        Object? SpellCD3 = null;
        float? SpellCD3a = null;
        Object? CurrentLifesteal = null;
        Object? HealthCost = null;
        float? DamageToDealSelf = null;
        Fade? ID = null;
        bool? temp = null;
        float? CurrentHP = null;
        float? CurrentAP = null;
        float? APValue = null;
        float? APMod = null;
        float? MinionDamage = null;
        int? SkinID = null;
        float? DmgMultTooltip = null;
        float? damageToDeal = null;
        AttackableUnit? Attacker = null;
        Object? CenterPosition = null;
        Vector3? CannonPosition = null;
        bool? Temp = null;
        Vector3? FocalPoint = null;
        float? AttackDamage = null;
        float? BaseAD = null;
        float? PassiveAD = null;
        bool? ShouldHit = null;
        bool? Visible = null;
        float? BaseAttack = null;
        float? HitDamage = null;
        TeamId? OwnerVar = null;
        float? FuryRemaining = null;
        Object? CD = null;
        float? NewCD = null;
        double? DamagePercent = null;
        float? DamageToDisplay = null;
        float? BonusAD = null;
        float? BonusAD20 = null;
        float? APBonus = null;
        float? Damage = null;
        Vector3? CastPos = null;
        bool? NoRender = null;
        Vector3? MissileEndPosition = null;
        Object? targetPos = null;
        float? LowerArmorLess = null;
        float? LowerMRLess = null;
        TeamId? CasterID = null;
        Object? BaseMagic = null;
        float? CurrentHealth = null;
        float? MissingHealth = null;
        Object? BasePercent = null;
        float? BaseAP = null;
        float? FlatAPBonus = null;
        float? BonusDamage = null;
        TeamId? TeamID1 = null;
        bool? Moving = null;
        TeamId? TeamID2 = null;
        Vector3? LandPos = null;
        Object? Dmg = null;
        Object? SunlightDamage = null;
        float? TotalAD = null;
        Object? DamageByRank = null;
        float? totalAttackDamage = null;
        float? baseAttackDamage = null;
        float? abilityPower = null;
        float? bonusAttackDamage = null;
        float? attackDamageToAdd = null;
        float? abilityPowerToAdd = null;
        Minion? Other2 = null;
        Vector3? TargetOffsetPos = null;
        Vector3? OwnerOffset = null;
        bool? ReadyNew = null;
        bool? CriticalNew = null;
        float? totalAD = null;
        float? critDisplay = null;
        float? Total = null;
        Object? PoisonBaseDamage = null;
        float? PoisonTotalDamage = null;
        float? BaseAttackDamage = null;
        Vector3? CurrentPos = null;
        Vector3? ForwardPosition = null;
        float? ManaCost = null;
        Object? TickDuration = null;
        Vector3? BombPos = null;
        float? SecondDamage = null;
        float? TotalTime = null;
        Object? MissilePosition = null;
        float? PercHealth = null;
        float? BurnDmg = null;
        float? OffsetAngle = null;
        float? HalfDistance = null;
        Vector3? CenterPoint = null;
        Object? punchdmg = null;
        float? BaseCDR = null;
        float? CDRMod = null;
        long? HeatDecay = null;
        long? BonusHeatDecay = null;
        float? CurrentHeat = null;
        float? BuffTooltip = null;
        float? PercentDamage = null;
        float? InitialDamage = null;
        float? LifeLossPercent = null;
        Object? CurrentHeal = null;
        Object? ManaAmount = null;
        bool? Zombie = null;
        bool? tempStealthed = null;
        float? YorickAP = null;
        float? ADFromAP = null;
        float? HealthFromAP = null;
        bool? NearbyChampion = null;
        bool? CheckBuilding = null;
        bool? IsTaunted = null;
        float? HealthDecay = null;
        float? missingHealthPercent = null;
        float? healthToRestore = null;
        #endregion
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            ApplyDamage(Attacker, Owner, 4, MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0, 1, false, false, Attacker);
        });
        NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
        ForEachUnitInTargetArea(Attacker, Owner, 150, "AffectFriends AffectHeroes NotAffectSelf ", default, default, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "TrailblazerTarget", 1, 1, 2.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, default, default, default, default);
        });
        CurPos = GetPointByUnitFacingOffset(Owner, 30, 180);
        TeamID = GetTeamID(default);
        Other3 = SpawnMinion("AcidTrail", "TestCube", "idle.lua", CurPos, TeamID ?? TEAM_CASTER, true, false, false, true, false, true, 0, default, default, Attacker, default);
        MoveSpeed = GetStat(GetMovementSpeed, Attacker);
        MoveSpeedMod = Math(0 + (MoveSpeed ?? 0), MO_DIVIDE, 2500);
        NextBuffVars.MoveSpeedMod = MoveSpeedMod;
        SpellBuffAdd(Owner, Other3, "TrailblazerApplicator", 1, 1, 0 + (CharVars.TrailDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            tooltipAmount = this.VALUE_BY_LEVEL;
            If(tooltipAmount, default, CO_GREATER_THAN, this.lastTooltip, default, () => {
                this.lastTooltip = tooltipAmount;
                SetBuffToolTipVar(1, 0 + (tooltipAmount ?? 0));
            });
        });
        AbilityPowerStart = GetStat(GetFlatMagicDamageMod, Owner);
        IfHasBuff(Owner, Owner, "ZhonyasRing", () => {
            AbilityPowerStart = Math(0 + (AbilityPowerStart ?? 0), MO_DIVIDE, 1.3);
        });
        AbilityPowerStart = Math(0 + (AbilityPowerStart ?? 0), MO_SUBTRACT, 0 + (this.AP ?? 0));
        this.AP = Math(0 + (AbilityPowerStart ?? 0), MO_MULTIPLY, 0 + (this.PercentMod ?? 0));
        AttackSpeedStart = GetStat(GetPercentAttackSpeedMod, Owner);
        AttackSpeedStart = Math(0 + (AttackSpeedStart ?? 0), MO_SUBTRACT, 0 + (this.AS ?? 0));
        this.AS = Math(0 + (AttackSpeedStart ?? 0), MO_MULTIPLY, 0 + (this.PercentMod ?? 0));
        maxMana = GetPAROrHealth(Target, GetMaxPAR, PAR_MANA);
        this.hpRegen = Math(0 + (this.multiplier ?? 0), MO_MULTIPLY, 0 + (maxMana ?? 0));
        AbilityPowerStart = GetStat(GetFlatMagicDamageMod, Owner);
        IfHasBuff(Owner, Owner, "ZhonyasRing", () => {
            AbilityPowerStart = Math(0 + (AbilityPowerStart ?? 0), MO_DIVIDE, 1.3);
        });
        AbilityPowerStart = Math(0 + (AbilityPowerStart ?? 0), MO_SUBTRACT, 0 + (this.AP ?? 0));
        this.AP = Math(0 + (AbilityPowerStart ?? 0), MO_MULTIPLY, 0 + (this.PercentMod ?? 0));
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            CurrentDamage = this.VALUE_BY_LEVEL;
            If(CurrentDamage, default, CO_GREATER_THAN, this.DamageVar, default, () => {
                this.DamageVar = CurrentDamage;
                SetBuffToolTipVar(1, 0 + (CurrentDamage ?? 0));
            });
        });
        healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        If(healthPercent, default, CO_LESS_THAN, default, 1, () => {
            maxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            HealthToInc = Math(0 + (maxHealth ?? 0), MO_MULTIPLY, 0.03);
            IncHealth(Owner, 0 + (HealthToInc ?? 0), Owner);
        });
        If(healthPercent, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "WormRecoupDebuff", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        IfNotHasBuff(Owner, Owner, "WormRecoupDebuff", () => {
            SpellBuffAdd(Owner, Owner, "WormRecouperate1", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        If(healthPercent, default, CO_GREATER_THAN_OR_EQUAL, default, 0.99, () => {
            ExecutePeriodically(5, this.LastTimeExecuted, false, () => {
                If(this.numberUpgrades, default, CO_GREATER_THAN, default, 0, () => {
                    IncPermanentExpReward(Owner, 1.786);
                    IncPermanentGoldReward(Owner, 0.2667);
                    this.numberUpgrades = Math(0 + (this.numberUpgrades ?? 0), MO_SUBTRACT, 1);
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "MonsterBankBig", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    SpellBuffClear(Owner, "MonsterBankSmall");
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.TickDamage ?? 0), TRUE_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        SetStatus(Owner, default, SetSleep);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.TickDamage ?? 0), TRUE_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        });
        lifeStealMod = GetStat(GetPercentLifeStealMod, Owner);
        lifeStealMod = Math(0 + (lifeStealMod ?? 0), MO_SUBTRACT, 0 + (this.lifeStealMod ?? 0));
        this.lifeStealMod = Math(0 + (lifeStealMod ?? 0), MO_MULTIPLY, -0.5);
        spellVampMod = GetStat(GetPercentSpellBlockMod, Owner);
        spellVampMod = Math(0 + (spellVampMod ?? 0), MO_SUBTRACT, 0 + (this.spellVampMod ?? 0));
        this.spellVampMod = Math(0 + (spellVampMod ?? 0), MO_MULTIPLY, -0.5);
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_LostTarget);
            SpellBuffRemoveCurrent(Owner);
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_LostTarget);
            SpellBuffRemoveCurrent(Owner);
        });
        ForitfyCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(ForitfyCheck, default, CO_EQUAL, default, "SummonerFortify", () => {
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                IfHasBuff(Owner, Owner, "FortifyBuff", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "FortifyBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
                });
            });
        });
        ForitfyCheck2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(ForitfyCheck2, default, CO_EQUAL, default, "SummonerFortify", () => {
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                IfHasBuff(Owner, Owner, "FortifyBuff", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "FortifyBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
                });
            });
        });
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () => {
            NextBuffVars.ArmorBonus = 30;
            NextBuffVars.DamageBonus = 13;
            ForEachUnitInTargetArea(Owner, Owner, 800, "AffectFriends AffectMinions AffectHeroes ", default, default, (Unit) => {
                SpellBuffAdd(Attacker, Unit, "PromoteAura", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
            });
        });
        IfHasBuff(Owner, Owner, "PromoteMeBuff", () => {
            ExecutePeriodically(5, this.LastTimeExecuted, false, () => {
                ForNClosestUnitsInTargetArea(Owner, Owner, 850, "AffectEnemies AffectTurrets ", 1, false, "Taunt", (Unit) => {
                    ApplyTaunt(Unit, Owner, 10);
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ApplyDamage(Attacker, Target, 30, MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 1, default, default, default, default);
        });
        Level = this.Level;
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, false, false, Attacker);
            IfNotHasBuff(Owner, Attacker, "SummonerDot", () => {
                SpellEffectRemove(this.DotPart);
            });
        });
        SpellBuffRemove(Owner, "WillRevive", Owner, 0);
        NextBuffVars.DamagePerTick = this.DamagePerTick;
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Attacker, Owner, 150, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                SpellEffectCreate(hi1, default, "corki_fire_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "pelvis", default, Unit, default, default, false, false, false, false, false, default, default);
                IfHasBuff(Unit, Attacker, "DangerZoneTarget", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Attacker, Unit, "DangerZoneTarget", 1, 1, 0.49, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 1);
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_LostTarget);
            SpellBuffRemoveCurrent(Owner);
        });
        teamID = GetTeamID(default);
        If(teamID, default, CO_EQUAL, default, 100, () => {
            TeleportToKeyLocation(Owner, SPAWN_LOCATION, TEAM_ORDER);
        });
        Else(() => {
            TeleportToKeyLocation(Owner, SPAWN_LOCATION, TEAM_CHAOS);
        });
        IssueOrder(Attacker, AI_MOVETO, default, Owner);
        SpellBuffRemoveCurrent(Owner);
        ExecutePeriodically(20, this.LastTimeExecuted, true, () => {
            teamID = GetTeamID(default);
            numOtherNinjas = -1;
            If(teamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                ForEachChampion(TEAM_ORDER, "IsNinja", true, (Unit) => {
                    numOtherNinjas = Math(0 + (numOtherNinjas ?? 0), MO_ADD, 1);
                });
            });
            Else(() => {
                ForEachChampion(TEAM_CHAOS, "IsNinja", true, (Unit) => {
                    numOtherNinjas = Math(0 + (numOtherNinjas ?? 0), MO_ADD, 1);
                });
            });
            this.damageMod = Math(0 + (numOtherNinjas ?? 0), MO_MULTIPLY, -1);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            CurrentTime = GetGameTime();
            TimePassed = Math(0 + (CurrentTime ?? 0), MO_SUBTRACT, 0 + (this.StartTime ?? 0));
            If(TimePassed, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
                ChaosChannelBuff = GetBuffCountFromAll(Owner, "OdinBombSuppressionChaos");
                OrderChannelCount = GetBuffCountFromAll(Owner, "OdinBombSuppressionOrder");
                TotalBuffCount = Math(0 + (ChaosChannelBuff ?? 0), MO_MAX, 0 + (OrderChannelCount ?? 0));
                If(TotalBuffCount, default, CO_GREATER_THAN, default, 0, () => {
                    modifier = Math(0 + (TotalBuffCount ?? 0), MO_SUBTRACT, 1);
                    modifier = Math(0 + (modifier ?? 0), MO_MULTIPLY, -700);
                    PAR_to_modify = Math(0 + (modifier ?? 0), MO_ADD, -7000);
                    IncPAR(Owner, 0 + (PAR_to_modify ?? 0));
                    MaxPAR = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
                    CurrentPAR = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
                    PAR_Percent = Math(0 + (CurrentPAR ?? 0), MO_DIVIDE, 0 + (MaxPAR ?? 0));
                    If(PAR_Percent, default, CO_LESS_THAN_OR_EQUAL, default, 0.05, () => {
                        NewDuration = 50;
                        IfHasBuff(Attacker, Attacker, "MonsterBuffs", () => {
                            NewDuration = Math(1.15, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                        });
                        Else(() => {
                            IfHasBuff(Attacker, Attacker, "MonsterBuffs2", () => {
                                NewDuration = Math(1.3, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                            });
                        });
                        SpellBuffAdd(Attacker, Attacker, "OdinCenterRelicBuff", 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                        SpellBuffAdd(Attacker, Attacker, "OdinScoreBigRelic", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        SpellBuffAdd(Attacker, Attacker, "OdinCenterRelicBuffDamage", 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                        ApplyDamage(Owner, Owner, 500, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
                    });
                });
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            ForNClosestUnitsInTargetArea(Owner, Owner, 175, "AffectHeroes ", 1, true, default, (Unit) => {
                If(this.KillMe, default, CO_EQUAL, default, false, () => {
                    SpellBuffAdd(Unit, Unit, "OdinShieldRelicBuffHeal", 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                    SpellBuffAdd(Unit, Unit, "OdinScoreSmallRelic", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    this.KillMe = true;
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            Count = GetBuffCountFromAll(Owner, "OdinBombSuppression");
            If(Count, default, CO_EQUAL, default, 0, () => {
                TeamID = GetTeamID(default);
                HealAmount = 20000;
                IncPAR(Owner, 0 + (HealAmount ?? 0));
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 400, "AffectHeroes ", default, true, (Unit) => {
                IfNotHasBuff(Unit, Unit, "OdinShrineTimeBuff", () => {
                    SpellBuffAdd(Unit, Unit, "OdinShrineTimeBuff", 1, 1, 60, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            Count1 = GetBuffCountFromAll(Owner, "OdinGuardianSuppression");
            Count2 = GetBuffCountFromAll(Owner, "OdinMinionSpellAttack");
            Count = Math(0 + (Count1 ?? 0), MO_ADD, 0 + (Count2 ?? 0));
            If(Count, default, CO_EQUAL, default, 0, () => {
                TeamID = GetTeamID(default);
                HealAmount = 300;
                If(TeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                    MaxHealth = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
                    HalfHealth = Math(0 + (MaxHealth ?? 0), MO_MULTIPLY, 0.5);
                    CurHealth = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
                    HealAmount = Math(0 + (HalfHealth ?? 0), MO_SUBTRACT, 0 + (CurHealth ?? 0));
                    HealAmount = Math(0 + (HealAmount ?? 0), MO_MIN, 150);
                    HealAmount = Math(0 + (HealAmount ?? 0), MO_MAX, -150);
                });
                IncPAR(Owner, 0 + (HealAmount ?? 0));
            });
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_LostTarget);
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            ForNClosestUnitsInTargetArea(Owner, Owner, 150, "AffectHeroes ", 1, true, default, (Unit) => {
                If(this.KillMe, default, CO_EQUAL, default, false, () => {
                    SpellBuffAdd(Unit, Unit, "OdinHealthRelicBuff", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                    this.KillMe = true;
                });
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            ForNClosestUnitsInTargetArea(Owner, Owner, 175, "AffectHeroes ", 1, true, default, (Unit) => {
                If(this.KillMe, default, CO_EQUAL, default, false, () => {
                    SpellBuffAdd(Unit, Unit, "OdinSigilBuff", 1, 1, 40, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                    this.KillMe = true;
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            IfNotHasBuff(Owner, Owner, "OdinCenterRelicShieldCheck", () => {
                IfNotHasBuff(Owner, Owner, "OdinCenterRelicShieldCheck2", () => {
                    RemoveShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
                    Level = GetLevel(Owner);
                    BonusShieldHP = Math(0 + (Level ?? 0), MO_MULTIPLY, 25);
                    this.TotalArmorAmount = Math(0 + (BonusShieldHP ?? 0), MO_ADD, 100);
                    IncreaseShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
                    SetBuffToolTipVar(1, 0 + (this.TotalArmorAmount ?? 0));
                    SpellEffectRemove(this.buffParticle2);
                    SpellEffectCreate(this.buffParticle2, default, "odin_center_relic.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
                    SpellBuffAdd(Owner, Owner, "OdinCenterRelicShieldCheck2", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions NotAffectSelf ", default, true, (Unit) => {
                    UnitName = GetUnitSkinName(Unit);
                    If(UnitName, default, CO_EQUAL, default, "Red_Minion_Melee", () => {
                        SpellBuffAdd(Owner, Unit, "OdinShamanBuff", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                    If(UnitName, default, CO_EQUAL, default, "Blue_Minion_Melee", () => {
                        SpellBuffAdd(Owner, Unit, "OdinShamanBuff", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            CurrentTime = GetGameTime();
            TimePassed = Math(0 + (CurrentTime ?? 0), MO_SUBTRACT, 0 + (this.PreviousTakeDamageTime ?? 0));
            If(TimePassed, default, CO_GREATER_THAN_OR_EQUAL, default, 10, () => {
                SpellBuffAdd(Owner, Owner, "OdinGuardianRegen", 4, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
                this.PreviousTakeDamageTime = CurrentTime;
            });
            If(this.DealtDamage, default, CO_EQUAL, default, 0, () => {
                If(TimePassed, default, CO_GREATER_THAN, default, 0.5, () => {
                    this.DealtDamage = 1;
                    MyMaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
                    HealthToDecreaseBy = Math(0.6, MO_MULTIPLY, 0 + (MyMaxHealth ?? 0));
                    ApplyDamage(Owner, Owner, 0 + (HealthToDecreaseBy ?? 0), TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
                });
            });
        });
        CurHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        PercentHealth = Math(0 + (CurHealth ?? 0), MO_DIVIDE, 0 + (MaxHealth ?? 0));
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            IncHealth(Owner, 10, Owner);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            this.TotalDamageOT = Math(0 + (this.TotalDamageOT ?? 0), MO_MULTIPLY, 0.9);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetAreaAddBuff(Owner, Owner, 850, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", Attacker, "OdinVanguardAuraBuff", BUFF_RENEW_EXISTING, BUFF_Aura, 1, 1, 0.5, "NextBuffVars", 0, false, true);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            Count = GetBuffCountFromAll(Owner, "OdinGuardianSuppression");
            CurrentGameTime = GetGameTime();
            If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                CurrentTimePassed = Math(0 + (CurrentGameTime ?? 0), MO_SUBTRACT, 0 + (this.PreviousGameTime ?? 0));
                this.TimePassed = Math(0 + (this.TimePassed ?? 0), MO_ADD, 0 + (CurrentTimePassed ?? 0));
            });
            this.PreviousGameTime = CurrentGameTime;
        });
        ExecutePeriodically(1, this.LastTimeExecuted2, true, () => {
            TimeRemaining = Math(10, MO_SUBTRACT, 0 + (this.TimePassed ?? 0));
            ToPrint = Math(0 + (TimeRemaining ?? 0), MO_ROUND, 0);
            If(TimeRemaining, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                Say(Owner, "KaBoom", default);
                ForEachUnitInTargetArea(Owner, Owner, 1500, "AffectEnemies AffectFriends AffectNeutral AffectMinions ", "OdinGuardianBuff", true, (Unit) => {
                    SpellBuffAdd(Attacker, Unit, "OdinBombDetonation", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                SpellBuffAdd(Attacker, Owner, "OdinBombDetonation", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SpellEffectCreate(default, default, "CrashBoom.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, false, default, default, default);
            });
            Else(() => {
                Count = GetBuffCountFromAll(Owner, "OdinGuardianSuppression");
                If(Count, default, CO_GREATER_THAN, default, 0, () => {
                    Say(Owner, "Defusing - ", ToPrint);
                });
                Else(() => {
                    Say(Owner, "  ", ToPrint);
                });
            });
        });
        TeamID = GetTeamID(default);
        ExecutePeriodically(4, this.LastTimeExecuted, true, () => {
            If(Owner, default, CO_IS_DEAD, default, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        ExecutePeriodically(0, this.LastTimeExecuted, false, () => {
            Distance = DistanceBetweenObjectAndPoint(Owner, this.StartPosition);
            If(Distance, default, CO_GREATER_THAN, default, 10, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            Run = false;
            If(Run, default, CO_EQUAL, default, true, () => {
                If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                    KilledGuardian = false;
                    ForEachUnitInTargetArea(Owner, Owner, 450, "AffectEnemies AffectNeutral AffectMinions ", "OdinGuardianBuff", true, (Unit) => {
                        KilledGuardian = true;
                        ApplyDamage(Owner, Unit, 1000000000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
                    });
                    If(KilledGuardian, default, CO_EQUAL, default, true, () => {
                        ApplyDamage(Attacker, Owner, 1000000000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Attacker);
                    });
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            SSCD1 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
            SSCD2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
            NewSSCD1 = Math(0 + (SSCD1 ?? 0), MO_SUBTRACT, 1);
            NewSSCD2 = Math(0 + (SSCD2 ?? 0), MO_SUBTRACT, 1);
            SetSlotSpellCooldownTimeVer2(0 + (NewSSCD1 ?? 0), 0, SpellSlots, SPELLBOOK_SUMMONER, Owner, false);
            SetSlotSpellCooldownTimeVer2(0 + (NewSSCD2 ?? 0), 1, SpellSlots, SPELLBOOK_SUMMONER, Owner, false);
        });
        ForEachUnitInTargetAreaRandom(Owner, Owner, 1000, "AffectEnemies AffectMinions AffectBarrackOnly ", default, true, 1, (Unit) => {
            SpellBuffAdd(Owner, Owner, "TurretBackdoorBonus", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(0, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 400, "AffectHeroes ", default, true, (Unit) => {
                SpellBuffAdd(Owner, Unit, "OdinShrineBuff", 1, 1, 45, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            ForNClosestUnitsInTargetArea(Owner, Owner, 150, "AffectHeroes ", 1, true, default, (Unit) => {
                If(this.KillMe, default, CO_EQUAL, default, false, () => {
                    SpellBuffAdd(Unit, Unit, "OdinVampRelicBuff", 1, 1, 45, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                    this.KillMe = true;
                });
            });
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_LostTarget);
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 400, "AffectHeroes ", default, true, (Unit) => {
                IfNotHasBuff(Unit, Unit, "OdinShrineHealBuff", () => {
                    SpellBuffAdd(Unit, Unit, "OdinShrineHealBuff", 1, 1, 13, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(0, this.LastTimeExecuted, false, () => {
            Distance = DistanceBetweenObjectAndPoint(Owner, this.StartPosition);
            If(Distance, default, CO_GREATER_THAN, default, 5, () => {
                this.IsCancelled = 1;
                SpellBuffRemoveCurrent(Owner);
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            CurrentTime = GetGameTime();
            TimePassed = Math(0 + (CurrentTime ?? 0), MO_SUBTRACT, 0 + (this.StartTime ?? 0));
            If(TimePassed, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
                ChaosChannelBuff = GetBuffCountFromAll(Owner, "OdinBombSuppressionChaos");
                OrderChannelCount = GetBuffCountFromAll(Owner, "OdinBombSuppressionOrder");
                TotalBuffCount = Math(0 + (ChaosChannelBuff ?? 0), MO_MAX, 0 + (OrderChannelCount ?? 0));
                If(TotalBuffCount, default, CO_GREATER_THAN, default, 0, () => {
                    modifier = Math(0 + (TotalBuffCount ?? 0), MO_SUBTRACT, 1);
                    modifier = Math(0 + (modifier ?? 0), MO_MULTIPLY, -700);
                    PAR_to_modify = Math(0 + (modifier ?? 0), MO_ADD, -7000);
                    IncPAR(Owner, 0 + (PAR_to_modify ?? 0));
                    MaxPAR = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
                    CurrentPAR = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
                    PAR_Percent = Math(0 + (CurrentPAR ?? 0), MO_DIVIDE, 0 + (MaxPAR ?? 0));
                    If(PAR_Percent, default, CO_LESS_THAN_OR_EQUAL, default, 0.05, () => {
                        NewDuration = 50;
                        IfHasBuff(Attacker, Attacker, "MonsterBuffs", () => {
                            NewDuration = Math(1.2, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                        });
                        SpellBuffAdd(Attacker, Attacker, "OdinCenterRelicBuff", 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                        SpellBuffAdd(Attacker, Attacker, "OdinScoreBigRelic", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        SpellBuffAdd(Attacker, Attacker, "OdinCenterRelicBuffDamage", 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                        SpellBuffAdd(Attacker, Attacker, "OdinBombSuccessParticle", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        ApplyDamage(Owner, Owner, 500, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
                    });
                });
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            CurrentTime = GetGameTime();
            TimePassed = Math(0 + (CurrentTime ?? 0), MO_SUBTRACT, 0 + (this.StartTime ?? 0));
            If(TimePassed, default, CO_GREATER_THAN_OR_EQUAL, default, 1.5, () => {
                Run = 1;
                ChaosChannelBuff = GetBuffCountFromAll(Owner, "OdinGuardianSuppressionChaos");
                OrderChannelCount = GetBuffCountFromAll(Owner, "OdinGuardianSuppressionOrder");
                If(ChaosChannelBuff, default, CO_GREATER_THAN, default, 0, () => {
                    If(OrderChannelCount, default, CO_GREATER_THAN, default, 0, () => {
                        Run = 0;
                    });
                });
                If(OrderChannelCount, default, CO_GREATER_THAN, default, 0, () => {
                    If(ChaosChannelBuff, default, CO_GREATER_THAN, default, 0, () => {
                        Run = 0;
                    });
                });
                TotalBuffCount = Math(0 + (OrderChannelCount ?? 0), MO_MAX, 0 + (ChaosChannelBuff ?? 0));
                If(Run, default, CO_EQUAL, default, 1, () => {
                    DamageMultiplier = Math(0 + (TotalBuffCount ?? 0), MO_SUBTRACT, 1);
                    DamageMultiplier = Math(0 + (DamageMultiplier ?? 0), MO_MULTIPLY, 0.4);
                    PrilisasBlessingCount = GetBuffCountFromAll(Owner, "PrilisasBlessing");
                    If(PrilisasBlessingCount, default, CO_GREATER_THAN, default, 0, () => {
                        DamageMultiplier = Math(0 + (DamageMultiplier ?? 0), MO_ADD, 1.31);
                    });
                    Else(() => {
                        DamageMultiplier = Math(0 + (DamageMultiplier ?? 0), MO_ADD, 1.06);
                    });
                    TotalHP = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
                    DtD = Math(0 + (TotalHP ?? 0), MO_MULTIPLY, 0.0294);
                    DtD = Math(0 + (DamageMultiplier ?? 0), MO_MULTIPLY, 0 + (DtD ?? 0));
                    this.MyTeamID = GetTeamID(default);
                    If(this.MyTeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                        If(this.OldMyTeamID, default, CO_NOT_EQUAL, this.MyTeamID, default, () => {
                            SpellBuffRemove(Owner, "OdinCaptureSoundEmptying", Owner, 0);
                        });
                        this.OldMyTeamID = this.MyTeamID;
                        SpellBuffAdd(Owner, Owner, "OdinCaptureSoundFilling", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                        If(ChaosChannelBuff, default, CO_GREATER_THAN, default, 0, () => {
                            DtD = Math(0 + (DtD ?? 0), MO_MULTIPLY, -0.5);
                        });
                        Else(() => {
                            DtD = Math(0 + (DtD ?? 0), MO_MULTIPLY, 0.5);
                        });
                    });
                    Else(() => {
                        If(this.OldMyTeamID, default, CO_NOT_EQUAL, this.MyTeamID, default, () => {
                            SpellBuffRemove(Owner, "OdinCaptureSoundFilling", Owner, 0);
                        });
                        this.OldMyTeamID = this.MyTeamID;
                        DtD = Math(0 + (DtD ?? 0), MO_MULTIPLY, -1);
                        SpellBuffAdd(Owner, Owner, "OdinCaptureSoundEmptying", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                    });
                    IncPAR(Owner, 0 + (DtD ?? 0));
                });
            });
        });
        ExecutePeriodically(0, this.LastTimeExecuted, false, () => {
            Distance = DistanceBetweenObjectAndPoint(Owner, this.StartPosition);
            If(Distance, default, CO_GREATER_THAN, default, 10, () => {
                this.IsCancelled = 1;
                SpellBuffRemoveCurrent(Owner);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            IncHealth(Owner, 0 + (this.HealPerTick ?? 0), Owner);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            ForNClosestUnitsInTargetArea(Owner, Owner, 175, "AffectHeroes ", 1, true, default, (Unit) => {
                If(this.KillMe, default, CO_EQUAL, default, false, () => {
                    TeamID = GetTeamID(default);
                    If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                        NewDuration = 60;
                        IfHasBuff(Unit, Unit, "MonsterBuffs", () => {
                            NewDuration = Math(1.15, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                        });
                        Else(() => {
                            IfHasBuff(Unit, Unit, "MonsterBuffs2", () => {
                                NewDuration = Math(1.3, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                            });
                        });
                        SpellBuffAdd(Unit, Unit, "OdinCenterRelicBuff", 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                        this.KillMe = true;
                        SpellBuffAdd(Unit, Unit, "OdinScoreBigRelic", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            this.TotalDamageOT = Math(0 + (this.TotalDamageOT ?? 0), MO_MULTIPLY, 0.9);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 365, "AffectHeroes ", default, true, (Unit) => {
                Count = GetBuffCountFromAll(Unit, "OdinShrineBombBuff");
                If(Count, default, CO_LESS_THAN, default, 1, () => {
                    NewDuration = 10;
                    IfHasBuff(Unit, Unit, "MonsterBuffs", () => {
                        NewDuration = Math(1.2, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                    });
                    NextBuffVars.SpeedMod = 0.3;
                    SpellBuffAdd(Unit, Unit, "OdinSpeedShrineBuff", 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            CurrentTime = GetGameTime();
            FoundTarget = false;
            Count = GetBuffCountFromAll(Owner, "OdinGuardianSuppression");
            If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                this.NextAttackTime = Math(0 + (CurrentTime ?? 0), MO_ADD, 1);
            });
            If(this.NextAttackTime, default, CO_LESS_THAN_OR_EQUAL, CurrentTime, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 1500, "AffectEnemies AffectNeutral AffectMinions ", "OdinGuardianBuff", true, (Unit) => {
                    If(FoundTarget, default, CO_EQUAL, default, false, () => {
                        If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                            SpellCast(Owner, Unit, default, default, false, 0, SpellSlots, 1 + (_1 ?? 0), true, false, false, false, false, default);
                            this.NextAttackTime = Math(0 + (CurrentTime ?? 0), MO_ADD, 1.25);
                            FoundTarget = true;
                        });
                    });
                });
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            ForNClosestUnitsInTargetArea(Owner, Owner, 175, "AffectHeroes ", 1, true, default, (Unit) => {
                If(this.KillMe, default, CO_EQUAL, default, false, () => {
                    TeamID = GetTeamID(default);
                    If(TeamID, default, CO_EQUAL, default, TEAM_CHAOS, () => {
                        NewDuration = 60;
                        IfHasBuff(Unit, Unit, "MonsterBuffs", () => {
                            NewDuration = Math(1.15, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                        });
                        Else(() => {
                            IfHasBuff(Unit, Unit, "MonsterBuffs2", () => {
                                NewDuration = Math(1.3, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                            });
                        });
                        SpellBuffAdd(Unit, Unit, "OdinCenterRelicBuff", 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                        this.KillMe = true;
                        SpellBuffAdd(Unit, Unit, "OdinScoreBigRelic", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
        });
        ExecutePeriodically(2, this.LastTimeExecuted, false, () => {
            If(this.WillRemove, default, CO_NOT_EQUAL, default, true, () => {
                HealAmount = Math(0 + (this.TickWorth ?? 0), MO_MULTIPLY, 0 + (this.TickNumber ?? 0));
                IncPAR(Owner, 0 + (this.TickWorthMana ?? 0));
                IncHealth(Owner, 0 + (HealAmount ?? 0), Owner);
                SpellEffectCreate(arr, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
                this.TickNumber = Math(0 + (this.TickNumber ?? 0), MO_ADD, 1);
            });
        });
        ExecutePeriodically(0, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 250, "AffectHeroes ", default, true, (Unit) => {
                Count = GetBuffCountFromAll(Unit, "OdinPortalMoveCheck");
                If(Count, default, CO_EQUAL, default, 0, () => {
                    Count2 = GetBuffCountFromAll(Unit, "OdinPortalChannel");
                    If(Count2, default, CO_EQUAL, default, 0, () => {
                        Count3 = GetBuffCountFromAll(Unit, "OdinPortalTeleport");
                        If(Count3, default, CO_EQUAL, default, 0, () => {
                            SpellBuffAdd(Unit, Unit, "OdinPortalMoveCheck", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            ForNClosestUnitsInTargetArea(Attacker, Owner, 500, "AffectEnemies AffectNeutral AffectBuildings AffectMinions AffectHeroes AffectTurrets ", 1, true, default, (Unit) => {
                ApplyTaunt(Unit, Owner, 0.5);
            });
        });
        ExecutePeriodically(30, this.LastTimeExecuted, false, () => {
            gameTime = GetGameTime();
            aoeReduction = Math(0 + (gameTime ?? 0), MO_MULTIPLY, 0.000111);
            aoeReduction = Math(0 + (aoeReduction ?? 0), MO_MIN, 0.2);
            aoeReduction = Math(0 + (aoeReduction ?? 0), MO_MAX, 0);
            aoeReduction = Math(0 + (aoeReduction ?? 0), MO_MULTIPLY, 100);
            SetBuffToolTipVar(1, 0 + (aoeReduction ?? 0));
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            If(Attacker, default, CO_IS_DEAD, default, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            If(Attacker, default, CO_IS_DEAD, default, default, () => {
                this.Broken = true;
                SpellBuffRemove(Owner, "Slow", Attacker, 0);
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                If(Owner, default, CO_IS_DEAD, default, default, () => {
                    this.Broken = true;
                    SpellBuffRemove(Owner, "Slow", Attacker, 0);
                    SpellBuffRemoveCurrent(Owner);
                });
                Else(() => {
                    Distance = DistanceBetweenObjects("Owner", "Attacker");
                    If(Distance, default, CO_GREATER_THAN, default, 865, () => {
                        this.Broken = true;
                        SpellBuffRemove(Owner, "Slow", Attacker, 0);
                        SpellBuffRemoveCurrent(Owner);
                    });
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            If(Attacker, default, CO_IS_DEAD, default, default, () => {
                this.Broken = true;
                SpellBuffRemove(Owner, "Slow", Attacker, 0);
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                If(Owner, default, CO_IS_DEAD, default, default, () => {
                    this.Broken = true;
                    SpellBuffRemove(Owner, "Slow", Attacker, 0);
                    SpellBuffRemoveCurrent(Owner);
                });
                Else(() => {
                    Distance = DistanceBetweenObjects("Owner", "Attacker");
                    If(Distance, default, CO_GREATER_THAN, default, 865, () => {
                        this.Broken = true;
                        SpellBuffRemove(Owner, "Slow", Attacker, 0);
                        SpellBuffRemoveCurrent(Owner);
                    });
                });
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            TeamID = GetTeamID(default);
            If(this.Active, default, CO_EQUAL, default, true, () => {
                If(this.Sprung, default, CO_EQUAL, default, true, () => {
                    SetStatus(Owner, default, SetCanMove);
                    Other1 = this.HomingBeacon;
                    this.SprungCount = Math(0 + (this.SprungCount ?? 0), MO_ADD, 1);
                    If(this.SprungCount, default, CO_GREATER_THAN_OR_EQUAL, default, 11, () => {
                        If(this.Detonated, default, CO_EQUAL, default, false, () => {
                            this.Detonated = true;
                            SpellEffectCreate(Particle, default, "maoki_sapling_detonate.troy", default, TeamID ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, true, default, default, false, false, default, default);
                            ForEachUnitInTargetArea(Attacker, Owner, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.MineDamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
                            });
                        });
                        SpellBuffRemoveCurrent(Owner);
                        BreakExecution();
                    });
                    Else(() => {
                        If(this.SprungCount, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
                            IssueOrder(Owner, AI_MOVETO, default, Other1);
                            If(this.SprungCount, default, CO_EQUAL, default, 2, () => {
                                PlayAnimation("Run", 0, Owner, false, false, false);
                            });
                        });
                        ForNClosestUnitsInTargetArea(Owner, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 10, true, default, (Unit) => {
                            CanSee = CanSeeTarget(Owner, Unit);
                            If(CanSee, default, CO_EQUAL, default, true, () => {
                                If(this.Detonated, default, CO_EQUAL, default, false, () => {
                                    SpellBuffRemove(Owner, "MaokaiSapling2", Owner, 0);
                                    this.Detonated = true;
                                    SpellEffectCreate(Particle, default, "maoki_sapling_detonate.troy", default, TeamID ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, true, default, default, false, false, default, default);
                                    ForEachUnitInTargetArea(Attacker, Owner, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                                        BreakSpellShields(Unit);
                                        ApplyDamage(Attacker, Unit, 0 + (this.MineDamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
                                    });
                                });
                            });
                            SpellBuffRemoveCurrent(Owner);
                        });
                    });
                });
                Else(() => {
                    ForNClosestUnitsInTargetArea(Owner, Owner, 550, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 8, true, default, (Unit) => {
                        CanSee = CanSeeTarget(Owner, Unit);
                        If(CanSee, default, CO_EQUAL, default, true, () => {
                            If(this.Sprung, default, CO_EQUAL, default, false, () => {
                                UnitTeam = GetTeamID(default);
                                this.PerceptionBubble = AddUnitPerceptionBubble(UnitTeam, 10, Owner, 2.5, Nothing, Owner, false);
                                this.Sprung = true;
                                this.SprungCount = 0;
                                this.HomingBeacon = Unit;
                                FaceDirection(Owner, Unit);
                                OverrideAnimation("Idle1", "Pop", Owner);
                                SpellBuffAdd(Owner, Owner, "MaokaiSapling2", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                            });
                        });
                    });
                });
            });
            Else(() => {
                this.SprungCount = Math(0 + (this.SprungCount ?? 0), MO_ADD, 1);
                If(this.SprungCount, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
                    this.SprungCount = 0;
                    this.Active = true;
                    SpellEffectCreate(this.Particle, this.Particle2, "maokai_sapling_rdy_indicator_green.troy", "maokai_sapling_rdy_indicator_red.troy", TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, "BUFFBONE_CSTM_STEM_3", default, Target, default, default, false, default, default, false, false, default, default);
                    SpellEffectCreate(this.Particle3, this.Particle4, "maokai_sapling_team_id_green.troy", "maokai_sapling_team_id_red.troy", TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
                });
            });
        });
        ExecutePeriodically(0.5, this.DamageManaTimer, false, () => {
            CurMana = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
            If(this.ManaCost, default, CO_GREATER_THAN, CurMana, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                NegMana = Math(0 + (this.ManaCost ?? 0), MO_MULTIPLY, -1);
                IncPAR(Owner, 0 + (NegMana ?? 0));
            });
        });
        ExecutePeriodically(0.25, this.SlowTimer, false, () => {
            TargetPos = this.TargetPos;
            OwnerPos = GetUnitPosition(Owner);
            Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
            If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 1400, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            ForEachUnitInTargetArea(Attacker, TargetPos, 550, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                NextBuffVars.TargetPos = this.TargetPos;
                NextBuffVars.DefenseBonus = this.DefenseBonus;
                NextBuffVars.CCReduction = this.CCReduction;
                SpellBuffAdd(Attacker, Unit, "MaokaiDrain3Defense", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                ApplyAssistMarker(Owner, Unit, 10);
            });
        });
        ForEachUnitInTargetArea(Attacker, Owner, 180, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            Count = GetBuffCountFromAll(Unit, "PoisonTrailMarker");
            If(Count, default, CO_EQUAL, default, 0, () => {
                SpellBuffAdd(Attacker, Unit, "PoisonTrailMarker", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
                NextBuffVars.DamagePerTick = this.DamagePerTick;
                SpellBuffAdd(Attacker, Unit, "PoisonTrailTarget", 1, 1, 2.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Poison, 0, true, false, default, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, default, false, false, default);
        });
        CurPos = GetPointByUnitFacingOffset(Owner, 25, 180);
        Distance = DistanceBetweenPoints(CurPos, this.LastPosition);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            OwnerMana = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
            If(OwnerMana, default, CO_LESS_THAN, this.ManaCost, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                NegManaCost = Math(-1, MO_MULTIPLY, 0 + (this.ManaCost ?? 0));
                IncPAR(Owner, 0 + (NegManaCost ?? 0));
                If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 90, () => {
                    TeamID = GetTeamID(default);
                    FrontPos = GetPointByUnitFacingOffset(Owner, 35, 0);
                    NextBuffVars.DamagePerTick = this.DamagePerTick;
                    Other3 = SpawnMinion("AcidTrail", "TestCube", "idle.lua", FrontPos, TeamID ?? TEAM_CASTER, true, false, false, true, false, true, 0, false, true, Attacker, default);
                    SpellBuffAdd(Attacker, Other3, "PoisonTrailApplicator", 1, 1, 3.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
                    this.LastPosition = CurPos;
                });
            });
        });
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 90, () => {
            TeamID = GetTeamID(default);
            NextBuffVars.DamagePerTick = this.DamagePerTick;
            Other3 = SpawnMinion("AcidTrail", "TestCube", "idle.lua", CurPos, TeamID ?? TEAM_CASTER, true, false, false, true, false, true, 0, false, true, Attacker, default);
            SpellBuffAdd(Attacker, Other3, "PoisonTrailApplicator", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
            this.LastPosition = CurPos;
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Attacker, Owner, 265, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                NextBuffVars.SlowPercent = this.SlowPercent;
                SpellBuffAdd(Attacker, Unit, "MegaAdhesiveTarget", 1, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        MaxHP = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        this.HealAmount = Math(0 + (MaxHP ?? 0), MO_MULTIPLY, 0.07);
        this.HealAmount = Math(0 + (this.HealAmount ?? 0), MO_ROUND, 0);
        SetBuffToolTipVar(1, 0 + (this.HealAmount ?? 0));
        this.TempMana = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        SpellBuffRemoveCurrent(Owner);
        TargetPos = this.TargetPos;
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        Speed = GetStat(GetMovementSpeed, Owner);
        PlusBonus = Math(0 + (Speed ?? 0), MO_MULTIPLY, 0.15);
        PlusBonus = Math(0 + (PlusBonus ?? 0), MO_ADD, 5);
        UpperBound = Math(350, MO_ADD, 0 + (PlusBonus ?? 0));
        LowerBound = Math(350, MO_SUBTRACT, 0 + (PlusBonus ?? 0));
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, LowerBound, default, () => {
            If(Distance, default, CO_LESS_THAN_OR_EQUAL, UpperBound, default, () => {
                If(Attacker, default, CO_IS_NOT_DEAD, default, default, () => {
                    SpellBuffAdd(Attacker, Owner, "VeigarEventHorizonPrevent", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
                    BreakSpellShields(Owner);
                    ApplyStun(Attacker, Owner, 0 + (this.StunDuration ?? 0));
                    SpellBuffRemove(Owner, "VeigarEventHorizonMarker", Attacker, default);
                });
            });
        });
        TargetPos = this.TargetPos;
        ForEachUnitInTargetArea(Attacker, TargetPos, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            IfNotHasBuff(Unit, Attacker, "VeigarEventHorizonMarker", () => {
                IfNotHasBuff(Unit, Attacker, "VeigarEventHorizonPrevent", () => {
                    Duration = Math(3.05, MO_SUBTRACT, 0 + (LifeTime ?? 0));
                    NextBuffVars.StunDuration = this.StunDuration;
                    NextBuffVars.TargetPos = this.TargetPos;
                    SpellBuffAdd(Attacker, Unit, "VeigarEventHorizonMarker", 1, 1, 0 + (Duration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
                });
            });
        });
        MonkTotalDamage = GetTotalAttackDamage(Owner);
        MonkTotalDamage = Math(0 + (MonkTotalDamage ?? 0), MO_MULTIPLY, 0 + (CharVars.FlurryScalar ?? 0));
        ExecutePeriodically(0.15, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetAreaRandom(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectBuildings AffectMinions AffectHeroes AffectTurrets ", default, default, 1, (Unit) => {
                If(Unit, default, CO_IS_TYPE_AI, default, default, () => {
                    SpellEffectCreate(default, default, "GlobalHit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, default, default, default, default);
                });
                ApplyDamage(Attacker, Unit, 0 + (MonkTotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, default, default, default, default);
            });
        });
        ForEachUnitInTargetArea(Attacker, Owner, 160, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            If(Unit, default, CO_NOT_EQUAL, Owner, default, () => {
                IfNotHasBuff(Unit, Unit, "BlindMonkRMarker", () => {
                    SpellBuffAdd(Unit, Unit, "BlindMonkRMarker", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Unit);
                    TeamID = GetTeamID(default);
                    SpellEffectCreate(PH, default, "blind_monk_ult_unit_impact.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                    ApplyDamage(Attacker, Unit, 0 + (this.SecondaryDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Attacker);
                    SpellBuffAdd(Attacker, Unit, "BlindMonkRDamage", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, true, default);
                });
            });
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            tooltipAmount = this.VALUE_BY_LEVEL;
            If(tooltipAmount, default, CO_GREATER_THAN, this.lastTooltip, default, () => {
                this.lastTooltip = tooltipAmount;
                SetBuffToolTipVar(1, 0 + (tooltipAmount ?? 0));
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            IfNotHasBuff(Owner, Attacker, "Suppression", () => {
                StopChanneling(Attacker, ChannelingStopCondition_Cancel, ChannelingStopSource_LostTarget);
                SpellBuffRemoveCurrent(Owner);
            });
            ElseIf(Attacker, default, CO_IS_DEAD, default, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            ElseIf(this.hitsRemaining, default, CO_GREATER_THAN, default, 0, () => {
                SpellEffectCreate(arr, default, "InfiniteDuress_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
                ApplyDamage(Attacker, Owner, 0 + (this.damagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
                this.hitsRemaining = Math(0 + (this.hitsRemaining ?? 0), MO_SUBTRACT, 1);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            If(Owner, default, CO_IS_DEAD, default, default, () => {
                
            });
            Else(() => {
                ExecutePeriodically(2, this.LastTimeExecuted, false, () => {
                    BaseRange = Math(0 + (Level ?? 0), MO_MULTIPLY, 800);
                    Range = Math(0 + (BaseRange ?? 0), MO_ADD, 700);
                    ForEachUnitInTargetArea(Owner, Owner, 0 + (Range ?? 0), "AffectEnemies AffectHeroes ", default, true, (Unit) => {
                        MaxHealth = GetPAROrHealth(Unit, GetMaxHealth, PAR_MANA);
                        Health = GetPAROrHealth(Unit, GetHealth, PAR_MANA);
                        HealthPercent = Math(0 + (Health ?? 0), MO_DIVIDE, 0 + (MaxHealth ?? 0));
                        If(HealthPercent, default, CO_LESS_THAN_OR_EQUAL, default, 0.5, () => {
                            SpellBuffAdd(Attacker, Unit, "BloodScent_target", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                            NextBuffVars.MoveSpeedBuff = this.VALUE_BY_LEVEL;
                            SpellBuffAdd(Attacker, Attacker, "BloodScent", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Haste, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        If(Attacker, default, CO_IS_DEAD, default, default, () => {
            ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Owner);
        });
        SetBuffToolTipVar(1, 0 + (CharVars.IlluminateDamage ?? 0));
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            If(this.ticksRemaining, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                this.ticksRemaining = Math(0 + (this.ticksRemaining ?? 0), MO_SUBTRACT, 1);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                CastPosition = this.CastPosition;
                sourcePosition = this.sourcePosition;
                SpellCast(Owner, Nothing, CastPosition, CastPosition, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, sourcePosition);
            });
            Else(() => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            DamageIncrease = Math(0 + (this.DamageIncrease ?? 0), MO_MULTIPLY, 0.5);
            NextBuffVars.DamageIncrease = DamageIncrease;
            AbilityPower = Math(0 + (this.AbilityPower ?? 0), MO_MULTIPLY, 0.5);
            NextBuffVars.AbilityPower = AbilityPower;
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", default, true, (Unit) => {
                SpellBuffAdd(Attacker, Unit, "RadianceAura", 1, 1, 1.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                ApplyAssistMarker(Attacker, Unit, 10);
            });
        });
        If(this.executeOnce, default, CO_EQUAL, default, false, () => {
            isMoving = GetStatus(Owner, IsMoving);
            If(isMoving, default, CO_EQUAL, default, true, () => {
                this.executeOnce = true;
                OverrideAnimation("Run", "Run2", Owner);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        Position = this.Position;
        ForEachUnitInTargetArea(Owner, Position, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Owner, Unit, "Slow", 1, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            CritChance = GetStat(GetFlatCritChanceMod, Owner);
            CritDamage = GetStat(GetFlatCritDamageMod, Owner);
            CritDamage = Math(2, MO_ADD, 0 + (CritDamage ?? 0));
            PlayAnimation("Spell3", 0, Owner, true, false, true);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            totalDamage = GetTotalAttackDamage(Owner);
            baseDamage = GetStat(GetBaseAttackDamage, Owner);
            bonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (baseDamage ?? 0));
            RatioDamage = Math(0.7, MO_MULTIPLY, 0 + (bonusDamage ?? 0));
            PreBonusCrit = Math(0 + (RatioDamage ?? 0), MO_MULTIPLY, 0 + (CritDamage ?? 0));
            DamageToDealHero = Math(0 + (RatioDamage ?? 0), MO_ADD, 0 + (this.baseDamage ?? 0));
            CritHero = Math(0 + (PreBonusCrit ?? 0), MO_ADD, 0 + (this.baseDamage ?? 0));
            CritMinion = Math(0 + (CritHero ?? 0), MO_DIVIDE, 2);
            DamageToDeal = Math(0 + (DamageToDealHero ?? 0), MO_DIVIDE, 2);
            TeamID = GetTeamID(default);
            ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                    If(CritChance, default, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                        ApplyDamage(Attacker, Unit, 0 + (CritHero ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                        SpellEffectCreate(BSCritPH, default, "garen_bladestormCrit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                    });
                    Else(() => {
                        ApplyDamage(Attacker, Unit, 0 + (DamageToDealHero ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                        SpellEffectCreate(SamPH, default, "garen_keeper0fPeace_tar_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                    });
                });
                Else(() => {
                    canSee = CanSeeTarget(Owner, Unit);
                    If(canSee, default, CO_EQUAL, default, true, () => {
                        If(CritChance, default, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                            ApplyDamage(Attacker, Unit, 0 + (CritMinion ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                            SpellEffectCreate(BSCritPH, default, "garen_bladestormCrit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                        });
                        Else(() => {
                            ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                            SpellEffectCreate(SamPH, default, "garen_keeper0fPeace_tar_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, true, false, false, false, false, default, default);
                        });
                    });
                    Else(() => {
                        isStealthed = GetStatus(Unit, GetStealthed);
                        If(isStealthed, default, CO_EQUAL, default, false, () => {
                            If(CritChance, default, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                                ApplyDamage(Attacker, Unit, 0 + (CritMinion ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                                SpellEffectCreate(BSCritPH, default, "garen_bladestormCrit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                            });
                            Else(() => {
                                ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                                SpellEffectCreate(SamPH, default, "garen_keeper0fPeace_tar_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, true, false, false, false, false, default, default);
                            });
                        });
                    });
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            CurHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
            IfNotHasBuff(Owner, Owner, "GarenRecoupDebuff", () => {
                SpellBuffAdd(Owner, Owner, "GarenRecouperate1", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, false, false, false, default);
            });
        });
        this.APTotal = GetStat(GetFlatMagicDamageMod, Owner);
        this.AttackTotal = GetStat(GetFlatPhysicalDamageMod, Owner);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "EmpowerCleave", 3, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        this.WeaponDamage = GetStat(GetFlatPhysicalDamageMod, Owner);
        TempTime = GetTime();
        TimeSinceLastHit = Math(0 + (TempTime ?? 0), MO_SUBTRACT, 0 + (CharVars.LastHitTime ?? 0));
        If(TimeSinceLastHit, default, CO_GREATER_THAN, default, 2.5, () => {
            CharVars.NumSwings = 0;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Owner, Owner, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                ApplyDamage(Owner, Unit, 0 + (this.DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.225, 1, false, false, Attacker);
            });
        });
        If(Attacker, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Else(() => {
            dist = DistanceBetweenObjects("Attacker", "Owner");
            If(dist, default, CO_GREATER_THAN_OR_EQUAL, default, 800, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(this.TickDamage, default, CO_GREATER_THAN, default, 0, () => {
                NextBuffVars.TickDamage = this.TickDamage;
                SpellBuffAdd(Attacker, Owner, "TimeBombCountdown", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                ApplyDamage(Attacker, Owner, 0 + (this.TickDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
                this.TickDamage = Math(0 + (this.TickDamage ?? 0), MO_SUBTRACT, 1);
            });
        });
        Count = GetBuffCountFromAll(Owner, "AhriFoxFireMissileTwo");
        If(Count, default, CO_EQUAL, default, 3, () => {
            SpellBuffClear(Owner, "AhriFoxFireMissileTwo");
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            IfHasBuff(Attacker, Attacker, "AhriFoxFire", () => {
                
            });
            Else(() => {
                SpellBuffClear(Owner, "AhriSoulCrusher3");
            });
        });
        PauseAnimation(Owner, true);
        Pos = GetPointByUnitFacingOffset(Attacker, -75, 0);
        Distance = DistanceBetweenObjectAndPoint(Owner, Pos);
        MS = Math(0 + (Distance ?? 0), MO_MULTIPLY, 2.6);
        Move(Owner, Pos, 0 + (MS ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, KEEP_CURRENT_FACING);
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            TeamID = GetTeamID(default);
            If(this.NumHitsRemaining, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                SpellBuffRemoveCurrent(Attacker);
            });
            If(Owner, default, CO_IS_DEAD, default, default, () => {
                SpellBuffRemoveCurrent(Attacker);
            });
        });
        FlashCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Attacker, GetSlotSpellName);
        If(FlashCheck, default, CO_EQUAL, default, "SummonerFlash", () => {
            SealSpellSlot(0, SpellSlots, Attacker, true, SPELLBOOK_SUMMONER);
        });
        FlashCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Attacker, GetSlotSpellName);
        If(FlashCheck, default, CO_EQUAL, default, "SummonerFlash", () => {
            SealSpellSlot(1, SpellSlots, Attacker, true, SPELLBOOK_SUMMONER);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            IfNotHasBuff(Owner, Nothing, "H28GEvolutionTurretSpell1", () => {
                IfNotHasBuff(Owner, Nothing, "H28GEvolutionTurretSpell2", () => {
                    IfNotHasBuff(Owner, Nothing, "H28GEvolutionTurretSpell3", () => {
                        unitFound = 0;
                        IfHasBuff(Owner, Nothing, "UpgradeSlow", () => {
                            ForNClosestUnitsInTargetArea(Attacker, Owner, 425, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
                                unitFound = 1;
                                SpellBuffAdd(Unit, Owner, "H28GEvolutionTurretSpell2", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                            });
                        });
                        If(unitFound, default, CO_EQUAL, default, 0, () => {
                            ForNClosestUnitsInTargetArea(Attacker, Owner, 425, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectTurrets ", 1, true, default, (Unit) => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    SpellBuffAdd(Unit, Owner, "H28GEvolutionTurretSpell2", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                                });
                                Else(() => {
                                    SpellBuffAdd(Unit, Owner, "H28GEvolutionTurretSpell3", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                                });
                            });
                        });
                    });
                    Else(() => {
                        IfHasBuff(Owner, Nothing, "UpgradeSlow", () => {
                            ForNClosestUnitsInTargetArea(Attacker, Owner, 425, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
                                SpellBuffClear(Owner, "H28GEvolutionTurretSpell3");
                                SpellBuffAdd(Unit, Owner, "H28GEvolutionTurretSpell2", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                            });
                        });
                    });
                });
            });
        });
        If(Attacker, default, CO_IS_DEAD, default, default, () => {
            zombie = GetIsZombie(Attacker);
            If(zombie, default, CO_EQUAL, default, false, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                Pos = GetUnitPosition(Attacker);
                Other1 = CloneUnitPet(Attacker, "MordekaiserCotgPetSlow", 0, Pos, 0, 0, false);
                Temp1 = GetPAROrHealth(Other1, GetMaxHealth, PAR_MANA);
                IncHealth(Other1, 0 + (Temp1 ?? 0), Other1);
                SpellBuffAdd(Owner, Other1, "MordekaiserCOTGPetBuff2", 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SpellBuffClear(Owner, "MordekaiserCOTGRevive");
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            If(Attacker, default, CO_IS_DEAD, default, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        Distance = DistanceBetweenObjects("Attacker", "Owner");
        targetable = GetStatus(Attacker, GetTargetable);
        If(Distance, default, CO_GREATER_THAN, default, 475, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Attacker, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(targetable, default, CO_EQUAL, default, false, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        curTime = GetGameTime();
        timeElapsed = Math(0 + (curTime ?? 0), MO_SUBTRACT, 0 + (this.lastAttackTime ?? 0));
        If(timeElapsed, default, CO_GREATER_THAN_OR_EQUAL, default, 0.75, () => {
            If(this.retaunts, default, CO_EQUAL, default, 0, () => {
                ApplyTaunt(Attacker, Owner, 250);
                this.retaunts = Math(0 + (this.retaunts ?? 0), MO_ADD, 1);
            });
            Else(() => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            NextBuffVars.DamageToDeal = this.DamageToDeal;
            SpellBuffAdd(Owner, Attacker, "MordekaiserCOTGDot", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Distance = DistanceBetweenObjects("Attacker", "Owner");
        targetable = GetStatus(Attacker, GetTargetable);
        If(Distance, default, CO_GREATER_THAN, default, 625, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Attacker, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(targetable, default, CO_EQUAL, default, false, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        curTime = GetGameTime();
        timeElapsed = Math(0 + (curTime ?? 0), MO_SUBTRACT, 0 + (this.lastAttackTime ?? 0));
        If(timeElapsed, default, CO_GREATER_THAN_OR_EQUAL, default, 0.75, () => {
            If(this.retaunts, default, CO_LESS_THAN_OR_EQUAL, default, 1, () => {
                ApplyTaunt(Attacker, Owner, 250);
                this.retaunts = Math(0 + (this.retaunts ?? 0), MO_ADD, 1);
            });
            Else(() => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        Distance = DistanceBetweenObjects("Attacker", "Owner");
        targetable = GetStatus(Attacker, GetTargetable);
        If(Distance, default, CO_GREATER_THAN, default, 625, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Attacker, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(targetable, default, CO_EQUAL, default, false, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        curTime = GetGameTime();
        timeElapsed = Math(0 + (curTime ?? 0), MO_SUBTRACT, 0 + (this.lastAttackTime ?? 0));
        If(timeElapsed, default, CO_GREATER_THAN_OR_EQUAL, default, 0.75, () => {
            If(this.retaunts, default, CO_EQUAL, default, 0, () => {
                ApplyTaunt(Attacker, Owner, 250);
                this.retaunts = Math(0 + (this.retaunts ?? 0), MO_ADD, 1);
            });
            Else(() => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                IfNotHasBuff(Owner, Owner, "HeimerdingerTurretTimer", () => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
                        Count = GetBuffCountFromCaster(Owner, Owner, "HeimerdingerTurretReady");
                        If(Count, default, CO_LESS_THAN, default, 2, () => {
                            baseCooldown = 25;
                            CooldownMod = GetStat(GetPercentCooldownMod, Owner);
                            CooldownMod = Math(1, MO_ADD, 0 + (CooldownMod ?? 0));
                            newCooldown = Math(0 + (baseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMod ?? 0));
                            SpellBuffAdd(Owner, Owner, "HeimerdingerTurretTimer", 1, 1, 0 + (newCooldown ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, false, false, false, default);
                        });
                    });
                    ElseIf(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                        IfNotHasBuff(Owner, Owner, "HeimerdingerTurretReady", () => {
                            baseCooldown = 25;
                            CooldownMod = GetStat(GetPercentCooldownMod, Owner);
                            CooldownMod = Math(1, MO_ADD, 0 + (CooldownMod ?? 0));
                            newCooldown = Math(0 + (baseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMod ?? 0));
                            SpellBuffAdd(Owner, Owner, "HeimerdingerTurretTimer", 1, 1, 0 + (newCooldown ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, false, false, false, default);
                        });
                    });
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Unit) => {
                NextBuffVars.DamagePerTick = this.DamagePerTick;
                SpellBuffAdd(Owner, Unit, "MordekaiserCreepingDeathDebuff", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, default, default, default, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Attacker, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                NextBuffVars.DamagePerTick = this.DamagePerTick;
                SpellBuffAdd(Unit, Attacker, "MordekaiserCreepingDeathDebuff", 100, 1, 0.001, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, true, false, false, default);
            });
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            MaxEnergy = GetPAROrHealth(Owner, GetMaxPAR, PAR_SHIELD);
            Level = GetLevel(Owner);
            ShieldMax = Math(0 + (Level ?? 0), MO_MULTIPLY, 30);
            ShieldMax = Math(0 + (ShieldMax ?? 0), MO_ADD, 90);
            SetBuffToolTipVar(1, 0 + (ShieldMax ?? 0));
            shieldPercent = this.VALUE_BY_LEVEL;
            SetBuffToolTipVar(2, 0 + (shieldPercent ?? 0));
            ShieldDecay = Math(0 + (MaxEnergy ?? 0), MO_MULTIPLY, 0.03);
            ShieldDecay = Math(0 + (ShieldDecay ?? 0), MO_MULTIPLY, -1);
            IncPAR(Owner, 0 + (ShieldDecay ?? 0));
            baseDamage = GetStat(GetBaseAttackDamage, Owner);
            totalDamage = GetTotalAttackDamage(Owner);
            bonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (baseDamage ?? 0));
            SetSpellToolTipVar(0 + (bonusDamage ?? 0), 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            tooltipNumber = Math(0 + (bonusDamage ?? 0), MO_MULTIPLY, 1.65);
            SetSpellToolTipVar(0 + (tooltipNumber ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(1, CharVars.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            NextBuffVars.healthRegen = this.VALUE_BY_LEVEL;
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions AffectHeroes AffectTurrets NotAffectSelf ", default, true, (Unit) => {
                SpellBuffAdd(Owner, Unit, "TechmaturgicalRepairBots", 1, 1, 1.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
            baseCooldown = 25;
            CooldownMod = GetStat(GetPercentCooldownMod, Owner);
            CooldownMod = Math(1, MO_ADD, 0 + (CooldownMod ?? 0));
            newCooldown = Math(0 + (baseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMod ?? 0));
            SetSpellToolTipVar(0 + (newCooldown ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        If(this.ShieldHealth, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            IfNotHasBuff(Owner, Owner, "MalphiteShieldBeenHit", () => {
                this.oldArmorAmount = this.ShieldHealth;
                HPPool = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
                this.ShieldHealth = Math(0.1, MO_MULTIPLY, 0 + (HPPool ?? 0));
                this.oldArmorAmount = Math(0 + (this.ShieldHealth ?? 0), MO_SUBTRACT, 0 + (this.oldArmorAmount ?? 0));
                ModifyShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true, true);
            });
        });
        If(default, true, CO_EQUAL, default, false, () => {
            SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        });
        ExecutePeriodically(3, this.LastTimeExecuted, false, () => {
            BrushCheck = IsInBrush(Owner);
            If(BrushCheck, default, CO_EQUAL, default, true, () => {
                If(this.BrushChecks, default, CO_EQUAL, default, 12, () => {
                    If(default, 0.05, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                        SpellBuffAdd(Owner, Owner, "SkarnerBrushSound", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
                        SpellBuffClear(Owner, "SkarnerBrushCheck");
                    });
                    Else(() => {
                        this.BrushChecks = 0;
                    });
                });
                Else(() => {
                    this.BrushChecks = Math(0 + (this.BrushChecks ?? 0), MO_ADD, 3);
                });
            });
            Else(() => {
                this.BrushChecks = 0;
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.16, 1, false, false, Attacker);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
        });
        CurPosition = GetUnitPosition(Owner);
        LastPosition = this.LastPosition;
        Distance = DistanceBetweenPoints(CurPosition, LastPosition);
        If(Distance, default, CO_NOT_EQUAL, default, 0, () => {
            this.LastPosition = CurPosition;
            SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IsInvuln = GetStatus(Owner, GetInvulnerable);
        If(IsInvuln, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Owner, default, CO_IS_DEAD, default, true, () => {
            SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfNotHasBuff(Owner, Owner, "Recall", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfNotHasBuff(Owner, Owner, "OdinCaptureChannel", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfNotHasBuff(Owner, Owner, "SummonerTeleport", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfNotHasBuff(Owner, Owner, "CamouflageCheck", () => {
            IfNotHasBuff(Owner, Owner, "CamouflageStealth", () => {
                SpellBuffAdd(Owner, Owner, "CamouflageStealth", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Invisibility, 0.1, true, false, false, default);
            });
        });
        If(LifeTime, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
            SpellBuffAdd(Owner, Owner, "Stealth", 1, 1, 600, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Invisibility, 0, true, false, true, default);
            SpellBuffAdd(Owner, Owner, "BantamArmor", 1, 1, 600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            this.Activated = true;
        });
        If(this.Activated, default, CO_EQUAL, default, true, () => {
            ForNClosestUnitsInTargetArea(Attacker, Owner, 160, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, true, default, (Unit) => {
                this.Activated = false;
                TeamID = GetTeamID(default);
                MushroomTeamID = GetTeamID(default);
                SpellBuffRemove(Owner, "Stealth", Owner, 0);
                OwnerPos = GetUnitPosition(Owner);
                AddPosPerceptionBubble(MushroomTeamID, 700, OwnerPos, 4, Nothing, false);
                SpellEffectCreate(Particle, default, "ShroomMine.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, true, false, false, false, false, default, default);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                NextBuffVars.DamagePerTick = this.VALUE_BY_LEVEL;
                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                NextBuffVars.AttackSpeedMod = 0;
                ForEachUnitInTargetArea(Attacker, Owner, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                    BreakSpellShields(Unit);
                    SpellBuffAdd(Attacker, Unit, "BantamTrapTarget", 1, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Poison, 0, true, false, false, default);
                    SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 4, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
                });
                this.ID = PushCharacterFade(Owner, 1, default, this.ID);
                ApplyDamage(Owner, Owner, 500, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
            });
        });
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            IfNotHasBuff(Owner, Owner, "TeemoMushroomCounter", () => {
                Count = GetBuffCountFromCaster(Owner, Owner, "TeemoMushrooms");
                If(Count, default, CO_NOT_EQUAL, default, 3, () => {
                    SpellBuffAdd(Owner, Owner, "TeemoMushroomCounter", 1, 1, 0 + (CharVars.MushroomCooldown ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
                });
            });
        });
        SpellBuffRemoveCurrent(Owner);
        If(this.HasDealtDamage, default, CO_EQUAL, default, false, () => {
            Distance = DistanceBetweenObjects("Owner", "Attacker");
            If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 500, () => {
                this.HasDealtDamage = true;
                SpellCast(Owner, Attacker, Attacker, Attacker, default, 0, ExtraSlots, 1, true, false, false, default, default, default);
                SpellBuffRemoveCurrent(Owner);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectBuildings AffectMinions AffectHeroes AffectTurrets ", default, true, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (this.TremDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 0, false, false, Attacker);
            });
        });
        Level = GetLevel(Owner);
        ShurikenDamage = this.VALUE_BY_LEVEL;
        MaxHP = GetStat(GetFlatHPPoolMod, Owner);
        BonusDmgFromHP = Math(0 + (MaxHP ?? 0), MO_MULTIPLY, 0.08);
        FinalDamage = Math(0 + (BonusDmgFromHP ?? 0), MO_ADD, 0 + (ShurikenDamage ?? 0));
        SetBuffToolTipVar(1, 0 + (ShurikenDamage ?? 0));
        SetBuffToolTipVar(2, 0 + (FinalDamage ?? 0));
        SetBuffToolTipVar(3, 0 + (BonusDmgFromHP ?? 0));
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            IfNotHasBuff(Owner, Owner, "ShenWayOfTheNinjaAura", () => {
                CurTime = GetGameTime();
                TimeSinceLastHit = Math(0 + (CurTime ?? 0), MO_SUBTRACT, 0 + (this.LastHit ?? 0));
                If(TimeSinceLastHit, default, CO_GREATER_THAN_OR_EQUAL, default, 8, () => {
                    IfNotHasBuff(Owner, Owner, "ShenWayOfTheNinjaAura", () => {
                        SpellBuffAdd(Owner, Owner, "ShenWayOfTheNinjaAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                });
            });
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Else(() => {
            collide = false;
            ForNClosestUnitsInTargetArea(Owner, Owner, 160, "AffectEnemies AffectNeutral AffectMinions ", 1, true, default, (Unit) => {
                IsStealthed = GetStatus(Unit, GetStealthed);
                If(IsStealthed, default, CO_EQUAL, default, false, () => {
                    collide = true;
                });
                Else(() => {
                    If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                        collide = true;
                    });
                    Else(() => {
                        CanSee = CanSeeTarget(Owner, Unit);
                        If(CanSee, default, CO_EQUAL, default, true, () => {
                            collide = true;
                        });
                    });
                });
            });
            ForNClosestUnitsInTargetArea(Owner, Owner, 200, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
                IsStealthed = GetStatus(Unit, GetStealthed);
                If(IsStealthed, default, CO_EQUAL, default, false, () => {
                    collide = true;
                });
                Else(() => {
                    If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                        collide = true;
                    });
                    Else(() => {
                        CanSee = CanSeeTarget(Owner, Unit);
                        If(CanSee, default, CO_EQUAL, default, true, () => {
                            collide = true;
                        });
                    });
                });
            });
            If(collide, default, CO_EQUAL, default, true, () => {
                ApplyRoot(Attacker, Owner, 0.5);
                ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Other1) => {
                    SpellEffectCreate(A, default, "PowerballHit.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
                    BreakSpellShields(Other1);
                    NextBuffVars.SlowPercent = this.SlowPercent;
                    ApplyDamage(Attacker, Other1, 0 + (this.AoEDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
                    SpellBuffAdd(Attacker, Other1, "PowerBallSlow", 1, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
                    SpellBuffAdd(Attacker, Other1, "PowerballStun", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                    this.WillRemove = true;
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            SpellEffectCreate(num, default, "shen_vorpalStar_lifetap_tar_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            Temp1 = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
            If(Temp1, default, CO_LESS_THAN, default, 1, () => {
                IncHealth(Owner, 0 + (this.LifeTapMod ?? 0), Attacker);
                ApplyAssistMarker(Attacker, Owner, 10);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            IfHasBuff(Owner, Attacker, "ToxicShotAttack", () => {
                Count = GetBuffCountFromAll(Owner, "ToxicShotAttack");
                StackDamage = Math(0 + (this.StackingDamagePerTick ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
                DamageAmount = Math(0 + (this.DamagePerTick ?? 0), MO_ADD, 0 + (StackDamage ?? 0));
                ApplyDamage(Attacker, Owner, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0.14, default, default, default, default);
            });
            Else(() => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, default, (Unit) => {
                SpellBuffAdd(Owner, Unit, "ShenShadowDashPassive", 1, 1, 1.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
        });
        this.ArmorAmount = GetArmor(Owner);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0.14, 1, false, false, Attacker);
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        SpellBuffRemoveCurrent(Owner);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            TeamOfOwner = GetTeamID(default);
            TargetPos = this.TargetPos;
            ForEachUnitInTargetArea(Attacker, TargetPos, 280, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
                Health = GetPAROrHealth(Unit, GetMaxHealth, PAR_MANA);
                DamagePerTick = Math(0 + (Health ?? 0), MO_MULTIPLY, 0 + (this.HealthPercentPerTick ?? 0));
                ApplyDamage(Attacker, Unit, 0 + (DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            });
            ForEachUnitInTargetArea(Attacker, TargetPos, 280, "AffectEnemies AffectNeutral AffectMinions ", default, true, (Unit) => {
                Health = GetPAROrHealth(Unit, GetMaxHealth, PAR_MANA);
                DamagePerTick = Math(0 + (Health ?? 0), MO_MULTIPLY, 0 + (this.HealthPercentPerTick ?? 0));
                DamagePerTick = Math(120, MO_MIN, 0 + (DamagePerTick ?? 0));
                ApplyDamage(Attacker, Unit, 0 + (DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        DamagePerTick = this.VALUE_BY_LEVEL;
        ExecutePeriodically(0.45, this.LastTimeExecuted, false, () => {
            ApplyDamage(Attacker, Owner, 0 + (DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.1, 1, false, false, Attacker);
            IfHasBuff(Owner, Attacker, "AlZaharRecentVis", () => {
                ForEachUnitInTargetArea(Owner, Owner, 1500, "AffectEnemies AffectMinions AffectHeroes ", default, false, (Unit) => {
                    IfHasBuff(Unit, Attacker, "AlZaharVoidling", () => {
                        If(Owner, default, CO_DIFFERENT_TEAM, Unit, default, () => {
                            ApplyTaunt(Owner, Unit, 1.5);
                        });
                    });
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.APADBoost = this.VALUE_BY_LEVEL;
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                SpellBuffAdd(Owner, Unit, "SonaHymnofValorAuraB", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.75, this.LastTimeExecuted, true, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0.266, 1, false, false, Attacker);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.MSBoost = this.VALUE_BY_LEVEL;
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                SpellBuffAdd(Owner, Unit, "SonaSongofDiscordAuraB", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
            });
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            tooltipAmount = this.VALUE_BY_LEVEL;
            If(tooltipAmount, default, CO_GREATER_THAN, this.lastTooltip, default, () => {
                this.lastTooltip = tooltipAmount;
                SetBuffToolTipVar(1, 0 + (tooltipAmount ?? 0));
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.DamageAura ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.1, 1, false, false, Attacker);
        });
        Distance = DistanceBetweenObjects("Attacker", "Owner");
        IfNotHasBuff(Owner, Attacker, "Suppression", () => {
            StopChanneling(Attacker, ChannelingStopCondition_Cancel, ChannelingStopSource_LostTarget);
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 1500, () => {
            StopChanneling(Attacker, ChannelingStopCondition_Cancel, ChannelingStopSource_LostTarget);
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Attacker, default, CO_IS_DEAD, default, default, () => {
            StopChanneling(Attacker, ChannelingStopCondition_Cancel, ChannelingStopSource_LostTarget);
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(this.TicksRemaining, default, CO_GREATER_THAN, default, 0, () => {
            ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
                ApplyDamage(Attacker, Target, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.26, 0, false, false, Attacker);
                this.TicksRemaining = Math(0 + (this.TicksRemaining ?? 0), MO_SUBTRACT, 1);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.ARMRBoost = this.VALUE_BY_LEVEL;
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                SpellBuffAdd(Owner, Unit, "SonaAriaofPerseveranceAuraB", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            this.Timer = Math(0 + (this.Timer ?? 0), MO_ADD, 0.5);
            If(this.Timer, default, CO_GREATER_THAN_OR_EQUAL, default, 7, () => {
                IfNotHasBuff(Owner, Owner, "AlZaharVoidlingPhase2", () => {
                    SpellBuffAdd(Owner, Owner, "AlZaharVoidlingPhase2", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                });
                If(this.Timer, default, CO_GREATER_THAN_OR_EQUAL, default, 14, () => {
                    IfNotHasBuff(Owner, Owner, "AlZaharVoidlingPhase3", () => {
                        SpellBuffAdd(Owner, Owner, "AlZaharVoidlingPhase3", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                    });
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            TeamID = GetTeamID(default);
            TotalAttackDamage = GetTotalAttackDamage(Owner);
            TotalAttackDamage = Math(0 + (TotalAttackDamage ?? 0), MO_MULTIPLY, 1.2);
            DamagePerSecond = Math(0 + (this.BaseDamage ?? 0), MO_ADD, 0 + (TotalAttackDamage ?? 0));
            DamageToDeal = Math(0 + (DamagePerSecond ?? 0), MO_MULTIPLY, 0.5);
            this.MoveSpeedMod = Math(0 + (this.MoveSpeedMod ?? 0), MO_ADD, 0.05);
            ForEachUnitInTargetArea(Owner, Owner, 315, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                IsStealthed = GetStatus(Unit, GetStealthed);
                If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                    If(IsStealthed, default, CO_EQUAL, default, false, () => {
                        SpellEffectCreate(SamPH, default, "monkey_king_ult_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                        ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                        IfNotHasBuff(Unit, Unit, "MonkeyKingSpinMarkerOrder", () => {
                            IfNotHasBuff(Unit, Unit, "MonkeyKingSpinMarkerChaos", () => {
                                SpellBuffAdd(Unit, Unit, "MonkeyKingSpinMarkerOrder", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                                BreakSpellShields(Unit);
                                SpellEffectCreate(PH, default, "monkey_king_ult_unit_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                SpellBuffAdd(Attacker, Unit, "MonkeyKingSpinKnockup", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, true, default);
                            });
                        });
                    });
                    Else(() => {
                        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                            ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                            SpellEffectCreate(SamPH, default, "monkey_king_ult_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                            IfNotHasBuff(Unit, Unit, "MonkeyKingSpinMarkerOrder", () => {
                                IfNotHasBuff(Unit, Unit, "MonkeyKingSpinMarkerChaos", () => {
                                    SpellBuffAdd(Unit, Unit, "MonkeyKingSpinMarkerOrder", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                                    BreakSpellShields(Unit);
                                    SpellEffectCreate(PH, default, "monkey_king_ult_unit_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                    SpellBuffAdd(Attacker, Unit, "MonkeyKingSpinKnockup", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, true, default);
                                });
                            });
                        });
                        Else(() => {
                            CanSee = CanSeeTarget(Owner, Target);
                            If(CanSee, default, CO_EQUAL, default, true, () => {
                                ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                                SpellEffectCreate(SamPH, default, "monkey_king_ult_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                IfNotHasBuff(Unit, Unit, "MonkeyKingSpinMarkerOrder", () => {
                                    IfNotHasBuff(Unit, Unit, "MonkeyKingSpinMarkerChaos", () => {
                                        SpellBuffAdd(Unit, Unit, "MonkeyKingSpinMarkerOrder", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                                        BreakSpellShields(Unit);
                                        SpellEffectCreate(PH, default, "monkey_king_ult_unit_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                        SpellBuffAdd(Attacker, Unit, "MonkeyKingSpinKnockup", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, true, default);
                                    });
                                });
                            });
                        });
                    });
                });
                Else(() => {
                    If(IsStealthed, default, CO_EQUAL, default, false, () => {
                        SpellEffectCreate(SamPH, default, "monkey_king_ult_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                        ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                        IfNotHasBuff(Unit, Unit, "MonkeyKingSpinMarkerChaos", () => {
                            IfNotHasBuff(Unit, Unit, "MonkeyKingSpinMarkerOrder", () => {
                                SpellBuffAdd(Unit, Unit, "MonkeyKingSpinMarkerChaos", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                                BreakSpellShields(Unit);
                                SpellEffectCreate(PH, default, "monkey_king_ult_unit_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                SpellBuffAdd(Attacker, Unit, "MonkeyKingSpinKnockup", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, true, default);
                            });
                        });
                    });
                    Else(() => {
                        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                            ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                            SpellEffectCreate(SamPH, default, "monkey_king_ult_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                            IfNotHasBuff(Unit, Unit, "MonkeyKingSpinMarkerChaos", () => {
                                IfNotHasBuff(Unit, Unit, "MonkeyKingSpinMarkerOrder", () => {
                                    SpellBuffAdd(Unit, Unit, "MonkeyKingSpinMarkerChaos", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                                    BreakSpellShields(Unit);
                                    SpellEffectCreate(PH, default, "monkey_king_ult_unit_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                    SpellBuffAdd(Attacker, Unit, "MonkeyKingSpinKnockup", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, true, default);
                                });
                            });
                        });
                        Else(() => {
                            CanSee = CanSeeTarget(Owner, Target);
                            If(CanSee, default, CO_EQUAL, default, true, () => {
                                ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                                SpellEffectCreate(SamPH, default, "monkey_king_ult_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                IfNotHasBuff(Unit, Unit, "MonkeyKingSpinMarkerChaos", () => {
                                    IfNotHasBuff(Unit, Unit, "MonkeyKingSpinMarkerOrder", () => {
                                        SpellBuffAdd(Unit, Unit, "MonkeyKingSpinMarkerChaos", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                                        BreakSpellShields(Unit);
                                        SpellEffectCreate(PH, default, "monkey_king_ult_unit_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                        SpellBuffAdd(Attacker, Unit, "MonkeyKingSpinKnockup", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, true, default);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            Count = 0;
            ForEachUnitInTargetArea(Owner, Owner, 1400, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
                CanSee = CanSeeTarget(Owner, Unit);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    Count = Math(0 + (Count ?? 0), MO_ADD, 1);
                });
            });
            OwnerLevel = GetLevel(Owner);
            If(OwnerLevel, default, CO_GREATER_THAN, default, 12, () => {
                this.DefenseToAdd = Math(0 + (Count ?? 0), MO_MULTIPLY, 8);
                this.DefenseToAdd = Math(0 + (this.DefenseToAdd ?? 0), MO_MIN, 40);
                SetBuffToolTipVar(1, 8);
            });
            ElseIf(OwnerLevel, default, CO_GREATER_THAN, default, 6, () => {
                this.DefenseToAdd = Math(0 + (Count ?? 0), MO_MULTIPLY, 6);
                this.DefenseToAdd = Math(0 + (this.DefenseToAdd ?? 0), MO_MIN, 30);
                SetBuffToolTipVar(1, 6);
            });
            Else(() => {
                this.DefenseToAdd = Math(0 + (Count ?? 0), MO_MULTIPLY, 4);
                this.DefenseToAdd = Math(0 + (this.DefenseToAdd ?? 0), MO_MIN, 20);
                SetBuffToolTipVar(1, 4);
            });
        });
        NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
        TeamID = GetTeamID(default);
        Other1 = GetChampionBySkinName("Galio", TeamID ?? TEAM_UNKNOWN);
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Attacker, Owner, 175, "AffectFriends AffectMinions AffectHeroes ", "GalioRighteousGustMissile", false, (Unit) => {
                If(Unit, default, CO_NOT_EQUAL, Attacker, default, () => {
                    If(Attacker, default, CO_IS_TARGET_IN_FRONT_OF_ME, Unit, default, () => {
                        If(Unit, default, CO_IS_TARGET_BEHIND_ME, Attacker, default, () => {
                            SpellBuffAdd(Other1, Unit, "GalioRighteousGustHaste", 1, 1, 0.3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                            ApplyAssistMarker(Other1, Unit, 10);
                        });
                        Else(() => {
                            SpellBuffRemove(Unit, "GalioRighteousGustHaste", Other1, 0);
                        });
                    });
                    Else(() => {
                        SpellBuffRemove(Unit, "GalioRighteousGustHaste", Other1, 0);
                    });
                });
            });
        });
        Level = GetLevel(Owner);
        this.HealAmount = this.VALUE_BY_LEVEL;
        SetBuffToolTipVar(1, 0 + (this.HealAmount ?? 0));
        Caster = SetBuffCasterUnit();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        DamageAmount = this.VALUE_BY_LEVEL;
        OwnerTeamID = GetTeamID(default);
        APPreMod = GetStat(GetFlatMagicDamageMod, Caster);
        APPostMod = Math(0.06, MO_MULTIPLY, 0 + (APPreMod ?? 0));
        FinalDamage = Math(0 + (DamageAmount ?? 0), MO_ADD, 0 + (APPostMod ?? 0));
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (FinalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                SpellEffectCreate(this.ParticleID, default, "Viktor_ChaosStorm_beam.troy", default, TEAM_NEUTRAL, 10, 0, TEAM_UNKNOWN, Unit, false, Owner, "head", default, Unit, "spine", default, true, false, false, false, false, default, default);
                SpellEffectCreate(hi, default, "Viktor_ChaosStorm_hit.troy", default, TEAM_NEUTRAL, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, "root", default, Unit, default, default, true, false, false, false, false, default, default);
                If(this.SoundClear, default, CO_EQUAL, default, true, () => {
                    SpellEffectCreate(this.PartThing, default, "viktor_chaosstorm_damage_sound.troy", default, TEAM_NEUTRAL, 10, 0, TEAM_UNKNOWN, Unit, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
                    this.SoundClear = false;
                });
            });
        });
        If(Caster, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ForNClosestUnitsInTargetArea(Owner, Owner, 2500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, true, default, (Unit) => {
            Distance = DistanceBetweenObjects("Owner", "Unit");
            If(this.SoundClear, default, CO_EQUAL, default, false, () => {
                If(Distance, default, CO_GREATER_THAN, default, 350, () => {
                    this.SoundClear = true;
                    SpellEffectRemove(this.PartThing);
                });
                Else(() => {
                    
                });
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            OwnerPos = GetUnitPosition(Owner);
            ForEachUnitInTargetArea(Owner, OwnerPos, 25000, "AffectEnemies AffectFriends AffectMinions AffectUntargetable ", "ViktorChaosStormAOE", true, (Unit) => {
                Distance = DistanceBetweenObjects("Unit", "Owner");
                If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                    IssueOrder(Unit, AI_MOVETO, default, Owner);
                });
                Else(() => {
                    IssueOrder(Unit, AI_MOVETO, default, Owner);
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 550, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "GalioIdolOfDurandMarker", false, (Unit) => {
                ApplyAssistMarker(Owner, Unit, 10);
                SpellBuffAdd(Owner, Unit, "GalioIdolOfDurandMarker", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                BreakSpellShields(Unit);
                ApplyTaunt(Owner, Unit, 1.5);
            });
        });
        this.TotalMR = GetSpellBlock(Owner);
        Caster = SetBuffCasterUnit();
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            ApplyDamage(Caster, Owner, 0 + (this.DamageForDot ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        AP = GetStat(GetFlatMagicDamageMod, Owner);
        AP = Math(0 + (AP ?? 0), MO_SUBTRACT, 0 + (this.abilityPower ?? 0));
        IfHasBuff(Owner, Owner, "ZhonyasRing", () => {
            this.abilityPower = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.07);
        });
        Else(() => {
            this.abilityPower = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.1);
        });
        If(this.HasDealtDamage, default, CO_EQUAL, default, false, () => {
            Distance = DistanceBetweenObjects("Owner", "Attacker");
            If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 500, () => {
                SetStatus(Owner, default, SetCanCast);
                this.HasDealtDamage = true;
                SpellCast(Owner, Attacker, Attacker, Attacker, false, 1, ExtraSlots, 1, true, false, false, false, false, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            this.Ticktimer = Math(0 + (this.Ticktimer ?? 0), MO_SUBTRACT, 1);
            If(this.Ticktimer, default, CO_LESS_THAN, default, 4, () => {
                Say(Owner, " ", this.Ticktimer);
            });
        });
        Caster = SetBuffCasterUnit();
        OwnerTeam = GetTeamID(default);
        LaserPos = GetUnitPosition(Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Caster, GetSlotSpellLevel);
        BaseDamage = this.VALUE_BY_LEVEL;
        APVAL = GetStat(GetFlatMagicDamageMod, Caster);
        APBONUS = Math(0 + (APVAL ?? 0), MO_MULTIPLY, 0.7);
        TotalDamage = Math(0 + (APBONUS ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        DamageForDot = Math(0 + (TotalDamage ?? 0), MO_MULTIPLY, 0.075);
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Owner, LaserPos, 135, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                IfNotHasBuff(Unit, Caster, "ViktorDeathRayBuff", () => {
                    BreakSpellShields(Unit);
                    ApplyDamage(Attacker, Unit, 0 + (TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                    SpellEffectCreate(a, default, "ViktorEntropicBeam_hit.troy", default, OwnerTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd(Caster, Unit, "ViktorDeathRayBuff", 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    IfHasBuff(Caster, Caster, "ViktorAugmentE", () => {
                        NextBuffVars.DamageForDot = DamageForDot;
                        SpellBuffAdd(Caster, Unit, "ViktorDeathRayDOT", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                    });
                });
            });
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            tooltipAmount = this.VALUE_BY_LEVEL;
            If(tooltipAmount, default, CO_GREATER_THAN, this.lastTooltip, default, () => {
                this.lastTooltip = tooltipAmount;
                SetBuffToolTipVar(1, 0 + (tooltipAmount ?? 0));
            });
        });
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        If(this.willRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            CurrentCrit = this.VALUE_BY_LEVEL;
            If(CurrentCrit, default, CO_GREATER_THAN, this.LastCrit, default, () => {
                TooltipCritChance = Math(100, MO_MULTIPLY, 0 + (CurrentCrit ?? 0));
                this.LastCrit = CurrentCrit;
                SetBuffToolTipVar(1, 0 + (TooltipCritChance ?? 0));
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Owner, Owner, 260, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                Count = GetBuffCountFromAll(Unit, "SlashBeenHit");
                IfNotHasBuff(Unit, Attacker, "JarvanIVDragonStrikeBehindMe", () => {
                    If(Count, default, CO_LESS_THAN, default, 1, () => {
                        IsStealthed = GetStatus(Unit, GetStealthed);
                        If(IsStealthed, default, CO_EQUAL, default, false, () => {
                            SpellBuffAdd(Owner, Unit, "SlashBeenHit", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                            BreakSpellShields(Unit);
                            SpellEffectCreate(particle, default, "BloodSlash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, false, default, default, default);
                            SpellBuffAdd(Owner, Unit, "JarvanIVDragonStrikePH2", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
                        });
                        Else(() => {
                            If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                SpellBuffAdd(Owner, Unit, "SlashBeenHit", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                                BreakSpellShields(Unit);
                                SpellEffectCreate(particle, default, "BloodSlash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, false, default, default, default);
                                SpellBuffAdd(Owner, Unit, "JarvanIVDragonStrikePH2", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
                            });
                            Else(() => {
                                CanSee = CanSeeTarget(Owner, Unit);
                                If(CanSee, default, CO_EQUAL, default, true, () => {
                                    SpellBuffAdd(Owner, Unit, "SlashBeenHit", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                                    BreakSpellShields(Unit);
                                    SpellEffectCreate(particle, default, "BloodSlash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, false, default, default, default);
                                    SpellBuffAdd(Owner, Unit, "JarvanIVDragonStrikePH2", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
                                });
                            });
                        });
                    });
                });
            });
        });
        ForEachUnitInTargetArea(Owner, Owner, 250, "AffectEnemies AffectFriends AffectNeutral AffectHeroes ", "OlafBerzerkerRage", true, (Unit) => {
            If(Unit, default, CO_EQUAL, Attacker, default, () => {
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Unit, GetSlotSpellCooldownTime);
                Cooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 6);
                SetSlotSpellCooldownTime(Unit, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (Cooldown ?? 0));
                TeamID = GetTeamID(default);
                OwnerPos = GetUnitPosition(Owner);
                SpellEffectCreate(a, default, "olaf_axe_refresh_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, true, default, default, false, false, default, default);
                SpellEffectCreate(b, default, "olaf_axe_trigger_02.troy", default, TeamID ?? TEAM_UNKNOWN, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, false, default, default);
                SpellBuffRemoveCurrent(Owner);
            });
        });
        NextBuffVars.AttackSpeedMod = this.AttackSpeedMod;
        NextBuffVars.ArmorMod = this.ArmorMod;
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Attacker, Owner, 1000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                SpellBuffAdd(Attacker, Unit, "JarvanIVDemacianStandardBuff", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        OwnerLevel = GetLevel(Owner);
        this.APPERLEV = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 3);
        Count = 0;
        MaxMissiles = 3;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            CurMana = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
            If(this.ManaCost, default, CO_GREATER_THAN, CurMana, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                NegMana = Math(0 + (this.ManaCost ?? 0), MO_MULTIPLY, -1);
                IncPAR(Owner, 0 + (NegMana ?? 0));
            });
            this.ManaCost = Math(0 + (this.ManaCost ?? 0), MO_ADD, 0 + (this.ManaCostInc ?? 0));
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            ForEachUnitInTargetAreaRandom(Owner, Owner, 625, "AffectEnemies AffectHeroes ", default, true, 3, (Unit) => {
                Result = CanSeeTarget(Owner, Unit);
                If(Result, default, CO_EQUAL, default, true, () => {
                    If(Count, default, CO_LESS_THAN, MaxMissiles, default, () => {
                        Count = Math(0 + (Count ?? 0), MO_ADD, 1);
                        SpellCast(Owner, Unit, default, default, false, 0, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, default);
                    });
                });
            });
            ForEachUnitInTargetAreaRandom(Owner, Owner, 625, "AffectEnemies AffectNeutral AffectMinions ", default, true, 3, (Unit) => {
                Result = CanSeeTarget(Owner, Unit);
                If(Result, default, CO_EQUAL, default, true, () => {
                    If(Count, default, CO_LESS_THAN, MaxMissiles, default, () => {
                        Count = Math(0 + (Count ?? 0), MO_ADD, 1);
                        SpellCast(Owner, Unit, default, default, false, 0, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, default);
                    });
                });
            });
        });
        Caster = SetBuffCasterUnit();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Caster, GetSlotSpellLevel);
        ExecutePeriodically(0.5, this.DamageManaTimer, false, () => {
            CurMana = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
            TargetPos = this.TargetPos;
            ForEachUnitInTargetArea(Attacker, TargetPos, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                IfHasBuff(Unit, Owner, "HexMageCrystallize", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Attacker, Unit, "HexMageChainReaction", 100, 1, 1.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Slow, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(0.75, this.SlowTimer, false, () => {
            canCast = GetStatus(Owner, GetCanCast);
            If(canCast, default, CO_EQUAL, default, false, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            TargetPos = this.TargetPos;
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            OwnerPos = GetUnitPosition(Owner);
            Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
            If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 1200, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        FaceDirection(Owner, Attacker);
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            Distance = DistanceBetweenObjects("Attacker", "Owner");
            If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 605, () => {
                IfHasBuff(Attacker, Owner, "Slow", () => {
                    SpellBuffRemove(Attacker, "Slow", Owner, default);
                });
                IfHasBuff(Attacker, Nothing, "SwainBeamDamage", () => {
                    SpellBuffClear(Attacker, "SwainBeamDamage");
                });
                IfHasBuff(Attacker, Nothing, "SwainBeamDamageMinion", () => {
                    SpellBuffClear(Attacker, "SwainBeamDamageMinion");
                });
                SpellBuffRemoveCurrent(Owner);
            });
            If(Attacker, default, CO_IS_DEAD, default, default, () => {
                IfHasBuff(Attacker, Owner, "Slow", () => {
                    SpellBuffRemove(Attacker, "Slow", Owner, default);
                });
                IfHasBuff(Attacker, Nothing, "SwainBeamDamage", () => {
                    SpellBuffClear(Attacker, "SwainBeamDamage");
                });
                IfHasBuff(Attacker, Nothing, "SwainBeamDamageMinion", () => {
                    SpellBuffClear(Attacker, "SwainBeamDamageMinion");
                });
                SpellBuffRemoveCurrent(Owner);
            });
        });
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.DamagePerHalfSecond ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.3, 1, false, false, Attacker);
        });
        DamageCap = this.DamageCap;
        DamagePerc = this.DamagePerc;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                Temp1 = GetPAROrHealth(Unit, GetMaxHealth, PAR_MANA);
                AbilityPowerMod = GetStat(GetFlatMagicDamageMod, Owner);
                AbilityPowerBonus = Math(0 + (AbilityPowerMod ?? 0), MO_MULTIPLY, 0.0001);
                DamagePerc = Math(0 + (DamagePerc ?? 0), MO_ADD, 0 + (AbilityPowerBonus ?? 0));
                HToDamage = Math(0 + (DamagePerc ?? 0), MO_MULTIPLY, 0 + (Temp1 ?? 0));
                HToDamage = Math(0 + (HToDamage ?? 0), MO_MIN, 240);
                ApplyDamage(Attacker, Unit, 0 + (HToDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                HToDamage = Math(0.05, MO_MULTIPLY, 0 + (HToDamage ?? 0));
                this.CurrentDamageTotal = Math(0 + (this.CurrentDamageTotal ?? 0), MO_ADD, 0 + (HToDamage ?? 0));
            });
            If(this.CurrentDamageTotal, default, CO_GREATER_THAN_OR_EQUAL, DamageCap, default, () => {
                this.CurrentDamageTotal = Math(0 + (this.CurrentDamageTotal ?? 0), MO_MIN, 0 + (DamageCap ?? 0));
            });
            SetBuffToolTipVar(1, 0 + (this.CurrentDamageTotal ?? 0));
        });
        FaceDirection(Owner, Attacker);
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            Distance = DistanceBetweenObjects("Attacker", "Owner");
            If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 605, () => {
                IfHasBuff(Attacker, Nothing, "SwainBeamDamage", () => {
                    SpellBuffClear(Attacker, "SwainBeamDamage");
                });
                IfHasBuff(Attacker, Nothing, "SwainBeamDamageMinion", () => {
                    SpellBuffClear(Attacker, "SwainBeamDamage");
                });
                IfHasBuff(Attacker, Owner, "Slow", () => {
                    SpellBuffRemove(Attacker, "Slow", Owner, default);
                });
                SpellBuffRemoveCurrent(Owner);
            });
            If(Attacker, default, CO_IS_DEAD, default, default, () => {
                IfHasBuff(Attacker, Nothing, "SwainBeamDamage", () => {
                    SpellBuffClear(Attacker, "SwainBeamDamage");
                });
                IfHasBuff(Attacker, Nothing, "SwainBeamDamageMinion", () => {
                    SpellBuffClear(Attacker, "SwainBeamDamageMinion");
                });
                IfHasBuff(Attacker, Owner, "Slow", () => {
                    SpellBuffRemove(Attacker, "Slow", Owner, default);
                });
                SpellBuffRemoveCurrent(Owner);
            });
        });
        Caster = SetBuffCasterUnit();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Caster, GetSlotSpellLevel);
        ExecutePeriodically(0.5, this.DamageManaTimer, false, () => {
            CurMana = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
            TargetPos = this.TargetPos;
            ForEachUnitInTargetArea(Attacker, TargetPos, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                IfHasBuff(Unit, Owner, "ViktorGravitonFieldStun", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Attacker, Unit, "ViktorGravitonFieldDebuff", 100, 1, 1.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Slow, 0, true, false, false, default);
                });
            });
        });
        If(Attacker, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ApplyDamage(Owner, Attacker, 0 + (this.DamagePerHalfSecond ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.3, 1, false, false, Owner);
        });
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.DamagePerHalfSecond ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.3, 1, false, false, Attacker);
        });
        ExecutePeriodically(0.4, this.LastTimeExecuted, false, () => {
            If(this.Passthrough, default, CO_EQUAL, default, 0, () => {
                SpellCD1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                SpellCD1a = Math(0 + (SpellCD1 ?? 0), MO_MULTIPLY, 0 + (this.SpellSlowPercent ?? 0));
                SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (SpellCD1a ?? 0));
                SpellEffectCreate(default, default, "ChronoRefresh_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            });
            If(this.Passthrough, default, CO_EQUAL, default, 1, () => {
                SpellCD2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                SpellCD2a = Math(0 + (SpellCD2 ?? 0), MO_MULTIPLY, 0 + (this.SpellSlowPercent ?? 0));
                SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (SpellCD2a ?? 0));
                SpellEffectCreate(default, default, "ChronoRefresh_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            });
            If(this.Passthrough, default, CO_EQUAL, default, 2, () => {
                SpellCD3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                SpellCD3a = Math(0 + (SpellCD3 ?? 0), MO_MULTIPLY, 0 + (this.SpellSlowPercent ?? 0));
                SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (SpellCD3a ?? 0));
                SpellEffectCreate(default, default, "ChronoRefresh_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            });
        });
        ExecutePeriodically(3, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "GateFix", 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        });
        ExecutePeriodically(2.675, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "GateFix", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        If(this.Frozen, default, CO_EQUAL, default, 0, () => {
            TeamID = GetTeamID(default);
            this.Counter = Math(0 + (this.Counter ?? 0), MO_ADD, 1);
            If(this.Counter, default, CO_EQUAL, default, 2, () => {
                SpellEffectRemove(this.EffectID);
                SpellEffectCreate(this.EffectID, default, "Card_Red.troy", default, TeamID ?? TEAM_UNKNOWN, 600, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
                SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "RedCardLock");
            });
            ElseIf(this.Counter, default, CO_EQUAL, default, 4, () => {
                SpellEffectRemove(this.EffectID);
                SpellEffectCreate(this.EffectID, default, "Card_Yellow.troy", default, TeamID ?? TEAM_UNKNOWN, 600, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, false, false, false, default, default);
                SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "GoldCardLock");
            });
            ElseIf(this.Counter, default, CO_GREATER_THAN_OR_EQUAL, default, 6, () => {
                SpellEffectRemove(this.EffectID);
                SpellEffectCreate(this.EffectID, default, "Card_Blue.troy", default, TeamID ?? TEAM_UNKNOWN, 600, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, false, false, false, default, default);
                SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "BlueCardLock");
                this.Counter = 0;
            });
        });
        If(this.removeParticle, default, CO_EQUAL, default, 0, () => {
            SpellEffectRemove(this.EffectID);
            this.removeParticle = 2;
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.DoTDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.2, 1, false, false, Attacker);
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        SpellBuffRemoveCurrent(Owner);
        TargetPos = this.TargetPos;
        If(this.Count, default, CO_LESS_THAN, default, 5, () => {
            ExecutePeriodically(0.9, this.LastTimeExecuted, false, () => {
                this.Count = Math(0 + (this.Count ?? 0), MO_ADD, 1);
                NextBuffVars.TargetPos = TargetPos;
                NextBuffVars.ArmorReduction = this.ArmorReduction;
                ForEachUnitInTargetArea(Attacker, TargetPos, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Unit) => {
                    TotalDamage = Math(0 + (this.Damage ?? 0), MO_DIVIDE, 5);
                    ApplyDamage(Attacker, Unit, 0 + (TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.12, 0, false, false, Attacker);
                    SpellBuffAdd(Attacker, Unit, "SpiritFireArmorReduction", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Shred, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            CurrentLifesteal = this.VALUE_BY_LEVEL;
            If(CurrentLifesteal, default, CO_GREATER_THAN, this.LastLifesteal, default, () => {
                this.LastLifesteal = CurrentLifesteal;
                SetBuffToolTipVar(1, 0 + (CurrentLifesteal ?? 0));
            });
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            tooltipAmount = this.VALUE_BY_LEVEL;
            If(tooltipAmount, default, CO_GREATER_THAN, this.lastTooltip, default, () => {
                this.lastTooltip = tooltipAmount;
                SetBuffToolTipVar(1, 0 + (tooltipAmount ?? 0));
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            IfHasBuff(Owner, Attacker, "DeadlyVenom", () => {
                Count = GetBuffCountFromAll(Owner, "DeadlyVenom");
                DamageToDeal = Math(0 + (this.DamageAmount ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
                ApplyDamage(Attacker, Owner, 0 + (DamageToDeal ?? 0), TRUE_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0, 0, false, false, Attacker);
            });
            Else(() => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            tooltipAmount = this.VALUE_BY_LEVEL;
            If(tooltipAmount, default, CO_GREATER_THAN, this.lastTooltip, default, () => {
                this.lastTooltip = tooltipAmount;
                SetBuffToolTipVar(1, 0 + (tooltipAmount ?? 0));
            });
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            tooltipAmount = this.VALUE_BY_LEVEL;
            If(tooltipAmount, default, CO_GREATER_THAN, this.lastTooltip, default, () => {
                this.lastTooltip = tooltipAmount;
                tooltipAmount = Math(100, MO_MULTIPLY, 0 + (tooltipAmount ?? 0));
                SetBuffToolTipVar(1, 0 + (tooltipAmount ?? 0));
            });
        });
        ApplyDamage(Attacker, Owner, 0 + (this.dotdmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.2, 1, false, false, Attacker);
        this.BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            Duration = GetBuffRemainingDuration(Owner, "OnTheHunt");
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", default, true, (Unit) => {
                IfNotHasBuff(Unit, Owner, "OnTheHuntAuraBuff", () => {
                    SpellBuffAdd(Attacker, Unit, "OnTheHuntAuraBuff", 1, 1, 0 + (Duration ?? 0), InstanceVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
        });
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            HealthCost = this.VALUE_BY_LEVEL;
            Health = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
            DamageToDeal = this.VALUE_BY_LEVEL;
            DamageToDealSelf = Math(-1, MO_MULTIPLY, 0 + (HealthCost ?? 0));
            If(Health, default, CO_LESS_THAN, HealthCost, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                IncHealth(Owner, 0 + (DamageToDealSelf ?? 0), Owner);
                ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                    ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
                });
            });
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        CurTime = GetTime();
        TimeSinceLastHit = Math(0 + (CurTime ?? 0), MO_SUBTRACT, 0 + (this.TimeLastHit ?? 0));
        If(TimeSinceLastHit, default, CO_GREATER_THAN_OR_EQUAL, default, 1.5, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(this.WillFade, default, CO_EQUAL, default, true, () => {
            ID = PushCharacterFade(Owner, 0.2, default, ID);
        });
        temp = GetStatus(Owner, IsMoving);
        If(temp, default, CO_EQUAL, default, true, () => {
            SpellBuffRemove(Owner, "HideInShadows", Attacker, default);
            SpellBuffRemoveCurrent(Owner);
        });
        Level = this.Level;
        ForNClosestUnitsInTargetArea(Owner, Owner, 550, "AffectEnemies AffectHeroes ", 3, true, default, (Unit) => {
            SpellCast(Owner, Unit, Owner, Owner, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        });
        ExecutePeriodically(1.05, this.LastTimeExecuted, false, () => {
            MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            DamageToDeal = Math(0 + (MaxHealth ?? 0), MO_MULTIPLY, 0.02);
            TeamID = GetTeamID(default);
            If(TeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                DamageToDeal = Math(0 + (DamageToDeal ?? 0), MO_MIN, 80);
            });
            ApplyDamage(Attacker, Owner, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        ExecutePeriodically(0.95, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Attacker, Owner, 150, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                SpellBuffAdd(Attacker, Unit, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
        CurrentHP = GetStat(GetFlatHPPoolMod, Owner);
        CurrentAP = GetStat(GetFlatMagicDamageMod, Owner);
        CurrentAP = Math(0 + (CurrentAP ?? 0), MO_SUBTRACT, 0 + (this.APMod ?? 0));
        this.APMod = Math(0 + (CurrentHP ?? 0), MO_MULTIPLY, 0.025);
        this.HPMod = Math(0 + (CurrentAP ?? 0), MO_MULTIPLY, 1.8);
        TeamID = GetTeamID(default);
        ForEachUnitInTargetArea(Owner, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            IfNotHasBuff(Unit, Owner, "KennenLightningRushMarker", () => {
                APValue = GetStat(GetFlatMagicDamageMod, Owner);
                APMod = Math(0 + (APValue ?? 0), MO_MULTIPLY, 0.6);
                TotalDamage = Math(0 + (this.RushDamage ?? 0), MO_ADD, 0 + (APMod ?? 0));
                MinionDamage = Math(0 + (TotalDamage ?? 0), MO_DIVIDE, 2);
                SpellBuffAdd(Attacker, Unit, "KennenLightningRushMarker", 1, 1, 2.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                BreakSpellShields(Unit);
                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                    SpellBuffAdd(Attacker, Unit, "KennenMarkofStorm", 5, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
                    ApplyDamage(Attacker, Unit, 0 + (TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                    SpellEffectCreate(Kennenss, default, "kennen_lr_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, true, default, default, false, false, default, default);
                });
                Else(() => {
                    SpellBuffAdd(Attacker, Unit, "KennenMarkofStorm", 5, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
                    ApplyDamage(Attacker, Unit, 0 + (MinionDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                    SpellEffectCreate(Kennenss, default, "kennen_lr_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, true, default, default, false, false, default, default);
                });
                IfNotHasBuff(Owner, Owner, "KennenLREnergy", () => {
                    IncPAR(Owner, 40);
                    SpellBuffAdd(Owner, Owner, "KennenLREnergy", 1, 1, 2.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        If(this.Level, default, CO_EQUAL, default, 1, () => {
            ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
                ForEachUnitInTargetAreaRandom(Owner, Owner, 550, "AffectEnemies AffectHeroes ", "KennenShurikenNOCAST", false, 1, (Unit) => {
                    Count = GetBuffCountFromAll(Unit, "KennenShurikenStormHolder");
                    If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
                        SpellBuffAdd(Attacker, Unit, "KennenShurikenNOCAST", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                    BreakSpellShields(Unit);
                    SpellBuffAdd(Attacker, Unit, "KennenMarkofStorm", 3, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
                    SpellBuffAdd(Owner, Unit, "KennenShurikenStormMOS", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    ApplyDamage(Owner, Unit, 0 + (this.BonusDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
                    SpellBuffAdd(Attacker, Unit, "KennenShurikenStormHolder", 4, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                    SpellBuffAdd(Attacker, Unit, "KennenShurikenNOCAST", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    SpellEffectCreate(a, default, "kennen_ss_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Unit, false, Unit, "spine", default, Unit, "spine", default, true, default, default, false, false, default, default);
                });
            });
        });
        ElseIf(this.Level, default, CO_EQUAL, default, 2, () => {
            ExecutePeriodically(0.4, this.LastTimeExecuted, true, () => {
                ForEachUnitInTargetAreaRandom(Owner, Owner, 550, "AffectEnemies AffectHeroes ", "KennenShurikenNOCAST", false, 1, (Unit) => {
                    Count = GetBuffCountFromAll(Unit, "KennenShurikenStormHolder");
                    If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
                        SpellBuffAdd(Attacker, Unit, "KennenShurikenNOCAST", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                    BreakSpellShields(Unit);
                    SpellBuffAdd(Attacker, Unit, "KennenMarkofStorm", 3, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
                    SpellBuffAdd(Owner, Unit, "KennenShurikenStormMOS", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    ApplyDamage(Owner, Unit, 0 + (this.BonusDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
                    SpellBuffAdd(Attacker, Unit, "KennenShurikenStormHolder", 4, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                    SpellBuffAdd(Attacker, Unit, "KennenShurikenNOCAST", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    SpellEffectCreate(a, default, "kennen_ss_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Unit, false, Unit, "spine", default, Unit, "spine", default, true, default, default, false, false, default, default);
                });
            });
        });
        ElseIf(this.Level, default, CO_EQUAL, default, 3, () => {
            ExecutePeriodically(0.33, this.LastTimeExecuted, true, () => {
                ForEachUnitInTargetAreaRandom(Owner, Owner, 550, "AffectEnemies AffectHeroes ", "KennenShurikenNOCAST", false, 1, (Unit) => {
                    Count = GetBuffCountFromAll(Unit, "KennenShurikenStormHolder");
                    If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
                        SpellBuffAdd(Attacker, Unit, "KennenShurikenNOCAST", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                    BreakSpellShields(Unit);
                    SpellBuffAdd(Attacker, Unit, "KennenMarkofStorm", 3, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
                    SpellBuffAdd(Owner, Unit, "KennenShurikenStormMOS", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    ApplyDamage(Owner, Unit, 0 + (this.BonusDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
                    SpellBuffAdd(Attacker, Unit, "KennenShurikenStormHolder", 4, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                    SpellBuffAdd(Attacker, Unit, "KennenShurikenNOCAST", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    SpellEffectCreate(a, default, "kennen_ss_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Unit, false, Unit, "spine", default, Unit, "spine", default, true, default, default, false, false, default, default);
                });
            });
        });
        NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
        ExecutePeriodically(0.5, this.DamagePulse, true, () => {
            ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (this.DamageTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                HealAmount = Math(0.15, MO_MULTIPLY, 0 + (this.DamageTick ?? 0));
                IncHealth(Owner, 0 + (HealAmount ?? 0), Owner);
            });
        });
        ExecutePeriodically(0.25, this.SlowPulse, true, () => {
            Duration = GetBuffRemainingDuration(Owner, "VladimirSanguinePool");
            SkinID = GetSkinID(Owner);
            If(SkinID, default, CO_EQUAL, default, 5, () => {
                If(Duration, default, CO_LESS_THAN_OR_EQUAL, default, 1, () => {
                    SpellBuffAdd(Attacker, Target, "VladimirSanguinePoolParticle", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
            ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        this.AkaliAP = GetStat(GetFlatMagicDamageMod, Owner);
        this.AkaliAP = Math(0 + (this.AkaliAP ?? 0), MO_SUBTRACT, 20);
        this.AddBonusDmgPerc = Math(0 + (this.AkaliAP ?? 0), MO_DIVIDE, 600);
        this.DmgMult = Math(0 + (this.BonusDmgPerc ?? 0), MO_ADD, 0 + (this.AddBonusDmgPerc ?? 0));
        ExecutePeriodically(2, this.LastTimeExecuted, false, () => {
            DmgMultTooltip = Math(100, MO_MULTIPLY, 0 + (this.DmgMult ?? 0));
            SetBuffToolTipVar(1, 0 + (DmgMultTooltip ?? 0));
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Owner, Owner, 425, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                If(Unit, default, CO_EQUAL, Attacker, default, () => {
                    IfNotHasBuff(Owner, Owner, "Recall", () => {
                        IfNotHasBuff(Attacker, Attacker, "AkaliHoldStealth", () => {
                            IfNotHasBuff(Attacker, Attacker, "AkaliSBStealth", () => {
                                NextBuffVars.InitialTime = GetTime();
                                NextBuffVars.TimeLastHit = GetTime();
                                SpellBuffAdd(Attacker, Attacker, "AkaliSmokeBombInternal", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                            });
                            Else(() => {
                                SpellBuffAdd(Attacker, Attacker, "AkaliSBStealth", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
                            });
                        });
                    });
                    SpellBuffAdd(Attacker, Attacker, "AkaliSBBuff", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                });
                If(Unit, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
                    SpellBuffAdd(Attacker, Unit, "AkaliSBDebuff", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
                });
            });
        });
        this.AkaliAP = GetStat(GetFlatMagicDamageMod, Owner);
        this.AkaliDmg = GetStat(GetFlatPhysicalDamageMod, Owner);
        If(this.DoOnce, default, CO_EQUAL, default, false, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(15, this.LastTimeExecuted, false, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
            });
        });
        this.AkaliDmg = GetStat(GetFlatPhysicalDamageMod, Owner);
        this.AkaliDmg = Math(0 + (this.AkaliDmg ?? 0), MO_SUBTRACT, 10);
        this.AdditionalVampPercent = Math(0 + (this.AkaliDmg ?? 0), MO_DIVIDE, 600);
        CharVars.VampPercent = Math(0 + (this.BaseVampPercent ?? 0), MO_ADD, 0 + (this.AdditionalVampPercent ?? 0));
        ExecutePeriodically(2, this.LastTimeExecuted, false, () => {
            this.VampPercentTooltip = Math(100, MO_MULTIPLY, 0 + (CharVars.VampPercent ?? 0));
            SetBuffToolTipVar(1, 0 + (this.VampPercentTooltip ?? 0));
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            Count = GetBuffCountFromCaster(Owner, Attacker, "ScurvyStrikeParticle");
            damageToDeal = Math(0 + (this.DotDamage ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
            ApplyDamage(Attacker, Owner, 0 + (damageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        });
        SpellBuffRemoveCurrent(Owner);
        Attacker = SetBuffCasterUnit();
        CenterPosition = this.CastPosition;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        If(default, 0.15, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
            CastPosition = GetPointByUnitFacingOffset(Owner, 290, 45);
            CannonPosition = GetRandomPointInAreaPosition(CastPosition, 300, 50);
        });
        ElseIf(default, 0.1765, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
            CastPosition = GetPointByUnitFacingOffset(Owner, 290, 135);
            CannonPosition = GetRandomPointInAreaPosition(CastPosition, 300, 50);
        });
        ElseIf(default, 0.2076, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
            CastPosition = GetPointByUnitFacingOffset(Owner, 290, 225);
            CannonPosition = GetRandomPointInAreaPosition(CastPosition, 300, 50);
        });
        ElseIf(default, 0.2443, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
            CastPosition = GetPointByUnitFacingOffset(Owner, 290, 315);
            CannonPosition = GetRandomPointInAreaPosition(CastPosition, 300, 50);
        });
        Else(() => {
            CannonPosition = GetRandomPointInAreaPosition(CenterPosition, 480, 100);
        });
        SetSpell(Owner, 0, ExtraSlots, SPELLBOOK_CHAMPION, "CannonBarrageBall");
        SpellCast(Owner, Nothing, CannonPosition, CannonPosition, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
        NextBuffVars.AttackSpeedMod = this.AttackSpeedMod;
        ForEachUnitInTargetArea(Attacker, CenterPosition, 580, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            IfNotHasBuff(Owner, Owner, "AkaliShadowDanceTimer", () => {
                Count = GetBuffCountFromCaster(Owner, Owner, "AkaliShadowDance");
                If(Count, default, CO_NOT_EQUAL, default, 3, () => {
                    SpellBuffAdd(Owner, Owner, "AkaliShadowDanceTimer", 1, 1, 0 + (CharVars.DanceTimerCooldown ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Attacker, Owner, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0.1, default, default, default, default);
                DebugSay(Unit, "YO!", default);
                ApplyStun(Attacker, Unit, 10);
                SpellEffectCreate(hi1, default, default, default, default, default, 0, TEAM_UNKNOWN, Owner, false, Unit, "L_foot", default, Unit, default, default, default, default, default, default, default, default, default);
                SpellEffectCreate(hi2, default, default, default, default, default, 0, TEAM_UNKNOWN, Owner, false, Unit, "R_foot", default, Unit, default, default, default, default, default, default, default, default, default);
            });
        });
        ExecutePeriodically(20, this.LastTimeExecuted, false, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
            });
            If(Level, default, CO_EQUAL, default, 3, () => {
                SpellBuffAdd(Owner, Owner, "AkaliShadowDanceCounter3", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
                SpellBuffRemove(Owner, "AkaliShadowDanceCounter2", Owner, default);
            });
        });
        SetStatus(Owner, default, SetGhosted);
        IncStat(IncAcquisitionRangeMod, Owner, -600);
        Temp = GetStatus(Owner, IsMoving);
        If(Temp, default, CO_EQUAL, default, true, () => {
            SpellBuffClear(Owner, "RivenTriCleaveUnlock");
        });
        ExecutePeriodically(0.5, this.DamageManaTimer, false, () => {
            CurMana = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
            TargetPos = this.TargetPos;
            If(this.ManaCost, default, CO_GREATER_THAN, CurMana, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                NegMana = Math(0 + (this.ManaCost ?? 0), MO_MULTIPLY, -1);
                IncPAR(Owner, 0 + (NegMana ?? 0));
            });
            ForEachUnitInTargetArea(Attacker, TargetPos, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (this.DamagePerLevel ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.125, 1, false, false, Attacker);
                NextBuffVars.AttackSpeedMod = -0.2;
                NextBuffVars.MovementSpeedMod = -0.2;
                SpellBuffAdd(Attacker, Unit, "Chilled", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.25, this.SlowTimer, false, () => {
            canCast = GetStatus(Owner, GetCanCast);
            If(canCast, default, CO_EQUAL, default, false, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            TargetPos = this.TargetPos;
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            OwnerPos = GetUnitPosition(Owner);
            Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
            If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 1200, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            ForEachUnitInTargetArea(Attacker, TargetPos, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                NextBuffVars.AttackSpeedMod = -0.2;
                NextBuffVars.MovementSpeedMod = -0.2;
                SpellBuffAdd(Attacker, Unit, "Chilled", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            SpellEffectCreate(this.AmbientParticle, default, "cryo_storm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            IfHasBuff(Attacker, Owner, "GlacialStorm", () => {
                Distance = DistanceBetweenObjects("Attacker", "Owner");
                ForEachUnitInTargetArea(Attacker, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Unit) => {
                    ApplyDamage(Attacker, Unit, 0 + (this.DamagePerLevel ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.0625, 1, false, false, default);
                    NextBuffVars.MovementSpeedMod = -0.3;
                    NextBuffVars.AttackSpeedMod = -0.15;
                    SpellBuffAdd(Attacker, Unit, "Chilled", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, default, default, default, default);
                });
            });
            Else(() => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        If(this.Count, default, CO_NOT_EQUAL, default, 2, () => {
            FocalPoint = GetPointByUnitFacingOffset(Owner, 125, 0);
            ForEachUnitInTargetArea(Owner, FocalPoint, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RivenTriCleaveDamageDebuff", false, (Unit) => {
                SpellBuffAdd(Owner, Unit, "RivenTriCleaveDamageDebuff", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                ApplyDamage(Owner, Unit, 0 + (this.TotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Owner);
            });
            ForEachUnitInTargetArea(Owner, Owner, 75, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RivenTriCleaveDamageDebuff", false, (Unit) => {
                SpellBuffAdd(Owner, Unit, "RivenTriCleaveDamageDebuff", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                ApplyDamage(Owner, Unit, 0 + (this.TotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Owner);
            });
        });
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ExecutePeriodically(2.5, this.LastTimeExecuted, true, () => {
            If(Owner, default, CO_IS_DEAD, default, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                ForEachUnitInTargetAreaRandom(Owner, Owner, 425, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, 1, (Unit) => {
                    Result = CanSeeTarget(Owner, Unit);
                    If(Result, default, CO_EQUAL, default, true, () => {
                        ApplyDamage(Owner, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.2, 1, false, false, Attacker);
                        SpellEffectCreate(default, default, "StaticField_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Unit, false, Unit, default, default, Unit, default, default, true, default, default, default, default, default, default);
                    });
                });
            });
        });
        If(this.WillRemove, default, CO_NOT_EQUAL, default, true, () => {
            ExecutePeriodically(0.1, this.LastTimeExecuted, false, () => {
                this.WillRemove = true;
            });
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            tooltipAmount = this.VALUE_BY_LEVEL;
            If(tooltipAmount, default, CO_GREATER_THAN, this.lastTooltip, default, () => {
                this.lastTooltip = tooltipAmount;
                SetBuffToolTipVar(1, 0 + (tooltipAmount ?? 0));
            });
        });
        ExecutePeriodically(10, this.LastTimeExecuted, false, () => {
            AttackDamage = GetTotalAttackDamage(Owner);
            BaseAD = GetStat(GetBaseAttackDamage, Owner);
            AttackDamage = Math(0 + (AttackDamage ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
            PassiveAD = Math(0.5, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
            SetBuffToolTipVar(2, 0 + (PassiveAD ?? 0));
        });
        ReduceShield(Owner, 0 + (this.amountToSubtract ?? 0), true, true);
        this.ManaShield = Math(0 + (this.ManaShield ?? 0), MO_SUBTRACT, 0 + (this.amountToSubtract ?? 0));
        this.amountToSubtract = 0;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetCanAttack);
        ForEachUnitInTargetArea(Owner, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", false, (Unit) => {
            ShouldHit = true;
            Visible = CanSeeTarget(Owner, Unit);
            If(Visible, default, CO_EQUAL, default, false, () => {
                If(Unit, default, CO_IS_NOT_HERO, default, default, () => {
                    ShouldHit = false;
                });
            });
            this.HitUnit = true;
            BaseAttack = GetStat(GetBaseAttackDamage, Owner);
            HitDamage = Math(0, MO_MULTIPLY, 0 + (BaseAttack ?? 0));
            HitDamage = Math(0 + (HitDamage ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
            SpellBuffAdd(Owner, Unit, "RenektonTargetSliced", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            IfHasBuff(Owner, Owner, "RenektonSliceAndDiceDelay", () => {
                
            });
            ElseIf(this.DiceVersion, default, CO_EQUAL, default, true, () => {
                
            });
            ElseIf(ShouldHit, default, CO_EQUAL, default, false, () => {
                
            });
            Else(() => {
                SpellBuffAdd(Owner, Owner, "RenektonSliceAndDiceDelay", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SetSlotSpellCooldownTimeVer2(0, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            });
            If(ShouldHit, default, CO_EQUAL, default, true, () => {
                OwnerVar = GetTeamID(default);
                BreakSpellShields(Unit);
                SpellBuffAdd(Owner, Unit, "RenektonBloodSplatterTarget", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                If(this.RageBonus, default, CO_EQUAL, default, true, () => {
                    NextBuffVars.ArmorShred = this.ArmorShred;
                    SpellBuffAdd(Owner, Unit, "RenektonSliceAndDiceDebuff", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                    ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1.5, 0, 0.9, false, false, Owner);
                });
                Else(() => {
                    ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0.9, false, false, Owner);
                });
            });
        });
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        TargetPos = this.TargetPos;
        ForEachUnitInTargetArea(Owner, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            Distance = DistanceBetweenObjectAndPoint(Unit, TargetPos);
            If(Distance, default, CO_GREATER_THAN, default, 275, () => {
                Distance = 275;
            });
            FaceDirection(Unit, TargetPos);
            Position = GetPointByUnitFacingOffset(Unit, 0 + (Distance ?? 0), 0);
            NextBuffVars.Gravity = 10;
            NextBuffVars.Speed = 1000;
            NextBuffVars.Position = Position;
            NextBuffVars.IdealDistance = Distance;
            IfNotHasBuff(Unit, Attacker, "ShyvanaTransformCheck", () => {
                SpellBuffAdd(Attacker, Unit, "ShyvanaTransformCheck", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                BreakSpellShields(Unit);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 0, false, false, Attacker);
                SpellBuffAdd(Attacker, Unit, "ShyvanaTransformDamage", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
            });
        });
        Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
        If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 400, () => {
            If(this.DoOnce, default, CO_EQUAL, default, 0, () => {
                UnlockAnimation(Owner, true);
                PlayAnimation("Spell4_land", 0, Owner, false, true, true);
                this.DoOnce = 1;
            });
        });
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetCanAttack);
        ForEachUnitInTargetArea(Owner, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", false, (Unit) => {
            ShouldHit = true;
            Visible = CanSeeTarget(Owner, Unit);
            If(Visible, default, CO_EQUAL, default, false, () => {
                If(Unit, default, CO_IS_NOT_HERO, default, default, () => {
                    ShouldHit = false;
                });
            });
            this.HitUnit = true;
            BaseAttack = GetStat(GetBaseAttackDamage, Owner);
            HitDamage = Math(0, MO_MULTIPLY, 0 + (BaseAttack ?? 0));
            HitDamage = Math(0 + (HitDamage ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
            SpellBuffAdd(Owner, Unit, "RenektonTargetSliced", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            IfHasBuff(Owner, Owner, "RenektonSliceAndDiceDelay", () => {
                
            });
            ElseIf(this.DiceVersion, default, CO_EQUAL, default, true, () => {
                
            });
            ElseIf(ShouldHit, default, CO_EQUAL, default, false, () => {
                
            });
            Else(() => {
                SpellBuffAdd(Owner, Owner, "RenektonSliceAndDiceDelay", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SetSlotSpellCooldownTimeVer2(0, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            });
            If(ShouldHit, default, CO_EQUAL, default, true, () => {
                OwnerVar = GetTeamID(default);
                BreakSpellShields(Unit);
                SpellBuffAdd(Owner, Unit, "RenektonBloodSplatterTarget", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                If(this.RageBonus, default, CO_EQUAL, default, true, () => {
                    NextBuffVars.ArmorShred = this.ArmorShred;
                    SpellBuffAdd(Owner, Unit, "RenektonSliceAndDiceDebuff", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                    ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1.5, 0, 0.9, false, false, Owner);
                });
                Else(() => {
                    ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0.9, false, false, Owner);
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            IncPAR(Owner, -3);
            FuryRemaining = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
            If(FuryRemaining, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            Level = this.Level;
            HealthPercent = GetPAROrHealth(Target, GetHealthPercent, PAR_OTHER);
            IncPAR(Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
            If(HealthPercent, default, CO_LESS_THAN_OR_EQUAL, CharVars.RageThreshold, default, () => {
                IncPAR(Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
            });
            ForEachUnitInTargetArea(Owner, Owner, 375, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
                ApplyDamage(Owner, Unit, 0 + (this.BurnDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Owner);
            });
            ForEachUnitInTargetArea(Owner, Owner, 375, "AffectEnemies AffectNeutral AffectMinions ", default, true, (Unit) => {
                ApplyDamage(Owner, Unit, 0 + (this.BurnDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Owner);
            });
            SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetStatus(Owner, default, SetCanAttack);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        CurPos = GetPointByUnitFacingOffset(Owner, 25, 180);
        Distance = DistanceBetweenPoints(CurPos, this.LastPosition);
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 150, () => {
            TeamID = GetTeamID(default);
            NextBuffVars.DamagePerTick = this.DamagePerTick;
            Other3 = SpawnMinion("AcidTrail", "TestCube", "idle.lua", CurPos, TeamID ?? TEAM_CASTER, true, false, false, true, false, true, 0, false, true, Attacker, default);
            SpellBuffAdd(Attacker, Other3, "ShyvanaIDApplicator", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
            this.LastPosition = CurPos;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                IfNotHasBuff(Unit, Attacker, "ShyvanaIDDamage", () => {
                    NextBuffVars.DamagePerTick = this.DamagePerTick;
                    SpellBuffAdd(Attacker, Unit, "ShyvanaIDDamage", 1, 1, 0.75, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
            this.MovementSpeed = Math(0 + (this.MovementSpeed ?? 0), MO_MULTIPLY, 0.85);
        });
        ForEachUnitInTargetArea(Attacker, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            IfNotHasBuff(Unit, Attacker, "ShyvanaIDDamage", () => {
                NextBuffVars.DamagePerTick = this.DamagePerTick;
                SpellBuffAdd(Attacker, Unit, "ShyvanaIDDamage", 1, 1, 0.75, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                TeamID = GetTeamID(default);
                SpellEffectCreate(a, default, "shyvana_scorchedEarth_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            });
            this.MovementSpeed = Math(0 + (this.MovementSpeed ?? 0), MO_MULTIPLY, 0.85);
        });
        CurTime = GetTime();
        TimeSinceLastHit = Math(0 + (CurTime ?? 0), MO_SUBTRACT, 0 + (this.TimeLastHit ?? 0));
        If(TimeSinceLastHit, default, CO_GREATER_THAN_OR_EQUAL, default, 1.5, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(this.WillFade, default, CO_EQUAL, default, true, () => {
            ID = PushCharacterFade(Owner, 0.2, default, ID);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SpellEffectCreate(a, default, "Udyr_Phoenix_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
            ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.25, 0, false, false, Attacker);
            });
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.DotDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0, 0, false, false, Attacker);
        });
        If(this.ShieldHealth, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            IncHealth(Owner, 0 + (this.HealthTick ?? 0), Owner);
            SpellEffectCreate(arr, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_LostTarget);
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(2, this.LastTimeExecuted, false, () => {
            If(this.WillRemove, default, CO_NOT_EQUAL, default, true, () => {
                HealAmount = Math(0 + (this.TickWorth ?? 0), MO_MULTIPLY, 0 + (this.TickNumber ?? 0));
                IncPAR(Owner, 0 + (this.TickWorthMana ?? 0));
                IncHealth(Owner, 0 + (HealAmount ?? 0), Owner);
                SpellEffectCreate(arr, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
                this.TickNumber = Math(0 + (this.TickNumber ?? 0), MO_ADD, 1);
                CD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                NewCD = Math(0 + (CD ?? 0), MO_SUBTRACT, 5);
                SetSlotSpellCooldownTimeVer2(0 + (NewCD ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
            });
        });
        TargetPos = this.TargetPos;
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.MRminus = this.MRminus;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Attacker, TargetPos, 280, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
                SpellBuffAdd(Attacker, Unit, "TormentedSoilDebuff", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
                SpellEffectCreate(hi1, default, "FireFeet_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "L_foot", default, Unit, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(hi2, default, "FireFeet_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "R_foot", default, Unit, default, default, false, false, false, false, false, default, default);
            });
        });
        ExecutePeriodically(5, this.LastTimeExecuted, true, () => {
            TotalAttackDamage = GetTotalAttackDamage(Owner);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                DamagePercent = this.VALUE_BY_LEVEL;
            });
            Else(() => {
                DamagePercent = 0.8;
            });
            DamageToDisplay = Math(0 + (TotalAttackDamage ?? 0), MO_MULTIPLY, 0 + (DamagePercent ?? 0));
            SetSpellToolTipVar(0 + (DamageToDisplay ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
            BonusAD20 = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.2);
            SetSpellToolTipVar(0 + (BonusAD20 ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        Count = GetBuffCountFromAll(Attacker, "AlphaStrike");
        If(Count, default, CO_EQUAL, default, 0, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            IfHasBuff(Attacker, Attacker, "SoulShacklesOwner", () => {
                
            });
            Else(() => {
                this.Broken = true;
                SpellBuffRemoveCurrent(Owner);
            });
            If(Attacker, default, CO_IS_DEAD, default, default, () => {
                this.Broken = true;
                SpellBuffRemove(Owner, "SoulShackleSlow", Attacker, 0);
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                If(Owner, default, CO_IS_DEAD, default, default, () => {
                    this.Broken = true;
                    SpellBuffRemove(Owner, "SoulShackleSlow", Attacker, 0);
                    SpellBuffRemoveCurrent(Owner);
                });
                Else(() => {
                    Distance = DistanceBetweenObjects("Owner", "Attacker");
                    If(Distance, default, CO_GREATER_THAN, default, 600, () => {
                        this.Broken = true;
                        SpellBuffRemove(Owner, "SoulShackleSlow", Attacker, 0);
                        SpellBuffRemoveCurrent(Owner);
                    });
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Attacker, Owner, 360, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            BaseDamage = this.VALUE_BY_LEVEL;
            SetBuffToolTipVar(2, 0 + (BaseDamage ?? 0));
            BaseDamage = this.VALUE_BY_LEVEL;
            APBonus = GetStat(GetFlatMagicDamageMod, Owner);
            Damage = Math(0 + (APBonus ?? 0), MO_MULTIPLY, 0.2);
            Damage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (Damage ?? 0));
            SetBuffToolTipVar(3, 0 + (Damage ?? 0));
        });
        Caster = SetBuffCasterUnit();
        Distance = DistanceBetweenObjects("Caster", "Owner");
        If(Distance, default, CO_GREATER_THAN, default, 1125, () => {
            SealSpellSlot(0, SpellSlots, Caster, true, SPELLBOOK_CHAMPION);
            SealSpellSlot(1, SpellSlots, Caster, true, SPELLBOOK_CHAMPION);
            SealSpellSlot(2, SpellSlots, Caster, true, SPELLBOOK_CHAMPION);
            SealSpellSlot(3, SpellSlots, Caster, true, SPELLBOOK_CHAMPION);
            SpellBuffClear(Owner, "OrianaGhost");
            CastPos = GetUnitPosition(Owner);
            TeamID = GetTeamID(default);
            SpellEffectCreate(Temp, default, "Orianna_Ball_Flash.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, "root", CastPos, Owner, default, default, true, false, false, false, false, default, default);
            SpellBuffAdd(Caster, Caster, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            SpellEffectCreate(Temp, default, "Orianna_Ball_Flash_Reverse.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Caster, false, Caster, "SpinnigBottomRidge", CastPos, Caster, default, default, true, false, false, false, false, default, default);
            SealSpellSlot(0, SpellSlots, Caster, false, SPELLBOOK_CHAMPION);
            SealSpellSlot(1, SpellSlots, Caster, false, SPELLBOOK_CHAMPION);
            SealSpellSlot(2, SpellSlots, Caster, false, SPELLBOOK_CHAMPION);
            SealSpellSlot(3, SpellSlots, Caster, false, SPELLBOOK_CHAMPION);
        });
        ElseIf(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 25, () => {
            IfNotHasBuff(Caster, Nothing, "OrianaDissonanceCountdown", () => {
                If(Owner, default, CO_IS_NOT_HERO, default, default, () => {
                    Caster = SetBuffCasterUnit();
                    SpellBuffAdd(Caster, Caster, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    SpellBuffClear(Owner, "OrianaGhost");
                    SpellEffectCreate(Temp, default, "Orianna_Ball_Flash_Reverse.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Caster, false, Caster, "SpinnigBottomRidge", CastPos, Caster, default, default, true, false, false, false, false, default, default);
                });
            });
        });
        Else(() => {
            NoRender = GetStatus(Owner, GetNoRender);
            If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                If(NoRender, default, CO_EQUAL, default, true, () => {
                    SealSpellSlot(0, SpellSlots, Caster, true, SPELLBOOK_CHAMPION);
                    SealSpellSlot(1, SpellSlots, Caster, true, SPELLBOOK_CHAMPION);
                    SealSpellSlot(2, SpellSlots, Caster, true, SPELLBOOK_CHAMPION);
                    SealSpellSlot(3, SpellSlots, Caster, true, SPELLBOOK_CHAMPION);
                    SpellBuffClear(Owner, "OrianaGhost");
                    CastPos = GetUnitPosition(Owner);
                    TeamID = GetTeamID(default);
                    SpellEffectCreate(Temp, default, "Orianna_Ball_Flash.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, "root", CastPos, Owner, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd(Caster, Caster, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    SpellEffectCreate(Temp, default, "Orianna_Ball_Flash_Reverse.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Caster, false, Caster, "SpinnigBottomRidge", CastPos, Caster, default, default, true, false, false, false, false, default, default);
                    SealSpellSlot(0, SpellSlots, Caster, false, SPELLBOOK_CHAMPION);
                    SealSpellSlot(1, SpellSlots, Caster, false, SPELLBOOK_CHAMPION);
                    SealSpellSlot(2, SpellSlots, Caster, false, SPELLBOOK_CHAMPION);
                    SealSpellSlot(3, SpellSlots, Caster, false, SPELLBOOK_CHAMPION);
                });
            });
        });
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            If(this.GhostSpawned, default, CO_EQUAL, default, false, () => {
                If(Owner, default, CO_IS_DEAD, default, default, () => {
                    Caster = SetBuffCasterUnit();
                    MissileEndPosition = GetUnitPosition(Owner);
                    TeamID = GetTeamID(default);
                    this.GhostSpawned = true;
                    Other3 = SpawnMinion("TheDoomBall", "OriannaBall", "idle.lua", MissileEndPosition, TeamID ?? TEAM_ORDER, false, true, false, true, true, true, 0, false, true, Caster, default);
                    SpellBuffAdd(Attacker, Other3, "OrianaGhost", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    SpellBuffAdd(Attacker, Other3, "OrianaGhostMinion", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    SpellBuffClear(Owner, "OrianaGhost");
                });
            });
        });
        If(Caster, default, CO_IS_DEAD, default, default, () => {
            SpellBuffClear(Owner, "OrianaGhost");
        });
        ElseIf(Caster, default, CO_EQUAL, Owner, default, () => {
            SpellBuffAdd(Caster, Caster, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            SpellBuffClear(Owner, "OrianaGhost");
        });
        Distance = DistanceBetweenObjects("Attacker", "Owner");
        If(Distance, default, CO_GREATER_THAN, default, 1250, () => {
            this.PickUp = true;
            SpellBuffClear(Owner, "OrianaGhostEnemy");
            CastPos = GetUnitPosition(Owner);
            SpellBuffAdd(Attacker, Attacker, "OrianaReturn", 1, 1, 1.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            SpellCast(Attacker, Attacker, Attacker, Attacker, true, 4, ExtraSlots, 1, false, true, false, false, false, CastPos);
        });
        Else(() => {
            NoRender = GetStatus(Owner, GetNoRender);
            If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                If(NoRender, default, CO_EQUAL, default, true, () => {
                    SpellBuffClear(Owner, "OrianaGhostEnemy");
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.TickDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0, 0, false, false, Attacker);
            SpellBuffAdd(Attacker, Attacker, "OrianaPowerDagger", 3, 1, 6, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Attacker, Owner, 120, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                NextBuffVars.TickDamage = this.TickDamage;
                SpellBuffAdd(Attacker, Unit, "OrianaDoT", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            If(this.DOTCounter, default, CO_LESS_THAN, default, 4, () => {
                this.DOTCounter = Math(0 + (this.DOTCounter ?? 0), MO_ADD, 1);
                ApplyDamage(Attacker, Owner, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.1, 1, false, false, Attacker);
            });
        });
        TeamID = GetTeamID(default);
        If(this.Active, default, CO_EQUAL, default, true, () => {
            ForEachUnitInTargetArea(Attacker, Owner, 150, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                TeamID = GetTeamID(default);
                SpellEffectCreate(Particle, default, "nidalee_bushwhack_trigger_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(Particle, default, "nidalee_bushwhack_trigger_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, true, false, false, false, false, default, default);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                NextBuffVars.DOTCounter = 0;
                NextBuffVars.DamagePerTick = this.VALUE_BY_LEVEL;
                NextBuffVars.Debuff = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Unit, "BushwhackDebuff", 1, 1, 12, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, false, false, default);
                SpellBuffAdd(Attacker, Unit, "BushwhackDamage", 1, 1, 12, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
                this.Sprung = true;
            });
            If(this.Sprung, default, CO_EQUAL, default, true, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        Else(() => {
            ExecutePeriodically(0.9, this.LastTimeExecuted, false, () => {
                this.Active = true;
                SpellEffectCreate(this.Particle, this.emptyparticle, "nidalee_trap_team_id_green.troy", "empty.troy", TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
            });
        });
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.DamageSecond ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0, 1, false, false, Attacker);
            IncHealth(Attacker, 0 + (this.DamageSecond ?? 0), Attacker);
        });
        targetPos = this.targetPos;
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Attacker, targetPos, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "OrianaShock", false, (Unit) => {
                NextBuffVars.Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                SpellBuffAdd(Attacker, Unit, "OrianaSlow", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
            });
            ForEachUnitInTargetArea(Attacker, targetPos, 225, "AffectFriends AffectMinions AffectHeroes ", "OrianaShock", false, (Unit) => {
                NextBuffVars.Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                SpellBuffAdd(Attacker, Unit, "OrianaHaste", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            LowerArmorLess = Math(0 + (this.Survivability ?? 0), MO_MULTIPLY, 0 + (this.OwnerArmor ?? 0));
            LowerMRLess = Math(0 + (this.Survivability ?? 0), MO_MULTIPLY, 0 + (this.OwnerMR ?? 0));
            this.InstancedArmor = Math(0 + (this.InstancedArmor ?? 0), MO_SUBTRACT, 0 + (LowerArmorLess ?? 0));
            this.InstancedMR = Math(0 + (this.InstancedMR ?? 0), MO_SUBTRACT, 0 + (LowerMRLess ?? 0));
        });
        If(this.Delay, default, CO_EQUAL, default, true, () => {
            Count = GetBuffCountFromAll(Owner, "NocturneParanoiaTargetOrder");
            If(Count, default, CO_EQUAL, default, 0, () => {
                SpellEffectCreate(this.Loop, default, "NocturneParanoiaFriend.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, "root", default, Owner, default, default, false, default, default, default, default, default, default);
                this.Delay = false;
            });
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        If(this.HasDealtDamage, default, CO_EQUAL, default, false, () => {
            Distance = DistanceBetweenObjects("Owner", "Attacker");
            If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 300, () => {
                BreakSpellShields(Attacker);
                ApplyDamage(Owner, Attacker, 0 + (this.DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, true, true, Owner);
                SpellEffectCreate(asdf, default, "NocturneParanoiaDash_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Attacker, default, default, Attacker, default, default, true, default, default, false, false, default, default);
                this.HasDealtDamage = true;
            });
        });
        Distance = DistanceBetweenObjects("Owner", "Attacker");
        If(this.PartCreated, default, CO_EQUAL, default, true, () => {
            If(Distance, default, CO_GREATER_THAN, this.Range, default, () => {
                SpellEffectRemove(this.tpar);
                this.PartCreated = false;
            });
        });
        Else(() => {
            If(Distance, default, CO_LESS_THAN_OR_EQUAL, this.Range, default, () => {
                SpellEffectCreate(this.tpar, default, "NocturneParanoiaTargeting.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, true, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
                this.PartCreated = true;
            });
        });
        If(this.Delay, default, CO_EQUAL, default, true, () => {
            Count = GetBuffCountFromAll(Owner, "NocturneParanoiaTargetChaos");
            If(Count, default, CO_EQUAL, default, 0, () => {
                SpellEffectCreate(this.Loop, default, "NocturneParanoiaFriend.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, "root", default, Owner, default, default, false, default, default, default, default, default, default);
                this.Delay = false;
            });
        });
        ExecutePeriodically(0.1, this.LastTimeExecuted, false, () => {
            If(this.VOSoundCreated, default, CO_EQUAL, default, false, () => {
                this.VOSoundCreated = true;
                SpellBuffAdd(Attacker, Attacker, "NocturneParanoiaVO", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, true, default);
                TeamOfOwner = GetTeamID(default);
                If(TeamOfOwner, default, CO_EQUAL, default, 100, () => {
                    ForEachChampion(TEAM_UNKNOWN, default, true, (Unit) => {
                        SpellBuffAdd(Attacker, Unit, "NocturneParanoiaTargetOrderVO", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, true, default);
                    });
                });
                Else(() => {
                    ForEachChampion(TEAM_UNKNOWN, default, true, (Unit) => {
                        SpellBuffAdd(Attacker, Unit, "NocturneParanoiaTargetChaosVO", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, true, default);
                    });
                });
            });
        });
        CasterID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            CurPos = GetPointByUnitFacingOffset(Owner, 0, 0);
            Distance = DistanceBetweenPoints(this.LastPosition, CurPos);
            If(Distance, default, CO_GREATER_THAN, default, 25, () => {
                Other3 = SpawnMinion("DarkPath", "testcube", "idle.lua", CurPos, CasterID ?? TEAM_CASTER, true, true, true, true, false, true, 0, default, true, Nothing, default);
                NextBuffVars.HastePercent = this.VALUE_BY_LEVEL;
                NextBuffVars.BonusAD = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Other3, "NocturneDuskbringer", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                this.LastPosition = CurPos;
            });
        });
        TeamID = GetTeamID(default);
        ExecutePeriodically(0.75, this.LastTimeExecuted, true, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.25, 0, false, false, Attacker);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted3, true, () => {
            Distance = DistanceBetweenObjects("Owner", "Attacker");
            If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 465, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            If(Attacker, default, CO_IS_DEAD, default, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        ExecutePeriodically(2, this.LastTimeExecuted4, false, () => {
            this.Feared = true;
            ApplyFear(Attacker, Owner, 0 + (this.FearDuration ?? 0));
            SpellEffectCreate(asdf, default, "NocturneUnspeakableHorror_fear.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, true, false, false, false, false, default, default);
            SpellBuffRemove(Owner, "NocturneUnspeakableHorror", Attacker, 0);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            Distance = DistanceBetweenObjects("Owner", "Attacker");
            If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 80, () => {
                NextBuffVars.HastePercent = this.HastePercent;
                NextBuffVars.BonusAD = this.BonusAD;
                SpellBuffAdd(Attacker, Attacker, "NocturneDuskbringerHaste", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            BaseMagic = this.VALUE_BY_LEVEL;
            CurrentHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
            MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            MissingHealth = Math(0 + (MaxHealth ?? 0), MO_SUBTRACT, 0 + (CurrentHealth ?? 0));
            BasePercent = this.VALUE_BY_LEVEL;
            BaseAP = GetStat(GetFlatMagicDamageMod, Attacker);
            FlatAPBonus = Math(0 + (BaseAP ?? 0), MO_MULTIPLY, 0.35);
            BonusDamage = Math(0 + (MissingHealth ?? 0), MO_MULTIPLY, 0 + (BasePercent ?? 0));
            TotalDamage = Math(0 + (BaseMagic ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
            TotalDamage = Math(0 + (TotalDamage ?? 0), MO_ADD, 0 + (FlatAPBonus ?? 0));
            TotalDamage = Math(0 + (TotalDamage ?? 0), MO_DIVIDE, 6);
            If(Owner, default, CO_IS_NOT_HERO, default, default, () => {
                TotalDamage = Math(0 + (TotalDamage ?? 0), MO_MIN, 50);
            });
            ApplyDamage(Attacker, Owner, 0 + (TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        });
        TeamID1 = GetTeamID(default);
        If(this.Active, default, CO_EQUAL, default, true, () => {
            ForNClosestUnitsInTargetArea(Attacker, Owner, 100, "AffectFriends AffectHeroes ", 1, false, "MarknFranzFranzTrapNoFling", (Unit) => {
                Moving = GetStatus(Unit, IsMoving);
                If(Moving, default, CO_EQUAL, default, true, () => {
                    TeamID2 = GetTeamID(default);
                    BreakSpellShields(Unit);
                    TeamID = GetTeamID(default);
                    SpellEffectCreate(Particle, default, "caitlyn_yordleTrap_trigger_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, true, false, false, false, false, default, default);
                    SpellEffectCreate(asdadsfa, default, "caitlyn_yordleTrap_trigger_sound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                    LandPos = GetPointByUnitFacingOffset(Owner, 620, 0);
                    ApplyAssistMarker(Attacker, Unit, 10);
                    Dmg = this.VALUE_BY_LEVEL;
                    LandPos = GetPointByUnitFacingOffset(Unit, 550, 0);
                    Move(Unit, LandPos, 650, 60, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 420, FACE_MOVEMENT_DIRECTION);
                    this.Active = false;
                    this.Delay = 4;
                    UnlockAnimation(Owner, false);
                    PlayAnimation("Death", 4, Owner, false, false, true);
                });
            });
        });
        Else(() => {
            ExecutePeriodically(1, this.LastTimeExecuted2, false, () => {
                this.Delay = Math(0 + (this.Delay ?? 0), MO_SUBTRACT, 1);
                If(this.Delay, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                    this.Active = true;
                });
                ElseIf(this.Delay, default, CO_LESS_THAN_OR_EQUAL, default, 1, () => {
                    PlayAnimation("Spell1", 1, Owner, false, false, true);
                });
            });
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            SunlightDamage = this.VALUE_BY_LEVEL;
            If(SunlightDamage, default, CO_GREATER_THAN, this.LastSunlightDamage, default, () => {
                this.LastSunlightDamage = SunlightDamage;
                SetBuffToolTipVar(2, 0 + (SunlightDamage ?? 0));
            });
        });
        SetStatus(Owner, default, SetGhosted);
        Attacker = SetBuffCasterUnit();
        If(this.HitTarget, default, CO_EQUAL, default, false, () => {
            Distance = DistanceBetweenObjects("Attacker", "Owner");
            If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 175, () => {
                BreakSpellShields(Attacker);
                ApplyDamage(Owner, Attacker, 0 + (this.DamageDealt ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 1, false, false, Owner);
                TotalAD = GetTotalAttackDamage(Owner);
                SetDodgePiercing(Owner, true);
                ApplyDamage(Owner, Attacker, 0 + (TotalAD ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Owner);
                this.HitTarget = true;
                TeamID = GetTeamID(default);
                SpellEffectCreate(this.targetParticle, default, "Fizz_PiercingStrike_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, true, false, false, false, false, default, default);
                SetDodgePiercing(Owner, false);
            });
        });
        IncStat(IncAcquisitionRangeMod, Owner, -175);
        SetStatus(Owner, default, SetCanAttack);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            DamageByRank = this.VALUE_BY_LEVEL;
            totalAttackDamage = GetTotalAttackDamage(Owner);
            baseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
            abilityPower = GetStat(GetFlatMagicDamageMod, Owner);
            bonusAttackDamage = Math(0 + (totalAttackDamage ?? 0), MO_SUBTRACT, 0 + (baseAttackDamage ?? 0));
            attackDamageToAdd = Math(0 + (bonusAttackDamage ?? 0), MO_MULTIPLY, 0);
            abilityPowerToAdd = Math(0 + (abilityPower ?? 0), MO_MULTIPLY, 0.1);
            damageToDeal = Math(0 + (DamageByRank ?? 0), MO_ADD, 0 + (abilityPowerToAdd ?? 0));
            damageToDeal = Math(0 + (damageToDeal ?? 0), MO_ADD, 0 + (attackDamageToAdd ?? 0));
            ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectBuildings AffectMinions AffectHeroes AffectTurrets ", default, true, (Unit) => {
                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                    ApplyDamage(Attacker, Unit, 0 + (damageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                });
                ElseIf(Unit, default, CO_IS_NOT_AI, default, default, () => {
                    ApplyDamage(Attacker, Unit, 0 + (damageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                });
                ElseIf(Unit, default, CO_IS_TYPE_TURRET, default, default, () => {
                    ApplyDamage(Attacker, Unit, 0 + (damageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                });
                Else(() => {
                    ApplyDamage(Attacker, Unit, 0 + (damageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 2, 0, 1, false, false, Attacker);
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.TickDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        ExecutePeriodically(0.1, this.LastTimeExecuted, true, () => {
            OwnerPos = GetUnitPosition(Owner);
            TargetPos = GetUnitPosition(Attacker);
            TeamID = GetTeamID(default);
            Other2 = SpawnMinion("enemy", "TestCubeRender", "idle.lua", TargetPos, TeamID ?? TEAM_NEUTRAL, true, true, false, true, true, true, 0, default, true, Nothing, default);
            SpellBuffAdd(Owner, Other2, "UrgotSwapMarker", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            FaceDirection(Other2, OwnerPos);
            TargetOffsetPos = GetPointByUnitFacingOffset(Other2, 80, 90);
            Other3 = SpawnMinion("ownerMinion", "TestCubeRender", "idle.lua", OwnerPos, TeamID ?? TEAM_NEUTRAL, true, true, false, true, true, true, 0, default, true, Nothing, default);
            SpellBuffAdd(Owner, Other3, "UrgotSwapMarker", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            FaceDirection(Other3, TargetPos);
            OwnerOffset = GetPointByUnitFacingOffset(Other3, 80, 90);
            SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "UrgotSwapMissile");
            SpellCast(Owner, Attacker, TargetPos, TargetPos, true, 7, ExtraSlots, 1, true, true, false, false, false, OwnerOffset);
            SetSpell(Attacker, 7, ExtraSlots, SPELLBOOK_CHAMPION, "UrgotSwapMissile2");
            SpellCast(Attacker, Owner, OwnerPos, OwnerPos, true, 7, ExtraSlots, 1, true, true, false, false, false, TargetOffsetPos);
            SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        ExecutePeriodically(0, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                SpellBuffAdd(Owner, Owner, "UrgotHeatseekingAmmo", 4, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
            });
        });
        temp = GetStatus(Owner, IsMoving);
        If(temp, default, CO_EQUAL, default, false, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(1.9, this.LastTimeExecuted, false, () => {
            IncHealth(Owner, 0 + (this.HealAmount ?? 0), Owner);
        });
        ForNClosestUnitsInTargetArea(Owner, this.MissilePosition, 150, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
            Duration = GetBuffRemainingDuration(Owner, "FizzMarinerDoomMissile");
            SpellEffectRemove(this.Temp);
            SpellEffectRemove(this.Temp2);
            SpellEffectRemove(this.Temp3);
            SpellEffectRemove(this.Temp4);
            SpellBuffAdd(Owner, Unit, "FizzMarinerDoomBomb", 1, 1, 0 + (Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
            this.Exploded = true;
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(5, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            DamageByRank = this.VALUE_BY_LEVEL;
            totalAttackDamage = GetTotalAttackDamage(Owner);
            baseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
            abilityPower = GetStat(GetFlatMagicDamageMod, Owner);
            bonusAttackDamage = Math(0 + (totalAttackDamage ?? 0), MO_SUBTRACT, 0 + (baseAttackDamage ?? 0));
            attackDamageToAdd = Math(0 + (bonusAttackDamage ?? 0), MO_MULTIPLY, 0);
            abilityPowerToAdd = Math(0 + (abilityPower ?? 0), MO_MULTIPLY, 0.1);
            damageToDeal = Math(0 + (DamageByRank ?? 0), MO_ADD, 0 + (abilityPowerToAdd ?? 0));
            CurrentDamage = Math(0 + (damageToDeal ?? 0), MO_ADD, 0 + (attackDamageToAdd ?? 0));
            SetBuffToolTipVar(1, 0 + (CurrentDamage ?? 0));
            SetBuffToolTipVar(2, 0 + (DamageByRank ?? 0));
            SetBuffToolTipVar(3, 0 + (abilityPowerToAdd ?? 0));
        });
        ReadyNew = false;
        CriticalNew = false;
        CD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellCooldownTime);
        If(CD, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            Count = GetBuffCountFromAll(Attacker, "VolibearWStats");
            If(Count, default, CO_EQUAL, default, 4, () => {
                Distance = DistanceBetweenObjects("Attacker", "Owner");
                If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 350, () => {
                    ReadyNew = true;
                });
            });
        });
        If(ReadyNew, default, CO_EQUAL, default, true, () => {
            If(this.Ready, default, CO_EQUAL, default, false, () => {
                this.Ready = true;
                SpellEffectCreate(this.Particle1, default, "Volibear_tar_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, true, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
            });
        });
        If(ReadyNew, default, CO_EQUAL, default, false, () => {
            If(this.Ready, default, CO_EQUAL, default, true, () => {
                this.Ready = false;
                SpellEffectRemove(this.Particle1);
            });
        });
        ReadyNew = false;
        CriticalNew = false;
        CD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellCooldownTime);
        If(CD, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            Count = GetBuffCountFromAll(Attacker, "VolibearWStats");
            If(Count, default, CO_EQUAL, default, 4, () => {
                Distance = DistanceBetweenObjects("Attacker", "Owner");
                If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 350, () => {
                    ReadyNew = true;
                });
            });
        });
        If(ReadyNew, default, CO_EQUAL, default, true, () => {
            If(this.Ready, default, CO_EQUAL, default, false, () => {
                this.Ready = true;
                SpellEffectCreate(this.Particle1, default, "Volibear_tar_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, true, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
            });
        });
        If(ReadyNew, default, CO_EQUAL, default, false, () => {
            If(this.Ready, default, CO_EQUAL, default, true, () => {
                this.Ready = false;
                SpellEffectRemove(this.Particle1);
            });
        });
        ExecutePeriodically(2, this.LastTimeExecuted, true, () => {
            totalAD = GetTotalAttackDamage(Owner);
            baseDamage = GetStat(GetBaseAttackDamage, Owner);
            bonusDamage = Math(0 + (totalAD ?? 0), MO_SUBTRACT, 0 + (baseDamage ?? 0));
            bonusDamage = Math(1.2, MO_MULTIPLY, 0 + (bonusDamage ?? 0));
            critDisplay = Math(100, MO_MULTIPLY, 0 + (this.bonusCrit ?? 0));
            SetBuffToolTipVar(1, 0 + (critDisplay ?? 0));
            SetSpellToolTipVar(0 + (bonusDamage ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        targetPos = this.targetPos;
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Attacker, targetPos, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                NextBuffVars.SlowPercent = this.SlowPercent;
                SpellBuffAdd(Attacker, Unit, "KogMawVoidOozeSlow", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectHeroes ", default, true, (Unit) => {
                NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Unit, "GravesSmokeGrenadeBoomSlow", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, true, false, default);
                IfNotHasBuff(Unit, Attacker, "GravesSmokeGrenadeDelay", () => {
                    NextBuffVars.SightReduction = -800;
                    SpellBuffAdd(Attacker, Unit, "GravesSmokeGrenadeBoom", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                IfHasBuff(Unit, Attacker, "NocturneParanoiaTarget", () => {
                    SpellBuffAdd(Attacker, Unit, "GravesSmokeGrenadeNocturneUlt", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(0.1, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Owner, Owner, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "SlashBeenHit", false, (Unit) => {
                If(Unit, default, CO_IS_TYPE_AI, default, default, () => {
                    If(Unit, default, CO_IS_NOT_TURRET, default, default, () => {
                        
                    });
                });
                SpellBuffAdd(Owner, Unit, "SlashBeenHit", 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (this.Damage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 0, false, true, Attacker);
                SpellEffectCreate(particle, default, "BloodSlash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, false, false, default, default);
                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                    IncPAR(Owner, 5);
                });
                Else(() => {
                    IncPAR(Owner, 2);
                });
            });
        });
        If(this.WillMove, default, CO_EQUAL, default, true, () => {
            SpellEffectCreate(this.Particle, default, "Slash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
            this.WillMove = false;
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            Count = GetBuffCountFromAll(Owner, "GravesPassiveGrit");
            If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 11, () => {
                
            });
            Else(() => {
                SpellBuffAdd(Attacker, Owner, "GravesPassiveGrit", 11, 1, 4, NextBuffVars, BUFF_STACKS_AND_CONTINUE, BUFF_AmmoStack, 0, true, false, false, default);
            });
        });
        SetBuffToolTipVar(1, 0 + (CharVars.ArmorAmount ?? 0));
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            SetStatus(Owner, default, SetCanMove);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            Count = GetBuffCountFromAll(Owner, "GravesPassiveGrit");
            Count = Math(0 + (Count ?? 0), MO_SUBTRACT, 1);
            Total = Math(0 + (Count ?? 0), MO_MULTIPLY, 0 + (CharVars.ArmorAmount ?? 0));
            SetBuffToolTipVar(1, 0 + (Total ?? 0));
        });
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            ExecutePeriodically(1, this.LastTimeExecuted2, true, () => {
                OwnerPos = GetUnitPosition(Owner);
                Other1 = SpawnMinion("BloodDrop", "TestCube", "Idle.lua", OwnerPos, this.AttackerTeamID ?? TEAM_UNKNOWN, false, true, false, true, true, true, 450, false, false, Attacker, default);
                SetStatus(Other1, default, SetTargetable);
                SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                PoisonBaseDamage = this.VALUE_BY_LEVEL;
                PoisonTotalDamage = 0;
                BaseAttackDamage = GetStat(GetBaseAttackDamage, Attacker);
                FlatAPBonus = Math(0 + (FlatAPBonus ?? 0), MO_MULTIPLY, 0.1);
                PoisonTotalDamage = Math(0 + (PoisonBaseDamage ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
                ApplyDamage(Attacker, Owner, 0 + (PoisonTotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            Pos = GetPointByUnitFacingOffset(Owner, 300, -15);
            SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 1, true, true, false, default, default, default);
            Pos = GetPointByUnitFacingOffset(Owner, 300, 0);
            SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 1, true, true, false, default, default, default);
            Pos = GetPointByUnitFacingOffset(Owner, 300, 5);
            SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 1, true, true, false, default, default, default);
            Pos = GetPointByUnitFacingOffset(Owner, 300, -5);
            SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 1, true, true, false, default, default, default);
            Pos = GetPointByUnitFacingOffset(Owner, 300, 10);
            SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 1, true, true, false, default, default, default);
            Pos = GetPointByUnitFacingOffset(Owner, 300, -10);
            SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 1, true, true, false, default, default, default);
            Pos = GetPointByUnitFacingOffset(Owner, 300, 15);
            SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 1, true, true, false, default, default, default);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            SpellEffectCreate(this.GatlingEffect, default, "corki_gatlin_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
            Pos = GetPointByUnitFacingOffset(Owner, 300, 0);
            SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, false, default);
        });
        CurrentPos = GetUnitPosition(Owner);
        ExecutePeriodically(3.25, this.LastTimeExecuted, false, () => {
            If(this.Ready, default, CO_EQUAL, default, 1, () => {
                ForwardPosition = GetPointByUnitFacingOffset(Owner, 1, 220);
                SpellEffectCreate(this.particle2, default, "CassDeathDust.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Nothing, "BUFFBONE_CSTM_DUST", CurrentPos, Nothing, default, default, true, default, default, default, default, ForwardPosition, default);
                this.CasterID = PushCharacterData("Cassiopeia_Death", Owner, false);
                this.Ready = 2;
            });
        });
        HealthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        If(HealthPercent, default, CO_GREATER_THAN, default, 0.5, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Else(() => {
            If(this.TestAmount, default, CO_NOT_EQUAL, CharVars.SecondSkinMR, default, () => {
                this.TestAmount = CharVars.SecondSkin;
                SetBuffToolTipVar(1, 0 + (CharVars.SecondSkin ?? 0));
            });
        });
        ExecutePeriodically(0.1, this.LastTimeExecuted, false, () => {
            Pos = this.Pos;
            NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
            NextBuffVars.ArmorMod = this.ArmorMod;
            ForEachUnitInTargetArea(Attacker, Pos, 75, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "WallofPainTarget", false, (Unit) => {
                IfHasBuff(Unit, Attacker, "WallOfPainMarker", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Attacker, Unit, "WallofPainTarget", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                    SpellBuffAdd(Attacker, Unit, "WallofPainExtra", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, false, false, default);
                    SpellBuffAdd(Attacker, Unit, "WallofPainMarker", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Attacker, Owner, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0.1, default, default, default, default);
                SpellEffectCreate(hi1, default, default, default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "L_foot", default, Unit, default, default, false, default, default, default, default, default, default);
                SpellEffectCreate(hi2, default, default, default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "R_foot", default, Unit, default, default, false, default, default, default, default, default, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            IfNotHasBuff(Owner, Owner, "DeathDefiedBuff", () => {
                ManaCost = this.VALUE_BY_LEVEL;
                OwnerMana = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
                If(OwnerMana, default, CO_LESS_THAN, ManaCost, default, () => {
                    SpellBuffRemoveCurrent(Owner);
                });
                Else(() => {
                    NegManaCost = Math(-1, MO_MULTIPLY, 0 + (ManaCost ?? 0));
                    IncPAR(Owner, 0 + (NegManaCost ?? 0));
                });
            });
            DamageToDeal = this.VALUE_BY_LEVEL;
            ForEachUnitInTargetArea(Owner, Owner, 550, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.25, 1, false, false, Attacker);
            });
        });
        this.AreaRadius = Math(0 + (this.AreaRadius ?? 0), MO_ADD, 4);
        ForEachUnitInTargetArea(Attacker, Owner, 0 + (this.AreaRadius ?? 0), "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            NextBuffVars.DamagePerTick = this.DamagePerTick;
            SpellBuffAdd(Attacker, Unit, "CassiopeiaMiasmaPoison", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Poison, 1, true, false, false, default);
            NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
            SpellBuffAdd(Attacker, Unit, "Slow", 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, true, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            ApplyDamage(Attacker, Target, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.15, 1, false, false, Attacker);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            ApplyDamage(Attacker, Target, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 1, false, false, Attacker);
        });
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            IfNotHasBuff(Owner, Owner, "CorkiMissileBarrageTimer", () => {
                Count = GetBuffCountFromCaster(Owner, Owner, "MissileBarrage");
                If(Count, default, CO_NOT_EQUAL, default, 7, () => {
                    SpellBuffAdd(Owner, Owner, "CorkiMissileBarrageTimer", 1, 1, 0 + (CharVars.ChargeCooldown ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        TickDuration = this.TickDuration;
        ExecutePeriodically(0, this.LastTimeExecuted, true, () => {
            DamagePerTick = this.VALUE_BY_LEVEL;
            APBonus = Math(0.2, MO_MULTIPLY, 0 + (this.SelfAP ?? 0));
            DamagePerTick = Math(0 + (DamagePerTick ?? 0), MO_ADD, 0 + (APBonus ?? 0));
            NextBuffVars.DamagePerTick = DamagePerTick;
            BombPos = GetUnitPosition(Owner);
            TeamOfOwner = GetTeamID(default);
            Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", BombPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, false, 0, default, true, Owner, default);
            SpellBuffAdd(Attacker, Other3, "DangerZone", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Owner, Owner, 575, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                NextBuffVars.MovementSpeedMod = this.MovementSpeedMod;
                NextBuffVars.AttackSpeedMod = this.AttackSpeedMod;
                SpellBuffAdd(Owner, Unit, "AbsoluteZeroSlow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        CharVars.LifeTime = LifeTime;
        IfHasBuff(Owner, Owner, "AbsoluteZeroBonusDamage2", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            BaseDamage = Math(0 + (Level ?? 0), MO_MULTIPLY, 250);
            SecondDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 250);
            TotalTime = Math(0.25, MO_MULTIPLY, 0 + (LifeTime ?? 0));
            SpellEffectCreate(default, default, "AbsoluteZero_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            ForEachUnitInTargetArea(Owner, Owner, 650, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (SecondDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 0 + (TotalTime ?? 0), 3, default, default, default, default);
            });
            SpellBuffRemove(Owner, "AbsoluteZeroBonusDamage", Owner, default);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            this.BurnDmg = this.VALUE_BY_LEVEL;
            ApplyDamage(Attacker, Owner, 0 + (this.BurnDmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.1, 0, false, false, Attacker);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            Pos = GetPointByUnitFacingOffset(Owner, 300, 0);
            NextBuffVars.DangerZone = this.DangerZone;
            IfHasBuff(Owner, Owner, "RumbleFlameThrowerBuff", () => {
                SpellCast(Owner, Nothing, Pos, Pos, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
            });
            Else(() => {
                SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, false, default);
            });
            this.Counter = Math(0 + (this.Counter ?? 0), MO_ADD, 1);
            If(this.Counter, default, CO_NOT_EQUAL, default, 6, () => {
                SpellBuffAdd(Attacker, Target, "RumbleFlameThrowerEffect", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            MissilePosition = this.MissilePosition;
            ForEachUnitInTargetArea(Attacker, MissilePosition, 205, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                SpellBuffAdd(Attacker, Unit, "RumbleCarpetBombSlow", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
                TeamOfOwner = GetTeamID(default);
                If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
                    SpellBuffAdd(Attacker, Unit, "RumbleCarpetBombBurnOrder", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, false, false, false, default);
                });
                Else(() => {
                    SpellBuffAdd(Attacker, Unit, "RumbleCarpetBombBurnDest", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, false, false, false, default);
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            this.BurnDmg = this.VALUE_BY_LEVEL;
            ApplyDamage(Attacker, Owner, 0 + (this.BurnDmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.1, 0, false, false, Attacker);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Attacker, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
                NextBuffVars.AttackSpeedMod = this.AttackSpeedMod;
                SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
                ApplyDamage(Attacker, Unit, 0 + (this.TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.114, 1, false, false, Attacker);
                SpellEffectCreate(asdf, default, "missFortune_makeItRain_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, default, default, default, default);
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            PercHealth = Math(0 + (MaxHealth ?? 0), MO_DIVIDE, 100);
            BurnDmg = Math(0 + (PercHealth ?? 0), MO_MULTIPLY, 1);
            ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (BurnDmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            });
        });
        ExecutePeriodically(5, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            this.punchdmg = this.VALUE_BY_LEVEL;
            SetBuffToolTipVar(1, 0 + (this.punchdmg ?? 0));
        });
        ExecutePeriodically(5, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            this.punchdmg = this.VALUE_BY_LEVEL;
            SetBuffToolTipVar(1, 0 + (this.punchdmg ?? 0));
        });
        Distance = DistanceBetweenObjects("Owner", "Attacker");
        OffsetAngle = GetOffsetAngle(Owner, Attacker);
        HalfDistance = Math(0 + (Distance ?? 0), MO_DIVIDE, 2);
        CenterPoint = GetPointByUnitFacingOffset(Owner, 0 + (HalfDistance ?? 0), 0 + (OffsetAngle ?? 0));
        TeamID = GetTeamID(default);
        If(Attacker, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Else(() => {
            If(Owner, default, CO_IS_DEAD, default, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                If(Distance, default, CO_GREATER_THAN, default, 900, () => {
                    SpellEffectCreate(DistanceBreak1, default, "karma_spiritBond_break_overhead.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
                    SpellEffectCreate(DistanceBreak2, default, "karma_spiritBond_break_overhead.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, true, default, default, false, false, default, default);
                    SpellBuffRemoveCurrent(Owner);
                });
            });
        });
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            ForEachUnitInTargetRectangle(Attacker, CenterPoint, 25, 0 + (HalfDistance ?? 0), "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes ", false, "KarmaLinkDmgCDOrder", (Unit) => {
                If(Unit, default, CO_NOT_EQUAL, Owner, default, () => {
                    If(Unit, default, CO_NOT_EQUAL, Attacker, default, () => {
                        SpellBuffAdd(Attacker, Unit, "KarmaLinkDmgCDOrder", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        If(this.MantraBoolean, default, CO_EQUAL, default, 1, () => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Owner, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                        Else(() => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Owner, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                    });
                });
            });
        });
        Else(() => {
            ForEachUnitInTargetRectangle(Attacker, CenterPoint, 25, 0 + (HalfDistance ?? 0), "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes ", false, "KarmaLinkDmgCDChaos", (Unit) => {
                If(Unit, default, CO_NOT_EQUAL, Owner, default, () => {
                    If(Unit, default, CO_NOT_EQUAL, Attacker, default, () => {
                        SpellBuffAdd(Owner, Unit, "KarmaLinkDmgCDChaos", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        If(this.MantraBoolean, default, CO_EQUAL, default, 1, () => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                        Else(() => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                    });
                });
            });
        });
        IsStealthed = GetStatus(Owner, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, true, () => {
            SpellEffectCreate(DistanceBreak2, default, "karma_spiritBond_break_overhead.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            If(default, 1, CO_EQUAL, default, 1, () => {
                Level = GetLevel(Owner);
                punchdmg = this.VALUE_BY_LEVEL;
                SetBuffToolTipVar(1, 0 + (punchdmg ?? 0));
                AP = GetStat(GetFlatMagicDamageMod, Owner);
                AP = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.3);
                SetBuffToolTipVar(2, 0 + (AP ?? 0));
                BaseCDR = 10;
                CDRMod = GetStat(GetPercentCooldownMod, Owner);
                CDRMod = Math(-1, MO_MULTIPLY, 0 + (CDRMod ?? 0));
                CDRMod = Math(1, MO_SUBTRACT, 0 + (CDRMod ?? 0));
                BaseCDR = Math(0 + (CDRMod ?? 0), MO_MULTIPLY, 0 + (BaseCDR ?? 0));
                SetSpellToolTipVar(0 + (BaseCDR ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            });
            HeatDecay = -5;
            BonusHeatDecay = -5;
            CurrentHeat = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
            IfHasBuff(Owner, Owner, "RumbleHeatingUp", () => {
                
            });
            Else(() => {
                IncPAR(Owner, 0 + (HeatDecay ?? 0));
                IfNotHasBuff(Owner, Owner, "RumbleHeatingUp2", () => {
                    IncPAR(Owner, 0 + (BonusHeatDecay ?? 0));
                });
            });
            IfHasBuff(Owner, Owner, "RumbleOverheat", () => {
                
            });
            Else(() => {
                If(CurrentHeat, default, CO_GREATER_THAN_OR_EQUAL, CharVars.DangerZone, default, () => {
                    If(CurrentHeat, default, CO_GREATER_THAN_OR_EQUAL, default, 100, () => {
                        SpellBuffAdd(Attacker, Owner, "RumbleOverheat", 1, 1, 5.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        Say(Owner, "Overheat!", default);
                    });
                    Else(() => {
                        SpellBuffAdd(Attacker, Owner, "RumbleDangerZone", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        SetPARColorOverride(Owner, 255, 255, 0, 255, 175, 175, 0, 255);
                        IfHasBuff(Owner, Owner, "RumbleOverheat", () => {
                            SetPARColorOverride(Owner, 255, 225, 0, 255, 175, 0, 0, 255);
                        });
                    });
                });
                Else(() => {
                    SetPARColorOverride(Owner, 255, 255, 255, 255, 175, 175, 0, 255);
                    SpellBuffRemove(Owner, "RumbleOverheat", Owner, default);
                    SpellBuffRemove(Owner, "RumbleDangerZone", Owner, default);
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            IncPAR(Owner, -10);
            IfNotHasBuff(Owner, Owner, "RumbleGrenadeCounter", () => {
                SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
            });
            Else(() => {
                SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
            });
            SpellBuffAdd(Attacker, Target, "RumbleHeatingUp", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            Level = GetLevel(Owner);
            this.punchdmg = this.VALUE_BY_LEVEL;
            SetBuffToolTipVar(1, 0 + (this.punchdmg ?? 0));
        });
        Distance = DistanceBetweenObjects("Owner", "Attacker");
        OffsetAngle = GetOffsetAngle(Attacker, Owner);
        HalfDistance = Math(0 + (Distance ?? 0), MO_DIVIDE, 2);
        CenterPoint = GetPointByUnitFacingOffset(Attacker, 0 + (HalfDistance ?? 0), 0 + (OffsetAngle ?? 0));
        TeamID = GetTeamID(default);
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Else(() => {
            If(Attacker, default, CO_IS_DEAD, default, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                Distance = DistanceBetweenObjects("Owner", "Attacker");
                If(Distance, default, CO_GREATER_THAN, default, 900, () => {
                    SpellEffectCreate(DistanceBreak1, default, "karma_spiritBond_break_overhead.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, true, default, default, false, false, default, default);
                    SpellEffectCreate(DistanceBreak2, default, "karma_spiritBond_break_overhead.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
                    SpellBuffRemoveCurrent(Owner);
                });
            });
        });
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            ForEachUnitInTargetRectangle(Attacker, CenterPoint, 25, 0 + (HalfDistance ?? 0), "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes ", false, "KarmaLinkDmgCDOrder", (Unit) => {
                If(Unit, default, CO_NOT_EQUAL, Owner, default, () => {
                    If(Unit, default, CO_NOT_EQUAL, Attacker, default, () => {
                        SpellBuffAdd(Attacker, Unit, "KarmaLinkDmgCDOrder", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        If(this.MantraBoolean, default, CO_EQUAL, default, 1, () => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                        Else(() => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                    });
                });
            });
        });
        Else(() => {
            ForEachUnitInTargetRectangle(Attacker, CenterPoint, 25, 0 + (HalfDistance ?? 0), "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes ", false, "KarmaLinkDmgCDChaos", (Unit) => {
                If(Unit, default, CO_NOT_EQUAL, Attacker, default, () => {
                    If(Unit, default, CO_NOT_EQUAL, Owner, default, () => {
                        SpellBuffAdd(Attacker, Unit, "KarmaLinkDmgCDChaos", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        If(this.MantraBoolean, default, CO_EQUAL, default, 1, () => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                        Else(() => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                    });
                });
            });
        });
        IsStealthed = GetStatus(Owner, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, true, () => {
            SpellEffectCreate(DistanceBreak2, default, "karma_spiritBond_break_overhead.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            CharVars.tooltipAmount = this.VALUE_BY_LEVEL;
            If(CharVars.tooltipAmount, default, CO_LESS_THAN, this.lastTooltip, default, () => {
                CharVars.lastTooltip = CharVars.tooltipAmount;
                BuffTooltip = Math(0 + (CharVars.tooltipAmount ?? 0), MO_ADD, 1);
                SetBuffToolTipVar(1, 0 + (BuffTooltip ?? 0));
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (this.FinalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
            });
        });
        If(Attacker, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ForEachUnitInTargetArea(Owner, Owner, 250, "AffectEnemies AffectFriends AffectNeutral AffectHeroes ", "OlafBerzerkerRage", true, (Unit) => {
            If(Unit, default, CO_EQUAL, Attacker, default, () => {
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Unit, GetSlotSpellCooldownTime);
                Cooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 6);
                SetSlotSpellCooldownTime(Unit, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (Cooldown ?? 0));
                TeamID = GetTeamID(default);
                OwnerPos = GetUnitPosition(Owner);
                SpellEffectCreate(a, default, "olaf_axe_refresh_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, true, default, default, false, false, default, default);
                If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                    SpellEffectCreate(a, default, "olaf_axe_trigger_02.troy", default, TeamID ?? TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, false, default, default);
                });
                Else(() => {
                    SpellEffectCreate(a, default, "olaf_axe_trigger_02.troy", default, TeamID ?? TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, false, default, default);
                });
                SpellBuffRemoveCurrent(Owner);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            Temp1 = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            PercentDamage = Math(0 + (Temp1 ?? 0), MO_MULTIPLY, 0 + (this.LifeLossPercent ?? 0));
            ApplyDamage(Attacker, Owner, 0 + (PercentDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0, default, false, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            OwnerMana = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
            If(OwnerMana, default, CO_LESS_THAN, default, 8, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                IncPAR(Owner, -8);
            });
            InitialDamage = Math(0 + (Level ?? 0), MO_MULTIPLY, 0.003);
            InitialDamage = Math(0 + (InitialDamage ?? 0), MO_ADD, 0.012);
            AbilityPowerMod = GetStat(GetFlatMagicDamageMod, Owner);
            AbilityPowerBonus = Math(0 + (AbilityPowerMod ?? 0), MO_MULTIPLY, _5e_05);
            LifeLossPercent = Math(0 + (AbilityPowerBonus ?? 0), MO_ADD, 0 + (InitialDamage ?? 0));
            BaseDamage = this.VALUE_BY_LEVEL;
            ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                Temp1 = GetPAROrHealth(Unit, GetMaxHealth, PAR_MANA);
                Temp1 = Math(0 + (Temp1 ?? 0), MO_MIN, 4500);
                PercentDamage = Math(0 + (Temp1 ?? 0), MO_MULTIPLY, 0 + (LifeLossPercent ?? 0));
                PercentDamage = Math(0 + (PercentDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
                ApplyDamage(Attacker, Unit, 0 + (PercentDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            NextBuffVars.LifeLossPercent = CharVars.LifeLossPercent;
            If(CharVars.LifeLossPercent, default, CO_EQUAL, CharVars.LastLifeLossPercent, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Unit) => {
                    SpellBuffAdd(Owner, Unit, "AuraofDespairDrainLife", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
                });
            });
            Else(() => {
                ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Unit) => {
                    SpellBuffAdd(Owner, Unit, "AuraofDespairDrainLife", 1, 1, 1.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, default, default, default, default);
                });
            });
            CharVars.LastLifeLossPercent = CharVars.LifeLossPercent;
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            tooltipAmount = this.VALUE_BY_LEVEL;
            If(tooltipAmount, default, CO_GREATER_THAN, this.lastTooltip, default, () => {
                this.lastTooltip = tooltipAmount;
                SetBuffToolTipVar(1, 0 + (tooltipAmount ?? 0));
            });
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            Level = GetLevel(Owner);
            CurrentHeal = this.VALUE_BY_LEVEL;
            ManaAmount = this.VALUE_BY_LEVEL;
            If(CurrentHeal, default, CO_GREATER_THAN, this.LastHeal, default, () => {
                this.LastHeal = CurrentHeal;
                SetBuffToolTipVar(1, 0 + (CurrentHeal ?? 0));
                SetBuffToolTipVar(2, 0 + (ManaAmount ?? 0));
            });
        });
        SpellBuffRemoveCurrent(Owner);
        Zombie = GetIsZombie(Owner);
        If(Zombie, default, CO_EQUAL, default, true, () => {
            StopChanneling(Attacker, ChannelingStopCondition_Cancel, ChannelingStopSource_Die);
            StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_Die);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            If(this.DOTCounter, default, CO_LESS_THAN, default, 1.5, () => {
                this.DOTCounter = Math(0 + (this.DOTCounter ?? 0), MO_ADD, 0.5);
                ApplyDamage(Attacker, Owner, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0, 1, false, false, Attacker);
            });
        });
        SetStatus(Owner, default, SetCanMove);
        If(LifeTime, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
            IfNotHasBuff(Owner, Owner, "EndKill", () => {
                IfNotHasBuff(Owner, Owner, "Stealth", () => {
                    SpellBuffAdd(Owner, Owner, "Stealth", 1, 1, 90, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                ForNClosestVisibleUnitsInTargetArea(Attacker, Owner, 300, "AffectEnemies AffectNeutral AffectBuildings AffectMinions AffectHeroes AffectTurrets ", 1, true, default, (Unit) => {
                    Caster = SetBuffCasterUnit();
                    this.ID = PushCharacterFade(Owner, 1, default, this.ID);
                    SpellBuffAdd(Attacker, Attacker, "JackInTheBoxDamageSensor", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, false, false, false, default);
                    SpellBuffAdd(Owner, Owner, "EndKill", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    SpellBuffRemove(Owner, "Stealth", Owner, 0);
                    ForEachUnitInTargetArea(Attacker, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                        BreakSpellShields(Unit);
                        ApplyAssistMarker(Caster, Unit, 10);
                        ApplyFear(Caster, Unit, 0 + (this.FearDuration ?? 0));
                    });
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            IfHasBuff(Owner, Owner, "Endkill", () => {
                unitFound = 0;
                ForNClosestVisibleUnitsInTargetArea(Attacker, Owner, 400, "AffectEnemies AffectHeroes ", 1, true, "JackInTheBoxHardLock", (Unit) => {
                    SpellCast(Owner, Unit, default, default, false, 0, SpellSlots, 1, true, false, false, true, false, default);
                    unitFound = 1;
                    SpellBuffRemove(Owner, "Stealth", Owner, 0);
                });
                If(unitFound, default, CO_EQUAL, default, 0, () => {
                    ForNClosestVisibleUnitsInTargetArea(Attacker, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, true, "JackInTheBoxSoftLock", (Unit) => {
                        IfHasBuff(Unit, Owner, "JackInTheBoxSoftLock", () => {
                            SpellCast(Owner, Unit, default, default, false, 0, SpellSlots, 1, true, false, false, true, false, default);
                            unitFound = 1;
                            SpellBuffRemove(Owner, "Stealth", Owner, 0);
                        });
                    });
                });
                If(unitFound, default, CO_EQUAL, default, 0, () => {
                    ForNClosestVisibleUnitsInTargetArea(Attacker, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, true, default, (Unit) => {
                        SpellCast(Owner, Unit, default, default, false, 0, SpellSlots, 1, true, false, false, true, false, default);
                        unitFound = 1;
                        SpellBuffRemove(Owner, "Stealth", Owner, 0);
                        If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                            SpellBuffAdd(Owner, Unit, "JackInTheBoxSoftLock", 20, 1, 5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, false, false, false, default);
                        });
                    });
                });
                If(unitFound, default, CO_EQUAL, default, 0, () => {
                    ForNClosestVisibleUnitsInTargetArea(Attacker, Owner, 400, "AffectEnemies AffectBuildings AffectTurrets ", 1, true, default, (Unit) => {
                        SpellCast(Owner, Unit, default, default, false, 0, SpellSlots, 1, true, false, false, true, false, default);
                        unitFound = 1;
                        SpellBuffRemove(Owner, "Stealth", Owner, 0);
                    });
                });
            });
        });
        If(this.BuffAdded, default, CO_EQUAL, default, false, () => {
            CurTime = GetTime();
            TimeSinceLastHit = Math(0 + (CurTime ?? 0), MO_SUBTRACT, 0 + (this.TimeLastHit ?? 0));
            If(TimeSinceLastHit, default, CO_GREATER_THAN, this.StealthDelay, default, () => {
                CurMana = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
                If(CurMana, default, CO_GREATER_THAN_OR_EQUAL, this.TotalCostPerTick, default, () => {
                    SetStatus(Owner, default, SetStealthed);
                    this.BuffAdded = true;
                });
                Else(() => {
                    SpellBuffRemoveCurrent(Owner);
                });
            });
            If(this.WillFade, default, CO_EQUAL, default, true, () => {
                this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
                this.WillFade = false;
                SpellEffectCreate(this.Particle, default, "ShadowWalk_buf.troy", default, default, default, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, default, default, default, default, default, default, default);
            });
        });
        Else(() => {
            tempStealthed = GetStatus(Owner, GetStealthed);
            If(tempStealthed, default, CO_EQUAL, default, false, () => {
                this.BuffAdded = false;
                this.TimeLastHit = GetTime();
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            If(this.BuffAdded, default, CO_EQUAL, default, true, () => {
                CurMana = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
                If(CurMana, default, CO_GREATER_THAN_OR_EQUAL, this.TotalCostPerTick, default, () => {
                    ManaCost = Math(0 + (this.TotalCostPerTick ?? 0), MO_MULTIPLY, -1);
                    IncPAR(Owner, 0 + (ManaCost ?? 0));
                });
                Else(() => {
                    SpellBuffRemoveCurrent(Owner);
                });
            });
        });
        TeamID = GetTeamID(default);
        If(this.Active, default, CO_EQUAL, default, true, () => {
            ForNClosestUnitsInTargetArea(Attacker, Owner, 135, "AffectEnemies AffectNeutral AffectHeroes ", 1, true, default, (Unit) => {
                BreakSpellShields(Unit);
                TeamID = GetTeamID(default);
                SpellEffectCreate(Particle, default, "caitlyn_yordleTrap_trigger_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, true, default, default, false, false, default, default);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                SpellBuffAdd(Attacker, Unit, "CaitlynYordleTrapDebuff", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, false, default);
                SpellBuffAdd(Attacker, Unit, "CaitlynYordleTrapSight", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                this.Sprung = true;
            });
            If(this.Sprung, default, CO_EQUAL, default, true, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        Else(() => {
            ExecutePeriodically(1, this.LastTimeExecuted2, false, () => {
                this.Active = true;
            });
        });
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () => {
            MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            MaxHealth = Math(0.2, MO_MULTIPLY, 0 + (MaxHealth ?? 0));
            ApplyDamage(Owner, Owner, 0 + (MaxHealth ?? 0), TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        });
        ExecutePeriodically(2, this.LastTimeExecuted, true, () => {
            YorickAP = GetStat(GetFlatMagicDamageMod, Owner);
            ADFromAP = Math(0 + (YorickAP ?? 0), MO_MULTIPLY, 0.2);
            HealthFromAP = Math(0 + (YorickAP ?? 0), MO_MULTIPLY, 0.5);
            SetBuffToolTipVar(1, 0 + (ADFromAP ?? 0));
            SetBuffToolTipVar(2, 0 + (HealthFromAP ?? 0));
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
            ForEachUnitInTargetArea(Attacker, Owner, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                SpellBuffAdd(Attacker, Unit, "YorickDecayedAuraSlow", 100, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            NearbyChampion = false;
            CheckBuilding = true;
            ForNClosestUnitsInTargetArea(Owner, Attacker, 850, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
                ApplyTaunt(Unit, Attacker, 1.5);
                NearbyChampion = true;
                CheckBuilding = false;
            });
            If(NearbyChampion, default, CO_EQUAL, default, false, () => {
                ForNClosestUnitsInTargetArea(Owner, Attacker, 750, "AffectEnemies AffectNeutral AffectMinions ", 1, true, default, (Unit) => {
                    ApplyTaunt(Unit, Attacker, 1.5);
                    CheckBuilding = false;
                });
            });
            If(CheckBuilding, default, CO_EQUAL, default, true, () => {
                ForNClosestUnitsInTargetArea(Owner, Attacker, 750, "AffectEnemies AffectTurrets ", 1, true, default, (Unit) => {
                    ApplyTaunt(Unit, Attacker, 1.5);
                });
            });
        });
        If(Attacker, default, CO_IS_DEAD, default, default, () => {
            ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Owner);
        });
        ExecutePeriodically(0.1, this.LastTimeExecuted, false, () => {
            Pos = this.Pos;
            ForEachUnitInTargetArea(Attacker, Pos, 75, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                IfHasBuff(Unit, Nothing, "YorickDeathGripExtra", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Attacker, Unit, "YorickDeathGripExtra", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Unit);
                    ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
                    SpellBuffAdd(Attacker, Unit, "YorickDeathGripTarget", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Snare, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            ForNClosestUnitsInTargetArea(Owner, Attacker, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, true, "YorickRavenousPrimaryTarget", (Unit) => {
                ApplyTaunt(Unit, Attacker, 1.5);
            });
            IsTaunted = GetStatus(Attacker, GetTaunted);
            If(IsTaunted, default, CO_EQUAL, default, false, () => {
                NearbyChampion = false;
                CheckBuilding = true;
                ForNClosestUnitsInTargetArea(Owner, Attacker, 1050, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
                    ApplyTaunt(Unit, Attacker, 1.5);
                    NearbyChampion = true;
                    CheckBuilding = false;
                });
                If(NearbyChampion, default, CO_EQUAL, default, false, () => {
                    ForNClosestUnitsInTargetArea(Owner, Attacker, 750, "AffectEnemies AffectMinions ", 1, true, default, (Unit) => {
                        ApplyTaunt(Unit, Attacker, 1.5);
                        CheckBuilding = false;
                    });
                });
                If(CheckBuilding, default, CO_EQUAL, default, true, () => {
                    ForNClosestUnitsInTargetArea(Owner, Attacker, 750, "AffectEnemies AffectBuildings ", 1, true, default, (Unit) => {
                        ApplyTaunt(Unit, Attacker, 1.5);
                    });
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            ForNClosestUnitsInTargetArea(Owner, Attacker, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, true, "YorickSpectralPrimaryTarget", (Unit) => {
                ApplyTaunt(Unit, Attacker, 1.5);
            });
            IsTaunted = GetStatus(Attacker, GetTaunted);
            If(IsTaunted, default, CO_EQUAL, default, false, () => {
                NearbyChampion = false;
                CheckBuilding = true;
                ForNClosestUnitsInTargetArea(Owner, Attacker, 1050, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
                    ApplyTaunt(Unit, Attacker, 1.5);
                    NearbyChampion = true;
                    CheckBuilding = false;
                });
                If(NearbyChampion, default, CO_EQUAL, default, false, () => {
                    ForNClosestUnitsInTargetArea(Owner, Attacker, 750, "AffectEnemies AffectMinions ", 1, true, default, (Unit) => {
                        ApplyTaunt(Unit, Attacker, 1.5);
                        CheckBuilding = false;
                    });
                });
                If(CheckBuilding, default, CO_EQUAL, default, true, () => {
                    ForNClosestUnitsInTargetArea(Owner, Attacker, 750, "AffectEnemies AffectBuildings ", 1, true, default, (Unit) => {
                        ApplyTaunt(Unit, Attacker, 1.5);
                    });
                });
            });
        });
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () => {
            MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            MaxHealth = Math(0.2, MO_MULTIPLY, 0 + (MaxHealth ?? 0));
            ApplyDamage(Owner, Owner, 0 + (MaxHealth ?? 0), TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        });
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () => {
            MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            MaxHealth = Math(0.2, MO_MULTIPLY, 0 + (MaxHealth ?? 0));
            ApplyDamage(Owner, Owner, 0 + (MaxHealth ?? 0), TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        });
        ExecutePeriodically(0.95, this.LastTimeExecuted, false, () => {
            MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            CurrentHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
            HealthDecay = Math(0.1, MO_MULTIPLY, 0 + (MaxHealth ?? 0));
            HealthDecay = Math(1, MO_ADD, 0 + (HealthDecay ?? 0));
            If(HealthDecay, default, CO_GREATER_THAN_OR_EQUAL, CurrentHealth, default, () => {
                IfHasBuff(Owner, Owner, "UndyingRage", () => {
                    
                });
                Else(() => {
                    SpellBuffRemoveCurrent(Owner);
                });
            });
            Else(() => {
                
            });
        });
        ExecutePeriodically(0.95, this.LastTimeExecuted, false, () => {
            MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            CurrentHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
            HealthDecay = Math(0.1, MO_MULTIPLY, 0 + (MaxHealth ?? 0));
            HealthDecay = Math(1, MO_ADD, 0 + (HealthDecay ?? 0));
            If(HealthDecay, default, CO_GREATER_THAN_OR_EQUAL, CurrentHealth, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                
            });
        });
        SetStatus(Owner, default, SetCanMove);
        ExecutePeriodically(0.95, this.LastTimeExecuted, false, () => {
            MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            CurrentHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
            HealthDecay = Math(0.1, MO_MULTIPLY, 0 + (MaxHealth ?? 0));
            HealthDecay = Math(1, MO_ADD, 0 + (HealthDecay ?? 0));
            If(HealthDecay, default, CO_GREATER_THAN_OR_EQUAL, CurrentHealth, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            If(Attacker, default, CO_IS_DEAD, default, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        this.APMod = GetStat(GetFlatMagicDamageMod, Owner);
        If(this.WillMove, default, CO_EQUAL, default, true, () => {
            this.WillMove = false;
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetAreaAddBuff(Owner, Owner, 850, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", Attacker, "BeaconAuraNoParticle", BUFF_RENEW_EXISTING, BUFF_Aura, 1, 1, 1.1, "NextBuffVars", 0, false, true);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetAreaAddBuff(Owner, Owner, 850, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", Attacker, "BeaconAuraNoParticleAP", BUFF_RENEW_EXISTING, BUFF_Aura, 1, 1, 1.1, "NextBuffVars", 0, false, true);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            If(Target, default, CO_EQUAL, Attacker, default, () => {
                IncPAR(Owner, 10);
            });
        });
        lifeStealMod = GetStat(GetPercentLifeStealMod, Owner);
        lifeStealMod = Math(0 + (lifeStealMod ?? 0), MO_SUBTRACT, 0 + (this.lifeStealMod ?? 0));
        this.lifeStealMod = Math(0 + (lifeStealMod ?? 0), MO_MULTIPLY, 0.15);
        spellVampMod = GetStat(GetPercentSpellVampMod, Owner);
        spellVampMod = Math(0 + (spellVampMod ?? 0), MO_SUBTRACT, 0 + (this.spellVampMod ?? 0));
        this.spellVampMod = Math(0 + (spellVampMod ?? 0), MO_MULTIPLY, 0.15);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.TickDamage ?? 0), TRUE_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
            If(healthPercent, default, CO_LESS_THAN_OR_EQUAL, default, 0.4, () => {
                maxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
                HealthToInc = Math(0 + (maxHealth ?? 0), MO_MULTIPLY, 0.01);
                IncHealth(Owner, 0 + (HealthToInc ?? 0), Owner);
            });
        });
        If(LifeTime, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
            SpellBuffAdd(Owner, Owner, "Stealth", 1, 1, 600, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Invisibility, 0, true, false, true, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            IncPAR(Owner, -1);
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(0.3, this.LastTimeExecuted, false, () => {
            IfNotHasBuff(Owner, Owner, "MejaisCheck", () => {
                SpellBuffRemoveCurrent(Owner);
            });
            Count = GetBuffCountFromAll(Owner, "MejaisStats");
            If(Count, default, CO_NOT_EQUAL, default, 20, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        If(this.ShieldHealth, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(3, this.LastTimeExecuted, true, () => {
            If(this.CooldownResevoir, default, CO_LESS_THAN, default, 2, () => {
                this.CooldownResevoir = Math(1, MO_ADD, 0 + (this.CooldownResevoir ?? 0));
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                    ApplyDamage(Attacker, Unit, 35, MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0, 0, false, false, Attacker);
                    SpellBuffAdd(Owner, Unit, "SunfireCapeAura", 1, 1, 1.05, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
                });
            });
            Else(() => {
                ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "SunfireCapeAura", false, (Unit) => {
                    SpellBuffAdd(Attacker, Unit, "SunfireCapeAura", 1, 1, 1.05, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(2, this.LastTimeExecuted, false, () => {
            If(AvatarVars.MasterySeigeCommander, default, CO_EQUAL, default, true, () => {
                ForEachUnitInTargetArea(Owner, Owner, 900, "AffectEnemies AffectTurrets ", default, true, (Unit) => {
                    SpellBuffAdd(Attacker, Unit, "MasterySiegeCommanderDebuff", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        If(LifeTime, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
            SpellBuffAdd(Owner, Owner, "Stealth", 1, 1, 600, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Invisibility, 0, true, false, true, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            IncPAR(Owner, -1);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            IfHasBuff(Owner, Owner, "TearOfTheGoddessTrack", () => {
                
            });
            Else(() => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        If(this.ShieldHealth, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        this.OwnerHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () => {
            Count = GetBuffCountFromAll(Owner, "LeviathanStats");
            If(Count, default, CO_NOT_EQUAL, default, 20, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            IfNotHasBuff(Owner, Owner, "LeviathanCheck", () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        ExecutePeriodically(0.4, this.LastTimeExecuted, false, () => {
            ForEachUnitInTargetAreaRandom(Owner, Owner, 800, "AffectEnemies AffectHeroes ", "Stealth", false, 1, (Unit) => {
                SpellBuffAdd(Attacker, Unit, "WrathDamage", 1, 1, 0.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () => {
            ForEachUnitInTargetArea(Attacker, this.TargetPos, 550, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
                SpellBuffAdd(Attacker, Unit, "OdinLightbringer", 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            CharVars.countHealthPotion = GetBuffCountFromAll(Owner, "RegenerationPotion");
            CharVars.countManaPotion = GetBuffCountFromAll(Owner, "FlaskOfCrystalWater");
            If(CharVars.countHealthPotion, default, CO_EQUAL, default, 0, () => {
                If(CharVars.countManaPotion, default, CO_EQUAL, default, 0, () => {
                    SpellBuffRemoveCurrent(Owner);
                });
            });
            If(CharVars.countHealthPotion, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                IncHealth(Owner, 10, Owner);
            });
            If(CharVars.countManaPotion, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                IncPAR(Owner, 5);
            });
        });
        this.MaxMana = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        If(LifeTime, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
            SpellBuffAdd(Owner, Owner, "Stealth", 1, 1, 600, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Invisibility, 0, true, false, true, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            IncPAR(Owner, -1);
        });
        ExecutePeriodically(3, this.LastTimeExecuted, true, () => {
            If(this.CooldownResevoir, default, CO_LESS_THAN, default, 2, () => {
                this.CooldownResevoir = Math(1, MO_ADD, 0 + (this.CooldownResevoir ?? 0));
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
            If(healthPercent, default, CO_LESS_THAN_OR_EQUAL, default, 1, () => {
                maxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
                HealthToInc = Math(0 + (maxHealth ?? 0), MO_MULTIPLY, 0.0035);
                IncHealth(Owner, 0 + (HealthToInc ?? 0), Owner);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
            missingHealthPercent = Math(1, MO_SUBTRACT, 0 + (healthPercent ?? 0));
            healthToRestore = Math(5, MO_MULTIPLY, 0 + (missingHealthPercent ?? 0));
            healthToRestore = Math(1, MO_MAX, 0 + (healthToRestore ?? 0));
            IncHealth(Owner, 0 + (healthToRestore ?? 0), Owner);
        });
        this.OwnerMana = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        ExecutePeriodically(5, this.LastTimeExecuted, false, () => {
            IfNotHasBuff(Owner, Owner, "RegenerationRune", () => {
                gameTime = GetGameTime();
                If(gameTime, default, CO_GREATER_THAN_OR_EQUAL, default, 210, () => {
                    SpellBuffAdd(Owner, Owner, "RegenerationRune", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        AP = GetStat(GetFlatMagicDamageMod, Owner);
        IfHasBuff(Owner, Owner, "MasteryBlastBuff", () => {
            AP = Math(0 + (AP ?? 0), MO_DIVIDE, 1.04);
        });
        AP = Math(0 + (AP ?? 0), MO_SUBTRACT, 0 + (this.abilityPower ?? 0));
        this.abilityPower = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.3);
        ExecutePeriodically(0.3, this.LastTimeExecuted, false, () => {
            Count = GetBuffCountFromAll(Owner, "MuramasaStats");
            If(Count, default, CO_NOT_EQUAL, default, 20, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
    }
    public void TargetExecute()
    {
        #region VarDecl
        Object? name = null;
        Object? name1 = null;
        Object? name2 = null;
        Object? name3 = null;
        Object? name4 = null;
        Object? name5 = null;
        float? BaseDamage = null;
        TeamId? teamID = null;
        float? healthPercent = null;
        float? missingHealthPercent = null;
        float? healthToRestore = null;
        Vector3? CastPosition = null;
        float? Duration = null;
        float? OwnerLevel = null;
        float? BonusHeal = null;
        float? TotalHeal = null;
        float? SecondaryHeal = null;
        Object? Level = null;
        Vector3? MinionPos = null;
        TeamId? OwnerID = null;
        Minion? Other3 = null;
        float? BonusHealth = null;
        float? BonusRegen = null;
        string? SkinName = null;
        Object? SlotName = null;
        Object? BonusDamage = null;
        float? TotalDamage = null;
        Object? DamagePercent = null;
        TeamId? TargetTeam = null;
        float? Health = null;
        Object? DamageAmount = null;
        TeamId? MyTeam = null;
        float? CurrentHealthPercent = null;
        float? MyMaxHealth = null;
        TeamId? TargetTeamID = null;
        float? HealthToDecreaseBy = null;
        TeamId? MyTeamID = null;
        float? HealthPercent = null;
        float? AttackerMaxHealth = null;
        float? DamageReturn = null;
        Champion? Attacker = null;
        Object? Dmg = null;
        float? AbilityPower = null;
        float? AbilityPowerBonus = null;
        float? TotalDmg = null;
        float? AttackDamage = null;
        long? CooldownTotal = null;
        float? TargetMaxHealth = null;
        float? Damage = null;
        float? Distance = null;
        float? StunDuration = null;
        Vector3? TargetPos = null;
        TeamId? TeamID = null;
        Object? buffDuration = null;
        Object? MineDamageAmount = null;
        Pet? Other1 = null;
        TeamId? CasterID = null;
        bool? IsStealthed = null;
        bool? CanSee = null;
        Vector3? LandPos = null;
        float? DelayTimer = null;
        float? TargetAP = null;
        float? BonusAD = null;
        float? PrimaryDamage = null;
        float? SecondaryDamage = null;
        float? DistanceToAdd = null;
        float? DistanceToKick = null;
        Vector3? TarPos = null;
        float? DamageToDeal = null;
        float? ShieldAbsorb = null;
        float? BonusAP = null;
        float? BonusAP80 = null;
        Vector3? OwnerPos = null;
        float? MoveSpeed = null;
        float? dashSpeed = null;
        Vector3? Pos = null;
        bool? canMove = null;
        Object? baseDamage = null;
        float? totalAD = null;
        float? bonusDamage = null;
        float? totalDamage = null;
        float? damagePerTick = null;
        int? WarwickSkinID = null;
        float? Temp1 = null;
        float? MaxHealth = null;
        float? PercentDamage = null;
        Object? MinDamage = null;
        Object? DamageScale = null;
        float? MaxHP = null;
        float? CurrentHP = null;
        float? MissingHP = null;
        float? ExeDmg = null;
        float? FinalDamage = null;
        Vector3? DamagePoint = null;
        float? AtkDmg = null;
        Object? ThrowDmg = null;
        float? CritHealth = null;
        Object? DmgPerLvl = null;
        long? GravityVar = null;
        long? SpeedVar = null;
        float? factor = null;
        Vector3? targetPos = null;
        float? TarHP = null;
        Object? hpThreshold = null;
        string? HitResult = null;
        long? SilenceDuration = null;
        float? SupremeDmg = null;
        float? scalingDamage = null;
        float? DealtDamage = null;
        Object? baseDamageBlock = null;
        float? DamageBlock = null;
        Object? BaseHealAmount = null;
        float? AP = null;
        float? APMod = null;
        float? HealAmount = null;
        float? APStat = null;
        float? MaxMultiplier = null;
        float? DazzleDamage = null;
        float? CastRange = null;
        long? FullDamageRange = null;
        float? VaryingRange = null;
        float? Multiplier = null;
        float? BonusAttackDamage = null;
        float? PhysicalBonus = null;
        float? AOEDmg = null;
        Object? BaseHealthBoost = null;
        float? AbilityPowerb = null;
        float? AbilityPowerMod = null;
        float? HealthPlusAbility = null;
        TeamId? ownerID = null;
        Champion? Caster = null;
        float? damageToDeal = null;
        long? TauntLength = null;
        Object? SpellCD1 = null;
        float? SpellCD1a = null;
        float? SpellCD1b = null;
        Object? SpellCD3 = null;
        float? SpellCD3a = null;
        float? SpellCD3b = null;
        Object? SpellCD4 = null;
        float? SpellCD4a = null;
        float? SpellCD4b = null;
        float? BaseAttackDamage = null;
        bool? DoOnce = null;
        Vector3? AttackerPos = null;
        int? FiddlesticksSkinID = null;
        Object? TargetNum = null;
        int? Count = null;
        double? SuppressionDuration = null;
        Object? DamagePerTick = null;
        float? HP = null;
        float? abilityPower = null;
        float? bonusAPDamage = null;
        float? MordAP = null;
        float? MordAP1 = null;
        float? initialDamageToDeal = null;
        float? tickDamage = null;
        float? HealingAmount = null;
        Object? HealingMod = null;
        Vector3? BouncePos = null;
        Object? ArmorAmount = null;
        float? TotalArmorAmount = null;
        float? PhysPreMod = null;
        float? PhysPostMod = null;
        float? APPreMod = null;
        float? APPostMod = null;
        TeamId? IreliaTeamID = null;
        float? DamageToDeal1 = null;
        float? DamageToDeal2 = null;
        TeamId? TeamOfOwner = null;
        long? StunLength = null;
        float? HalfDamage = null;
        float? HalfSnare = null;
        float? baseDmg = null;
        float? BonusDmgFromHP = null;
        Object? ShurikenDamage = null;
        Object? tauntDuration = null;
        float? TargetPercent = null;
        float? SelfPercent = null;
        float? DamageVar = null;
        float? MonkeyKingAP = null;
        float? LevelDamage = null;
        float? AoEDamage = null;
        float? UltDamage = null;
        float? PAR = null;
        float? ManaDamage = null;
        float? TAD = null;
        float? AkaliDamage = null;
        float? AkaliAP = null;
        float? UnitsHit = null;
        long? BaseHeal = null;
        Vector3? SpellTargetPos = null;
        float? AttackDmg = null;
        Object? Combo1DamageLeet = null;
        float? Combo1Damage = null;
        float? ComboDamageCrit = null;
        Object? HealthPerc = null;
        float? TargetHealth = null;
        float? HealthDamage = null;
        float? APVAL = null;
        float? APBONUS = null;
        TeamId? OwnerTeam = null;
        Vector3? RavenPosition = null;
        bool? IsTargetable = null;
        float? RedCardDamage = null;
        float? GoldCardDamage = null;
        Vector3? TargetPosition = null;
        int? MundoID = null;
        Object? DamageMod = null;
        Object? MaxDamage = null;
        float? tempDamage = null;
        float? DamageDealt = null;
        Object? HealthReturn = null;
        Object? percentOfAttack = null;
        float? APDamage = null;
        TeamId? TwitchTeamId = null;
        int? TwitchSkinID = null;
        float? TotalAD = null;
        float? MultipliedAD = null;
        float? Counter = null;
        Object? BBBaseDamage = null;
        float? bbBonusDamage = null;
        Object? KIDamage = null;
        Object? BBCounter = null;
        float? BBCount = null;
        float? inverseVar = null;
        float? percentVar = null;
        Object? DaggerBase = null;
        float? dlBonusDamage = null;
        Object? ProperDamage = null;
        int? BrandSkinID = null;
        float? SpellBaseDamage = null;
        int? VladimirSkinID = null;
        float? ProcDamage = null;
        TeamId? TeamofOwner = null;
        int? VladSkinID = null;
        float? finalDistance = null;
        bool? Temp = null;
        float? BonusRatio = null;
        float? CritChance = null;
        Object? ParBaseDamage = null;
        Object? cooldown = null;
        Object? cooldown1 = null;
        Object? cooldown2 = null;
        Object? cooldown3 = null;
        float? FinalAP = null;
        float? newCooldown = null;
        float? newCooldown1 = null;
        float? newCooldown2 = null;
        float? newCooldown3 = null;
        float? Time = null;
        TeamId? CasterID2 = null;
        long? AttackSpeedMod = null;
        float? RagePercent = null;
        bool? FuryBonus = null;
        float? CurrentFury = null;
        Object? BonusPercent = null;
        float? PostFury = null;
        float? FuryCost = null;
        Object? HSCounter = null;
        bool? temp = null;
        Object? BaseHealth = null;
        float? ShieldHealth = null;
        float? Multiplicant = null;
        float? WeaponDamage = null;
        Object? TakedownDamage = null;
        float? bonusPercent = null;
        Object? BaseDamageBlock = null;
        float? SelfAP = null;
        float? BonusShield = null;
        float? TotalShield = null;
        float? HalfShield = null;
        bool? Deployed = null;
        Vector3? CastPos = null;
        float? TempAbilityPower = null;
        float? HealthToRestore = null;
        float? HealingBonus = null;
        float? MinDistance = null;
        Object? Scaling = null;
        float? ScaledDamage = null;
        float? DtD = null;
        float? SpellPower = null;
        Object? BaseHealthToHeal = null;
        float? SpellPowerBonus = null;
        float? HealthToHeal = null;
        int? NocturneSkinID = null;
        Vector3? MyPosition = null;
        TeamId? TeamID2 = null;
        Vector3? LastPosition = null;
        Object? SlowPercent = null;
        long? OkayCheckDistance = null;
        float? CheckDistance = null;
        float? LeapDistance = null;
        float? DoubleCheckDistance = null;
        bool? Result = null;
        Object? Heal = null;
        float? MainDmg = null;
        double? scaling = null;
        int? GragasSkinID = null;
        Vector3? Center = null;
        Object? DefInc = null;
        long? ManaRefund = null;
        float? AD = null;
        Object? dmg = null;
        float? remainder = null;
        float? ticks = null;
        float? TickDamage = null;
        Vector3? MissilePosition = null;
        float? CritDamage = null;
        bool? DebuffFound = null;
        float? HPPoolMod = null;
        float? MissingHPPerc = null;
        float? BaseDmg = null;
        float? BaseAD = null;
        TeamId? TeamOfCaster = null;
        int? KMSkinID = null;
        string? Name = null;
        string? CheckName = null;
        Object? MaxHealthDamage = null;
        float? BonusMaxHealthDamage = null;
        float? TotalMaxHealthDamage = null;
        float? DamageToApply = null;
        TeamId? TeamId = null;
        Object? SilenceDur = null;
        TeamId? OwnerTeamID = null;
        float? totalAttackDamage = null;
        float? bonusAttackDamage = null;
        int? Count1 = null;
        float? BaseAtkDmg = null;
        float? ADAPBonus = null;
        Object? PerLevel = null;
        float? MultiDmg = null;
        float? FinalDmg = null;
        float? AttackBonus = null;
        Object? AbilityDamage = null;
        Vector3? LeftPos = null;
        Vector3? RightPos = null;
        Minion? Other2 = null;
        long? EatHydra = null;
        float? RicochetDamage = null;
        Object? Disable = null;
        float? par = null;
        Object? BaseHeatCost = null;
        float? Regen = null;
        float? KarmaAP = null;
        float? APToAdd = null;
        float? maxHealth = null;
        float? curHealth = null;
        float? missHealth = null;
        Object? BaseHealthRestore = null;
        Object? ManaToRestore = null;
        Object? HealthPerStack = null;
        Object? FeastBase = null;
        float? HalfAbilityPower = null;
        float? FeastHealth = null;
        float? SelfDamage = null;
        Object? tempManaCost = null;
        int? AnnieSkinID = null;
        float? totalDmg = null;
        float? bonusDmg = null;
        float? AttackDamageMod = null;
        double? BackstabBonus = null;
        TeamId? TeamIDTarget = null;
        float? TarMaxHealth = null;
        Object? RankScaling = null;
        Object? FlatScaling = null;
        bool? Debuff = null;
        bool? zombie = null;
        Object? HealLevel = null;
        float? CleaveDamage = null;
        float? DamageToApplySlash = null;
        float? SlashSpeed = null;
        float? ap = null;
        float? apMod = null;
        float? percentBurn = null;
        float? slotCheck = null;
        double? DebuffMod = null;
        float? CurrentAbilityPower = null;
        float? CurrentBonusDamage = null;
        float? CurrentBaseDamage = null;
        float? BonusDamageMod = null;
        float? BaseDamageMod = null;
        float? APBonus = null;
        #endregion
        SpellEffectCreate(part1, default, "executionersCalling_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(part1, default, "executionersCalling_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, "head", default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Target, Target, "Internal_50MS", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Target, "GrievousWound", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "Mourning", () => {
            SetSlotSpellCooldownTimeVer2(20, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name1, default, CO_EQUAL, default, "Mourning", () => {
            SetSlotSpellCooldownTimeVer2(20, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name2, default, CO_EQUAL, default, "Mourning", () => {
            SetSlotSpellCooldownTimeVer2(20, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name3, default, CO_EQUAL, default, "Mourning", () => {
            SetSlotSpellCooldownTimeVer2(20, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name4, default, CO_EQUAL, default, "Mourning", () => {
            SetSlotSpellCooldownTimeVer2(20, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name5, default, CO_EQUAL, default, "Mourning", () => {
            SetSlotSpellCooldownTimeVer2(20, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, default, default);
        ApplyDamage(Attacker, Target, 200, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
        IfHasBuff(Target, Owner, "Slow", () => {
            SpellBuffRemove(Target, "Slow", Attacker, default);
            DebugSay(Owner, "DISPELL SLOW !!", default);
        });
        Else(() => {
            NextBuffVars.MoveSpeedMod = -0.5;
            DebugSay(Owner, "TARGET SLOWED 50% !!", default);
            SpellBuffAdd(Attacker, Target, "Slow", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, default, default);
        });
        IfHasBuff(Target, Owner, "Stun", () => {
            SpellBuffRemove(Target, "Stun", Attacker, default);
            DebugSay(Owner, "DISPELL STUN !!", default);
        });
        Else(() => {
            NextBuffVars.ShieldHealth = 1000;
            DebugSay(Owner, "TWHAP!  Target STUNNED !!", default);
            SpellBuffAdd(Attacker, Target, "Stun", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, default, default);
        });
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0.7, 0, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        teamID = GetTeamID(default);
        SpellEffectCreate(ar, default, "VampHeal.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(arr, default, "Meditate_eff.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
        healthPercent = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
        missingHealthPercent = Math(1, MO_SUBTRACT, 0 + (healthPercent ?? 0));
        healthToRestore = Math(60, MO_MULTIPLY, 0 + (missingHealthPercent ?? 0));
        healthToRestore = Math(10, MO_MAX, 0 + (healthToRestore ?? 0));
        IncHealth(Target, 0 + (healthToRestore ?? 0), Target);
        SpellBuffAdd(Target, Target, default, 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellEffectCreate(ar, default, "summoner_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        NextBuffVars.MoveSpeedMod = 0.27;
        If(AvatarVars.offensiveMastery, default, CO_EQUAL, default, 1, () => {
            NextBuffVars.MoveSpeedMod = 0.35;
        });
        SpellBuffAdd(Owner, Target, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Haste, 0, true, false, false, default);
        If(AvatarVars.FortifySplashDamage, default, CO_EQUAL, default, 1, () => {
            NextBuffVars.Splash = true;
        });
        Else(() => {
            NextBuffVars.Splash = false;
        });
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            SpellBuffAdd(Attacker, Target, default, 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invulnerability, 0, true, default, default, default);
        });
        IfHasBuff(Owner, Owner, "SummonerTeleport", () => {
            CharVars.TeleportCancelled = true;
            SpellBuffRemove(Owner, "SummonerTeleport", Owner, 0);
        });
        CharVars.TeleportCancelled = false;
        IfHasBuff(Owner, Owner, "SummonerTeleport", () => {
            SpellBuffRemove(Owner, "SummonerTeleport", Owner, 0);
        });
        Else(() => {
            CastPosition = GetRandomPointInAreaUnit(Target, 100, 50);
            NextBuffVars.CastPosition = CastPosition;
            If(AvatarVars.utilityMastery, default, CO_EQUAL, default, 1, () => {
                Duration = 3.5;
            });
            Else(() => {
                Duration = 4;
            });
            NextBuffVars.BuffDuration = Duration;
            SpellBuffAdd(Owner, Owner, default, 1, 1, 0 + (Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                    SpellBuffAdd(Attacker, Target, "Teleport_Turret", 1, 1, 0 + (NextBuffVars.BuffDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
                });
                Else(() => {
                    SpellBuffAdd(Attacker, Target, "Teleport_Target", 1, 1, 0.1 + (NextBuffVars.BuffDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
                });
            });
            SpellBuffAdd(Target, Owner, "Teleport_DeathRemoval", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            IfHasBuff(Target, Nothing, "SharedWardBuff", () => {
                SpellBuffAdd(Attacker, Target, "Destealth", 1, 1, 1 + (NextBuffVars.BuffDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        OwnerLevel = GetLevel(Owner);
        BonusHeal = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 25);
        TotalHeal = Math(0 + (BonusHeal ?? 0), MO_ADD, 140);
        If(AvatarVars.defensiveMastery, default, CO_EQUAL, default, 1, () => {
            TotalHeal = Math(0 + (TotalHeal ?? 0), MO_MULTIPLY, 1.1);
        });
        SecondaryHeal = Math(0 + (TotalHeal ?? 0), MO_MULTIPLY, 0.5);
        IfHasBuff(Target, Target, "SummonerHealCheck", () => {
            If(Target, default, CO_EQUAL, Owner, default, () => {
                IncHealth(Target, 0 + (TotalHeal ?? 0), Owner);
            });
            Else(() => {
                SecondaryHeal = Math(0 + (SecondaryHeal ?? 0), MO_MULTIPLY, 0.5);
                IncHealth(Target, 0 + (SecondaryHeal ?? 0), Owner);
                ApplyAssistMarker(Attacker, Target, 10);
            });
        });
        Else(() => {
            If(Target, default, CO_EQUAL, Owner, default, () => {
                IncHealth(Target, 0 + (TotalHeal ?? 0), Owner);
            });
            Else(() => {
                IncHealth(Target, 0 + (SecondaryHeal ?? 0), Owner);
                ApplyAssistMarker(Attacker, Target, 10);
            });
        });
        IfNotHasBuff(Target, Target, "SummonerHealCheck", () => {
            SpellBuffAdd(Target, Target, "SummonerHealCheck", 1, 1, 25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        NextBuffVars.ScaleCoef = 0.04;
        NextBuffVars.ScaleCap = 0;
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        Level = GetLevel(Owner);
        NextBuffVars.APMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        If(AvatarVars.offensiveMastery, default, CO_EQUAL, default, 1, () => {
            NextBuffVars.APMod = Math(0 + (NextBuffVars.APMod ?? 0), MO_MULTIPLY, 1.1);
            NextBuffVars.AttackSpeedMod = Math(0 + (NextBuffVars.AttackSpeedMod ?? 0), MO_ADD, 0.05);
        });
        SpellBuffAdd(Attacker, Attacker, "SummonerBattleCry", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(BoostParticle, default, "Summoner_Boost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffClear(Target, "SummonerExhaust");
        SpellBuffClear(Target, "ExhaustSlow");
        SpellBuffClear(Target, "ExhaustDebuff");
        SpellBuffClear(Target, "SummonerDot");
        If(AvatarVars.defensiveMastery, default, CO_EQUAL, default, 1, () => {
            SpellBuffAdd(Attacker, Target, default, 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        Else(() => {
            SpellBuffAdd(Attacker, Target, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        MinionPos = GetPointByUnitFacingOffset(Owner, 200, 0);
        SpellEffectCreate(ba, default, "summoner_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, MinionPos, Target, default, default, false, default, default, false, default, default, default);
        OwnerID = GetTeamID(default);
        Duration = 15;
        If(AvatarVars.RallyDurationBonus, default, CO_EQUAL, default, 5, () => {
            Duration = Math(0 + (AvatarVars.RallyDurationBonus ?? 0), MO_ADD, 0 + (Duration ?? 0));
        });
        ElseIf(AvatarVars.RallyDurationBonus, default, CO_EQUAL, default, 10, () => {
            Duration = Math(0 + (AvatarVars.RallyDurationBonus ?? 0), MO_ADD, 0 + (Duration ?? 0));
        });
        Other3 = SpawnMinion("Beacon", "SummonerBeacon", "idle.lua", MinionPos, OwnerID ?? TEAM_ORDER, true, true, false, false, true, false, 0, true, false, Nothing, default);
        OwnerLevel = GetLevel(Owner);
        BonusHealth = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 25);
        BonusRegen = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 1.5);
        NextBuffVars.FinalHPRegen = Math(0 + (BonusRegen ?? 0), MO_ADD, 15);
        NextBuffVars.BonusHealth = BonusHealth;
        If(AvatarVars.RallyAPMod, default, CO_EQUAL, default, 70, () => {
            SpellBuffAdd(Owner, Other3, "BeaconAuraAP", 1, 1, 0 + (Duration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        Else(() => {
            SpellBuffAdd(Owner, Other3, "BeaconAura", 1, 1, 0 + (Duration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        SkinName = GetUnitSkinName(Target);
        If(SkinName, default, CO_EQUAL, default, "bear", () => {
            SlotName = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
            If(SlotName, default, CO_EQUAL, default, "SummonerPromote", () => {
                SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
            Else(() => {
                SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
        });
        ElseIf(SkinName, default, CO_EQUAL, default, "BantamTrap", () => {
            SlotName = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
            If(SlotName, default, CO_EQUAL, default, "SummonerPromote", () => {
                SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
            Else(() => {
                SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
        });
        ElseIf(SkinName, default, CO_EQUAL, default, "SummonerBeacon", () => {
            SlotName = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
            If(SlotName, default, CO_EQUAL, default, "SummonerPromote", () => {
                SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
            Else(() => {
                SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
        });
        ElseIf(SkinName, default, CO_EQUAL, default, "BantamTrap", () => {
            SlotName = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
            If(SlotName, default, CO_EQUAL, default, "SummonerPromote", () => {
                SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
            Else(() => {
                SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
        });
        ElseIf(SkinName, default, CO_EQUAL, default, "SightWard", () => {
            SlotName = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
            If(SlotName, default, CO_EQUAL, default, "SummonerPromote", () => {
                SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
            Else(() => {
                SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
        });
        ElseIf(SkinName, default, CO_EQUAL, default, "Blue_Minion_MechMelee", () => {
            SlotName = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
            If(SlotName, default, CO_EQUAL, default, "SummonerPromote", () => {
                SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
            Else(() => {
                SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
        });
        ElseIf(SkinName, default, CO_EQUAL, default, "Red_Minion_MechMelee", () => {
            SlotName = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
            If(SlotName, default, CO_EQUAL, default, "SummonerPromote", () => {
                SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
            Else(() => {
                SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
        });
        ElseIf(SkinName, default, CO_EQUAL, default, "Jester", () => {
            SlotName = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
            If(SlotName, default, CO_EQUAL, default, "SummonerPromote", () => {
                SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
            Else(() => {
                SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
        });
        ElseIf(SkinName, default, CO_EQUAL, default, "JackintheBox", () => {
            SlotName = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
            If(SlotName, default, CO_EQUAL, default, "SummonerPromote", () => {
                SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
            Else(() => {
                SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
        });
        ElseIf(SkinName, default, CO_EQUAL, default, "H28GEvolutionTurret", () => {
            SlotName = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
            If(SlotName, default, CO_EQUAL, default, "SummonerPromote", () => {
                SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
            Else(() => {
                SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 1);
            });
        });
        Else(() => {
            SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            If(AvatarVars.PromoteArmorBonus, default, CO_EQUAL, default, 20, () => {
                NextBuffVars.BonusArmor = AvatarVars.PromoteArmorBonus;
                SpellBuffAdd(Owner, Target, "TurretBait", 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
            OwnerLevel = GetLevel(Owner);
            BonusHealth = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 160);
            NextBuffVars.BonusHealth = BonusHealth;
            SpellBuffAdd(Attacker, Target, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            SpellBuffAdd(Attacker, Target, "Stun", 1, 1, 0.63, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            IncHealth(Target, 10000, Target);
        });
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        NextBuffVars.MoveSpeedMod = -0.4;
        SpellBuffAdd(Attacker, Target, "ExhaustSlow", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "SummonerExhaust", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        If(AvatarVars.offensiveMastery, default, CO_EQUAL, default, 1, () => {
            NextBuffVars.ArmorMod = -10;
            SpellBuffAdd(Attacker, Target, "ExhaustDebuff", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, true, default);
        });
        SpellEffectCreate(ar, default, "summoner_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, false, false, false, default, default);
        ReincarnateHero(Owner);
        If(AvatarVars.defensiveMastery, default, CO_EQUAL, default, 1, () => {
            NextBuffVars.MoveSpeedMod = 1.25;
            SpellBuffAdd(Owner, Target, "SummonerReviveSpeedBoost", 1, 1, 12, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
        });
        Level = GetLevel(Owner);
        NextBuffVars.HealthMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "ReviveMarker", 1, 1, 120, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        OwnerLevel = GetLevel(Owner);
        BonusDamage = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 25);
        TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 420);
        ApplyDamage(Attacker, Target, 0 + (TotalDamage ?? 0), TRUE_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Attacker);
        If(AvatarVars.defensiveMastery, default, CO_EQUAL, default, 1, () => {
            IncGold(Owner, 10);
        });
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        Level = GetLevel(Owner);
        NextBuffVars.Level = Level;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        SpellBuffAdd(Target, Target, "Internal_50MS", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "GrievousWound", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        ReincarnateHero(Owner);
        SpellBuffAdd(Attacker, Target, "OdinGrdObeliskSuppression", 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        DamagePercent = 0.15;
        TargetTeam = GetTeamID(default);
        If(TargetTeam, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
            DamagePercent = Math(0 + (DamagePercent ?? 0), MO_MULTIPLY, 0.5);
        });
        Health = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        DamageAmount = Math(0 + (Health ?? 0), MO_MULTIPLY, 0 + (DamagePercent ?? 0));
        MyTeam = GetTeamID(default);
        If(TargetTeam, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
            If(MyTeam, default, CO_EQUAL, default, TEAM_ORDER, () => {
                CurrentHealthPercent = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
                If(CurrentHealthPercent, default, CO_GREATER_THAN_OR_EQUAL, default, 0.96, () => {
                    ApplyDamage(Attacker, Target, 100000000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Attacker);
                });
                Else(() => {
                    IncHealth(Target, 0 + (DamageAmount ?? 0), Owner);
                });
            });
            Else(() => {
                ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Attacker);
            });
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Attacker);
        });
        MyMaxHealth = GetPAROrHealth(Target, GetMaxPAR, PAR_MANA);
        TargetTeamID = GetTeamID(default);
        SkinName = GetUnitSkinName(Owner);
        IfHasBuff(Attacker, Attacker, "OdinGolemBombBuff", () => {
            If(TargetTeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                HealthToDecreaseBy = Math(0.06, MO_MULTIPLY, 0 + (MyMaxHealth ?? 0));
            });
            Else(() => {
                HealthToDecreaseBy = Math(0.12, MO_MULTIPLY, 0 + (MyMaxHealth ?? 0));
            });
        });
        Else(() => {
            IfHasBuff(Owner, Owner, "OdinSuperMinion", () => {
                If(TargetTeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                    HealthToDecreaseBy = Math(0.015, MO_MULTIPLY, 0 + (MyMaxHealth ?? 0));
                });
                Else(() => {
                    HealthToDecreaseBy = Math(0.03, MO_MULTIPLY, 0 + (MyMaxHealth ?? 0));
                });
            });
            ElseIf(TargetTeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                HealthToDecreaseBy = Math(0.01, MO_MULTIPLY, 0 + (MyMaxHealth ?? 0));
            });
            Else(() => {
                HealthToDecreaseBy = Math(0.02, MO_MULTIPLY, 0 + (MyMaxHealth ?? 0));
            });
        });
        MyTeamID = GetTeamID(default);
        If(TargetTeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
            If(MyTeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                HealthToDecreaseBy = Math(0 + (HealthToDecreaseBy ?? 0), MO_MULTIPLY, 1);
            });
            Else(() => {
                HealthToDecreaseBy = Math(0 + (HealthToDecreaseBy ?? 0), MO_MULTIPLY, -1);
            });
        });
        Else(() => {
            HealthToDecreaseBy = Math(0 + (HealthToDecreaseBy ?? 0), MO_MULTIPLY, -1);
        });
        If(TargetTeamID, default, CO_NOT_EQUAL, MyTeamID, default, () => {
            IncPAR(Target, 0 + (HealthToDecreaseBy ?? 0));
        });
        If(TargetTeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
            HealthPercent = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
            AttackerMaxHealth = GetPAROrHealth(Attacker, GetMaxHealth, PAR_MANA);
            IfHasBuff(Attacker, Attacker, "OdinGolemBombBuff", () => {
                DamageReturn = Math(0.01, MO_MULTIPLY, 0 + (AttackerMaxHealth ?? 0));
                SpellEffectCreate(NoEstada, default, "Thornmail_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
            });
            Else(() => {
                IfHasBuff(Attacker, Nothing, "SummonerOdinPromote", () => {
                    DamageReturn = Math(0.075, MO_MULTIPLY, 0 + (AttackerMaxHealth ?? 0));
                });
                Else(() => {
                    DamageReturn = Math(0.25, MO_MULTIPLY, 0 + (AttackerMaxHealth ?? 0));
                    SpellEffectCreate(NoEstada, default, "Thornmail_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
                });
            });
            ApplyDamage(Target, Owner, 0 + (DamageReturn ?? 0), TRUE_DAMAGE, DAMAGESOURCE_RAW, 1, 0, 0, false, false, Target);
        });
        SpellBuffAdd(Owner, Target, "OdinMinionSpellAttack", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Jester", teamID ?? TEAM_UNKNOWN);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        Dmg = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Attacker);
        AbilityPowerBonus = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.35);
        TotalDmg = Math(0 + (Dmg ?? 0), MO_ADD, 0 + (AbilityPowerBonus ?? 0));
        If(Target, default, CO_IS_NOT_HERO, default, default, () => {
            TotalDmg = Math(0 + (TotalDmg ?? 0), MO_MULTIPLY, 0.5);
        });
        ApplyDamage(Attacker, Target, 0 + (TotalDmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, default, default, default, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Jester", teamID ?? TEAM_UNKNOWN);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        Dmg = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Attacker);
        AbilityPowerBonus = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.35);
        TotalDmg = Math(0 + (Dmg ?? 0), MO_ADD, 0 + (AbilityPowerBonus ?? 0));
        If(Target, default, CO_IS_NOT_HERO, default, default, () => {
            TotalDmg = Math(0 + (TotalDmg ?? 0), MO_MULTIPLY, 0.5);
        });
        ApplyDamage(Attacker, Target, 0 + (TotalDmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, default, default, default, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Jester", teamID ?? TEAM_UNKNOWN);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        Dmg = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Attacker);
        AbilityPowerBonus = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.35);
        TotalDmg = Math(0 + (Dmg ?? 0), MO_ADD, 0 + (AbilityPowerBonus ?? 0));
        If(Target, default, CO_IS_NOT_HERO, default, default, () => {
            TotalDmg = Math(0 + (TotalDmg ?? 0), MO_MULTIPLY, 0.5);
        });
        ApplyDamage(Attacker, Target, 0 + (TotalDmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 20, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Heal, 0, true, false, false, default);
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "OdinRegenerationPotion", () => {
            SetSlotSpellCooldownTimeVer2(60, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name1, default, CO_EQUAL, default, "OdinRegenerationPotion", () => {
            SetSlotSpellCooldownTimeVer2(60, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name2, default, CO_EQUAL, default, "OdinRegenerationPotion", () => {
            SetSlotSpellCooldownTimeVer2(60, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name3, default, CO_EQUAL, default, "OdinRegenerationPotion", () => {
            SetSlotSpellCooldownTimeVer2(60, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name4, default, CO_EQUAL, default, "OdinRegenerationPotion", () => {
            SetSlotSpellCooldownTimeVer2(60, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name5, default, CO_EQUAL, default, "OdinRegenerationPotion", () => {
            SetSlotSpellCooldownTimeVer2(60, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        IfHasBuff(Owner, Owner, "Stun", () => {
            
        });
        Else(() => {
            SpellCast(Owner, Target, default, default, false, 0, ExtraSlots, 1, false, false, false, false, false, default);
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            ApplyDamage(Attacker, Target, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Attacker);
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 1000, TRUE_DAMAGE, DAMAGESOURCE_RAW, 1, 0, 0, false, false, Attacker);
        });
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + (AttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Owner);
        CooldownTotal = 1;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownTotal ?? 0));
        TargetMaxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        Damage = Math(0 + (TargetMaxHealth ?? 0), MO_MULTIPLY, 0.0525);
        ApplyDamage(Attacker, Target, 0 + (Damage ?? 0), TRUE_DAMAGE, DAMAGESOURCE_RAW, 1, 0, 0, true, true, Attacker);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            ApplyDamage(Attacker, Target, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Attacker);
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 1000, TRUE_DAMAGE, DAMAGESOURCE_RAW, 1, 0, 0, false, false, Attacker);
        });
        Distance = DistanceBetweenObjectAndPoint(Target, CharVars.CastPoint);
        StunDuration = Math(0 + (Distance ?? 0), MO_MULTIPLY, 0.00125);
        StunDuration = Math(0 + (StunDuration ?? 0), MO_MAX, 1);
        StunDuration = Math(0 + (StunDuration ?? 0), MO_MIN, 3.5);
        ForEachUnitInTargetArea(Owner, Target, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            If(Unit, default, CO_EQUAL, Target, default, () => {
                ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
                SpellBuffAdd(Attacker, Unit, default, 1, 1, 0 + (StunDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Unit, "Chilled", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
            Else(() => {
                BreakSpellShields(Target);
                ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Attacker);
                NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Unit, "Chilled", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        DestroyMissile(MissileNetworkID);
        IfHasBuff(Target, Owner, "LeblancChaosOrb", () => {
            ApplySilence(Attacker, Target, 2);
            SpellBuffRemove(Target, "LeblancChaosOrb", Owner, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.3, 1, false, false, Attacker);
        });
        SpellBuffAdd(Attacker, Target, default, 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        IfHasBuff(Target, Owner, "LeblancChaosOrbM", () => {
            ApplySilence(Attacker, Target, 2);
            SpellBuffRemove(Target, "LeblancChaosOrbM", Owner, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.33, 1, false, false, Attacker);
            });
            ElseIf(Level, default, CO_EQUAL, default, 2, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.375, 1, false, false, Attacker);
            });
            Else(() => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.42, 1, false, false, Attacker);
            });
        });
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 1, false, false, Attacker);
        IfHasBuff(Target, Owner, "LeblancChaosOrbM", () => {
            ApplySilence(Attacker, Target, 2);
            SpellBuffRemove(Target, "LeblancChaosOrbM", Owner, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.33, 1, false, false, Attacker);
            });
            ElseIf(Level, default, CO_EQUAL, default, 2, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.375, 1, false, false, Attacker);
            });
            Else(() => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.42, 1, false, false, Attacker);
            });
        });
        SpellBuffAdd(Attacker, Target, default, 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        IfHasBuff(Target, Owner, "LeblancChaosOrb", () => {
            ApplySilence(Attacker, Target, 2);
            SpellBuffRemove(Target, "LeblancChaosOrb", Owner, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.3, 1, false, false, Attacker);
        });
        If(Level, default, CO_EQUAL, default, 1, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.66, 1, false, false, Attacker);
        });
        ElseIf(Level, default, CO_EQUAL, default, 2, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.75, 1, false, false, Attacker);
        });
        Else(() => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.84, 1, false, false, Attacker);
        });
        If(Level, default, CO_EQUAL, default, 1, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.BreakDamage = this.VALUE_BY_LEVEL;
            ApplyDamage(Attacker, Target, 0 + (NextBuffVars.BreakDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.55, 1, false, false, Attacker);
        });
        ElseIf(Level, default, CO_EQUAL, default, 2, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.BreakDamage = this.VALUE_BY_LEVEL;
            ApplyDamage(Attacker, Target, 0 + (NextBuffVars.BreakDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.625, 1, false, false, Attacker);
        });
        Else(() => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.BreakDamage = this.VALUE_BY_LEVEL;
            ApplyDamage(Attacker, Target, 0 + (NextBuffVars.BreakDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.7, 1, false, false, Attacker);
        });
        NextBuffVars.BreakStun = this.VALUE_BY_LEVEL;
        NextBuffVars.Broken = false;
        SpellBuffAdd(Attacker, Target, "LeblancSoulShackleM", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        DestroyMissile(MissileNetworkID);
        IfHasBuff(Target, Owner, "LeblancChaosOrbM", () => {
            ApplySilence(Attacker, Target, 2);
            SpellBuffRemove(Target, "LeblancChaosOrbM", Owner, 0);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.33, 1, false, false, Attacker);
            });
            ElseIf(Level, default, CO_EQUAL, default, 2, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.375, 1, false, false, Attacker);
            });
            Else(() => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.42, 1, false, false, Attacker);
            });
        });
        IfHasBuff(Target, Owner, "LeblancChaosOrb", () => {
            ApplySilence(Attacker, Target, 2);
            SpellBuffRemove(Target, "LeblancChaosOrb", Owner, 0);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.3, 1, false, false, Attacker);
        });
        NextBuffVars.BreakDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.BreakStun = this.VALUE_BY_LEVEL;
        NextBuffVars.Broken = false;
        SpellBuffAdd(Attacker, Target, "LeblancSoulShackle", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (NextBuffVars.BreakDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.5, 1, false, false, Attacker);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        DestroyMissile(MissileNetworkID);
        IfHasBuff(Target, Owner, "LeblancChaosOrbM", () => {
            ApplySilence(Attacker, Target, 2);
            SpellBuffRemove(Target, "LeblancChaosOrbM", Owner, 0);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.33, 1, false, false, Attacker);
            });
            ElseIf(Level, default, CO_EQUAL, default, 2, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.375, 1, false, false, Attacker);
            });
            Else(() => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.42, 1, false, false, Attacker);
            });
        });
        IfHasBuff(Target, Owner, "LeblancChaosOrb", () => {
            ApplySilence(Attacker, Target, 2);
            SpellBuffRemove(Target, "LeblancChaosOrb", Owner, 0);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.3, 1, false, false, Attacker);
        });
        TargetPos = GetUnitPosition(Target);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        TeamID = GetTeamID(default);
        buffDuration = this.VALUE_BY_LEVEL;
        SpellEffectCreate(Particle, default, "maoki_sapling_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Nothing, default, TargetPos, true, default, default, false, false, default, default);
        DamageAmount = this.VALUE_BY_LEVEL;
        MineDamageAmount = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Attacker, TargetPos, 240, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
        });
        Other1 = SpawnMinion("DoABarrelRoll", "MaokaiSproutling", "idle.lua", TargetPos, TeamID ?? TEAM_CASTER, false, false, false, false, false, false, 0, false, false, Attacker, default);
        SetStatus(Other1, default, SetCanMove);
        SetStatus(Other1, default, SetCanAttack);
        NextBuffVars.MineDamageAmount = MineDamageAmount;
        NextBuffVars.Sprung = false;
        SpellBuffAdd(Attacker, Other1, "MaokaiSaplingMine", 1, 1, 35, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.BaseDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.RootDuration = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Target, Owner, "MaokaiUnstableGrowth", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IfNotHasBuff(Target, Owner, "MaokaiTrunkLine", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            BaseDamage = this.VALUE_BY_LEVEL;
            NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
            CasterID = GetTeamID(default);
            IsStealthed = GetStatus(Target, GetStealthed);
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                SpellBuffAdd(Owner, Target, "MaokaiTrunkLine", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                BreakSpellShields(Target);
                SpellEffectCreate(asdf, default, "maoki_trunkSmash_unit_tar_02.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
                SpellEffectCreate(asdf, default, "maoki_trunkSmash_unit_tar.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
                ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
                SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, true, false, default);
            });
            Else(() => {
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    SpellBuffAdd(Owner, Target, "MaokaiTrunkLine", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Target);
                    SpellEffectCreate(asdf, default, "maoki_trunkSmash_unit_tar_02.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
                    SpellEffectCreate(asdf, default, "maoki_trunkSmash_unit_tar.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
                    ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
                    SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, true, false, default);
                });
                Else(() => {
                    CanSee = CanSeeTarget(Owner, Target);
                    If(CanSee, default, CO_EQUAL, default, true, () => {
                        SpellBuffAdd(Owner, Target, "MaokaiTrunkLine", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        BreakSpellShields(Target);
                        SpellEffectCreate(asdf, default, "maoki_trunkSmash_unit_tar_02.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
                        SpellEffectCreate(asdf, default, "maoki_trunkSmash_unit_tar.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
                        ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
                        SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, true, false, default);
                    });
                });
            });
        });
        NextBuffVars.Stats = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellEffectCreate(default, default, "insanitypotion_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(default, default, "insanitypotion_steam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "bottletip", default, Target, default, default, false, false, false, false, false, default, default);
        TargetPos = GetUnitPosition(Target);
        LandPos = GetPointByUnitFacingOffset(Owner, 420, 180);
        Distance = DistanceBetweenPoints(TargetPos, LandPos);
        DelayTimer = Math(0 + (Distance ?? 0), MO_DIVIDE, 1160);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (DelayTimer ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, default, default);
        TargetAP = GetStat(GetFlatMagicDamageMod, Target);
        TargetAP = Math(0 + (TargetAP ?? 0), MO_MULTIPLY, 0.8);
        TotalDamage = this.VALUE_BY_LEVEL;
        TotalDamage = Math(0 + (TargetAP ?? 0), MO_ADD, 0 + (TotalDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1.2, 1, false, false, Attacker);
        If(Target, default, CO_IS_NOT_DEAD, default, default, () => {
            SpellBuffAdd(Target, Owner, default, 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 1, false, false, Attacker);
        ApplyAssistMarker(Attacker, Target, 10);
        BaseDamage = this.VALUE_BY_LEVEL;
        BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusAD = Math(2, MO_MULTIPLY, 0 + (BonusAD ?? 0));
        PrimaryDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusAD ?? 0));
        SecondaryDamage = Math(0 + (PrimaryDamage ?? 0), MO_DIVIDE, 1);
        NextBuffVars.SecondaryDamage = SecondaryDamage;
        DistanceToAdd = DistanceBetweenObjects("Owner", "Target");
        DistanceToKick = Math(0 + (DistanceToAdd ?? 0), MO_ADD, 800);
        FaceDirection(Owner, Target);
        TarPos = GetPointByUnitFacingOffset(Owner, 0 + (DistanceToKick ?? 0), 0);
        NextBuffVars.TarPos = TarPos;
        SpellBuffAdd(Owner, Target, default, 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (PrimaryDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Attacker);
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            TeamID = GetTeamID(default);
            BaseDamage = this.VALUE_BY_LEVEL;
            BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
            BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.9);
            DamageToDeal = Math(0 + (BonusAD ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
            If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellBuffAdd(Attacker, Target, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
            Else(() => {
                SpellBuffAdd(Attacker, Target, "BlindMonkQOneChaos", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
            ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, true, Attacker);
            SpellEffectCreate(hit, default, "blindMonk_Q_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            DestroyMissile(MissileNetworkID);
            If(Target, default, CO_IS_NOT_DEAD, default, default, () => {
                SpellBuffAdd(Target, Owner, "BlindMonkQManager", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                TeamID = GetTeamID(default);
                BaseDamage = this.VALUE_BY_LEVEL;
                BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
                BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.9);
                DamageToDeal = Math(0 + (BonusAD ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
                If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                    SpellBuffAdd(Attacker, Target, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                });
                Else(() => {
                    SpellBuffAdd(Attacker, Target, "BlindMonkQOneChaos", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                });
                ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, true, Attacker);
                SpellEffectCreate(hit, default, "blindMonk_Q_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
                DestroyMissile(MissileNetworkID);
                If(Target, default, CO_IS_NOT_DEAD, default, default, () => {
                    SpellBuffAdd(Target, Owner, "BlindMonkQManager", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    TeamID = GetTeamID(default);
                    BaseDamage = this.VALUE_BY_LEVEL;
                    BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
                    BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.9);
                    DamageToDeal = Math(0 + (BonusAD ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
                    If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                        SpellBuffAdd(Attacker, Target, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                    });
                    Else(() => {
                        SpellBuffAdd(Attacker, Target, "BlindMonkQOneChaos", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                    });
                    ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, true, Attacker);
                    SpellEffectCreate(hit, default, "blindMonk_Q_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
                    DestroyMissile(MissileNetworkID);
                    If(Target, default, CO_IS_NOT_DEAD, default, default, () => {
                        SpellBuffAdd(Target, Owner, "BlindMonkQManager", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
        });
        ShieldAbsorb = this.VALUE_BY_LEVEL;
        BonusAP = GetStat(GetFlatMagicDamageMod, Owner);
        BonusAP80 = Math(0 + (BonusAP ?? 0), MO_MULTIPLY, 0.8);
        ShieldAbsorb = Math(0 + (ShieldAbsorb ?? 0), MO_ADD, 0 + (BonusAP80 ?? 0));
        NextBuffVars.ShieldAbsorb = ShieldAbsorb;
        If(Target, default, CO_NOT_EQUAL, Attacker, default, () => {
            OwnerPos = GetUnitPosition(Owner);
            SpellEffectCreate(p3, default, "blindMonk_W_cas_01.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, false, default, default);
            TargetPos = GetUnitPosition(Target);
            MoveSpeed = GetStat(GetMovementSpeed, Owner);
            dashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 1350);
            Distance = DistanceBetweenObjects("Owner", "Target");
            NextBuffVars.TargetPos = TargetPos;
            NextBuffVars.Distance = Distance;
            NextBuffVars.dashSpeed = dashSpeed;
            SpellBuffAdd(Target, Owner, "BlindMonkWOneDash", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0.25, true, false, true, default);
            SpellBuffAdd(Owner, Owner, "BlindMonkWManager", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            IfHasBuff(Target, Nothing, "SharedWardBuff", () => {
                SpellBuffAdd(Attacker, Target, "Destealth", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "BlindMonkWOneShield", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "BlindMonkWManager", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.PercentReduction = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "Suppression", 100, 1, 1.8, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Suppression, 0, true, false, false, default);
        Pos = GetRandomPointInAreaUnit(Target, 150, 150);
        TeleportToPosition(Owner, Pos);
        FaceDirection(Attacker, Target);
        canMove = GetStatus(Target, GetCanMove);
        If(canMove, default, CO_EQUAL, default, false, () => {
            NextBuffVars.LifestealBonus = 0.3;
            NextBuffVars.hitsRemaining = 5;
            SpellBuffAdd(Attacker, Attacker, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            baseDamage = this.VALUE_BY_LEVEL;
            totalAD = GetTotalAttackDamage(Owner);
            bonusDamage = Math(1.667, MO_MULTIPLY, 0 + (totalAD ?? 0));
            totalDamage = Math(0 + (baseDamage ?? 0), MO_ADD, 0 + (bonusDamage ?? 0));
            damagePerTick = Math(0 + (totalDamage ?? 0), MO_DIVIDE, 0 + (NextBuffVars.hitsRemaining ?? 0));
            NextBuffVars.damagePerTick = damagePerTick;
            SpellBuffAdd(Owner, Target, "InfiniteDuressChannel", 1, 1, 1.8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "InfiniteDuressSound", 1, 1, 1.8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellCast(Attacker, Target, Target, Target, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, false, default);
        });
        Else(() => {
            IssueOrder(Owner, AI_ATTACKTO, default, Target);
        });
        WarwickSkinID = GetSkinID(Attacker);
        If(WarwickSkinID, default, CO_EQUAL, default, 6, () => {
            SpellEffectCreate(a, default, "HungeringStrikeFire_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(a, default, "HungeringStrike_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        NextBuffVars.DrainPercent = 0.8;
        NextBuffVars.DrainedBool = false;
        SpellBuffAdd(Attacker, Attacker, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(Target, default, CO_IS_TYPE_HERO, default, true, () => {
            Temp1 = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
            MaxHealth = this.VALUE_BY_LEVEL;
            PercentDamage = Math(0 + (Temp1 ?? 0), MO_MULTIPLY, 0 + (MaxHealth ?? 0));
            MinDamage = this.VALUE_BY_LEVEL;
            DamageToDeal = Math(0 + (MinDamage ?? 0), MO_MAX, 0 + (PercentDamage ?? 0));
            ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 1, 1, false, false, Attacker);
            SpellEffectCreate(ar, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 1, 1, false, false, Attacker);
            SpellEffectCreate(ar, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, false, false, false, false, default, default);
        });
        NextBuffVars.AttackSpeedVar = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedOther = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Owner, Unit, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, default, default, default);
        });
        DamageScale = this.VALUE_BY_LEVEL;
        Damage = this.VALUE_BY_LEVEL;
        MaxHP = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        CurrentHP = GetPAROrHealth(Target, GetHealth, PAR_MANA);
        SpellEffectCreate(this.Particle, default, "garen_damacianJustice_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "C_BUFFBONE_GLB_CHEST_LOC", default, Attacker, default, default, false, default, default, default, default, default, default);
        MissingHP = Math(0 + (MaxHP ?? 0), MO_SUBTRACT, 0 + (CurrentHP ?? 0));
        ExeDmg = Math(0 + (MissingHP ?? 0), MO_DIVIDE, 0 + (DamageScale ?? 0));
        FinalDamage = Math(0 + (ExeDmg ?? 0), MO_ADD, 0 + (Damage ?? 0));
        BreakSpellShields(Target);
        ApplyDamage(Attacker, Target, 0 + (FinalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        SpellEffectCreate(this.Particle2, default, "garen_damacianJustice_tar_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Target, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle3, default, "garen_damacianJustice_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Target, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        DamagePoint = GetPointByUnitFacingOffset(Owner, 1650, 0);
        AtkDmg = GetTotalAttackDamage(Owner);
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        ThrowDmg = this.VALUE_BY_LEVEL;
        BonusDamage = Math(0 + (AtkDmg ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
        BonusDamage = Math(0 + (BonusDamage ?? 0), MO_MULTIPLY, 1.4);
        FinalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (ThrowDmg ?? 0));
        MaxHP = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        CurrentHP = GetPAROrHealth(Target, GetHealth, PAR_MANA);
        CritHealth = Math(0 + (MaxHP ?? 0), MO_MULTIPLY, 0.15);
        If(CurrentHP, default, CO_LESS_THAN_OR_EQUAL, CritHealth, default, () => {
            IfHasBuff(Owner, Owner, "Pantheon_CertainDeath", () => {
                FinalDamage = Math(1.5, MO_MULTIPLY, 0 + (FinalDamage ?? 0));
            });
        });
        ApplyDamage(Attacker, Target, 0 + (FinalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, true, Attacker);
        TotalDamage = GetTotalAttackDamage(Owner);
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        DmgPerLvl = this.VALUE_BY_LEVEL;
        BonusDamage = Math(0 + (TotalDamage ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
        BonusDamage = Math(0 + (BonusDamage ?? 0), MO_MULTIPLY, 0.6);
        FinalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (DmgPerLvl ?? 0));
        IsStealthed = GetStatus(Target, GetStealthed);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            FinalDamage = Math(2, MO_MULTIPLY, 0 + (FinalDamage ?? 0));
        });
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            ApplyDamage(Attacker, Target, 0 + (FinalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        ElseIf(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            ApplyDamage(Attacker, Target, 0 + (FinalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        Else(() => {
            CanSee = CanSeeTarget(Owner, Target);
            If(CanSee, default, CO_EQUAL, default, true, () => {
                ApplyDamage(Attacker, Target, 0 + (FinalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
            });
        });
        IfHasBuff(Owner, Owner, "GarenBladestorm", () => {
            SpellBuffRemove(Owner, "GarenBladestorm", Owner, 0);
        });
        SpellBuffAdd(Owner, Owner, default, 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Owner, Target, default, default, false, 1, ExtraSlots, 0 + (Level ?? 0), false, false, false, false, false, default);
        NextBuffVars.DamageLvl = this.VALUE_BY_LEVEL;
        NextBuffVars.stunLength = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Target, Owner, default, 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Distance = DistanceBetweenObjects("Attacker", "Target");
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 600, () => {
            GravityVar = 60;
            SpeedVar = 1150;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 500, () => {
            GravityVar = 70;
            SpeedVar = 1075;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 375, () => {
            GravityVar = 80;
            SpeedVar = 1000;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 275, () => {
            GravityVar = 100;
            SpeedVar = 950;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 175, () => {
            GravityVar = 120;
            SpeedVar = 900;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 75, () => {
            GravityVar = 150;
            SpeedVar = 875;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            GravityVar = 300;
            SpeedVar = 850;
        });
        factor = Math(0 + (Distance ?? 0), MO_DIVIDE, 600);
        factor = Math(0 + (factor ?? 0), MO_MAX, 0.75);
        factor = Math(0 + (factor ?? 0), MO_MIN, 1.5);
        PlayAnimation("Spell2", 0 + (factor ?? 0), Attacker, false, false, true);
        targetPos = GetUnitPosition(Target);
        Move(Attacker, targetPos, 0 + (SpeedVar ?? 0), 0 + (GravityVar ?? 0), 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                IfHasBuff(Owner, Owner, "Pantheon_CertainDeath", () => {
                    If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                            TarHP = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                            hpThreshold = this.VALUE_BY_LEVEL;
                            If(TarHP, default, CO_LESS_THAN_OR_EQUAL, hpThreshold, default, () => {
                                HitResult = HIT_Critical;
                            });
                        });
                    });
                });
            });
        });
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 1, 1, false, false, Attacker);
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                IfHasBuff(Owner, Owner, "Pantheon_CertainDeath", () => {
                    If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                            TarHP = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                            hpThreshold = this.VALUE_BY_LEVEL;
                            If(TarHP, default, CO_LESS_THAN_OR_EQUAL, hpThreshold, default, () => {
                                HitResult = HIT_Critical;
                            });
                        });
                    });
                });
            });
        });
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 1, 1, false, false, Attacker);
        SealSpellSlot(2, SpellSlots, Attacker, true, SPELLBOOK_CHAMPION);
        SetSlotSpellCooldownTimeVer2(0, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SilenceDuration = this.VALUE_BY_LEVEL;
        BonusDamage = this.VALUE_BY_LEVEL;
        SupremeDmg = GetTotalAttackDamage(Owner);
        scalingDamage = Math(0 + (SupremeDmg ?? 0), MO_MULTIPLY, 1.4);
        DealtDamage = Math(0 + (scalingDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        HitResult = false;
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            BreakSpellShields(Target);
            ApplyDamage(Attacker, Target, 0 + (DealtDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                ApplySilence(Attacker, Target, 0 + (SilenceDuration ?? 0));
            });
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (DealtDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        });
        If(Attacker, default, CO_NOT_EQUAL, Target, default, () => {
            baseDamageBlock = this.VALUE_BY_LEVEL;
            AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
            BonusHealth = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.35);
            DamageBlock = Math(0 + (baseDamageBlock ?? 0), MO_ADD, 0 + (BonusHealth ?? 0));
            NextBuffVars.DamageBlock = DamageBlock;
            SpellBuffAdd(Attacker, Target, "LuxPrismaticWaveShield", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        BaseHealAmount = this.VALUE_BY_LEVEL;
        AP = GetStat(GetFlatMagicDamageMod, Owner);
        APMod = Math(0.6, MO_MULTIPLY, 0 + (AP ?? 0));
        HealAmount = Math(0 + (BaseHealAmount ?? 0), MO_ADD, 0 + (APMod ?? 0));
        If(Target, default, CO_EQUAL, Owner, default, () => {
            HealAmount = Math(0 + (HealAmount ?? 0), MO_MULTIPLY, 1.4);
            IncHealth(Owner, 0 + (HealAmount ?? 0), Owner);
        });
        Else(() => {
            IncHealth(Owner, 0 + (HealAmount ?? 0), Owner);
            Temp1 = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
            If(Temp1, default, CO_LESS_THAN, default, 1, () => {
                IncHealth(Target, 0 + (HealAmount ?? 0), Owner);
                ApplyAssistMarker(Attacker, Target, 10);
            });
            SpellEffectCreate(self, default, "Global_Heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        OwnerPos = GetUnitPosition(Owner);
        TargetPos = GetUnitPosition(Target);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        APStat = GetStat(GetFlatMagicDamageMod, Owner);
        APStat = Math(0.4, MO_MULTIPLY, 0 + (APStat ?? 0));
        BaseDamage = this.VALUE_BY_LEVEL;
        MaxMultiplier = 2;
        MaxMultiplier = Math(0 + (MaxMultiplier ?? 0), MO_SUBTRACT, 1);
        DazzleDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (APStat ?? 0));
        CastRange = GetCastRange(Owner, 2, SpellSlots);
        FullDamageRange = 250;
        VaryingRange = Math(0 + (CastRange ?? 0), MO_SUBTRACT, 0 + (FullDamageRange ?? 0));
        If(Distance, default, CO_LESS_THAN, CastRange, default, () => {
            Distance = Math(0 + (Distance ?? 0), MO_SUBTRACT, 0 + (FullDamageRange ?? 0));
            Multiplier = Math(0 + (Distance ?? 0), MO_DIVIDE, 0 + (VaryingRange ?? 0));
            Multiplier = Math(1, MO_SUBTRACT, 0 + (Multiplier ?? 0));
            If(Multiplier, default, CO_GREATER_THAN, default, 1, () => {
                Multiplier = 1;
            });
            Multiplier = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (MaxMultiplier ?? 0));
            Multiplier = Math(0 + (Multiplier ?? 0), MO_ADD, 1);
            DazzleDamage = Math(0 + (DazzleDamage ?? 0), MO_MULTIPLY, 0 + (Multiplier ?? 0));
        });
        ApplyStun(Attacker, Target, 1.5);
        ApplyDamage(Attacker, Target, 0 + (DazzleDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Attacker);
        BreakSpellShields(Target);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
        NextBuffVars.ArmorReduction = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "Shatter", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, false, false, default);
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, default, default, default, default);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
        ApplyStun(Attacker, Target, 1);
        BreakSpellShields(Target);
        IfHasBuff(Owner, Owner, "EmpowerTwo", () => {
            BonusAttackDamage = GetStat(GetFlatPhysicalDamageMod, Owner);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            BonusDamage = this.VALUE_BY_LEVEL;
            PhysicalBonus = Math(0 + (BonusAttackDamage ?? 0), MO_MULTIPLY, 0.4);
            AOEDmg = Math(0 + (PhysicalBonus ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
            ApplyDamage(Attacker, Target, 0 + (AOEDmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 0.7, false, false, Attacker);
            SpellBuffRemove(Owner, "EmpowerTwo", Owner, 0);
        });
        AttackDamage = GetTotalAttackDamage(Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BonusDamage = this.VALUE_BY_LEVEL;
        DamageToDeal = Math(0 + (AttackDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.7, 0, false, false, Attacker);
        IfHasBuff(Owner, Owner, "RelentlessAssaultMarker", () => {
            SpellBuffRemoveStacks(Owner, Owner, "RelentlessAssaultMarker", 0);
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
                IssueOrder(Owner, AI_ATTACKTO, default, Target);
            });
        });
        SpellBuffAdd(Target, Attacker, default, 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Distance = DistanceBetweenObjects("Attacker", "Target");
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 600, () => {
            GravityVar = 100;
            SpeedVar = 1450;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 500, () => {
            GravityVar = 110;
            SpeedVar = 1300;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 400, () => {
            GravityVar = 120;
            SpeedVar = 1150;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 300, () => {
            GravityVar = 130;
            SpeedVar = 1100;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 200, () => {
            GravityVar = 150;
            SpeedVar = 1000;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 100, () => {
            GravityVar = 300;
            SpeedVar = 900;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            GravityVar = 1000;
            SpeedVar = 900;
        });
        targetPos = GetUnitPosition(Target);
        Move(Attacker, targetPos, 0 + (SpeedVar ?? 0), 0 + (GravityVar ?? 0), 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        factor = Math(0 + (Distance ?? 0), MO_DIVIDE, 700);
        factor = Math(0 + (factor ?? 0), MO_MAX, 0.25);
        factor = Math(0 + (factor ?? 0), MO_MIN, 0.9);
        PlayAnimation("Spell2", 0 + (factor ?? 0), Attacker, false, false, false);
        If(Owner, default, CO_SAME_TEAM, Target, default, () => {
            IfHasBuff(Target, Nothing, "SharedWardBuff", () => {
                SpellBuffAdd(Attacker, Target, "Destealth", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        ApplyAssistMarker(Attacker, Target, 10);
        ApplyFear(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0));
        If(CharVars.TumbleIsActive, default, CO_EQUAL, default, 1, () => {
            SpellEffectCreate(ar, default, "Ahri_PassiveHeal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(asdf, default, "Ahri_passive_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, false, false, false, false, default, default);
            SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusher2", 1, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_CONTINUE, BUFF_Internal, 0, true, false, false, default);
            NextBuffVars.DrainPercent = 0.35;
            NextBuffVars.DrainedBool = false;
            SpellBuffAdd(Attacker, Attacker, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 0, false, false, Attacker);
            IfHasBuff(Attacker, Attacker, "AhriSoulCrusher", () => {
                SpellBuffRemoveStacks(Attacker, Attacker, "AhriSoulCrusher", 1);
            });
        });
        Else(() => {
            IfHasBuff(Attacker, Attacker, "AhriSoulCrusher", () => {
                
            });
            Else(() => {
                SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusherCounter", 9, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
            });
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 0, false, false, Attacker);
        });
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        BaseHealthBoost = this.VALUE_BY_LEVEL;
        AbilityPowerb = Math(0 + (AbilityPower ?? 0), MO_ADD, 0.1);
        AbilityPowerMod = Math(0 + (AbilityPowerb ?? 0), MO_MULTIPLY, 2);
        HealthPlusAbility = Math(0 + (AbilityPowerMod ?? 0), MO_ADD, 0 + (BaseHealthBoost ?? 0));
        NextBuffVars.HealthPlusAbility = HealthPlusAbility;
        NextBuffVars.WillRemove = false;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.DamageLevel = this.VALUE_BY_LEVEL;
        IfHasBuff(Target, Owner, "TimeBomb", () => {
            SpellEffectCreate(par, default, "TimeBombExplo.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            ForEachUnitInTargetArea(Attacker, Target, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (NextBuffVars.DamageLevel ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.9, 1, false, false, Attacker);
            });
        });
        Else(() => {
            ownerID = GetTeamID(default);
            If(ownerID, default, CO_EQUAL, default, 100, () => {
                Caster = GetChampionBySkinName("Zilean", TEAM_CHAOS);
            });
            Else(() => {
                Caster = GetChampionBySkinName("Zilean", TEAM_ORDER);
            });
            IfHasBuff(Target, Caster, "TimeBomb", () => {
                SpellEffectCreate(par, default, "TimeBombExplo.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                damageToDeal = this.VALUE_BY_LEVEL;
                ForEachUnitInTargetArea(Caster, Target, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                    ApplyDamage(Caster, Unit, 0 + (damageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.9, 0, false, false, Caster);
                });
            });
        });
        If(Target, default, CO_IS_NOT_DEAD, default, default, () => {
            SpellBuffAdd(Owner, Target, default, 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 1, true, false, false, default);
        });
        NextBuffVars.OrbofDeceptionIsActive = CharVars.OrbofDeceptionIsActive;
        SpellBuffAdd(Owner, Target, "AhriOrbDamage", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(Target, default, CO_SAME_TEAM, Owner, default, () => {
            NextBuffVars.SpeedMod = 0.55;
            SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, default, default, default);
        });
        Else(() => {
            NextBuffVars.AttackSpeedMod = 0;
            NextBuffVars.SpeedMod = -0.55;
            SpellBuffAdd(Attacker, Target, "TimeWarpSlow", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, default, default, default);
        });
        TeamID = GetTeamID(default);
        IsStealthed = GetStatus(Target, GetStealthed);
        DamageAmount = this.VALUE_BY_LEVEL;
        TauntLength = this.VALUE_BY_LEVEL;
        If(Target, default, CO_IS_TARGET_IN_FRONT_OF_ME, Attacker, default, () => {
            NextBuffVars.SlowPercent = -0.5;
        });
        Else(() => {
            NextBuffVars.SlowPercent = -0.8;
        });
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            BreakSpellShields(Target);
            If(CharVars.SeduceIsActive, default, CO_EQUAL, default, 1, () => {
                SpellEffectCreate(ar, default, "Ahri_PassiveHeal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(asdf, default, "Ahri_passive_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Owner, default, default, true, false, false, false, false, default, default);
                NextBuffVars.DrainPercent = 0.35;
                NextBuffVars.DrainedBool = false;
                SpellBuffAdd(Attacker, Attacker, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.35, 1, false, false, Attacker);
                CharVars.SeduceIsActive = 0;
                SpellBuffRemoveStacks(Attacker, Attacker, "AhriSoulCrusher", 1);
            });
            Else(() => {
                IfHasBuff(Attacker, Attacker, "AhriSoulCrusher", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusherCounter", 9, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
                });
                ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.35, 1, false, false, Attacker);
            });
            SpellEffectCreate(asdf, default, "Ahri_Charm_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Owner, default, default, true, false, false, false, false, default, default);
            SpellBuffAdd(Attacker, Target, "AhriSeduce", 1, 1, 0 + (TauntLength ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
            ApplyTaunt(Attacker, Target, 0 + (TauntLength ?? 0));
            DestroyMissile(MissileNetworkID);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                BreakSpellShields(Target);
                If(CharVars.SeduceIsActive, default, CO_EQUAL, default, 1, () => {
                    SpellEffectCreate(ar, default, "Ahri_PassiveHeal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, false, false, false, false, default, default);
                    SpellEffectCreate(asdf, default, "Ahri_passive_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Owner, default, default, true, false, false, false, false, default, default);
                    NextBuffVars.DrainPercent = 0.35;
                    NextBuffVars.DrainedBool = false;
                    SpellBuffAdd(Attacker, Attacker, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.35, 1, false, false, Attacker);
                    CharVars.SeduceIsActive = 0;
                    SpellBuffRemoveStacks(Attacker, Attacker, "AhriSoulCrusher", 1);
                });
                Else(() => {
                    IfHasBuff(Attacker, Attacker, "AhriSoulCrusher", () => {
                        
                    });
                    Else(() => {
                        SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusherCounter", 9, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
                    });
                    ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.35, 1, false, false, Attacker);
                });
                SpellEffectCreate(asdf, default, "Ahri_Charm_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Owner, default, default, true, false, false, false, false, default, default);
                SpellBuffAdd(Attacker, Target, "AhriSeduce", 1, 1, 0 + (TauntLength ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                ApplyTaunt(Attacker, Target, 0 + (TauntLength ?? 0));
                DestroyMissile(MissileNetworkID);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    BreakSpellShields(Target);
                    If(CharVars.SeduceIsActive, default, CO_EQUAL, default, 1, () => {
                        SpellEffectCreate(ar, default, "Ahri_PassiveHeal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, false, false, false, false, default, default);
                        SpellEffectCreate(asdf, default, "Ahri_passive_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Owner, default, default, true, false, false, false, false, default, default);
                        NextBuffVars.DrainPercent = 0.35;
                        NextBuffVars.DrainedBool = false;
                        SpellBuffAdd(Attacker, Attacker, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.35, 1, false, false, Attacker);
                        CharVars.SeduceIsActive = 0;
                        SpellBuffRemoveStacks(Attacker, Attacker, "AhriSoulCrusher", 1);
                    });
                    Else(() => {
                        IfHasBuff(Attacker, Attacker, "AhriSoulCrusher", () => {
                            
                        });
                        Else(() => {
                            SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusherCounter", 9, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
                        });
                        ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.35, 1, false, false, Attacker);
                    });
                    SpellEffectCreate(asdf, default, "Ahri_Charm_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Owner, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd(Attacker, Target, "AhriSeduce", 1, 1, 0 + (TauntLength ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                    ApplyTaunt(Attacker, Target, 0 + (TauntLength ?? 0));
                    DestroyMissile(MissileNetworkID);
                });
            });
        });
        GetPointByUnitFacingOffset(Owner, 0, 0);
        IfHasBuff(Target, Attacker, "AhriFoxFireMissileTwo", () => {
            If(CharVars.FoxFireIsActive, default, CO_EQUAL, default, 1, () => {
                SpellEffectCreate(ar, default, "Ahri_PassiveHeal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(asdf, default, "Ahri_passive_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, false, false, false, false, default, default);
                NextBuffVars.DrainPercent = 0.35;
                NextBuffVars.DrainedBool = false;
                SpellBuffAdd(Attacker, Attacker, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.1875, 0, false, false, Attacker);
            });
            Else(() => {
                IfNotHasBuff(Attacker, Attacker, "AhriSoulCrusher3", () => {
                    IfHasBuff(Attacker, Attacker, "AhriSoulCrusher", () => {
                        
                    });
                    Else(() => {
                        SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusherCounter", 9, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
                    });
                    ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.1875, 0, false, false, Attacker);
                });
            });
            SpellBuffAdd(Attacker, Target, "AhriFoxFireMissileTwo", 3, 1, 3, NextBuffVars, BUFF_STACKS_AND_CONTINUE, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            If(CharVars.FoxFireIsActive, default, CO_EQUAL, default, 1, () => {
                SpellEffectCreate(ar, default, "Ahri_PassiveHeal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(asdf, default, "Ahri_passive_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, false, false, false, false, default, default);
                SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusher3", 3, 3, 5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0.25, true, false, false, default);
                NextBuffVars.DrainPercent = 0.35;
                NextBuffVars.DrainedBool = false;
                SpellBuffAdd(Attacker, Attacker, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.375, 0, false, false, Attacker);
                IfHasBuff(Attacker, Attacker, "AhriSoulCrusher", () => {
                    SpellBuffRemoveStacks(Attacker, Attacker, "AhriSoulCrusher", 1);
                });
            });
            Else(() => {
                IfNotHasBuff(Attacker, Attacker, "AhriSoulCrusher3", () => {
                    IfHasBuff(Attacker, Attacker, "AhriSoulCrusher", () => {
                        
                    });
                    Else(() => {
                        SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusherCounter", 9, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
                    });
                    ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.375, 0, false, false, Attacker);
                });
            });
            SpellBuffAdd(Attacker, Target, "AhriFoxFireMissileTwo", 3, 1, 6, NextBuffVars, BUFF_STACKS_AND_CONTINUE, BUFF_Internal, 0, true, false, false, default);
        });
        DestroyMissile(MissileNetworkID);
        If(Target, default, CO_NOT_EQUAL, Attacker, default, () => {
            NextBuffVars.OrbofDeceptionIsActive = CharVars.OrbofDeceptionIsActive;
            SpellBuffAdd(Attacker, Target, "AhriOrbDamageSilence", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            DestroyMissile(MissileNetworkID);
            If(CharVars.OrbofDeceptionIsActive, default, CO_EQUAL, default, 1, () => {
                CharVars.OrbofDeceptionIsActive = 0;
            });
        });
        SpellCD1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Target, GetSlotSpellCooldownTime);
        SpellCD1a = Math(0 + (SpellCD1 ?? 0), MO_ADD, -10);
        SpellCD1b = Math(0 + (SpellCD1a ?? 0), MO_MAX, 0);
        SetSlotSpellCooldownTimeVer2(0 + (SpellCD1b ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Target, false);
        SpellEffectCreate(default, default, "ChronoRefresh_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, false, default, default, default);
        SpellCD3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Target, GetSlotSpellCooldownTime);
        SpellCD3a = Math(0 + (SpellCD3 ?? 0), MO_ADD, -10);
        SpellCD3b = Math(0 + (SpellCD3a ?? 0), MO_MAX, 0);
        SetSlotSpellCooldownTimeVer2(0 + (SpellCD3b ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Target, false);
        SpellCD4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Target, GetSlotSpellCooldownTime);
        SpellCD4a = Math(0 + (SpellCD4 ?? 0), MO_ADD, -10);
        SpellCD4b = Math(0 + (SpellCD4a ?? 0), MO_MAX, 0);
        SetSlotSpellCooldownTimeVer2(0 + (SpellCD4b ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Target, true);
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                AttackDamage = GetTotalAttackDamage(Owner);
                IfHasBuff(Owner, Owner, "EmpowerTwo", () => {
                    BonusAttackDamage = GetStat(GetFlatPhysicalDamageMod, Owner);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    BonusDamage = this.VALUE_BY_LEVEL;
                    PhysicalBonus = Math(0 + (BonusAttackDamage ?? 0), MO_MULTIPLY, 0.4);
                    AOEDmg = Math(0 + (PhysicalBonus ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                    BreakSpellShields(Target);
                    ApplyDamage(Attacker, Target, 0 + (AOEDmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
                    SpellBuffRemove(Owner, "EmpowerTwo", Owner, 0);
                });
                BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
                ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.7, 1, false, false, Attacker);
                SpellBuffRemoveStacks(Attacker, Attacker, "RelentlessAssaultDebuff", 0);
                SpellEffectCreate(a, default, "RelentlessAssault_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        SpellBuffClear(Owner, "FiddleSticksDarkWindMissile");
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        DoOnce = false;
        DamageToDeal = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetAreaRandom(Attacker, Target, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", default, false, 10, (Unit) => {
            If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                If(DoOnce, default, CO_NOT_EQUAL, default, true, () => {
                    IsStealthed = GetStatus(Unit, GetStealthed);
                    If(IsStealthed, default, CO_EQUAL, default, false, () => {
                        AttackerPos = GetUnitPosition(Target);
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                        SpellCast(Attacker, Unit, default, default, true, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, AttackerPos);
                        DoOnce = true;
                    });
                    Else(() => {
                        CanSee = CanSeeTarget(Attacker, Unit);
                        If(CanSee, default, CO_EQUAL, default, true, () => {
                            AttackerPos = GetUnitPosition(Target);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                            SpellCast(Attacker, Unit, default, default, true, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, AttackerPos);
                            DoOnce = true;
                        });
                    });
                });
            });
        });
        SpellBuffAdd(Attacker, Attacker, "FiddleSticksDarkWindMissile", 5, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "DarkWind", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Silence, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.45, 0, false, false, Attacker);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Attacker);
        If(FiddlesticksSkinID, default, CO_EQUAL, default, 6, () => {
            SpellEffectCreate(this.a, default, "Party_DarkWind_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.a, default, "DarkWind_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Owner, Target, default, 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Silence, 0, true, default, default, default);
        });
        TargetNum = GetCastInfo(GetCastSpellTargetsHitPlusOne);
        If(TargetNum, default, CO_EQUAL, default, 1, () => {
            ApplyDamage(Attacker, Target, 100, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.35, 1, false, false, default);
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 100, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.35, 1, false, false, default);
        });
        SpellBuffAdd(Attacker, Target, "DrainCheck", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        IfHasBuff(Target, Attacker, "DrainCheck", () => {
            SpellCast(Attacker, Target, Target, Target, default, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, default, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        DoOnce = false;
        BaseDamage = this.VALUE_BY_LEVEL;
        Count = GetBuffCountFromAll(Owner, "FiddleSticksDarkWindMissile");
        If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 3, () => {
            ForEachUnitInTargetAreaRandom(Attacker, Target, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, 10, (Unit) => {
                If(DoOnce, default, CO_EQUAL, default, false, () => {
                    If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                        IsStealthed = GetStatus(Unit, GetStealthed);
                        If(IsStealthed, default, CO_EQUAL, default, false, () => {
                            AttackerPos = GetUnitPosition(Owner);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                            DoOnce = true;
                            SpellCast(Attacker, Unit, default, default, true, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, Target);
                        });
                        Else(() => {
                            CanSee = CanSeeTarget(Attacker, Unit);
                            If(CanSee, default, CO_EQUAL, default, true, () => {
                                AttackerPos = GetUnitPosition(Owner);
                                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                                DoOnce = true;
                                SpellCast(Attacker, Unit, default, default, true, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, Target);
                            });
                        });
                    });
                });
            });
        });
        SpellBuffAdd(Owner, Owner, "FiddleSticksDarkWindMissile", 4, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "DarkWind", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Silence, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.45, 0, false, false, Attacker);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Attacker);
        If(FiddlesticksSkinID, default, CO_EQUAL, default, 6, () => {
            SpellEffectCreate(this.a, default, "Party_DarkWind_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.a, default, "DarkWind_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        baseDamageBlock = this.VALUE_BY_LEVEL;
        PlayAnimation("Spell2", 0, Owner, false, false, false);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, InstanceVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        BonusHealth = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.6);
        DamageBlock = Math(0 + (baseDamageBlock ?? 0), MO_ADD, 0 + (BonusHealth ?? 0));
        NextBuffVars.DamageBlock = DamageBlock;
        NextBuffVars.MSBonus = this.VALUE_BY_LEVEL;
        NextBuffVars.ASBonus = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "SkarnerExoskeleton", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SuppressionDuration = 1.75;
        NextBuffVars.Victim = Target;
        SpellBuffAdd(Attacker, Target, "SkarnerImpale", 1, 1, 0 + (SuppressionDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Suppression, 0, true, false, false, default);
        SpellBuffAdd(Target, Owner, "SkarnerImpaleBuff", 1, 1, 0 + (SuppressionDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        DamagePerTick = this.VALUE_BY_LEVEL;
        ApplyDamage(Attacker, Target, 0 + (DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 0, false, false, Attacker);
        HP = GetPAROrHealth(Target, GetHealth, PAR_MANA);
        If(HP, default, CO_GREATER_THAN, default, 0, () => {
            IssueOrder(Owner, AI_HOLD, default, Owner);
            Pos = GetPointByUnitFacingOffset(Owner, 100, 180);
            FaceDirection(Owner, Pos);
            PlayAnimation("Spell4_Idleback", 0, Owner, false, false, false);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        teamID = GetTeamID(default);
        If(teamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(arr, default, "heimerdinger_CH1_grenade_tar.troy", default, TEAM_ORDER, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Target, Target, default, default, true, default, default, default, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(arr, default, "heimerdinger_CH1_grenade_tar.troy", default, TEAM_CHAOS, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Target, Target, default, default, true, default, default, default, default, default, default);
        });
        ForEachUnitInTargetArea(Owner, Target, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectTurrets ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            If(Unit, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
            });
            SpellEffectCreate(arr, default, "heimerdinger_CH1_grenade_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, Unit, Unit, default, default, false, default, default, default, default, default, default);
        });
        ForEachUnitInTargetArea(Owner, Target, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "BlindingDart", 100, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Blind, 0, true, false, default, default);
        });
        ForEachUnitInTargetArea(Owner, Target, 125, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyStun(Attacker, Unit, 1.5);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        teamID = GetTeamID(default);
        If(teamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(arr, default, "heimerdinger_CH1_grenade_tar.troy", default, TEAM_ORDER, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Target, Target, default, default, true, default, default, default, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(arr, default, "heimerdinger_CH1_grenade_tar.troy", default, TEAM_CHAOS, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Target, Target, default, default, true, default, default, default, default, default, default);
        });
        ForEachUnitInTargetArea(Owner, Target, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectTurrets ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            If(Unit, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
            });
            SpellEffectCreate(arr, default, "heimerdinger_CH1_grenade_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, Unit, Unit, default, default, false, default, default, default, default, default, default);
        });
        ForEachUnitInTargetArea(Owner, Target, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "BlindingDart", 100, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Blind, 0, true, false, default, default);
        });
        ForEachUnitInTargetArea(Owner, Target, 125, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyStun(Attacker, Unit, 1.5);
        });
        TargetPos = GetCastSpellTargetPos();
        ForEachUnitInTargetArea(Attacker, TargetPos, 400, "", default, default, (Unit) => {
            SpellBuffAdd(Attacker, Unit, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, default, default, default, default);
        });
        ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, default, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.Level = Level;
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0.6, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "SeismicShardBuff", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, default, default);
        ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.55, 1, false, false, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            Dmg = Math(0 + (Dmg ?? 0), MO_DIVIDE, 2);
        });
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0.35, 1, false, false, default);
        SpellBuffAdd(Attacker, Target, "UrAniumRoundsHit", 30, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, default, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            Dmg = Math(0 + (Dmg ?? 0), MO_DIVIDE, 2);
        });
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            Dmg = Math(0 + (Dmg ?? 0), MO_DIVIDE, 2);
        });
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0.35, 1, false, false, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            Dmg = Math(0 + (Dmg ?? 0), MO_DIVIDE, 2);
        });
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            Dmg = Math(0 + (Dmg ?? 0), MO_DIVIDE, 2);
        });
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            Dmg = Math(0 + (Dmg ?? 0), MO_DIVIDE, 2);
        });
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                NextBuffVars.AttackSpeedMod = 0;
                SpellBuffAdd(Attacker, Target, "Chilled", 100, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(aasdf, default, "mordakaiser_maceOfSpades_tar2.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseDamage = this.VALUE_BY_LEVEL;
        baseDamage = GetStat(GetBaseAttackDamage, Owner);
        totalDamage = GetTotalAttackDamage(Owner);
        bonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (baseDamage ?? 0));
        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (bonusDamage ?? 0));
        abilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        bonusAPDamage = Math(0 + (abilityPower ?? 0), MO_MULTIPLY, 0.4);
        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (bonusAPDamage ?? 0));
        NextBuffVars.BaseDamage = BaseDamage;
        SpellBuffAdd(Target, Owner, "MordekaiserNukeOfTheBeastDmg", 5, 1, 0.001, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, true, false, false, default);
        MordAP = GetStat(GetFlatMagicDamageMod, Owner);
        DamageToDeal = this.VALUE_BY_LEVEL;
        MaxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        MordAP1 = Math(0 + (MordAP ?? 0), MO_MULTIPLY, 0.0004);
        DamageToDeal = Math(0 + (DamageToDeal ?? 0), MO_ADD, 0 + (MordAP1 ?? 0));
        DamageToDeal = Math(0 + (DamageToDeal ?? 0), MO_MULTIPLY, 0.5);
        initialDamageToDeal = Math(0 + (MaxHealth ?? 0), MO_MULTIPLY, 0 + (DamageToDeal ?? 0));
        tickDamage = Math(0 + (DamageToDeal ?? 0), MO_MULTIPLY, 0.1);
        NextBuffVars.LifestealPercent = tickDamage;
        SpellBuffAdd(Owner, Target, default, 1, 1, 10.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        NextBuffVars.DamageToDeal = initialDamageToDeal;
        SpellBuffAdd(Target, Attacker, "MordekaiserCOTGDot", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            Dmg = Math(0 + (Dmg ?? 0), MO_DIVIDE, 2);
        });
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            Dmg = Math(0 + (Dmg ?? 0), MO_DIVIDE, 2);
        });
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        IfHasBuff(Owner, Attacker, "UpgradeSlow", () => {
            SpellEffectCreate(default, default, "AbsoluteZero_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            Dmg = Math(0 + (Dmg ?? 0), MO_DIVIDE, 2);
        });
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                NextBuffVars.AttackSpeedMod = 0;
                SpellBuffAdd(Attacker, Target, "Chilled", 100, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            Dmg = Math(0 + (Dmg ?? 0), MO_DIVIDE, 2);
        });
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        IfHasBuff(Owner, Attacker, "UpgradeSlow", () => {
            SpellEffectCreate(default, default, "AbsoluteZero_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.DamagePerTick = this.VALUE_BY_LEVEL;
        NextBuffVars.DefenseStats = this.VALUE_BY_LEVEL;
        IfHasBuff(Target, Owner, "MordekaiserCreepingDeathCheck", () => {
            If(Target, default, CO_SAME_TEAM, Owner, default, () => {
                SpellBuffAdd(Owner, Target, default, 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        Else(() => {
            If(Target, default, CO_DIFFERENT_TEAM, Owner, default, () => {
                SpellBuffAdd(Target, Owner, "MordekaiserCreepingDeathDebuff", 100, 1, 0.001, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, true, false, false, default);
            });
        });
        SpellBuffAdd(Owner, Target, "MordekaiserCreepingDeathCheck", 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(Target, default, CO_EQUAL, Owner, default, () => {
            NextBuffVars.DamagePerTick = this.VALUE_BY_LEVEL;
            NextBuffVars.DefenseStats = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Target, "MordekaiserCreepingDeath", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        Else(() => {
            SpellCast(Owner, Target, default, default, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, false, default);
        });
        TeamID = GetTeamID(default);
        SpellBuffAdd(Target, Owner, "MordekaiserSyphonDmg", 100, 1, 0.001, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MordekaiserSyphonParticle", 1, 1, 0.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(asdf, default, "mordakaiser_siphonOfDestruction_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(asdf1, default, "mordakaiser_siphonOfDestruction_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        BreakSpellShields(Target);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
        If(Target, default, CO_IS_DEAD, default, default, () => {
            Count = GetBuffCountFromCaster(Attacker, Attacker, "SkarnerFracture");
            TeamID = GetTeamID(default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            HealingAmount = this.VALUE_BY_LEVEL;
            APStat = GetStat(GetFlatMagicDamageMod, Attacker);
            BonusHeal = Math(0 + (APStat ?? 0), MO_MULTIPLY, 0.3);
            HealingAmount = Math(0 + (HealingAmount ?? 0), MO_ADD, 0 + (BonusHeal ?? 0));
            Level = Count;
            Level = Math(0 + (Level ?? 0), MO_ADD, 1);
            HealingMod = this.VALUE_BY_LEVEL;
            HealingAmount = Math(0 + (HealingAmount ?? 0), MO_MULTIPLY, 0 + (HealingMod ?? 0));
            SpellEffectCreate(MotaExplosion, default, "Skarner_Fracture_Tar_Consume.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            IncHealth(Attacker, 0 + (HealingAmount ?? 0), Attacker);
            SpellEffectCreate(HealVFX, default, "galio_bulwark_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, false, Attacker, default, default, Attacker, default, default, true, false, false, false, false, default, default);
            SpellBuffAdd(Attacker, Attacker, "SkarnerFracture", 8, 1, 6, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            SpellBuffAdd(Attacker, Target, "SkarnerFractureMissile", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        SpellBuffAdd(Attacker, Target, default, 100, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Blind, 0, true, false, default, default);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.8, 1, false, false, Attacker);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        HitResult = HIT_Critical;
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        Attacker = SetBuffCasterUnit();
        If(Attacker, default, CO_NOT_EQUAL, Target, default, () => {
            BreakSpellShields(Target);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.8, 1, false, false, Attacker);
            BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
            NextBuffVars.Position = BouncePos;
            NextBuffVars.IdealDistance = 100;
            NextBuffVars.Speed = 100;
            NextBuffVars.Gravity = 20;
            SpellBuffAdd(Attacker, Target, "Move", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
        });
        NextBuffVars.Speed = 150;
        NextBuffVars.Gravity = 45;
        NextBuffVars.IdealDistance = 100;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        IsStealthed = GetStatus(Target, GetStealthed);
        If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                BreakSpellShields(Target);
                ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
                BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
                NextBuffVars.Position = BouncePos;
                SpellBuffAdd(Owner, Target, "Move", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
            });
            Else(() => {
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    BreakSpellShields(Target);
                    ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
                    BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
                    NextBuffVars.Position = BouncePos;
                    SpellBuffAdd(Owner, Target, "Move", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                    DebugSay(Owner, "ISCHAMPION", default);
                });
                Else(() => {
                    CanSee = CanSeeTarget(Owner, Target);
                    If(CanSee, default, CO_EQUAL, default, true, () => {
                        BreakSpellShields(Target);
                        ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
                        BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
                        NextBuffVars.Position = BouncePos;
                        SpellBuffAdd(Owner, Target, "Move", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                        DebugSay(Owner, "ISNOTCHAMP", default);
                    });
                });
            });
        });
        PlayAnimation("Spell3", 0, Owner, false, false, false);
        AbilityPower = GetStat(GetFlatMagicDamageMod, Attacker);
        ArmorAmount = this.VALUE_BY_LEVEL;
        AbilityPower = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.9);
        TotalArmorAmount = Math(0 + (AbilityPower ?? 0), MO_ADD, 0 + (ArmorAmount ?? 0));
        NextBuffVars.TotalArmorAmount = TotalArmorAmount;
        NextBuffVars.DamageBonus = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "JannaEoTSBuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.Speed = 150;
        NextBuffVars.Gravity = 45;
        NextBuffVars.IdealDistance = 100;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        IsStealthed = GetStatus(Target, GetStealthed);
        If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                BreakSpellShields(Target);
                ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
                BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
                NextBuffVars.Position = BouncePos;
                SpellBuffAdd(Owner, Target, "Move", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
            });
            Else(() => {
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    BreakSpellShields(Target);
                    ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
                    BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
                    NextBuffVars.Position = BouncePos;
                    SpellBuffAdd(Owner, Target, "Move", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                });
                Else(() => {
                    CanSee = CanSeeTarget(Owner, Target);
                    If(CanSee, default, CO_EQUAL, default, true, () => {
                        BreakSpellShields(Target);
                        ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
                        BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
                        NextBuffVars.Position = BouncePos;
                        SpellBuffAdd(Owner, Target, "Move", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                    });
                });
            });
        });
        TeamID = GetTeamID(default);
        BreakSpellShields(Target);
        NextBuffVars.AttackSpeedMod = 0;
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.8, 1, false, false, Attacker);
        SpellEffectCreate(asdf, default, "SowTheWind_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 4, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
        NextBuffVars.Speed = 150;
        NextBuffVars.Gravity = 45;
        NextBuffVars.IdealDistance = 100;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        IsStealthed = GetStatus(Target, GetStealthed);
        If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                BreakSpellShields(Target);
                ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
                BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
                NextBuffVars.Position = BouncePos;
                SpellBuffAdd(Owner, Target, "Move", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
            });
            Else(() => {
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    BreakSpellShields(Target);
                    ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
                    BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
                    NextBuffVars.Position = BouncePos;
                    SpellBuffAdd(Owner, Target, "Move", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                });
                Else(() => {
                    CanSee = CanSeeTarget(Owner, Target);
                    If(CanSee, default, CO_EQUAL, default, true, () => {
                        BreakSpellShields(Target);
                        ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
                        BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
                        NextBuffVars.Position = BouncePos;
                        SpellBuffAdd(Owner, Target, "Move", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                    });
                });
            });
        });
        NextBuffVars.Speed = 150;
        NextBuffVars.Gravity = 45;
        NextBuffVars.IdealDistance = 100;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        IsStealthed = GetStatus(Target, GetStealthed);
        If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                BreakSpellShields(Target);
                ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
                BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
                NextBuffVars.Position = BouncePos;
                SpellBuffAdd(Owner, Target, "Move", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
            });
            Else(() => {
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    BreakSpellShields(Target);
                    ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
                    BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
                    NextBuffVars.Position = BouncePos;
                    SpellBuffAdd(Owner, Target, "Move", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                });
                Else(() => {
                    CanSee = CanSeeTarget(Owner, Target);
                    If(CanSee, default, CO_EQUAL, default, true, () => {
                        BreakSpellShields(Target);
                        ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
                        BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
                        NextBuffVars.Position = BouncePos;
                        SpellBuffAdd(Owner, Target, "Move", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                    });
                });
            });
        });
        SpellBuffAdd(Attacker, Target, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
        baseDamageBlock = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        BonusHealth = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.75);
        DamageBlock = Math(0 + (baseDamageBlock ?? 0), MO_ADD, 0 + (BonusHealth ?? 0));
        NextBuffVars.DamageBlock = DamageBlock;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        BreakSpellShields(Target);
        BaseDamage = this.VALUE_BY_LEVEL;
        PhysPreMod = GetStat(GetFlatPhysicalDamageMod, Owner);
        PhysPostMod = Math(0.6, MO_MULTIPLY, 0 + (PhysPreMod ?? 0));
        APPreMod = GetStat(GetFlatMagicDamageMod, Owner);
        APPostMod = Math(0.5, MO_MULTIPLY, 0 + (APPreMod ?? 0));
        IreliaTeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "irelia_ult_tar.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Target, "root", default, Target, default, default, true, default, default, false, false, default, default);
        DamageToDeal1 = Math(0 + (PhysPostMod ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        DamageToDeal2 = Math(0 + (APPostMod ?? 0), MO_ADD, 0 + (DamageToDeal1 ?? 0));
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            NextBuffVars.DrainPercent = 0.25;
        });
        Else(() => {
            NextBuffVars.DrainPercent = 0.1;
        });
        SpellBuffAdd(Owner, Owner, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (DamageToDeal2 ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        SpellBuffAdd(Target, Attacker, default, 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        Distance = DistanceBetweenObjects("Attacker", "Target");
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 600, () => {
            GravityVar = 70;
            SpeedVar = 1150;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 500, () => {
            GravityVar = 80;
            SpeedVar = 1150;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 400, () => {
            GravityVar = 100;
            SpeedVar = 1080;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 300, () => {
            GravityVar = 120;
            SpeedVar = 1010;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 200, () => {
            GravityVar = 150;
            SpeedVar = 950;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 100, () => {
            GravityVar = 300;
            SpeedVar = 900;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            GravityVar = 1000;
            SpeedVar = 900;
        });
        Move(Attacker, Target, 0 + (SpeedVar ?? 0), 0 + (GravityVar ?? 0), 100, FURTHEST_WITHIN_RANGE, default, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.TremDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        Attacker = GetChampionBySkinName("Shen", TeamOfOwner ?? TEAM_UNKNOWN);
        Level = GetLevel(Attacker);
        DamageToDeal = this.VALUE_BY_LEVEL;
        ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.25, 0, false, false, default);
        IfHasBuff(Target, Owner, "LuxLightBinding", () => {
            SpellBuffRemove(Target, "LuxLightBinding", Attacker, default);
            DebugSay(Owner, "DISPELL ROOT !!", default);
        });
        Else(() => {
            NextBuffVars.MoveSpeedMod = -0.5;
            DebugSay(Owner, "TARGET BINDED !!", default);
            SpellBuffAdd(Attacker, Target, "LuxLightBinding", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, default, default);
        });
        Distance = DistanceBetweenObjects("Owner", "Target");
        IsStealthed = GetStatus(Target, GetStealthed);
        DamageAmount = this.VALUE_BY_LEVEL;
        StunLength = 2;
        HalfDamage = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.5);
        HalfSnare = Math(0 + (StunLength ?? 0), MO_MULTIPLY, 0.5);
        If(CharVars.FirstTargetHit, default, CO_EQUAL, default, false, () => {
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
                SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (StunLength ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, default, default);
                CharVars.FirstTargetHit = true;
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    SpellBuffAdd(Owner, Target, "LuxIlluminatingFraulein", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
                });
            });
            Else(() => {
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
                    SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (StunLength ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, default, default);
                    CharVars.FirstTargetHit = true;
                    If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                        SpellBuffAdd(Owner, Target, "LuxIlluminatingFraulein", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
                    });
                });
                Else(() => {
                    CanSee = CanSeeTarget(Owner, Target);
                    If(CanSee, default, CO_EQUAL, default, true, () => {
                        ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
                        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (StunLength ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, default, default);
                        CharVars.FirstTargetHit = true;
                        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                            SpellBuffAdd(Owner, Target, "LuxIlluminatingFraulein", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
                        });
                    });
                });
            });
        });
        Else(() => {
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                ApplyDamage(Attacker, Target, 0 + (HalfDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.35, 1, false, false, Attacker);
                SpellBuffAdd(Attacker, Target, "LuxLightBinding", 1, 1, 0 + (HalfSnare ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, default, default);
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    SpellBuffAdd(Owner, Target, "LuxIlluminatingFraulein", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
                });
                DestroyMissile(MissileNetworkID);
            });
            Else(() => {
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    ApplyDamage(Attacker, Target, 0 + (HalfDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.35, 1, false, false, Attacker);
                    SpellBuffAdd(Attacker, Target, "LuxLightBinding", 1, 1, 0 + (HalfSnare ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, default, default);
                    If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                        SpellBuffAdd(Owner, Target, "LuxIlluminatingFraulein", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
                    });
                    DestroyMissile(MissileNetworkID);
                });
                Else(() => {
                    CanSee = CanSeeTarget(Owner, Target);
                    If(CanSee, default, CO_EQUAL, default, true, () => {
                        ApplyDamage(Attacker, Target, 0 + (HalfDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.35, 1, false, false, Attacker);
                        SpellBuffAdd(Attacker, Target, "LuxLightBinding", 1, 1, 0 + (HalfSnare ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, default, default);
                        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                            SpellBuffAdd(Owner, Target, "LuxIlluminatingFraulein", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
                        });
                        DestroyMissile(MissileNetworkID);
                    });
                });
            });
        });
        TeamID = GetTeamID(default);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.75, 0, false, false, Attacker);
        NextBuffVars.LifeTapMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        SpellEffectCreate(hit, default, "shen_vorpalStar_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            SpellEffectCreate(hi, default, "Globalhit_red.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Target, default, Owner, Owner, default, default, true, default, default, false, default, default, default);
        });
        baseDmg = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (baseDmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        MaxHP = GetStat(GetFlatHPPoolMod, Owner);
        BonusDmgFromHP = Math(0 + (MaxHP ?? 0), MO_MULTIPLY, 0.08);
        Level = GetLevel(Owner);
        ShurikenDamage = this.VALUE_BY_LEVEL;
        DamageToDeal = Math(0 + (BonusDmgFromHP ?? 0), MO_ADD, 0 + (ShurikenDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        SpellBuffRemove(Attacker, "ShenWayOfTheNinjaAura", Attacker, 0);
        DestroyMissile(MissileNetworkID);
        NextBuffVars.ArmorMod = this.VALUE_BY_LEVEL;
        NextBuffVars.LifeReturn = this.VALUE_BY_LEVEL;
        NextBuffVars.NinjaBonus = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, default, default, default, default);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                SpellBuffAdd(Owner, Owner, "ToxicShotApplicator", 1, 1, 0.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
        });
        AttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (AttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        NextBuffVars.ArmorDebuff = this.VALUE_BY_LEVEL;
        tauntDuration = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "PuncturingTauntArmorDebuff", 1, 1, 0 + (tauntDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, false, false, default);
        ApplyTaunt(Attacker, Target, 0 + (tauntDuration ?? 0));
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 1, default, default, default, default);
        ApplyStun(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0));
        TargetPercent = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
        SelfPercent = GetPAROrHealth(Attacker, GetHealthPercent, PAR_MANA);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 0, false, false, Attacker);
        If(TargetPercent, default, CO_GREATER_THAN_OR_EQUAL, SelfPercent, default, () => {
            ApplyStun(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0));
            SpellEffectCreate(a, default, "irelia_equilibriumStrike_tar_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        });
        Else(() => {
            NextBuffVars.MoveSpeedMod = -0.6;
            SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            SpellEffectCreate(a, default, "irelia_equilibriumStrike_tar_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        });
        SpellBuffAdd(Attacker, Owner, "IreliaHitenStyleCharged", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellEffectCreate(SmokeBomb, default, "irelia_gotasu_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(p3, default, "irelia_gotasu_cast_01.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(p3, default, "irelia_gotasu_cast_02.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        MoveSpeed = GetStat(GetMovementSpeed, Owner);
        dashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 1400);
        Distance = DistanceBetweenObjects("Owner", "Target");
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.Distance = Distance;
        NextBuffVars.dashSpeed = dashSpeed;
        DamageVar = this.VALUE_BY_LEVEL;
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        NextBuffVars.DamageVar = Math(0 + (DamageVar ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        SpellBuffAdd(Target, Owner, "IreliaGatotsuDash", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        BaseDamage = this.VALUE_BY_LEVEL;
        teamID = GetTeamID(default);
        Caster = GetChampionBySkinName("MonkeyKing", teamID ?? TEAM_UNKNOWN);
        MonkeyKingAP = GetStat(GetFlatMagicDamageMod, Caster);
        MonkeyKingAP = Math(0.6, MO_MULTIPLY, 0 + (MonkeyKingAP ?? 0));
        DamageToDeal = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (MonkeyKingAP ?? 0));
        ApplyDamage(Caster, Target, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, true, false, Caster);
        IfNotHasBuff(Attacker, Attacker, "IfHasBuffCheck", () => {
            SpellBuffAdd(Attacker, Attacker, "AlZaharVoidlingCount", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, default, default);
        });
        BreakSpellShields(Target);
        SpellBuffAdd(Attacker, Target, "AlZaharRecentVis", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Target, "AlZaharMaleficVisions", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, default, default);
        LevelDamage = GetLevel(Owner);
        BonusDamage = Math(0 + (LevelDamage ?? 0), MO_MULTIPLY, 9);
        TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 14);
        TotalDamage = Math(0 + (TotalDamage ?? 0), MO_MULTIPLY, 2);
        NextBuffVars.TotalDamage = TotalDamage;
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + (AttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "SonaHymnPCDeathRecapFix", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "IfHasBuffCheck", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "SonaPowerChord", Owner, 0);
        NextBuffVars.DamageAmount = this.VALUE_BY_LEVEL;
        BreakSpellShields(Target);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        If(Level, default, CO_EQUAL, default, 1, () => {
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0.3, default, false, false, default);
        });
        ElseIf(Level, default, CO_EQUAL, default, 2, () => {
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0.4, default, false, false, default);
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0.5, default, false, false, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        TeamID = GetTeamID(default);
        NextBuffVars.ResistanceMod = this.VALUE_BY_LEVEL;
        Damage = this.VALUE_BY_LEVEL;
        AoEDamage = this.VALUE_BY_LEVEL;
        UltDamage = Math(0 + (Damage ?? 0), MO_MULTIPLY, 0 + (AoEDamage ?? 0));
        SpellEffectCreate(asdf, default, "SpellFlux_tar2.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        If(Target, default, CO_NOT_EQUAL, Owner, default, () => {
            SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Shred, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (Damage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.35, 1, false, false, Attacker);
            IfHasBuff(Owner, Owner, "DesperatePower", () => {
                SpellEffectCreate(part, default, "DesperatePower_aoe.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
                ForEachUnitInTargetArea(Owner, Target, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                    If(Target, default, CO_NOT_EQUAL, Unit, default, () => {
                        SpellEffectCreate(part2, default, "ManaLeach_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                        ApplyDamage(Attacker, Unit, 0 + (UltDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.175, 1, false, false, Attacker);
                    });
                });
            });
        });
        SpellEffectCreate(default, default, "overload_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, "root", default, Target, "root", default, false, default, default, false, false, default, default);
        TeamID = GetTeamID(default);
        PAR = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        BaseDamage = this.VALUE_BY_LEVEL;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        AoEDamage = this.VALUE_BY_LEVEL;
        BonusDamage = Math(0 + (PAR ?? 0), MO_MULTIPLY, 0.08);
        TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        AoEDamage = Math(0 + (TotalDamage ?? 0), MO_MULTIPLY, 0 + (AoEDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.2, 1, false, false, Attacker);
        IfHasBuff(Owner, Owner, "DesperatePower", () => {
            SpellEffectCreate(part, default, "DesperatePower_aoe.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            ForEachUnitInTargetArea(Owner, Target, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                If(Target, default, CO_NOT_EQUAL, Unit, default, () => {
                    SpellEffectCreate(part, default, "ManaLeach_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                    ApplyDamage(Attacker, Unit, 0 + (AoEDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.1, 1, false, false, Attacker);
                });
            });
        });
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + (AttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        ApplyAssistMarker(Attacker, Target, 10);
        SpellBuffAdd(Attacker, Target, "SonaSongofDiscordHaste", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Haste, 0, true, false, default, default);
        NextBuffVars.Vamp = this.VALUE_BY_LEVEL;
        NextBuffVars.Level = Level;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        BreakSpellShields(Target);
        ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
        LevelDamage = GetLevel(Owner);
        BonusDamage = Math(0 + (LevelDamage ?? 0), MO_MULTIPLY, 9);
        TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 14);
        NextBuffVars.TotalDamage = TotalDamage;
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + (AttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Attacker, "IfHasBuffCheck", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                BreakSpellShields(Target);
                NextBuffVars.MoveSpeedMod = -0.4;
                SpellBuffAdd(Owner, Target, "Slow", 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        SpellBuffAdd(Attacker, Target, "SonaSongPCDeathRecapFix", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "SonaPowerChord", Owner, 0);
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + (AttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        LevelDamage = GetLevel(Owner);
        BonusDamage = Math(0 + (LevelDamage ?? 0), MO_MULTIPLY, 9);
        TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 14);
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + (AttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Attacker, "IfHasBuffCheck", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                BreakSpellShields(Target);
                NextBuffVars.MoveSpeedMod = -0.4;
                SpellBuffAdd(Owner, Target, "Slow", 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        ApplyDamage(Owner, Target, 0 + (TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        SpellBuffRemove(Owner, "SonaPowerChord", Owner, 0);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Net, 0, true, false, false, default);
        BaseDamage = this.VALUE_BY_LEVEL;
        TeamID = GetTeamID(default);
        PAR = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        AoEDamage = this.VALUE_BY_LEVEL;
        ManaDamage = Math(0 + (PAR ?? 0), MO_MULTIPLY, 0.05);
        TotalDamage = Math(0 + (ManaDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        AoEDamage = Math(0 + (TotalDamage ?? 0), MO_MULTIPLY, 0 + (AoEDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 1, false, false, Attacker);
        IfHasBuff(Owner, Owner, "DesperatePower", () => {
            SpellEffectCreate(part, default, "DesperatePower_aoe.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            ForEachUnitInTargetArea(Owner, Target, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                If(Target, default, CO_NOT_EQUAL, Unit, default, () => {
                    SpellEffectCreate(part, default, "ManaLeach_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, default, default, default, default);
                    ApplyDamage(Attacker, Unit, 0 + (AoEDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 1, false, false, Attacker);
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        BaseDamage = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Attacker);
        AbilityPowerMod = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.4);
        TotalDamage = Math(0 + (AbilityPowerMod ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        SilenceDuration = this.VALUE_BY_LEVEL;
        ApplyDamage(Attacker, Target, 0 + (TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, default);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Attacker, Target, "Silence", 1, 1, 0 + (SilenceDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Silence, 0, true, default, default, default);
        });
        teamID = GetTeamID(default);
        Other1 = GetChampionBySkinName("Malzahar", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ApplyDamage(Other1, Target, 0 + (Dmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        teamID = GetTeamID(default);
        Other1 = GetChampionBySkinName("Malzahar", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ApplyDamage(Other1, Target, 0 + (Dmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + (AttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        Dmg = GetTotalAttackDamage(Owner);
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        teamID = GetTeamID(default);
        Other1 = GetChampionBySkinName("Malzahar", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ApplyDamage(Other1, Target, 0 + (Dmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        APMod = GetStat(GetFlatMagicDamageMod, Attacker);
        APMod = Math(0 + (APMod ?? 0), MO_MULTIPLY, 0.25);
        IncHealth(Target, 0 + (APMod ?? 0) + (this.VALUE_BY_LEVEL ?? 0), Attacker);
        SpellEffectCreate(self, default, "Global_Heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Target, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
        ApplyAssistMarker(Attacker, Target, 10);
        NextBuffVars.DefenseBonus = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "SonaAriaShield", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        LevelDamage = GetLevel(Owner);
        BonusDamage = Math(0 + (LevelDamage ?? 0), MO_MULTIPLY, 9);
        TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 14);
        NextBuffVars.TotalDamage = TotalDamage;
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + (AttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Attacker, "IfHasBuffCheck", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                BreakSpellShields(Target);
                SpellBuffAdd(Attacker, Target, "SonaPowerChordDebuff", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
        SpellBuffAdd(Attacker, Target, "SonaAriaPCDeathRecapFix", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "SonaPowerChord", Owner, 0);
        IfHasBuff(Target, Target, "ResistantSkin", () => {
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, false, false, Attacker);
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, false, false, Attacker);
        });
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        IfHasBuff(Owner, Owner, "MonkeyKingPassive", () => {
            TAD = GetTotalAttackDamage(Owner);
            DamageToDeal = Math(2, MO_MULTIPLY, 0 + (TAD ?? 0));
            ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        });
        BonusDamage = this.VALUE_BY_LEVEL;
        AkaliDamage = GetTotalAttackDamage(Owner);
        AkaliAP = GetStat(GetFlatMagicDamageMod, Owner);
        AkaliAP = Math(0.3, MO_MULTIPLY, 0 + (AkaliAP ?? 0));
        AkaliDamage = Math(0 + (AkaliDamage ?? 0), MO_MULTIPLY, 0.6);
        DamageToDeal = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (AkaliDamage ?? 0));
        DamageToDeal = Math(0 + (AkaliAP ?? 0), MO_ADD, 0 + (DamageToDeal ?? 0));
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            ApplyDamage(Owner, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, true, false, Attacker);
        });
        ElseIf(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            ApplyDamage(Owner, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, true, false, Attacker);
        });
        Else(() => {
            CanSee = CanSeeTarget(Owner, Target);
            If(CanSee, default, CO_EQUAL, default, true, () => {
                ApplyDamage(Owner, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, true, false, Attacker);
            });
        });
        TeamID = GetTeamID(default);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(p3, default, "monkeyKing_Q_cas.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(p3, default, "monkeyKing_Q_cas.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        MoveSpeed = GetStat(GetMovementSpeed, Owner);
        dashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 1050);
        Distance = DistanceBetweenObjects("Owner", "Target");
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.Distance = Distance;
        NextBuffVars.dashSpeed = dashSpeed;
        NextBuffVars.AttackSpeedVar = this.VALUE_BY_LEVEL;
        DamageVar = this.VALUE_BY_LEVEL;
        BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusDamage = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.8);
        NextBuffVars.DamageVar = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (DamageVar ?? 0));
        SpellBuffAdd(Target, Owner, "MonkeyKingNimbusKick", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0.25, true, false, true, default);
        IfHasBuff(Owner, Owner, "MonkeyKingDecoyStealth", () => {
            SpellBuffRemove(Owner, "MonkeyKingDecoyStealth", Owner, 0);
        });
        UnitsHit = 0;
        ForNClosestUnitsInTargetArea(Owner, Target, 320, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 10, true, default, (Unit) => {
            If(UnitsHit, default, CO_LESS_THAN, default, 2, () => {
                If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                    IsStealthed = GetStatus(Unit, GetStealthed);
                    If(IsStealthed, default, CO_EQUAL, default, true, () => {
                        CanSee = CanSeeTarget(Owner, Unit);
                        If(CanSee, default, CO_EQUAL, default, true, () => {
                            TargetPos = GetUnitPosition(Unit);
                            NextBuffVars.TargetPos = TargetPos;
                            Other1 = SpawnMinion("MonkeyKingClone", "MonkeyKingFlying", "Aggro.lua", OwnerPos, TeamID ?? TEAM_CASTER, false, false, false, false, false, true, 0, false, false, Owner, default);
                            SpellBuffAdd(Unit, Other1, "MonkeyKingNimbusKickClone", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0.25, true, false, true, default);
                            UnitsHit = Math(1, MO_ADD, 0 + (UnitsHit ?? 0));
                        });
                    });
                    Else(() => {
                        TargetPos = GetUnitPosition(Unit);
                        NextBuffVars.TargetPos = TargetPos;
                        Other1 = SpawnMinion("MonkeyKingClone", "MonkeyKingFlying", "Aggro.lua", OwnerPos, TeamID ?? TEAM_CASTER, false, false, false, false, false, true, 0, false, false, Owner, default);
                        SpellBuffAdd(Unit, Other1, "MonkeyKingNimbusKickClone", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0.25, true, false, true, default);
                        UnitsHit = Math(1, MO_ADD, 0 + (UnitsHit ?? 0));
                    });
                });
            });
        });
        NextBuffVars.BonusDefense = this.VALUE_BY_LEVEL;
        BaseHeal = this.VALUE_BY_LEVEL;
        APStat = GetStat(GetFlatMagicDamageMod, Owner);
        BonusHeal = Math(0 + (APStat ?? 0), MO_MULTIPLY, 0.3);
        HealAmount = Math(0 + (BaseHeal ?? 0), MO_ADD, 0 + (BonusHeal ?? 0));
        NextBuffVars.HealAmount = HealAmount;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellTargetPos = GetCastSpellTargetPos();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseDamage = this.VALUE_BY_LEVEL;
        APPreMod = GetStat(GetFlatMagicDamageMod, Owner);
        APPostMod = Math(0.55, MO_MULTIPLY, 0 + (APPreMod ?? 0));
        FinalDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (APPostMod ?? 0));
        BreakSpellShields(Target);
        ApplyDamage(Attacker, Target, 0 + (FinalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        ApplySilence(Owner, Target, 0.5);
        ForEachUnitInTargetArea(Owner, Owner, 2000, "AffectFriends AffectMinions AffectHeroes AffectUntargetable ", "ViktorChaosStormAOE", true, (Unit) => {
            SpellEffectCreate(hi, default, "Viktor_ChaosStorm_hit.troy", default, TEAM_NEUTRAL, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, "Head", default, Target, "Spine", default, true, false, false, false, false, default, default);
        });
        If(HitResult, default, CO_EQUAL, default, HIT_Dodge, () => {
            HitResult = HIT_Normal;
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        AttackDmg = GetTotalAttackDamage(Owner);
        Combo1DamageLeet = this.VALUE_BY_LEVEL;
        Combo1Damage = Math(0 + (Combo1DamageLeet ?? 0), MO_ADD, 0 + (AttackDmg ?? 0));
        Count = GetBuffCountFromAll(Owner, "XenZhaoComboCounter");
        SpellEffectCreate(bye, default, "xenZiou_ChainAttack_03.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
            ComboDamageCrit = Math(0 + (AttackDmg ?? 0), MO_MULTIPLY, 2);
            Combo1Damage = Math(0 + (Combo1DamageLeet ?? 0), MO_ADD, 0 + (ComboDamageCrit ?? 0));
        });
        ApplyDamage(Attacker, Target, 0 + (Combo1Damage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        SpellBuffRemove(Attacker, "XenZhaoComboAutoFinish", Attacker, default);
        BreakSpellShields(Target);
        SpellBuffAdd(Owner, Target, "XenZhaoKnockup", 1, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Stun, 0, true, false, default, default);
        If(HitResult, default, CO_EQUAL, default, HIT_Dodge, () => {
            HitResult = HIT_Normal;
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        AttackDmg = GetTotalAttackDamage(Owner);
        Combo1DamageLeet = this.VALUE_BY_LEVEL;
        Combo1Damage = Math(0 + (Combo1DamageLeet ?? 0), MO_ADD, 0 + (AttackDmg ?? 0));
        SpellEffectCreate(bye, default, "xenZiou_ChainAttack_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
            ComboDamageCrit = Math(0 + (AttackDmg ?? 0), MO_MULTIPLY, 2);
            Combo1Damage = Math(0 + (Combo1DamageLeet ?? 0), MO_ADD, 0 + (ComboDamageCrit ?? 0));
        });
        ApplyDamage(Attacker, Target, 0 + (Combo1Damage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        SpellBuffRemove(Attacker, "XenZhaoComboAuto", Attacker, default);
        SpellBuffAdd(Attacker, Attacker, "XenZhaoComboAutoFinish", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        IssueOrder(Attacker, AI_ATTACKTO, default, Target);
        If(HitResult, default, CO_EQUAL, default, HIT_Dodge, () => {
            HitResult = HIT_Normal;
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        AttackDmg = GetTotalAttackDamage(Owner);
        Combo1DamageLeet = this.VALUE_BY_LEVEL;
        Combo1Damage = Math(0 + (Combo1DamageLeet ?? 0), MO_ADD, 0 + (AttackDmg ?? 0));
        SpellEffectCreate(bye, default, "xenZiou_ChainAttack_cas_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(bye, default, "xenZiou_ChainAttack_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffRemove(Owner, "XenZhaoComboTarget", Owner, default);
        SpellBuffAdd(Attacker, Attacker, "XenZhaoComboAuto", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
            ComboDamageCrit = Math(0 + (AttackDmg ?? 0), MO_MULTIPLY, 2);
            Combo1Damage = Math(0 + (Combo1DamageLeet ?? 0), MO_ADD, 0 + (ComboDamageCrit ?? 0));
        });
        ApplyDamage(Attacker, Target, 0 + (Combo1Damage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        IssueOrder(Attacker, AI_ATTACKTO, default, Target);
        SpellEffectCreate(this.targetParticle, default, "xenZiou_AudaciousCharge_tar_unit_instant.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
        TargetPos = GetUnitPosition(Target);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        NextBuffVars.DamageDealt = this.VALUE_BY_LEVEL;
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.Distance = Distance;
        NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Target, Attacker, "XenZhaoSweep", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyAssistMarker(Owner, Target, 10);
        SpellBuffAdd(Owner, Target, "GalioIdolOfDurandMarker", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        BreakSpellShields(Target);
        ApplyTaunt(Owner, Target, 2);
        NextBuffVars.BonusGold = this.VALUE_BY_LEVEL;
        NextBuffVars.ArmorReduction = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, default, default, default, default);
        Count = GetBuffCountFromCaster(Target, Target, "VolleyAttack");
        If(Count, default, CO_EQUAL, default, 0, () => {
            IsStealthed = GetStatus(Target, GetStealthed);
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                SpellEffectCreate(part, default, "bowmaster_BasicAttack_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, false, default, default, default, default, default, default);
                SpellBuffAdd(Target, Target, "VolleyAttack", 9, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, default, default);
                BreakSpellShields(Target);
                BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                BonusDamage = this.VALUE_BY_LEVEL;
                BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, default);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                    NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                    SpellBuffAdd(Owner, Target, "FrostArrow", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, default, default);
                });
                DestroyMissile(MissileNetworkID);
            });
            Else(() => {
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    SpellEffectCreate(part, default, "bowmaster_BasicAttack_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, false, default, default, default, default, default, default);
                    SpellBuffAdd(Target, Target, "VolleyAttack", 9, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, default, default);
                    BreakSpellShields(Target);
                    BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    BonusDamage = this.VALUE_BY_LEVEL;
                    BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                    ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, default);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                        NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                        SpellBuffAdd(Owner, Target, "FrostArrow", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, default, default);
                    });
                    DestroyMissile(MissileNetworkID);
                });
                Else(() => {
                    CanSee = CanSeeTarget(Owner, Target);
                    If(CanSee, default, CO_EQUAL, default, true, () => {
                        SpellEffectCreate(part, default, "bowmaster_BasicAttack_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, false, default, default, default, default, default, default);
                        SpellBuffAdd(Target, Target, "VolleyAttack", 9, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, default, default);
                        BreakSpellShields(Target);
                        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                        BonusDamage = this.VALUE_BY_LEVEL;
                        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                        ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, default);
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                            NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                            SpellBuffAdd(Owner, Target, "FrostArrow", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, default, default);
                        });
                        DestroyMissile(MissileNetworkID);
                    });
                });
            });
        });
        TeamID = GetTeamID(default);
        Level = GetLevel(Owner);
        HealthPerc = this.VALUE_BY_LEVEL;
        TargetHealth = GetPAROrHealth(Target, GetHealth, PAR_MANA);
        HealthDamage = Math(0 + (TargetHealth ?? 0), MO_MULTIPLY, 0 + (HealthPerc ?? 0));
        HealthDamage = Math(400, MO_MIN, 0 + (HealthDamage ?? 0));
        HealthDamage = Math(2, MO_MAX, 0 + (HealthDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (HealthDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "JarvanIVMartialCadenceCheck", 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellEffectCreate(c, default, "jarvincritattack_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        RemoveOverrideAutoAttack(Owner, false);
        Count = GetBuffCountFromAll(Owner, "JarvanIVCataclysm");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            SpellBuffClear(Owner, "JarvanIVCataclysm");
            SpellBuffClear(Owner, "JarvanIVCataclysmAttack");
        });
        Else(() => {
            SpellBuffAdd(Target, Owner, "JarvanIVCataclysm", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "UnstoppableForceMarker", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Target, "JarvanIVCataclysmVisibility", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "JarvanIVCataclysmSound", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
            Distance = DistanceBetweenObjects("Attacker", "Target");
            TargetPos = GetUnitPosition(Target);
            Move(Owner, TargetPos, 2000, 150, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 700, FACE_MOVEMENT_DIRECTION);
            SetSlotSpellCooldownTimeVer2(1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseDamage = this.VALUE_BY_LEVEL;
        PhysPreMod = GetStat(GetFlatPhysicalDamageMod, Owner);
        PhysPostMod = Math(1.5, MO_MULTIPLY, 0 + (PhysPreMod ?? 0));
        DamageToDeal = Math(0 + (PhysPostMod ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, true, true, Attacker);
        SpellBuffAdd(Attacker, Attacker, "JarvanIVCataclysmCheck", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "UnstoppableForceMarker", Owner, 0);
        IfHasBuff(Owner, Owner, "DeathsCaress", () => {
            SpellBuffRemove(Owner, "DeathsCaress", Owner, default);
        });
        Else(() => {
            SpellCast(Owner, Owner, Owner, Owner, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        });
        AbilityPower = GetStat(GetFlatMagicDamageMod, Target);
        ArmorAmount = this.VALUE_BY_LEVEL;
        BonusHealth = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.9);
        TotalArmorAmount = Math(0 + (BonusHealth ?? 0), MO_ADD, 0 + (ArmorAmount ?? 0));
        NextBuffVars.TotalArmorAmount = TotalArmorAmount;
        NextBuffVars.FinalArmorAmount = TotalArmorAmount;
        NextBuffVars.Ticktimer = 10;
        SpellBuffAdd(Attacker, Target, "DeathsCaress", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0.9, 0, false, false, Attacker);
        ApplyStun(Attacker, Target, 1.5);
        NextBuffVars.LifestealPercent = this.VALUE_BY_LEVEL;
        NextBuffVars.HealPercent = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "Cannibalism", 1, 1, 20, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "Enrage", () => {
            SpellBuffRemove(Owner, "Enrage", Owner, 0);
        });
        Else(() => {
            NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
            NextBuffVars.BonusDamageIncrement = 10;
            SpellBuffAdd(Attacker, Owner, "Enrage", 1, 1, 20000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        TeamID = GetTeamID(default);
        SpellBuffAdd(Attacker, Owner, "ViktorPowerTransfer", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseDamage = this.VALUE_BY_LEVEL;
        APVAL = GetStat(GetFlatMagicDamageMod, Owner);
        APBONUS = Math(0 + (APVAL ?? 0), MO_MULTIPLY, 0.65);
        CharVars.TotalDamage = Math(0 + (APBONUS ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            CharVars.IsChampTarget = true;
            ApplyDamage(Attacker, Target, 0 + (CharVars.TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Attacker);
        });
        Else(() => {
            CharVars.IsChampTarget = true;
            ApplyDamage(Attacker, Target, 0 + (CharVars.TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Attacker);
        });
        TargetPos = GetUnitPosition(Target);
        SpellCast(Owner, Owner, default, default, true, 2, ExtraSlots, 1, true, true, false, false, false, TargetPos);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                SpellBuffAdd(Owner, Owner, "FrostArrowApplicator", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        DebugSay(Owner, "execute", default);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                DebugSay(Owner, "add buff", default);
                SpellBuffAdd(Owner, Owner, default, 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, default, default, default);
            });
        });
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, default);
        TeamID = GetTeamID(default);
        PAR = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        BaseDamage = this.VALUE_BY_LEVEL;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        AoEDamage = this.VALUE_BY_LEVEL;
        BonusDamage = Math(0 + (PAR ?? 0), MO_MULTIPLY, 0.08);
        TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        AoEDamage = Math(0 + (TotalDamage ?? 0), MO_MULTIPLY, 0 + (AoEDamage ?? 0));
        OwnerTeam = GetTeamID(default);
        TargetTeam = GetTeamID(default);
        If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
            ApplyDamage(Attacker, Target, 0 + (TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.2, 1, false, false, Attacker);
        });
        Else(() => {
            SpellBuffAdd(Attacker, Target, "ViktorPowerTransferReturn", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "FrostShot", () => {
            SpellBuffRemove(Owner, "FrostShot", Owner, 0);
        });
        Else(() => {
            NextBuffVars.ManaCostPerAttack = 8;
            SpellBuffAdd(Attacker, Target, default, 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        RavenPosition = GetPointByUnitFacingOffset(Owner, 100, 0);
        TeamID = GetTeamID(default);
        Other3 = SpawnMinion("HiddenMinion", "SwainBeam", "idle.lua", RavenPosition, TeamID ?? TEAM_ORDER, false, true, false, true, true, true, 0, default, false, Owner, default);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = 0;
        NextBuffVars.DamagePerHalfSecond = this.VALUE_BY_LEVEL;
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Owner, Target, "SwainBeamDamage", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, default, default);
            SpellBuffAdd(Owner, Owner, "SwainBeamSelf", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
            SpellBuffAdd(Target, Other3, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "SwainBeamSelf", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            IfHasBuff(Target, Nothing, "ResistantSkin", () => {
                SpellBuffAdd(Target, Owner, "SwainBeamDamageMinionNashor", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
            });
            Else(() => {
                SpellBuffAdd(Owner, Target, "SwainBeamDamageMinion", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
                SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
            });
            SpellBuffAdd(Target, Other3, "SwainBeamMinion", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
        });
        SpellEffectCreate(ar, default, "swain_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(ar, default, "swain_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.DrainedBool = false;
        SpellEffectCreate(ar, default, "swain_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        SpellCast(Attacker, Owner, Attacker, Owner, true, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, TargetPos);
        IsTargetable = GetStatus(Attacker, GetTargetable);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            NextBuffVars.DrainPercent = 0.75;
        });
        Else(() => {
            NextBuffVars.DrainPercent = 0.25;
        });
        If(IsTargetable, default, CO_NOT_EQUAL, default, true, () => {
            SpellEffectCreate(ar, default, "swain_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
        });
        SpellBuffAdd(Owner, Owner, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.7, 1, false, false, Attacker);
        ApplySilence(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0));
        SealSpellSlot(1, SpellSlots, Owner, true, default);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellCast(Owner, Target, Target, Target, false, 3, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, true, default);
        SpellBuffRemove(Owner, "PickACard", Owner, default);
        SpellCast(Owner, Target, Target, Target, false, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, true, default);
        SpellBuffRemove(Owner, "PickACard", Owner, default);
        If(Rnd1, default, CO_LESS_THAN, default, 0.34, () => {
            NextBuffVars.Counter = 0;
            SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "BlueCardLock");
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0.005);
        });
        ElseIf(Rnd1, default, CO_LESS_THAN, default, 0.67, () => {
            NextBuffVars.Counter = 2;
            SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "RedCardLock");
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0.005);
        });
        Else(() => {
            NextBuffVars.Counter = 4;
            SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "GoldCardLock");
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0.005);
        });
        NextBuffVars.WillRemove = false;
        SpellBuffAdd(Owner, Target, "PickACard_tracker", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "PickACard", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, default);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = 0;
        SpellBuffAdd(Attacker, Target, "Slow", 1, 100, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, default, default, default);
        SealSpellSlot(1, SpellSlots, Owner, true, default);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = 0;
        SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        baseDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (baseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, default);
        SpellCast(Owner, Target, Target, Target, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, true, default);
        SpellBuffRemove(Owner, "PickACard", Owner, default);
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_DEAD, default, default, () => {
                BreakSpellShields(Target);
                SpellEffectCreate(asdf1, default, "PickaCard_blue_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
            totalDamage = GetTotalAttackDamage(Owner);
            BonusDamage = this.VALUE_BY_LEVEL;
            damageToDeal = Math(0 + (totalDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
            SpellBuffAdd(Target, Owner, "CardmasterBlueCardMana", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (damageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.4, 1, false, false, Attacker);
            ApplyDamage(Attacker, Target, 0, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        });
        Else(() => {
            baseDamage = GetStat(GetBaseAttackDamage, Attacker);
            ApplyDamage(Attacker, Target, 0 + (baseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
            SpellEffectCreate(a, default, "soraka_infuse_ally_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        });
        SealSpellSlot(1, SpellSlots, Owner, true, default);
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        AttackDamage = GetTotalAttackDamage(Owner);
        BonusDamage = this.VALUE_BY_LEVEL;
        RedCardDamage = Math(0 + (AttackDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            ApplyDamage(Attacker, Target, 0, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
            SpellEffectCreate(arrm8y, default, "PickaCard_red_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, default, default, default);
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                ApplyDamage(Attacker, Target, 0 + (RedCardDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
            });
        });
        Else(() => {
            baseDamage = GetStat(GetBaseAttackDamage, Attacker);
            SpellEffectCreate(arrm8y, default, "PickaCard_red_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPosition, Nothing, default, TargetPosition, false, default, default, false, default, default, default);
            ApplyDamage(Attacker, Target, 0 + (baseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        });
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Attacker, Target, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (RedCardDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, "CardmasterSlow", 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        TeamID = GetTeamID(default);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            BreakSpellShields(Target);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            totalDamage = GetTotalAttackDamage(Owner);
            BonusDamage = this.VALUE_BY_LEVEL;
            GoldCardDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (totalDamage ?? 0));
            ApplyDamage(Attacker, Target, 0, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
            ApplyDamage(Attacker, Target, 0 + (GoldCardDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.4, 1, false, false, Attacker);
            SpellEffectCreate(arrm8y, default, "PickaCard_yellow_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                ApplyStun(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0));
            });
        });
        Else(() => {
            baseDamage = GetStat(GetBaseAttackDamage, Attacker);
            ApplyDamage(Attacker, Target, 0 + (baseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
            TargetPosition = GetCastSpellTargetPos();
            SpellEffectCreate(arrm8y, default, "PickaCard_yellow_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPosition, Nothing, default, default, true, default, default, default, default, default, default);
        });
        NextBuffVars.DoTDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.SwainMultiplier = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, default, default);
        NextBuffVars.SpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.BonusSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        NextBuffVars.numAttacks = this.VALUE_BY_LEVEL;
        NextBuffVars.bonusDamage = this.VALUE_BY_LEVEL;
        OverrideAutoAttack(0, ExtraSlots, Owner, 0 + (Level ?? 0), false);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 12, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "TwitchSprayAndPray", 10, 0 + (NextBuffVars.numAttacks ?? 0), 12, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        NextBuffVars.KnockBackDistance = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Attacker, Target, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellEffectCreate(b, default, "tristana_bustershot_unit_impact.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            SpellBuffAdd(Attacker, Unit, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
        });
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1.5, 1, false, false, Attacker);
        HitResult = HIT_Critical;
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        MundoID = GetSkinID(Owner);
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            MinDamage = this.VALUE_BY_LEVEL;
            NextBuffVars.MoveMod = this.VALUE_BY_LEVEL;
            DamageMod = this.VALUE_BY_LEVEL;
            MaxDamage = this.VALUE_BY_LEVEL;
            Health = GetPAROrHealth(Target, GetHealth, PAR_MANA);
            PercentDamage = Math(0 + (Health ?? 0), MO_MULTIPLY, 0 + (DamageMod ?? 0));
            tempDamage = Math(0 + (MinDamage ?? 0), MO_MAX, 0 + (PercentDamage ?? 0));
            DamageDealt = Math(0 + (tempDamage ?? 0), MO_MIN, 0 + (MaxDamage ?? 0));
            ApplyDamage(Attacker, Target, 0 + (DamageDealt ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Target, default, 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            DestroyMissile(MissileNetworkID);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            HealthReturn = this.VALUE_BY_LEVEL;
            IncHealth(Owner, 0 + (HealthReturn ?? 0), Owner);
            If(MundoID, default, CO_EQUAL, default, 4, () => {
                SpellEffectCreate(hit, default, "dr_mundo_as_mundo_infected_cleaver_tar", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(hit, default, "dr_mundo_infected_cleaver_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            });
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                MinDamage = this.VALUE_BY_LEVEL;
                NextBuffVars.MoveMod = this.VALUE_BY_LEVEL;
                DamageMod = this.VALUE_BY_LEVEL;
                MaxDamage = this.VALUE_BY_LEVEL;
                Health = GetPAROrHealth(Target, GetHealth, PAR_MANA);
                PercentDamage = Math(0 + (Health ?? 0), MO_MULTIPLY, 0 + (DamageMod ?? 0));
                tempDamage = Math(0 + (MinDamage ?? 0), MO_MAX, 0 + (PercentDamage ?? 0));
                DamageDealt = Math(0 + (tempDamage ?? 0), MO_MIN, 0 + (MaxDamage ?? 0));
                ApplyDamage(Attacker, Target, 0 + (DamageDealt ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, false, false, Attacker);
                SpellBuffAdd(Attacker, Target, default, 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
                DestroyMissile(MissileNetworkID);
                If(MundoID, default, CO_EQUAL, default, 4, () => {
                    SpellEffectCreate(hit, default, "dr_mundo_as_mundo_infected_cleaver_tar", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
                });
                Else(() => {
                    SpellEffectCreate(hit, default, "dr_mundo_infected_cleaver_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
                });
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                HealthReturn = this.VALUE_BY_LEVEL;
                IncHealth(Owner, 0 + (HealthReturn ?? 0), Owner);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    MinDamage = this.VALUE_BY_LEVEL;
                    NextBuffVars.MoveMod = this.VALUE_BY_LEVEL;
                    DamageMod = this.VALUE_BY_LEVEL;
                    MaxDamage = this.VALUE_BY_LEVEL;
                    Health = GetPAROrHealth(Target, GetHealth, PAR_MANA);
                    PercentDamage = Math(0 + (Health ?? 0), MO_MULTIPLY, 0 + (DamageMod ?? 0));
                    tempDamage = Math(0 + (MinDamage ?? 0), MO_MAX, 0 + (PercentDamage ?? 0));
                    DamageDealt = Math(0 + (tempDamage ?? 0), MO_MIN, 0 + (MaxDamage ?? 0));
                    ApplyDamage(Attacker, Target, 0 + (DamageDealt ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, false, false, Attacker);
                    SpellBuffAdd(Attacker, Target, default, 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
                    DestroyMissile(MissileNetworkID);
                    If(MundoID, default, CO_EQUAL, default, 4, () => {
                        SpellEffectCreate(hit, default, "dr_mundo_as_mundo_infected_cleaver_tar", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
                    });
                    Else(() => {
                        SpellEffectCreate(hit, default, "dr_mundo_infected_cleaver_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
                    });
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    HealthReturn = this.VALUE_BY_LEVEL;
                    IncHealth(Owner, 0 + (HealthReturn ?? 0), Owner);
                });
            });
        });
        IssueOrder(Owner, AI_ATTACKTO, default, Target);
        SpellBuffRemove(Owner, "DetonatingShot", Owner, 0);
        NextBuffVars.dotdmg = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "ExplosiveShotDebuff", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 1, true, false, false, default);
        SpellBuffAdd(Target, Target, "Internal_50MS", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "GrievousWound", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AllyAttackSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Attacker, "OnTheHunt", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        percentOfAttack = CharVars.percentOfAttack;
        totalDamage = GetTotalAttackDamage(Owner);
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        BonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
        BonusDamage = Math(1.1, MO_MULTIPLY, 0 + (BonusDamage ?? 0));
        AP = GetStat(GetFlatMagicDamageMod, Owner);
        APDamage = Math(0.5, MO_MULTIPLY, 0 + (AP ?? 0));
        DamageToDeal = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (APDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + (percentOfAttack ?? 0), 0, 0, false, false, Attacker);
        CharVars.percentOfAttack = Math(0 + (CharVars.percentOfAttack ?? 0), MO_MULTIPLY, 0.8);
        CharVars.percentOfAttack = Math(0 + (CharVars.percentOfAttack ?? 0), MO_MAX, 0.4);
        SpellEffectCreate(afa, default, "SpiralBlade_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, false, false, false, false, default, default);
        TwitchTeamId = GetTeamID(default);
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        TwitchSkinID = GetSkinID(Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(TwitchSkinID, default, CO_EQUAL, default, 4, () => {
                SpellEffectCreate(a, default, "twitch_gangster_sprayandPray_tar.troy", default, TwitchTeamId ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
            ElseIf(TwitchSkinID, default, CO_EQUAL, default, 5, () => {
                SpellEffectCreate(a, default, "twitch_punk_sprayandPray_tar.troy", default, TwitchTeamId ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "twitch_sprayandPray_tar.troy", default, TwitchTeamId ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Owner);
        TargetNum = GetCastInfo(GetCastSpellTargetsHitPlusOne);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
        TotalAD = Math(0 + (BaseAttackDamage ?? 0), MO_ADD, 0 + (BonusAD ?? 0));
        MultipliedAD = Math(0 + (TotalAD ?? 0), MO_MULTIPLY, 1);
        BaseDamage = this.VALUE_BY_LEVEL;
        DamageToDeal = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (MultipliedAD ?? 0));
        SpellBuffRemove(Attacker, "Ricochet", Attacker, 0);
        If(TargetNum, default, CO_EQUAL, default, 1, () => {
            ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        });
        Else(() => {
            Counter = 1;
            DamagePercent = 1;
            While(Counter, default, CO_LESS_THAN, TargetNum, default, () => {
                DamagePercent = Math(0 + (DamagePercent ?? 0), MO_MULTIPLY, 0.8);
                Counter = Math(0 + (Counter ?? 0), MO_ADD, 1);
            });
            ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 0 + (DamagePercent ?? 0), 0, 0, false, false, Attacker);
        });
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        IfHasBuff(Owner, Owner, "HideInShadows", () => {
            SpellBuffRemove(Owner, "HideInShadows", Owner, default);
            SpellBuffRemove(Owner, "HideInShadows_internal", Owner, default);
        });
        Else(() => {
            SpellEffectCreate(NextBuffVars.a, default, "twitch_invis_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
            NextBuffVars.InitialTime = GetTime();
            NextBuffVars.TimeLastHit = GetTime();
            NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
            NextBuffVars.StealthDuration = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Owner, "HideInShadows_internal", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        HitResult = HIT_Critical;
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BBBaseDamage = this.VALUE_BY_LEVEL;
        totalDamage = GetTotalAttackDamage(Owner);
        baseDamage = GetStat(GetBaseAttackDamage, Owner);
        bonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (baseDamage ?? 0));
        bbBonusDamage = Math(0 + (bonusDamage ?? 0), MO_MULTIPLY, 0.8);
        DamageVar = Math(0 + (bbBonusDamage ?? 0), MO_ADD, 0 + (BBBaseDamage ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        KIDamage = this.VALUE_BY_LEVEL;
        DamageVar = Math(0 + (DamageVar ?? 0), MO_ADD, 0 + (KIDamage ?? 0));
        BBCounter = GetCastInfo(GetCastSpellTargetsHitPlusOne);
        IfHasBuff(Owner, Owner, "KillerInstinct", () => {
            SpellBuffRemove(Owner, "KillerInstinct", Owner, default);
            SpellBuffAdd(Attacker, Owner, "KillerInstinctBuff2", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "KillerInstinctBuff2", () => {
            SpellBuffAdd(Target, Target, "Internal_50MS", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Target, "GrievousWound", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            TargetNum = GetCastInfo(GetCastSpellTargetsHitPlusOne);
            ApplyDamage(Attacker, Target, 0 + (DamageVar ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.35, 1, false, false, Attacker);
        });
        Else(() => {
            BBCount = Math(0 + (BBCounter ?? 0), MO_SUBTRACT, 1);
            inverseVar = Math(0 + (BBCount ?? 0), MO_MULTIPLY, 0.1);
            percentVar = Math(1, MO_SUBTRACT, 0 + (inverseVar ?? 0));
            ApplyDamage(Attacker, Target, 0 + (DamageVar ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + (percentVar ?? 0), 0.35, 1, false, false, Attacker);
        });
        DaggerBase = this.VALUE_BY_LEVEL;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        KIDamage = this.VALUE_BY_LEVEL;
        totalDamage = GetTotalAttackDamage(Owner);
        baseDamage = GetStat(GetBaseAttackDamage, Owner);
        bonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (baseDamage ?? 0));
        dlBonusDamage = Math(0 + (bonusDamage ?? 0), MO_MULTIPLY, 0.5);
        DamageToDeal = Math(0 + (dlBonusDamage ?? 0), MO_ADD, 0 + (DaggerBase ?? 0));
        DamageToDeal = Math(0 + (DamageToDeal ?? 0), MO_ADD, 0 + (KIDamage ?? 0));
        ApplyDamage(Owner, Target, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.25, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        ProperDamage = this.VALUE_BY_LEVEL;
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "KennenMarkofStorm", 5, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (ProperDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.75, 1, false, false, Attacker);
            SpellEffectCreate(gfasdf, default, "Kennen_ts_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, default, default, false, false, default, default);
            DestroyMissile(MissileNetworkID);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                BreakSpellShields(Target);
                SpellBuffAdd(Attacker, Target, "KennenMarkofStorm", 5, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
                ApplyDamage(Attacker, Target, 0 + (ProperDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.75, 1, false, false, Attacker);
                SpellEffectCreate(gfasdf, default, "Kennen_ts_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, default, default, false, false, default, default);
                DestroyMissile(MissileNetworkID);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    BreakSpellShields(Target);
                    SpellBuffAdd(Attacker, Target, "KennenMarkofStorm", 5, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
                    ApplyDamage(Attacker, Target, 0 + (ProperDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.75, 1, false, false, Attacker);
                    SpellEffectCreate(gfasdf, default, "Kennen_ts_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, default, default, false, false, default, default);
                    DestroyMissile(MissileNetworkID);
                });
            });
        });
        SpellBuffAdd(Owner, Owner, "BrandWildfire", 5, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        DoOnce = false;
        BaseDamage = this.VALUE_BY_LEVEL;
        Count = GetBuffCountFromAll(Owner, "BrandWildfire");
        If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 4, () => {
            ForEachUnitInTargetAreaRandom(Attacker, Target, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "BrandWildfireMissile", false, 10, (Unit) => {
                If(DoOnce, default, CO_EQUAL, default, false, () => {
                    If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                        IsStealthed = GetStatus(Unit, GetStealthed);
                        If(IsStealthed, default, CO_EQUAL, default, false, () => {
                            AttackerPos = GetUnitPosition(Target);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                            IfHasBuff(Target, Attacker, "BrandAblaze", () => {
                                SpellCast(Attacker, Unit, default, default, true, 7, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                            });
                            Else(() => {
                                SpellCast(Attacker, Unit, default, default, true, 7, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                            });
                            DoOnce = true;
                        });
                        Else(() => {
                            CanSee = CanSeeTarget(Attacker, Unit);
                            If(CanSee, default, CO_EQUAL, default, true, () => {
                                AttackerPos = GetUnitPosition(Target);
                                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                                IfHasBuff(Target, Attacker, "BrandAblaze", () => {
                                    SpellCast(Attacker, Unit, default, default, true, 7, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                                });
                                Else(() => {
                                    SpellCast(Attacker, Unit, default, default, true, 7, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                                });
                                DoOnce = true;
                            });
                        });
                    });
                });
            });
        });
        IfHasBuff(Target, Owner, "BrandAblaze", () => {
            BrandSkinID = GetSkinID(Attacker);
            TeamID = GetTeamID(default);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar_frost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 0, false, false, Attacker);
        });
        Else(() => {
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 0, false, false, Attacker);
            BrandSkinID = GetSkinID(Attacker);
            TeamID = GetTeamID(default);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar_frost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        APMod = GetStat(GetFlatMagicDamageMod, Attacker);
        APMod = Math(0 + (APMod ?? 0), MO_MULTIPLY, 0.325);
        IncHealth(Target, 0 + (APMod ?? 0) + (this.VALUE_BY_LEVEL ?? 0), Attacker);
        SpellEffectCreate(self, default, "BriefHeal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Target, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        ApplyAssistMarker(Attacker, Target, 10);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            BrandSkinID = GetSkinID(Owner);
            TeamID = GetTeamID(default);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(a, default, "BrandBasicAttack_Frost_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "BrandBasicAttack_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "Spine", default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        SpellBuffAdd(Owner, Owner, "BrandWildfire", 5, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        BaseDamage = this.VALUE_BY_LEVEL;
        DoOnce = false;
        Count = GetBuffCountFromAll(Owner, "BrandWildfire");
        If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 4, () => {
            ForEachUnitInTargetAreaRandom(Attacker, Target, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "BrandWildfireMissile", false, 10, (Unit) => {
                If(DoOnce, default, CO_EQUAL, default, false, () => {
                    If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                        IsStealthed = GetStatus(Unit, GetStealthed);
                        If(IsStealthed, default, CO_EQUAL, default, false, () => {
                            AttackerPos = GetUnitPosition(Target);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                            IfHasBuff(Target, Attacker, "BrandAblaze", () => {
                                SpellCast(Attacker, Unit, default, default, true, 6, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                            });
                            Else(() => {
                                SpellCast(Attacker, Unit, default, default, true, 5, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                            });
                            DoOnce = true;
                        });
                        Else(() => {
                            CanSee = CanSeeTarget(Attacker, Unit);
                            If(CanSee, default, CO_EQUAL, default, true, () => {
                                AttackerPos = GetUnitPosition(Target);
                                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                                IfHasBuff(Target, Attacker, "BrandAblaze", () => {
                                    SpellCast(Attacker, Unit, default, default, true, 6, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                                });
                                Else(() => {
                                    SpellCast(Attacker, Unit, default, default, true, 5, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                                });
                                DoOnce = true;
                            });
                        });
                    });
                });
            });
        });
        IfHasBuff(Target, Owner, "BrandAblaze", () => {
            BrandSkinID = GetSkinID(Attacker);
            TeamID = GetTeamID(default);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar_frost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 0, false, false, Attacker);
        });
        Else(() => {
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 0, false, false, Attacker);
            BrandSkinID = GetSkinID(Attacker);
            TeamID = GetTeamID(default);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar_frost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            BrandSkinID = GetSkinID(Owner);
            TeamID = GetTeamID(default);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(a, default, "BrandBasicAttack_Frost_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "BrandBasicAttack_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "Spine", default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            BrandSkinID = GetSkinID(Owner);
            TeamID = GetTeamID(default);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(a, default, "BrandCritAttack_Frost_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "BrandCritAttack_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "Spine", default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        TeamID = GetTeamID(default);
        SpellBaseDamage = this.VALUE_BY_LEVEL;
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            DestroyMissile(MissileNetworkID);
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "BrandSearParticle", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            IfHasBuff(Target, Owner, "BrandAblaze", () => {
                ApplyStun(Attacker, Target, 2);
            });
            ApplyDamage(Attacker, Target, 0 + (SpellBaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.65, 0, false, false, Attacker);
            SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                DestroyMissile(MissileNetworkID);
                BreakSpellShields(Target);
                SpellBuffAdd(Attacker, Target, "BrandSearParticle", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                IfHasBuff(Target, Owner, "BrandAblaze", () => {
                    ApplyStun(Attacker, Target, 2);
                });
                ApplyDamage(Attacker, Target, 0 + (SpellBaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.65, 0, false, false, Attacker);
                SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    DestroyMissile(MissileNetworkID);
                    BreakSpellShields(Target);
                    SpellBuffAdd(Attacker, Target, "BrandSearParticle", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    IfHasBuff(Target, Owner, "BrandAblaze", () => {
                        ApplyStun(Attacker, Target, 2);
                    });
                    ApplyDamage(Attacker, Target, 0 + (SpellBaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0.65, 0, false, false, Attacker);
                    SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                });
            });
        });
        SpellBuffClear(Owner, "BrandWildfire");
        SpellBuffAdd(Target, Owner, "BrandWildfire", 5, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        DoOnce = false;
        DamageToDeal = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetAreaRandom(Attacker, Target, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", default, false, 10, (Unit) => {
            If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                If(DoOnce, default, CO_NOT_EQUAL, default, true, () => {
                    IsStealthed = GetStatus(Unit, GetStealthed);
                    If(IsStealthed, default, CO_EQUAL, default, false, () => {
                        AttackerPos = GetUnitPosition(Target);
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                        IfHasBuff(Target, Attacker, "BrandAblaze", () => {
                            SpellCast(Attacker, Unit, default, default, true, 4, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, AttackerPos);
                        });
                        Else(() => {
                            SpellCast(Attacker, Unit, default, default, true, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, AttackerPos);
                        });
                        DoOnce = true;
                    });
                    Else(() => {
                        CanSee = CanSeeTarget(Attacker, Unit);
                        If(CanSee, default, CO_EQUAL, default, true, () => {
                            AttackerPos = GetUnitPosition(Target);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                            IfHasBuff(Target, Attacker, "BrandAblaze", () => {
                                SpellCast(Attacker, Unit, default, default, true, 4, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, AttackerPos);
                            });
                            Else(() => {
                                SpellCast(Attacker, Unit, default, default, true, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, AttackerPos);
                            });
                            DoOnce = true;
                        });
                    });
                });
            });
        });
        IfHasBuff(Target, Owner, "BrandAblaze", () => {
            BrandSkinID = GetSkinID(Attacker);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar_frost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 0, false, false, Attacker);
        });
        Else(() => {
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 0, false, false, Attacker);
            BrandSkinID = GetSkinID(Attacker);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar_frost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        SpellBuffAdd(Owner, Owner, "BrandWildfire", 5, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        BaseDamage = this.VALUE_BY_LEVEL;
        DoOnce = false;
        Count = GetBuffCountFromAll(Owner, "BrandWildfire");
        If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 4, () => {
            DoOnce = false;
            ForEachUnitInTargetAreaRandom(Attacker, Target, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, 10, (Unit) => {
                If(DoOnce, default, CO_EQUAL, default, false, () => {
                    If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                        IsStealthed = GetStatus(Unit, GetStealthed);
                        If(IsStealthed, default, CO_EQUAL, default, false, () => {
                            AttackerPos = GetUnitPosition(Target);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                            IfHasBuff(Target, Attacker, "BrandAblaze", () => {
                                SpellCast(Attacker, Unit, default, default, true, 5, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                            });
                            Else(() => {
                                SpellCast(Attacker, Unit, default, default, true, 4, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                            });
                            DoOnce = true;
                        });
                        Else(() => {
                            CanSee = CanSeeTarget(Attacker, Unit);
                            If(CanSee, default, CO_EQUAL, default, true, () => {
                                AttackerPos = GetUnitPosition(Target);
                                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                                IfHasBuff(Target, Attacker, "BrandAblaze", () => {
                                    SpellCast(Attacker, Unit, default, default, true, 5, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                                });
                                Else(() => {
                                    SpellCast(Attacker, Unit, default, default, true, 4, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                                });
                                DoOnce = true;
                            });
                        });
                    });
                });
            });
        });
        IfHasBuff(Target, Owner, "BrandAblaze", () => {
            BrandSkinID = GetSkinID(Attacker);
            TeamID = GetTeamID(default);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar_frost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 0, false, false, Attacker);
        });
        Else(() => {
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 0, false, false, Attacker);
            BrandSkinID = GetSkinID(Attacker);
            TeamID = GetTeamID(default);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar_frost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        BrandSkinID = GetSkinID(Attacker);
        TeamID = GetTeamID(default);
        If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
            SpellEffectCreate(VarA, default, "BrandConflagration_tar_frost.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(VarA, default, "BrandConflagration_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.55, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        ProperDamage = this.VALUE_BY_LEVEL;
        BreakSpellShields(Target);
        SpellBuffAdd(Attacker, Target, "KennenMarkofStorm", 5, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (ProperDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 1, false, false, Attacker);
        SpellBuffAdd(Owner, Owner, "BrandWildfire", 5, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        BaseDamage = this.VALUE_BY_LEVEL;
        DoOnce = false;
        Count = GetBuffCountFromAll(Owner, "BrandWildfire");
        If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 4, () => {
            ForEachUnitInTargetAreaRandom(Attacker, Target, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, 10, (Unit) => {
                If(DoOnce, default, CO_EQUAL, default, false, () => {
                    If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                        IsStealthed = GetStatus(Unit, GetStealthed);
                        If(IsStealthed, default, CO_EQUAL, default, false, () => {
                            AttackerPos = GetUnitPosition(Target);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                            IfHasBuff(Target, Attacker, "BrandAblaze", () => {
                                SpellCast(Attacker, Unit, default, default, true, 4, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                            });
                            Else(() => {
                                SpellCast(Attacker, Unit, default, default, true, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                            });
                            DoOnce = true;
                        });
                        Else(() => {
                            CanSee = CanSeeTarget(Attacker, Unit);
                            If(CanSee, default, CO_EQUAL, default, true, () => {
                                AttackerPos = GetUnitPosition(Target);
                                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                                IfHasBuff(Target, Attacker, "BrandAblaze", () => {
                                    SpellCast(Attacker, Unit, default, default, true, 4, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                                });
                                Else(() => {
                                    SpellCast(Attacker, Unit, default, default, true, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                                });
                                DoOnce = true;
                            });
                        });
                    });
                });
            });
        });
        IfHasBuff(Target, Owner, "BrandAblaze", () => {
            BrandSkinID = GetSkinID(Attacker);
            TeamID = GetTeamID(default);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar_frost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 0, false, false, Attacker);
        });
        Else(() => {
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 0, false, false, Attacker);
            BrandSkinID = GetSkinID(Attacker);
            TeamID = GetTeamID(default);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar_frost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetUnitPosition(Target);
        Other3 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, default, true, Attacker, default);
        SpellBuffAdd(Attacker, Other3, "BrandScorchGround", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        DamageAmount = GetTotalAttackDamage(Owner);
        ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        RemoveOverrideAutoAttack(Owner, false);
        SpellBuffRemove(Owner, "BrandScorch", Owner, default);
        SpellBuffAdd(Owner, Owner, "BrandWildfire", 5, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        BaseDamage = this.VALUE_BY_LEVEL;
        DoOnce = false;
        Count = GetBuffCountFromAll(Owner, "BrandWildfire");
        If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 4, () => {
            ForEachUnitInTargetAreaRandom(Attacker, Target, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "BrandWildfireMissile", false, 10, (Unit) => {
                If(DoOnce, default, CO_EQUAL, default, false, () => {
                    If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                        IsStealthed = GetStatus(Unit, GetStealthed);
                        If(IsStealthed, default, CO_EQUAL, default, false, () => {
                            AttackerPos = GetUnitPosition(Target);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                            IfHasBuff(Target, Attacker, "BrandAblaze", () => {
                                SpellCast(Attacker, Unit, default, default, true, 7, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                            });
                            Else(() => {
                                SpellCast(Attacker, Unit, default, default, true, 6, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                            });
                            DoOnce = true;
                        });
                        Else(() => {
                            CanSee = CanSeeTarget(Attacker, Unit);
                            If(CanSee, default, CO_EQUAL, default, true, () => {
                                AttackerPos = GetUnitPosition(Target);
                                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                                IfHasBuff(Target, Attacker, "BrandAblaze", () => {
                                    SpellCast(Attacker, Unit, default, default, true, 7, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                                });
                                Else(() => {
                                    SpellCast(Attacker, Unit, default, default, true, 6, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, AttackerPos);
                                });
                                DoOnce = true;
                            });
                        });
                    });
                });
            });
        });
        IfHasBuff(Target, Owner, "BrandAblaze", () => {
            BrandSkinID = GetSkinID(Attacker);
            TeamID = GetTeamID(default);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar_frost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 0, false, false, Attacker);
        });
        Else(() => {
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 0, false, false, Attacker);
            BrandSkinID = GetSkinID(Attacker);
            TeamID = GetTeamID(default);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar_frost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(AblazeHitEffect, default, "BrandConflagration_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        BrandSkinID = GetSkinID(Attacker);
        TeamID = GetTeamID(default);
        If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
            SpellEffectCreate(VarA, default, "BrandConflagration_buf_frost.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(VarA, default, "BrandConflagration_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        IfHasBuff(Target, Owner, "BrandAblaze", () => {
            SpellBuffAdd(Attacker, Target, default, 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.55, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        Multiplier = Math(0 + (CharVars.numTideStacks ?? 0), MO_MULTIPLY, 0.25);
        Multiplier = Math(0 + (Multiplier ?? 0), MO_ADD, 1);
        BaseDamage = this.VALUE_BY_LEVEL;
        FinalDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0 + (Multiplier ?? 0));
        BreakSpellShields(Target);
        ApplyDamage(Owner, Target, 0 + (FinalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.45, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        VladimirSkinID = GetSkinID(Owner);
        If(VladimirSkinID, default, CO_EQUAL, default, 5, () => {
            SpellEffectCreate(a, default, "VladTidesofBlood_BloodKing_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(a, default, "VladTidesofBlood_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                        IfHasBuff(Owner, Owner, "KennenDoubleStrikeLive", () => {
                            SpellBuffAdd(Owner, Target, "KennenMarkofStorm", 5, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                            DamageMod = this.VALUE_BY_LEVEL;
                            AttackDamage = GetTotalAttackDamage(Owner);
                            ProcDamage = Math(0 + (AttackDamage ?? 0), MO_MULTIPLY, 0 + (DamageMod ?? 0));
                            ApplyDamage(Attacker, Target, 0 + (AttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
                            ApplyDamage(Attacker, Target, 0 + (ProcDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                            SpellBuffRemove(Owner, "KennenDoubleStrikeLive", Owner, default);
                            RemoveOverrideAutoAttack(Owner, true);
                            CharVars.Count = 0;
                        });
                        Else(() => {
                            AttackDamage = GetTotalAttackDamage(Owner);
                            ApplyDamage(Attacker, Target, 0 + (AttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
                        });
                    });
                    Else(() => {
                        AttackDamage = GetTotalAttackDamage(Owner);
                        ApplyDamage(Attacker, Target, 0 + (AttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
                    });
                });
                Else(() => {
                    AttackDamage = GetTotalAttackDamage(Owner);
                    ApplyDamage(Attacker, Target, 0 + (AttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
                });
            });
        });
        NextBuffVars.MoveSpeedMod = -0.3;
        ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectEnemies AffectNeutral AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellBuffAdd(Attacker, Unit, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
        });
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell4", 0.5, Owner, false, true, true);
        TeamofOwner = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        VladSkinID = GetSkinID(Owner);
        If(VladSkinID, default, CO_EQUAL, default, 5, () => {
            If(TeamofOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellEffectCreate(Particle, default, "VladHemoplague_BloodKing_nova.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Target, Owner, default, Target, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(Particle, default, "VladHemoplague_BloodKing_nova.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Target, Owner, default, Target, true, false, false, false, false, default, default);
            });
        });
        Else(() => {
            If(TeamofOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellEffectCreate(Particle, default, "VladHemoplague_nova.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Target, Owner, default, Target, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(Particle, default, "VladHemoplague_nova.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Target, Owner, default, Target, true, false, false, false, false, default, default);
            });
        });
        NextBuffVars.DamagePerLevel = this.VALUE_BY_LEVEL;
        NextBuffVars.DamageIncrease = this.VALUE_BY_LEVEL;
        NextBuffVars.TargetPos = TargetPos;
        ForEachUnitInTargetArea(Owner, Target, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellBuffAdd(Attacker, Unit, "VladimirHemoplagueDebuff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
        });
        TargetPos = GetCastSpellTargetPos();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 1, false, false, Attacker);
        SpellCast(Attacker, Owner, Attacker, Owner, true, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, TargetPos);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        BaseHeal = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Attacker);
        AbilityPowerMod = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.25);
        TotalHeal = Math(0 + (AbilityPowerMod ?? 0), MO_ADD, 0 + (BaseHeal ?? 0));
        IncHealth(Target, 0 + (TotalHeal ?? 0), Attacker);
        SpellEffectCreate(ar, default, "VampHeal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, false, false, false, false, default, default);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        FaceDirection(Owner, Target);
        Distance = DistanceBetweenObjects("Owner", "Target");
        finalDistance = Math(0 + (Distance ?? 0), MO_ADD, 0);
        finalDistance = Math(0 + (finalDistance ?? 0), MO_ADD, 250);
        TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (finalDistance ?? 0), 0);
        Temp = IsPathable(TargetPos);
        If(Temp, default, CO_EQUAL, default, false, () => {
            finalDistance = Math(0 + (finalDistance ?? 0), MO_SUBTRACT, 200);
        });
        TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (finalDistance ?? 0), 0);
        TeleportToPosition(Owner, TargetPos);
        DamageVar = this.VALUE_BY_LEVEL;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        KIDamage = this.VALUE_BY_LEVEL;
        DamageVar = Math(0 + (DamageVar ?? 0), MO_ADD, 0 + (KIDamage ?? 0));
        IfHasBuff(Owner, Owner, "KillerInstinct", () => {
            NextBuffVars.DamageReduction = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Attacker, Owner, "ShadowStepDodge", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffRemove(Owner, "KillerInstinct", Owner, 0);
        });
        If(Target, default, CO_DIFFERENT_TEAM, Owner, default, () => {
            SpellEffectCreate(PH, default, "katarina_shadowStep_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
            ApplyDamage(Attacker, Target, 0 + (DamageVar ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.75, 1, false, false, Attacker);
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                IssueOrder(Owner, AI_ATTACKTO, default, Target);
            });
        });
        Else(() => {
            IfHasBuff(Target, Nothing, "SharedWardBuff", () => {
                SpellBuffAdd(Attacker, Target, "Destealth", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        HitResult = HIT_Critical;
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        NextBuffVars.MotaDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.EnergyReturn = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (NextBuffVars.MotaDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.4, 1, false, false, Attacker);
        NextBuffVars.VampPercent = CharVars.VampPercent;
        IfHasBuff(Owner, Owner, "AkaliTwinAP", () => {
            SpellBuffAdd(Owner, Owner, "AkaliShadowSwipeHealingParticle", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IfNotHasBuff(Target, Owner, "RivenLightsaberMissileDebuff", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            SpellBuffAdd(Attacker, Target, "RivenLightsaberMissileDebuff", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            BreakSpellShields(Target);
            HealthPercent = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
            BonusRatio = Math(1, MO_SUBTRACT, 0 + (HealthPercent ?? 0));
            BonusRatio = Math(0 + (BonusRatio ?? 0), MO_DIVIDE, 0.75);
            BonusRatio = Math(0 + (BonusRatio ?? 0), MO_MIN, 1);
            BonusRatio = Math(2, MO_MULTIPLY, 0 + (BonusRatio ?? 0));
            Multiplier = Math(1, MO_ADD, 0 + (BonusRatio ?? 0));
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + (Multiplier ?? 0), 0, 0.6, false, false, Attacker);
        });
        IfNotHasBuff(Target, Owner, "RivenLightsaberMissileDebuff", () => {
            SpellBuffAdd(Attacker, Target, "RivenLightsaberMissileDebuff", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            BreakSpellShields(Target);
            HealthPercent = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
            BonusRatio = Math(1, MO_SUBTRACT, 0 + (HealthPercent ?? 0));
            BonusRatio = Math(0 + (BonusRatio ?? 0), MO_DIVIDE, 0.75);
            BonusRatio = Math(0 + (BonusRatio ?? 0), MO_MIN, 1);
            BonusRatio = Math(2, MO_MULTIPLY, 0 + (BonusRatio ?? 0));
            Multiplier = Math(1, MO_ADD, 0 + (BonusRatio ?? 0));
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + (Multiplier ?? 0), 0, 0.6, false, false, Attacker);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        });
        Count = GetBuffCountFromAll(Owner, "AkaliShadowDance");
        If(Count, default, CO_GREATER_THAN, default, 3, () => {
            SpellBuffRemove(Owner, "AkaliShadowDance", Owner, 0 + (CharVars.DanceTimerCooldown ?? 0));
        });
        Else(() => {
            SpellBuffRemove(Owner, "AkaliShadowDance", Owner, 0);
        });
        SpellEffectCreate(SmokeBomb, default, "akali_shadowDance_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(p3, default, "akali_shadowDance_return_02.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(p3, default, "akali_shadowDance_return.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        MoveSpeed = GetStat(GetMovementSpeed, Owner);
        dashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 1600);
        Distance = DistanceBetweenObjects("Owner", "Target");
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.Distance = Distance;
        NextBuffVars.dashSpeed = dashSpeed;
        NextBuffVars.DamageVar = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Target, Owner, "AkaliShadowDanceKick", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        CritChance = GetStat(GetFlatCritChanceMod, Attacker);
        If(CritChance, default, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
            HitResult = HIT_Critical;
        });
        Else(() => {
            HitResult = HIT_Normal;
        });
        BreakSpellShields(Target);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.GoldGain = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ParBaseDamage = this.VALUE_BY_LEVEL;
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        BaseDamage = Math(1, MO_MULTIPLY, 0 + (BaseDamage ?? 0));
        DamageVar = Math(0 + (ParBaseDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (DamageVar ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        BonusDamage = this.VALUE_BY_LEVEL;
        AkaliDamage = GetTotalAttackDamage(Owner);
        AkaliAP = GetStat(GetFlatMagicDamageMod, Owner);
        AkaliAP = Math(0.3, MO_MULTIPLY, 0 + (AkaliAP ?? 0));
        AkaliDamage = Math(0 + (AkaliDamage ?? 0), MO_MULTIPLY, 0.6);
        DamageToDeal = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (AkaliDamage ?? 0));
        DamageToDeal = Math(0 + (AkaliAP ?? 0), MO_ADD, 0 + (DamageToDeal ?? 0));
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            ApplyDamage(Owner, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, true, false, Attacker);
        });
        ElseIf(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            ApplyDamage(Owner, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, true, false, Attacker);
        });
        Else(() => {
            CanSee = CanSeeTarget(Owner, Target);
            If(CanSee, default, CO_EQUAL, default, true, () => {
                ApplyDamage(Owner, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, true, false, Attacker);
            });
        });
        TeamID = GetTeamID(default);
        BaseDamage = this.VALUE_BY_LEVEL;
        Count = GetBuffCountFromAll(Target, "Chilled");
        If(Count, default, CO_GREATER_THAN, default, 0, () => {
            BaseDamage = Math(2, MO_MULTIPLY, 0 + (BaseDamage ?? 0));
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, 1, false, false, default);
            SpellEffectCreate(SmokeBomb, default, "cryo_FrostBite_chilled_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 1, false, false, default);
        });
        TeamID = GetTeamID(default);
        percentOfAttack = CharVars.percentOfAttack;
        totalDamage = GetTotalAttackDamage(Owner);
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        BonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
        BonusDamage = Math(1, MO_MULTIPLY, 0 + (BonusDamage ?? 0));
        SpellEffectCreate(asdf, default, "Ezreal_TrueShot_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, false, false, false, false, default, default);
        SpellBuffAdd(Attacker, Attacker, "EzrealRisingSpellForce", 5, 1, 6 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        PhysPreMod = GetStat(GetFlatPhysicalDamageMod, Owner);
        PhysPostMod = Math(1, MO_MULTIPLY, 0 + (PhysPreMod ?? 0));
        APPreMod = GetStat(GetFlatMagicDamageMod, Owner);
        APPostMod = Math(0.9, MO_MULTIPLY, 0 + (APPreMod ?? 0));
        ApplyDamage(Owner, Target, 0 + (BonusDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + (percentOfAttack ?? 0), 0.9, 1, false, false, Attacker);
        CharVars.percentOfAttack = Math(0 + (CharVars.percentOfAttack ?? 0), MO_MULTIPLY, 0.92);
        CharVars.percentOfAttack = Math(0 + (CharVars.percentOfAttack ?? 0), MO_MAX, 0.3);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
        ApplySilence(Attacker, Target, 0.5);
        TeamID = GetTeamID(default);
        cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellCooldownTime);
        cooldown1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellCooldownTime);
        cooldown2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellCooldownTime);
        cooldown3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellCooldownTime);
        SpellBaseDamage = this.VALUE_BY_LEVEL;
        BaseDamage = GetTotalAttackDamage(Owner);
        AttackDamage = Math(1, MO_MULTIPLY, 0 + (BaseDamage ?? 0));
        DamageVar = Math(0 + (SpellBaseDamage ?? 0), MO_ADD, 0 + (AttackDamage ?? 0));
        AP = GetStat(GetFlatMagicDamageMod, Owner);
        FinalAP = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.2);
        FinalDamage = Math(0 + (DamageVar ?? 0), MO_ADD, 0 + (FinalAP ?? 0));
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            If(cooldown, default, CO_GREATER_THAN, default, 0, () => {
                newCooldown = Math(0 + (cooldown ?? 0), MO_SUBTRACT, 1);
                SetSlotSpellCooldownTimeVer2(0 + (newCooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker, false);
            });
            If(cooldown1, default, CO_GREATER_THAN, default, 0, () => {
                newCooldown1 = Math(0 + (cooldown1 ?? 0), MO_SUBTRACT, 1);
                SetSlotSpellCooldownTimeVer2(0 + (newCooldown1 ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker, false);
            });
            If(cooldown2, default, CO_GREATER_THAN, default, 0, () => {
                newCooldown2 = Math(0 + (cooldown2 ?? 0), MO_SUBTRACT, 1);
                SetSlotSpellCooldownTimeVer2(0 + (newCooldown2 ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker, false);
            });
            If(cooldown3, default, CO_GREATER_THAN, default, 0, () => {
                newCooldown3 = Math(0 + (cooldown3 ?? 0), MO_SUBTRACT, 1);
                SetSlotSpellCooldownTimeVer2(0 + (newCooldown3 ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker, false);
            });
            BreakSpellShields(Target);
            ApplyDamage(Attacker, Target, 0 + (FinalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
            SpellEffectCreate(gragas, default, "Ezreal_mysticshot_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            DestroyMissile(MissileNetworkID);
            SpellBuffAdd(Attacker, Attacker, "EzrealRisingSpellForce", 5, 1, 6 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                If(cooldown, default, CO_GREATER_THAN, default, 0, () => {
                    newCooldown = Math(0 + (cooldown ?? 0), MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(0 + (newCooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker, false);
                });
                If(cooldown1, default, CO_GREATER_THAN, default, 0, () => {
                    newCooldown1 = Math(0 + (cooldown1 ?? 0), MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(0 + (newCooldown1 ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker, false);
                });
                If(cooldown2, default, CO_GREATER_THAN, default, 0, () => {
                    newCooldown2 = Math(0 + (cooldown2 ?? 0), MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(0 + (newCooldown2 ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker, false);
                });
                If(cooldown3, default, CO_GREATER_THAN, default, 0, () => {
                    newCooldown3 = Math(0 + (cooldown3 ?? 0), MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(0 + (newCooldown3 ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker, false);
                });
                BreakSpellShields(Target);
                ApplyDamage(Attacker, Target, 0 + (FinalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
                SpellEffectCreate(gragas, default, "Ezreal_mysticshot_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
                DestroyMissile(MissileNetworkID);
                SpellBuffAdd(Attacker, Attacker, "EzrealRisingSpellForce", 5, 1, 6 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    If(cooldown, default, CO_GREATER_THAN, default, 0, () => {
                        newCooldown = Math(0 + (cooldown ?? 0), MO_SUBTRACT, 1);
                        SetSlotSpellCooldownTimeVer2(0 + (newCooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker, false);
                    });
                    If(cooldown1, default, CO_GREATER_THAN, default, 0, () => {
                        newCooldown1 = Math(0 + (cooldown1 ?? 0), MO_SUBTRACT, 1);
                        SetSlotSpellCooldownTimeVer2(0 + (newCooldown1 ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker, false);
                    });
                    If(cooldown2, default, CO_GREATER_THAN, default, 0, () => {
                        newCooldown2 = Math(0 + (cooldown2 ?? 0), MO_SUBTRACT, 1);
                        SetSlotSpellCooldownTimeVer2(0 + (newCooldown2 ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker, false);
                    });
                    If(cooldown3, default, CO_GREATER_THAN, default, 0, () => {
                        newCooldown3 = Math(0 + (cooldown3 ?? 0), MO_SUBTRACT, 1);
                        SetSlotSpellCooldownTimeVer2(0 + (newCooldown3 ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker, false);
                    });
                    BreakSpellShields(Target);
                    ApplyDamage(Attacker, Target, 0 + (FinalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
                    SpellEffectCreate(gragas, default, "Ezreal_mysticshot_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
                    DestroyMissile(MissileNetworkID);
                    SpellBuffAdd(Attacker, Attacker, "EzrealRisingSpellForce", 5, 1, 6 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
        });
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            Distance = DistanceBetweenObjects("Target", "Attacker");
            Time = Math(0 + (Distance ?? 0), MO_DIVIDE, 1350);
            NextBuffVars.WillRemove = false;
            SpellEffectCreate(ParticleID, default, "FistReturn_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, "head", default, Owner, "R_hand", default, false, false, false, false, false, default, default);
            NextBuffVars.ParticleID = ParticleID;
            SpellBuffAdd(Target, Attacker, default, 1, 1, 0 + (Time ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            BreakSpellShields(Target);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.8, 0, false, false, Attacker);
            ApplyStun(Attacker, Target, 0.6);
            DestroyMissile(MissileNetworkID);
            SpellBuffAdd(Attacker, Target, "RocketGrab2", 1, 1, 0.6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                Distance = DistanceBetweenObjects("Target", "Attacker");
                Time = Math(0 + (Distance ?? 0), MO_DIVIDE, 1350);
                NextBuffVars.WillRemove = false;
                SpellEffectCreate(ParticleID, default, "FistReturn_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, "head", default, Owner, "R_hand", default, false, false, false, false, false, default, default);
                NextBuffVars.ParticleID = ParticleID;
                SpellBuffAdd(Target, Attacker, default, 1, 1, 0 + (Time ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                BreakSpellShields(Target);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, 0, false, false, Attacker);
                ApplyStun(Attacker, Target, 0.6);
                DestroyMissile(MissileNetworkID);
                SpellBuffAdd(Attacker, Target, "RocketGrab2", 1, 1, 0.6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    Distance = DistanceBetweenObjects("Target", "Attacker");
                    Time = Math(0 + (Distance ?? 0), MO_DIVIDE, 1350);
                    NextBuffVars.WillRemove = false;
                    SpellEffectCreate(ParticleID, default, "FistReturn_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, "head", default, Owner, "R_hand", default, false, false, false, false, false, default, default);
                    NextBuffVars.ParticleID = ParticleID;
                    SpellBuffAdd(Target, Attacker, default, 1, 1, 0 + (Time ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Target);
                    ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, 0, false, false, Attacker);
                    ApplyStun(Attacker, Target, 0.6);
                    DestroyMissile(MissileNetworkID);
                    SpellBuffAdd(Attacker, Target, "RocketGrab2", 1, 1, 0.6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                });
            });
        });
        HitResult = HIT_Critical;
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.75, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Attacker, "EzrealRisingSpellForce", 5, 1, 6 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, default, default);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Haste, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "EzrealRisingSpellForce", 5, 1, 6 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        AbilityPower = GetStat(GetFlatMagicDamageMod, Attacker);
        AbilityPowerMod = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.7);
        CasterID = GetTeamID(default);
        CasterID2 = GetTeamID(default);
        SpellEffectCreate(asdf, default, "Ezreal_essenceflux_tar.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "root", default, Target, default, default, true, false, false, false, false, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        AttackSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        If(CasterID, default, CO_EQUAL, CasterID2, default, () => {
            ApplyAssistMarker(Attacker, Target, 10);
            SpellBuffAdd(Attacker, Target, "EzrealEssenceFlux", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        Else(() => {
            NextBuffVars.AttackSpeedModNegative = Math(0 + (AttackSpeedMod ?? 0), MO_MULTIPLY, -1);
            BreakSpellShields(Target);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Target, "EzrealEssenceFluxMissile", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        BreakSpellShields(Target);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Attacker);
        NextBuffVars.MovementSpeedMod = -0.2;
        NextBuffVars.AttackSpeedMod = 0;
        SpellBuffAdd(Attacker, Target, "Chilled", 1, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
        baseDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (baseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 1, 1, false, false, default);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                IfHasBuff(Target, Attacker, "UdyrBearStunCheck", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Attacker, Target, "UdyrBearStunCheck", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
                    BreakSpellShields(Target);
                    ApplyStun(Attacker, Target, 1);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    SpellEffectCreate(c, default, "udyr_bear_slam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
                });
            });
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "Incinerate_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellBaseDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "ShyvanaFireballParticle", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (SpellBaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "ShyvanaFireballMissile", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        SpellBaseDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "ShyvanaFireballParticle", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (SpellBaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 0, false, false, Attacker);
        If(default, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Attacker, Target, "ShyvanaFireballMissile", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        Else(() => {
            SpellBuffAdd(Attacker, Target, "ShyvanaFireballMissileMinion", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        TeamID = GetTeamID(default);
        SpellBaseDamage = this.VALUE_BY_LEVEL;
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            DestroyMissile(MissileNetworkID);
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "ShyvanaFireballParticle", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (SpellBaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 0, false, false, Attacker);
            SpellBuffAdd(Attacker, Target, "ShyvanaFireballMissile", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                DestroyMissile(MissileNetworkID);
                BreakSpellShields(Target);
                SpellBuffAdd(Attacker, Target, "ShyvanaFireballParticle", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                ApplyDamage(Attacker, Target, 0 + (SpellBaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 0, false, false, Attacker);
                SpellBuffAdd(Attacker, Target, "ShyvanaFireballMissile", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    DestroyMissile(MissileNetworkID);
                    BreakSpellShields(Target);
                    SpellBuffAdd(Attacker, Target, "ShyvanaFireballParticle", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    ApplyDamage(Attacker, Target, 0 + (SpellBaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0.6, 0, false, false, Attacker);
                    SpellBuffAdd(Attacker, Target, "ShyvanaFireballMissile", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                });
            });
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "shyvana_flameBreath_dragon_burn.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellBaseDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "ShyvanaFireballParticle", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (SpellBaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "ShyvanaFireballMissile", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
            HitResult = HIT_Normal;
        });
        If(HitResult, default, CO_EQUAL, default, HIT_Miss, () => {
            HitResult = HIT_Normal;
        });
        RagePercent = GetPAROrHealth(Owner, GetPARPercent, PAR_OTHER);
        FuryBonus = false;
        BonusDamage = this.VALUE_BY_LEVEL;
        If(RagePercent, default, CO_GREATER_THAN_OR_EQUAL, default, 0.5, () => {
            FuryBonus = true;
            IncPAR(Owner, -50);
            CurrentFury = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
        });
        BreakSpellShields(Target);
        If(FuryBonus, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Owner, Owner, "RenektonUnlockAnimation", 1, 1, 0.51, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "RenektonUnlockAnimation", 1, 1, 0.3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        BonusPercent = this.VALUE_BY_LEVEL;
        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0 + (BonusPercent ?? 0));
        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0 + (this.VALUE_BY_LEVEL ?? 0), 0, 0 + (BonusPercent ?? 0), false, true, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0 + (this.VALUE_BY_LEVEL ?? 0), 0, 0 + (BonusPercent ?? 0), false, true, Attacker);
            If(FuryBonus, default, CO_EQUAL, default, false, () => {
                ApplyStun(Attacker, Target, 0.75);
            });
        });
        If(FuryBonus, default, CO_EQUAL, default, true, () => {
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0 + (this.VALUE_BY_LEVEL ?? 0), 0, 0 + (BonusPercent ?? 0), false, true, Attacker);
            SpellBuffClear(Owner, "RenektonRageReady");
        });
        If(FuryBonus, default, CO_EQUAL, default, true, () => {
            PostFury = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
            FuryCost = Math(0 + (CurrentFury ?? 0), MO_SUBTRACT, 0 + (PostFury ?? 0));
            IncPAR(Owner, 0 + (FuryCost ?? 0));
            ApplyStun(Attacker, Target, 1.5);
        });
        SpellBuffAdd(Owner, Owner, "RenektonWeaponGlowFade", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetDodgePiercing(Owner, false);
        BreakSpellShields(Target);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.33, 1, false, false, Attacker);
            SpellBuffAdd(Owner, Target, "EvelynnSoulEater", 4, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
        });
        Else(() => {
            ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.33, 1, false, false, Attacker);
        });
        HSCounter = GetCastInfo(GetCastSpellTargetsHitPlusOne);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Attacker, Target, "Malice_marker", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        If(HSCounter, default, CO_EQUAL, default, 2, () => {
            ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.14, default, default, default, default);
        });
        Else(() => {
            ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.28, default, default, default, default);
        });
        If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
            HitResult = HIT_Normal;
        });
        If(HitResult, default, CO_EQUAL, default, HIT_Miss, () => {
            HitResult = HIT_Normal;
        });
        RagePercent = GetPAROrHealth(Owner, GetPARPercent, PAR_OTHER);
        FuryBonus = false;
        BonusDamage = this.VALUE_BY_LEVEL;
        If(RagePercent, default, CO_GREATER_THAN_OR_EQUAL, default, 0.5, () => {
            FuryBonus = true;
            IncPAR(Owner, -50);
            CurrentFury = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
        });
        BreakSpellShields(Target);
        If(FuryBonus, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Owner, Owner, "RenektonUnlockAnimation", 1, 1, 0.51, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "RenektonUnlockAnimation", 1, 1, 0.3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        BonusPercent = this.VALUE_BY_LEVEL;
        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0 + (BonusPercent ?? 0));
        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0 + (this.VALUE_BY_LEVEL ?? 0), 0, 0 + (BonusPercent ?? 0), false, true, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0 + (this.VALUE_BY_LEVEL ?? 0), 0, 0 + (BonusPercent ?? 0), false, true, Attacker);
            If(FuryBonus, default, CO_EQUAL, default, false, () => {
                ApplyStun(Attacker, Target, 0.75);
            });
        });
        If(FuryBonus, default, CO_EQUAL, default, true, () => {
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0 + (this.VALUE_BY_LEVEL ?? 0), 0, 0 + (BonusPercent ?? 0), false, true, Attacker);
            SpellBuffClear(Owner, "RenektonRageReady");
        });
        If(FuryBonus, default, CO_EQUAL, default, true, () => {
            PostFury = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
            FuryCost = Math(0 + (CurrentFury ?? 0), MO_SUBTRACT, 0 + (PostFury ?? 0));
            IncPAR(Owner, 0 + (FuryCost ?? 0));
            ApplyStun(Attacker, Target, 1.5);
        });
        SpellBuffAdd(Owner, Owner, "RenektonWeaponGlowFade", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetDodgePiercing(Owner, false);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, 1, false, false, Attacker);
        NextBuffVars.ArmorMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Shred, 0, true, false, default, default);
        ApplyDamage(Owner, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.14, default, default, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
        SpellBuffRemove(Owner, "RenektonPreExecute", Owner, default);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                RagePercent = GetPAROrHealth(Owner, GetPARPercent, PAR_OTHER);
                If(RagePercent, default, CO_GREATER_THAN_OR_EQUAL, default, 0.5, () => {
                    SpellCast(Attacker, Target, default, default, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, true, default);
                    CharVars.Swung = true;
                });
                Else(() => {
                    SpellCast(Attacker, Target, default, default, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, true, default);
                    CharVars.Swung = true;
                });
            });
        });
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0);
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            SpellBuffAdd(Attacker, Target, default, 1, 1, 0.15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0.33, 0, default, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0.33, 0, default, false, false, default);
        });
        ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0.33, 0, default, false, false, default);
        TeamID = GetTeamID(default);
        baseDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (baseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 1, 1, false, false, Attacker);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.Count = Math(1, MO_ADD, 0 + (this.Count ?? 0));
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(CharVars.Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
                SpellEffectCreate(a, default, "PhoenixBreath_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "goatee", default, Target, default, default, true, default, default, default, default, default, default);
                TargetPos = GetPointByUnitFacingOffset(Owner, 400, 0);
                SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 1, true, true, false, false, false, default);
                CharVars.Count = 0;
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.25, 0, false, false, Attacker);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "ShyvanaDoubleAttackHit", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        temp = GetStatus(Owner, GetStealthed);
        If(temp, default, CO_EQUAL, default, true, () => {
            SpellBuffRemove(Owner, "ShadowWalk", Owner, 0);
            SpellBuffRemove(Owner, "ShadowWalk_internal", Owner, 0);
        });
        Else(() => {
            SpellEffectCreate(Particle, default, "evelyn_invis_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0);
            NextBuffVars.InitialTime = GetTime();
            NextBuffVars.TimeLastHit = GetTime();
            NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
            NextBuffVars.StealthDuration = this.VALUE_BY_LEVEL;
            NextBuffVars.TeamID = this.TeamID;
            NextBuffVars.WillRemove = false;
            SpellBuffAdd(Owner, Owner, "ShadowWalk_internal", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "ShyvanaDoubleAttackHitDragon", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                SpellEffectCreate(a, default, "udyr_tiger_claw_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, default, default, default);
                SpellEffectCreate(agsdg, default, "udyr_tiger_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, default, default, default);
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                NextBuffVars.DrainPercent = this.VALUE_BY_LEVEL;
                NextBuffVars.ManaDrainPercent = Math(0.5, MO_MULTIPLY, 0 + (NextBuffVars.DrainPercent ?? 0));
                SpellEffectCreate(LifestealParticle, default, "ItemLifesteal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(LifestealParticle, default, "globalhit_physical.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
                SpellBuffAdd(Attacker, Attacker, "GlobalDrainMana", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        baseDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (baseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 1, 1, false, false, Attacker);
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        BaseHealth = this.VALUE_BY_LEVEL;
        AbilityPowerMod = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.7);
        ShieldHealth = Math(0 + (AbilityPowerMod ?? 0), MO_ADD, 0 + (BaseHealth ?? 0));
        NextBuffVars.ShieldHealth = ShieldHealth;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_SpellImmunity, 0, true, false, false, default);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        NextBuffVars.MoveSpeedMod = 0.4;
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Haste, 0, true, false, default, default);
        IfHasBuff(Target, Owner, "ItemPlacementMissile", () => {
            DestroyMissile(MissileNetworkID);
        });
        SpellEffectCreate(default, default, "ItemPlacement_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        TargetNum = GetCastInfo(GetCastSpellTargetsHitPlusOne);
        If(TargetNum, default, CO_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Target, "AlphaStrikeMarker", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        NextBuffVars.BaseDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.ChanceToKill = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Target, "AlphaStrikeTarget", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IsStealthed = GetStatus(Target, GetStealthed);
        DamageAmount = this.VALUE_BY_LEVEL;
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            DestroyMissile(MissileNetworkID);
            ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.9, 1, false, false, default);
            SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, default, default);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                DestroyMissile(MissileNetworkID);
                ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.9, 1, false, false, default);
                SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, default, default);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    DestroyMissile(MissileNetworkID);
                    ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.9, 1, false, false, default);
                    SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, default, default);
                });
            });
        });
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            SpellBuffAdd(Attacker, Target, default, 1, 1, 0.15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, default);
        });
        ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, default);
        RemoveOverrideAutoAttack(Owner, false);
        SpellBuffRemove(Owner, "DoubleStrikeIcon", Owner, default);
        SpellBuffAdd(Attacker, Owner, "WujuStyleSuperCharged", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        NextBuffVars.BreakDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.BreakStun = this.VALUE_BY_LEVEL;
        NextBuffVars.Broken = false;
        SpellBuffAdd(Attacker, Target, "SoulShackles", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (NextBuffVars.BreakDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.8, 1, false, false, Attacker);
        NextBuffVars.MoveSpeedMod = -0.2;
        NextBuffVars.AttackSpeedMod = 0;
        SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            TeamID = GetTeamID(default);
            SpellEffectCreate(asffa, default, "nidalee_javelinToss_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            BreakSpellShields(Target);
            Distance = DistanceBetweenObjects("Target", "Owner");
            Multiplicant = Math(0 + (Distance ?? 0), MO_DIVIDE, 1000);
            Multiplicant = Math(0 + (Multiplicant ?? 0), MO_ADD, 1);
            Multiplicant = Math(0 + (Multiplicant ?? 0), MO_MIN, 2.5);
            FinalDamage = Math(0 + (Multiplicant ?? 0), MO_MULTIPLY, 0 + (CharVars.StartingDamage ?? 0));
            ApplyDamage(Attacker, Target, 0 + (FinalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Attacker);
            DestroyMissile(MissileNetworkID);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                TeamID = GetTeamID(default);
                SpellEffectCreate(asffa, default, "nidalee_javelinToss_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
                BreakSpellShields(Target);
                Distance = DistanceBetweenObjects("Target", "Owner");
                Multiplicant = Math(0 + (Distance ?? 0), MO_DIVIDE, 1000);
                Multiplicant = Math(0 + (Multiplicant ?? 0), MO_ADD, 1);
                Multiplicant = Math(0 + (Multiplicant ?? 0), MO_MIN, 2.5);
                FinalDamage = Math(0 + (Multiplicant ?? 0), MO_MULTIPLY, 0 + (CharVars.StartingDamage ?? 0));
                ApplyDamage(Attacker, Target, 0 + (FinalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Attacker);
                DestroyMissile(MissileNetworkID);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    TeamID = GetTeamID(default);
                    SpellEffectCreate(asffa, default, "nidalee_javelinToss_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
                    BreakSpellShields(Target);
                    Distance = DistanceBetweenObjects("Target", "Owner");
                    Multiplicant = Math(0 + (Distance ?? 0), MO_DIVIDE, 1000);
                    Multiplicant = Math(0 + (Multiplicant ?? 0), MO_ADD, 1);
                    Multiplicant = Math(0 + (Multiplicant ?? 0), MO_MIN, 2.5);
                    FinalDamage = Math(0 + (Multiplicant ?? 0), MO_MULTIPLY, 0 + (CharVars.StartingDamage ?? 0));
                    ApplyDamage(Attacker, Target, 0 + (FinalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Attacker);
                    DestroyMissile(MissileNetworkID);
                });
            });
        });
        IfNotHasBuff(Target, Attacker, "OrianaIzunaDamage", () => {
            BreakSpellShields(Target);
            BaseDamage = this.VALUE_BY_LEVEL;
            AP = GetStat(GetFlatMagicDamageMod, Owner);
            BonusDamage = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.5);
            TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
            TotalDamage = Math(1.25, MO_MULTIPLY, 0 + (TotalDamage ?? 0));
            NextBuffVars.TotalDamage = TotalDamage;
            SpellBuffAdd(Attacker, Target, "OrianaIzunaDamage", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "AspectOfTheCougar", () => {
            SpellBuffRemove(Owner, default, Owner, 0);
        });
        Else(() => {
            NextBuffVars.armorMod = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Attacker, Owner, default, 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfNotHasBuff(Target, Nothing, "OrianaIzunaDamaged", () => {
            BaseDamage = this.VALUE_BY_LEVEL;
            AP = GetStat(GetFlatMagicDamageMod, Owner);
            BonusDamage = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.6);
            TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
            TotalDamage = Math(0 + (TotalDamage ?? 0), MO_MULTIPLY, 0 + (CharVars.IzunaPercent ?? 0));
            CharVars.IzunaPercent = Math(0.9, MO_MULTIPLY, 0 + (CharVars.IzunaPercent ?? 0));
            CharVars.IzunaPercent = Math(0.4, MO_MAX, 0 + (CharVars.IzunaPercent ?? 0));
            BreakSpellShields(Target);
            NextBuffVars.TotalDamage = TotalDamage;
            SpellBuffAdd(Attacker, Target, "OrianaIzunaDamage", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "AspectOfTheCougar", () => {
            SpellBuffRemove(Owner, default, Owner, 0);
        });
        Else(() => {
            NextBuffVars.armorMod = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Attacker, Owner, default, 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        WeaponDamage = GetStat(GetFlatPhysicalDamageMod, Owner);
        Damage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (WeaponDamage ?? 0));
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                ApplyDamage(Attacker, Target, 0 + (Damage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 1, default, false, false, default);
            });
            Else(() => {
                TakedownDamage = CharVars.TakedownDamage;
                Damage = Math(0 + (Damage ?? 0), MO_ADD, 0 + (TakedownDamage ?? 0));
                healthPercent = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
                bonusPercent = Math(1, MO_SUBTRACT, 0 + (healthPercent ?? 0));
                bonusPercent = Math(2, MO_MULTIPLY, 0 + (bonusPercent ?? 0));
                bonusPercent = Math(1, MO_ADD, 0 + (bonusPercent ?? 0));
                Damage = Math(0 + (Damage ?? 0), MO_MULTIPLY, 0 + (bonusPercent ?? 0));
                BreakSpellShields(Target);
                ApplyDamage(Attacker, Target, 0 + (Damage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 1, default, true, true, default);
                SpellEffectCreate(default, default, "nidalee_cougar_takedown_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
            });
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (Damage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 1, default, false, false, default);
        });
        SpellBuffRemove(Owner, "Takedown", Owner, default);
        If(Owner, default, CO_IS_TARGET_IN_FRONT_OF_ME, Target, default, () => {
            SpellEffectCreate(HitEffect, default, "nidalee_cougar_swipe_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
            ApplyDamage(Attacker, Target, 0 + (CharVars.SwipeDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
        });
        BaseDamageBlock = this.VALUE_BY_LEVEL;
        SelfAP = GetStat(GetFlatMagicDamageMod, Owner);
        BonusShield = Math(0 + (SelfAP ?? 0), MO_MULTIPLY, 0.4);
        TotalShield = Math(0 + (BonusShield ?? 0), MO_ADD, 0 + (BaseDamageBlock ?? 0));
        HalfShield = Math(0.75, MO_MULTIPLY, 0 + (TotalShield ?? 0));
        If(Target, default, CO_NOT_EQUAL, Owner, default, () => {
            IfHasBuff(Target, Owner, "OrianaRedactTarget", () => {
                If(Target, default, CO_IS_NOT_DEAD, default, default, () => {
                    SpellBuffAdd(Owner, Target, "OrianaGhost", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    NextBuffVars.DamageBlock = TotalShield;
                    SpellBuffAdd(Owner, Target, "OrianaRedactShield", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                    SpellBuffClear(Target, "OrianaRedactTarget");
                });
                DestroyMissile(MissileNetworkID);
            });
            ElseIf(Target, default, CO_DIFFERENT_TEAM, Owner, default, () => {
                NextBuffVars.TotalDamage = HalfShield;
                SpellBuffAdd(Attacker, Target, "OrianaRedactDamage", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                
            });
        });
        Else(() => {
            IfHasBuff(Target, Owner, "OrianaRedactTarget", () => {
                If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                    SpellBuffAdd(Owner, Owner, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    NextBuffVars.DamageBlock = TotalShield;
                    SpellBuffAdd(Owner, Owner, "OrianaRedactShield", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                    SpellBuffClear(Target, "OrianaRedactTarget");
                });
                DestroyMissile(MissileNetworkID);
            });
        });
        SpellBuffAdd(Attacker, Attacker, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffClear(Owner, "OrianaReturn");
        PlayAnimation("Spell2", 1.25, Owner, false, false, true);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OrianaGlobalCooldown", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "OrianaRedactTarget", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Deployed = false;
        BaseDamageBlock = this.VALUE_BY_LEVEL;
        SelfAP = GetStat(GetFlatMagicDamageMod, Owner);
        BonusShield = Math(0 + (SelfAP ?? 0), MO_MULTIPLY, 0.7);
        TotalShield = Math(0 + (BonusShield ?? 0), MO_ADD, 0 + (BaseDamageBlock ?? 0));
        ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes ", 1, true, "OrianaGhost", (Unit) => {
            SpellBuffClear(Owner, "OrianaGhostSelf");
            Deployed = true;
            IfHasBuff(Target, Owner, "OrianaGhost", () => {
                NextBuffVars.DamageBlock = TotalShield;
                SpellBuffAdd(Owner, Target, "OrianaRedactShield", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
            Else(() => {
                SpellBuffClear(Unit, "OrianaGhost");
                CastPos = GetUnitPosition(Unit);
                NextBuffVars.DamageBlock = TotalShield;
                SpellBuffAdd(Owner, Owner, "OrianaRedact", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                IfHasBuff(Owner, Owner, "OrianaDesperatePower", () => {
                    SpellCast(Owner, Target, Target, Target, true, 2, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, CastPos);
                });
                Else(() => {
                    SpellCast(Owner, Target, Target, Target, true, 2, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, CastPos);
                });
                NextBuffVars.DamageBlock = TotalShield;
                SpellBuffAdd(Owner, Unit, "OrianaRedactShield", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        If(Deployed, default, CO_EQUAL, default, false, () => {
            If(CharVars.GhostAlive, default, CO_EQUAL, default, true, () => {
                
            });
            ElseIf(Target, default, CO_NOT_EQUAL, Owner, default, () => {
                SpellBuffClear(Owner, "OrianaGhostSelf");
                CastPos = GetUnitPosition(Owner);
                NextBuffVars.DamageBlock = TotalShield;
                SpellBuffAdd(Owner, Owner, "OrianaRedact", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                IfHasBuff(Owner, Owner, "OrianaDesperatePower", () => {
                    SpellCast(Owner, Target, Target, Target, true, 2, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, CastPos);
                });
                Else(() => {
                    SpellCast(Owner, Target, Target, Target, true, 2, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, CastPos);
                });
                NextBuffVars.DamageBlock = TotalShield;
                SpellBuffAdd(Owner, Owner, "OrianaRedactShield", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
            Else(() => {
                NextBuffVars.DamageBlock = TotalShield;
                SpellBuffAdd(Owner, Owner, "OrianaRedactShield", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        NextBuffVars.ASMod = this.VALUE_BY_LEVEL;
        TempAbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        HealthToRestore = this.VALUE_BY_LEVEL;
        HealingBonus = Math(0 + (TempAbilityPower ?? 0), MO_MULTIPLY, 0.7);
        HealthToRestore = Math(0 + (HealingBonus ?? 0), MO_ADD, 0 + (HealthToRestore ?? 0));
        SpellBuffAdd(Attacker, Target, default, 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IncHealth(Target, 0 + (HealthToRestore ?? 0), Owner);
        SetSpellOffsetTarget(1, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        SetSpellOffsetTarget(3, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
            SpellBuffClear(Unit, "OrianaRedactTarget");
        });
        SpellBuffAdd(Owner, Owner, "OrianaGlobalCooldown", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "OrianaRedactTarget", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Deployed = false;
        BaseDamageBlock = this.VALUE_BY_LEVEL;
        SelfAP = GetStat(GetFlatMagicDamageMod, Owner);
        BonusShield = Math(0 + (SelfAP ?? 0), MO_MULTIPLY, 0.4);
        TotalShield = Math(0 + (BonusShield ?? 0), MO_ADD, 0 + (BaseDamageBlock ?? 0));
        ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf AffectUntargetable ", 1, true, "OrianaGhost", (Unit) => {
            SpellBuffClear(Owner, "OrianaGhostSelf");
            SpellBuffClear(Owner, "OrianaBlendDelay");
            Deployed = true;
            IfHasBuff(Target, Owner, "OrianaGhost", () => {
                NextBuffVars.DamageBlock = TotalShield;
                SpellBuffAdd(Owner, Target, "OrianaRedactShield", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
            Else(() => {
                SpellBuffClear(Unit, "OrianaGhost");
                SpellBuffClear(Owner, "OrianaBlendDelay");
                CastPos = GetUnitPosition(Unit);
                TargetPos = GetUnitPosition(Target);
                MinDistance = DistanceBetweenPoints(CastPos, TargetPos);
                If(MinDistance, default, CO_LESS_THAN_OR_EQUAL, default, 100, () => {
                    NextBuffVars.DamageBlock = TotalShield;
                    SpellBuffAdd(Owner, Target, "OrianaRedactShield", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                    If(Target, default, CO_NOT_EQUAL, Owner, default, () => {
                        SpellBuffAdd(Owner, Target, "OrianaGhost", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                    Else(() => {
                        SpellBuffAdd(Owner, Target, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                });
                Else(() => {
                    NextBuffVars.DamageBlock = TotalShield;
                    SpellBuffAdd(Owner, Owner, "OrianaRedact", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    SpellCast(Owner, Target, Target, Target, true, 2, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, CastPos);
                });
            });
        });
        If(Deployed, default, CO_EQUAL, default, false, () => {
            IfHasBuff(Owner, Nothing, "OriannaBallTracker", () => {
                SpellBuffClear(Owner, "OriannaBallTracker");
                TargetPos = GetUnitPosition(Target);
                CastPos = CharVars.BallPosition;
                MinDistance = DistanceBetweenPoints(CastPos, TargetPos);
                If(MinDistance, default, CO_LESS_THAN_OR_EQUAL, default, 100, () => {
                    NextBuffVars.DamageBlock = TotalShield;
                    SpellBuffAdd(Owner, Target, "OrianaRedactShield", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                    If(Target, default, CO_NOT_EQUAL, Owner, default, () => {
                        SpellBuffAdd(Owner, Target, "OrianaGhost", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                    Else(() => {
                        SpellBuffAdd(Owner, Target, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                });
                Else(() => {
                    NextBuffVars.DamageBlock = TotalShield;
                    SpellBuffAdd(Owner, Owner, "OrianaRedact", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    SpellCast(Owner, Target, Target, Target, true, 2, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, CastPos);
                });
            });
            ElseIf(Target, default, CO_NOT_EQUAL, Owner, default, () => {
                SpellBuffClear(Owner, "OrianaGhostSelf");
                SpellBuffClear(Owner, "OrianaBlendDelay");
                CastPos = GetUnitPosition(Owner);
                SpellBuffAdd(Owner, Owner, "OrianaRedact", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SpellCast(Owner, Target, Target, Target, true, 2, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, CastPos);
            });
            Else(() => {
                NextBuffVars.DamageBlock = TotalShield;
                SpellBuffAdd(Owner, Owner, "OrianaRedactShield", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        PlayAnimation("Spell3", 0, Owner, false, true, false);
        TeamID = GetTeamID(default);
        Pos = GetPointByUnitFacingOffset(Owner, 375, 0);
        NextBuffVars.Pos = Pos;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(default, default, "nidalee_cougarPounce_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellBuffAdd(Attacker, Target, "OrianaGhostEnemy", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        DestroyMissile(MissileNetworkID);
        BreakSpellShields(Target);
        NextBuffVars.DamageDealt = this.VALUE_BY_LEVEL;
        NextBuffVars.Survivability = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "TrundlePain", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "TrundlePainShred", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, false, false, default);
        If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
            HitResult = HIT_Normal;
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        Scaling = this.VALUE_BY_LEVEL;
        AttackerPos = GetUnitPosition(Attacker);
        TargetPos = GetUnitPosition(Target);
        Distance = DistanceBetweenObjects("Attacker", "Target");
        TargetPos = GetPointByUnitFacingOffset(Attacker, 50, 0);
        BonusDamage = this.VALUE_BY_LEVEL;
        TotalDamage = GetTotalAttackDamage(Attacker);
        ScaledDamage = Math(0 + (Scaling ?? 0), MO_MULTIPLY, 0 + (TotalDamage ?? 0));
        DtD = Math(0 + (ScaledDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (DtD ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        NextBuffVars.SapVar = this.VALUE_BY_LEVEL;
        NextBuffVars.NegSapVar = this.VALUE_BY_LEVEL;
        SpellEffectCreate(asdf, default, "globalhit_physical.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellBuffAdd(Attacker, Target, "TrundleQDebuff", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "UnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Move(Attacker, TargetPos, 100, 0, 25, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 50, FACE_MOVEMENT_DIRECTION);
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 75, () => {
            PlayAnimation("Spell1a", 0, Attacker, false, true, true);
        });
        Else(() => {
            PlayAnimation("Spell1", 0, Attacker, false, true, true);
        });
        TempAbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        HealthToRestore = this.VALUE_BY_LEVEL;
        NextBuffVars.AstralArmor = this.VALUE_BY_LEVEL;
        HealingBonus = Math(0 + (TempAbilityPower ?? 0), MO_MULTIPLY, 0.45);
        HealthToRestore = Math(0 + (HealingBonus ?? 0), MO_ADD, 0 + (HealthToRestore ?? 0));
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IncHealth(Target, 0 + (HealthToRestore ?? 0), Owner);
        TeamOfOwner = GetTeamID(default);
        IfHasBuff(Attacker, Attacker, "NocturneParanoia", () => {
            If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
                ForEachChampion(TEAM_CHAOS, default, true, (Unit) => {
                    SpellBuffRemove(Unit, "NocturneParanoiaTargeting", Attacker, default);
                });
            });
            Else(() => {
                ForEachChampion(TEAM_ORDER, default, true, (Unit) => {
                    SpellBuffRemove(Unit, "NocturneParanoiaTargeting", Attacker, default);
                });
            });
            OwnerPos = GetUnitPosition(Attacker);
            TargetPos = GetUnitPosition(Target);
            Distance = DistanceBetweenObjects("Owner", "Target");
            NextBuffVars.dashSpeed = 1800;
            NextBuffVars.TargetPos = TargetPos;
            NextBuffVars.Distance = Distance;
            SpellBuffAdd(Owner, Owner, "UnstoppableForceMarker", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellEffectCreate(this.GreenDash, default, "NocturneParanoiaTeamTarget.troy", default, TEAM_CHAOS, 0, 0, TEAM_ORDER, Nothing, false, Target, default, default, Target, default, default, false, default, default, false, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(this.GreenDash, default, "NocturneParanoiaTeamTarget.troy", default, TEAM_ORDER, 0, 0, TEAM_CHAOS, Nothing, false, Target, default, default, Target, default, default, false, default, default, false, default, default, default);
            });
            NextBuffVars.GreenDash = this.GreenDash;
            SpellBuffAdd(Target, Owner, "NocturneParanoiaDash", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0.25, true, false, true, default);
            SpellBuffRemove(Attacker, "NocturneParanoia", Attacker, default);
        });
        TeamID = GetTeamID(default);
        If(Target, default, CO_SAME_TEAM, Owner, default, () => {
            ApplyAssistMarker(Owner, Target, 10);
            If(Target, default, CO_NOT_EQUAL, Owner, default, () => {
                IncPAR(Target, 0 + (this.VALUE_BY_LEVEL ?? 0));
            });
            IncPAR(Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
            SpellEffectCreate(Infuse, default, "soraka_infuse_ally_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            If(Target, default, CO_NOT_EQUAL, Owner, default, () => {
                SpellEffectCreate(Infuse, default, "soraka_infuse_ally_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
            });
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.75, 1, false, false, Attacker);
            ApplySilence(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0));
            SpellEffectCreate(Infuse, default, "soraka_infuse_enemy_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        TeamID = GetTeamID(default);
        SpellPower = GetStat(GetFlatMagicDamageMod, Owner);
        BaseHealthToHeal = this.VALUE_BY_LEVEL;
        SpellPowerBonus = Math(0 + (SpellPower ?? 0), MO_MULTIPLY, 0.7);
        HealthToHeal = Math(0 + (BaseHealthToHeal ?? 0), MO_ADD, 0 + (SpellPowerBonus ?? 0));
        IncHealth(Target, 0 + (HealthToHeal ?? 0), Owner);
        Temp1 = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
        If(Temp1, default, CO_LESS_THAN, default, 1, () => {
            SpellEffectCreate(Infuse, default, "Wish_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            ApplyAssistMarker(Owner, Target, 10);
        });
        NextBuffVars.DamageToDeal = this.VALUE_BY_LEVEL;
        NextBuffVars.StarcallShred = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "StarcallDamage", 1, 1, 0.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell3", 1, Owner, false, false, true);
        BreakSpellShields(Target);
        NextBuffVars.FearDuration = this.VALUE_BY_LEVEL;
        NextBuffVars.BaseDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        NocturneSkinID = GetSkinID(Owner);
        TeamID = GetTeamID(default);
        If(Target, default, CO_EQUAL, Owner, default, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            NextBuffVars.HastePercent = this.VALUE_BY_LEVEL;
            NextBuffVars.BonusAD = this.VALUE_BY_LEVEL;
            TeamID = GetTeamID(default);
            MyPosition = GetUnitPosition(Owner);
            Other3 = SpawnMinion("DarkPath", "testcube", "idle.lua", MyPosition, TeamID ?? TEAM_CASTER, true, true, true, true, false, true, 0, false, true, Nothing, default);
            TargetPos = GetCastSpellTargetPos();
            FaceDirection(Other3, TargetPos);
            SpellBuffAdd(Owner, Other3, default, 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            TeamID2 = GetTeamID(default);
            PhysPreMod = GetStat(GetFlatPhysicalDamageMod, Owner);
            PhysPostMod = Math(0.75, MO_MULTIPLY, 0 + (PhysPreMod ?? 0));
            IsStealthed = GetStatus(Target, GetStealthed);
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    BreakSpellShields(Target);
                    LastPosition = GetPointByUnitFacingOffset(Target, 2000, 0);
                    NextBuffVars.LastPosition = LastPosition;
                    SpellBuffAdd(Owner, Target, "NocturneDuskbringerTrail", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    SpellEffectCreate(targettrail, default, "NocturneDuskbringer_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
                    ApplyDamage(Attacker, Target, 0 + (PhysPostMod ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Attacker);
                    If(NocturneSkinID, default, CO_EQUAL, default, 1, () => {
                        SpellEffectCreate(targettrail, default, "NocturneDuskbringer_frost_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
                    });
                    Else(() => {
                        SpellEffectCreate(targettrail, default, "NocturneDuskbringer_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
                    });
                });
                Else(() => {
                    BreakSpellShields(Target);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    SpellEffectCreate(targettrail, default, "NocturneDuskbringer_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
                    ApplyDamage(Attacker, Target, 0 + (PhysPostMod ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Attacker);
                });
            });
            Else(() => {
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    BreakSpellShields(Target);
                    LastPosition = GetPointByUnitFacingOffset(Target, 2000, 0);
                    NextBuffVars.LastPosition = LastPosition;
                    SpellBuffAdd(Owner, Target, "NocturneDuskbringerTrail", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    SpellEffectCreate(targettrail, default, "NocturneDuskbringer_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
                    SpellEffectCreate(targettrail, default, "NocturneDuskbringer_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
                    ApplyDamage(Attacker, Target, 0 + (PhysPostMod ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Attacker);
                    If(NocturneSkinID, default, CO_EQUAL, default, 1, () => {
                        SpellEffectCreate(targettrail, default, "NocturneDuskbringer_frost_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
                    });
                    Else(() => {
                        SpellEffectCreate(targettrail, default, "NocturneDuskbringer_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
                    });
                });
                Else(() => {
                    CanSee = CanSeeTarget(Owner, Target);
                    If(CanSee, default, CO_EQUAL, default, true, () => {
                        BreakSpellShields(Target);
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                        SpellEffectCreate(targettrail, default, "NocturneDuskbringer_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
                        ApplyDamage(Attacker, Target, 0 + (PhysPostMod ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Attacker);
                    });
                });
            });
        });
        BonusDamage = this.VALUE_BY_LEVEL;
        AkaliDamage = GetTotalAttackDamage(Owner);
        AkaliAP = GetStat(GetFlatMagicDamageMod, Owner);
        AkaliAP = Math(0.3, MO_MULTIPLY, 0 + (AkaliAP ?? 0));
        AkaliDamage = Math(0 + (AkaliDamage ?? 0), MO_MULTIPLY, 0.6);
        DamageToDeal = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (AkaliDamage ?? 0));
        DamageToDeal = Math(0 + (AkaliAP ?? 0), MO_ADD, 0 + (DamageToDeal ?? 0));
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            ApplyDamage(Owner, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, true, false, Attacker);
        });
        ElseIf(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            ApplyDamage(Owner, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, true, false, Attacker);
        });
        Else(() => {
            CanSee = CanSeeTarget(Owner, Target);
            If(CanSee, default, CO_EQUAL, default, true, () => {
                ApplyDamage(Owner, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, true, false, Attacker);
            });
        });
        TeamID = GetTeamID(default);
        SlowPercent = this.VALUE_BY_LEVEL;
        BonusDamage = this.VALUE_BY_LEVEL;
        SupremeDmg = GetTotalAttackDamage(Owner);
        DealtDamage = Math(0 + (SupremeDmg ?? 0), MO_MULTIPLY, 1);
        HitResult = false;
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            TargetPos = GetUnitPosition(Target);
            SpellEffectCreate(Temp, default, "Leona_ShieldOfDaybreak_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, default, default, false, false, default, default);
            SpellEffectCreate(Temp, default, "Leona_ShieldOfDaybreak_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            ApplyDamage(Attacker, Target, 0 + (DealtDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
            BreakSpellShields(Target);
            ApplyDamage(Attacker, Target, 0 + (BonusDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.3, 0, false, true, Attacker);
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                SpellBuffAdd(Attacker, Target, "LeonaSunlight", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                ApplyStun(Attacker, Target, 1);
            });
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (BonusDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.3, 0, false, true, Attacker);
            ApplyDamage(Attacker, Target, 0 + (DealtDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        });
        TeamID = GetTeamID(default);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            ForEachUnitInTargetArea(Attacker, Attacker, 3000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf AffectDead ", "LeonaZenithBladeBuffOrder", true, (Unit) => {
                SpellBuffClear(Unit, "LeonaZenithBladeBuffOrder");
            });
            SpellBuffAdd(Attacker, Target, "LeonaZenithBladeBuffOrder", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        BreakSpellShields(Target);
        SpellBuffAdd(Attacker, Target, "LeonaSunlight", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        DamageToDeal = this.VALUE_BY_LEVEL;
        ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
        If(Target, default, CO_IS_NOT_HERO, default, default, () => {
            SpellEffectCreate(temp, default, "Leona_ZenithBlade_sound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        TargetPos = GetUnitPosition(Target);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        OkayCheckDistance = 0;
        CheckDistance = 0;
        LeapDistance = Math(600, MO_SUBTRACT, 0 + (Distance ?? 0));
        FaceDirection(Owner, Target);
        While(CheckDistance, default, CO_LESS_THAN_OR_EQUAL, LeapDistance, default, () => {
            DoubleCheckDistance = Math(0 + (CheckDistance ?? 0), MO_ADD, 0 + (Distance ?? 0));
            TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (DoubleCheckDistance ?? 0), 0);
            Result = IsPathable(TargetPos);
            If(Result, default, CO_EQUAL, default, false, () => {
                CheckDistance = Math(0 + (CheckDistance ?? 0), MO_ADD, 601);
            });
            Else(() => {
                OkayCheckDistance = CheckDistance ?? 0;
            });
            CheckDistance = Math(0 + (CheckDistance ?? 0), MO_ADD, 25);
        });
        Distance = Math(0 + (Distance ?? 0), MO_ADD, 0 + (OkayCheckDistance ?? 0));
        TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (Distance ?? 0), 0);
        NextBuffVars.DamageDealt = this.VALUE_BY_LEVEL;
        NextBuffVars.OwnerPos = OwnerPos;
        Move(Owner, TargetPos, 1450, 0, 25, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        PlayAnimation("Spell1", 0, Owner, false, false, false);
        SpellBuffAdd(Target, Attacker, default, 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            IssueOrder(Owner, AI_ATTACKTO, default, Target);
        });
        TeamID = GetTeamID(default);
        Level = GetLevel(Owner);
        Heal = this.VALUE_BY_LEVEL;
        Dmg = GetTotalAttackDamage(Owner);
        If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
            MainDmg = Math(0 + (Dmg ?? 0), MO_MULTIPLY, 1.1);
        });
        Else(() => {
            MainDmg = Math(0 + (Dmg ?? 0), MO_MULTIPLY, 1.2);
        });
        ApplyDamage(Attacker, Target, 0 + (MainDmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        IncHealth(Owner, 0 + (Heal ?? 0), Owner);
        Dmg = Math(0 + (Dmg ?? 0), MO_MULTIPLY, 1.2);
        SpellEffectCreate(FadeParticle, default, "NocturneUmbraBlades_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Unit, Target, default, default, true, default, default, false, default, default, default);
        SpellBuffAdd(Attacker, Target, "IfHasBuffCheck", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Attacker, Attacker, 360, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            IfNotHasBuff(Unit, Attacker, "IfHasBuffCheck", () => {
                IsStealthed = GetStatus(Unit, GetStealthed);
                If(IsStealthed, default, CO_EQUAL, default, false, () => {
                    SpellEffectCreate(FadeParticle, default, "NocturneUmbraBlades_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, Unit, Unit, default, default, true, default, default, false, default, default, default);
                    ApplyDamage(Attacker, Unit, 0 + (Dmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, true, Attacker);
                    IncHealth(Owner, 0 + (Heal ?? 0), Owner);
                });
                Else(() => {
                    If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                        SpellEffectCreate(FadeParticle, default, "NocturneUmbraBlades_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, Unit, Unit, default, default, true, default, default, false, default, default, default);
                        ApplyDamage(Attacker, Unit, 0 + (Dmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, true, Attacker);
                        IncHealth(Owner, 0 + (Heal ?? 0), Owner);
                    });
                    Else(() => {
                        CanSee = CanSeeTarget(Owner, Unit);
                        If(CanSee, default, CO_EQUAL, default, true, () => {
                            SpellEffectCreate(FadeParticle, default, "NocturneUmbraBlades_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, Unit, Unit, default, default, true, default, default, false, default, default, default);
                            ApplyDamage(Attacker, Unit, 0 + (Dmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, true, Attacker);
                            IncHealth(Owner, 0 + (Heal ?? 0), Owner);
                        });
                    });
                });
            });
        });
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseDamage = this.VALUE_BY_LEVEL;
        AttackDamage = GetTotalAttackDamage(Owner);
        scaling = 0.85;
        BonusAD = Math(0 + (scaling ?? 0), MO_MULTIPLY, 0 + (AttackDamage ?? 0));
        TotalDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusAD ?? 0));
        HitResult = false;
        BreakSpellShields(Target);
        ApplyDamage(Owner, Target, 0 + (TotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, true, Attacker);
        IfHasBuff(Owner, Owner, "UrgotTerrorCapacitorActive2", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Attacker, Target, "UrgotSlow", 100, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
        });
        SpellBuffAdd(Owner, Target, "UrgotEntropyPassive", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        SpellEffectCreate(asdf, default, "UrgotHeatSeekingMissile_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        DestroyMissile(MissileNetworkID);
        Count = GetBuffCountFromAll(Target, "UrgotSwapMarker");
        If(Count, default, CO_NOT_EQUAL, default, 0, () => {
            DestroyMissile(MissileNetworkID);
        });
        Count = GetBuffCountFromAll(Target, "UrgotSwapMarker");
        If(Count, default, CO_NOT_EQUAL, default, 0, () => {
            DestroyMissile(MissileNetworkID);
        });
        TeamID = GetTeamID(default);
        BaseDamage = this.VALUE_BY_LEVEL;
        AttackDamage = GetTotalAttackDamage(Owner);
        BonusAD = Math(0.85, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
        TotalDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusAD ?? 0));
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            BreakSpellShields(Target);
            ApplyDamage(Owner, Target, 0 + (TotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, true, Attacker);
            IfHasBuff(Owner, Owner, "UrgotTerrorCapacitorActive2", () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Target, "UrgotSlow", 100, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
            });
            DestroyMissile(MissileNetworkID);
            SpellEffectCreate(asdf1, default, "BloodSlash.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, default, default, false, false, default, default);
            SpellEffectCreate(asdf, default, "UrgotHeatSeekingMissile_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            SpellBuffAdd(Owner, Target, "UrgotEntropyPassive", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                BreakSpellShields(Target);
                ApplyDamage(Owner, Target, 0 + (TotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, true, Attacker);
                IfHasBuff(Owner, Owner, "UrgotTerrorCapacitorActive2", () => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                    SpellBuffAdd(Attacker, Target, "UrgotSlow", 100, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
                });
                DestroyMissile(MissileNetworkID);
                SpellEffectCreate(asdf1, default, "BloodSlash.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, default, default, false, false, default, default);
                SpellEffectCreate(asdf, default, "UrgotHeatSeekingMissile_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
                SpellBuffAdd(Owner, Target, "UrgotEntropyPassive", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    BreakSpellShields(Target);
                    ApplyDamage(Owner, Target, 0 + (TotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, true, Attacker);
                    IfHasBuff(Owner, Owner, "UrgotTerrorCapacitorActive2", () => {
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                        SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 1.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
                    });
                    DestroyMissile(MissileNetworkID);
                    SpellEffectCreate(asdf1, default, "BloodSlash.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, default, default, false, false, default, default);
                    SpellEffectCreate(asdf, default, "UrgotHeatSeekingMissile_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
                    SpellBuffAdd(Owner, Target, "UrgotEntropyPassive", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                });
            });
        });
        TeamofOwner = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        GragasSkinID = GetSkinID(Attacker);
        If(GragasSkinID, default, CO_EQUAL, default, 4, () => {
            If(TeamofOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellEffectCreate(Particle, default, "gragas_caskboom_classy.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Target, Owner, default, Target, true, default, default, false, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(Particle, default, "gragas_caskboom_classy.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Target, Owner, default, Target, true, default, default, false, default, default, default);
            });
        });
        Else(() => {
            If(TeamofOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellEffectCreate(Particle, default, "gragas_caskboom.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Target, Owner, default, Target, true, default, default, false, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(Particle, default, "gragas_caskboom.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Target, Owner, default, Target, true, default, default, false, default, default, default);
            });
        });
        ForEachUnitInTargetArea(Owner, Target, 430, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            Center = GetCastSpellTargetPos();
            NextBuffVars.Speed = 900;
            NextBuffVars.Gravity = 5;
            NextBuffVars.Center = Center;
            NextBuffVars.Distance = 900;
            NextBuffVars.IdealDistance = 900;
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, "MoveAwayCollision", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
            If(TeamofOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellEffectCreate(arr, default, "gragas_caskwine_tar.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Unit, default, Unit, Unit, default, default, true, default, default, false, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(arr, default, "gragas_caskwine_tar.troy", default, TEAM_CHAOS, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, Unit, Unit, default, default, true, default, default, false, default, default, default);
            });
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            TargetPos = GetCastSpellTargetPos();
            TeamOfOwner = GetTeamID(default);
            SpellEffectCreate(this.GateParticle, default, "UrgotSwapTarget.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Target, default, default, Target, "root", default, false, default, default, false, false, default, default);
            NextBuffVars.GateParticle = this.GateParticle;
            NextBuffVars.TargetPos = TargetPos;
            FaceDirection(Owner, TargetPos);
            SpellBuffAdd(Owner, Owner, "UrgotSwapMarker", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Target, "UrgotSwapMarker", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Target, Owner, "UrgotSwapMissile", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            DefInc = this.VALUE_BY_LEVEL;
            NextBuffVars.DefInc = DefInc;
            SpellBuffAdd(Attacker, Attacker, "UrgotSwapDef", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "Suppression", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Suppression, 0, true, false, false, default);
            SpellBuffAdd(Owner, Target, "UrgotSwapTarget", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            SpellBuffAdd(Target, Owner, default, 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            SetSlotSpellCooldownTimeVer2(5, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            ManaRefund = 120;
            IncPAR(Owner, 0 + (ManaRefund ?? 0));
        });
        SpellBuffAdd(Owner, Target, default, 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, default, default, default, default);
        TargetPos = GetUnitPosition(Target);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        TeamID = GetTeamID(default);
        buffDuration = this.VALUE_BY_LEVEL;
        SpellEffectCreate(Particle, default, "UrgotPlasmaGrenade_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
        AD = GetStat(GetFlatPhysicalDamageMod, Owner);
        dmg = this.VALUE_BY_LEVEL;
        BonusDamage = Math(0 + (AD ?? 0), MO_MULTIPLY, 0.6);
        TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (dmg ?? 0));
        remainder = Math(0 + (buffDuration ?? 0), MO_MODULO, 0.5);
        ticks = Math(0 + (buffDuration ?? 0), MO_SUBTRACT, 0 + (remainder ?? 0));
        TickDamage = Math(0 + (TotalDamage ?? 0), MO_DIVIDE, 0 + (ticks ?? 0));
        NextBuffVars.ArmorReduced = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Owner, TargetPos, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Unit) => {
            IsStealthed = GetStatus(Unit, GetStealthed);
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                BreakSpellShields(Unit);
                NextBuffVars.TickDamage = TickDamage;
                SpellBuffAdd(Owner, Unit, "UrgotCorrosiveDebuff", 1, 1, 0 + (buffDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, true, false, default);
                SpellBuffAdd(Owner, Unit, default, 1, 1, 0 + (buffDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, true, false, default);
            });
            Else(() => {
                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                    BreakSpellShields(Unit);
                    NextBuffVars.TickDamage = TickDamage;
                    SpellBuffAdd(Owner, Unit, "UrgotCorrosiveDebuff", 1, 1, 0 + (buffDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, true, false, default);
                });
                Else(() => {
                    CanSee = CanSeeTarget(Owner, Unit);
                    If(CanSee, default, CO_EQUAL, default, true, () => {
                        BreakSpellShields(Unit);
                        NextBuffVars.TickDamage = TickDamage;
                        SpellBuffAdd(Owner, Unit, "UrgotCorrosiveDebuff", 1, 1, 0 + (buffDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, true, false, default);
                    });
                });
            });
        });
        DestroyMissile(MissileNetworkID);
        BreakSpellShields(Target);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        MissilePosition = GetMissilePosFromID(MissileNetworkID ?? 0);
        NextBuffVars.MissilePosition = MissilePosition;
        SpellBuffAdd(Attacker, Target, "FizzMarinerDoomBomb", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        CharVars.UltFired = false;
        FaceDirection(Owner, Target);
        NextBuffVars.Damage = this.VALUE_BY_LEVEL;
        Distance = DistanceBetweenObjects("Attacker", "Target");
        factor = Math(0 + (Distance ?? 0), MO_DIVIDE, 650);
        factor = Math(0 + (factor ?? 0), MO_MAX, 0.25);
        factor = Math(0 + (factor ?? 0), MO_MIN, 0.9);
        PlayAnimation("Spell2", 0 + (factor ?? 0), Owner, false, false, false);
        targetPos = GetUnitPosition(Target);
        Move(Owner, targetPos, 1500, 2, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        teamID = GetTeamID(default);
        Other1 = SpawnMinion("placeholder", "TestCube", "idle.lua", Owner, teamID ?? TEAM_UNKNOWN, false, true, false, true, false, true, 0, false, false, Owner, default);
        FaceDirection(Other1, Target);
        SpellBuffAdd(Owner, Target, "AlistarHeadbuttMarker", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other1, Owner, default, 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "AlistarTrample", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        CritChance = GetStat(GetFlatCritChanceMod, Attacker);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BonusDamage = this.VALUE_BY_LEVEL;
        BaseAttackDamage = GetTotalAttackDamage(Owner);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(CritChance, default, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                    HitResult = HIT_Critical;
                    CritDamage = GetStat(GetFlatCritDamageMod, Attacker);
                    CritDamage = Math(0 + (CritDamage ?? 0), MO_ADD, 2);
                    BonusDamage = Math(0 + (BonusDamage ?? 0), MO_DIVIDE, 0 + (CritDamage ?? 0));
                });
                Else(() => {
                    HitResult = HIT_Normal;
                });
            });
            Else(() => {
                HitResult = HIT_Normal;
            });
        });
        Else(() => {
            HitResult = HIT_Normal;
        });
        DamageVar = Math(0 + (BaseAttackDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (DamageVar ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        SpellBuffRemove(Owner, "VolibearQ", Owner, 0);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                BreakSpellShields(Target);
                TeamID = GetTeamID(default);
                SpellEffectCreate(Kennenss, default, "Volibear_Q_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Attacker, false, Target, "C_BUFFBONE_GLB_CENTER_LOC", default, Target, default, default, true, false, false, false, false, default, default);
                NextBuffVars.BouncePos = CharVars.BouncePos;
                SpellBuffAdd(Attacker, Target, "VolibearQExtra", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, true, default);
            });
        });
        DebuffFound = false;
        TeamID = GetTeamID(default);
        SpellEffectCreate(Part1, Part2, "VolibearW_tar.troy", "VolibearW_tar.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        BreakSpellShields(Target);
        Damage = this.VALUE_BY_LEVEL;
        HPPoolMod = GetStat(GetFlatHPPoolMod, Attacker);
        HPPoolMod = Math(0 + (HPPoolMod ?? 0), MO_MULTIPLY, 0.18);
        Damage = Math(0 + (HPPoolMod ?? 0), MO_ADD, 0 + (Damage ?? 0));
        MaxHP = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        CurrentHP = GetPAROrHealth(Target, GetHealth, PAR_MANA);
        MissingHP = Math(0 + (MaxHP ?? 0), MO_SUBTRACT, 0 + (CurrentHP ?? 0));
        MissingHPPerc = Math(0 + (MissingHP ?? 0), MO_DIVIDE, 0 + (MaxHP ?? 0));
        MissingHPPerc = Math(0 + (MissingHPPerc ?? 0), MO_ADD, 1);
        Damage = Math(0 + (MissingHPPerc ?? 0), MO_MULTIPLY, 0 + (Damage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (Damage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        IfNotHasBuff(Target, Attacker, "GravesChargeShotShot", () => {
            BaseDmg = this.VALUE_BY_LEVEL;
            TotalAD = GetTotalAttackDamage(Attacker);
            BaseAD = GetStat(GetBaseAttackDamage, Attacker);
            BonusAD = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
            BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 1.2);
            BaseDmg = Math(0 + (BonusAD ?? 0), MO_ADD, 0 + (BaseDmg ?? 0));
            ApplyDamage(Attacker, Target, 0 + (BaseDmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0.7, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "KogMawCausticSpittleCharged", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SpellBaseDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "GravesChargeShotShot", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            DestroyMissile(MissileNetworkID);
            BreakSpellShields(Target);
        });
        TotalAD = GetTotalAttackDamage(Owner);
        BaseAD = GetStat(GetBaseAttackDamage, Owner);
        BonusAD = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
        BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 1.4);
        SpellBaseDamage = Math(0 + (BonusAD ?? 0), MO_ADD, 0 + (SpellBaseDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (SpellBaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        TeamOfCaster = GetTeamID(default);
        SpellEffectCreate(part, default, "Graves_ClusterShot_Tar.troy", default, TeamOfCaster ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, true, false, false, false, false, default, default);
        BreakSpellShields(Target);
        TotalDamage = GetTotalAttackDamage(Attacker);
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        BonusAD = Math(0 + (TotalDamage ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BonusDamage = this.VALUE_BY_LEVEL;
        BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.8);
        BonusDamage = Math(0 + (BonusAD ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        Count = GetBuffCountFromAll(Target, "GravesClusterShotAttack");
        If(Count, default, CO_GREATER_THAN, default, 0, () => {
            BonusDamage = Math(0 + (BonusDamage ?? 0), MO_MULTIPLY, 0.25);
        });
        SpellBuffAdd(Target, Target, "GravesClusterShotAttack", 1, 1, 0.25, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (BonusDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        KMSkinID = GetSkinID(Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(KMSkinID, default, CO_EQUAL, default, 5, () => {
                SpellEffectCreate(a, default, "KogMawChineseBasicAttack_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "KogMawSpatter.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
        });
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        KMSkinID = GetSkinID(Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(KMSkinID, default, CO_EQUAL, default, 5, () => {
                SpellEffectCreate(a, default, "KogMawChineseBasicAttack_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "KogMawSpatter.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
        });
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        HitResult = HIT_Critical;
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        KMSkinID = GetSkinID(Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(KMSkinID, default, CO_EQUAL, default, 5, () => {
                SpellEffectCreate(a, default, "KogMawChineseBasicAttack_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "KogMawSpatter.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
        });
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IncPAR(Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        Count = GetBuffCountFromCaster(Target, Target, "TalonShadowAssaultMisBuff");
        OwnerTeam = GetTeamID(default);
        If(Count, default, CO_EQUAL, default, 0, () => {
            IsStealthed = GetStatus(Target, GetStealthed);
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                SpellEffectCreate(part, default, "talon_ult_tar.troy", default, OwnerTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, true, false, false, false, false, default, default);
                SpellBuffAdd(Target, Target, "TalonShadowAssaultMisBuff", 9, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                BreakSpellShields(Target);
                BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                TotalAD = GetTotalAttackDamage(Owner);
                BaseDamage = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
                BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0.9);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                BonusDamage = this.VALUE_BY_LEVEL;
                BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            });
            Else(() => {
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    SpellEffectCreate(part, default, "talon_ult_tar.troy", default, OwnerTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd(Target, Target, "TalonShadowAssaultMisBuff", 9, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Target);
                    BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                    TotalAD = GetTotalAttackDamage(Owner);
                    BaseDamage = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
                    BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0.9);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    BonusDamage = this.VALUE_BY_LEVEL;
                    BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                    ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                });
                Else(() => {
                    CanSee = CanSeeTarget(Owner, Target);
                    If(CanSee, default, CO_EQUAL, default, true, () => {
                        SpellEffectCreate(part, default, "bowmaster_BasicAttack_tar.troy", default, OwnerTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, true, false, false, false, false, default, default);
                        SpellBuffAdd(Target, Target, "TalonShadowAssaultMisBuff", 9, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                        BreakSpellShields(Target);
                        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                        TotalAD = GetTotalAttackDamage(Owner);
                        BaseDamage = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
                        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0.9);
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                        BonusDamage = this.VALUE_BY_LEVEL;
                        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                        ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    });
                });
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
            SpellEffectCreate(varrr, default, "KogMawVoidOoze_tar.troy", default, CasterID2 ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        Count = GetBuffCountFromCaster(Target, Target, "TalonShadowAssaultMisTwo");
        OwnerTeam = GetTeamID(default);
        TargetTeam = GetTeamID(default);
        If(TargetTeam, default, CO_NOT_EQUAL, OwnerTeam, default, () => {
            If(Count, default, CO_EQUAL, default, 0, () => {
                IsStealthed = GetStatus(Target, GetStealthed);
                If(IsStealthed, default, CO_EQUAL, default, false, () => {
                    SpellEffectCreate(part, default, "talon_ult_tar.troy", default, OwnerTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd(Target, Target, "TalonShadowAssaultMisTwo", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Target);
                    BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                    TotalAD = GetTotalAttackDamage(Owner);
                    BaseDamage = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
                    BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0.9);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    BonusDamage = this.VALUE_BY_LEVEL;
                    BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                    ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                });
                Else(() => {
                    If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                        SpellEffectCreate(part, default, "talon_ult_tar.troy", default, OwnerTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, true, false, false, false, false, default, default);
                        SpellBuffAdd(Target, Target, "TalonShadowAssaultMisTwo", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                        BreakSpellShields(Target);
                        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                        TotalAD = GetTotalAttackDamage(Owner);
                        BaseDamage = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
                        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0.9);
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                        BonusDamage = this.VALUE_BY_LEVEL;
                        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                        ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    });
                    Else(() => {
                        CanSee = CanSeeTarget(Owner, Target);
                        If(CanSee, default, CO_EQUAL, default, true, () => {
                            SpellEffectCreate(part, default, "bowmaster_BasicAttack_tar.troy", default, OwnerTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, true, false, false, false, false, default, default);
                            SpellBuffAdd(Target, Target, "TalonShadowAssaultMisTwo", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                            BreakSpellShields(Target);
                            BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                            TotalAD = GetTotalAttackDamage(Owner);
                            BaseDamage = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
                            BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0.9);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                            BonusDamage = this.VALUE_BY_LEVEL;
                            BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                            DebugSay(Owner, "DAMAGE", BaseDamage);
                            ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                        });
                    });
                });
            });
        });
        ElseIf(Target, default, CO_EQUAL, Owner, default, () => {
            DestroyMissile(MissileNetworkID);
        });
        TargetPos = GetUnitPosition(Target);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        TeamID = GetTeamID(default);
        buffDuration = this.VALUE_BY_LEVEL;
        SpellEffectCreate(Particle, default, "Graves_SmokeGrenade_Boom.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
        AD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusDamage = Math(0 + (AD ?? 0), MO_MULTIPLY, 0.6);
        TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (dmg ?? 0));
        remainder = Math(0 + (buffDuration ?? 0), MO_MODULO, 0.5);
        ticks = Math(0 + (buffDuration ?? 0), MO_SUBTRACT, 0 + (remainder ?? 0));
        TickDamage = Math(0 + (TotalDamage ?? 0), MO_DIVIDE, 0 + (ticks ?? 0));
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamID ?? TEAM_CASTER, false, true, false, true, true, true, 50, false, true, Owner, default);
        SpellBuffAdd(Attacker, Other3, "GravesSmokeGrenade", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Attacker, TargetPos, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 0, false, false, Attacker);
            If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                Name = GetUnitSkinName(Unit);
                CheckName = "Nocturne";
                If(CheckName, default, CO_EQUAL, Name, default, () => {
                    SpellBuffAdd(Attacker, Unit, "GravesSmokeGrenadeSecretPassive", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, true, default);
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        KMSkinID = GetSkinID(Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(KMSkinID, default, CO_EQUAL, default, 5, () => {
                SpellEffectCreate(a, default, "KogMawChineseBasicAttack_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "KogMawSpatter.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                    If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
                        MaxHealthDamage = this.VALUE_BY_LEVEL;
                        BonusMaxHealthDamage = Math(0.0001, MO_MULTIPLY, 0 + (AbilityPower ?? 0));
                        TotalMaxHealthDamage = Math(0 + (BonusMaxHealthDamage ?? 0), MO_ADD, 0 + (MaxHealthDamage ?? 0));
                        MaxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
                        DamageToApply = Math(0 + (MaxHealth ?? 0), MO_MULTIPLY, 0 + (TotalMaxHealthDamage ?? 0));
                        TeamId = GetTeamID(default);
                        If(TeamId, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                            DamageToApply = Math(100, MO_MIN, 0 + (DamageToApply ?? 0));
                        });
                        ApplyDamage(Attacker, Target, 0 + (DamageToApply ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
                    });
                });
            });
        });
        Level = GetLevel(Attacker);
        TeamID = GetTeamID(default);
        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
            DamageToDeal = GetTotalAttackDamage(Attacker);
            BonusDamage = this.VALUE_BY_LEVEL;
            DamageToDeal = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (DamageToDeal ?? 0));
            ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
            DamageToDeal = Math(0.5, MO_MULTIPLY, 0 + (DamageToDeal ?? 0));
            SpellBuffAdd(Attacker, Target, "GravesPassiveShotAttack", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ForEachUnitInTargetArea(Attacker, Target, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", "GravesPassiveShotAttack", false, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
            });
            SpellBuffRemove(Attacker, "GravesPassiveShot", Attacker, 0);
            SpellBuffAdd(Attacker, Attacker, "GravesPassiveStack", 4, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
        });
        Else(() => {
            DamageToDeal = GetTotalAttackDamage(Attacker);
            ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        });
        IfHasBuff(Owner, Owner, "FacingMe", () => {
            NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
            NextBuffVars.DamageMod = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Attacker, Target, "MockingShoutSlow", 1, 1, 4, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Target, default, 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        Else(() => {
            If(Target, default, CO_IS_TARGET_BEHIND_ME, Owner, default, () => {
                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                NextBuffVars.DamageMod = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Target, "MockingShoutSlow", 1, 1, 4, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
                SpellBuffAdd(Attacker, Target, default, 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
            Else(() => {
                NextBuffVars.DamageMod = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Target, default, 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
        FaceDirection(Owner, Target);
        Distance = DistanceBetweenObjects("Owner", "Target");
        finalDistance = Math(0 + (Distance ?? 0), MO_ADD, 175);
        TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (finalDistance ?? 0), 0);
        TeleportToPosition(Owner, TargetPos);
        DamageVar = this.VALUE_BY_LEVEL;
        SilenceDur = this.VALUE_BY_LEVEL;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        KIDamage = this.VALUE_BY_LEVEL;
        DamageVar = Math(0 + (DamageVar ?? 0), MO_ADD, 0 + (KIDamage ?? 0));
        KIDamage = this.VALUE_BY_LEVEL;
        If(Target, default, CO_DIFFERENT_TEAM, Owner, default, () => {
            SpellEffectCreate(PH, default, "talon_E_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
            ApplySilence(Attacker, Target, 0 + (SilenceDur ?? 0));
            NextBuffVars.AmpValue = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Attacker, Target, "TalonDamageAmp", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                IssueOrder(Owner, AI_ATTACKTO, default, Target);
            });
        });
        Count = GetBuffCountFromCaster(Target, Target, "TalonRakeMissileOneMarker");
        OwnerTeamID = GetTeamID(default);
        If(Count, default, CO_EQUAL, default, 0, () => {
            IsStealthed = GetStatus(Target, GetStealthed);
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                SpellEffectCreate(part, default, "talon_w_tar.troy", default, OwnerTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, true, false, false, false, false, default, default);
                SpellBuffAdd(Target, Target, "TalonRakeMissileOneMarker", 9, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                BreakSpellShields(Target);
                BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                TotalAD = GetTotalAttackDamage(Owner);
                BaseDamage = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
                BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0.6);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                BonusDamage = this.VALUE_BY_LEVEL;
                BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Target, "TalonSlow", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                    NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                });
            });
            Else(() => {
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    SpellEffectCreate(part, default, "talon_w_tar.troy", default, OwnerTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd(Target, Target, "TalonRakeMissileOneMarker", 9, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Target);
                    BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                    TotalAD = GetTotalAttackDamage(Owner);
                    BaseDamage = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
                    BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0.6);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    BonusDamage = this.VALUE_BY_LEVEL;
                    BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                    ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                    SpellBuffAdd(Attacker, Target, "TalonSlow", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                    If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                        NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                    });
                });
                Else(() => {
                    CanSee = CanSeeTarget(Owner, Target);
                    If(CanSee, default, CO_EQUAL, default, true, () => {
                        SpellEffectCreate(part, default, "talon_w_tar.troy", default, OwnerTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, true, false, false, false, false, default, default);
                        SpellBuffAdd(Target, Target, "TalonRakeMissileOneMarker", 9, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                        BreakSpellShields(Target);
                        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                        TotalAD = GetTotalAttackDamage(Owner);
                        BaseDamage = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
                        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0.6);
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                        BonusDamage = this.VALUE_BY_LEVEL;
                        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                        ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                        SpellBuffAdd(Attacker, Target, "TalonSlow", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                            NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                        });
                    });
                });
            });
        });
        Count = GetBuffCountFromCaster(Target, Target, "TalonRakeMissileTwo");
        OwnerTeam = GetTeamID(default);
        TargetTeam = GetTeamID(default);
        If(TargetTeam, default, CO_NOT_EQUAL, OwnerTeam, default, () => {
            If(Count, default, CO_EQUAL, default, 0, () => {
                IsStealthed = GetStatus(Target, GetStealthed);
                If(IsStealthed, default, CO_EQUAL, default, false, () => {
                    SpellEffectCreate(part, default, "talon_w_tar.troy", default, OwnerTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, true, false, false, false, false, default, default);
                    SpellBuffAdd(Target, Target, "TalonRakeMissileTwo", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Target);
                    BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                    TotalAD = GetTotalAttackDamage(Owner);
                    BaseDamage = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
                    BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0.6);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    BonusDamage = this.VALUE_BY_LEVEL;
                    BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                    ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                    SpellBuffAdd(Attacker, Target, "TalonSlow", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                });
                Else(() => {
                    If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                        SpellEffectCreate(part, default, "talon_w_tar.troy", default, OwnerTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, true, false, false, false, false, default, default);
                        SpellBuffAdd(Target, Target, "TalonRakeMissileTwo", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                        BreakSpellShields(Target);
                        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                        TotalAD = GetTotalAttackDamage(Owner);
                        BaseDamage = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
                        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0.6);
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                        BonusDamage = this.VALUE_BY_LEVEL;
                        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                        ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                        SpellBuffAdd(Attacker, Target, "TalonSlow", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                    });
                    Else(() => {
                        CanSee = CanSeeTarget(Owner, Target);
                        If(CanSee, default, CO_EQUAL, default, true, () => {
                            SpellEffectCreate(part, default, "talon_w_tar.troy", default, OwnerTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, true, false, false, false, false, default, default);
                            SpellBuffAdd(Target, Target, "TalonRakeMissileTwo", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                            BreakSpellShields(Target);
                            BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                            TotalAD = GetTotalAttackDamage(Owner);
                            BaseDamage = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
                            BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0.6);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                            BonusDamage = this.VALUE_BY_LEVEL;
                            BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                            ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                            NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                            SpellBuffAdd(Attacker, Target, "TalonSlow", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        ElseIf(Target, default, CO_EQUAL, Owner, default, () => {
            DestroyMissile(MissileNetworkID);
        });
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.SpellLevel = Level;
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0.4);
        SpellBuffAdd(Attacker, Target, "GatlingDebuff", 10, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, default, default, default, default);
        IfHasBuff(Target, Owner, "GatlingDebuffCheck", () => {
            
        });
        Else(() => {
            ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, default, default, default, default);
            SpellBuffAdd(Attacker, Target, "GatlingDebuffCheck", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            DestroyMissile(MissileNetworkID);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.ArmorMod = this.VALUE_BY_LEVEL;
        BaseDamage = this.VALUE_BY_LEVEL;
        totalDamage = GetTotalAttackDamage(Owner);
        BaseAD = GetStat(GetBaseAttackDamage, Owner);
        BonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
        BonusDamage = Math(0.2, MO_MULTIPLY, 0 + (BonusDamage ?? 0));
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            SpellBuffAdd(Attacker, Target, "GatlingDebuff", 10, 1, 2, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
            ApplyDamage(Owner, Target, 0 + (BonusDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                SpellBuffAdd(Attacker, Target, "GatlingDebuff", 10, 1, 2, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
                ApplyDamage(Owner, Target, 0 + (BonusDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    SpellBuffAdd(Attacker, Target, "GatlingDebuff", 10, 1, 2, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
                    ApplyDamage(Owner, Target, 0 + (BonusDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                });
            });
        });
        BreakSpellShields(Target);
        TeamID = GetTeamID(default);
        If(Target, default, CO_IS_TARGET_IN_FRONT_OF_ME, Attacker, default, () => {
            SpellBuffAdd(Attacker, Target, "CassiopeiaPetrifyingGaze", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
        });
        Else(() => {
            NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Attacker, Target, "Slow", 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, true, false, default);
            SpellEffectCreate(particle2, default, "CassPetrifyMiss_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Target, "root", default, Target, default, default, true, default, default, false, default, default, default);
        });
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
        IfHasBuffOfType(Target, BUFF_Poison, () => {
            TeamID = GetTeamID(default);
            SetSlotSpellCooldownTimeVer2(0.5, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
            SpellEffectCreate(particle, default, "CassioTwinFang_refreshsound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        });
        BreakSpellShields(Target);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.55, 1, false, false, Attacker);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        IsStealthed = GetStatus(Target, GetStealthed);
        baseDamage = this.VALUE_BY_LEVEL;
        totalAttackDamage = GetTotalAttackDamage(Owner);
        bonusAttackDamage = Math(0.2, MO_MULTIPLY, 0 + (totalAttackDamage ?? 0));
        DamageAmount = Math(0 + (bonusAttackDamage ?? 0), MO_ADD, 0 + (baseDamage ?? 0));
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            SpellEffectCreate(part, default, "corki_MissleBarrage_DD_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", Target, Target, default, default, true, default, default, false, false, default, default);
            TargetPos = GetUnitPosition(Target);
            ForEachUnitInTargetArea(Attacker, TargetPos, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1.5, 0.3, 1, false, false, Attacker);
            });
            DestroyMissile(MissileNetworkID);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                SpellEffectCreate(part, default, "corki_MissleBarrage_DD_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", Target, Target, default, default, true, default, default, false, false, default, default);
                TargetPos = GetUnitPosition(Target);
                ForEachUnitInTargetArea(Attacker, TargetPos, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                    BreakSpellShields(Unit);
                    ApplyDamage(Attacker, Unit, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1.5, 0.3, 1, false, false, Attacker);
                });
                DestroyMissile(MissileNetworkID);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    SpellEffectCreate(part, default, "corki_MissleBarrage_DD_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", Target, Target, default, default, true, default, default, false, false, default, default);
                    TargetPos = GetUnitPosition(Target);
                    ForEachUnitInTargetArea(Attacker, TargetPos, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                        BreakSpellShields(Unit);
                        ApplyDamage(Attacker, Unit, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1.5, 0.3, 1, false, false, Attacker);
                    });
                    DestroyMissile(MissileNetworkID);
                });
            });
        });
        TeamID = GetTeamID(default);
        IsStealthed = GetStatus(Target, GetStealthed);
        baseDamage = this.VALUE_BY_LEVEL;
        totalAttackDamage = GetTotalAttackDamage(Owner);
        bonusAttackDamage = Math(0.2, MO_MULTIPLY, 0 + (totalAttackDamage ?? 0));
        DamageAmount = Math(0 + (bonusAttackDamage ?? 0), MO_ADD, 0 + (baseDamage ?? 0));
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            SpellEffectCreate(part, default, "corki_MissleBarrage_std_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", Target, Target, default, default, true, default, default, false, false, default, default);
            TargetPos = GetUnitPosition(Target);
            ForEachUnitInTargetArea(Attacker, TargetPos, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 1, false, false, Attacker);
            });
            DestroyMissile(MissileNetworkID);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                SpellEffectCreate(part, default, "corki_MissleBarrage_std_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", Target, Target, default, default, true, default, default, false, false, default, default);
                TargetPos = GetUnitPosition(Target);
                ForEachUnitInTargetArea(Attacker, TargetPos, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                    BreakSpellShields(Unit);
                    ApplyDamage(Attacker, Unit, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 1, false, false, Attacker);
                });
                DestroyMissile(MissileNetworkID);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    SpellEffectCreate(part, default, "corki_MissleBarrage_std_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", Target, Target, default, default, true, default, default, false, false, default, default);
                    TargetPos = GetUnitPosition(Target);
                    ForEachUnitInTargetArea(Attacker, TargetPos, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                        BreakSpellShields(Unit);
                        ApplyDamage(Attacker, Unit, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 1, false, false, Attacker);
                    });
                    DestroyMissile(MissileNetworkID);
                });
            });
        });
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        HitResult = HIT_Critical;
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        HitResult = HIT_Critical;
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.Level = Level;
        Damage = this.VALUE_BY_LEVEL;
        AP = GetStat(GetFlatMagicDamageMod, Owner);
        AP = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.225);
        Damage = Math(0 + (AP ?? 0), MO_ADD, 0 + (Damage ?? 0));
        If(Target, default, CO_IS_NOT_HERO, default, default, () => {
            Damage = Math(0 + (Damage ?? 0), MO_MULTIPLY, 0.5);
        });
        ApplyDamage(Owner, Target, 0 + (Damage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        Count = GetBuffCountFromAll(Target, "MissfortuneBulletHolder");
        If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 7, () => {
            Count1 = GetBuffCountFromAll(Target, "MissFortunePlaceholder");
            If(Count1, default, CO_LESS_THAN, default, 1, () => {
                TeamID = GetTeamID(default);
                SpellBuffAdd(Attacker, Target, "MissFortunePlaceholder", 2, 1, 0.05, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                SpellBuffAdd(Attacker, Target, "MissfortuneBulletHolder", 9, 1, 6, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                BaseDamage = this.VALUE_BY_LEVEL;
                totalDamage = GetTotalAttackDamage(Owner);
                BaseAtkDmg = GetStat(GetBaseAttackDamage, Owner);
                BonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (BaseAtkDmg ?? 0));
                BonusDamage = Math(0.45, MO_MULTIPLY, 0 + (BonusDamage ?? 0));
                APPreMod = GetStat(GetFlatMagicDamageMod, Owner);
                APPostMod = Math(0.2, MO_MULTIPLY, 0 + (APPreMod ?? 0));
                ADAPBonus = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (APPostMod ?? 0));
                FinalDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (ADAPBonus ?? 0));
                ApplyDamage(Owner, Target, 0 + (FinalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                SpellEffectCreate(asdf, default, "missFortune_bulletTime_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        BaseDmg = GetTotalAttackDamage(Owner);
        DmgPerLvl = this.VALUE_BY_LEVEL;
        PerLevel = this.VALUE_BY_LEVEL;
        MultiDmg = Math(0 + (BaseDmg ?? 0), MO_MULTIPLY, 0 + (PerLevel ?? 0));
        FinalDmg = Math(0 + (MultiDmg ?? 0), MO_ADD, 0 + (DmgPerLvl ?? 0));
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            FinalDmg = Math(2, MO_MULTIPLY, 0 + (FinalDmg ?? 0));
            ApplyDamage(Attacker, Target, 0 + (FinalDmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (FinalDmg ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        Count = GetBuffCountFromAll(Target, default);
        If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
            HitResult = HIT_Normal;
        });
        If(HitResult, default, CO_EQUAL, default, HIT_Dodge, () => {
            HitResult = HIT_Normal;
        });
        If(HitResult, default, CO_EQUAL, default, HIT_Miss, () => {
            HitResult = HIT_Normal;
        });
        TeamID = GetTeamID(default);
        AttackDamage = GetTotalAttackDamage(Attacker);
        AttackBonus = Math(0.75, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
        AbilityDamage = this.VALUE_BY_LEVEL;
        DamageToDeal = Math(0 + (AttackBonus ?? 0), MO_ADD, 0 + (AbilityDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        SpellEffectCreate(asdf, default, "missFortune_richochet_tar_first.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        Other1 = SpawnMinion("LocationFinder", "TestCube", "idle.lua", Target, TeamID ?? TEAM_UNKNOWN, true, true, true, true, true, true, 0, default, true, Nothing, default);
        FaceDirection(Other1, Attacker);
        LeftPos = GetPointByUnitFacingOffset(Other1, 500, 90);
        RightPos = GetPointByUnitFacingOffset(Other1, 500, 270);
        Other2 = SpawnMinion("LocationFinder", "TestCube", "idle.lua", LeftPos, TeamID ?? TEAM_UNKNOWN, true, true, true, true, true, true, 0, default, true, Nothing, default);
        Other3 = SpawnMinion("LocationFinder", "TestCube", "idle.lua", RightPos, TeamID ?? TEAM_UNKNOWN, true, true, true, true, true, true, 0, default, true, Nothing, default);
        FaceDirection(Other2, Attacker);
        FaceDirection(Other3, Attacker);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        TargetPos = GetUnitPosition(Other1);
        EatHydra = 0;
        ForEachUnitInTargetArea(Attacker, Other1, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            If(Other1, default, CO_IS_TARGET_BEHIND_ME, Unit, default, () => {
                IsStealthed = GetStatus(Unit, GetStealthed);
                If(IsStealthed, default, CO_EQUAL, default, false, () => {
                    SpellBuffAdd(Attacker, Unit, "MissFortuneRShotHolder", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
                });
            });
        });
        ForEachUnitInTargetArea(Attacker, Other2, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "MissFortuneRShotHolder", true, (Unit) => {
            IsStealthed = GetStatus(Unit, GetStealthed);
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                SpellBuffRemove(Unit, "MissFortuneRShotHolder", Attacker, default);
                SpellBuffAdd(Attacker, Unit, "MissFortuneRicochetShot", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
        });
        ForEachUnitInTargetArea(Attacker, Other3, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "MissFortuneRShotHolder", true, (Unit) => {
            IsStealthed = GetStatus(Unit, GetStealthed);
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                SpellBuffRemove(Unit, "MissFortuneRShotHolder", Attacker, default);
                SpellBuffAdd(Attacker, Unit, "MissFortuneRicochetShot", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
        });
        ForEachUnitInTargetAreaRandom(Attacker, Other1, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "MissFortuneRShotHolder", true, 1, (Unit) => {
            SpellCast(Attacker, Unit, Unit, Unit, true, 0, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, TargetPos);
            EatHydra = 1;
        });
        If(EatHydra, default, CO_LESS_THAN, default, 1, () => {
            ForEachUnitInTargetAreaRandom(Attacker, Other1, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "MissFortuneRicochetShot", true, 1, (Unit) => {
                SpellCast(Attacker, Unit, Unit, Unit, true, 0, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, TargetPos);
            });
        });
        If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
            HitResult = HIT_Normal;
        });
        If(HitResult, default, CO_EQUAL, default, HIT_Dodge, () => {
            HitResult = HIT_Normal;
        });
        If(HitResult, default, CO_EQUAL, default, HIT_Miss, () => {
            HitResult = HIT_Normal;
        });
        TeamID = GetTeamID(default);
        AttackDamage = GetTotalAttackDamage(Attacker);
        AttackBonus = Math(0.75, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
        AbilityDamage = this.VALUE_BY_LEVEL;
        DamageToDeal = Math(0 + (AttackBonus ?? 0), MO_ADD, 0 + (AbilityDamage ?? 0));
        RicochetDamage = Math(0 + (DamageToDeal ?? 0), MO_MULTIPLY, 1.15);
        ApplyDamage(Attacker, Target, 0 + (RicochetDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0.65, 0, false, true, Attacker);
        SpellEffectCreate(asdf, default, "missFortune_richochet_tar_second_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(asdf, default, "missFortune_richochet_tar_second.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        IsStealthed = GetStatus(Target, GetStealthed);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        TargetPos = GetUnitPosition(Target);
        CharVars.Counter = 0;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.Level = Level;
        Damage = this.VALUE_BY_LEVEL;
        AP = GetStat(GetFlatMagicDamageMod, Owner);
        AP = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.225);
        Damage = Math(0 + (AP ?? 0), MO_ADD, 0 + (Damage ?? 0));
        Damage = Math(0 + (Damage ?? 0), MO_MULTIPLY, 1.3);
        If(Target, default, CO_IS_NOT_HERO, default, default, () => {
            Damage = Math(0 + (Damage ?? 0), MO_MULTIPLY, 0.5);
        });
        ApplyDamage(Owner, Target, 0 + (Damage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        Count = GetBuffCountFromAll(Target, "MissfortuneBulletHolder");
        If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 7, () => {
            Count1 = GetBuffCountFromAll(Target, "MissFortuneWaveHold");
            If(Count1, default, CO_LESS_THAN, default, 1, () => {
                TeamID = GetTeamID(default);
                SpellBuffAdd(Attacker, Target, "MissFortuneWaveHold", 2, 1, 0.05, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                SpellBuffAdd(Attacker, Target, "MissfortuneBulletHolder", 9, 1, 6, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                BaseDamage = this.VALUE_BY_LEVEL;
                totalDamage = GetTotalAttackDamage(Owner);
                BaseAtkDmg = GetStat(GetBaseAttackDamage, Owner);
                BonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (BaseAtkDmg ?? 0));
                BonusDamage = Math(0.45, MO_MULTIPLY, 0 + (BonusDamage ?? 0));
                APPreMod = GetStat(GetFlatMagicDamageMod, Owner);
                APPostMod = Math(0.2, MO_MULTIPLY, 0 + (APPreMod ?? 0));
                ADAPBonus = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (APPostMod ?? 0));
                FinalDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (ADAPBonus ?? 0));
                ApplyDamage(Owner, Target, 0 + (FinalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                SpellEffectCreate(asdf, default, "missFortune_bulletTime_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        Dmg = this.VALUE_BY_LEVEL;
        Disable = this.VALUE_BY_LEVEL;
        AP = 0.5;
        IfHasBuff(Owner, Owner, "RumbleGrenadeDZ", () => {
            Dmg = Math(1.3, MO_MULTIPLY, 0 + (Dmg ?? 0));
            AP = Math(1.3, MO_MULTIPLY, 0 + (AP ?? 0));
        });
        IfHasBuff(Target, Owner, "RumbleGrenadeDebuff", () => {
            SpellBuffAdd(Attacker, Target, "RumbleGrenadeZapEffect", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            BreakSpellShields(Target);
            NextBuffVars.SlowAmount = this.VALUE_BY_LEVEL;
            IfHasBuff(Owner, Owner, "RumbleGrenadeDZ", () => {
                NextBuffVars.SlowAmount = Math(1.3, MO_MULTIPLY, 0 + (NextBuffVars.SlowAmount ?? 0));
            });
            SpellBuffAdd(Attacker, Target, "RumbleGrenadeSlow", 1, 1, 0 + (Disable ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
        });
        Else(() => {
            SpellBuffAdd(Attacker, Target, "RumbleGrenadeZapEffect", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            BreakSpellShields(Target);
            NextBuffVars.SlowAmount = this.VALUE_BY_LEVEL;
            IfHasBuff(Owner, Owner, "RumbleGrenadeDZ", () => {
                NextBuffVars.SlowAmount = Math(1.3, MO_MULTIPLY, 0 + (NextBuffVars.SlowAmount ?? 0));
            });
            SpellBuffAdd(Attacker, Target, "RumbleGrenadeDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Target, "RumbleGrenadeSlow", 1, 1, 0 + (Disable ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellEffectCreate(gragas, default, "rumble_taze_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, default, default, default);
            ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0 + (AP ?? 0), 0, false, false, Attacker);
            DestroyMissile(MissileNetworkID);
        });
        Else(() => {
            IsStealthed = GetStatus(Target, GetStealthed);
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                SpellEffectCreate(gragas, default, "rumble_taze_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, default, default, default);
                ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0 + (AP ?? 0), 0, false, false, Attacker);
                DestroyMissile(MissileNetworkID);
                SpellBuffAdd(Attacker, Target, "RumbleGrenadeZapEffect", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        NextBuffVars.ASMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IfHasBuff(Target, Target, "ResistantSkin", () => {
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, false, false, Attacker);
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, false, false, Attacker);
        });
        par = GetPAROrHealth(Target, GetPAR, PAR_OTHER);
        If(par, default, CO_GREATER_THAN_OR_EQUAL, default, 80, () => {
            SpellBuffAdd(Attacker, Attacker, "RumbleOverheat", 1, 1, 5.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            SetPARColorOverride(Owner, 255, 0, 0, 255, 175, 0, 0, 255);
        });
        IfHasBuff(Owner, Owner, "RumbleShield", () => {
            SpellBuffRemove(Owner, "RumbleShield", Owner, default);
        });
        baseDamageBlock = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        BonusHealth = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.4);
        DamageBlock = Math(0 + (baseDamageBlock ?? 0), MO_ADD, 0 + (BonusHealth ?? 0));
        IfHasBuff(Target, Target, "RumbleDangerZone", () => {
            DamageBlock = Math(1.3, MO_MULTIPLY, 0 + (DamageBlock ?? 0));
        });
        NextBuffVars.DamageBlock = DamageBlock;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "RumbleHeatDelay", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.SpeedBoost = this.VALUE_BY_LEVEL;
        IfHasBuff(Target, Target, "RumbleDangerZone", () => {
            NextBuffVars.SpeedBoost = Math(1.3, MO_MULTIPLY, 0 + (NextBuffVars.SpeedBoost ?? 0));
        });
        BaseHeatCost = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "RumbleShieldBuff", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IncPAR(Owner, 0 + (BaseHeatCost ?? 0));
        NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = -0.25;
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "IceBlast", 100, 1, 4, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
        SpellEffectCreate(HitEffet, default, "karma_heavenlyWave_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        If(Target, default, CO_SAME_TEAM, Attacker, default, () => {
            ApplyAssistMarker(Attacker, Target, 10);
            Regen = 0.05;
            KarmaAP = GetStat(GetFlatMagicDamageMod, Owner);
            APToAdd = Math(0 + (KarmaAP ?? 0), MO_MULTIPLY, 0.0002);
            Regen = Math(0 + (APToAdd ?? 0), MO_ADD, 0 + (Regen ?? 0));
            maxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
            curHealth = GetPAROrHealth(Target, GetHealth, PAR_MANA);
            missHealth = Math(0 + (maxHealth ?? 0), MO_SUBTRACT, 0 + (curHealth ?? 0));
            HealthToRestore = Math(0 + (Regen ?? 0), MO_MULTIPLY, 0 + (missHealth ?? 0));
            BaseHealthRestore = this.VALUE_BY_LEVEL;
            HealthToRestore = Math(0 + (BaseHealthRestore ?? 0), MO_ADD, 0 + (HealthToRestore ?? 0));
            IncHealth(Target, 0 + (HealthToRestore ?? 0), Owner);
            If(Target, default, CO_EQUAL, Attacker, default, () => {
                SpellEffectCreate(br, default, "karma_heavenlyWave_self_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(ar, default, "karma_heavenlyWave_ally_heal.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, default, default, default);
            });
        });
        Else(() => {
            SpellEffectCreate(HitEffet, default, "karma_heavenlyWave_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, default, default, default);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
        });
        NextBuffVars.AttackSpeedBonusPercent = this.VALUE_BY_LEVEL;
        NextBuffVars.MovementSpeedBonusPercent = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, default, default, default);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, default, default, default);
        TeamID = GetTeamID(default);
        SpellBuffAdd(Owner, Owner, "KarmaSoulShieldAnim", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        AbilityPower = GetStat(GetFlatMagicDamageMod, Attacker);
        ArmorAmount = this.VALUE_BY_LEVEL;
        AbilityPower = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.8);
        TotalArmorAmount = Math(0 + (AbilityPower ?? 0), MO_ADD, 0 + (ArmorAmount ?? 0));
        NextBuffVars.TotalArmorAmount = TotalArmorAmount;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellEffectCreate(a, default, "karma_soulShield_buf_mantra.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, default, default, default);
        ForEachUnitInTargetArea(Owner, Target, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellEffectCreate(aoehit, default, "karma_souldShiled_ult_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, default, default, default);
            ApplyDamage(Attacker, Unit, 0 + (ArmorAmount ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.8, 0, false, false, Attacker);
        });
        SpellBuffAdd(Owner, Owner, "KarmaSoulShieldAnim", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        AbilityPower = GetStat(GetFlatMagicDamageMod, Attacker);
        ArmorAmount = this.VALUE_BY_LEVEL;
        AbilityPower = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.8);
        TotalArmorAmount = Math(0 + (AbilityPower ?? 0), MO_ADD, 0 + (ArmorAmount ?? 0));
        NextBuffVars.TotalArmorAmount = TotalArmorAmount;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                IfHasBuff(Owner, Owner, "RumbleOverheat", () => {
                    Level = GetLevel(Owner);
                    this.punchdmg = this.VALUE_BY_LEVEL;
                    Level = GetLevel(Owner);
                    ApplyDamage(Attacker, Target, 0 + (this.punchdmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0.3, 1, false, false, Attacker);
                });
            });
        });
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, true, () => {
            TeamID = GetTeamID(default);
            SpellEffectCreate(DistanceBreak2, default, "karma_spiritBond_break_overhead.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
            NextBuffVars.CooldownToRestore = this.VALUE_BY_LEVEL;
            ManaToRestore = this.VALUE_BY_LEVEL;
            IncPAR(Owner, 0 + (ManaToRestore ?? 0));
            SpellBuffAdd(Owner, Owner, "KarmaSBStealthBreak", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            NextBuffVars.MantraBoolean = 0;
            NextBuffVars.DamageToDeal = this.VALUE_BY_LEVEL;
            If(Target, default, CO_SAME_TEAM, Attacker, default, () => {
                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Target, "KarmaSpiritBond", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SpellBuffAdd(Attacker, Attacker, "KarmaSpiritBondAllySelfTooltip", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
            Else(() => {
                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                BreakSpellShields(Target);
                SpellBuffAdd(Attacker, Target, "KarmaSpiritBondC", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                SpellBuffAdd(Target, Owner, "KarmaSpiritBondEnemyTooltip", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SpellBuffAdd(Owner, Target, "KarmaMantraSBSlow", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
            });
        });
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, true, () => {
            TeamID = GetTeamID(default);
            SpellEffectCreate(DistanceBreak2, default, "karma_spiritBond_break_overhead.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
            NextBuffVars.CooldownToRestore = this.VALUE_BY_LEVEL;
            ManaToRestore = this.VALUE_BY_LEVEL;
            IncPAR(Owner, 0 + (ManaToRestore ?? 0));
            SpellBuffAdd(Owner, Owner, "KarmaSBStealthBreak", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            NextBuffVars.MantraBoolean = 1;
            NextBuffVars.DamageToDeal = this.VALUE_BY_LEVEL;
            If(Target, default, CO_SAME_TEAM, Attacker, default, () => {
                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Target, "KarmaSpiritBond", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SpellBuffAdd(Attacker, Attacker, "KarmaSpiritBondAllySelfTooltip", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
            Else(() => {
                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                BreakSpellShields(Target);
                SpellBuffAdd(Owner, Target, "KarmaSpiritBondC", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                SpellBuffAdd(Target, Owner, "KarmaSpiritBondEnemyTooltip", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SpellBuffAdd(Owner, Target, "KarmaMantraSBSlow", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
            });
        });
        DamageAmount = GetTotalAttackDamage(Owner);
        If(Target, default, CO_IS_NOT_HERO, default, default, () => {
            If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.75);
                TeamID = GetTeamID(default);
                SpellEffectCreate(MotaExplosion, default, "caitlyn_headshot_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
            Else(() => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 2.5);
                TeamID = GetTeamID(default);
                SpellEffectCreate(MotaExplosion, default, "caitlyn_headshot_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
        });
        Else(() => {
            If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.25);
                TeamID = GetTeamID(default);
                SpellEffectCreate(MotaExplosion, default, "caitlyn_headshot_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
            Else(() => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.5);
                TeamID = GetTeamID(default);
                SpellEffectCreate(MotaExplosion, default, "caitlyn_headshot_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
        });
        ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        RemoveOverrideAutoAttack(Owner, false);
        SpellBuffRemove(Owner, "CaitlynHeadshot", Owner, default);
        If(CharVars.SpellWillStun, default, CO_EQUAL, default, true, () => {
            ApplyStun(Attacker, Target, 0 + (CharVars.StunDuration ?? 0));
        });
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 0, false, false, Attacker);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, default, default);
        NextBuffVars.DamageAbsorption = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        Count = GetBuffCountFromCaster(Owner, Owner, "Feast");
        HealthPerStack = this.VALUE_BY_LEVEL;
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            FeastBase = this.VALUE_BY_LEVEL;
        });
        Else(() => {
            FeastBase = this.VALUE_BY_LEVEL;
        });
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        HalfAbilityPower = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.7);
        FeastHealth = Math(0 + (HalfAbilityPower ?? 0), MO_ADD, 0 + (FeastBase ?? 0));
        TargetHealth = GetPAROrHealth(Target, GetHealth, PAR_MANA);
        If(FeastHealth, default, CO_GREATER_THAN_OR_EQUAL, TargetHealth, default, () => {
            ApplyDamage(Attacker, Target, 0 + (TargetHealth ?? 0), TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 0, false, false, Attacker);
            SpellEffectCreate(SmokeBomb, default, "chogath_feast_sign.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
            If(Target, default, CO_IS_DEAD, default, default, () => {
                SpellBuffAdd(Owner, Owner, "Feast", 6, 1, 30000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
                SpellBuffAdd(Owner, Owner, "Feast_internal", 1, 1, 30000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (FeastHealth ?? 0), TRUE_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Attacker);
        });
        NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        BreakSpellShields(Target);
        SpellBuffAdd(Owner, Target, "olafSlow", 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "OlafAxeThrowDamage", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            Distance = DistanceBetweenObjects("Target", "Attacker");
            LandPos = GetUnitPosition(Target);
            NextBuffVars.WillRemove = false;
            SpellEffectCreate(NextBuffVars.ParticleID, default, "Bandage_beam.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, "spine", default, Target, "R_hand", default, true, default, default, false, false, default, default);
            Move(Attacker, LandPos, 1350, 5, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (Distance ?? 0), FACE_MOVEMENT_DIRECTION);
            SpellBuffAdd(Target, Attacker, default, 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, 1, false, false, Attacker);
            ApplyStun(Attacker, Target, 1);
            SpellEffectCreate(gfasdf, default, "BandageToss_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, default, default, false, false, default, default);
            DestroyMissile(MissileNetworkID);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                Distance = DistanceBetweenObjects("Target", "Attacker");
                LandPos = GetUnitPosition(Target);
                NextBuffVars.WillRemove = false;
                SpellEffectCreate(NextBuffVars.ParticleID, default, "Bandage_beam.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, "spine", default, Target, "R_hand", default, true, default, default, false, false, default, default);
                Move(Attacker, LandPos, 1350, 5, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (Distance ?? 0), FACE_MOVEMENT_DIRECTION);
                SpellBuffAdd(Target, Attacker, default, 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, 1, false, false, Attacker);
                ApplyStun(Attacker, Target, 1);
                SpellEffectCreate(gfasdf, default, "BandageToss_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, default, default, false, false, default, default);
                DestroyMissile(MissileNetworkID);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    Distance = DistanceBetweenObjects("Target", "Attacker");
                    LandPos = GetUnitPosition(Target);
                    NextBuffVars.WillRemove = false;
                    SpellEffectCreate(NextBuffVars.ParticleID, default, "Bandage_beam.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, "spine", default, Target, "R_hand", default, true, default, default, false, false, default, default);
                    Move(Attacker, LandPos, 1350, 5, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (Distance ?? 0), FACE_MOVEMENT_DIRECTION);
                    SpellBuffAdd(Target, Attacker, default, 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, 1, false, false, Attacker);
                    ApplyStun(Attacker, Target, 1);
                    SpellEffectCreate(gfasdf, default, "BandageToss_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, default, default, false, false, default, default);
                    DestroyMissile(MissileNetworkID);
                });
            });
        });
        IfHasBuff(Target, Attacker, "VorpalSpikesMissleBuff", () => {
            SpellBuffRemove(Owner, "VorpalSpikesMissleBuff", Owner, default);
        });
        Else(() => {
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 1, false, false, Attacker);
        });
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Attacker);
        HitResult = HIT_Critical;
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            ApplySilence(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0));
        });
        BonusDamage = this.VALUE_BY_LEVEL;
        SelfDamage = Math(0 + (BonusDamage ?? 0), MO_MULTIPLY, 0.4);
        SpellEffectCreate(b, default, "olaf_recklessSwing_tar_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(this.ParticleID, default, "olaf_recklessStrike_axe_charge.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_WEAPON_L_2", default, Owner, "BUFFBONE_WEAPON_L_4", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ParticleID, default, "olaf_recklessStrike_axe_charge.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_WEAPON_R_2", default, Owner, "BUFFBONE_WEAPON_R_4", default, false, default, default, default, default, default, default);
        SpellEffectCreate(a, default, "olaf_recklessSwing_tar_04.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(c, default, "olaf_recklessSwing_tar_05.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(c, default, "olaf_recklessSwing_tar_03.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        ApplyDamage(Attacker, Target, 0 + (BonusDamage ?? 0), TRUE_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Attacker);
        ApplyDamage(Attacker, Attacker, 0 + (SelfDamage ?? 0), TRUE_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        Count = GetBuffCountFromCaster(Owner, Owner, "Pyromania_particle");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            ApplyStun(Attacker, Target, 0 + (CharVars.StunDuration ?? 0));
            SpellBuffRemove(Owner, "Pyromania_particle", Owner, 0);
        });
        tempManaCost = GetCastInfo(GetPARCost);
        NextBuffVars.ManaCost = tempManaCost;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.7, 0, false, false, Attacker);
        SpellBuffAdd(Owner, Owner, "Pyromania", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        AnnieSkinID = GetSkinID(Owner);
        If(AnnieSkinID, default, CO_EQUAL, default, 5, () => {
            SpellEffectCreate(a, default, "DisintegrateHit_tar_frost.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            SpellEffectCreate(b, default, "Disintegrate_hit_frost.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(a, default, "DisintegrateHit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            SpellEffectCreate(b, default, "Disintegrate_hit.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            AnnieSkinID = GetSkinID(Owner);
            TeamID = GetTeamID(default);
            If(AnnieSkinID, default, CO_EQUAL, default, 5, () => {
                SpellEffectCreate(a, default, "AnnieBasicAttack_tar_frost.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "AnnieBasicAttack_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            });
        });
        NextBuffVars.DamageReturn = this.VALUE_BY_LEVEL;
        NextBuffVars.ArmorAmount = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 15, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        IfNotHasBuff(Owner, Owner, "Pyromania_particle", () => {
            SpellBuffAdd(Owner, Owner, "Pyromania", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, default, default);
        });
        TeamID = GetTeamID(default);
        IsStealthed = GetStatus(Target, GetStealthed);
        HitResult = HIT_Normal;
        percentOfAttack = CharVars.percentOfAttack;
        BaseDamage = GetTotalAttackDamage(Owner);
        BaseDamage = Math(1.3, MO_MULTIPLY, 0 + (BaseDamage ?? 0));
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            BreakSpellShields(Target);
            SpellEffectCreate(asdf, default, "caitlyn_peaceMaker_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Owner, default, default, true, false, false, false, false, default, default);
            ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + (percentOfAttack ?? 0), 0, 0, false, true, Attacker);
            CharVars.percentOfAttack = Math(0 + (CharVars.percentOfAttack ?? 0), MO_MULTIPLY, 0.85);
            CharVars.percentOfAttack = Math(0 + (CharVars.percentOfAttack ?? 0), MO_MAX, 0.4);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                BreakSpellShields(Target);
                SpellEffectCreate(asdf, default, "caitlyn_peaceMaker_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Owner, default, default, true, false, false, false, false, default, default);
                ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + (percentOfAttack ?? 0), 0, 0, false, true, Attacker);
                CharVars.percentOfAttack = Math(0 + (CharVars.percentOfAttack ?? 0), MO_MULTIPLY, 0.85);
                CharVars.percentOfAttack = Math(0 + (CharVars.percentOfAttack ?? 0), MO_MAX, 0.4);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    BreakSpellShields(Target);
                    SpellEffectCreate(asdf, default, "caitlyn_peaceMaker_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Owner, default, default, true, false, false, false, false, default, default);
                    ApplyDamage(Attacker, Target, 0 + (BaseDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + (percentOfAttack ?? 0), 0, 0, false, true, Attacker);
                    CharVars.percentOfAttack = Math(0 + (CharVars.percentOfAttack ?? 0), MO_MULTIPLY, 0.85);
                    CharVars.percentOfAttack = Math(0 + (CharVars.percentOfAttack ?? 0), MO_MAX, 0.4);
                });
            });
        });
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Annie", teamID ?? TEAM_UNKNOWN);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        Dmg = this.VALUE_BY_LEVEL;
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, default, false, false, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Annie", teamID ?? TEAM_UNKNOWN);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        Dmg = this.VALUE_BY_LEVEL;
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, default, false, false, default);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            AnnieSkinID = GetSkinID(Owner);
            TeamID = GetTeamID(default);
            If(AnnieSkinID, default, CO_EQUAL, default, 5, () => {
                SpellEffectCreate(a, default, "AnnieBasicAttack_tar_frost.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "AnnieBasicAttack_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            });
        });
        TeamID = GetTeamID(default);
        TargetPos = GetUnitPosition(Target);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        BreakSpellShields(Target);
        BaseDamage = this.VALUE_BY_LEVEL;
        totalDmg = GetTotalAttackDamage(Owner);
        baseDmg = GetStat(GetBaseAttackDamage, Owner);
        bonusDmg = Math(0 + (totalDmg ?? 0), MO_SUBTRACT, 0 + (baseDmg ?? 0));
        PhysPreMod = Math(2, MO_MULTIPLY, 0 + (bonusDmg ?? 0));
        DamageToDeal = Math(0 + (PhysPreMod ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, true, true, Attacker);
        SpellEffectCreate(particle, default, "caitlyn_ace_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Owner, default, default, true, default, default, default, default, default, default);
        SpellBuffRemove(Attacker, "IfHasBuffCheck", Attacker, default);
        DestroyMissile(MissileNetworkID);
        IfHasBuff(Target, Attacker, "CaitlynAceInTheHole", () => {
            SpellBuffRemove(Target, "CaitlynAceInTheHole", Attacker, default);
        });
        Else(() => {
            ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", "CaitlynAceintheHole", true, (Unit) => {
                SpellBuffRemove(Unit, "CaitlynAceInTheHole", Attacker, default);
            });
        });
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        ApplyDamage(Attacker, Target, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            AnnieSkinID = GetSkinID(Owner);
            TeamID = GetTeamID(default);
            If(AnnieSkinID, default, CO_EQUAL, default, 5, () => {
                SpellEffectCreate(a, default, "AnnieBasicAttack_tar_frost.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "AnnieBasicAttack_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            });
        });
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 0, false, false, Attacker);
        If(CharVars.SpellWillStun, default, CO_EQUAL, default, true, () => {
            ApplyStun(Attacker, Target, 0 + (CharVars.StunDuration ?? 0));
        });
        TeamID = GetTeamID(default);
        AnnieSkinID = GetSkinID(Owner);
        If(AnnieSkinID, default, CO_EQUAL, default, 5, () => {
            SpellEffectCreate(a, default, "Incinerate_buf_frost.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(a, default, "Incinerate_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.MoveSpeedMod = -0.5;
        IsStealthed = GetStatus(Target, GetStealthed);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Target, default, 100, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, true, default);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.8, 1, false, false, Attacker);
            SpellEffectCreate(asdf, default, "caitlyn_entrapment_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Owner, default, default, true, default, default, default, default, default, default);
            DestroyMissile(MissileNetworkID);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                BreakSpellShields(Target);
                SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
                SpellBuffAdd(Attacker, Target, default, 100, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, true, default);
                ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.8, 1, false, false, Attacker);
                SpellEffectCreate(asdf, default, "caitlyn_entrapment_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Owner, default, default, true, default, default, default, default, default, default);
                DestroyMissile(MissileNetworkID);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Target);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    BreakSpellShields(Target);
                    SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
                    SpellBuffAdd(Attacker, Target, default, 100, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, true, default);
                    ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.8, 1, false, false, Attacker);
                    SpellEffectCreate(asdf, default, "caitlyn_entrapment_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Owner, default, default, true, default, default, default, default, default, default);
                    DestroyMissile(MissileNetworkID);
                });
            });
        });
        CharVars.CastPoint = GetUnitPosition(Owner);
        SpellCast(Owner, Target, Target, Target, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        AttackDamage = GetTotalAttackDamage(Owner);
        AttackDamageMod = Math(0 + (AttackDamage ?? 0), MO_MULTIPLY, 0.5);
        BackstabBonus = 0;
        IfHasBuff(Owner, Owner, "CastFromBehind", () => {
            BackstabBonus = 0.2;
        });
        Else(() => {
            If(Owner, default, CO_IS_TARGET_IN_FRONT_OF_ME, Target, default, () => {
                If(Target, default, CO_IS_TARGET_BEHIND_ME, Owner, default, () => {
                    BackstabBonus = 0.2;
                });
            });
        });
        ApplyDamage(Attacker, Target, 0 + (AttackDamageMod ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1 + (BackstabBonus ?? 0), 1, 1, false, false, Attacker);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.MissChance = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Target, "TwoShivPoison", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Jester", teamID ?? TEAM_UNKNOWN);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        Dmg = this.VALUE_BY_LEVEL;
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0.25, 1, false, false, Owner);
        NextBuffVars.CastPoint = CharVars.CastPoint;
        Damage = this.VALUE_BY_LEVEL;
        AD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusDamage = Math(0 + (AD ?? 0), MO_MULTIPLY, 0.5);
        Damage = Math(0 + (Damage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        NextBuffVars.Damage = Damage;
        SpellEffectCreate(hi, default, "vayne_E_tar.troy", default, TEAM_NEUTRAL, 200, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Target, Target, default, default, true, false, false, false, false, default, default);
        IfHasBuff(Attacker, Attacker, "VayneSilveredBolts", () => {
            Count = GetBuffCountFromCaster(Target, Attacker, "VayneSilveredDebuff");
            If(Count, default, CO_EQUAL, default, 2, () => {
                TeamID = GetTeamID(default);
                TeamIDTarget = GetTeamID(default);
                SpellEffectCreate(gragas, default, "vayne_W_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Nothing, default, Target, Target, default, default, true, false, false, false, false, default, default);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                SpellBuffClear(Target, "VayneSilveredDebuff");
                TarMaxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
                RankScaling = this.VALUE_BY_LEVEL;
                FlatScaling = this.VALUE_BY_LEVEL;
                DamageToDeal = Math(0 + (TarMaxHealth ?? 0), MO_MULTIPLY, 0 + (RankScaling ?? 0));
                DamageToDeal = Math(0 + (DamageToDeal ?? 0), MO_ADD, 0 + (FlatScaling ?? 0));
                If(TeamIDTarget, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                    DamageToDeal = Math(0 + (DamageToDeal ?? 0), MO_MIN, 200);
                });
                ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), TRUE_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
            });
            Else(() => {
                SpellBuffAdd(Attacker, Target, "VayneSilveredDebuff", 3, 1, 3.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 0.5, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "VayneCondemnMissile", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Shaco", teamID ?? TEAM_UNKNOWN);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        Dmg = this.VALUE_BY_LEVEL;
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0.2, 1, false, false, Owner);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Shaco", TEAM_ORDER);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        Dmg = this.VALUE_BY_LEVEL;
        ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0.25, 1, false, false, Owner);
        SpellBuffRemoveType(Owner, BUFF_CombatEnchancer);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Shred);
        IsStealthed = GetStatus(Owner, GetStealthed);
        DestroyMissileForTarget(Owner);
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            SpellCast(Owner, Owner, Owner, Owner, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        });
        Else(() => {
            Pos = GetRandomPointInAreaUnit(Owner, 100, 0);
            Other1 = CloneUnitPet(Owner, "Hallucinate", 18, Pos, 0, 0, true);
            NextBuffVars.DamageAmount = this.VALUE_BY_LEVEL;
            NextBuffVars.DamageDealt = this.VALUE_BY_LEVEL;
            NextBuffVars.DamageTaken = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Attacker, Other1, "HallucinateFull", 1, 1, 18, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Other1, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Other1, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Other1, "Backstab", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            SetStatus(Other1, default, SetStealthed);
        });
        DestroyMissileForTarget(Owner);
        NextBuffVars.DamageAmount = this.VALUE_BY_LEVEL;
        NextBuffVars.DamageDealt = this.VALUE_BY_LEVEL;
        NextBuffVars.DamageTaken = this.VALUE_BY_LEVEL;
        NextBuffVars.shacoDamageTaken = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "HallucinateApplicator", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CritChance = GetStat(GetFlatCritChanceMod, Attacker);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        scalingDamage = this.VALUE_BY_LEVEL;
        BaseAttackDamage = GetTotalAttackDamage(Owner);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                HitResult = HIT_Normal;
                DamageVar = BaseAttackDamage;
            });
            Else(() => {
                If(CritChance, default, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                    HitResult = HIT_Critical;
                    CritDamage = GetStat(GetFlatCritDamageMod, Attacker);
                    CritDamage = Math(0 + (CritDamage ?? 0), MO_ADD, 2);
                    scalingDamage = Math(0 + (scalingDamage ?? 0), MO_DIVIDE, 0 + (CritDamage ?? 0));
                });
                Else(() => {
                    HitResult = HIT_Normal;
                });
                scalingDamage = Math(1, MO_ADD, 0 + (scalingDamage ?? 0));
                DamageVar = Math(0 + (BaseAttackDamage ?? 0), MO_MULTIPLY, 0 + (scalingDamage ?? 0));
            });
        });
        Else(() => {
            HitResult = HIT_Normal;
            DamageVar = BaseAttackDamage;
        });
        ApplyDamage(Attacker, Target, 0 + (DamageVar ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                SpellEffectCreate(hi, default, "vayne_Q_tar.troy", default, TEAM_NEUTRAL, 200, 0, TEAM_UNKNOWN, Owner, false, Target, default, Owner, Target, default, default, true, default, default, false, false, default, default);
                SpellBuffRemove(Owner, "VayneTumbleBonus", Owner, 0);
                SpellBuffRemove(Owner, "VayneTumbleFade", Owner, 0);
            });
        });
        NextBuffVars.ADMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, "VayneInquisition", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        CritChance = GetStat(GetFlatCritChanceMod, Attacker);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        scalingDamage = this.VALUE_BY_LEVEL;
        BaseAttackDamage = GetTotalAttackDamage(Owner);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                HitResult = HIT_Normal;
                DamageVar = BaseAttackDamage;
            });
            Else(() => {
                If(CritChance, default, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                    HitResult = HIT_Critical;
                    CritDamage = GetStat(GetFlatCritDamageMod, Attacker);
                    CritDamage = Math(0 + (CritDamage ?? 0), MO_ADD, 2);
                    scalingDamage = Math(0 + (scalingDamage ?? 0), MO_DIVIDE, 0 + (CritDamage ?? 0));
                });
                Else(() => {
                    HitResult = HIT_Normal;
                });
                scalingDamage = Math(1, MO_ADD, 0 + (scalingDamage ?? 0));
                DamageVar = Math(0 + (BaseAttackDamage ?? 0), MO_MULTIPLY, 0 + (scalingDamage ?? 0));
            });
        });
        Else(() => {
            HitResult = HIT_Normal;
            DamageVar = BaseAttackDamage;
        });
        ApplyDamage(Attacker, Target, 0 + (DamageVar ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                SpellEffectCreate(hi, default, "vayne_Q_tar.troy", default, TEAM_NEUTRAL, 200, 0, TEAM_UNKNOWN, Owner, false, Target, default, Owner, Target, default, default, true, default, default, false, false, default, default);
                SpellBuffRemove(Owner, "VayneTumbleBonus", Owner, 0);
                SpellBuffRemove(Owner, "VayneTumbleFade", Owner, 0);
            });
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "Xerath_Bolt_hit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(b, default, "Xerath_Bolt_hit.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        Debuff = true;
        IfHasBuff(Target, Target, "ResistantSkinDragon", () => {
            Debuff = false;
        });
        IfHasBuff(Target, Target, "ResistantSkin", () => {
            Debuff = false;
        });
        If(Debuff, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Attacker, Target, "XerathMageChains", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.7, 0, false, false, Attacker);
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "Xerath_Bolt_hit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        Debuff = true;
        IfHasBuff(Target, Target, "ResistantSkinDragon", () => {
            Debuff = false;
        });
        IfHasBuff(Target, Target, "ResistantSkin", () => {
            Debuff = false;
        });
        If(Debuff, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Attacker, Target, "XerathMageChains", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.7, 0, false, false, Attacker);
        IfHasBuff(Owner, Nothing, "YorickSummonRavenous", () => {
            SpellBuffClear(Owner, "YorickSummonRavenous");
        });
        SpellBuffAdd(Owner, Target, "YorickRavenousPrimaryTarget", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        BreakSpellShields(Target);
        Distance = DistanceBetweenObjects("Owner", "Target");
        Distance = Math(0 + (Distance ?? 0), MO_ADD, 250);
        TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (Distance ?? 0), 0);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, false, default);
        NextBuffVars.DrainPercent = this.VALUE_BY_LEVEL;
        NextBuffVars.DrainedBool = false;
        SpellBuffAdd(Owner, Owner, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        BaseDamage = this.VALUE_BY_LEVEL;
        BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
        DamageToDeal = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusAD ?? 0));
        ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        TeamID = GetTeamID(default);
        SpellEffectCreate(LifestealEffect, default, "yorick_ravenousGhoul_activeHeal.troy", default, TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        SpellEffectCreate(HitEffect, default, "yorick_ravenousGhoul_cas_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        SpellEffectCreate(e, default, "YorickPHDecayedExplosion.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, false, false, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.MoveSpeedMod = -0.5;
        ForEachUnitInTargetArea(Owner, Target, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellEffectCreate(b, default, "tristana_explosiveShot_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, "YorickDecayedSlow", 100, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
        });
        SpellBuffAdd(Owner, Target, "YorickReviveAllySelf", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        zombie = GetIsZombie(Owner);
        If(zombie, default, CO_EQUAL, default, false, () => {
            SpellCast(Owner, Target, Owner, Owner, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        });
        Pos = GetUnitPosition(Target);
        Other1 = CloneUnitPet(Target, "YorickRARevive", 0, Pos, 0, 0, false);
        Temp1 = GetPAROrHealth(Other1, GetMaxHealth, PAR_MANA);
        IncHealth(Other1, 0 + (Temp1 ?? 0), Other1);
        SpellBuffAdd(Owner, Other1, "YorickRAPetBuff2", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Other1, Owner, "YorickRARemovePet", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        AP = GetStat(GetFlatMagicDamageMod, Owner);
        BaseAD = GetStat(GetBaseAttackDamage, Owner);
        TotalAD = GetTotalAttackDamage(Owner);
        BonusAD = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
        BonusAD = Math(1, MO_MULTIPLY, 0 + (BonusAD ?? 0));
        AP = Math(1, MO_MULTIPLY, 0 + (AP ?? 0));
        FinalDamage = Math(0 + (AP ?? 0), MO_ADD, 0 + (BonusAD ?? 0));
        ApplyDamage(Attacker, Target, 0 + (FinalDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, default, 100, 1, 4, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "PoppyDITarget", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyDITargetDmg", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "KayleInterventionAnim", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Invulnerability, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Target, GetSlotSpellLevel);
        DamageAmount = this.VALUE_BY_LEVEL;
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(this.a, default, "Xerath_E_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Nothing, default, OwnerPos, true, false, false, false, false, default, default);
        ForEachUnitInTargetArea(Target, Owner, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellEffectCreate(asdf, default, "Xerath_Barrage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            BreakSpellShields(Unit);
            ApplyDamage(Target, Unit, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 0, false, false, Target);
            IfHasBuff(Unit, Target, "XerathMageChains", () => {
                SpellEffectCreate(asdf2, default, "Xerath_MageChains_consume.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                SpellBuffAdd(Target, Unit, "XerathMageChainsRoot", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, true, false, default);
                SpellBuffRemove(Unit, "XerathMageChains", Target, 0);
            });
        });
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Attacker);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        HealLevel = this.VALUE_BY_LEVEL;
        AbilityPower = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.35);
        HealAmount = Math(0 + (HealLevel ?? 0), MO_ADD, 0 + (AbilityPower ?? 0));
        IncHealth(Target, 0 + (HealAmount ?? 0), Owner);
        ApplyAssistMarker(Attacker, Target, 10);
        SpellBuffAdd(Owner, Owner, "KayleDivineBlessingAnim", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        TAD = GetTotalAttackDamage(Owner);
        DamagePercent = this.VALUE_BY_LEVEL;
        CleaveDamage = Math(0 + (TAD ?? 0), MO_MULTIPLY, 0 + (DamagePercent ?? 0));
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        BonusDamage = this.VALUE_BY_LEVEL;
        AbilityPower = Math(0.2, MO_MULTIPLY, 0 + (AbilityPower ?? 0));
        DamageToApply = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (AbilityPower ?? 0));
        DamageToApplySlash = Math(0 + (CleaveDamage ?? 0), MO_ADD, 0 + (DamageToApply ?? 0));
        ApplyDamage(Owner, Target, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ForEachUnitInTargetArea(Owner, Target, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectTurrets ", default, true, (Unit) => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                    ApplyDamage(Owner, Unit, 0 + (DamageToApplySlash ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                });
                Else(() => {
                    ApplyDamage(Owner, Unit, 0 + (DamageToApply ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                });
            });
        });
        TargetPos = GetUnitPosition(Target);
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.Damage = this.VALUE_BY_LEVEL;
        NextBuffVars.DamageTwo = this.VALUE_BY_LEVEL;
        NextBuffVars.WillMove = true;
        NextBuffVars.WillRemove = false;
        OwnerPos = GetUnitPosition(Owner);
        MoveSpeed = GetStat(GetMovementSpeed, Owner);
        SlashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 1200);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        Duration = Math(0 + (Distance ?? 0), MO_DIVIDE, 0 + (SlashSpeed ?? 0));
        NextBuffVars.SlashSpeed = SlashSpeed;
        SpellBuffAdd(Target, Owner, default, 1, 1, 0.25 + (Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "PoppyHeroicChargePoppyFix", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "HextechSweeper", () => {
            SetSlotSpellCooldownTimeVer2(60, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name1, default, CO_EQUAL, default, "HextechSweeper", () => {
            SetSlotSpellCooldownTimeVer2(60, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name2, default, CO_EQUAL, default, "HextechSweeper", () => {
            SetSlotSpellCooldownTimeVer2(60, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name3, default, CO_EQUAL, default, "HextechSweeper", () => {
            SetSlotSpellCooldownTimeVer2(60, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name4, default, CO_EQUAL, default, "HextechSweeper", () => {
            SetSlotSpellCooldownTimeVer2(60, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name5, default, CO_EQUAL, default, "HextechSweeper", () => {
            SetSlotSpellCooldownTimeVer2(60, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        SpellBuffAdd(Owner, Owner, default, 1, 1, 240, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellBuffAdd(Target, Target, "RegenerationPotion", 5, 1, 15, NextBuffVars, BUFF_STACKS_AND_CONTINUE, BUFF_Heal, 0, false, false, false, default);
        SpellBuffAdd(Target, Target, "Potion_Internal", 1, 1, 15, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.countHealthPotion = GetBuffCountFromAll(Owner, "RegenerationPotion");
        SpellBuffAdd(Target, Target, default, 1, 1, 300, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 240, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellBuffRemove(Owner, "Gate", Owner, 0);
        StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_StunnedOrSilencedOrTaunted);
        SpellBuffAdd(Owner, Owner, "ZhonyasRingShield", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invulnerability, 0, true, false, false, default);
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "ZhonyasHourglass", () => {
            SetSlotSpellCooldownTimeVer2(90, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name1, default, CO_EQUAL, default, "ZhonyasHourglass", () => {
            SetSlotSpellCooldownTimeVer2(90, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name2, default, CO_EQUAL, default, "ZhonyasHourglass", () => {
            SetSlotSpellCooldownTimeVer2(90, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name3, default, CO_EQUAL, default, "ZhonyasHourglass", () => {
            SetSlotSpellCooldownTimeVer2(90, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name4, default, CO_EQUAL, default, "ZhonyasHourglass", () => {
            SetSlotSpellCooldownTimeVer2(90, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name5, default, CO_EQUAL, default, "ZhonyasHourglass", () => {
            SetSlotSpellCooldownTimeVer2(90, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        ap = GetStat(GetFlatMagicDamageMod, Owner);
        apMod = Math(0.00035, MO_MULTIPLY, 0 + (ap ?? 0));
        percentBurn = Math(0.3, MO_ADD, 0 + (apMod ?? 0));
        curHealth = GetPAROrHealth(Target, GetHealth, PAR_MANA);
        damageToDeal = Math(0 + (percentBurn ?? 0), MO_MULTIPLY, 0 + (curHealth ?? 0));
        damageToDeal = Math(0 + (damageToDeal ?? 0), MO_MAX, 200);
        ApplyDamage(Attacker, Target, 0 + (damageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, default, false, false, default);
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        DispellNegativeBuffs(Owner);
        slotCheck = 0;
        While(slotCheck, default, CO_LESS_THAN_OR_EQUAL, default, 5, () => {
            name = GetSlotSpellInfo(slotCheck, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
            If(name, default, CO_EQUAL, default, "QuicksilverSash", () => {
                SetSlotSpellCooldownTimeVer2(90, 0 + (slotCheck ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
            });
            slotCheck = Math(0 + (slotCheck ?? 0), MO_ADD, 1);
        });
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "PurpleCapote", () => {
            SetSlotSpellCooldownTimeVer2(60, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name1, default, CO_EQUAL, default, "PurpleCapote", () => {
            SetSlotSpellCooldownTimeVer2(60, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name2, default, CO_EQUAL, default, "PurpleCapote", () => {
            SetSlotSpellCooldownTimeVer2(60, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name3, default, CO_EQUAL, default, "PurpleCapote", () => {
            SetSlotSpellCooldownTimeVer2(60, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name4, default, CO_EQUAL, default, "PurpleCapote", () => {
            SetSlotSpellCooldownTimeVer2(60, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name5, default, CO_EQUAL, default, "PurpleCapote", () => {
            SetSlotSpellCooldownTimeVer2(60, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        NextBuffVars.ShieldHealth = 400;
        SpellBuffAdd(Owner, Owner, "PurpleCapote", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "SummonerTeleport", () => {
            SpellBuffRemove(Owner, "SummonerTeleport", Owner, default);
        });
        Else(() => {
            CastPosition = GetRandomPointInAreaUnit(Target, 100, 50);
            NextBuffVars.CastPosition = CastPosition;
            NextBuffVars.BuffDuration = 4;
            SpellBuffAdd(Owner, Owner, default, 1, 1, 0.1 + (NextBuffVars.BuffDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, default, default, default, default);
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                    SpellBuffAdd(Attacker, Target, "Teleport_Turret", 1, 1, 0 + (NextBuffVars.BuffDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, default, default, default, default);
                });
                Else(() => {
                    SpellBuffAdd(Attacker, Target, "Teleport_Target", 1, 1, 0.1 + (NextBuffVars.BuffDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, default, default, default, default);
                });
            });
            SpellBuffAdd(Target, Owner, "Teleport_DeathRemoval", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        SpellBuffAdd(Owner, Owner, default, 1, 1, 240, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        DebuffMod = -0.7;
        CurrentAbilityPower = GetStat(GetFlatMagicDamageMod, Target);
        CurrentBonusDamage = GetStat(GetFlatPhysicalDamageMod, Target);
        CurrentBaseDamage = GetStat(GetBaseAttackDamage, Target);
        AbilityPowerMod = Math(0 + (DebuffMod ?? 0), MO_MULTIPLY, 0 + (CurrentAbilityPower ?? 0));
        BonusDamageMod = Math(0 + (DebuffMod ?? 0), MO_MULTIPLY, 0 + (CurrentBonusDamage ?? 0));
        BaseDamageMod = Math(0 + (DebuffMod ?? 0), MO_MULTIPLY, 0 + (CurrentBaseDamage ?? 0));
        NextBuffVars.AbilityPowerMod = AbilityPowerMod;
        NextBuffVars.BonusDamageMod = BonusDamageMod;
        NextBuffVars.BaseDamageMod = BaseDamageMod;
        SpellBuffAdd(Owner, Target, default, 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
        SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "DeathfireGraspSpell");
        SpellCast(Owner, Target, Target, Target, default, 7, ExtraSlots, 1, true, true, false, default, default, default);
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "DeathfireGrasp", () => {
            SetSlotSpellCooldownTimeVer2(60, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name1, default, CO_EQUAL, default, "DeathfireGrasp", () => {
            SetSlotSpellCooldownTimeVer2(60, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name2, default, CO_EQUAL, default, "DeathfireGrasp", () => {
            SetSlotSpellCooldownTimeVer2(60, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name3, default, CO_EQUAL, default, "DeathfireGrasp", () => {
            SetSlotSpellCooldownTimeVer2(60, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name4, default, CO_EQUAL, default, "DeathfireGrasp", () => {
            SetSlotSpellCooldownTimeVer2(60, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name5, default, CO_EQUAL, default, "DeathfireGrasp", () => {
            SetSlotSpellCooldownTimeVer2(60, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        AP = GetStat(GetFlatMagicDamageMod, Owner);
        APBonus = Math(0 + (AP ?? 0), MO_MULTIPLY, 1.5);
        ShieldHealth = Math(0 + (APBonus ?? 0), MO_ADD, 200);
        NextBuffVars.ShieldHealth = ShieldHealth;
        SpellBuffAdd(Owner, Owner, "PrideShield", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 1, default, default, default, default);
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "PrideShield", () => {
            SetSlotSpellCooldownTimeVer2(45, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name1, default, CO_EQUAL, default, "PrideShield", () => {
            SetSlotSpellCooldownTimeVer2(45, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name2, default, CO_EQUAL, default, "PrideShield", () => {
            SetSlotSpellCooldownTimeVer2(45, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name3, default, CO_EQUAL, default, "PrideShield", () => {
            SetSlotSpellCooldownTimeVer2(45, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name4, default, CO_EQUAL, default, "PrideShield", () => {
            SetSlotSpellCooldownTimeVer2(45, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name5, default, CO_EQUAL, default, "PrideShield", () => {
            SetSlotSpellCooldownTimeVer2(45, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        IfHasBuff(Target, Owner, "BlackShield", () => {
            SpellBuffRemove(Target, "BlackShield", Attacker, default);
            DebugSay(Owner, "DISPELL BlackShield", default);
        });
        Else(() => {
            NextBuffVars.ShieldHealth = 1000;
            DebugSay(Owner, "ADD BlackShield 1000 Health", default);
            SpellBuffAdd(Attacker, Target, "BlackShield", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_SpellImmunity, 0, true, false, default, default);
        });
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "BilgewaterCutlass", () => {
            SetSlotSpellCooldownTimeVer2(60, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name1, default, CO_EQUAL, default, "BilgewaterCutlass", () => {
            SetSlotSpellCooldownTimeVer2(60, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name2, default, CO_EQUAL, default, "BilgewaterCutlass", () => {
            SetSlotSpellCooldownTimeVer2(60, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name3, default, CO_EQUAL, default, "BilgewaterCutlass", () => {
            SetSlotSpellCooldownTimeVer2(60, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name4, default, CO_EQUAL, default, "BilgewaterCutlass", () => {
            SetSlotSpellCooldownTimeVer2(60, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name5, default, CO_EQUAL, default, "BilgewaterCutlass", () => {
            SetSlotSpellCooldownTimeVer2(60, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        TargetPos = GetUnitPosition(Target);
        FaceDirection(Owner, TargetPos);
        SpellEffectCreate(CasterParticle, default, "PirateCutlass_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        BreakSpellShields(Target);
        ApplyDamage(Attacker, Target, 150, MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, true, true, Attacker);
        NextBuffVars.MoveSpeedMod = -0.5;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Slow, 0, true, false, default, default);
        ApplyDamage(Attacker, Target, 300, MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, true, true, Attacker);
        NextBuffVars.MoveSpeedMod = -0.5;
        SpellBuffAdd(Attacker, Target, "BilgewaterCutlass", 1, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Slow, 0, true, false, default, default);
        SpellEffectCreate(particle, default, "Haste_proc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "HextechGunblade", () => {
            SetSlotSpellCooldownTimeVer2(60, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name1, default, CO_EQUAL, default, "HextechGunblade", () => {
            SetSlotSpellCooldownTimeVer2(60, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name2, default, CO_EQUAL, default, "HextechGunblade", () => {
            SetSlotSpellCooldownTimeVer2(60, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name3, default, CO_EQUAL, default, "HextechGunblade", () => {
            SetSlotSpellCooldownTimeVer2(60, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name4, default, CO_EQUAL, default, "HextechGunblade", () => {
            SetSlotSpellCooldownTimeVer2(60, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name5, default, CO_EQUAL, default, "HextechGunblade", () => {
            SetSlotSpellCooldownTimeVer2(60, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "HextechGunbladeSpell");
        TargetPos = GetUnitPosition(Target);
        FaceDirection(Owner, TargetPos);
        SpellCast(Owner, Target, Target, Target, false, 7, ExtraSlots, 1, true, true, false, false, false, default);
        SpellBuffAdd(Target, Target, default, 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "Breathstealer", () => {
            SetSlotSpellCooldownTimeVer2(90, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name1, default, CO_EQUAL, default, "Breathstealer", () => {
            SetSlotSpellCooldownTimeVer2(90, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name2, default, CO_EQUAL, default, "Breathstealer", () => {
            SetSlotSpellCooldownTimeVer2(90, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name3, default, CO_EQUAL, default, "Breathstealer", () => {
            SetSlotSpellCooldownTimeVer2(90, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name4, default, CO_EQUAL, default, "Breathstealer", () => {
            SetSlotSpellCooldownTimeVer2(90, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name5, default, CO_EQUAL, default, "Breathstealer", () => {
            SetSlotSpellCooldownTimeVer2(90, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "BreathstealerSpell");
        TargetPos = GetUnitPosition(Target);
        FaceDirection(Owner, TargetPos);
        SpellCast(Owner, Target, Target, Target, false, 7, ExtraSlots, 1, true, true, false, false, false, default);
    }
    public void BuffOnUpdateStats()
    {
        #region VarDecl
        float? PercentReduction = null;
        Object? Level = null;
        float? MaxMana = null;
        float? ManaRegen = null;
        float? MaxEnergy = null;
        float? EnergyRegen = null;
        float? Health = null;
        float? HealthInc = null;
        float? MyHealth = null;
        float? PlayerLevel = null;
        float? HPIncrease = null;
        TeamId? TeamOfOwner = null;
        float? CurrentTime = null;
        float? TimeDelta = null;
        float? TimePercent = null;
        TeamId? TeamID = null;
        int? NumHostileChampions = null;
        float? healthPercent = null;
        int? OrderChannelCount = null;
        int? ChaosChannelBuff = null;
        float? HealthPercent = null;
        float? Size = null;
        TeamId? CurrentTeam = null;
        float? PercentMana = null;
        float? PercentMissing = null;
        Object? HPRegen = null;
        float? maxHealth = null;
        float? HealthToInc = null;
        float? DmgIncrease = null;
        float? NumChampions = null;
        float? BonusHealth = null;
        float? StatsPercent = null;
        float? StatsPer5 = null;
        float? HealthMod = null;
        float? HealthIncRate = null;
        Object? TargetPos = null;
        Object? AttackSpeedPerLevel = null;
        float? AttackSpeedMod = null;
        float? LvlDodgeMod = null;
        float? DodgeMod = null;
        Object? Cooldown = null;
        Object? Modifier = null;
        float? Result = null;
        AttackableUnit? Caster = null;
        float? CasMovespeedMod = null;
        float? OwnMovespeedMod = null;
        float? MovespeedDiff = null;
        float? MaxHP = null;
        float? ShieldHP = null;
        float? ShieldHealth = null;
        Vector3? CurPosition = null;
        Vector3? LastPosition = null;
        float? Distance = null;
        float? Temp1 = null;
        Object? MovementSpeedMod = null;
        Object? MoveSpeedBonus = null;
        int? TeemoSkinID = null;
        float? DamageAmount = null;
        Vector3? OwnerPos = null;
        float? GrandDistance = null;
        long? MinDistanceCheck = null;
        long? MaxDistanceCheck = null;
        float? DistanceVariation = null;
        long? MaxSpeed = null;
        long? MinSpeed = null;
        float? SpeedVariation = null;
        float? OffsetValue = null;
        float? PercOverMinDist = null;
        float? SpeedToReduce = null;
        float? AdjustedSpeed = null;
        Object? ASAura = null;
        long? BaseDamage = null;
        float? LevelDamage = null;
        float? TotalDamage = null;
        float? APMod = null;
        Object? PercMaxHealthMod = null;
        float? OwnerMaxHealth = null;
        float? HealthtoAdd = null;
        float? CritToAdd = null;
        float? CritToDisplay = null;
        float? CritToTooltip = null;
        float? TooltipAttackSpeed = null;
        float? dist = null;
        float? Factor = null;
        float? Heal = null;
        bool? temp = null;
        Object? MoveMod = null;
        Object? BaseIncrease = null;
        float? DamageMod = null;
        float? HealthMissing = null;
        float? RawDamage = null;
        float? DamageBonus = null;
        double? Regen = null;
        int? Count = null;
        float? BonusMove = null;
        float? TotalMoveSpeedMod = null;
        Object? AttackDamageBoon = null;
        float? DmgMultTooltip = null;
        float? totalSlow = null;
        int? MonkeyStacks = null;
        Object? OffensiveGain = null;
        float? RageCount = null;
        float? CritMod = null;
        Object? SpeedMod = null;
        float? ElapsedRatio = null;
        float? TotalSpeed = null;
        float? TicksLeft = null;
        Object? DefenseBonus = null;
        float? ElapsedTime = null;
        float? TrundleArmor = null;
        float? TrundleMR = null;
        float? DamageReductionMod = null;
        float? HealHP = null;
        bool? Visible = null;
        bool? Hunt = null;
        float? fury = null;
        long? AttackSpeed = null;
        long? ArmorReduction = null;
        long? MagicReduction = null;
        Object? baseDmg = null;
        float? missingPercent = null;
        Object? dmgPerMissingHealth = null;
        float? variableDmg = null;
        float? totalBonusDmg = null;
        float? BonusDamage = null;
        float? curSlowPercent = null;
        float? speedMod = null;
        float? MoveSpeedVal = null;
        float? MoveSpeedDif = null;
        float? PercentHealth = null;
        float? CharLevel = null;
        float? APGain = null;
        Object? SizeByLevel = null;
        float? Bonus = null;
        Object? HealthPerStack = null;
        Object? FeastBase = null;
        float? BonusFeastHealth = null;
        float? FeastHealth = null;
        float? TargetHealth = null;
        Object? Time = null;
        float? DamageReduction = null;
        float? HealthPerc = null;
        float? ASPerc = null;
        float? CurrentHealth = null;
        float? ArmorBonus = null;
        Object? ArmorDamageValue = null;
        float? HealthDisplay = null;
        Object? name = null;
        Object? name1 = null;
        Object? name2 = null;
        Object? name3 = null;
        Object? name4 = null;
        Object? name5 = null;
        float? GuardianAngelCount = null;
        Object? AbilityPowerMod = null;
        Object? BaseDamageMod = null;
        Object? BonusDamageMod = null;
        float? HealthPERC = null;
        float? PercHealth = null;
        float? PercMissing = null;
        float? Vamp = null;
        float? MoveSpeedMod = null;
        float? LessOwnerHealth = null;
        float? ResistanceShred = null;
        float? BonusAbilityPower = null;
        float? ValueDisplay = null;
        float? LessOwnerMana = null;
        float? ResistanceBuff = null;
        float? APDisplay = null;
        #endregion
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanCast);
        ExecutePeriodically(60, this.LastTimeExecuted, false, () => {
            IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 125);
            IncPermanentStat(IncPermanentFlatHPRegenMod, Owner, 0.375);
        });
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        PercentReduction = GetStat(GetPercentHardnessMod, Owner);
        PercentReduction = Math(0 + (PercentReduction ?? 0), MO_MULTIPLY, 100);
        If(PercentReduction, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            SetBuffToolTipVar(1, 0 + (PercentReduction ?? 0));
        });
        Else(() => {
            SetBuffToolTipVar(1, 0);
        });
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.AP ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AS ?? 0));
        IncStat(IncFlatHPRegenMod, Owner, 0 + (this.hpRegen ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.AP ?? 0));
        IncStat(IncFlatArmorMod, Owner, -10);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorMod ?? 0));
        Level = GetLevel(Owner);
        Level = Math(0.01, MO_MULTIPLY, 0 + (Level ?? 0));
        IncStat(IncPercentPhysicalDamageMod, Owner, 0 + (Level ?? 0));
        IncStat(IncPercentMagicDamageMod, Owner, 0 + (Level ?? 0));
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            IncStat(IncPercentCooldownMod, Owner, -0.2);
            MaxMana = GetPAROrHealth(Target, GetMaxPAR, PAR_MANA);
            ManaRegen = Math(0 + (MaxMana ?? 0), MO_MULTIPLY, 0.01);
            IncFlatPARRegenMod(Owner, 5 + (ManaRegen ?? 0));
            MaxEnergy = GetPAROrHealth(Target, GetMaxPAR, PAR_ENERGY);
            EnergyRegen = Math(0 + (MaxEnergy ?? 0), MO_MULTIPLY, 0.01);
            IncFlatPARRegenMod(Owner, 5 + (EnergyRegen ?? 0));
        });
        ExecutePeriodically(5, this.LastTimeExecuted, false, () => {
            Health = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            HealthInc = Math(0 + (Health ?? 0), MO_MULTIPLY, 0.03);
            IncHealth(Owner, 0 + (HealthInc ?? 0), Owner);
            SpellEffectCreate(Particle, default, "InnervatingLocket_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageMod ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.attackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0.3);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MovementSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        If(Attacker, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Else(() => {
            SetStatus(Owner, default, SetTaunted);
        });
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanCast);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, -0.4);
        SetStatus(Owner, default, SetSuppressed);
        SetStatus(Owner, default, SetStunned);
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.attackSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentCooldownMod, Owner, -0.1);
        SetStatus(Owner, default, SetPhysicalImmune);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.SlowPercent ?? 0));
        IncStat(IncFlatMissChanceMod, Owner, 0 + (this.MissChance ?? 0));
        IncStat(IncPercentHPRegenMod, Owner, -1);
        SetStatus(Owner, default, SetStealthed);
        SetStatus(Owner, default, SetMagicImmune);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        ExecutePeriodically(10, this.LastTimeExecuted, false, () => {
            MyHealth = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
            If(MyHealth, default, CO_GREATER_THAN_OR_EQUAL, default, 0.99, () => {
                ForEachUnitInTargetArea(Owner, Owner, 9999, "AffectEnemies AffectFriends AffectHeroes ", default, default, (Unit) => {
                    PlayerLevel = GetLevel(Unit);
                    If(PlayerLevel, default, CO_GREATER_THAN, this.MaxPlayerLevel, default, () => {
                        this.MaxPlayerLevel = PlayerLevel ?? 0;
                    });
                });
            });
        });
        HPIncrease = Math(0 + (this.HPPerLevel ?? 0), MO_MULTIPLY, 0 + (this.MaxPlayerLevel ?? 0));
        IncStat(IncFlatHPPoolMod, Owner, 0 + (HPIncrease ?? 0));
        SetStatus(Owner, default, SetStunned);
        SetStatus(Owner, default, SetStealthed);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        SetStatus(Owner, default, SetRooted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetCharmed);
        IncStat(IncPercentPhysicalDamageMod, Owner, -0.3);
        IfHasBuff(Owner, Owner, "Internal_50MS", () => {
            IncStat(IncPercentHPRegenMod, Owner, -0.5);
            IncStat(IncPercentLifeStealMod, Owner, 0 + (this.lifeStealMod ?? 0));
            IncStat(IncPercentSpellVampMod, Owner, 0 + (this.spellVampMod ?? 0));
        });
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        SetStatus(Owner, default, SetNearSight);
        SetStatus(Owner, default, SetSilenced);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetPhysicalImmune);
        SetStatus(Owner, default, SetMagicImmune);
        IncStat(IncPercentAttackSpeedMod, Owner, 1);
        TeamOfOwner = GetTeamID(default);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
            SpellBuffClear(Owner, "SummonerOdinGarrison");
        });
        Else(() => {
            SetStatus(Owner, default, SetPhysicalImmune);
            SetStatus(Owner, default, SetMagicImmune);
            IncStat(IncFlatPhysicalDamageMod, Owner, 0);
            IncStat(IncPercentCooldownMod, Owner, -1);
            IncPAR(Owner, 800);
        });
        this.MoveSpeedMod = Math(0 + (this.MoveSpeedMod ?? 0), MO_SUBTRACT, 0.026);
        If(this.MoveSpeedMod, default, CO_LESS_THAN, default, 0, () => {
            this.MoveSpeedMod = 0;
        });
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.APMod ?? 0));
        If(this.ScaleCap, default, CO_LESS_THAN, default, 4, () => {
            this.ScaleCoef = Math(0.04, MO_ADD, 0 + (this.ScaleCoef ?? 0));
            this.ScaleCap = Math(1, MO_ADD, 0 + (this.ScaleCap ?? 0));
        });
        IncScaleSkinCoef(0 + (this.ScaleCoef ?? 0), Owner);
        IncStat(IncFlatHPPoolMod, Owner, 0 + (this.BonusHealth ?? 0));
        IncScaleSkinCoef(0.7, Owner);
        IncStat(IncFlatHPPoolMod, Owner, 0 + (this.BonusHealth ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorBonus ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageBonus ?? 0));
        IfHasBuff(Owner, Owner, "PromoteMeBuff", () => {
            IncStat(IncFlatHPPoolMod, Owner, 0 + (this.BonusHealth ?? 0));
            IncScaleSkinCoef(0.4, Owner);
        });
        IfHasBuff(Owner, Owner, "OdinSuperMinion", () => {
            IncStat(IncFlatHPPoolMod, Owner, 0 + (this.BonusHealth ?? 0));
            IncScaleSkinCoef(0.7, Owner);
        });
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        If(this.ArmorMod, default, CO_NOT_EQUAL, default, 0, () => {
            IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorMod ?? 0));
            IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.ArmorMod ?? 0));
        });
        IncScaleSkinCoef(0.1, Owner);
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.AllyAPMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AllyAttackSpeedMod ?? 0));
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        CurrentTime = GetGameTime();
        TimeDelta = Math(0 + (CurrentTime ?? 0), MO_SUBTRACT, 0 + (this.StartTime ?? 0));
        TimeDelta = Math(0 + (TimeDelta ?? 0), MO_MIN, 90);
        TimePercent = Math(0 + (TimeDelta ?? 0), MO_DIVIDE, 90);
        this.PercentBonus = Math(-0.05, MO_MULTIPLY, 0 + (TimePercent ?? 0));
        IncStat(IncPercentPhysicalReduction, Owner, 0 + (this.PercentBonus ?? 0));
        IncStat(IncFlatHPPoolMod, Owner, 0 + (this.HealthMod ?? 0));
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetNoRender);
        CurrentTime = GetGameTime();
        TimeDelta = Math(0 + (CurrentTime ?? 0), MO_SUBTRACT, 0 + (this.StartTime ?? 0));
        TimeDelta = Math(0 + (TimeDelta ?? 0), MO_MIN, 90);
        TimePercent = Math(0 + (TimeDelta ?? 0), MO_DIVIDE, 90);
        this.PercentBonus = Math(0.1, MO_MULTIPLY, 0 + (TimePercent ?? 0));
        IncStat(IncPercentRespawnTimeMod, Owner, 0 + (this.PercentBonus ?? 0));
        this.expPercentBonus = Math(0.05, MO_MULTIPLY, 0 + (TimePercent ?? 0));
        IncStat(IncPercentEXPBonus, Owner, 0 + (this.expPercentBonus ?? 0));
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetRevealSpecificUnit);
        If(this.DrainedBool, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncPercentRespawnTimeMod, Owner, -3000);
        CurrentTime = GetGameTime();
        TimeDelta = Math(0 + (CurrentTime ?? 0), MO_SUBTRACT, 0 + (this.StartTime ?? 0));
        TimeDelta = Math(0 + (TimeDelta ?? 0), MO_MIN, 90);
        TimePercent = Math(0 + (TimeDelta ?? 0), MO_DIVIDE, 90);
        this.PercentBonus = Math(-0.05, MO_MULTIPLY, 0 + (TimePercent ?? 0));
        IncStat(IncPercentEXPBonus, Owner, 0 + (this.PercentBonus ?? 0));
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        ExecutePeriodically(10, this.LastTimeExecuted, false, () => {
            TeamID = GetTeamID(default);
            If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                this.NumAlliedChampions = GetNumberOfHeroesOnTeam(TEAM_ORDER, false, true);
                NumHostileChampions = GetNumberOfHeroesOnTeam(TEAM_CHAOS, false, true);
            });
            ElseIf(TeamID, default, CO_EQUAL, default, TEAM_CHAOS, () => {
                this.NumAlliedChampions = GetNumberOfHeroesOnTeam(TEAM_CHAOS, false, true);
                NumHostileChampions = GetNumberOfHeroesOnTeam(TEAM_ORDER, false, true);
            });
            If(this.NumAlliedChampions, default, CO_GREATER_THAN, NumHostileChampions, default, () => {
                SpellBuffClear(Owner, "PositiveChampionDelta");
            });
            ElseIf(this.NumAlliedChampions, default, CO_LESS_THAN, NumHostileChampions, default, () => {
                SpellBuffAdd(Attacker, Target, "PositiveChampionDelta", 1, 1, 21, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            Else(() => {
                SpellBuffClear(Owner, "PositiveChampionDelta");
            });
        });
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        If(healthPercent, default, CO_GREATER_THAN_OR_EQUAL, default, 0.995, () => {
            If(this.upgradeTimer, default, CO_EQUAL, default, true, () => {
                ExecutePeriodically(60, this.LastTimeExecuted, false, () => {
                    IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (this.healthPerMinute ?? 0));
                    IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (this.damagePerMinute ?? 0));
                    IncPermanentExpReward(Owner, 0 + (this.expPerMinute ?? 0));
                    IncPermanentGoldReward(Owner, 0 + (this.goldPerMinute ?? 0));
                });
            });
        });
        If(this.DrainedBool, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        If(LifeTime, default, CO_GREATER_THAN_OR_EQUAL, default, 60, () => {
            IncStat(IncFlatSpellBlockMod, Owner, 1000);
        });
        SetStatus(Owner, default, SetForceRenderParticles);
        CurrentTime = GetGameTime();
        TimeDelta = Math(0 + (CurrentTime ?? 0), MO_SUBTRACT, 0 + (this.StartTime ?? 0));
        TimeDelta = Math(0 + (TimeDelta ?? 0), MO_MIN, 90);
        TimePercent = Math(0 + (TimeDelta ?? 0), MO_DIVIDE, 90);
        this.PercentBonus = Math(0.05, MO_MULTIPLY, 0 + (TimePercent ?? 0));
        IncStat(IncPercentPhysicalReduction, Owner, 0 + (this.PercentBonus ?? 0));
        SetStatus(Owner, default, SetNoRender);
        IncStat(IncFlatHPPoolMod, Owner, 0 + (this.damageMod ?? 0));
        OrderChannelCount = GetBuffCountFromAll(Owner, "OdinBombSuppressionOrder");
        ChaosChannelBuff = GetBuffCountFromAll(Owner, "OdinBombSuppressionChaos");
        If(OrderChannelCount, default, CO_GREATER_THAN, default, 0, () => {
            If(ChaosChannelBuff, default, CO_GREATER_THAN, default, 0, () => {
                SpellBuffClear(Owner, "OdinBombSuppression");
            });
        });
        If(OrderChannelCount, default, CO_EQUAL, default, 0, () => {
            If(ChaosChannelBuff, default, CO_EQUAL, default, 0, () => {
                SpellBuffClear(Owner, "OdinBombSuppression");
            });
        });
        If(this.KillMe, default, CO_EQUAL, default, true, () => {
            SpellBuffRemove(Owner, "OdinShieldRelicAura", Owner, 0);
        });
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedBuff ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.MagicResistBuff ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorBuff ?? 0));
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetTargetable);
        HealthPercent = GetPAROrHealth(Target, GetPARPercent, PAR_MANA);
        Size = Math(350, MO_MULTIPLY, 0 + (HealthPercent ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageIncMod ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.APIncMod ?? 0));
        SetStatus(Owner, default, SetInvulnerable);
        ForEachUnitInTargetArea(Owner, Owner, 900, "AffectEnemies AffectMinions AffectNotPet NotAffectSelf ", default, true, (Unit) => {
            IfHasBuff(Unit, Unit, "OdinSuperMinion", () => {
                NextBuffVars.MagicResistBuff = 0;
                NextBuffVars.ArmorBuff = 0;
                SpellBuffAdd(Owner, Unit, "OdinMinionTaunt", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
            IfHasBuff(Unit, Unit, "OdinMinion", () => {
                NextBuffVars.MagicResistBuff = 0;
                NextBuffVars.ArmorBuff = 0;
                SpellBuffAdd(Owner, Unit, "OdinMinionTaunt", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        CurrentTeam = GetTeamID(default);
        If(CurrentTeam, default, CO_NOT_EQUAL, this.MyTeam, default, () => {
            SpellEffectCreate(asdf, default, "GoldAquisition_glb.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, false, false, false, false, default, default);
            RemovePerceptionBubble(this.BubbleID);
            If(this.MyTeam, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                RemovePerceptionBubble(this.BubbleID2);
            });
            TeamID = GetTeamID(default);
            this.MyTeam = CurrentTeam;
            SpellEffectRemove(this.Particle);
            SpellEffectRemove(this.Particle2);
            SpellEffectRemove(this.PlatformParticle);
            SpellEffectRemove(this.PlatformParticle2);
            If(this.MyTeam, default, CO_EQUAL, default, TEAM_ORDER, () => {
                PlayAnimation("Activate", 0, Owner, false, true, false);
                OverrideAnimation("Idle1", "Floating", Owner);
                SpellEffectCreate(this.Particle, this.Particle2, "OdinNeutralGuardian_Green.troy", "OdinNeutralGuardian_Red.troy", TEAM_ORDER, 0, 0, TEAM_ORDER, Owner, false, Owner, "crystal", default, Owner, default, default, false, true, false, false, false, default, default);
                SpellEffectCreate(this.PlatformParticle, default, "blank.troy", default, TEAM_ORDER, 0, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(this.PlatformParticle2, default, "blank.troy", default, TEAM_CHAOS, 0, 0, TEAM_CHAOS, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
                this.BubbleID = AddUnitPerceptionBubble(TeamID, 800, Owner, 25000, Nothing, Nothing, true);
            });
            ElseIf(this.MyTeam, default, CO_EQUAL, default, TEAM_CHAOS, () => {
                PlayAnimation("Activate", 0, Owner, false, true, false);
                OverrideAnimation("Idle1", "Floating", Owner);
                SpellEffectCreate(this.Particle, this.Particle2, "OdinNeutralGuardian_Green.troy", "OdinNeutralGuardian_Red.troy", TEAM_CHAOS, 0, 0, TEAM_CHAOS, Owner, false, Owner, "crystal", default, Owner, default, default, false, true, false, false, false, default, default);
                SpellEffectCreate(this.PlatformParticle, default, "blank.troy", default, TEAM_CHAOS, 0, 0, TEAM_CHAOS, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(this.PlatformParticle2, default, "blank.troy", default, TEAM_ORDER, 0, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
                this.BubbleID = AddUnitPerceptionBubble(TeamID, 800, Owner, 25000, Nothing, Nothing, true);
            });
            Else(() => {
                PlayAnimation("Deactivate", 0, Owner, false, false, false);
                ClearOverrideAnimation("Idle1", Owner);
                SpellEffectCreate(this.Particle, default, "OdinNeutralGuardian_Stone.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_ORDER, Owner, false, Owner, "crystal", default, Owner, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(this.Particle2, default, "OdinNeutralGuardian_Stone.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CHAOS, Owner, false, Owner, "crystal", default, Owner, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(this.PlatformParticle, default, "blank.troy", default, TEAM_ORDER, 0, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(this.PlatformParticle2, default, "blank.troy", default, TEAM_CHAOS, 0, 0, TEAM_CHAOS, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
                this.BubbleID = AddUnitPerceptionBubble(this.orderTeam, 800, Owner, 25000, Nothing, Nothing, true);
                this.BubbleID2 = AddUnitPerceptionBubble(this.chaosTeam, 800, Owner, 25000, Nothing, Nothing, true);
            });
        });
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.65);
        If(this.KillMe, default, CO_EQUAL, default, true, () => {
            SpellBuffRemove(Owner, "OdinHealthRelicAura", Owner, default);
        });
        If(this.KillMe, default, CO_EQUAL, default, true, () => {
            SpellBuffRemove(Owner, "OdinSigilAura", Owner, default);
        });
        IncStat(IncPercentPhysicalDamageMod, Owner, 1);
        IncStat(IncPercentMagicDamageMod, Owner, -1);
        IncStat(IncPercentPhysicalDamageMod, Owner, 0);
        IncStat(IncPercentMagicDamageMod, Owner, -1);
        Level = GetLevel(Owner);
        PercentMana = GetPAROrHealth(Owner, GetPARPercent, PAR_MANA);
        PercentMissing = Math(1, MO_SUBTRACT, 0 + (PercentMana ?? 0));
        PercentMissing = Math(0 + (PercentMissing ?? 0), MO_MULTIPLY, 2.1);
        IncPercentPARRegenMod(Owner, 0 + (PercentMissing ?? 0));
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.12);
        IncStat(IncPercentMagicPenetrationMod, Owner, 0.05);
        IncScaleSkinCoef(0.3, Owner);
        If(this.MassiveBoostOverseer, default, CO_LESS_THAN, default, 4, () => {
            IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MassiveSpeedMod ?? 0));
            this.MassiveBoostOverseer = Math(0 + (this.MassiveBoostOverseer ?? 0), MO_ADD, 1);
        });
        Else(() => {
            IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.SpeedMod ?? 0));
        });
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.VampVar ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0 + (this.SpellVampVar ?? 0));
        SetStatus(Owner, default, SetGhosted);
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.DefenseMod ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.DefenseMod ?? 0));
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.VampVar ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0 + (this.VampVar ?? 0));
        ExecutePeriodically(10, this.LastTimeExecuted, false, () => {
            TeamID = GetTeamID(default);
            If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                this.NumAlliedChampions = GetNumberOfHeroesOnTeam(TEAM_ORDER, false, true);
                NumHostileChampions = GetNumberOfHeroesOnTeam(TEAM_CHAOS, false, true);
            });
            ElseIf(TeamID, default, CO_EQUAL, default, TEAM_CHAOS, () => {
                this.NumAlliedChampions = GetNumberOfHeroesOnTeam(TEAM_CHAOS, false, true);
                NumHostileChampions = GetNumberOfHeroesOnTeam(TEAM_ORDER, false, true);
            });
            If(this.NumAlliedChampions, default, CO_GREATER_THAN, NumHostileChampions, default, () => {
                SpellBuffAdd(Attacker, Target, "NegativeTurretDelta", 1, 1, 21, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SpellBuffClear(Owner, "PositiveTurretDelta");
            });
            ElseIf(this.NumAlliedChampions, default, CO_LESS_THAN, NumHostileChampions, default, () => {
                SpellBuffAdd(Attacker, Target, "PositiveTurretDelta", 1, 1, 21, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SpellBuffClear(Owner, "NegativeTurretDelta");
            });
            Else(() => {
                SpellBuffClear(Owner, "PositiveTurretDelta");
                SpellBuffClear(Owner, "NegativeTurretDelta");
            });
        });
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 6);
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, 1.5);
        IncPermanentStat(IncPermanentFlatArmorMod, Owner, 1.5);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.BonusArmor ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageMod ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorMod ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.ResistMod ?? 0));
        ExecutePeriodically(60, this.LastTimeExecuted, false, () => {
            If(this.Looper, default, CO_GREATER_THAN_OR_EQUAL, this.StartDecay, default, () => {
                this.ArmorMod = Math(0 + (this.ArmorMod ?? 0), MO_SUBTRACT, 5);
                this.ResistMod = Math(0 + (this.ResistMod ?? 0), MO_SUBTRACT, 5);
            });
            ElseIf(this.Looper, default, CO_GREATER_THAN_OR_EQUAL, this.LoopOffset, default, () => {
                this.ArmorMod = Math(0 + (this.ArmorMod ?? 0), MO_ADD, 2.5);
                this.ResistMod = Math(0 + (this.ResistMod ?? 0), MO_ADD, 2.5);
                this.DamageMod = Math(0 + (this.DamageMod ?? 0), MO_ADD, 7);
                this.DamageMod = Math(0 + (this.DamageMod ?? 0), MO_MIN, 0 + (this.MaximumDamage ?? 0));
                this.ArmorMod = Math(0 + (this.ArmorMod ?? 0), MO_MIN, 0 + (this.MaximumArmor ?? 0));
                this.ResistMod = Math(0 + (this.ResistMod ?? 0), MO_MIN, 0 + (this.MaximumResist ?? 0));
                this.Looper = Math(1, MO_ADD, 0 + (this.Looper ?? 0));
            });
            Else(() => {
                this.Looper = Math(1, MO_ADD, 0 + (this.Looper ?? 0));
            });
        });
        IncStat(IncFlatHPPoolMod, Owner, 0 + (this.BonusHealth ?? 0));
        If(this.KillMe, default, CO_EQUAL, default, true, () => {
            SpellBuffRemove(Owner, "OdinVampRelicAura", Owner, 0);
        });
        IncStat(IncFlatMovementSpeedMod, Owner, -80);
        Level = GetLevel(Owner);
        HPRegen = this.VALUE_BY_LEVEL;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
            If(healthPercent, default, CO_LESS_THAN, default, 1, () => {
                maxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
                HealthToInc = Math(0 + (maxHealth ?? 0), MO_MULTIPLY, 0.005);
                IncHealth(Owner, 0 + (HealthToInc ?? 0), Owner);
            });
        });
        OrderChannelCount = GetBuffCountFromAll(Owner, "OdinBombSuppressionOrder");
        ChaosChannelBuff = GetBuffCountFromAll(Owner, "OdinBombSuppressionChaos");
        If(OrderChannelCount, default, CO_GREATER_THAN, default, 0, () => {
            If(ChaosChannelBuff, default, CO_GREATER_THAN, default, 0, () => {
                SpellBuffClear(Owner, "OdinBombSuppression");
            });
        });
        If(OrderChannelCount, default, CO_EQUAL, default, 0, () => {
            If(ChaosChannelBuff, default, CO_EQUAL, default, 0, () => {
                SpellBuffClear(Owner, "OdinBombSuppression");
            });
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Owner, Owner, "OdinDebacleTimer", 1, 1, 45, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffRemove(Owner, "OdinDebacleCloak", Owner, 0);
        });
        OrderChannelCount = GetBuffCountFromAll(Owner, "OdinGuardianSuppressionOrder");
        ChaosChannelBuff = GetBuffCountFromAll(Owner, "OdinGuardianSuppressionChaos");
        If(OrderChannelCount, default, CO_GREATER_THAN, default, 0, () => {
            If(ChaosChannelBuff, default, CO_GREATER_THAN, default, 0, () => {
                SpellBuffClear(Owner, "OdinGuardianSuppression");
            });
        });
        If(OrderChannelCount, default, CO_EQUAL, default, 0, () => {
            If(ChaosChannelBuff, default, CO_EQUAL, default, 0, () => {
                SpellBuffClear(Owner, "OdinGuardianSuppression");
            });
        });
        If(this.KillMe, default, CO_EQUAL, default, true, () => {
            SpellBuffRemove(Owner, "OdinCenterRelicAura", Owner, 0);
        });
        SetScaleSkinCoef(1.15, Owner);
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.2);
        IncStat(IncPercentMagicPenetrationMod, Owner, 0.2);
        ExecutePeriodically(10, this.LastTimeExecuted, false, () => {
            MyHealth = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
            If(MyHealth, default, CO_GREATER_THAN_OR_EQUAL, default, 0.99, () => {
                ForEachUnitInTargetArea(Owner, Owner, 9999, "AffectEnemies AffectFriends AffectHeroes ", default, true, (Unit) => {
                    PlayerLevel = GetLevel(Unit);
                    If(PlayerLevel, default, CO_GREATER_THAN, this.MaxPlayerLevel, default, () => {
                        this.MaxPlayerLevel = PlayerLevel ?? 0;
                    });
                });
            });
        });
        DmgIncrease = Math(0 + (this.DmgPerLevel ?? 0), MO_MULTIPLY, 0 + (this.MaxPlayerLevel ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (DmgIncrease ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.ADBuff ?? 0));
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.LSBuff ?? 0));
        Level = GetLevel(Owner);
        PercentMana = GetPAROrHealth(Owner, GetPARPercent, PAR_MANA);
        PercentMissing = Math(1, MO_SUBTRACT, 0 + (PercentMana ?? 0));
        PercentMissing = Math(0 + (PercentMissing ?? 0), MO_MULTIPLY, 2.1);
        IncPercentPARRegenMod(Owner, 0 + (PercentMissing ?? 0));
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.15);
        IncStat(IncPercentMagicPenetrationMod, Owner, 0.05);
        IncScaleSkinCoef(0.25, Owner);
        If(this.KillMe, default, CO_EQUAL, default, true, () => {
            SpellBuffRemove(Owner, "OdinCenterRelicAura2", Owner, 0);
        });
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.011);
        ExecutePeriodically(60, this.LastTimeExecuted, false, () => {
            IncPermanentStat(IncPermanentFlatArmorMod, Owner, -2);
            IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, -2);
        });
        IncStat(IncFlatHPPoolMod, Owner, 0 + (this.BonusHealth ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.BonusDamage ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.BonusArmor ?? 0));
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncPercentCooldownMod, Owner, -0.012);
        IncStat(IncPercentCooldownMod, Owner, -0.03);
        TeamID = GetTeamID(default);
        this.ThisBubble = AddUnitPerceptionBubble(TeamID, 0 + (this.BubbleSize ?? 0), Owner, 25000, Nothing, Nothing, true);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            NumChampions = GetNumberOfHeroesOnTeam(TEAM_CHAOS, true, true);
        });
        Else(() => {
            NumChampions = GetNumberOfHeroesOnTeam(TEAM_ORDER, true, true);
        });
        NumChampions = Math(5, MO_MIN, 0 + (NumChampions ?? 0));
        BonusHealth = Math(0 + (NumChampions ?? 0), MO_MULTIPLY, 0 + (this.BonusHealth ?? 0));
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (BonusHealth ?? 0));
        SpellBuffRemoveCurrent(Owner);
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 4);
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, 1.5);
        IncPermanentStat(IncPermanentFlatArmorMod, Owner, 1.5);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncFlatBubbleRadiusMod, Owner, 690);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.DefensiveBonus ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        StatsPercent = Math(0 + (this.Stats ?? 0), MO_DIVIDE, 100);
        StatsPer5 = Math(0 + (this.Stats ?? 0), MO_DIVIDE, 5);
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.Stats ?? 0));
        IncStat(IncFlatMovementSpeedMod, Owner, 0 + (this.Stats ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.Stats ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.Stats ?? 0));
        IncStat(IncFlatHPRegenMod, Owner, 0 + (StatsPer5 ?? 0));
        IncFlatPARRegenMod(Owner, 0 + (StatsPer5 ?? 0));
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.SlowPercent ?? 0));
        HealthMod = Math(0 + (this.TempMana ?? 0), MO_MULTIPLY, 0.25);
        HealthIncRate = Math(0, MO_ADD, 2.5);
        IncStat(IncFlatHPPoolMod, Owner, 0 + (HealthMod ?? 0));
        SetBuffToolTipVar(1, 0 + (HealthMod ?? 0));
        SetBuffToolTipVar(2, 0 + (HealthIncRate ?? 0));
        SetBuffToolTipVar(3, 10);
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        PercentMana = GetPAROrHealth(Owner, GetPARPercent, PAR_MANA);
        PercentMissing = Math(1, MO_SUBTRACT, 0 + (PercentMana ?? 0));
        PercentMissing = Math(0.75, MO_MULTIPLY, 0 + (PercentMissing ?? 0));
        IncPercentPARRegenMod(Owner, 0 + (PercentMissing ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.TotalArmor ?? 0));
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.LifestealPercent ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0 + (this.LifestealPercent ?? 0));
        SetStatus(Owner, default, SetGhosted);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            If(this.Count, default, CO_EQUAL, default, 0, () => {
                this.PercentReduction = Math(0 + (this.InitialPercentReduction ?? 0), MO_MULTIPLY, 0.75);
                this.Count = 1;
            });
            ElseIf(this.Count, default, CO_EQUAL, default, 1, () => {
                this.PercentReduction = Math(0 + (this.InitialPercentReduction ?? 0), MO_MULTIPLY, 0.5);
                this.Count = 2;
            });
            Else(() => {
                this.PercentReduction = Math(0 + (this.InitialPercentReduction ?? 0), MO_MULTIPLY, 0.25);
            });
        });
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.PercentReduction ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.PercentReduction ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0.5);
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.LifestealBonus ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncPercentMovementSpeedMod, Attacker, 0 + (this.MoveSpeedBuff ?? 0));
        ExecutePeriodically(8, this.LastTimeExecuted, false, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            this.movementSpeedMod = this.VALUE_BY_LEVEL;
        });
        IncStat(IncFlatMovementSpeedMod, Owner, 0 + (this.movementSpeedMod ?? 0));
        If(Owner, default, CO_EQUAL, Attacker, default, () => {
            IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedVar ?? 0));
        });
        Else(() => {
            IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedOther ?? 0));
        });
        If(this._1ce, default, CO_EQUAL, default, 0, () => {
            TargetPos = this.TargetPos;
            TeleportToPosition(Owner, TargetPos);
            this._1ce = 1;
        });
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageIncrease ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.AbilityPower ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageIncrease ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.AbilityPower ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.SpeedMod ?? 0));
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        IfHasBuff(Owner, Owner, "Recall", () => {
            SpellBuffRemoveCurrent(Owner);
        });
        IncStat(IncPercentCooldownMod, Owner, 0 + (this.CooldownBonus ?? 0));
        Level = GetLevel(Owner);
        HPRegen = this.VALUE_BY_LEVEL;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
            If(healthPercent, default, CO_LESS_THAN, default, 1, () => {
                maxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
                HealthToInc = Math(0 + (maxHealth ?? 0), MO_MULTIPLY, 0.005);
                IncHealth(Owner, 0 + (HealthToInc ?? 0), Owner);
            });
            If(healthPercent, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
        });
        IncStat(IncFlatHPPoolMod, Owner, 0 + (CharVars.HPGain ?? 0));
        IncStat(IncPercentPhysicalReduction, Owner, 0 + (this.DamageReduction ?? 0));
        IncStat(IncPercentMagicReduction, Owner, 0 + (this.DamageReduction ?? 0));
        IncStat(IncPercentPhysicalReduction, Owner, 0 + (this.DamageReduction ?? 0));
        IncStat(IncPercentMagicReduction, Owner, 0 + (this.DamageReduction ?? 0));
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
            If(healthPercent, default, CO_LESS_THAN, default, 1, () => {
                maxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
                HealthToInc = Math(0 + (maxHealth ?? 0), MO_MULTIPLY, 0.005);
                IncHealth(Owner, 0 + (HealthToInc ?? 0), Owner);
            });
        });
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorReduction ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.ArmorBonus = this.VALUE_BY_LEVEL;
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorBonus ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        this.ArmorBonus = this.VALUE_BY_LEVEL;
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorBonus ?? 0));
        this.APHealthAdded = Math(0 + (this.APTotal ?? 0), MO_MULTIPLY, 2);
        this.AttackHealthAdded = Math(0 + (this.AttackTotal ?? 0), MO_MULTIPLY, 3);
        IncMaxHealth(Owner, 0 + (this.APHealthAdded ?? 0), false);
        IncMaxHealth(Owner, 0 + (this.AttackHealthAdded ?? 0), false);
        SetBuffToolTipVar(1, 0 + (this.AttackHealthAdded ?? 0));
        SetBuffToolTipVar(2, 0 + (this.APHealthAdded ?? 0));
        this.DamageAdded = Math(0 + (this.WeaponDamage ?? 0), MO_MULTIPLY, 0.131);
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageAdded ?? 0));
        If(CharVars.NumSwings, default, CO_GREATER_THAN, default, 0, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            AttackSpeedPerLevel = this.VALUE_BY_LEVEL;
            AttackSpeedMod = Math(0 + (CharVars.NumSwings ?? 0), MO_MULTIPLY, 0 + (AttackSpeedPerLevel ?? 0));
            IncStat(IncPercentAttackSpeedMod, Owner, 0 + (AttackSpeedMod ?? 0));
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        LvlDodgeMod = Math(0 + (Level ?? 0), MO_MULTIPLY, 0.02);
        DodgeMod = Math(0 + (LvlDodgeMod ?? 0), MO_ADD, 0.08);
        IncStat(IncFlatDodgeMod, Owner, 0 + (DodgeMod ?? 0));
        IfNotHasBuff(Owner, Owner, "CounterStrikeCanCast", () => {
            SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        });
        IncStat(IncPercentMovementSpeedMod, Owner, 0.2);
        SetStatus(Owner, default, SetCanAttack);
        TeamID = GetTeamID(default);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        If(this.CooledDown, default, CO_EQUAL, default, false, () => {
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                this.CooledDown = true;
                SpellEffectRemove(this.RemoveMe);
                SpellEffectCreate(this.RemoveMe2, default, "CounterStrike_ready.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            });
        });
        this.IsActive = true;
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        IncStat(IncFlatHPRegenMod, Owner, -100);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.SpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.SpeedMod ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanAttack);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.SlowPercent ?? 0));
        IncStat(IncFlatAttackRangeMod, Owner, -600);
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (CharVars.BonusMR ?? 0));
        IncStat(IncPercentEXPBonus, Owner, 0.08);
        SetStatus(Owner, default, SetSilenced);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MSBonus ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.ASBonus ?? 0));
        SetStatus(Attacker, default, SetCanAttack);
        SetStatus(Owner, default, SetStunned);
        SetStatus(Owner, default, SetSuppressed);
        IncStat(IncFlatHPRegenMod, Owner, 0 + (this.HealthRegen ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, -1);
        IncStat(IncFlatArmorMod, Owner, -1);
        IncStat(IncPercentAttackSpeedMod, Owner, 0.5);
        IncStat(IncPercentCooldownMod, Owner, 0 + (this.CooldownBonus ?? 0));
        IncStat(IncFlatHPPoolMod, Owner, 0 + (this.BonusHealth ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.BonusDamage ?? 0));
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.BonusStats ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.BonusStats ?? 0));
        Level = this.Level;
        Modifier = this.VALUE_BY_LEVEL;
        Result = Math(0 + (this.Value ?? 0), MO_MULTIPLY, 0 + (Modifier ?? 0));
        IncStat(IncFlatMovementSpeedMod, Attacker, 0 + (Result ?? 0));
        Result = Math(-1, MO_MULTIPLY, 0 + (Result ?? 0));
        IncStat(IncFlatMovementSpeedMod, Owner, 0 + (Result ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, -0.2);
        Caster = SetBuffCasterUnit();
        CasMovespeedMod = GetStat(GetFlatMovementSpeedMod, Caster);
        OwnMovespeedMod = GetStat(GetFlatMovementSpeedMod, Owner);
        MovespeedDiff = Math(0 + (CasMovespeedMod ?? 0), MO_SUBTRACT, 0 + (OwnMovespeedMod ?? 0));
        IncStat(IncFlatMovementSpeedMod, Owner, 0 + (MovespeedDiff ?? 0));
        IfHasBuff(Owner, Owner, "KogMawIcathianSurprise", () => {
            SpellBuffRemove(Owner, "KogMawIcathianSurprise", Owner, 0);
        });
        IfHasBuff(Owner, Owner, "KogMawIcathianSurpriseReady", () => {
            SpellBuffRemove(Owner, "KogMawIcathianSurpriseReady", Owner, 0);
        });
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, -0.2);
        this.DoOnce = true;
        Level = this.Level;
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        IncStat(IncFlatHPRegenMod, Owner, 0 + (this.healthRegen ?? 0));
        MaxHP = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        ShieldHP = Math(0 + (MaxHP ?? 0), MO_MULTIPLY, 0.1);
        ShieldHealth = Math(0 + (ShieldHP ?? 0), MO_ROUND, 0);
        SetBuffToolTipVar(1, 0 + (ShieldHealth ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.SlowPercent ?? 0));
        Level = GetLevel(Owner);
        NextBuffVars.healthRegen = this.VALUE_BY_LEVEL;
        IncStat(IncFlatHPRegenMod, Owner, 0 + (NextBuffVars.healthRegen ?? 0));
        SetStatus(Owner, default, SetStealthed);
        CurPosition = GetUnitPosition(Owner);
        LastPosition = this.LastPosition;
        Distance = DistanceBetweenPoints(CurPosition, LastPosition);
        If(Distance, default, CO_NOT_EQUAL, default, 0, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        IncStat(IncPercentAttackSpeedMod, Owner, 0.4);
        IncStat(IncFlatMissChanceMod, Owner, 1);
        IncStat(IncPercentMovementSpeedMod, Owner, 0.03);
        IncStat(IncPercentMovementSpeedMod, Owner, 0.03);
        IncStat(IncFlatArmorMod, Owner, 150);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        ExecutePeriodically(0.5, this.FriendlyTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 700, "AffectFriends AffectMinions AffectHeroes ", default, true, (Unit) => {
                Temp1 = GetPAROrHealth(Unit, GetHealthPercent, PAR_MANA);
                If(Temp1, default, CO_LESS_THAN, default, 1, () => {
                    ApplyAssistMarker(Owner, Unit, 10);
                    IncHealth(Unit, 0 + (this.TickAmount ?? 0), Owner);
                });
            });
        });
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageBonus ?? 0));
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.7);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        MovementSpeedMod = this.VALUE_BY_LEVEL;
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (MovementSpeedMod ?? 0));
        SetStatus(Owner, default, SetGhosted);
        this.LifeTime = LifeTime;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        MoveSpeedBonus = this.VALUE_BY_LEVEL;
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (MoveSpeedBonus ?? 0));
        TeemoSkinID = GetSkinID(Owner);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            this.MoveSpeedMod = Math(0 + (this.MoveSpeedMod ?? 0), MO_ADD, 0.05);
        });
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.SlowPercent ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorMod ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        MoveSpeedBonus = this.VALUE_BY_LEVEL;
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (MoveSpeedBonus ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorDebuff ?? 0));
        IfHasBuff(Owner, Owner, "TeemoMoveQuickDebuff", () => {
            SpellBuffClear(Owner, "TeemoMoveQuickSpeed");
        });
        Else(() => {
            IfNotHasBuff(Owner, Owner, "MoveQuick", () => {
                IfNotHasBuff(Owner, Owner, "TeemoMoveQuickSpeed", () => {
                    SpellBuffAdd(Attacker, Target, "TeemoMoveQuickSpeed", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
                });
            });
        });
        StartTrackingCollisions(Owner, true);
        DamageAmount = Math(0 + (this.ArmorAmount ?? 0), MO_MULTIPLY, 0.25);
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (DamageAmount ?? 0));
        SetBuffToolTipVar(1, 0 + (DamageAmount ?? 0));
        SetBuffToolTipVar(2, 25);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorAmount ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.ArmorAmount ?? 0));
        SetStatus(Owner, default, SetStealthed);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetStealthed);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.ResistanceMod ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.APADBoost ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.APADBoost ?? 0));
        IncStat(IncPercentCooldownMod, Owner, 0 + (this.CooldownBonus ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0 + (this.Vamp ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncFlatMovementSpeedMod, Owner, 0 + (this.MSBoost ?? 0));
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.DefenseBonus ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.DefenseBonus ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ARMRBoost ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.ARMRBoost ?? 0));
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        IncStat(IncPercentAttackSpeedMod, Owner, 0.25);
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            SetStatus(Owner, default, SetNoRender);
            If(this.DoOnce, default, CO_EQUAL, default, false, () => {
                OwnerPos = GetUnitPosition(Owner);
                TeamID = GetTeamID(default);
                If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                    SpellEffectCreate(aa, default, "MonkeyKing_W_death_team_ID_green.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Owner, false, Nothing, default, OwnerPos, Owner, default, OwnerPos, true, default, default, false, false, default, default);
                    SpellEffectCreate(bb, default, "MonkeyKing_W_death_team_ID_red.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_CHAOS, Owner, false, Nothing, default, OwnerPos, Owner, default, OwnerPos, true, default, default, false, false, default, default);
                });
                Else(() => {
                    SpellEffectCreate(aa, default, "MonkeyKing_W_death_team_ID_green.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_CHAOS, Owner, false, Nothing, default, OwnerPos, Owner, default, OwnerPos, true, default, default, false, false, default, default);
                    SpellEffectCreate(bb, default, "MonkeyKing_W_death_team_ID_red.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Owner, false, Nothing, default, OwnerPos, Owner, default, OwnerPos, true, default, default, false, false, default, default);
                });
                this.DoOnce = true;
            });
        });
        IncStat(IncPercentArmorMod, Owner, 0 + (this.ArmorDebuff ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageGain ?? 0));
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.LifestealStat ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0 + (this.LifestealStat ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageInc ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorInc ?? 0));
        IncScaleSkinCoef(0.5, Owner);
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            SetStatus(Owner, default, SetNoRender);
        });
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedVar ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.DefenseToAdd ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.DefenseToAdd ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 1);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetStealthed);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.BonusDefense ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.BonusDefense ?? 0));
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetStealthed);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        Caster = SetBuffCasterUnit();
        GrandDistance = DistanceBetweenObjects("Owner", "Caster");
        MinDistanceCheck = 350;
        MaxDistanceCheck = 950;
        DistanceVariation = Math(0 + (MaxDistanceCheck ?? 0), MO_SUBTRACT, 0 + (MinDistanceCheck ?? 0));
        MaxSpeed = 450;
        MinSpeed = 175;
        SpeedVariation = Math(0 + (MaxSpeed ?? 0), MO_SUBTRACT, 0 + (MinSpeed ?? 0));
        If(GrandDistance, default, CO_LESS_THAN_OR_EQUAL, MinDistanceCheck, default, () => {
            IncStat(IncMoveSpeedFloorMod, Owner, 0 + (MaxSpeed ?? 0));
            CharVars.CurrSpeed = MaxSpeed;
        });
        ElseIf(GrandDistance, default, CO_GREATER_THAN_OR_EQUAL, MaxDistanceCheck, 1500, () => {
            IncStat(IncMoveSpeedFloorMod, Owner, 0 + (MinSpeed ?? 0));
            CharVars.CurrSpeed = MinSpeed;
        });
        Else(() => {
            OffsetValue = Math(0 + (GrandDistance ?? 0), MO_SUBTRACT, 0 + (MinDistanceCheck ?? 0));
            PercOverMinDist = Math(0 + (OffsetValue ?? 0), MO_DIVIDE, 0 + (DistanceVariation ?? 0));
            SpeedToReduce = Math(0 + (PercOverMinDist ?? 0), MO_MULTIPLY, 0 + (SpeedVariation ?? 0));
            AdjustedSpeed = Math(0 + (MaxSpeed ?? 0), MO_SUBTRACT, 0 + (SpeedToReduce ?? 0));
            IncStat(IncMoveSpeedFloorMod, Owner, 0 + (AdjustedSpeed ?? 0));
            CharVars.CurrSpeed = AdjustedSpeed;
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ASAura = this.VALUE_BY_LEVEL;
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (ASAura ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseDamage = 20;
        LevelDamage = Math(10, MO_MULTIPLY, 0 + (Level ?? 0));
        TotalDamage = Math(0 + (LevelDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (TotalDamage ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.SelfASMod ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.TotalMR ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.TotalArmor ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorReduction ?? 0));
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            IncGold(Attacker, 0 + (this.BonusGold ?? 0));
            SpellBuffRemove(Owner, "ScoutsBounty", Attacker, default);
        });
        APMod = Math(0 + (this.TotalMR ?? 0), MO_MULTIPLY, 0.5);
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (APMod ?? 0));
        SetBuffToolTipVar(1, 0 + (APMod ?? 0));
        SetBuffToolTipVar(1, 0 + (this.TotalArmorAmount ?? 0));
        IncStat(IncFlatHPPoolMod, Owner, 0 + (CharVars.CannibalismMaxHPMod ?? 0));
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.LifestealPercent ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncFlatHPPoolMod, Owner, 0 + (CharVars.HPGain ?? 0));
        Caster = SetBuffCasterUnit();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Caster, GetSlotSpellLevel);
        PercMaxHealthMod = this.VALUE_BY_LEVEL;
        IncStat(IncPercentHPPoolMod, Owner, 0 + (PercMaxHealthMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MovementSpeedMod ?? 0));
        OwnerMaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        HealthtoAdd = Math(0 + (OwnerMaxHealth ?? 0), MO_MULTIPLY, 0.1);
        IncMaxHealth(Owner, 0 + (HealthtoAdd ?? 0), false);
        CritToAdd = Math(0 + (CharVars.NumSecondsSinceLastCrit ?? 0), MO_MULTIPLY, 0 + (CharVars.CritPerSecond ?? 0));
        CritToDisplay = Math(100, MO_MULTIPLY, 0 + (CritToAdd ?? 0));
        CritToTooltip = Math(100, MO_MIN, 0 + (CritToDisplay ?? 0));
        SetBuffToolTipVar(1, 0 + (CritToTooltip ?? 0));
        SetStatus(Owner, default, SetNoRender);
        IncStat(IncPercentArmorMod, Owner, 0 + (this.ArmorDebuff ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorMod ?? 0));
        IncStat(IncPercentBubbleRadiusMod, Owner, -1);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.APPERLEV ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncFlatPhysicalDamageMod, Owner, 30);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MovementSpeedMod ?? 0));
        IncStat(IncFlatHPPoolMod, Owner, 0 + (this.BonusHealth ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.CurrentDamageTotal ?? 0));
        IncScaleSkinCoef(0.3, Owner);
        SetStatus(Owner, default, SetNoRender);
        IncStat(IncPercentCooldownMod, Owner, -0.1);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedBonus ?? 0));
        IncStat(IncPercentCooldownMod, Owner, 0 + (this.CooldownBonus ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedBoost ?? 0));
        TooltipAttackSpeed = Math(0 + (this.AttackSpeedBoost ?? 0), MO_MULTIPLY, 100);
        SetBuffToolTipVar(1, 0 + (TooltipAttackSpeed ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorReduction ?? 0));
        IfNotHasBuff(Attacker, Attacker, "SpiritFireAoE", () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Else(() => {
            TargetPos = this.TargetPos;
            OwnerPos = GetUnitPosition(Owner);
            dist = DistanceBetweenPoints(TargetPos, OwnerPos);
            If(dist, default, CO_GREATER_THAN_OR_EQUAL, default, 450, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.MRDebuff ?? 0));
        SetStatus(Owner, default, SetCanMove);
        ExecutePeriodically(0, this.LastTimeExecuted, false, () => {
            this.SpeedMod = Math(0 + (this.SpeedMod ?? 0), MO_ADD, 0 + (this.BonusSpeedMod ?? 0));
        });
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.SpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.SpeedMod ?? 0));
        IncStat(IncFlatAttackRangeMod, Owner, 375);
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.bonusDamage ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.SpeedMod ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        maxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        Factor = this.VALUE_BY_LEVEL;
        Heal = Math(0 + (Factor ?? 0), MO_MULTIPLY, 0 + (maxHealth ?? 0));
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            IncHealth(Owner, 0 + (Heal ?? 0), Owner);
        });
        temp = GetStatus(Owner, IsMoving);
        If(temp, default, CO_EQUAL, default, true, () => {
            IncStat(IncFlatDodgeMod, Owner, 0 + (CharVars.DodgeChance ?? 0));
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanCast);
        this.DamageAdded = Math(0 + (this.BaseDamage ?? 0), MO_MULTIPLY, 0 + (CharVars.MundoPercent ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageAdded ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AllyAttackSpeedMod ?? 0));
        MoveMod = this.MoveMod;
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (MoveMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        BaseIncrease = this.BaseIncrease;
        DamageMod = this.DamageMod;
        Health = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        HealthMissing = Math(1, MO_SUBTRACT, 0 + (Health ?? 0));
        RawDamage = Math(100, MO_MULTIPLY, 0 + (HealthMissing ?? 0));
        DamageBonus = Math(0 + (DamageMod ?? 0), MO_MULTIPLY, 0 + (RawDamage ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (DamageBonus ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (BaseIncrease ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, -0.6);
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            IncPAR(Owner, 150);
            SpellBuffRemoveCurrent(Owner);
        });
        IncFlatPARRegenMod(Owner, 0 + (this.ManaRegenBonus ?? 0));
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            
        });
        Else(() => {
            ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
                maxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
                Regen = 0.003;
                HealthInc = Math(0 + (Regen ?? 0), MO_MULTIPLY, 0 + (maxHealth ?? 0));
                IncHealth(Owner, 0 + (HealthInc ?? 0), Owner);
            });
        });
        IncStat(IncFlatMovementSpeedMod, Owner, 50);
        SetStatus(Owner, default, SetStealthed);
        IfNotHasBuff(Owner, Owner, "HideInShadowsBuff", () => {
            IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        });
        SetStatus(Owner, default, SetStealthed);
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentHPRegenMod, Owner, 0.08);
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.MRDebuff ?? 0));
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.APMod ?? 0));
        IncMaxHealth(Owner, 0 + (this.HPMod ?? 0), false);
        SetBuffToolTipVar(2, 0 + (this.HPMod ?? 0));
        SetBuffToolTipVar(1, 0 + (this.APMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncFlatAttackRangeMod, Owner, -575);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.DefenseBonus ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.DefenseBonus ?? 0));
        SetBuffToolTipVar(1, 0 + (this.DefenseBonus ?? 0));
        IncStat(IncPercentPhysicalReduction, Owner, 0 + (this.DamageIncrease ?? 0));
        IncStat(IncPercentMagicReduction, Owner, 0 + (this.DamageIncrease ?? 0));
        Count = GetBuffCountFromAll(Owner, "DeadlyVenom");
        BonusMove = Math(0 + (Count ?? 0), MO_MULTIPLY, -0.06);
        TotalMoveSpeedMod = Math(0 + (BonusMove ?? 0), MO_ADD, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (TotalMoveSpeedMod ?? 0));
        Level = this.Level;
        AttackDamageBoon = this.VALUE_BY_LEVEL;
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (AttackDamageBoon ?? 0));
        IncStat(IncPercentPhysicalReduction, Owner, 0 + (this.DamageReduction ?? 0));
        IncStat(IncPercentMagicReduction, Owner, 0 + (this.DamageReduction ?? 0));
        ExecutePeriodically(1, this.LastTimeExecuted2, false, () => {
            this.HasteBoost = 0;
        });
        IncStat(IncFlatAttackRangeMod, Owner, -450);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.HasteBoost ?? 0));
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetForceRenderParticles);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.AttackDmgMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.SpeedBoost ?? 0));
        If(this.AkaliAP, default, CO_GREATER_THAN_OR_EQUAL, default, 19.5, () => {
            NextBuffVars.AkaliAP = this.AkaliAP;
            this.BonusDmgPerc = 0.08;
            this.AkaliAP = Math(0 + (this.AkaliAP ?? 0), MO_SUBTRACT, 20);
            this.AddBonusDmgPerc = Math(0 + (this.AkaliAP ?? 0), MO_DIVIDE, 600);
            this.DmgMult = Math(0 + (this.BonusDmgPerc ?? 0), MO_ADD, 0 + (this.AddBonusDmgPerc ?? 0));
            DmgMultTooltip = Math(100, MO_MULTIPLY, 0 + (this.DmgMult ?? 0));
            SetBuffToolTipVar(1, 0 + (DmgMultTooltip ?? 0));
            SpellBuffAdd(Owner, Owner, "AkaliTwinAP", 1, 1, 1.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        Else(() => {
            SetBuffToolTipVar(1, 0);
        });
        If(this.AkaliDmg, default, CO_GREATER_THAN_OR_EQUAL, default, 9.5, () => {
            NextBuffVars.AkaliDmg = this.AkaliDmg;
            this.BaseVampPercent = 0.08;
            this.AkaliDmg = Math(0 + (this.AkaliDmg ?? 0), MO_SUBTRACT, 10);
            this.AdditionalVampPercent = Math(0 + (this.AkaliDmg ?? 0), MO_DIVIDE, 600);
            CharVars.VampPercent = Math(0 + (this.BaseVampPercent ?? 0), MO_ADD, 0 + (this.AdditionalVampPercent ?? 0));
            this.VampPercentTooltip = Math(100, MO_MULTIPLY, 0 + (CharVars.VampPercent ?? 0));
            SetBuffToolTipVar(2, 0 + (this.VampPercentTooltip ?? 0));
            SpellBuffAdd(Owner, Owner, "AkaliTwinDmg", 1, 1, 1.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        Else(() => {
            SetBuffToolTipVar(2, 0);
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedBuff ?? 0));
        IfHasBuff(Owner, Owner, "Recall", () => {
            SpellBuffRemoveCurrent(Owner);
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorIncrease ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.ArmorIncrease ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.BonusAD ?? 0));
        IncStat(IncFlatAttackRangeMod, Owner, 75);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MovementSpeed ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.AttackSpeed ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0 + (CharVars.VampPercent ?? 0));
        Count = GetBuffCountFromCaster(Owner, Attacker, "ScurvyStrikeParticle");
        totalSlow = Math(0 + (this.moveSpeedMod ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (totalSlow ?? 0));
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        IncStat(IncAcquisitionRangeMod, Owner, -350);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncPercentAttackSpeedMod, Owner, 0.1);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncFlatMovementSpeedMod, Owner, -75);
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.AttackSpeedModNegative ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        IncStat(IncPercentArmorMod, Owner, -0.15);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncPercentArmorMod, Owner, 0 + (this.ArmorShred ?? 0));
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetCanAttack);
        IncStat(IncPercentArmorMod, Owner, -0.15);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        Level = this.Level;
        IncMaxHealth(Owner, 0 + (this.BonusHealth ?? 0), true);
        IncScaleSkinCoef(0.2, Owner);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorMod ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.ArmorMod ?? 0));
        CharVars.DoOnce = true;
        IncStat(IncPercentAttackSpeedMod, Owner, 0.1);
        MonkeyStacks = GetBuffCountFromAll(Owner, "UdyrMonkeyAgilityBuff");
        AttackSpeedMod = Math(10, MO_MULTIPLY, 0 + (MonkeyStacks ?? 0));
        SetBuffToolTipVar(1, 0 + (AttackSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0.15);
        IncStat(IncFlatDodgeMod, Owner, 0.06);
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0.15);
        IncStat(IncFlatDodgeMod, Owner, 0.06);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MovementSpeed ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0.15);
        IncStat(IncFlatDodgeMod, Owner, 0.06);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetGhosted);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MovementSpeed ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.AttackDamageInc ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.AbilityPowerInc ?? 0));
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetStealthed);
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        IncStat(IncFlatArmorMod, Owner, 0 + (this.DefenseToAdd ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.DefenseToAdd ?? 0));
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            IfNotHasBuff(Owner, Owner, "RenektonInCombat", () => {
                IncPAR(Owner, -2);
            });
            Level = GetLevel(Owner);
            OffensiveGain = this.VALUE_BY_LEVEL;
            SetBuffToolTipVar(1, 0 + (OffensiveGain ?? 0));
        });
        RageCount = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
        If(RageCount, default, CO_GREATER_THAN_OR_EQUAL, default, 50, () => {
            SpellBuffAdd(Owner, Owner, "RenektonRageReady", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            SetPARColorOverride(Owner, 255, 0, 0, 255, 175, 0, 0, 255);
        });
        Else(() => {
            SetPARColorOverride(Owner, 255, 85, 85, 85, 175, 55, 55, 55);
            ClearPARColorOverride(Owner);
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.RebirthArmorMod ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.RebirthArmorMod ?? 0));
        this.OneFrame = false;
        CritMod = GetStat(GetFlatCritChanceMod, Owner);
        CritMod = Math(-1, MO_MULTIPLY, 0 + (CritMod ?? 0));
        CritMod = Math(0 + (CharVars.BaseCritChance ?? 0), MO_ADD, 0 + (CritMod ?? 0));
        IncStat(IncFlatCritChanceMod, Owner, 0 + (CritMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.passiveAttackSpeed ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.MRminus ?? 0));
        IfNotHasBuff(Attacker, Attacker, "TormentedSoil", () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Else(() => {
            TargetPos = this.TargetPos;
            OwnerPos = GetUnitPosition(Owner);
            dist = DistanceBetweenPoints(TargetPos, OwnerPos);
            If(dist, default, CO_GREATER_THAN_OR_EQUAL, default, 308, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0 + (this.VampPercent ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.activeAttackSpeed ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        If(this.AlphaStrikeLaunched, default, CO_EQUAL, default, true, () => {
            SetStatus(Owner, default, SetGhosted);
            SetStatus(Owner, default, SetNoRender);
            SetStatus(Owner, default, SetCanAttack);
            SetStatus(Owner, default, SetCanMove);
            SetStatus(Owner, default, SetTargetable);
            SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        });
        SetStatus(Owner, default, SetCanMove);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseDamage = 10;
        LevelDamage = Math(5, MO_MULTIPLY, 0 + (Level ?? 0));
        TotalDamage = Math(0 + (LevelDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (TotalDamage ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseDamage = 20;
        LevelDamage = Math(10, MO_MULTIPLY, 0 + (Level ?? 0));
        TotalDamage = Math(0 + (LevelDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (TotalDamage ?? 0));
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.armorMod ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.armorMod ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.armorMod ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.armorMod ?? 0));
        SetStatus(Owner, default, SetStunned);
        Level = this.Level;
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        Level = this.Level;
        SpeedMod = this.VALUE_BY_LEVEL;
        ElapsedRatio = Math(0 + (this.TicksLeft ?? 0), MO_DIVIDE, 8);
        TotalSpeed = Math(0 + (SpeedMod ?? 0), MO_MULTIPLY, 0 + (ElapsedRatio ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (TotalSpeed ?? 0));
        TicksLeft = Math(0 + (this.TicksLeft ?? 0), MO_SUBTRACT, 1);
        this.TicksLeft = TicksLeft;
        Level = this.Level;
        SpeedMod = this.VALUE_BY_LEVEL;
        ElapsedRatio = Math(0 + (this.TicksLeft ?? 0), MO_DIVIDE, 8);
        TotalSpeed = Math(0 + (SpeedMod ?? 0), MO_MULTIPLY, 0 + (ElapsedRatio ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (TotalSpeed ?? 0));
        TicksLeft = Math(0 + (this.TicksLeft ?? 0), MO_SUBTRACT, 1);
        this.TicksLeft = TicksLeft;
        Caster = SetBuffCasterUnit();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Caster, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            DefenseBonus = this.VALUE_BY_LEVEL;
            IncStat(IncFlatArmorMod, Owner, 0 + (DefenseBonus ?? 0));
            IncStat(IncFlatSpellBlockMod, Owner, 0 + (DefenseBonus ?? 0));
        });
        Caster = SetBuffCasterUnit();
        Distance = DistanceBetweenObjects("Caster", "Owner");
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 1000, () => {
            this.CurrentState = 0;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 800, () => {
            this.CurrentState = 1;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            this.CurrentState = 2;
        });
        If(this.CurrentState, default, CO_NOT_EQUAL, this.PreviousState, default, () => {
            SpellEffectRemove(this.OrianaPointer);
            If(this.CurrentState, default, CO_EQUAL, default, 0, () => {
                SpellEffectCreate(this.OrianaPointer, default, "OrianaBallIndicatorFar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, true, Attacker, default, default, Owner, default, default, false, false, false, false, true, Owner, default);
            });
            ElseIf(this.CurrentState, default, CO_EQUAL, default, 1, () => {
                SpellEffectCreate(this.OrianaPointer, default, "OrianaBallIndicatorMedium.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, true, Attacker, default, default, Owner, default, default, false, false, false, false, true, Owner, default);
            });
            Else(() => {
                SpellEffectCreate(this.OrianaPointer, default, "OrianaBallIndicatorNear.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, true, Attacker, default, default, Owner, default, default, false, false, false, false, true, Owner, default);
            });
        });
        this.PreviousState = this.CurrentState;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        SetStatus(Owner, default, SetTargetable);
        Level = this.Level;
        SpeedMod = this.VALUE_BY_LEVEL;
        CurrentTime = GetGameTime();
        ElapsedTime = Math(0 + (CurrentTime ?? 0), MO_SUBTRACT, 0 + (this.StartTime ?? 0));
        ElapsedTime = Math(2, MO_SUBTRACT, 0 + (ElapsedTime ?? 0));
        ElapsedRatio = Math(0 + (ElapsedTime ?? 0), MO_DIVIDE, 2);
        ElapsedRatio = Math(0 + (ElapsedRatio ?? 0), MO_MAX, 0);
        TotalSpeed = Math(0 + (SpeedMod ?? 0), MO_MULTIPLY, 0 + (ElapsedRatio ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (TotalSpeed ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            DefenseBonus = this.VALUE_BY_LEVEL;
            IncStat(IncFlatArmorMod, Owner, 0 + (DefenseBonus ?? 0));
            IncStat(IncFlatSpellBlockMod, Owner, 0 + (DefenseBonus ?? 0));
        });
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.ASMod ?? 0));
        IncStat(IncPercentBubbleRadiusMod, Owner, -1);
        IncStat(IncPercentMovementSpeedMod, Owner, 0.15);
        IncStat(IncPercentArmorMod, Owner, 0 + (this.Debuff ?? 0));
        IncStat(IncPercentSpellBlockMod, Owner, 0 + (this.Debuff ?? 0));
        If(this.InstancedArmor, default, CO_LESS_THAN, default, 0, () => {
            IncStat(IncFlatArmorMod, Owner, 0 + (this.InstancedArmor ?? 0));
        });
        If(this.InstancedMR, default, CO_LESS_THAN, default, 0, () => {
            IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.InstancedMR ?? 0));
        });
        TrundleArmor = Math(0 + (this.InstancedArmor ?? 0), MO_MULTIPLY, -1);
        TrundleMR = Math(0 + (this.InstancedMR ?? 0), MO_MULTIPLY, -1);
        If(TrundleArmor, default, CO_GREATER_THAN, default, 0, () => {
            IncStat(IncFlatArmorMod, Attacker, 0 + (TrundleArmor ?? 0));
        });
        If(TrundleMR, default, CO_GREATER_THAN, default, 0, () => {
            IncStat(IncFlatSpellBlockMod, Attacker, 0 + (TrundleMR ?? 0));
        });
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.NegSapVar ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.SapVar ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.DebuffAmount ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.AstralArmor ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        ForEachUnitInTargetArea(Attacker, Owner, 1000, "AffectFriends AffectHeroes AlwaysSelf ", "TrundleDiseaseOverseer", true, (Unit) => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            NextBuffVars.SelfASMod = this.VALUE_BY_LEVEL;
            NextBuffVars.SelfMSMod = this.VALUE_BY_LEVEL;
            NextBuffVars.CCReduc = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Unit, Unit, "TrundleDesecrateBuffs", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.SelfMSMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.SelfASMod ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.ResistanceMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.HastePercent ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.BonusAD ?? 0));
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Owner, Owner, "NocturneShroudofDarknessBuff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffRemove(Owner, "NocturneShroudofDarkness", Owner, default);
        });
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetStealthed);
        SetStatus(Owner, default, SetTargetable);
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedBoost ?? 0));
        IncStat(IncAcquisitionRangeMod, Owner, 100);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        IncStat(IncPercentMovementSpeedMod, Owner, 0.5);
        SetStatus(Owner, default, SetGhosted);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.DefenseBonus ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.DefenseBonus ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.DefenseBonus ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.DefenseBonus ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MSPenalty ?? 0));
        IncStat(IncFlatAttackRangeMod, Owner, 30 + (this.RangeIncrease ?? 0));
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.SlowAmount ?? 0));
        SetStatus(Owner, default, SetGhosted);
        IncStat(IncPercentMagicReduction, Owner, 0 + (this.DamageReduction ?? 0));
        IncStat(IncPercentPhysicalReduction, Owner, 0 + (this.DamageReduction ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.bonusDamage ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.movementSpeed ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.DefInc ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.DefInc ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0);
        IncStat(IncPercentPhysicalReduction, Owner, 0 + (this.DamageReduction ?? 0));
        IncStat(IncPercentMagicReduction, Owner, 0 + (this.DamageReduction ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageIncrease ?? 0));
        DamageReductionMod = Math(100, MO_MULTIPLY, 0 + (this.DamageReduction ?? 0));
        SetBuffToolTipVar(1, 0 + (this.DamageIncrease ?? 0));
        SetBuffToolTipVar(2, 0 + (DamageReductionMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.SlowAmount ?? 0));
        this.LifeTime = LifeTime;
        StartTrackingCollisions(Owner, true);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        IfNotHasBuff(Attacker, Owner, "UrgotSwapTarget", () => {
            this.IsDisabled = 1;
            SpellBuffClear(Owner, "UrgotSwap2");
        });
        If(IsDisabled, default, CO_EQUAL, default, 1, () => {
            SpellBuffClear(Owner, "UrgotSwap2");
        });
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.ASDebuff ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        MaxHP = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        HealHP = Math(0 + (MaxHP ?? 0), MO_MULTIPLY, 0.02);
        this.HealAmount = Math(0 + (HealHP ?? 0), MO_ROUND, 0);
        SetBuffToolTipVar(1, 0 + (this.HealAmount ?? 0));
        IncStat(IncPercentArmorMod, Owner, 0 + (this.ArmorReduced ?? 0));
        RequireVar(this.VolibearRSpeed);
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.VolibearRSpeed ?? 0));
        IncScaleSkinCoef(0.08, Owner);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.VolibearESlow ?? 0));
        If(Target, default, CO_IS_NOT_HERO, default, true, () => {
            IncStat(IncPercentMovementSpeedMod, Owner, -0.5);
        });
        If(this.DrainedBool, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ForEachUnitInTargetArea(Owner, Owner, 2000, "AffectEnemies AffectNeutral AffectHeroes ", default, true, (Unit) => {
            If(Owner, default, CO_IS_TARGET_IN_FRONT_OF_ME, Unit, default, () => {
                Visible = CanSeeTarget(Owner, Unit);
                If(Visible, default, CO_EQUAL, default, true, () => {
                    Hunt = true;
                    SpellBuffAdd(Owner, Unit, "VolibearQHunted", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                IfHasBuff(Unit, Owner, "VolibearQHunted", () => {
                    Hunt = true;
                });
            });
        });
        If(Hunt, default, CO_EQUAL, default, true, () => {
            IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.SpeedMod ?? 0));
            IfNotHasBuff(Owner, Owner, "VolibearQSpeedPart", () => {
                SpellBuffAdd(Owner, Owner, "VolibearQSpeedPart", 1, 1, 20, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        Else(() => {
            SpellBuffRemove(Owner, "VolibearQSpeedPart", Owner, 0);
        });
        SetBuffToolTipVar(1, 0 + (CharVars.RegenTooltip ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        maxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        Factor = Math(0 + (CharVars.RegenPercent ?? 0), MO_MULTIPLY, 0.08333);
        Heal = Math(0 + (Factor ?? 0), MO_MULTIPLY, 0 + (maxHealth ?? 0));
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            IncHealth(Owner, 0 + (Heal ?? 0), Owner);
        });
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.VolibearWAS ?? 0));
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        fury = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
        this.bonusCrit = Math(0.0035, MO_MULTIPLY, 0 + (fury ?? 0));
        IncStat(IncFlatCritChanceMod, Owner, 0 + (this.bonusCrit ?? 0));
        ExecutePeriodically(1, this.LastTimeExecuted2, false, () => {
            IfNotHasBuff(Owner, Owner, "RenektonInCombat", () => {
                IncPAR(Owner, -5);
            });
        });
        If(fury, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
            IfNotHasBuff(Owner, Owner, "BloodlustParticle", () => {
                SpellBuffAdd(Owner, Owner, "BloodlustParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
            });
        });
        Else(() => {
            SpellBuffRemove(Owner, "BloodlustParticle", Owner, 0);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        AttackSpeed = this.VALUE_BY_LEVEL;
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (AttackSpeed ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        ArmorReduction = this.VALUE_BY_LEVEL;
        MagicReduction = this.VALUE_BY_LEVEL;
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (MagicReduction ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (ArmorReduction ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.SlowPercent ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageMod ?? 0));
        IncStat(IncFlatCritDamageMod, Owner, 0 + (this.CritDamageMod ?? 0));
        StartTrackingCollisions(Owner, true);
        NextBuffVars.MoveSpeedMod = 0;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        baseDmg = this.VALUE_BY_LEVEL;
        healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        missingPercent = Math(1, MO_SUBTRACT, 0 + (healthPercent ?? 0));
        dmgPerMissingHealth = this.VALUE_BY_LEVEL;
        variableDmg = Math(0 + (dmgPerMissingHealth ?? 0), MO_MULTIPLY, 0 + (missingPercent ?? 0));
        totalBonusDmg = Math(0 + (variableDmg ?? 0), MO_ADD, 0 + (baseDmg ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (totalBonusDmg ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MovementSpeedMod ?? 0));
        ApplyNearSight(Attacker, Owner, 0.25);
        IfHasBuff(Owner, Attacker, "GravesSmokeGrenadeBoomSlow", () => {
            
        });
        Else(() => {
            
        });
        IncStat(IncFlatArmorMod, Owner, 0 + (CharVars.ArmorAmountNeg ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (CharVars.ArmorAmountNeg ?? 0));
        IncStat(IncFlatAttackRangeMod, Owner, 0 + (this.AttackRangeIncrease ?? 0));
        ExecutePeriodically(0.25, this.LastTimeExecuted2, false, () => {
            this.MoveSpeedMod = Math(0 + (this.MoveSpeedMod ?? 0), MO_ADD, 0.025);
        });
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncFlatAttackRangeMod, Owner, -500);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetForceRenderParticles);
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (CharVars.ArmorAmount ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (CharVars.ArmorAmount ?? 0));
        LevelDamage = GetLevel(Owner);
        BonusDamage = Math(0 + (LevelDamage ?? 0), MO_MULTIPLY, 25);
        TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 100);
        SetBuffToolTipVar(1, 0 + (TotalDamage ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorMod ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (CharVars.SecondSkin ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (CharVars.SecondSkin ?? 0));
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            this.numTicks = Math(0 + (this.numTicks ?? 0), MO_SUBTRACT, 1);
        });
        curSlowPercent = Math(0 + (this.numTicks ?? 0), MO_DIVIDE, 20);
        speedMod = Math(0 + (curSlowPercent ?? 0), MO_MULTIPLY, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (speedMod ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorMod ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.ArmorMod ?? 0));
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetTargetable);
        If(LifeTime, default, CO_GREATER_THAN_OR_EQUAL, default, 3.25, () => {
            SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        });
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.LichAP ?? 0));
        SetStatus(Owner, default, SetStunned);
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.6);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        MoveSpeedVal = GetStat(GetMovementSpeed, Owner);
        If(MoveSpeedVal, default, CO_LESS_THAN, default, 300, () => {
            MoveSpeedDif = Math(300, MO_SUBTRACT, 0 + (MoveSpeedVal ?? 0));
            IncStat(IncFlatMovementSpeedMod, Owner, 0 + (MoveSpeedDif ?? 0));
        });
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.017);
        SetSpellToolTipVar(0 + (CharVars.TearBonusMana ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        PercentHealth = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        PercentMissing = Math(1, MO_SUBTRACT, 0 + (PercentHealth ?? 0));
        CharLevel = GetLevel(Owner);
        If(CharLevel, default, CO_LESS_THAN, default, 3, () => {
            APGain = Math(0 + (PercentMissing ?? 0), MO_MULTIPLY, 30);
        });
        ElseIf(CharLevel, default, CO_LESS_THAN, default, 6, () => {
            APGain = Math(0 + (PercentMissing ?? 0), MO_MULTIPLY, 50);
        });
        ElseIf(CharLevel, default, CO_LESS_THAN, default, 9, () => {
            APGain = Math(0 + (PercentMissing ?? 0), MO_MULTIPLY, 70);
        });
        ElseIf(CharLevel, default, CO_LESS_THAN, default, 12, () => {
            APGain = Math(0 + (PercentMissing ?? 0), MO_MULTIPLY, 90);
        });
        ElseIf(CharLevel, default, CO_LESS_THAN, default, 15, () => {
            APGain = Math(0 + (PercentMissing ?? 0), MO_MULTIPLY, 110);
        });
        Else(() => {
            APGain = Math(0 + (PercentMissing ?? 0), MO_MULTIPLY, 130);
        });
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (APGain ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MovementSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MovementSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.SlowAmount ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.SlowAmount ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.ASMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.SpeedBoost ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MovementSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MovementSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedBonusPercent ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MovementSpeedBonusPercent ?? 0));
        IncStat(IncFlatMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            IfNotHasBuff(Owner, Owner, "MissFortuneWaves", () => {
                this.MoveSpeedMod = Math(0 + (this.MoveSpeedMod ?? 0), MO_ADD, 3.93);
                this.MoveSpeedMod = Math(0 + (this.MoveSpeedMod ?? 0), MO_MIN, 70);
                If(this.WillRemove, default, CO_EQUAL, default, false, () => {
                    OverrideAnimation("Run", "Run2", Owner);
                    this.WillRemove = true;
                    SpellEffectCreate(this.running, default, "missFortune_passive_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, "root", default, Owner, default, default, false, default, default, default, default, default, default);
                });
            });
        });
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Attacker, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentCooldownMod, Owner, -0.01);
        IncStat(IncPercentMovementSpeedMod, Attacker, 0 + (this.NegMoveSpeed ?? 0));
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        IncMaxHealth(Owner, 0 + (this.HealthAmount ?? 0), true);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorAmount ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.MRAmount ?? 0));
        IncScaleSkinCoef(0.1, Owner);
        Count = GetBuffCountFromCaster(Owner, Owner, "Feast");
        If(Count, default, CO_EQUAL, default, 0, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Else(() => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SizeByLevel = this.VALUE_BY_LEVEL;
            Bonus = Math(0 + (Count ?? 0), MO_MULTIPLY, 0 + (SizeByLevel ?? 0));
            IncScaleSkinCoef(0 + (Bonus ?? 0), Owner);
            HealthPerStack = this.VALUE_BY_LEVEL;
            BonusHealth = Math(0 + (HealthPerStack ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
            IncStat(IncFlatHPPoolMod, Owner, 0 + (BonusHealth ?? 0));
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            Count = GetBuffCountFromCaster(Attacker, Attacker, "Feast");
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            HealthPerStack = this.VALUE_BY_LEVEL;
            FeastBase = this.VALUE_BY_LEVEL;
            BonusFeastHealth = Math(0 + (HealthPerStack ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
            FeastHealth = Math(0 + (BonusFeastHealth ?? 0), MO_ADD, 0 + (FeastBase ?? 0));
            TargetHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
            If(FeastHealth, default, CO_LESS_THAN, TargetHealth, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            Else(() => {
                Time = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellCooldownTime);
                If(Time, default, CO_GREATER_THAN, default, 0, () => {
                    SpellBuffRemoveCurrent(Owner);
                });
            });
        });
        IncStat(IncPercentBubbleRadiusMod, Owner, -1);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MovementSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        If(this.WillBeam, default, CO_EQUAL, default, true, () => {
            SpellEffectCreate(NextBuffVars.ParticleID, default, default, default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Attacker, "R_hand", default, false, default, default, default, default, default, default);
            this.WillBeam = false;
            SpellBuffAdd(Attacker, Attacker, "BandageTossFlingCaster", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        DamageReduction = Math(0 + (Level ?? 0), MO_ADD, 0);
        DamageReduction = Math(0 + (DamageReduction ?? 0), MO_MULTIPLY, 2);
        IncStat(IncFlatPhysicalReduction, Owner, 0 + (DamageReduction ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.MagicResistReduction ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageGain ?? 0));
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.LifestealStat ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0 + (this.LifestealStat ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeed ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.ArmorAmount ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorAmount ?? 0));
        HealthPerc = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        ASPerc = Math(1, MO_SUBTRACT, 0 + (HealthPerc ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (ASPerc ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            
        });
        Else(() => {
            IncStat(IncFlatMissChanceMod, Owner, 0 + (this.MissChance ?? 0));
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        If(this.BuffAdded, default, CO_EQUAL, default, true, () => {
            SetStatus(Owner, default, SetStealthed);
        });
        SetStatus(Owner, default, SetStealthed);
        IncStat(IncFlatCritDamageMod, Owner, 0 + (this.CritDmgBonus ?? 0));
        IncStat(IncFlatCritChanceMod, Owner, 1);
        If(this.HasHit, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        IncStat(IncFlatCritChanceMod, Owner, 1);
        SetStatus(Owner, default, SetStealthed);
        IncStat(IncPercentBubbleRadiusMod, Owner, -1);
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.ADMod ?? 0));
        PushCharacterFade(Owner, 0.2, default, default);
        SetStatus(Owner, default, SetStealthed);
        SetStatus(Owner, default, SetCanAttack);
        HealthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        If(HealthPercent, default, CO_LESS_THAN_OR_EQUAL, default, 0.5, () => {
            IncStat(IncFlatHPRegenMod, Owner, 1);
            IncStat(IncFlatArmorMod, Owner, 10);
        });
        SetStatus(Owner, default, SetGhosted);
        CurrentHealth = GetPAROrHealth(Attacker, GetHealth, PAR_MANA);
        If(CurrentHealth, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            this.IsDead = true;
            SpellBuffRemoveCurrent(Owner);
        });
        SetStatus(Owner, default, SetStunned);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IfHasBuff(Owner, Nothing, "YorickDecayedSlow", () => {
            
        });
        Else(() => {
            IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        });
        IncStat(IncPercentPhysicalReduction, Owner, 0.05);
        IncStat(IncPercentMagicReduction, Owner, 0.05);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CurrentHealth = GetPAROrHealth(Attacker, GetHealth, PAR_MANA);
        If(CurrentHealth, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            this.IsDead = true;
            SpellBuffRemoveCurrent(Owner);
        });
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, -0.2);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        IncStat(IncFlatPhysicalDamageMod, Attacker, 0 + (this.AttackDamageMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Attacker, 0 + (this.MovementSpeedPercent ?? 0));
        CurrentHealth = GetPAROrHealth(Attacker, GetHealth, PAR_MANA);
        If(CurrentHealth, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            this.IsDead = true;
            SpellBuffRemoveCurrent(Owner);
        });
        SetStatus(Owner, default, SetGhosted);
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.LifestealPercent ?? 0));
        SetStatus(Owner, default, SetGhosted);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MovementSpeedPercent ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, -0.2);
        SetStatus(Owner, default, SetCanMove);
        Caster = SetBuffCasterUnit();
        CasMovespeedMod = GetStat(GetFlatMovementSpeedMod, Caster);
        OwnMovespeedMod = GetStat(GetFlatMovementSpeedMod, Owner);
        MovespeedDiff = Math(0 + (CasMovespeedMod ?? 0), MO_SUBTRACT, 0 + (OwnMovespeedMod ?? 0));
        IncStat(IncFlatMovementSpeedMod, Owner, 0 + (MovespeedDiff ?? 0));
        IfHasBuff(Owner, Owner, "KogMawIcathianSurprise", () => {
            SpellBuffRemove(Owner, "KogMawIcathianSurprise", Owner, 0);
        });
        IfHasBuff(Owner, Owner, "KogMawIcathianSurpriseReady", () => {
            SpellBuffRemove(Owner, "KogMawIcathianSurpriseReady", Owner, 0);
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        IncStat(IncPercentMagicPenetrationMod, Owner, 0 + (this.MagicPen ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.IncreasedArmor ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.IncreasedDamage ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.SlowValue ?? 0));
        SetStatus(Owner, default, SetInvulnerable);
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        ArmorBonus = Math(0 + (this.APMod ?? 0), MO_MULTIPLY, 0.15);
        IncStat(IncFlatArmorMod, Owner, 0 + (ArmorBonus ?? 0));
        SetBuffToolTipVar(1, 0 + (ArmorBonus ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0.5);
        IncStat(IncPercentMovementSpeedMod, Owner, 0.2);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanMove);
        IncStat(IncFlatAttackRangeMod, Owner, 0 + (this.AttackRangeIncrease ?? 0));
        IncStat(IncFlatHPPoolMod, Owner, 0 + (this.BonusHealth ?? 0));
        SetStatus(Owner, default, SetStunned);
        SetStatus(Owner, default, SetMagicImmune);
        IncStat(IncPercentCooldownMod, Owner, -0.015);
        IncStat(IncFlatHPPoolMod, Owner, 0 + (this.BonusHealth ?? 0));
        SetStatus(Owner, default, SetStunned);
        SetStatus(Owner, default, SetMagicImmune);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedVar ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageMod ?? 0));
        IncStat(IncPercentArmorMod, Owner, -0.03);
        IncStat(IncPercentSpellBlockMod, Owner, -0.03);
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageMod ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.ApMod ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ArmorDamageValue = this.VALUE_BY_LEVEL;
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (ArmorDamageValue ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (ArmorDamageValue ?? 0));
        IncStat(IncPercentCooldownMod, Owner, -0.015);
        IncStat(IncPercentMagicPenetrationMod, Owner, 0.021);
        IncStat(IncPercentCooldownMod, Owner, -0.012);
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.017);
        IncStat(IncFlatHPRegenMod, Owner, 2);
        IncStat(IncFlatHPRegenMod, Owner, 2);
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.01);
        IncStat(IncPercentCooldownMod, Owner, -0.1);
        IncStat(IncPercentHPRegenMod, Owner, 0.15);
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.lifeStealMod ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0 + (this.spellVampMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncFlatMovementSpeedMod, Owner, -60);
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Owner, Owner, "BansheesVeilTimer", 1, 1, 45, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffRemove(Owner, "BansheesVeil", Owner, 0);
        });
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.MagicResistanceMod ?? 0));
        If(Attacker, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Else(() => {
            dist = DistanceBetweenObjects("Attacker", "Owner");
            If(dist, default, CO_GREATER_THAN_OR_EQUAL, default, 1000, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        IncStat(IncFlatHPPoolMod, Owner, 32);
        IfNotHasBuff(Owner, Owner, "LeviathanCheck", () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Count = GetBuffCountFromAll(Owner, "LeviathanStats");
        HealthDisplay = Math(32, MO_MULTIPLY, 0 + (Count ?? 0));
        SetBuffToolTipVar(1, 0 + (HealthDisplay ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.attackSpeedMod ?? 0));
        IncStat(IncPercentCooldownMod, Owner, -0.2);
        IfHasBuff(Owner, Owner, "Internal_50Slow", () => {
            IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, -0.5);
        });
        Else(() => {
            IfHasBuff(Owner, Owner, "Internal_40Slow", () => {
                IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, -0.4);
            });
            Else(() => {
                IfHasBuff(Owner, Owner, "Internal_35Slow", () => {
                    IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, -0.35);
                });
                Else(() => {
                    IfHasBuff(Owner, Owner, "Internal_30Slow", () => {
                        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, -0.3);
                    });
                    Else(() => {
                        IfHasBuff(Owner, Owner, "Internal_20Slow", () => {
                            IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, -0.2);
                        });
                        Else(() => {
                            IfHasBuff(Owner, Owner, "Internal_15Slow", () => {
                                IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, -0.15);
                            });
                        });
                    });
                });
            });
        });
        IncStat(IncPercentCooldownMod, Owner, -0.1);
        IncStat(IncFlatArmorPenetrationMod, Owner, 15);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.SpeedBoost ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0.1);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            IncFlatPARRegenMod(Owner, 0 + (this.ManaRegenBonus ?? 0));
        });
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        GuardianAngelCount = 0;
        If(name, default, CO_EQUAL, default, "GuardianAngel", () => {
            GuardianAngelCount = Math(0 + (GuardianAngelCount ?? 0), MO_ADD, 1);
        });
        If(name1, default, CO_EQUAL, default, "GuardianAngel", () => {
            GuardianAngelCount = Math(0 + (GuardianAngelCount ?? 0), MO_ADD, 1);
        });
        If(name2, default, CO_EQUAL, default, "GuardianAngel", () => {
            GuardianAngelCount = Math(0 + (GuardianAngelCount ?? 0), MO_ADD, 1);
        });
        If(name3, default, CO_EQUAL, default, "GuardianAngel", () => {
            GuardianAngelCount = Math(0 + (GuardianAngelCount ?? 0), MO_ADD, 1);
        });
        If(name4, default, CO_EQUAL, default, "GuardianAngel", () => {
            GuardianAngelCount = Math(0 + (GuardianAngelCount ?? 0), MO_ADD, 1);
        });
        If(name5, default, CO_EQUAL, default, "GuardianAngel", () => {
            GuardianAngelCount = Math(0 + (GuardianAngelCount ?? 0), MO_ADD, 1);
        });
        If(GuardianAngelCount, default, CO_EQUAL, default, 0, () => {
            SpellBuffRemove(Owner, "WillRevive", Owner, 0);
        });
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.MagicResistBonus ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorBonus ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageBonus ?? 0));
        IncStat(IncPercentCooldownMod, Owner, 0 + (this.CooldownReduction ?? 0));
        IncFlatPARRegenMod(Owner, 0 + (this.ManaRegenMod ?? 0));
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            IncHealth(Owner, 15.625, Owner);
            IncPAR(Owner, 12.5);
        });
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorMod ?? 0));
        If(Attacker, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Else(() => {
            dist = DistanceBetweenObjects("Attacker", "Owner");
            If(dist, default, CO_GREATER_THAN_OR_EQUAL, default, 1200, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            IncFlatPARRegenMod(Owner, 0 + (this.ManaRegenBonus ?? 0));
        });
        IncStat(IncFlatArmorPenetrationMod, Owner, 30);
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.AP_Buff ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0 + (this.SpellVamp_Buff ?? 0));
        IncStat(IncFlatGoldPer10Mod, Owner, 5);
        IncStat(IncFlatGoldPer10Mod, Owner, 5);
        IncStat(IncPercentCooldownMod, Owner, -0.15);
        IfHasBuff(Owner, Owner, "Sheen", () => {
            SpellBuffRemove(Owner, "Sheen", Owner, default);
        });
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.MagicResistBonus ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorBonus ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        this.LifeTime = LifeTime;
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (CharVars.MagicDamageMod ?? 0));
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetStunned);
        SetStatus(Owner, default, SetTargetable);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorReduction ?? 0));
        AbilityPowerMod = this.AbilityPowerMod;
        BaseDamageMod = this.BaseDamageMod;
        BonusDamageMod = this.BonusDamageMod;
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (AbilityPowerMod ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (BonusDamageMod ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (BaseDamageMod ?? 0));
        IncStat(IncFlatCritDamageMod, Owner, 0.5);
        IncStat(IncFlatHPRegenMod, Owner, 4);
        HealthPERC = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        If(AvatarVars.MasteryInitiate, default, CO_EQUAL, default, true, () => {
            If(HealthPERC, default, CO_GREATER_THAN, default, 0.7, () => {
                IncStat(IncPercentMovementSpeedMod, Owner, 0 + (AvatarVars.MasteryInitiateAmt ?? 0));
            });
        });
        IncStat(IncFlatMagicReduction, Owner, -15);
        PercHealth = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        PercMissing = Math(1, MO_SUBTRACT, 0 + (PercHealth ?? 0));
        Vamp = Math(0 + (PercMissing ?? 0), MO_DIVIDE, 2.5);
        IncStat(IncPercentSpellVampMod, Owner, 0 + (Vamp ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 5);
        IncStat(IncFlatPhysicalDamageMod, Owner, 5);
        MoveSpeedMod = this.MoveSpeedMod;
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (MoveSpeedMod ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0.15);
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.MagicResistBonus ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorBonus ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageBonus ?? 0));
        LessOwnerHealth = Math(0 + (this.OwnerHealth ?? 0), MO_MULTIPLY, 0.02);
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (LessOwnerHealth ?? 0));
        IncStat(IncPercentPhysicalReduction, Owner, 0.15);
        IncStat(IncPercentMagicReduction, Owner, 0.15);
        MoveSpeedMod = this.MoveSpeedMod;
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (MoveSpeedMod ?? 0));
        IncStat(IncPercentCooldownMod, Owner, -0.15);
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, -0.2);
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.StatBoost ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.StatBoost ?? 0));
        SetBuffToolTipVar(1, 0 + (this.StatBoost ?? 0));
        Count = GetBuffCountFromAll(Owner, "MaladyCounter");
        ResistanceShred = Math(-6, MO_MULTIPLY, 0 + (Count ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (ResistanceShred ?? 0));
        IncStat(IncFlatGoldPer10Mod, Owner, 5);
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            IncFlatPARRegenMod(Owner, 0 + (this.ManaRegenBonus ?? 0));
            IncStat(IncFlatHPRegenMod, Owner, 0 + (this.HealthRegenBonus ?? 0));
            IncStat(IncPercentCooldownMod, Owner, -0.1);
        });
        IncStat(IncFlatGoldPer10Mod, Owner, 5);
        BonusAbilityPower = Math(0.025, MO_MULTIPLY, 0 + (this.MaxMana ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (BonusAbilityPower ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 5);
        IfNotHasBuff(Owner, Owner, "MuramasaCheck", () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Count = GetBuffCountFromAll(Owner, "MuramasaStats");
        ValueDisplay = Math(5, MO_MULTIPLY, 0 + (Count ?? 0));
        SetBuffToolTipVar(1, 0 + (ValueDisplay ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MovementSpeedMod ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncFlatPARPoolMod(Owner, 0 + (CharVars.TearBonusMana ?? 0));
        LessOwnerMana = Math(0 + (this.OwnerMana ?? 0), MO_MULTIPLY, 0.02);
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (LessOwnerMana ?? 0));
        healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        If(healthPercent, default, CO_GREATER_THAN_OR_EQUAL, default, 0.99, () => {
            If(LifeTime, default, CO_GREATER_THAN_OR_EQUAL, default, 45, () => {
                IfNotHasBuff(Owner, Owner, "MonsterBankSmall", () => {
                    IfNotHasBuff(Owner, Owner, "MonsterBankBig", () => {
                        SpellBuffAdd(Owner, Owner, "MonsterBankSmall", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                });
            });
        });
        IncStat(IncPercentSpellVampMod, Owner, 0.2);
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.4);
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.abilityPower ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.MagicResistBonus ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorBonus ?? 0));
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            IncFlatPARRegenMod(Owner, 0 + (this.ManaRegenBonus ?? 0));
            IncStat(IncFlatHPRegenMod, Owner, 0 + (this.HealthRegenBonus ?? 0));
        });
        IncStat(IncFlatMagicDamageMod, Owner, 35);
        IncStat(IncFlatMagicPenetrationMod, Owner, 20);
        Count = GetBuffCountFromAll(Owner, "WitsEndCounter");
        ResistanceBuff = Math(5, MO_MULTIPLY, 0 + (Count ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (ResistanceBuff ?? 0));
        IncStat(IncPercentCooldownMod, Owner, 0 + (this.CooldownReduction ?? 0));
        IncFlatPARRegenMod(Owner, 0 + (this.ManaRegenMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.LifeStealMod ?? 0));
        IncStat(IncFlatHPRegenMod, Owner, 0 + (this.HealthRegenMod ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.AP_Buff ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0 + (this.SpellVamp_Buff ?? 0));
        IncStat(IncPercentCooldownMod, Owner, -0.15);
        IncStat(IncPercentCooldownMod, Owner, -0.1);
        IncStat(IncPercentMagicPenetrationMod, Owner, 0.4);
        PercentMana = GetPAROrHealth(Owner, GetPARPercent, PAR_MANA);
        PercentMissing = Math(1, MO_SUBTRACT, 0 + (PercentMana ?? 0));
        IncPercentPARRegenMod(Owner, 0 + (PercentMissing ?? 0));
        IncStat(IncPercentCooldownMod, Owner, -0.25);
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.LifeStealMod ?? 0));
        IncStat(IncFlatHPRegenMod, Owner, 0 + (this.HealthRegenMod ?? 0));
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0.15);
        IfNotHasBuff(Owner, Owner, "MuramasaCheck", () => {
            SpellBuffRemoveCurrent(Owner);
        });
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.AP_Debuff ?? 0));
        IncStat(IncPercentCooldownMod, Owner, -0.1);
        IncStat(IncFlatMagicDamageMod, Owner, 8);
        IfNotHasBuff(Owner, Owner, "MejaisCheck", () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Count = GetBuffCountFromAll(Owner, "MejaisStats");
        APDisplay = Math(8, MO_MULTIPLY, 0 + (Count ?? 0));
        SetBuffToolTipVar(1, 0 + (APDisplay ?? 0));
        IncStat(IncPercentMultiplicativeAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentCooldownMod, Owner, -0.2);
    }
    public void OnBuffActivate()
    {
        #region VarDecl
        float? GameTime = null;
        float? BonusHealth = null;
        float? BonusRegen = null;
        Object? Name = null;
        float? BonusAttack = null;
        TeamId? TeamID = null;
        float? CharDamage = null;
        Object? ParticlePosition = null;
        TeamId? teamID = null;
        string? attackerName = null;
        int? FiddlesticksSkinID = null;
        float? gameTime = null;
        float? aoeReduction = null;
        float? PlayerLevel = null;
        float? lifeStealMod = null;
        float? spellVampMod = null;
        Object? Name1 = null;
        Object? Name2 = null;
        float? Duration = null;
        TeamId? OwnerTeamID = null;
        int? SkinName2 = null;
        float? Level = null;
        TeamId? CasterTeamID = null;
        TeamId? TeamOfOwner = null;
        Vector3? Center = null;
        Object? TargetPos = null;
        Object? Position = null;
        float? jungleLifeTime = null;
        float? bonusHealth = null;
        float? bonusDamage = null;
        float? bonusGold = null;
        float? bonusExp = null;
        TeamId? myTeamID = null;
        long? bubbleTeamID = null;
        Vector3? OwnerPos = null;
        Vector3? CastPos = null;
        Object? UltCD = null;
        float? NewUltCD = null;
        Object? SS0CD = null;
        float? NewSS0CD = null;
        Object? SS1CD = null;
        float? NewSS1CD = null;
        string? orderTeam = null;
        string? chaosTeam = null;
        string? OrderTeam = null;
        string? ChaosTeam = null;
        float? Health = null;
        float? Damage = null;
        float? HealAmount = null;
        float? ManaAmount = null;
        float? BonusShieldHP = null;
        Object? BonusDamage = null;
        float? OwnerLevel = null;
        float? NumChampions = null;
        float? TowerHP = null;
        long? BaseHeal = null;
        float? PerLevelHeal = null;
        float? TotalHeal = null;
        long? BaseShield = null;
        float? LevelShield = null;
        Region? MyBubble = null;
        Region? MyBubble2 = null;
        int? Count = null;
        TeamId? Team = null;
        float? MaxHP = null;
        float? MaxMP = null;
        float? TickWorth = null;
        float? TickWorthMana = null;
        float? GameTimeSec = null;
        float? BonusResist = null;
        float? ResistFloored = null;
        float? ResistCapped = null;
        float? DamageFloored = null;
        float? DamageCapped = null;
        float? TTDmg = null;
        TeamId? CasterID = null;
        string? TeamOrderID = null;
        string? TeamChaosID = null;
        float? Distance = null;
        Object? CastPosition = null;
        Vector3? Pos = null;
        float? Dist = null;
        int? OwnerSkinID = null;
        AttackableUnit? Caster = null;
        Vector3? CurPos = null;
        Minion? Other3 = null;
        Vector3? LandPos = null;
        long? Speed = null;
        float? PlusBonus = null;
        float? UpperBound = null;
        float? LowerBound = null;
        int? VeigarSkinID = null;
        float? MonkTotalDamage = null;
        Object? TarPos = null;
        Vector3? BouncePos = null;
        Object? Cooldown = null;
        float? LifeStealToHeal = null;
        float? TooltipBonus = null;
        Vector3? Beam1 = null;
        Vector3? Beam2 = null;
        Vector3? Beam3 = null;
        Pet? Other1 = null;
        Minion? Other2 = null;
        Object? sourcePosition = null;
        float? DamageIncrease = null;
        float? AbilityPower = null;
        bool? isMoving = null;
        Fade? ID = null;
        Object? CurrentCooldown = null;
        Object? CurrentCooldown2 = null;
        Object? FlashCheck = null;
        Vector3? LandingPos = null;
        float? DistanceTwo = null;
        AttackableUnit? Attacker = null;
        float? PetDamage = null;
        float? PetAP = null;
        float? MaxHealth = null;
        Object? StatMultiplier = null;
        float? MordDmg = null;
        float? MordAP = null;
        float? MordHealth = null;
        float? PetHealth = null;
        int? MordekaiserSkinID = null;
        float? DamageVar = null;
        float? ArmorVar = null;
        int? MalphiteSkinID = null;
        float? HPPool = null;
        int? TeemoSkinID = null;
        float? Temp1 = null;
        int? AttackerSkinID = null;
        TeamId? IreliaTeamID = null;
        float? TotalBonus = null;
        float? BaseArmor = null;
        Object? BaseDamage = null;
        float? MoveSpeedMod = null;
        Vector3? OrientationPoint = null;
        float? APMod = null;
        TeamId? OwnerTeam = null;
        Object? CDTimer = null;
        int? XZSkinID = null;
        float? AP = null;
        Object? ManaReduction = null;
        Object? ManaCostInc = null;
        long? MaxMissiles = null;
        bool? Result = null;
        TeamId? OwnerID = null;
        Object? DamageCap = null;
        float? DamagePerc = null;
        float? AbilityPowerMod = null;
        float? AbilityPowerBonus = null;
        float? HToDamage = null;
        float? AttackDamage = null;
        float? RedCardDamage = null;
        float? DamageToDeal = null;
        int? BrandSkinID = null;
        bool? DoOnce = null;
        float? DmgMultTooltip = null;
        float? TotalAD = null;
        float? BonusAD = null;
        float? BaseAD = null;
        float? QAttackDamage = null;
        float? RAttackDamage = null;
        float? EAttackDamage = null;
        float? WAttackDamage = null;
        TeamId? OwnerVar = null;
        float? TotalDamage = null;
        Vector3? FocalPoint = null;
        float? TotalAttackSpeed = null;
        bool? ghosted = null;
        long? PushDistance = null;
        float? RageAmount = null;
        bool? ShouldHit = null;
        bool? Visible = null;
        float? BaseAttack = null;
        float? HitDamage = null;
        float? RemainingDuration = null;
        Object? Cooldown2 = null;
        Object? Cooldown3 = null;
        float? BaseAttackDamage = null;
        Object? RebirthArmorMod = null;
        float? TooltipAmount = null;
        float? offsetAngle = null;
        TeamId? CasterTeam = null;
        float? CooldownStat = null;
        float? Multiplier = null;
        float? NewCooldown = null;
        Vector3? CurrentPos = null;
        string? SkinName = null;
        int? SkinID = null;
        Vector3? AttackerPos = null;
        float? SelfAP = null;
        string? MyName = null;
        float? tooltip = null;
        Object? CDOne = null;
        Object? CDTwo = null;
        Object? CDThree = null;
        Object? CDFour = null;
        float? APStat = null;
        float? APRatio = null;
        float? TooltipDebuff = null;
        Object? targetPos = null;
        Object? maxTrackDistance = null;
        float? PhysPreMod = null;
        float? PhysPostMod = null;
        float? TTVar2 = null;
        TeamId? TeamOfAttacker = null;
        int? NocturneSkinID = null;
        Vector3? Point1 = null;
        Vector3? SpawnPos = null;
        Object? Heal = null;
        Object? SlowPercent = null;
        Vector3? UrgotPos = null;
        TeamId? TeamofOwner = null;
        bool? Last = null;
        float? ChampionPriority = null;
        TeamId? UnitTeamID = null;
        long? IdealDistance = null;
        long? Gravity = null;
        Object? CD = null;
        float? HealthPercent = null;
        int? KMSkinID = null;
        float? TotalCritDamage = null;
        TeamId? AttackerTeam = null;
        int? KogMawSkinID = null;
        float? CurCost = null;
        float? Cost = null;
        float? Tooltip = null;
        Object? itemCD1 = null;
        Object? cost0 = null;
        Object? cost3 = null;
        Object? MissilePosition = null;
        int? RumbleSkinID = null;
        Object? LevelZero = null;
        Object? LevelOne = null;
        Object? SpellTwoMana = null;
        Object? LevelTwo = null;
        Object? SpellThreeMana = null;
        Object? LevelThree = null;
        float? OffsetAngle = null;
        float? HalfDistance = null;
        Vector3? CenterPoint = null;
        int? AnnieSkinID = null;
        bool? IsStealthed = null;
        bool? CanSee = null;
        Object? SizeByLevel = null;
        Object? HealthPerStack = null;
        Object? HitsRequired = null;
        float? InitialDamage = null;
        float? LifeLossPercent = null;
        float? PercentDamage = null;
        float? APBonus = null;
        Object? CastPoint = null;
        float? PushBack = null;
        float? CastOffset = null;
        TeamId? TeamIDTarget = null;
        float? ADFromLevel = null;
        float? TAD = null;
        float? ADFromStats = null;
        float? HealthFromStats = null;
        bool? NearbyChampion = null;
        bool? CheckBuilding = null;
        float? YorickLevel = null;
        float? YorickAP = null;
        float? HealthFromAP = null;
        float? ADFromAP = null;
        float? HealthFromLevel = null;
        float? TotalHealth = null;
        Object? ArmorPerHit = null;
        Object? DmgPerHit = null;
        Object? NewTargetPos = null;
        float? ArmDmgValue = null;
        float? BonusAttackSpeed = null;
        float? BonusAP = null;
        float? ResistanceShred = null;
        Object? ForitfyCheck = null;
        Object? ForitfyCheck2 = null;
        Object? Name3 = null;
        Object? Name4 = null;
        Object? Name5 = null;
        float? ResistanceBuff = null;
        float? healthPercent = null;
        float? missingHealthPercent = null;
        float? healthToRestore = null;
        #endregion
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanCast);
        MoveAway(Owner, Attacker, 1200, 20, 600, 550, FIRST_COLLISION_HIT, CANCEL_ORDER, 0, default);
        SetStatus(Owner, default, SetFeared);
        SetStatus(Owner, default, SetNearSight);
        SetStatus(Owner, default, SetSilenced);
        SetStatus(Owner, default, SetSleep);
        SetStatus(Owner, default, SetStunned);
        SetStatus(Owner, default, SetNetted);
        SetStatus(Owner, default, SetFeared);
        SetStatus(Owner, default, SetDisarmed);
        SetStatus(Owner, default, SetTaunted);
        SetStatus(Owner, default, SetCharmed);
        SetStatus(Owner, default, SetFeared);
        GameTime = GetGameTime();
        BonusHealth = Math(0 + (GameTime ?? 0), MO_MULTIPLY, 2.083);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (BonusHealth ?? 0));
        BonusRegen = Math(0 + (GameTime ?? 0), MO_MULTIPLY, 0.00625);
        IncPermanentStat(IncPermanentFlatHPRegenMod, Owner, 0 + (BonusRegen ?? 0));
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectMinions AffectWards ", "SharedWardBuff", true, (Unit) => {
            MoveAway(Unit, Owner, 1000, 50, 300, 300, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 300, FACE_MOVEMENT_DIRECTION);
        });
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        IfHasBuff(Owner, Owner, "CannonBallStun", () => {
            SpellBuffRemove(Owner, "CannonBallStun", Owner, default);
        });
        ApplyStun(Owner, Owner, 0.75);
        ApplyStun(Owner, Owner, 1.5);
        RequireVar(this.MoveSpeedMod);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        RequireVar(this.MoveSpeedMod);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        this.ThisBubble = AddPosPerceptionBubble(Attacker, 300, Owner, 5000, Nothing, false);
        this.lastTooltip = 0;
        RequireVar(this.PercentMod);
        this.AP = 0;
        this.AS = 0;
        this.hpRegen = 0;
        RequireVar(this.multiplier);
        RequireVar(this.PercentMod);
        this.AP = 0;
        Name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(Name, default, CO_EQUAL, default, "Recall", () => {
            SetSpell(Owner, 6, InventorySlots, SPELLBOOK_CHAMPION, "RecallImproved");
        });
        If(Name, default, CO_EQUAL, default, "OdinRecall", () => {
            SetSpell(Owner, 6, InventorySlots, SPELLBOOK_CHAMPION, "OdinRecallImproved");
        });
        IncPermanentStat(IncPermanentFlatBubbleRadiusMod, Owner, 55);
        RequireVar(this.GoldAmount);
        IncGold(Owner, 0 + (this.GoldAmount ?? 0));
        RequireVar(this.Level);
        RequireVar(this.ArmorMod);
        SpellEffectCreate(this.buffParticle, default, "regen_rune_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        IncPermanentStat(IncPermanentPercentAttackSpeedMod, Owner, 0.2);
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, -0.1);
        SpellEffectCreate(this.buffParticle, default, "invis_runes_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        IncPermanentStat(IncPermanentPercentMovementSpeedMod, Owner, 0.3);
        SpellEffectCreate(this.buffParticle, default, "Speed_runes_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        this.DamageVar = 0;
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_blue_defense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.CooldownVar = 0;
        SetBuffToolTipVar(1, 20);
        IncPermanentFlatPARRegenMod(Owner, 3);
        GameTime = GetGameTime();
        BonusAttack = Math(0 + (GameTime ?? 0), MO_DIVIDE, 30);
        BonusAttack = Math(0 + (BonusAttack ?? 0), MO_SUBTRACT, 15);
        BonusAttack = Math(0 + (BonusAttack ?? 0), MO_MIN, 40);
        BonusAttack = Math(0 + (BonusAttack ?? 0), MO_MAX, 20);
        this.BonusAttack = BonusAttack;
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, 0 + (BonusAttack ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (BonusAttack ?? 0));
        SpellEffectCreate(this.buffParticle, default, "nashor_rune_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        SpellBuffRemove(Owner, "WormRecouperateOn", Owner, default);
        CharDamage = GetTotalAttackDamage(Owner);
        this.DamageMod = Math(0 + (CharDamage ?? 0), MO_MULTIPLY, -0.5);
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageMod ?? 0));
        SpellBuffRemove(Owner, "WormRecouperate1", Owner, default);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_red_offense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        RequireVar(this.ParticlePosition);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_red_offense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        ParticlePosition = this.ParticlePosition;
        teamID = GetTeamID(default);
        If(teamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.CastParticle, default, "ClairvoyanceEyeLong.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, ParticlePosition, Target, default, default, false, default, default, false, default, default, default);
            this.Bubble = AddPosPerceptionBubble(teamID, 2200, ParticlePosition, 180, Nothing, false);
        });
        If(teamID, default, CO_EQUAL, default, TEAM_CHAOS, () => {
            SpellEffectCreate(this.CastParticle, default, "ClairvoyanceEyeLong.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, ParticlePosition, Target, default, default, false, default, default, false, default, default, default);
            this.Bubble = AddPosPerceptionBubble(teamID, 2200, ParticlePosition, 180, Nothing, false);
        });
        this.numberUpgrades = 14;
        IncPermanentExpReward(Owner, 12.5);
        IncPermanentGoldReward(Owner, 2);
        RequireVar(this.TickDamage);
        RequireVar(this.attackSpeedMod);
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            ParticlePosition = this.ParticlePosition;
            teamID = GetTeamID(default);
            SpellEffectCreate(this.CastParticle, default, "TwistedTreelineClairvoyance.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, ParticlePosition, Target, default, default, false, default, default, default, default, default, default);
            If(teamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                this.Bubble = AddPosPerceptionBubble(teamID, 1150, ParticlePosition, 90, Nothing, false);
            });
            If(teamID, default, CO_EQUAL, default, TEAM_CHAOS, () => {
                this.Bubble = AddPosPerceptionBubble(teamID, 1150, ParticlePosition, 90, Nothing, false);
            });
        });
        Else(() => {
            this.ParticlePosition = GetUnitPosition(Owner);
        });
        RequireVar(this.ParticlePosition);
        RequireVar(this.MovementSpeedMod);
        RequireVar(this.AttackSpeedMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_StunnedOrSilencedOrTaunted);
        SetStatus(Owner, default, SetTaunted);
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            ApplyAssistMarker(Attacker, Owner, 10);
        });
        attackerName = GetUnitSkinName(Attacker);
        TeamID = GetTeamID(default);
        this.removePart = false;
        IfHasBuff(Owner, Attacker, "GalioIdolOfDurandMarker", () => {
            SpellEffectCreate(this.Part, default, "galio_taunt_unit_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, false, false, default, default);
            this.removePart = true;
        });
        IfHasBuff(Owner, Attacker, "ShenShadowDashCooldown", () => {
            SpellEffectCreate(this.Part, default, "Global_Taunt_multi_unit.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(Part2, default, "shen_shadowDash_unit_impact.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
            this.removePart = true;
        });
        IfHasBuff(Owner, Attacker, "PuncturingTauntArmorDebuff", () => {
            SpellEffectCreate(this.Part, default, "global_taunt.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Target, default, default, false, default, default, false, false, default, default);
            this.removePart = true;
        });
        SetStatus(Owner, default, SetInvulnerable);
        RequireVar(this.BreakDamage);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.TeamID);
        SetStatus(Owner, default, SetPacified);
        SetStatus(Owner, default, SetFeared);
        SetStatus(Owner, default, SetCanCast);
        ApplyAssistMarker(Attacker, Owner, 10);
        IfHasBuff(Target, Attacker, "Fear", () => {
            TeamID = GetTeamID(default);
            FiddlesticksSkinID = GetSkinID(Attacker);
            If(FiddlesticksSkinID, default, CO_EQUAL, default, 6, () => {
                SpellEffectCreate(this.a, default, "GlobalFear_Surprise.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(this.Confetti, default, "Party_HornConfetti_Instant.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "BUFFBONE_CSTM_HORN", default, Attacker, default, default, false, false, false, false, true, default, default);
            });
            Else(() => {
                SpellEffectCreate(this.a, default, "Global_Fear.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
            });
        });
        Else(() => {
            SpellEffectCreate(this.a, default, "Global_Fear.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
        });
        gameTime = GetGameTime();
        aoeReduction = Math(0 + (gameTime ?? 0), MO_MULTIPLY, 0.000111);
        aoeReduction = Math(0 + (aoeReduction ?? 0), MO_MIN, 0.2);
        aoeReduction = Math(0 + (aoeReduction ?? 0), MO_MAX, 0);
        this.DamageMultiplier = Math(1, MO_SUBTRACT, 0 + (aoeReduction ?? 0));
        SetStatus(Owner, default, SetNetted);
        SetStatus(Owner, default, SetSuppressed);
        SetStatus(Owner, default, SetStunned);
        ApplyAssistMarker(Attacker, Owner, 10);
        SetStatus(Owner, default, SetSleep);
        RequireVar(this.TickDamage);
        RequireVar(this.attackSpeedMod);
        RequireVar(this.AttackSpeedMod);
        ApplyAssistMarker(Attacker, Target, 10);
        SetStatus(Owner, default, SetPhysicalImmune);
        RequireVar(this.SlowPercent);
        TeamID = GetTeamID(default);
        this.ThisBubble = AddUnitPerceptionBubble(TeamID, 700, Owner, 25000, Nothing, Nothing, true);
        RequireVar(this.MissChance);
        CancelAutoAttack(Owner, false);
        SpellBuffClear(Owner, "Stealth");
        SetStatus(Owner, default, SetStealthed);
        SetStatus(Owner, default, SetMagicImmune);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        RequireVar(this.HPPerLevel);
        this.MaxPlayerLevel = 0;
        ForEachUnitInTargetArea(Owner, Owner, 9999, "AffectEnemies AffectFriends AffectHeroes ", default, default, (Unit) => {
            PlayerLevel = GetLevel(Unit);
            If(PlayerLevel, default, CO_GREATER_THAN, this.MaxPlayerLevel, default, () => {
                this.MaxPlayerLevel = PlayerLevel ?? 0;
            });
        });
        SetStatus(Owner, default, SetStunned);
        ApplyAssistMarker(Attacker, Owner, 10);
        SetStatus(Owner, default, SetStealthed);
        this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
        RequireVar(this.MoveSpeedMod);
        SetStatus(Owner, default, SetRooted);
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 20);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetCharmed);
        RedirectGold(Owner, Attacker);
        SetStatus(Owner, default, SetDisarmed);
        ApplyAssistMarker(Attacker, Owner, 10);
        lifeStealMod = GetStat(GetPercentLifeStealMod, Owner);
        this.lifeStealMod = Math(0 + (lifeStealMod ?? 0), MO_MULTIPLY, -0.5);
        spellVampMod = GetStat(GetPercentSpellBlockMod, Owner);
        this.spellVampMod = Math(0 + (spellVampMod ?? 0), MO_MULTIPLY, -0.5);
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Target, 10);
        SetStatus(Owner, default, SetNearSight);
        SetStatus(Owner, default, SetSilenced);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.WillRemove);
        RequireVar(this.WillRemove);
        SpellEffectCreate(this.Particle1, default, "Summoner_enemy_capture_buf_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "Summoner_enemy_capture_buf_02.troy ", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        SpellEffectCreate(aras, default, "Summoner_Flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, default, false, false, default, default);
        RequireVar(this.MoveSpeedMod);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetPhysicalImmune);
        SetStatus(Owner, default, SetMagicImmune);
        RequireVar(this.Splash);
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(this.AuraParticle, default, "Summoner_ally_capture_buf_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle, default, "Summoner_ally_capture_buf_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "Summoner_capture_Pulse.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SetStatus(Owner, default, SetPhysicalImmune);
        SetStatus(Owner, default, SetMagicImmune);
        RequireVar(this.Splash);
        ApplyAssistMarker(Attacker, Owner, 10);
        ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectEnemies AffectNeutral AffectHeroes ", default, true, (Unit) => {
            SpellBuffClear(Unit, "OdinCaptureChannel");
            SpellEffectCreate(asdf, default, "Ezreal_essenceflux_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Unit, false, Unit, "root", default, Unit, default, default, true, false, false, false, false, default, default);
        });
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.flashSlot);
        RequireVar(this.CastPos);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetInvulnerable);
        SpellEffectCreate(this.part, default, "Teleport_target.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ak, default, "Summoner_Teleport.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        RequireVar(this.CastPosition);
        Name1 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        Name2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        this.ActivateTime = GetGameTime();
        If(Name1, default, CO_EQUAL, default, "summonerteleport", () => {
            SetSpell(Owner, 0, SpellSlots, SPELLBOOK_SUMMONER, "TeleportCancel");
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 1);
            this.SlotNum = 0;
        });
        ElseIf(Name2, default, CO_EQUAL, default, "summonerteleport", () => {
            SetSpell(Owner, 1, SpellSlots, SPELLBOOK_SUMMONER, "TeleportCancel");
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 1);
            this.SlotNum = 1;
        });
        Else(() => {
            this.SlotNum = 2;
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        this.Interrupted = false;
        RequireVar(this.ScaleCoef);
        RequireVar(this.ScaleCap);
        IncScaleSkinCoef(0 + (this.ScaleCoef ?? 0), Owner);
        RequireVar(this.APMod);
        RequireVar(this.AttackSpeedMod);
        RequireVar(this.AllyAttackSpeedMod);
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.APMod ?? 0));
        Duration = GetBuffRemainingDuration(Owner, "SummonerBattleCry");
        RedirectGold(Owner, Attacker);
        SpellEffectCreate(aras, default, "Summoner_Flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, false, false, false, default, default);
        RequireVar(this.BonusHealth);
        OwnerTeamID = GetTeamID(default);
        IncPermanentStat(IncPermanentPercentAttackSpeedMod, Owner, 0.8);
        IncPermanentStat(IncPermanentFlatAttackRangeMod, Owner, 75);
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, -1);
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, -10);
        IncScaleSkinCoef(0.7, Owner);
        RedirectGold(Owner, Attacker);
        SpellEffectCreate(aras, default, "Summoner_Flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, default, default, default, default, default, default);
        RequireVar(this.BonusHealth);
        OwnerTeamID = GetTeamID(default);
        If(OwnerTeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SkinName2 = PushCharacterData("Summoner_Rider_Order", Owner, true);
        });
        Else(() => {
            SkinName2 = PushCharacterData("Summoner_Rider_Chaos", Owner, false);
        });
        RequireVar(this.ArmorBonus);
        RequireVar(this.DamageBonus);
        IfHasBuff(Owner, Owner, "PromoteMeBuff", () => {
            RequireVar(this.TotalMR);
            RequireVar(this.BonusArmor);
            RedirectGold(Owner, Attacker);
            SpellEffectCreate(aras, default, "Summoner_Flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
            RequireVar(this.BonusHealth);
            IncPermanentStat(IncPermanentPercentAttackSpeedMod, Owner, 0.5);
            IncPermanentStat(IncPermanentFlatAttackRangeMod, Owner, 75);
            IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, 0 + (this.TotalMR ?? 0));
            IncPermanentStat(IncPermanentFlatArmorMod, Owner, 0 + (this.BonusArmor ?? 0));
            IncScaleSkinCoef(0.4, Owner);
        });
        IfHasBuff(Owner, Owner, "OdinSuperMinion", () => {
            RedirectGold(Owner, Attacker);
            SpellEffectCreate(aras, default, "Summoner_Flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
            RequireVar(this.BonusHealth);
            OwnerTeamID = GetTeamID(default);
            IncPermanentStat(IncPermanentPercentAttackSpeedMod, Owner, 0.8);
            IncPermanentStat(IncPermanentFlatAttackRangeMod, Owner, 75);
            IncPermanentStat(IncPermanentPercentCooldownMod, Owner, -1);
            IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, -10);
            IncScaleSkinCoef(0.7, Owner);
        });
        RequireVar(this.ParticleID);
        RequireVar(this.ParticleID2);
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.ArmorMod);
        If(this.ArmorMod, default, CO_NOT_EQUAL, default, 0, () => {
            ApplyAssistMarker(Attacker, Owner, 10);
        });
        Level = GetLevel(Owner);
        RequireVar(this.AllyAPMod);
        RequireVar(this.AllyAttackSpeedMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.Level);
        SpellEffectCreate(this.DotPart, default, "Summoner_Dot.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.PercentBonus = 0;
        this.StartTime = GetGameTime();
        RequireVar(this.HealthMod);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetTargetable);
        SpellEffectCreate(this.waypoint, default, "tutorial_waypoint_yellow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        this.PercentBonus = 0;
        this.StartTime = GetGameTime();
        CasterTeamID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(CasterTeamID, 0, Owner, 20000, Nothing, Nothing, false);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        RequireVar(this.DamagePerTick);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "corki_valkrie_impact_cas.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 900, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ForNClosestUnitsInTargetArea(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectMinions ", 1, true, "ResistantSkin", (Unit) => {
            MoveAway(Owner, Unit, 1000, 50, 300, 300, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 300, FACE_MOVEMENT_DIRECTION);
        });
        SetStatus(Owner, default, SetRevealSpecificUnit);
        RequireVar(this.DamagePerTick);
        ApplyDamage(Attacker, Owner, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, default, false, false, default);
        RequireVar(this.DrainPercent);
        RequireVar(this.DrainedBool);
        RequireVar(this.Distance);
        RequireVar(this.IdealDistance);
        RequireVar(this.Gravity);
        RequireVar(this.Speed);
        RequireVar(this.Center);
        Center = this.Center;
        MoveAway(Owner, Center, 0 + (this.Speed ?? 0), 0 + (this.Gravity ?? 0), 0 + (this.Distance ?? 0), 0, FIRST_COLLISION_HIT, CANCEL_ORDER, 0 + (IdealDistance ?? 0), default);
        ApplyAssistMarker(Attacker, Owner, 10);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        RequireVar(this.TargetPos);
        TargetPos = this.TargetPos;
        Move(Owner, TargetPos, 600, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, KEEP_CURRENT_FACING);
        ApplyAssistMarker(Attacker, Owner, 10);
        IncStat(IncPercentRespawnTimeMod, Owner, -3000);
        this.PercentBonus = 0;
        this.StartTime = GetGameTime();
        SetStatus(Owner, default, SetNoRender);
        RequireVar(this.Distance);
        RequireVar(this.IdealDistance);
        RequireVar(this.Gravity);
        RequireVar(this.Speed);
        RequireVar(this.Center);
        Center = this.Center;
        MoveAway(Owner, Center, 0 + (this.Speed ?? 0), 0 + (this.Gravity ?? 0), 0 + (this.Distance ?? 0), 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (IdealDistance ?? 0), default);
        ApplyAssistMarker(Attacker, Owner, 10);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetNoRender);
        RequireVar(this.Gravity);
        RequireVar(this.Speed);
        RequireVar(this.Position);
        RequireVar(this.IdealDistance);
        Position = this.Position;
        Move(Owner, Position, 0 + (this.Speed ?? 0), 0 + (this.Gravity ?? 0), 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (IdealDistance ?? 0), default);
        ApplyAssistMarker(Attacker, Owner, 10);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        RequireVar(this.spawnTime);
        RequireVar(this.healthPerMinute);
        RequireVar(this.damagePerMinute);
        RequireVar(this.goldPerMinute);
        RequireVar(this.expPerMinute);
        RequireVar(this.upgradeTimer);
        gameTime = GetGameTime();
        jungleLifeTime = Math(0 + (gameTime ?? 0), MO_SUBTRACT, 0 + (this.spawnTime ?? 0));
        jungleLifeTime = Math(0 + (jungleLifeTime ?? 0), MO_MAX, 0);
        bonusHealth = Math(0 + (jungleLifeTime ?? 0), MO_MULTIPLY, 0 + (this.healthPerMinute ?? 0));
        bonusHealth = Math(0 + (bonusHealth ?? 0), MO_DIVIDE, 60);
        bonusDamage = Math(0 + (jungleLifeTime ?? 0), MO_MULTIPLY, 0 + (this.damagePerMinute ?? 0));
        bonusDamage = Math(0 + (bonusDamage ?? 0), MO_DIVIDE, 60);
        bonusGold = Math(0 + (jungleLifeTime ?? 0), MO_MULTIPLY, 0 + (this.goldPerMinute ?? 0));
        bonusGold = Math(0 + (bonusGold ?? 0), MO_DIVIDE, 60);
        bonusExp = Math(0 + (jungleLifeTime ?? 0), MO_MULTIPLY, 0 + (this.expPerMinute ?? 0));
        bonusExp = Math(0 + (bonusExp ?? 0), MO_DIVIDE, 60);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (bonusHealth ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (bonusDamage ?? 0));
        IncPermanentExpReward(Owner, 0 + (bonusExp ?? 0));
        IncPermanentGoldReward(Owner, 0 + (bonusGold ?? 0));
        RequireVar(this.DrainPercent);
        RequireVar(this.ManaDrainPercent);
        this.DrainedBool = false;
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SetStatus(Owner, default, SetForceRenderParticles);
        myTeamID = GetTeamID(default);
        If(myTeamID, default, CO_EQUAL, default, 100, () => {
            bubbleTeamID = 200;
        });
        Else(() => {
            bubbleTeamID = 100;
        });
        this.bubbleID = AddUnitPerceptionBubble(bubbleTeamID, 5, Owner, 5, Nothing, Nothing, true);
        RequireVar(this.WillRemove);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        this.PercentBonus = 0;
        this.StartTime = GetGameTime();
        SpellBuffAdd(Owner, Owner, "HalloweenUrfCD", 1, 1, 9, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellEffectCreate(this.a, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.b, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "fish_main", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.c, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_tail", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.d, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_tail_3", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.e, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_uparm", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.f, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_uparm", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.g, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_flipper", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.h, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_flipper", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "HalloweenUrfCD", 1, 1, 9, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SetStatus(Owner, default, SetNoRender);
        PlayAnimation("Idle1", 0, Owner, false, false, default);
        SpellEffectCreate(this.a, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.b, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "fish_main", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.c, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_tail", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.d, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_tail_3", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.e, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_uparm", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.f, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_uparm", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.g, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_flipper", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.h, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_flipper", default, Owner, default, default, false, default, default, default, default, default, default);
        this.damageMod = 0;
        this.StartTime = GetGameTime();
        SpellEffectCreate(default, default, "OdinBombSuccessParticle", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectCreate(this.buffParticle, default, "odin_heal_rune.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, true, default, false, false, default, default);
        this.KillMe = false;
        CharVars.StoredDamage = 0;
        SetBuffToolTipVar(1, 0 + (CharVars.StoredDamage ?? 0));
        SpellBuffRemove(Owner, "Internal_50MS", Owner, 0);
        SpellBuffRemove(Owner, "OdinGrievousWound", Owner, 0);
        OwnerPos = GetUnitPosition(Owner);
        CastPos = GetPointByUnitFacingOffset(Owner, 150, 0);
        TeamID = GetTeamID(default);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetTargetable);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, default, "OdinDONTSHIPTHIS_Green.troy", default, TEAM_ORDER, 0, 0, TEAM_ORDER, Nothing, true, Nothing, default, CastPos, Target, default, default, false, true, default, false, false, default, default);
            SpellEffectCreate(this.Particle2, default, "OdinDONTSHIPTHIS_Red.troy", default, TEAM_ORDER, 0, 0, TEAM_CHAOS, Nothing, true, Nothing, default, CastPos, Target, default, default, false, true, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "OdinDONTSHIPTHIS_Red.troy", default, TEAM_CHAOS, 0, 0, TEAM_ORDER, Nothing, true, Nothing, default, CastPos, Target, default, default, false, true, default, false, false, default, default);
            SpellEffectCreate(this.Particle2, default, "OdinDONTSHIPTHIS_Green.troy", default, TEAM_CHAOS, 0, 0, TEAM_CHAOS, Nothing, true, Nothing, default, CastPos, Target, default, default, false, true, default, false, false, default, default);
        });
        this.DamageTakenFromGuardian = 0.8;
        this.MoveSpeedBuff = 0.25;
        ApplyTaunt(Attacker, Owner, 1);
        RequireVar(this.ArmorBuff);
        RequireVar(this.MagicResistBuff);
        UltCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        NewUltCD = Math(0 + (UltCD ?? 0), MO_DIVIDE, 2);
        SetSlotSpellCooldownTimeVer2(0 + (NewUltCD ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
        SS0CD = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        NewSS0CD = Math(0 + (SS0CD ?? 0), MO_DIVIDE, 2);
        SetSlotSpellCooldownTimeVer2(0 + (NewSS0CD ?? 0), 0, SpellSlots, SPELLBOOK_SUMMONER, Owner, default);
        SS1CD = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        NewSS1CD = Math(0 + (SS1CD ?? 0), MO_DIVIDE, 2);
        SetSlotSpellCooldownTimeVer2(0 + (NewSS1CD ?? 0), 1, SpellSlots, SPELLBOOK_SUMMONER, Owner, default);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_blue_defense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyAssistMarker(Attacker, Owner, 10);
        SetStatus(Owner, default, SetTargetable);
        SpellEffectCreate(this.Particle1, default, "OdinNeutralInvulnerable.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetTargetable);
        orderTeam = TEAM_ORDER;
        chaosTeam = TEAM_CHAOS;
        this.BubbleID = AddUnitPerceptionBubble(orderTeam, 350, Owner, 25000, Nothing, Nothing, true);
        this.BubbleID2 = AddUnitPerceptionBubble(chaosTeam, 350, Owner, 25000, Nothing, Nothing, true);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.buffParticle, this.buffParticle2, "odin_relic_buf_red.troy", "odin_relic_buf_green.troy", TEAM_ORDER, 0, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, true, false, false, false, default, default);
            SpellEffectCreate(this.crystalParticle, this.crystalParticle2, "Odin_Prism_Red.troy", "Odin_Prism_Green.troy", TEAM_ORDER, 0, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, true, true, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.buffParticle, this.buffParticle2, "odin_relic_buf_green.troy", "odin_relic_buf_red.troy", TEAM_ORDER, 0, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, true, false, false, false, default, default);
            SpellEffectCreate(this.crystalParticle, this.crystalParticle2, "Odin_Prism_Green.troy", "Odin_Prism_Red.troy", TEAM_ORDER, 0, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, true, true, false, false, default, default);
        });
        OrderTeam = TEAM_ORDER;
        ChaosTeam = TEAM_CHAOS;
        this.ChaosTeam = ChaosTeam;
        this.OrderTeam = OrderTeam;
        this.OrderBubble = AddUnitPerceptionBubble(this.OrderTeam, 400, Owner, 70, Nothing, Nothing, false);
        this.ChaosBubble = AddUnitPerceptionBubble(this.ChaosTeam, 400, Owner, 70, Nothing, Nothing, false);
        this.DamageIncMod = 40;
        SpellEffectCreate(this.buffParticle, default, "nashor_rune_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        this.APIncMod = 40;
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageIncMod ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.APIncMod ?? 0));
        SpellEffectCreate(this.ParticleOrder, default, "odin_shrine_time.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_ORDER, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ParticleChaos, default, "odin_shrine_time.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_CHAOS, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetGhostProof);
        TeamID = GetTeamID(default);
        this.MyTeam = GetTeamID(default);
        this.orderTeam = TEAM_ORDER;
        this.chaosTeam = TEAM_CHAOS;
        this.BubbleID = AddUnitPerceptionBubble(this.orderTeam, 800, Owner, 25000, Nothing, Nothing, true);
        this.BubbleID2 = AddUnitPerceptionBubble(this.chaosTeam, 800, Owner, 25000, Nothing, Nothing, true);
        If(TeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
            Health = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
            Damage = Math(0 + (Health ?? 0), MO_MULTIPLY, -0.5);
            IncPAR(Owner, 0 + (Damage ?? 0));
        });
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, this.Particle2, "OdinNeutralGuardian_Green.troy", "OdinNeutralGuardian_Red.troy", TEAM_UNKNOWN, 0, 0, TEAM_ORDER, Owner, false, Owner, "crystal", default, Owner, default, default, false, true, false, false, false, default, default);
            SpellEffectCreate(this.PlatformParticle, default, "blank.troy", default, TEAM_ORDER, 0, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.PlatformParticle2, default, "blank.troy", default, TEAM_CHAOS, 0, 0, TEAM_CHAOS, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        ElseIf(TeamID, default, CO_EQUAL, default, TEAM_CHAOS, () => {
            SpellEffectCreate(this.Particle, this.Particle2, "OdinNeutralGuardian_Green.troy", "OdinNeutralGuardian_Red.troy", TEAM_UNKNOWN, 0, 0, TEAM_CHAOS, Owner, false, Owner, "crystal", default, Owner, default, default, false, true, false, false, false, default, default);
            SpellEffectCreate(this.PlatformParticle, default, "blank.troy", default, TEAM_CHAOS, 0, 0, TEAM_CHAOS, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.PlatformParticle2, default, "blank.troy", default, TEAM_ORDER, 0, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "OdinNeutralGuardian_Stone.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_ORDER, Owner, false, Owner, "crystal", default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.Particle2, default, "OdinNeutralGuardian_Stone.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CHAOS, Owner, false, Owner, "crystal", default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.PlatformParticle, default, "blank.troy", default, TEAM_ORDER, 0, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.PlatformParticle2, default, "blank.troy", default, TEAM_CHAOS, 0, 0, TEAM_CHAOS, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        Level = GetLevel(Owner);
        HealAmount = this.VALUE_BY_LEVEL;
        ManaAmount = Math(0 + (HealAmount ?? 0), MO_MULTIPLY, 0.6);
        IncPAR(Owner, 0 + (ManaAmount ?? 0));
        IncPAR(Owner, 20);
        IfHasBuff(Owner, Owner, "OdinPlayerBuff", () => {
            HealAmount = Math(1.25, MO_MULTIPLY, 0 + (HealAmount ?? 0));
        });
        IncHealth(Owner, 0 + (HealAmount ?? 0), Owner);
        TeamID = GetTeamID(default);
        SpellEffectCreate(asdf, default, "Odin_HealthPackHeal.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(asdf, default, "Summoner_Mana.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffClear(Owner, "OdinShieldRelicBuffHeal");
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "odin_point_active.troy", default, TEAM_ORDER, 10, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "odin_point_active.troy", default, TEAM_CHAOS, 10, 0, TEAM_CHAOS, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        RequireVar(this.WillRemove);
        SpellEffectCreate(this.ParticleOrder, default, "OdinHealthRelic.troy", default, TEAM_NEUTRAL, 3000, 0, TEAM_ORDER, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.ParticleChaos, default, "OdinHealthRelic.troy", default, TEAM_NEUTRAL, 3000, 0, TEAM_CHAOS, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, false, default, default, default);
        this.KillMe = false;
        SpellEffectCreate(this.ParticleOrder, default, "OdinSigil.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_ORDER, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.ParticleChaos, default, "OdinSigil.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_CHAOS, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_red_offense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        this.KillMe = false;
        Level = GetLevel(Owner);
        BonusShieldHP = Math(0 + (Level ?? 0), MO_MULTIPLY, 25);
        this.TotalArmorAmount = Math(0 + (BonusShieldHP ?? 0), MO_ADD, 100);
        IncreaseShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
        SetBuffToolTipVar(1, 0 + (this.TotalArmorAmount ?? 0));
        SpellEffectCreate(this.buffParticle2, default, "odin_center_relic.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "OdinCenterRelicShieldCheck2", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(this.ShamanAuraParticle, default, "SonaSongofDiscord_aura.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        this.PreviousTakeDamageTime = GetGameTime();
        this.DealtDamage = 0;
        this.CooldownVar = 0;
        this.TotalDamageOT = 0;
        RequireVar(this.BonusHealth);
        SpellEffectCreate(ar, default, "summoner_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetMagicImmune);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (this.BonusHealth ?? 0));
        this.TimePassed = 0;
        this.PreviousGameTime = GetGameTime();
        this.ChannelStartTime = GetBuffStartTime(Owner, "OdinCaptureChannel");
        OrderTeam = TEAM_ORDER;
        ChaosTeam = TEAM_CHAOS;
        this.BubbleID = AddUnitPerceptionBubble(OrderTeam, 400, Owner, 20, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(OrderTeam, 50, Owner, 20, Nothing, Nothing, true);
        this.BubbleID3 = AddUnitPerceptionBubble(ChaosTeam, 400, Owner, 20, Nothing, Nothing, false);
        this.BubbleID4 = AddUnitPerceptionBubble(ChaosTeam, 50, Owner, 20, Nothing, Nothing, true);
        RequireVar(this.BounceCounter);
        TeamID = GetTeamID(default);
        If(this.BounceCounter, default, CO_LESS_THAN_OR_EQUAL, default, 2, () => {
            ForNClosestUnitsInTargetArea(Attacker, Owner, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, false, "OdinCenterRelicLightning", (Unit) => {
                SpellEffectCreate(this.ParticleID, default, "kennen_btl_beam.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Unit, false, Owner, "head", default, Unit, "root", default, true, default, default, false, default, default, default);
                this.BounceCounter = Math(0 + (this.BounceCounter ?? 0), MO_ADD, 1);
                NextBuffVars.BounceCounter = this.BounceCounter ?? 0;
                SpellBuffAdd(Attacker, Unit, "OdinCenterRelicLightning", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        ApplyDamage(Attacker, Owner, 80, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        SpellEffectCreate(hi, default, "kennen_btl_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(this.Particle, default, "Odin-Capture-Emptying.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Crystal", Owner, Owner, default, default, false, false, false, false, false, default, default);
        Level = GetLevel(Owner);
        BonusDamage = Math(0 + (Level ?? 0), MO_MULTIPLY, 13);
        this.TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 36);
        SetBuffToolTipVar(1, 0 + (this.TotalDamage ?? 0));
        SpellEffectCreate(this.buffParticle, default, "odin_relic_buf_light_blue.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.PrevSpellTrigger = 0;
        IncScaleSkinCoef(0.3, Owner);
        RequireVar(this.SpeedMod);
        this.MassiveBoostOverseer = 1;
        this.MassiveSpeedMod = Math(0 + (this.SpeedMod ?? 0), MO_MULTIPLY, 2);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.buffParticle, default, "invis_runes_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.buffParticle2, default, "Odin_Speed_Shrine_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, false, false, false, false, default, default);
        this.StartPosition = GetUnitPosition(Owner);
        SpellEffectCreate(this.Particle, default, "Odin-Capture-Filling.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Crystal", Owner, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.buffParticle, default, "regen_rune_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        this.VampVar = 0.3;
        this.SpellVampVar = 0.5;
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.VampVar ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0 + (this.SpellVampVar ?? 0));
        SetStatus(Owner, default, SetGhosted);
        NextBuffVars.HPPerLevel = 315;
        SpellBuffAdd(Owner, Owner, "HPByPlayerLevel", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        orderTeam = TEAM_ORDER;
        chaosTeam = TEAM_CHAOS;
        this.BubbleID = AddUnitPerceptionBubble(orderTeam, 650, Owner, 25000, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(chaosTeam, 650, Owner, 25000, Nothing, Nothing, false);
        SetStatus(Owner, default, SetNoRender);
        OwnerLevel = GetLevel(Attacker);
        this.DefenseMod = Math(5, MO_MULTIPLY, 0 + (OwnerLevel ?? 0));
        this.DefenseMod = Math(10, MO_ADD, 0 + (this.DefenseMod ?? 0));
        ApplyAssistMarker(Attacker, Owner, 10);
        SetBuffToolTipVar(1, 0 + (this.DefenseMod ?? 0));
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_red_offense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        this.VampVar = 0.3;
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.VampVar ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0 + (this.VampVar ?? 0));
        SpellEffectCreate(default, default, "odin_quest_complete.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        IncPermanentStat(IncPermanentFlatArmorMod, Owner, 150);
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, 150);
        SpellBuffAdd(Owner, Owner, "PersonalTurretAssistBonus", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IncPermanentStat(IncPermanentPercentAttackSpeedMod, Attacker, 0.3);
        IncPermanentStat(IncPermanentFlatArmorMod, Attacker, 25);
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Attacker, 25);
        IncPermanentStat(IncPermanentFlatArmorMod, Owner, -150);
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, -150);
        IncPermanentStat(IncPermanentPercentAttackSpeedMod, Attacker, 0.05);
        IncPermanentStat(IncPermanentFlatArmorMod, Attacker, 5);
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Attacker, 5);
        RequireVar(this.BonusArmor);
        RequireVar(this.MaxIncreases);
        RequireVar(this.DamageMod);
        RequireVar(this.ArmorMod);
        RequireVar(this.ResistMod);
        RequireVar(this.LoopOffset);
        RequireVar(this.StartDecay);
        this.MaximumArmor = Math(2.5, MO_MULTIPLY, 0 + (this.MaxIncreases ?? 0));
        this.MaximumResist = Math(2.5, MO_MULTIPLY, 0 + (this.MaxIncreases ?? 0));
        this.MaximumDamage = Math(7, MO_MULTIPLY, 0 + (this.MaxIncreases ?? 0));
        TeamID = GetTeamID(default);
        this.ThisBubble = AddUnitPerceptionBubble(TeamID, 800, Owner, 25000, Nothing, Nothing, true);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            NumChampions = GetNumberOfHeroesOnTeam(TEAM_CHAOS, true, true);
        });
        Else(() => {
            NumChampions = GetNumberOfHeroesOnTeam(TEAM_ORDER, true, true);
        });
        NumChampions = Math(5, MO_MIN, 0 + (NumChampions ?? 0));
        this.BonusHealth = Math(0 + (NumChampions ?? 0), MO_MULTIPLY, 150);
        this.Looper = 0;
        this.ChannelStartTime = GetBuffStartTime(Owner, "OdinCaptureChannelBomb");
        SpellEffectCreate(this.SCP, default, "OdinGolemPlaceHolder.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.Agony, default, "OdinGolemPlaceholder2.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.ParticleOrder, default, "odin_shrine_aura.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_ORDER, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.ParticleChaos, default, "odin_shrine_aura.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_CHAOS, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, false, default, default, default);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectCreate(this.buffParticle, default, "regen_rune_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        this.KillMe = false;
        RequireVar(this.WillRemove);
        SpellEffectCreate(this.ParticleOrder, default, "odin_shrine_heal.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_ORDER, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ParticleChaos, default, "odin_shrine_heal.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_CHAOS, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectCreate(this.Part, default, "garen_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        TowerHP = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        this.TowerHP = TowerHP;
        this.StartPosition = GetUnitPosition(Owner);
        SpellEffectCreate(this.ParticleID, default, "TeleportHome.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        this.IsCancelled = 0;
        this.StartTime = GetGameTime();
        RequireVar(this.WillRemove);
        SpellEffectCreate(this.Particle, default, "odin_suppression.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Crystal", Owner, Owner, default, default, false, false, false, false, false, default, default);
        this.StartTime = GetGameTime();
        ApplyStun(Owner, Owner, 0.5);
        this.MyTeamID = GetTeamID(default);
        this.OldMyTeamID = this.MyTeamID;
        TeamOfOwner = GetTeamID(default);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, default, "Odin_Forcefield_red.troy", default, TEAM_ORDER, 280, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
            SpellEffectCreate(this.Particle2, default, "Odin_Forcefield_green.troy", default, TEAM_CHAOS, 280, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "Odin_Forcefield_red.troy", default, TEAM_CHAOS, 280, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
            SpellEffectCreate(this.Particle2, default, "Odin_Forcefield_green.troy", default, TEAM_ORDER, 280, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        });
        ApplyDamage(Attacker, Owner, 100000000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Attacker);
        this.StartPosition = GetUnitPosition(Owner);
        this.IsCancelled = 0;
        BaseHeal = 80;
        Level = GetLevel(Owner);
        PerLevelHeal = Math(25, MO_MULTIPLY, 0 + (Level ?? 0));
        TotalHeal = Math(0 + (PerLevelHeal ?? 0), MO_ADD, 0 + (BaseHeal ?? 0));
        this.HealPerTick = Math(0 + (TotalHeal ?? 0), MO_DIVIDE, 10);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_blue_defense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        this.KillMe = false;
        SpellEffectCreate(this.Particle, default, "PotionofGiantStrength_itm.troy", default, TEAM_ORDER, 10, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Target, default, default, false, false, default, false, false, default, default);
        SpellEffectCreate(this.Particle, default, "PlaceholderShield.troy", default, TEAM_ORDER, 10, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Target, default, default, false, false, default, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "PotionofElusiveness_itm.troy", default, TEAM_ORDER, 10, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Target, default, default, false, false, default, false, false, default, default);
        SetScaleSkinCoef(1.15, Owner);
        SpellEffectCreate(this.Particle1, default, "regen_rune_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        SpellEffectCreate(this.buffParticle, default, "regen_rune_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.2);
        IncStat(IncPercentMagicPenetrationMod, Owner, 0.2);
        Level = GetLevel(Owner);
        BaseShield = 140;
        LevelShield = Math(0 + (Level ?? 0), MO_MULTIPLY, 20);
        this.TotalShield = Math(0 + (LevelShield ?? 0), MO_ADD, 0 + (BaseShield ?? 0));
        SetBuffToolTipVar(1, 0 + (this.TotalShield ?? 0));
        IncreaseShield(Owner, 0 + (this.TotalShield ?? 0), true, true);
        UltCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        NewUltCD = Math(0 + (UltCD ?? 0), MO_DIVIDE, 2);
        SetSlotSpellCooldownTimeVer2(0 + (NewUltCD ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
        SS0CD = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        NewSS0CD = Math(0 + (SS0CD ?? 0), MO_DIVIDE, 2);
        SetSlotSpellCooldownTimeVer2(0 + (NewSS0CD ?? 0), 0, SpellSlots, SPELLBOOK_SUMMONER, Owner, default);
        SS1CD = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        NewSS1CD = Math(0 + (SS1CD ?? 0), MO_DIVIDE, 2);
        SetSlotSpellCooldownTimeVer2(0 + (NewSS1CD ?? 0), 1, SpellSlots, SPELLBOOK_SUMMONER, Owner, default);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_blue_defense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        this.TotalArmorAmount = 1000;
        IncreaseShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
        this.TotalDamageOT = 0;
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_red_offense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        RequireVar(this.HPPerLevel);
        RequireVar(this.DmgPerLevel);
        RequireVar(this.ArmorPerLevel);
        RequireVar(this.MR_per_level);
        this.MaxPlayerLevel = 0;
        ForEachUnitInTargetArea(Owner, Owner, 9999, "AffectEnemies AffectFriends AffectHeroes ", default, true, (Unit) => {
            PlayerLevel = GetLevel(Unit);
            If(PlayerLevel, default, CO_GREATER_THAN, this.MaxPlayerLevel, default, () => {
                this.MaxPlayerLevel = PlayerLevel ?? 0;
            });
        });
        this.ADBuff = 5;
        this.LSBuff = 0.01;
        this.CooldownVar = 0;
        OrderTeam = TEAM_ORDER;
        ChaosTeam = TEAM_CHAOS;
        SpellEffectCreate(this.ParticleOrder, default, "odin_shrine_time.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_ORDER, Owner, false, Nothing, default, Owner, Owner, default, default, false, true, false, false, false, default, default);
        SpellEffectCreate(this.ParticleChaos, default, "odin_shrine_time.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_CHAOS, Owner, false, Nothing, default, Owner, Owner, default, default, false, true, false, false, false, default, default);
        MyBubble = AddPosPerceptionBubble(OrderTeam, 250, Owner, 1, Nothing, false);
        MyBubble2 = AddPosPerceptionBubble(ChaosTeam, 250, Owner, 1, Nothing, false);
        Count = GetBuffCountFromAll(Owner, "OdinBloodBursterInternal");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
            SpellBuffRemoveStacks(Owner, Owner, "OdinBloodbursterInternal", 0);
            SpellBuffAdd(Attacker, Attacker, "OdinBloodbursterBuff", 3, 1, 7, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        IncScaleSkinCoef(0.25, Owner);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_red_offense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.NextAttackTime = GetGameTime();
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_blue_defense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        this.KillMe = false;
        SpellEffectCreate(this.Particle, default, "PotionofElusiveness_itm.troy", default, TEAM_ORDER, 10, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.Particle2, default, "PotionofGiantStrength_itm.troy", default, TEAM_ORDER, 10, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.Particle2, default, "PlaceholderShield.troy", default, TEAM_ORDER, 10, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.buffParticle, default, "odin_quest_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 400, Owner, 20, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(Team, 50, Owner, 20, Nothing, Nothing, true);
        MaxHP = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        MaxMP = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        TickWorth = Math(0 + (MaxHP ?? 0), MO_DIVIDE, 21);
        TickWorthMana = Math(0 + (MaxMP ?? 0), MO_DIVIDE, 6);
        this.WillRemove = false;
        this.TickWorth = TickWorth;
        this.TickWorthMana = TickWorthMana;
        this.TickNumber = 1;
        SpellEffectCreate(arr, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.EmblemParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CASTER, Nothing, true, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        RequireVar(this.BonusDamage);
        RequireVar(this.BonusHealth);
        RequireVar(this.BonusArmor);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectCreate(poofin, default, "jackintheboxpoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        ApplyAssistMarker(Attacker, Owner, 10);
        IfHasBuff(Owner, Owner, "HeartOfGold", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "HeartOfGold", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SpellEffectCreate(default, default, "Fervor", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ZephrisPendant, default, "ZettasManaManipulator_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CASTER, Nothing, true, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        RequireVar(this.BonusHealth);
        RequireVar(this.BubbleSize);
        gameTime = GetGameTime();
        aoeReduction = Math(0 + (gameTime ?? 0), MO_MULTIPLY, 0.000111);
        aoeReduction = Math(0 + (aoeReduction ?? 0), MO_MIN, 0.2);
        aoeReduction = Math(0 + (aoeReduction ?? 0), MO_MAX, 0);
        aoeReduction = Math(0 + (aoeReduction ?? 0), MO_MULTIPLY, 100);
        SetBuffToolTipVar(1, 0 + (aoeReduction ?? 0));
        SpellEffectCreate(this.buffParticle, default, "Global_Invulnerability.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        GameTimeSec = GetGameTime();
        BonusResist = Math(0.0666, MO_MULTIPLY, 0 + (GameTimeSec ?? 0));
        BonusDamage = Math(0.000333, MO_MULTIPLY, 0 + (GameTimeSec ?? 0));
        ResistFloored = Math(40, MO_MAX, 0 + (BonusResist ?? 0));
        ResistCapped = Math(80, MO_MIN, 0 + (ResistFloored ?? 0));
        DamageFloored = Math(0.2, MO_MAX, 0 + (BonusDamage ?? 0));
        DamageCapped = Math(0.4, MO_MIN, 0 + (DamageFloored ?? 0));
        this.BonusDamage = DamageCapped;
        this.BonusResist = ResistCapped;
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectTurrets ", default, default, (Unit) => {
            IncPermanentStat(IncPermanentPercentPhysicalDamageMod, Unit, 0 + (this.BonusDamage ?? 0));
            IncPermanentStat(IncPermanentFlatArmorMod, Unit, 0 + (this.BonusResist ?? 0));
            IncPermanentStat(IncPermanentFlatSpellBlockMod, Unit, 0 + (this.BonusResist ?? 0));
        });
        TTDmg = Math(100, MO_MULTIPLY, 0 + (this.BonusDamage ?? 0));
        SetBuffToolTipVar(1, 0 + (TTDmg ?? 0));
        SetBuffToolTipVar(2, 0 + (this.BonusResist ?? 0));
        RequireVar(this.StartDecay);
        SpellEffectCreate(this.b, default, "leBlanc_displace_AOE_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.b, default, "leBlanc_displace_AOE_tar_ult.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
        SetStatus(Owner, default, SetStealthed);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(FadeParticle, default, "LeBlanc_MirrorImagePoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Nothing, default, default, true, false, false, false, false, default, default);
        IfHasBuff(Owner, Owner, "LeblancPassive", () => {
            SpellBuffRemove(Owner, "LeblancPassive", Owner, 0);
        });
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, default, "LeblancImage.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_ORDER, Nothing, true, Owner, "root", default, Target, "root", default, false, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "LeblancImage.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CHAOS, Nothing, true, Owner, "root", default, Target, "root", default, false, default, default, false, false, default, default);
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        RequireVar(this.OwnerPos);
        this.doNotTeleport = false;
        OwnerPos = this.OwnerPos;
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "LeblancSlideReturnM");
        CasterID = GetTeamID(default);
        If(CasterID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.YellowIndicator, default, "Leblanc_displacement_blink_indicator_ult.troy", default, TEAM_ORDER, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Owner, default, default, false, default, default, false, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.YellowIndicator, default, "Leblanc_displacement_blink_indicator_ult.troy", default, TEAM_CHAOS, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Owner, default, default, false, default, default, false, default, default, default);
        });
        RequireVar(this.BreakDamage);
        RequireVar(this.BreakStun);
        RequireVar(this.Broken);
        SpellEffectCreate(this.SoulShackleTarget, default, "leBlanc_shackle_chain_beam_ult.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "root", default, Owner, "spine", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID, default, "leBlanc_shackle_self_idle_ult.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "C_BUFFBONE_GLB_CENTER_LOC", default, Attacker, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.SoulShackleIdleM, default, "leBlanc_shackle_target_idle_ult.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.SoulShackleTarget_blood, default, "leBlanc_shackle_tar_blood.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.LeblancVisionBubble = 0;
        TeamOfOwner = GetTeamID(default);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            TeamOrderID = TEAM_ORDER;
            this.a = AddUnitPerceptionBubble(TeamOrderID, 10, Attacker, 2, Nothing, Nothing, false);
            this.LeblancVisionBubble = 1;
        });
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_CHAOS, () => {
            TeamChaosID = TEAM_CHAOS;
            this.a = AddUnitPerceptionBubble(TeamChaosID, 10, Attacker, 2, Nothing, Nothing, false);
            this.LeblancVisionBubble = 1;
        });
        RequireVar(this.AEDamage);
        RequireVar(this.SilenceDuration);
        RequireVar(this.BaseCooldown);
        RequireVar(this.CastPosition);
        RequireVar(this.OwnerPos);
        OwnerPos = this.OwnerPos;
        Distance = DistanceBetweenObjectAndPoint(Owner, this.CastPosition);
        If(Distance, default, CO_LESS_THAN, default, 10, () => {
            CastPosition = this.CastPosition;
            CastPosition = GetPointByUnitFacingOffset(Owner, 10, 0);
        });
        Move(Owner, this.CastPosition, 1600, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (this.Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        PlayAnimation("Spell2", 0, Owner, true, false, true);
        SpellEffectCreate(this.b, default, "Leblanc_displacement_blink_target.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.DistortionFx, default, "LeBlanc_Displacement_Yellow_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanMove);
        RequireVar(this.OwnerPos);
        this.doNotTeleport = false;
        OwnerPos = this.OwnerPos;
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "leblancslidereturn");
        CasterID = GetTeamID(default);
        If(CasterID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.YellowIndicator, default, "Leblanc_displacement_blink_indicator.troy", default, TEAM_ORDER, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Owner, default, default, false, default, default, false, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.YellowIndicator, default, "Leblanc_displacement_blink_indicator.troy", default, TEAM_CHAOS, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Owner, default, default, false, default, default, false, default, default, default);
        });
        RequireVar(this.BreakDamage);
        RequireVar(this.BreakStun);
        RequireVar(this.Broken);
        SpellEffectCreate(this.ParticleID, default, "leBlanc_shackle_chain_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "root", default, Owner, "spine", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.SoulShackleIdle, default, "leBlanc_shackle_self_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "C_BUFFBONE_GLB_CENTER_LOC", default, Attacker, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.SoulShackleTarget, default, "leBlanc_shackle_target_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.SoulShackleTarget_blood, default, "leBlanc_shackle_tar_blood.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.LeblancVisionBubble = 0;
        TeamOfOwner = GetTeamID(default);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            TeamOrderID = TEAM_ORDER;
            this.a = AddUnitPerceptionBubble(TeamOrderID, 10, Attacker, 2, Nothing, Nothing, false);
            this.LeblancVisionBubble = 1;
        });
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_CHAOS, () => {
            TeamChaosID = TEAM_CHAOS;
            this.a = AddUnitPerceptionBubble(TeamChaosID, 10, Attacker, 2, Nothing, Nothing, false);
            this.LeblancVisionBubble = 1;
        });
        RequireVar(this.AEDamage);
        RequireVar(this.SilenceDuration);
        RequireVar(this.OwnerPos);
        RequireVar(this.CastPosition);
        OwnerPos = this.OwnerPos;
        Distance = DistanceBetweenObjectAndPoint(Owner, this.CastPosition);
        If(Distance, default, CO_LESS_THAN, default, 10, () => {
            CastPosition = this.CastPosition;
            CastPosition = GetPointByUnitFacingOffset(Owner, 10, 0);
        });
        Move(Owner, this.CastPosition, 1600, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (this.Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        PlayAnimation("Spell2", 0, Owner, true, false, true);
        SpellEffectCreate(this.b, default, "Leblanc_displacement_blink_target_ult.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.DistortionFx, default, "LeBlanc_Displacement_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        RequireVar(this.DrainAmount);
        CharVars.Tally = Math(0 + (this.DrainAmount ?? 0), MO_ADD, 0 + (CharVars.Tally ?? 0));
        IncStat(IncFlatBubbleRadiusMod, Owner, 690);
        RequireVar(this.Sprung);
        If(this.Sprung, default, CO_EQUAL, default, false, () => {
            RequireVar(this.MineDamageAmount);
            SetStatus(Owner, default, SetCanMove);
            SetStatus(Owner, default, SetGhosted);
            SetStatus(Owner, default, SetInvulnerable);
            SetStatus(Owner, default, SetTargetable);
            SetStatus(Owner, default, SetCanAttack);
            this.TeamID = GetTeamID(default);
            this.Active = false;
            this.HomingBeacon = default;
            this.Detonated = false;
            this.SprungCount = 0;
        });
        Pos = GetPointByUnitFacingOffset(Owner, 10, 180);
        FaceDirection(Owner, Pos);
        RequireVar(this.TargetPos);
        RequireVar(this.DefenseBonus);
        RequireVar(this.CCReduction);
        Dist = DistanceBetweenObjects("Attacker", "Owner");
        Dist = Math(225, MO_ADD, 0 + (Dist ?? 0));
        MoveAway(Owner, Attacker, 200, 10, 0 + (Dist ?? 0), 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, FACE_MOVEMENT_DIRECTION);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "MaokaiDrain3Toggle");
        SetSlotSpellCooldownTimeVer2(1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        RequireVar(this.TargetPos);
        RequireVar(this.DefenseBonus);
        RequireVar(this.CCReduction);
        RequireVar(this.ManaCost);
        RequireVar(this.BaseDamage);
        RequireVar(this.BonusCap);
        TargetPos = this.TargetPos;
        TeamOfOwner = GetTeamID(default);
        OwnerSkinID = GetSkinID(Owner);
        SpellEffectCreate(this.Particle, default, "maoki_torrent_cas_01.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
        If(OwnerSkinID, default, CO_EQUAL, default, 3, () => {
            SpellEffectCreate(this.Particle2, this.Particle3, "maoki_torrent_01_teamID_Christmas_green.troy", "maoki_torrent_01_teamID_Christmas_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 300, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle2, this.Particle3, "maoki_torrent_01_teamID_green.troy", "maoki_torrent_01_teamID_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 300, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, false, false, false, false, default, default);
        });
        ForEachUnitInTargetArea(Attacker, TargetPos, 550, "AffectFriends AffectHeroes ", default, true, (Unit) => {
            NextBuffVars.DefenseBonus = this.DefenseBonus;
            NextBuffVars.CCReduction = this.CCReduction;
            NextBuffVars.TargetPos = this.TargetPos;
            SpellBuffAdd(Attacker, Unit, "MaokaiDrain3Defense", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            ApplyAssistMarker(Owner, Unit, 10);
        });
        Caster = SetBuffCasterUnit();
        RequireVar(this.BaseDamage);
        RequireVar(this.RootDuration);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetForceRenderParticles);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        PlayAnimation("Spell2c", 0, Owner, true, true, true);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "maokai_elementalAdvance_mis.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        this.UnitPerceptionBubble = AddUnitPerceptionBubble(TeamOfOwner, 10, Caster, 5, Nothing, Caster, false);
        MoveToUnit(Owner, Caster, 1300, 0, POSTPONE_CURRENT_ORDER, 0, 2000, 0, 0);
        SetStatus(Owner, default, SetCanMove);
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.RootParticleEffect2, default, "maokai_elementalAdvance_root_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.RootParticleEffect, default, "maokai_elementalAdvance_root_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        RequireVar(this.DefensiveBonus);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.DefensiveBonus ?? 0));
        SpellEffectCreate(this.taric, default, "maokai_elementalAdvance_armor.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CENTER_LOC", default, Owner, default, default, false, default, default, default, default, default, default);
        RequireVar(this.Stats);
        OverrideAnimation("Attack", "Passive", Owner);
        OverrideAnimation("Attack2", "Passive", Owner);
        OverrideAnimation("Crit", "Passive", Owner);
        RequireVar(this.DamagePerTick);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetNoRender);
        RequireVar(this.DamagePerTick);
        RequireVar(this.LastPosition);
        RequireVar(this.DamagePerTick);
        RequireVar(this.ManaCost);
        TeamID = GetTeamID(default);
        CurPos = GetPointByUnitFacingOffset(Owner, 25, 180);
        NextBuffVars.DamagePerTick = this.DamagePerTick;
        Other3 = SpawnMinion("AcidTrail", "TestCube", "idle.lua", CurPos, TeamID ?? TEAM_CASTER, true, false, false, true, false, true, 0, false, true, Owner, default);
        SpellBuffAdd(Owner, Other3, "PoisonTrailApplicator", 1, 1, 3.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
        this.LastPosition = CurPos;
        this.HasHitGround = false;
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanCast);
        LandPos = GetPointByUnitFacingOffset(Attacker, 420, 180);
        Move(Owner, LandPos, 1000, 60, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 420, default);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.Duration);
        RequireVar(this.SlowPercent);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        this.InitialTime = GetTime();
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle2, this.Particle, "MegaAdhesive_green_pool.troy", "MegaAdhesive_red_pool.troy", TeamOfOwner ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        RequireVar(this.SlowPercent);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.Duration);
        RequireVar(this.SlowPercent);
        Count = GetBuffCountFromCaster(Owner, Nothing, "MaokaiSapMagicHot");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 5, () => {
            SpellBuffAdd(Owner, Owner, "MaokaiSapMagicMelee", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffRemoveStacks(Owner, Owner, "MaokaiSapMagicHot", 0);
        });
        this.HealAmount = 0;
        this.TempMana = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        RequireVar(this.BonusAP);
        RequireVar(this.MaxBonus);
        RequireVar(this.StunDuration);
        RequireVar(this.TargetPos);
        TargetPos = this.TargetPos;
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        Speed = GetStat(GetMovementSpeed, Owner);
        PlusBonus = Math(0 + (Speed ?? 0), MO_MULTIPLY, 0.15);
        PlusBonus = Math(0 + (PlusBonus ?? 0), MO_ADD, 5);
        UpperBound = Math(350, MO_ADD, 0 + (PlusBonus ?? 0));
        LowerBound = Math(350, MO_SUBTRACT, 0 + (PlusBonus ?? 0));
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, LowerBound, default, () => {
            If(Distance, default, CO_LESS_THAN_OR_EQUAL, UpperBound, default, () => {
                SpellBuffAdd(Attacker, Owner, "VeigarEventHorizonPrevent", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
                BreakSpellShields(Owner);
                ApplyStun(Attacker, Owner, 0 + (this.StunDuration ?? 0));
                SpellBuffRemove(Owner, "VeigarEventHorizonMarker", Attacker, default);
            });
        });
        RequireVar(this.StunDuration);
        RequireVar(this.TargetPos);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        TeamOfOwner = GetTeamID(default);
        TargetPos = this.TargetPos;
        NextBuffVars.StunDuration = this.StunDuration;
        NextBuffVars.TargetPos = this.TargetPos;
        ForEachUnitInTargetArea(Attacker, TargetPos, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "VeigarEventHorizonMarker", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        });
        VeigarSkinID = GetSkinID(Attacker);
        If(VeigarSkinID, default, CO_EQUAL, default, 4, () => {
            SpellEffectCreate(this.Particle2, this.Particle, "permission_desecrate_green_cas_leprechaun.troy", "permission_desecrate_red_cas_leprechaun.troy", TeamOfOwner ?? TEAM_UNKNOWN, 900, 0, TEAM_ORDER, Nothing, false, Nothing, default, TargetPos, Nothing, default, this.TargetPos, false, false, false, false, false, default, default);
        });
        If(VeigarSkinID, default, CO_EQUAL, default, 6, () => {
            SpellEffectCreate(this.Particle2, this.Particle, "permission_desecrate_green_cas_daper.troy", "permission_desecrate_red_cas_daper.troy", TeamOfOwner ?? TEAM_UNKNOWN, 900, 0, TEAM_ORDER, Nothing, false, Nothing, default, TargetPos, Nothing, default, this.TargetPos, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle2, this.Particle, "permission_desecrate_green_cas.troy", "permission_desecrate_red_cas.troy", TeamOfOwner ?? TEAM_UNKNOWN, 900, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, this.TargetPos, Nothing, default, this.TargetPos, false, false, false, false, false, default, default);
        });
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(a, default, "permission_dark_matter_cas.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(a, default, "permission_dark_matter_cas.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        });
        RequireVar(this.DamageAmount);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        MonkTotalDamage = GetTotalAttackDamage(Owner);
        MonkTotalDamage = Math(0 + (MonkTotalDamage ?? 0), MO_MULTIPLY, 0 + (CharVars.FlurryScalar ?? 0));
        ForEachUnitInTargetAreaRandom(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectBuildings AffectMinions AffectHeroes AffectTurrets ", default, default, 1, (Unit) => {
            If(Unit, default, CO_IS_TYPE_AI, default, default, () => {
                SpellEffectCreate(Dummy_Effect, default, "GlobalHit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, default, default, default, default);
            });
            ApplyDamage(Attacker, Unit, 0 + (MonkTotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, default, default, default, default);
        });
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetNoRender);
        RequireVar(CharVars.BubbleRadius);
        TeamID = GetTeamID(default);
        this.ThisBubble = AddUnitPerceptionBubble(TeamID, 0 + (CharVars.BubbleRadius ?? 0), Owner, 9999, Owner, Nothing, true);
        TeamID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(TeamID, 400, Owner, 20, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(TeamID, 50, Owner, 20, Nothing, Nothing, true);
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(hit1, default, "blindMonk_Q_resonatingStrike_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(blood, default, "blindMonk_Q_resonatingStrike_tar_blood.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(this.slow, default, "blindMonk_Q_tar_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        RequireVar(this.TargetPos);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        OwnerPos = GetUnitPosition(Owner);
        TargetPos = this.TargetPos;
        SpellCast(Owner, Attacker, TargetPos, TargetPos, true, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, false, OwnerPos);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        RequireVar(this.SecondaryDamage);
        RequireVar(this.TarPos);
        TarPos = this.TarPos;
        Move(Target, TarPos, 1000, 5, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 800, FACE_MOVEMENT_DIRECTION);
        SetStatus(Owner, default, SetCanMove);
        TeamID = GetTeamID(default);
        SpellEffectCreate(PH, default, "blindMonk_Q_resonatingStrike_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(PH, default, "blindMonk_Q_resonatingStrike_tar_blood.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(PH, default, "blindmonk_resonatingstrike_tar_sound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, default, default, false, default, default, default);
        SetStatus(Owner, default, SetGhosted);
        RequireVar(this.dashSpeed);
        RequireVar(this.TargetPos);
        RequireVar(this.Distance);
        RequireVar(this.DamageVar);
        TargetPos = this.TargetPos;
        Distance = DistanceBetweenObjects("Attacker", "Owner");
        MoveToUnit(Owner, Attacker, 0 + (this.dashSpeed ?? 0), 0, CANCEL_ORDER, 0, 2000, 0 + (Distance ?? 0), 0);
        SpellEffectCreate(this.SelfParticle, default, "blindMonk_Q_resonatingStrike_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        PlayAnimation("Spell1b", 0, Owner, true, false, true);
        this.WillRemove = false;
        SetStatus(Owner, default, SetGhosted);
        BouncePos = GetRandomPointInAreaUnit(Owner, 100, 100);
        Move(Owner, BouncePos, 100, 10, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, FACE_MOVEMENT_DIRECTION);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        TeamID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(TeamID, 400, Owner, 20, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(TeamID, 50, Owner, 20, Nothing, Nothing, true);
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(hit1, default, "blindMonk_Q_resonatingStrike_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(blood, default, "blindMonk_Q_resonatingStrike_tar_blood.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.slow, default, "blindMonk_Q_tar_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "BlindMonkQTwo");
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        IfNotHasBuff(Attacker, Owner, "BlindMonkQOne", () => {
            IfNotHasBuff(Attacker, Owner, "BlindMonkQOneChaos", () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "BlindMonkETwo");
        SetSlotSpellCooldownTimeVer2(0.1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        RequireVar(this.TotalArmor);
        RequireVar(this.LifestealPercent);
        SpellEffectCreate(this.turntostone, default, "blindMonk_W_ironWill_armor.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.TotalArmor ?? 0));
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.LifestealPercent ?? 0));
        IncStat(IncPercentSpellVampMod, Owner, 0 + (this.LifestealPercent ?? 0));
        SetStatus(Owner, default, SetGhosted);
        RequireVar(this.ShieldAbsorb);
        SetBuffToolTipVar(1, 0 + (this.ShieldAbsorb ?? 0));
        ApplyAssistMarker(Attacker, Owner, 10);
        IncreaseShield(Owner, 0 + (this.ShieldAbsorb ?? 0), true, true);
        RequireVar(this.MoveSpeedMod);
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 400, Owner, 20, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(Team, 50, Owner, 20, Nothing, Nothing, true);
        ApplyAssistMarker(Attacker, Owner, 10);
        Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "BlindMonkWTwo");
        SetSlotSpellCooldownTimeVer2(0, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
        RequireVar(this.PercentReduction);
        this.InitialPercentReduction = this.PercentReduction;
        ApplyAssistMarker(Attacker, Owner, 10);
        this.Count = 0;
        RequireVar(this.dashSpeed);
        RequireVar(this.TargetPos);
        RequireVar(this.Distance);
        RequireVar(this.ShieldAbsorb);
        TargetPos = this.TargetPos;
        Move(Owner, TargetPos, 0 + (this.dashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (this.Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.SelfParticle, default, "blindMonk_W_self_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        PlayAnimation("Spell2", 0, Owner, true, false, true);
        this.WillRemove = false;
        SetStatus(Owner, default, SetGhosted);
        PlayAnimation("Spell2b", 0, Owner, false, false, false);
        IncStat(IncPercentAttackSpeedMod, Owner, 0.5);
        this.TotalHits = 2;
        this.lastTooltip = 0;
        RequireVar(this.LifeStealAmount);
        Count = GetBuffCountFromAll(Owner, "EternalThirst");
        LifeStealToHeal = Math(0 + (this.LifeStealAmount ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
        IncHealth(Attacker, 0 + (LifeStealToHeal ?? 0), Attacker);
        SpellEffectCreate(default, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, default, default, default, default);
        RequireVar(this.hitsRemaining);
        RequireVar(this.damagePerTick);
        SpellEffectCreate(arr, default, "InfiniteDuress_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        RequireVar(this.LifestealBonus);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        TeamID = GetTeamID(default);
        RequireVar(this.MoveSpeedBuff);
        SpellEffectCreate(this.Part1, default, "wolfman_bloodscent_activate_speed.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Part3, default, "wolfman_bloodscent_activate_blood_buff.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Part2, default, "wolfman_bloodscent_activate_blood_buff.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Part4, default, "wolfman_bloodscent_activate_blood_buff_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, false, false, false, false, default, default);
        OwnerSkinID = GetSkinID(Owner);
        If(OwnerSkinID, default, CO_EQUAL, default, 7, () => {
            OverrideAnimation("Run", "Run2", Owner);
        });
        CasterID = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "wolfman_bloodscent_marker.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, default, default, default, default);
        this.BubbleStuff = AddUnitPerceptionBubble(CasterID, 1000, Owner, 120, Nothing, Nothing, false);
        RequireVar(this.movementSpeedMod);
        RequireVar(this.AttackSpeedVar);
        RequireVar(this.AttackSpeedOther);
        ApplyAssistMarker(Attacker, Owner, 10);
        CharVars.CommandBonus = Math(0 + (CharVars.CommandBonus ?? 0), MO_ADD, 1);
        TooltipBonus = Math(0 + (CharVars.CommandBonus ?? 0), MO_DIVIDE, 2);
        SetBuffToolTipVar(1, 0 + (TooltipBonus ?? 0));
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, 471, 0);
        Beam2 = GetPointByUnitFacingOffset(Owner, 942, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 1413, 0);
        Other1 = SpawnMinion("hiu", "TestCube", "idle.lua", Beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, false, Owner, default);
        Other2 = SpawnMinion("hiu", "TestCube", "idle.lua", Beam2, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, false, Owner, default);
        Other3 = SpawnMinion("hiu", "TestCube", "idle.lua", Beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, false, Owner, default);
        LinkVisibility(Other1, Attacker);
        LinkVisibility(Other2, Attacker);
        LinkVisibility(Other3, Attacker);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        TeamOfOwner = GetTeamID(default);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            TeamChaosID = TEAM_CHAOS;
            this.a = AddUnitPerceptionBubble(TeamChaosID, 10, Owner, 2, Nothing, Nothing, false);
            this.b = AddUnitPerceptionBubble(TeamChaosID, 10, Attacker, 2, Nothing, Nothing, false);
        });
        Else(() => {
            TeamOrderID = TEAM_ORDER;
            this.a = AddUnitPerceptionBubble(TeamOrderID, 10, Owner, 2, Nothing, Nothing, false);
            this.b = AddUnitPerceptionBubble(TeamOrderID, 10, Attacker, 2, Nothing, Nothing, false);
        });
        Beam1 = GetPointByUnitFacingOffset(Owner, 550, 0);
        Beam2 = GetPointByUnitFacingOffset(Owner, 1650, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 2750, 0);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Attacker, default, SetForceRenderParticles);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.ParticleID, default, "LuxMaliceCannon_beam.troy", default, TEAM_ORDER, 10, 0, TEAM_ORDER, Owner, false, Owner, "top", default, Attacker, "top", default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.ParticleID2, default, "LuxMaliceCannon_beam.troy", default, TEAM_CHAOS, 10, 0, TEAM_CHAOS, Owner, false, Owner, "top", default, Attacker, "top", default, false, default, default, default, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.ParticleID, default, "LuxMaliceCannon_beam.troy", default, TEAM_CHAOS, 10, 0, TEAM_CHAOS, Owner, false, Owner, "top", default, Attacker, "top", default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.ParticleID2, default, "LuxMaliceCannon_beam.troy", default, TEAM_ORDER, 10, 0, TEAM_ORDER, Owner, false, Owner, "top", default, Attacker, "top", default, false, default, default, default, default, default, default);
        });
        SpellEffectCreate(this.particle2, default, "Lux_death.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, "C_BUFFBONE_GLB_CENTER_LOC", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle, default, "LuxMaliceCannon_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "top", default, Target, default, default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, 1884, 0);
        Beam2 = GetPointByUnitFacingOffset(Owner, 2826, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 2475, 0);
        Other1 = SpawnMinion("hiu", "TestCube", "idle.lua", Beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, false, Owner, default);
        Other2 = SpawnMinion("hiu", "TestCube", "idle.lua", Beam2, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, false, Owner, default);
        Other3 = SpawnMinion("hiu", "TestCube", "idle.lua", Beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, false, Owner, default);
        LinkVisibility(Other1, Attacker);
        LinkVisibility(Other2, Attacker);
        LinkVisibility(Other3, Attacker);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellEffectCreate(this.particle1, default, "Luxdeathparticle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", Owner, Target, default, default, false, default, default, default, default, default, default);
        RequireVar(this.TargetPos);
        RequireVar(this.DamageRank);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetNoRender);
        this._1ce = 0;
        TargetPos = CharVars.TargetPos;
        TeamOfOwner = GetTeamID(default);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.NewName, default, "pantheon_grandskyfall_tar_red.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 500, 0, TEAM_CHAOS, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.NewName, default, "pantheon_grandskyfall_tar_red.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 500, 0, TEAM_ORDER, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, default, default, false, false, default, default);
        });
        RequireVar(this.TargetPos);
        RequireVar(this.Particle);
        TargetPos = this.TargetPos;
        TeamOfOwner = GetTeamID(default);
        this.BubbleID = AddPosPerceptionBubble(TeamOfOwner, 700, TargetPos, 6, Nothing, false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Part, a, "pantheon_grandskyfall_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, default, default, false, false, default, default);
        TargetPos = CharVars.TargetPos;
        SpellBuffAdd(Owner, Owner, "Pantheon_GS_Particle", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        TeamOfOwner = GetTeamID(default);
        TargetPos = CharVars.TargetPos;
        SpellEffectCreate(this.NewName, default, "pantheon_grandskyfall_tar_green.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle1, default, "pantheon_heartseeker_cas2.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_BUFFBONE_GLB_HAND_LOC", default, Target, default, default, false, default, default, false, true, default, default);
        SpellEffectCreate(this.KIRHand, default, "garen_damacianJustice_cas_instant.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.KIRHand, default, "garen_damacianJustice_cas_sword.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Target, default, default, false, default, default, false, false, default, default);
        RequireVar(this.CastPosition);
        RequireVar(this.sourcePosition);
        this.ticksRemaining = 2;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CastPosition = this.CastPosition;
        sourcePosition = this.sourcePosition;
        SpellCast(Owner, Nothing, CastPosition, CastPosition, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, sourcePosition);
        RequireVar(this.DamageLvl);
        RequireVar(this.stunLength);
        RequireVar(this.DamageIncrease);
        RequireVar(this.AbilityPower);
        If(Owner, default, CO_IS_NOT_HERO, default, default, () => {
            this.DamageIncrease = Math(0 + (this.DamageIncrease ?? 0), MO_DIVIDE, 3);
            this.AbilityPower = 0;
        });
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            TeamOfOwner = GetTeamID(default);
            SpellEffectCreate(this.Particl3, default, "Taric_GemStorm_Aura.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        });
        SpellEffectCreate(this.Particle, default, "Taric_HammerInternal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "weapon", default, Owner, default, default, false, false, false, false, false, default, default);
        RequireVar(this.DamageIncrease);
        RequireVar(this.AbilityPower);
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.DamageIncrease ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.AbilityPower ?? 0));
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "taricgemstorm.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        DamageIncrease = Math(0 + (this.DamageIncrease ?? 0), MO_MULTIPLY, 0.5);
        NextBuffVars.DamageIncrease = DamageIncrease;
        AbilityPower = Math(0 + (this.AbilityPower ?? 0), MO_MULTIPLY, 0.5);
        NextBuffVars.AbilityPower = AbilityPower;
        ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", default, true, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "RadianceAura", 1, 1, 1.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            ApplyAssistMarker(Attacker, Unit, 10);
        });
        this.damageThreshold = 40;
        OverrideAnimation("Run", "Run2", Owner);
        RequireVar(this.executeOnce);
        If(this.executeOnce, default, CO_EQUAL, default, false, () => {
            isMoving = GetStatus(Owner, IsMoving);
            If(isMoving, default, CO_EQUAL, default, true, () => {
                this.executeOnce = true;
                OverrideAnimation("Run", "Run2", Owner);
            });
        });
        RequireVar(this.Position);
        RequireVar(this.Level);
        RequireVar(this.LSCooldown);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "LuxLightstrikeToggle");
        TeamOfOwner = GetTeamID(default);
        Position = this.Position;
        SpellEffectCreate(this.Particle, default, "LuxLightstrike_mis.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 400, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, Position, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle1, this.Particle2, "LuxLightstrike_tar_green.troy", "LuxLightstrike_tar_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 400, 0, TEAM_UNKNOWN, Nothing, false, Nothing, "top", Position, Target, default, default, false, false, false, false, false, default, default);
        SealSpellSlot(2, SpellSlots, Attacker, false, SPELLBOOK_CHAMPION);
        this.BubbleID = AddPosPerceptionBubble(TeamOfOwner, 650, Position, 6, Nothing, false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Geeves1, default, "garen_descisiveStrike_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_2", default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.Geeves2, default, "garen_descisiveStrike_indicator_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_2", default, Owner, default, default, true, false, false, false, false, default, default);
        RequireVar(this.SpellCooldown);
        RequireVar(this.BonusDamage);
        RequireVar(this.SilenceDuration);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CancelAutoAttack(Owner, true);
        RequireVar(this.LSCooldown);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "LuxLightstrikeToggle");
        RequireVar(this.DamageBlock);
        ApplyAssistMarker(Attacker, Owner, 10);
        IncreaseShield(Owner, 0 + (this.DamageBlock ?? 0), true, true);
        DebugSay(Owner, "Slash Buff On", default);
        RequireVar(this.SpeedMod);
        TeamID = GetTeamID(default);
        RequireVar(this.WillRemove);
        SpellEffectCreate(this.AkaliStealth, default, "akali_twilight_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        ID = PushCharacterFade(Owner, 0.2, default, ID);
        SetStatus(Owner, default, SetStealthed);
        SetStatus(Owner, default, SetGhosted);
        this.WillRemove = false;
        ApplyAssistMarker(Attacker, Owner, 10);
        this.AegisCounter = 0;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        this.CooldownBonus = this.VALUE_BY_LEVEL;
        OverrideAnimation("Run", "Spell3", Owner);
        SpellEffectCreate(this.Particle2, default, "garen_bladeStorm_cas_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID, default, "garen_weapon_glow_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, "BUFFBONE_WEAPON_3", default, false, false, false, false, false, default, default);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        RequireVar(this.SpellCooldown);
        RequireVar(this.baseDamage);
        RequireVar(this.DamageBlock);
        IncreaseShield(Owner, 0 + (this.DamageBlock ?? 0), true, true);
        SpellEffectCreate(this.Part, default, "garen_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        CharVars.HPGain = Math(0 + (CharVars.HPGain ?? 0), MO_ADD, 0 + (this.HPGain ?? 0));
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        RequireVar(this.DamageReduction);
        IncStat(IncPercentMagicReduction, Owner, 0 + (this.DamageReduction ?? 0));
        SpellEffectCreate(this.Particle, default, "garen_commandingPresence_unit_buf_self.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", default, Owner, default, default, true, default, default, false, false, default, default);
        SetBuffToolTipVar(1, 0 + (this.TotalArmorAmount ?? 0));
        IncStat(IncPercentPhysicalReduction, Owner, 0 + (this.DamageReduction ?? 0));
        RequireVar(this.BonusArmor);
        RequireVar(this.BonusMR);
        RequireVar(this.MaxBonus);
        RequireVar(this.DamageReduction);
        IncStat(IncPercentPhysicalReduction, Owner, 0 + (this.DamageReduction ?? 0));
        IncStat(IncPercentMagicReduction, Owner, 0 + (this.DamageReduction ?? 0));
        SpellEffectCreate(this.Particle, default, "garen_commandingPresence_unit_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SetBuffToolTipVar(1, 0 + (this.TotalArmorAmount ?? 0));
        SpellBuffRemove(Owner, "GarenRecouperate1", Owner, 0);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Part, default, "garen_heal.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        SpellBuffRemove(Owner, "GarenRecouperateOn", Owner, 0);
        TeamID = GetTeamID(default);
        RequireVar(this.ArmorReduction);
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(shatterz, default, "Shatter_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(shatterz, default, "BloodSlash.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.taric, default, "ShatterReady_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        RequireVar(this.APHealthAdded);
        RequireVar(this.AttackHealthAdded);
        this.AttackTotal = GetStat(GetFlatPhysicalDamageMod, Owner);
        this.APTotal = GetStat(GetFlatMagicDamageMod, Owner);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "armsmaster_empower_self_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Owner, "weapon", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle, default, "armsmaster_empower_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Owner, default, default, false, false, false, false, false, default, default);
        RequireVar(this.SpellCooldown);
        RequireVar(this.BonusDamage);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        SealSpellSlot(1, SpellSlots, Owner, true, default);
        IfHasBuff(Owner, Owner, "RelentlessAssaultMarker", () => {
            
        });
        Else(() => {
            OverrideAutoAttack(1, ExtraSlots, Owner, 1, false);
        });
        SpellEffectCreate(this.Particle, default, "Empower_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "weaponstreak", default, Owner, default, default, false, default, default, false, default, default, default);
        RequireVar(this.DamagePerStack);
        RequireVar(this.DamageAdded);
        this.WeaponDamage = GetStat(GetFlatPhysicalDamageMod, Owner);
        SetStatus(Owner, default, SetCanAttack);
        TeamID = GetTeamID(default);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(Cooldown, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            SpellEffectCreate(this.RemoveMe2, default, "CounterStrike_ready.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            this.CooledDown = true;
        });
        Else(() => {
            SpellEffectCreate(this.RemoveMe, default, "CounterStrike_dodged.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            this.CooledDown = false;
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        OverrideAutoAttack(2, ExtraSlots, Owner, 0 + (Level ?? 0), false);
        this.IsActive = false;
        RequireVar(this.DamageAmount);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "Crowstorm_green_cas.troy", "Crowstorm_red_cas.troy", TeamOfOwner ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, -10);
        SpellEffectCreate(default, default, "ConsecrationAura_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        RequireVar(this.HealthPlusAbility);
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(default, default, "LifeAura.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        CurrentCooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        CurrentCooldown2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCooldown, default, CO_LESS_THAN_OR_EQUAL, default, 6, () => {
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 3);
        });
        If(CurrentCooldown2, default, CO_LESS_THAN_OR_EQUAL, default, 6, () => {
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 3);
        });
        PlayAnimation("Death", 4, Owner, false, false, true);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_CombatEnchancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Shred);
        TeamID = GetTeamID(default);
        SpellEffectCreate(PH, default, "akali_shadowDance_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(PH2, default, "irelia_gotasu_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        RequireVar(this.HealthPlusAbility);
        RequireVar(this.WillRemove);
        SpellEffectCreate(this.asdf, default, "nickoftime_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        RequireVar(this.DamageLevel);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.ParticleID2, this.ParticleID, "TimeBomb_green.troy", "TimeBomb_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        this.TickDamage = 3;
        RequireVar(this.dashSpeed);
        RequireVar(this.TargetPos);
        RequireVar(this.Distance);
        TargetPos = this.TargetPos;
        PlayAnimation("Spell4", 0, Owner, true, false, true);
        Move(Owner, TargetPos, 0 + (this.dashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (this.Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.SelfParticle, default, "Ahri_SpiritRush_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_GROUND_LOC", default, Target, "BUFFBONE_GLB_GROUND_LOC", default, false, false, false, false, false, default, default);
        this.WillRemove = false;
        SetStatus(Owner, default, SetGhosted);
        SetSlotSpellCooldownTimeVer2(0, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.activations = 1;
        RequireVar(this.TickDamage);
        RequireVar(this.SpeedMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.OrbofDeceptionIsActive);
        TeamID = GetTeamID(default);
        If(this.OrbofDeceptionIsActive, default, CO_EQUAL, default, 1, () => {
            SpellEffectCreate(ar, default, "Ahri_PassiveHeal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, false, false, false, false, default, default);
            NextBuffVars.DrainPercent = 0.1166;
            NextBuffVars.DrainedBool = false;
            SpellBuffAdd(Attacker, Attacker, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellEffectCreate(PH, default, "Ahri_Orb_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(PH, default, "Ahri_passive_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, false, false, false, false, default, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            ApplyDamage(Attacker, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.325, 0, false, false, Attacker);
            SpellBuffRemoveStacks(Attacker, Attacker, "AhriSoulCrusher", 1);
        });
        Else(() => {
            IfHasBuff(Attacker, Attacker, "AhriSoulCrusher", () => {
                
            });
            Else(() => {
                SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusher5", 4, 1, 2, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                Count = GetBuffCountFromAll(Attacker, "AhriSoulCrusher5");
                If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 3, () => {
                    SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusherCounter", 9, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
                });
            });
            SpellEffectCreate(PH, default, "Ahri_Orb_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, false, false, false, false, default, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            ApplyDamage(Attacker, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.325, 0, false, false, Attacker);
        });
        RequireVar(this.SpeedMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        SetStatus(Owner, default, SetCanAttack);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.SlowPercent);
        SetStatus(Owner, default, SetCanAttack);
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(this.Particle1, default, "Ahri_Charm_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, "head", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "Ahri_Charm_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, "l_hand", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle3, default, "Ahri_Charm_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, "r_hand", default, Owner, default, default, false, false, false, false, false, default, default);
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            IssueOrder(Owner, AI_MOVETO, default, Attacker);
        });
        RequireVar(this.OrbofDeceptionIsActive);
        TeamID = GetTeamID(default);
        If(this.OrbofDeceptionIsActive, default, CO_EQUAL, default, 1, () => {
            SpellEffectCreate(ar, default, "Ahri_PassiveHeal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, false, false, false, false, default, default);
            NextBuffVars.DrainPercent = 0.1166;
            NextBuffVars.DrainedBool = false;
            SpellBuffAdd(Attacker, Attacker, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellEffectCreate(PH, default, "Ahri_Orb_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(PH, default, "Ahri_passive_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, false, false, false, false, default, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            ApplyDamage(Attacker, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), TRUE_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.325, 0, false, false, Attacker);
            SpellBuffRemoveStacks(Attacker, Attacker, "AhriSoulCrusher", 1);
        });
        Else(() => {
            IfHasBuff(Attacker, Attacker, "AhriSoulCrusher", () => {
                
            });
            Else(() => {
                SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusher5", 4, 1, 2, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                Count = GetBuffCountFromAll(Attacker, "AhriSoulCrusher5");
                If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 3, () => {
                    SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusherCounter", 9, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
                });
            });
            SpellEffectCreate(PH, default, "Ahri_Orb_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, false, false, false, false, default, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            ApplyDamage(Attacker, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), TRUE_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.325, 0, false, false, Attacker);
        });
        Count = GetBuffCountFromCaster(Owner, Owner, "AhriSoulCrusherCounter");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 9, () => {
            SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusher", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffRemoveStacks(Owner, Owner, "AhriSoulCrusherCounter", 0);
            SpellBuffRemove(Owner, "AhriIdleParticle", Owner, 0);
        });
        SpellBuffAdd(Owner, Owner, "AhriPassiveParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(this.Particle1, default, "Ahri_Orb.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, default, default, false, false, false, false, false, default, default);
        SetStatus(Owner, default, SetSilenced);
        ApplyAssistMarker(Attacker, Owner, 10);
        this.ParticleAlive = false;
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            TeamID = GetTeamID(default);
            SpellEffectCreate(this.Particle1, default, "Ahri_Passive.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, default, default, false, false, false, false, false, default, default);
            this.ParticleAlive = true;
        });
        RequireVar(this.DamageBlock);
        RequireVar(this.MSBonus);
        RequireVar(this.ASBonus);
        IncreaseShield(Owner, 0 + (this.DamageBlock ?? 0), true, true);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MSBonus ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.ASBonus ?? 0));
        OwnerTeamID = GetTeamID(default);
        SetStatus(Attacker, default, SetCanAttack);
        SetStatus(Owner, default, SetStunned);
        SetStatus(Owner, default, SetSuppressed);
        PauseAnimation(Owner, true);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            SealSpellSlot(2, SpellSlots, Attacker, true, SPELLBOOK_CHAMPION);
        });
        FlashCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Attacker, GetSlotSpellName);
        If(FlashCheck, default, CO_EQUAL, default, "SummonerFlash", () => {
            SealSpellSlot(0, SpellSlots, Attacker, true, SPELLBOOK_SUMMONER);
        });
        FlashCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Attacker, GetSlotSpellName);
        If(FlashCheck, default, CO_EQUAL, default, "SummonerFlash", () => {
            SealSpellSlot(1, SpellSlots, Attacker, true, SPELLBOOK_SUMMONER);
        });
        OverrideAnimation("Run", "Spell4_Backstep", Attacker);
        OverrideAnimation("Idle1", "Spell4_Idleback", Attacker);
        OverrideAnimation("Idle2", "Spell4_Idleback", Attacker);
        OverrideAnimation("Idle3", "Spell4_Idleback", Attacker);
        OverrideAnimation("Idle4", "Spell4_Idleback", Attacker);
        OverrideAnimation("Spell2", "spell4_W", Attacker);
        OverrideAnimation("Spell1", "spell4_Q", Attacker);
        this.NumHitsRemaining = 4;
        SpellEffectCreate(this.ChainPartID, default, "skarner_ult_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, false, Owner, "spine", default, Attacker, "tail_t", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ZParticle, default, "skarner_ult_tail_tip.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "tail_t", default, Attacker, "Bird_head", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.CParticle, default, "skarner_ult_tar_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, false, Owner, "spine", default, Attacker, "Bird_head", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.crystalineParticle, default, "skarner_ult_tar_04.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, false, Owner, "spine", default, Attacker, "Bird_head", default, false, false, false, false, false, default, default);
        this.VictimBubble = AddUnitPerceptionBubble(OwnerTeamID, 10, Owner, 2, Nothing, Owner, true);
        RequireVar(this.HealthRegen);
        SpellEffectCreate(this.SandSwirl, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        IfHasBuff(Owner, Owner, "UnstoppableForceStun", () => {
            
        });
        Else(() => {
            RequireVar(this.Level);
            Level = this.Level;
            Distance = DistanceBetweenObjects("Attacker", "Owner");
            LandingPos = GetRandomPointInAreaUnit(Owner, 310, 300);
            DistanceTwo = DistanceBetweenObjectAndPoint(Attacker, LandingPos);
            Move(Owner, LandingPos, 1000, 35, 0, default, default, default, default);
            ApplyDamage(Attacker, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 1, default, default, default, default);
        });
        TeamID = GetTeamID(default);
        RequireVar(this.WillMove);
        RequireVar(this.TargetPos);
        RequireVar(this.Damage);
        RequireVar(this.StunDuration);
        TargetPos = this.TargetPos;
        Move(Owner, TargetPos, 0 + (this.SlashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, default);
        PlayAnimation("Spell4", 0, Owner, true, false, default);
        SpellEffectCreate(this.SelfParticle, default, "UnstoppableForce_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        Attacker = SetBuffCasterUnit();
        TeamID = GetTeamID(default);
        SpellEffectCreate(TargetParticle, default, "UnstoppableForce_stun.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        Position = GetRandomPointInAreaUnit(Owner, 125, 75);
        Move(Owner, Position, 100, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, default);
        SetStatus(Owner, default, SetStunned);
        ApplyAssistMarker(Attacker, Owner, 10);
        FlashCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(FlashCheck, default, CO_EQUAL, default, "SummonerFlash", () => {
            SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        });
        FlashCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(FlashCheck, default, CO_EQUAL, default, "SummonerFlash", () => {
            SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.FrostTurrets, default, "heimerdinger_slowAura_self.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        this.willPop = false;
        IfHasBuff(Owner, Attacker, "H28GEvolutionTurret", () => {
            this.willPop = true;
            this.RedShift = PushCharacterData("HeimerTBlue", Owner, true);
        });
        IfNotHasBuff(Owner, Nothing, "H28GEvolutionTurretSpell1", () => {
            IfNotHasBuff(Owner, Nothing, "H28GEvolutionTurretSpell2", () => {
                ForNClosestUnitsInTargetArea(Attacker, Owner, 425, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
                    SpellBuffClear(Owner, "H28GEvolutionTurretSpell3");
                    CancelAutoAttack(Owner, true);
                    SpellBuffAdd(Unit, Owner, "H28GEvolutionTurretSpell2", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        this.CooldownBonus = this.VALUE_BY_LEVEL;
        CancelAutoAttack(Owner, true);
        TeamID = GetTeamID(default);
        RequireVar(this.BonusDamage);
        RequireVar(this.BonusHealth);
        RequireVar(this.BonusArmor);
        RequireVar(this.BonusStats);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectCreate(poofin, default, "heimerdinger_turret_birth.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        ForNClosestUnitsInTargetArea(Attacker, Owner, 425, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectTurrets ", 1, true, default, (Unit) => {
            If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                SpellBuffAdd(Unit, Owner, "H28GEvolutionTurretSpell2", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            Else(() => {
                SpellBuffAdd(Unit, Owner, "H28GEvolutionTurretSpell3", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        RequireVar(this.MordekaiserParticle);
        Pos = GetRandomPointInAreaUnit(Owner, 400, 200);
        Other1 = CloneUnitPet(Attacker, "MordekaiserCOTGPetBuff", 0, Pos, 0, 0, false);
        RequireVar(this.Level);
        SpellEffectCreate(this.SSSlow, default, "Global_Slow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        this.Value = GetStat(GetMovementSpeed, Owner);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.BaseDamage);
        ApplyDamage(Owner, Attacker, 0 + (this.BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
        RequireVar(this.PetDamage);
        RequireVar(this.PetAP);
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Attacker, 0 + (this.PetDamage ?? 0));
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Attacker, 0 + (this.PetAP ?? 0));
        SetBuffToolTipVar(1, 0 + (this.PetDamage ?? 0));
        SetBuffToolTipVar(2, 0 + (this.PetAP ?? 0));
        this.Count = 0;
        If(Attacker, default, CO_NOT_EQUAL, Owner, default, () => {
            RequireVar(this.DamageToDeal);
            ApplyDamage(Owner, Attacker, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "mordekeiser_cotg_skin.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "mordekaiser_cotg_ring.troy", default, TeamID ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellBuffRemoveType(Owner, BUFF_CombatEnchancer);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Shred);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetGhosted);
        PetDamage = GetTotalAttackDamage(Owner);
        PetDamage = Math(0.2, MO_MULTIPLY, 0 + (PetDamage ?? 0));
        PetAP = GetStat(GetFlatMagicDamageMod, Owner);
        PetAP = Math(0.2, MO_MULTIPLY, 0 + (PetAP ?? 0));
        NextBuffVars.PetDamage = PetDamage;
        NextBuffVars.PetAP = PetAP;
        SpellBuffAdd(Attacker, Attacker, "MordekaiserCOTGSelf", 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "MordekaiserCOTGPetBuff", 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "LeblancPassive", () => {
            SpellBuffRemove(Owner, "LeblancPassive", Owner, 0);
        });
        this.lastAttackTime = GetGameTime();
        ApplyTaunt(Attacker, Owner, 250);
        this.retaunts = 0;
        RequireVar(this.LifestealPercent);
        MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        this.DamageToDeal = Math(0 + (MaxHealth ?? 0), MO_MULTIPLY, 0 + (this.LifestealPercent ?? 0));
        SpellEffectCreate(this.MordekaiserParticle, default, "mordekeiser_cotg_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        this.removeParticle = true;
        RequireVar(this.DamageToDeal);
        this.DoOnce = false;
        ApplyDamage(Owner, Attacker, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0, 1, false, false, Attacker);
        this.lastAttackTime = GetGameTime();
        ApplyTaunt(Attacker, Owner, 25);
        this.retaunts = 0;
        ApplyTaunt(Attacker, Owner, 25000);
        ApplyDamage(Owner, Attacker, 0, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Owner);
        this.lastAttackTime = GetGameTime();
        this.retaunts = 0;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        StatMultiplier = this.VALUE_BY_LEVEL;
        MordDmg = GetTotalAttackDamage(Attacker);
        MordAP = GetStat(GetFlatMagicDamageMod, Attacker);
        this.MordAP = Math(0 + (StatMultiplier ?? 0), MO_MULTIPLY, 0 + (MordAP ?? 0));
        this.MordDmg = Math(0 + (StatMultiplier ?? 0), MO_MULTIPLY, 0 + (MordDmg ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (this.MordDmg ?? 0));
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, 0 + (this.MordAP ?? 0));
        MordHealth = GetPAROrHealth(Attacker, GetMaxHealth, PAR_SHIELD);
        PetHealth = Math(0.15, MO_MULTIPLY, 0 + (MordHealth ?? 0));
        IfHasBuff(Owner, Attacker, "MordekaiserCOTGPetBuff2", () => {
            IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (PetHealth ?? 0));
        });
        RequireVar(this.DamagePerTick);
        TeamID = GetTeamID(default);
        RequireVar(this.DamagePerTick);
        RequireVar(this.DefenseStats);
        ApplyAssistMarker(Attacker, Owner, 10);
        IncPermanentStat(IncPermanentFlatArmorMod, Owner, 0 + (this.DefenseStats ?? 0));
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, 0 + (this.DefenseStats ?? 0));
        If(Owner, default, CO_NOT_EQUAL, Attacker, default, () => {
            MordekaiserSkinID = GetSkinID(Attacker);
            If(MordekaiserSkinID, default, CO_EQUAL, default, 1, () => {
                SpellEffectCreate(this.b, default, "mordekaiser_creepingDeath_auraGold.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            ElseIf(MordekaiserSkinID, default, CO_EQUAL, default, 2, () => {
                SpellEffectCreate(this.b, default, "mordekaiser_creepingDeath_auraRed.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(this.b, default, "mordekaiser_creepingDeath_aura.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        Else(() => {
            SpellEffectCreate(this.b, default, "mordekaiser_creepingDeath_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        RequireVar(this.Level);
        SpellEffectCreate(this.LandslideLHand, default, "Landslide_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.LandslideRHand, default, "Landslide_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Target, default, default, false, default, default, default, default, default, default);
        RequireVar(this.DamagePerTick);
        this.Count = 0;
        ApplyDamage(Owner, Attacker, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Owner);
        RequireVar(this.SpellCooldown);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.WillRemove = false;
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        RequireVar(this.PercMod);
        DamageVar = GetTotalAttackDamage(Owner);
        this.DamageIncrease = Math(0 + (DamageVar ?? 0), MO_MULTIPLY, 0 + (this.PercMod ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (this.DamageIncrease ?? 0));
        ArmorVar = GetArmor(Owner);
        this.ArmorIncrease = Math(0 + (ArmorVar ?? 0), MO_MULTIPLY, 0 + (this.PercMod ?? 0));
        IncPermanentStat(IncPermanentFlatArmorMod, Owner, 0 + (this.ArmorIncrease ?? 0));
        MalphiteSkinID = GetSkinID(Owner);
        SpellEffectCreate(this.Sandroot, default, "Malphite_Enrage_glow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, false, false, false, false, default, default);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
        If(MalphiteSkinID, default, CO_EQUAL, default, 3, () => {
            SpellEffectCreate(this.SandRHand, default, "Malphite_Enrage_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_finger_b", default, Target, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.SandLHand, default, "Malphite_Enrage_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_finger_b", default, Target, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.SandRHand, default, "Malphite_Enrage_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_thumb_b", default, Target, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.SandLHand, default, "Malphite_Enrage_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_finger_b", default, Target, default, default, false, false, false, false, false, default, default);
        });
        this.Count = 0;
        If(Attacker, default, CO_NOT_EQUAL, Owner, default, () => {
            RequireVar(this.BaseDamage);
            ApplyDamage(Owner, Attacker, 0 + (this.BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Owner);
        });
        RequireVar(this.healthRegen);
        SpellEffectCreate(this.SEPar, default, "Obduracy_off.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, "root", default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle1, default, "Skarner_Crystal_Slash_Activate_L.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Nothing, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "Skarner_Crystal_Slash_Activate_R.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Nothing, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(default, default, "mordakaiser_death_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, "chest", default, false, default, default, default, default, default, default);
        RequireVar(this.SlowPercent);
        ApplyAssistMarker(Attacker, Target, 10);
        SetBuffToolTipVar(1, 10);
        SetSpellToolTipVar(260, 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        HPPool = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        this.ShieldHealth = Math(0.1, MO_MULTIPLY, 0 + (HPPool ?? 0));
        SpellBuffRemove(Owner, "MalphiteShieldRemoval", Owner, default);
        IncreaseShield(Owner, 0 + (this.ShieldHealth ?? 0), true, true);
        If(default, true, CO_EQUAL, default, false, () => {
            SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        });
        this.BrushChecks = 0;
        Caster = SetBuffCasterUnit();
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle1, default, "Skarner_Fracture_Tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SetStatus(Owner, default, SetStealthed);
        TeemoSkinID = GetSkinID(Owner);
        If(TeemoSkinID, default, CO_EQUAL, default, 4, () => {
            this.ID = PushCharacterFade(Owner, 0.3, default, this.ID);
        });
        Else(() => {
            this.ID = PushCharacterFade(Owner, 0.3, default, this.ID);
        });
        this.LastPosition = GetUnitPosition(Owner);
        RequireVar(this.BaseDamage);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.Count = 0;
        ApplyDamage(Owner, Attacker, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Owner);
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "mordakaiser_siphonOfDestruction_self.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(a, default, "mordakeiser_hallowedStrike_self_skin.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        IncStat(IncPercentAttackSpeedMod, Owner, 0.4);
        IncStat(IncFlatMissChanceMod, Owner, 1);
        RequireVar(this.DamagePerTick);
        RequireVar(this.MoveSpeedMod);
        ApplyDamage(Attacker, Owner, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.16, 1, false, false, Attacker);
        teamID = GetTeamID(default);
        this.bubbleID = AddPosPerceptionBubble(teamID, 400, Owner, 5, Nothing, false);
        PlayAnimation("Spell1", 0, Owner, false, true, false);
        RequireVar(this.DamagePerTick);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.TickAmount);
        TeamOfOwner = GetTeamID(default);
        CharVars.Ticks = 0;
        SpellEffectCreate(this.Particle2, this.Particle, "ReapTheWhirlwind_green_cas.troy", "ReapTheWhirlwind_red_cas.troy", TeamOfOwner ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 700, "AffectEnemies AffectFriends AffectMinions AffectHeroes ", default, true, (Unit) => {
            If(Owner, default, CO_SAME_TEAM, Unit, default, () => {
                Temp1 = GetPAROrHealth(Unit, GetHealthPercent, PAR_MANA);
                If(Temp1, default, CO_LESS_THAN, default, 1, () => {
                    ApplyAssistMarker(Owner, Unit, 10);
                    IncHealth(Unit, 0 + (this.TickAmount ?? 0), Owner);
                });
            });
            Else(() => {
                BreakSpellShields(Unit);
                Center = GetUnitPosition(Owner);
                NextBuffVars.Center = Center;
                NextBuffVars.Distance = 1000;
                NextBuffVars.IdealDistance = 1000;
                NextBuffVars.Gravity = 10;
                NextBuffVars.Speed = 1200;
                SpellBuffAdd(Attacker, Unit, "MoveAway", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
            });
        });
        RequireVar(this.DamagePerTick);
        ApplyDamage(Attacker, Owner, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
        teamID = GetTeamID(default);
        this.bubbleID = AddPosPerceptionBubble(teamID, 300, Owner, 3, Nothing, false);
        SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.LastPosition = GetUnitPosition(Owner);
        RequireVar(this.DamageBonus);
        RequireVar(this.DamagePerTick);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.AttackSpeedMod);
        this.Activated = false;
        this.TeemoSkinID = GetSkinID(Owner);
        If(this.TeemoSkinID, default, CO_EQUAL, default, 4, () => {
            this.ID = PushCharacterFade(Owner, 0.3, default, this.ID);
        });
        ElseIf(this.TeemoSkinID, default, CO_EQUAL, default, 5, () => {
            this.ID = PushCharacterFade(Owner, 0.5, default, this.ID);
        });
        Else(() => {
            this.ID = PushCharacterFade(Owner, 0.3, default, this.ID);
        });
        If(this.TeemoSkinID, default, CO_EQUAL, default, 5, () => {
            this.HasParticle = false;
            If(default, 0.3, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                SpellEffectCreate(this.a, default, "TeemoEaster2.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
                this.HasParticle = true;
            });
            ElseIf(default, 0.3, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                SpellEffectCreate(this.a, default, "TeemoEaster3.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
                this.HasParticle = true;
            });
        });
        SetStatus(Owner, default, SetGhosted);
        RequireVar(this.TotalArmorAmount);
        SetBuffToolTipVar(1, 0 + (this.TotalArmorAmount ?? 0));
        ApplyAssistMarker(Attacker, Owner, 10);
        IncreaseShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
        AttackerSkinID = GetSkinID(Attacker);
        If(AttackerSkinID, default, CO_EQUAL, default, 3, () => {
            SpellEffectCreate(this.Particle, default, "EyeoftheStorm_Frost_Ally_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "EyeoftheStorm_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        RequireVar(this.BouncePos);
        BouncePos = this.BouncePos;
        Move(Owner, BouncePos, 100, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, default);
        PlayAnimation("Spell3", 0, Owner, false, true, false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(part, default, "SowTheWind_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle, default, "SowTheWind_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, "head", default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetGhosted);
        this.SowCast = 0;
        RequireVar(this.FacePos);
        RequireVar(this.LifeTime);
        RequireVar(this.Level);
        CastPos = GetUnitPosition(Owner);
        this.CastPos = CastPos;
        OwnerSkinID = GetSkinID(Owner);
        If(OwnerSkinID, default, CO_EQUAL, default, 3, () => {
            SpellEffectCreate(this.Particle, default, "HowlingGale_Frost_cas.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, this.CastPos, Target, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "HowlingGale_cas.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, this.CastPos, Target, default, default, false, false, false, false, false, default, default);
        });
        SetTargetingType(1, SpellSlots, default, TTYPE_Self, Owner);
        SpellBuffClear(Owner, "TeemoMoveQuickSpeed");
        TeemoSkinID = GetSkinID(Owner);
        this.CustomRun = false;
        If(TeemoSkinID, default, CO_EQUAL, default, 4, () => {
            SpellEffectCreate(this.MoveQuickParticle, default, "MoveQuick_buf2.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, default, default, false, false, false, false, false, default, default);
        });
        ElseIf(_6, default, CO_EQUAL, default, default, () => {
            SpellEffectCreate(this.MoveQuickParticle, default, "MoveQuick_buf2.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.MoveQuickParticle, default, "MoveQuick_buf2.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        If(TeemoSkinID, default, CO_EQUAL, default, 6, () => {
            this.CustomRun = true;
            OverrideAnimation("Run", "RunFly", Owner);
        });
        RequireVar(this.Blades);
        RequireVar(this.NewCd);
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Location, Owner);
        SetPARCostInc(Owner, 3, SpellSlots, -100, PAR_MANA);
        SpellBuffRemove(Owner, "IreliaIdleParticle", Owner, default);
        IreliaTeamID = GetTeamID(default);
        SpellEffectCreate(this.UltMagicParticle, default, "irelia_ult_magic_resist.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.Particle1, default, "Irelia_ult_dagger_active_04.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_DAGGER1", default, Target, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.Particle2, default, "Irelia_ult_dagger_active_04.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_DAGGER2", default, Target, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.Particle3, default, "Irelia_ult_dagger_active_04.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_DAGGER4", default, Target, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.Particle4, default, "Irelia_ult_dagger_active_04.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_DAGGER5", default, Target, default, default, false, default, default, false, default, default, default);
        RequireVar(this.DamageBlock);
        IncreaseShield(Owner, 0 + (this.DamageBlock ?? 0), true, true);
        this.HasDealtDamage = false;
        RequireVar(this.TremDamage);
        SpellEffectCreate(this.TremorsFx, default, "Tremors_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectBuildings AffectMinions AffectHeroes AffectTurrets ", default, true, (Unit) => {
            ApplyDamage(Attacker, Unit, 0 + (this.TremDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 0, false, false, Attacker);
        });
        this.ShurikenDamage = 10;
        SetBuffToolTipVar(1, 0 + (this.ShurikenDamage ?? 0));
        this.LastHit = 0;
        SpellEffectCreate(this.Particle, default, "shen_Teleport_target_v2.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetCanMove);
        ApplyAssistMarker(Attacker, Owner, 10);
        SetStatus(Owner, default, SetCanMove);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.shieldHealth);
        SetBuffToolTipVar(1, 0 + (this.shieldHealth ?? 0));
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Shieldz, default, "Shen_StandUnited_shield_v2.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        IncreaseShield(Owner, 0 + (this.shieldHealth ?? 0), true, true);
        IfHasBuff(Owner, Owner, "DefensiveBallCurl", () => {
            SpellBuffRemove(Owner, "DefensiveBallCurl", Owner, 0);
        });
        RequireVar(this.AoEDamage);
        RequireVar(this.SlowPercent);
        RequireVar(this.MoveSpeedMod);
        SetStatus(Owner, default, SetCanAttack);
        this.CasterID = PushCharacterData("RammusPB", Owner, false);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.WillRemove = false;
        RequireVar(this.LifeTapMod);
        TeamID = GetTeamID(default);
        RequireVar(this.LifeTapMod);
        SpellEffectCreate(this.slow, default, "shen_life_tap_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        TeamID = GetTeamID(default);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, false);
        SpellEffectCreate(this.LeftHand, default, "shen_kiStrike_ready_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_hand", default, Owner, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(this.RightHand, default, "shen_kiStrike_ready_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_hand", default, Target, default, default, true, default, default, false, default, default, default);
        SetDodgePiercing(Owner, true);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.particleID, default, "ShenTeleport_v2.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, false, default, default, false, false, default, default);
        RequireVar(this.SlowPercent);
        ApplyAssistMarker(Attacker, Owner, 10);
        Dist = DistanceBetweenObjects("Attacker", "Owner");
        Dist = Math(225, MO_ADD, 0 + (Dist ?? 0));
        MoveAway(Owner, Attacker, 200, 10, 0 + (Dist ?? 0), 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, default);
        ApplyRoot(Attacker, Owner, 0.5);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        RequireVar(this.NinjaBonus);
        RequireVar(this.LifeReturn);
        RequireVar(this.ArmorMod);
        TeemoSkinID = GetSkinID(Owner);
        If(TeemoSkinID, default, CO_EQUAL, default, 4, () => {
            SpellEffectCreate(this.MoveQuickParticle, default, "MoveQuick_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, default, default, false, default, default, default, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.MoveQuickParticle, default, "MoveQuick_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        });
        RequireVar(this.ArmorDebuff);
        RequireVar(this.DamagePerTick);
        RequireVar(this.StackingDamagePerTick);
        this.DebuffDuration = 5;
        SpellBuffAdd(Attacker, Owner, "TeemoMoveQuickDebuff", 1, 1, 0 + (this.DebuffDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        RequireVar(this.TargetPos);
        RequireVar(this.tauntDuration);
        RequireVar(this.dashSpeed);
        RequireVar(this.Distance);
        RequireVar(this.EnergyRefunds);
        TargetPos = this.TargetPos;
        Move(Owner, TargetPos, 0 + (this.dashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, POSTPONE_CURRENT_ORDER, 0 + (this.Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.SelfParticle, default, "Shen_shadowdash_mis.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        StartTrackingCollisions(Owner, true);
        PlayAnimation("Dash", 0, Owner, true, false, true);
        this.ArmorAmount = GetArmor(Owner);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.asdf1, default, "Global_Taunt_multi_unit.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_HEAD_LOC", default, Owner, default, default, true, default, default, default, default, default, default);
        IfHasBuff(Owner, Owner, "Powerball", () => {
            SpellBuffRemove(Owner, "PowerBall", Owner, 0);
        });
        RequireVar(this.ArmorAmount);
        RequireVar(this.DamageReturn);
        this.CasterID = PushCharacterData("RammusDBC", Owner, false);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "DefensiveBallCurlCancel");
        SpellEffectCreate(this.particle, default, "DefensiveBallCurl_buf", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SetSlotSpellCooldownTimeVer2(1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
        RequireVar(this.DamagePerTick);
        this.DamagePerTickFirst = Math(0 + (this.DamagePerTick ?? 0), MO_MULTIPLY, 1.5);
        ApplyDamage(Attacker, Owner, 0 + (this.DamagePerTickFirst ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0.14, 1, false, false, Attacker);
        RequireVar(this.dashSpeed);
        RequireVar(this.TargetPos);
        RequireVar(this.Distance);
        RequireVar(this.DamageVar);
        TargetPos = this.TargetPos;
        Move(Owner, TargetPos, 0 + (this.dashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (this.Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.SelfParticle, default, "irelia_gotasu_dash_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, false, false, false, false, default, default);
        PlayAnimation("spell1", 0.5, Owner, false, true, true);
        this.WillRemove = false;
        SetStatus(Owner, default, SetGhosted);
        TeamID = GetTeamID(default);
        SpellEffectCreate(PH, default, "irelia_gotasu_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, default, default, default, default, default, default);
        OverrideAnimation("Attack1", "Attack1b", Owner);
        OverrideAnimation("Attack2", "Attack2b", Owner);
        OverrideAnimation("Crit", "Critb", Owner);
        OverrideAnimation("Idle1", "Idle1b", Owner);
        OverrideAnimation("Run", "Runb", Owner);
        IreliaTeamID = GetTeamID(default);
        SpellEffectCreate(this.IreliaHitenStyle1, default, "irelia_hitenStyle_passive.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.IreliaHitenStyle2, default, "irelia_hitenStlye_passive_glow.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, default, default, false, default, default, default, default, default, default);
        OverrideAnimation("Attack1", "Attack1c", Owner);
        OverrideAnimation("Attack2", "Attack2c", Owner);
        OverrideAnimation("Crit", "Critc", Owner);
        OverrideAnimation("Idle1", "Idle1c", Owner);
        OverrideAnimation("Run", "Runc", Owner);
        RequireVar(this.HealthFlat);
        RequireVar(this.HealthPercentPerTick);
        RequireVar(this.TargetPos);
        TeamOfOwner = GetTeamID(default);
        TargetPos = this.TargetPos;
        SpellEffectCreate(varrr, default, "AlzaharNullZoneFlash.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Owner, default, default, true, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle1, this.Particle2, "AlzaharVoidPortal_flat_green.troy", "AlzaharVoidPortal_flat_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, default, default, false, false, default, default);
        ID = PushCharacterFade(Owner, 0.2, default, ID);
        SetStatus(Owner, default, SetStealthed);
        SetStatus(Owner, default, SetGhosted);
        this.teamID = GetTeamID(default);
        ForEachUnitInTargetArea(Owner, Owner, 1500, "AffectEnemies AffectMinions AffectHeroes ", "AlZaharVoidling", true, (Unit) => {
            If(Owner, default, CO_DIFFERENT_TEAM, Unit, default, () => {
                ApplyTaunt(Owner, Unit, 1.5);
            });
        });
        ID = PushCharacterFade(Owner, 0.2, default, ID);
        SetStatus(Owner, default, SetStealthed);
        SetNotTargetableToTeam(Owner, true, false);
        ShowHealthBar(Owner, true);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, default, "MonkeyKing_Copy.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_ORDER, Nothing, true, Owner, "root", default, Target, "root", default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "MonkeyKing_Copy.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CHAOS, Nothing, true, Owner, "root", default, Target, "root", default, false, false, false, false, false, default, default);
        });
        IssueOrder(Owner, AI_HOLD, default, Owner);
        SpellEffectCreate(this.HymnAura, default, "SonaHymnofValor_aura.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        RequireVar(this.DamageAmount);
        ApplyAssistMarker(Attacker, Owner, 10);
        OverrideAnimation("Idle1", "Dance", Owner);
        SpellBuffRemove(Owner, "SonaAriaOfPerseverance", Owner, 0);
        SpellBuffRemove(Owner, "SonaSongOfDiscord", Owner, 0);
        IfNotHasBuff(Owner, Owner, "SonaPowerChord", () => {
            OverrideAutoAttack(4, ExtraSlots, Owner, 1, false);
        });
        teamID = GetTeamID(default);
        SpellEffectCreate(this.particleID, default, "SonaPowerChordReady_violet.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        SpellBuffRemove(Owner, "SonaHymnofValorCheck", Owner, default);
        SpellBuffRemove(Owner, "SonaAriaofPerseveranceCheck", Owner, default);
        SetSpell(Owner, 2, ExtraSlots, SPELLBOOK_CHAMPION, "SonaSongofDiscordAttackUpgrade");
        OverrideAutoAttack(2, ExtraSlots, Owner, 1, false);
        SpellEffectCreate(this.SongAura, default, "SonaSongofDiscord_aura.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        RequireVar(this.ResistanceMod);
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.ResistanceMod ?? 0));
        RequireVar(this.APADBoost);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        this.CooldownBonus = this.VALUE_BY_LEVEL;
        RequireVar(this.TotalDamage);
        ApplyDamage(Attacker, Owner, 0 + (this.TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        this.lastTooltip = 0;
        SpellEffectCreate(this.Part2, default, "SonaHymnofValorSound.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        RequireVar(this.Vamp);
        RequireVar(this.Level);
        Level = this.Level;
        IncStat(IncPercentSpellVampMod, Owner, 0 + (this.Vamp ?? 0));
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.asdf, default, "ManaLeach_tar2.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        RequireVar(this.DamageAura);
        RequireVar(this.MoveSpeedMod);
        SpellBuffRemove(Owner, "SonaHymnOfValor", Owner, 0);
        SpellBuffRemove(Owner, "SonaAriaOfPerseverance", Owner, 0);
        IfNotHasBuff(Owner, Owner, "SonaPowerChord", () => {
            OverrideAutoAttack(5, ExtraSlots, Owner, 1, false);
        });
        teamID = GetTeamID(default);
        SpellEffectCreate(this.particleID, default, "SonaPowerChordReady_blue.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        SpellBuffRemove(Owner, "SonaAriaofPerseveranceCheck", Owner, default);
        SpellBuffRemove(Owner, "SonaSongofDiscordCheck", Owner, default);
        SetSpell(Owner, 2, ExtraSlots, SPELLBOOK_CHAMPION, "SonaHymnofValorAttackUpgrade");
        OverrideAutoAttack(2, ExtraSlots, Owner, 1, false);
        RequireVar(this.DamageToDeal);
        ApplyDamage(Attacker, Target, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.26, 0, false, false, Attacker);
        this.TicksRemaining = 4;
        RequireVar(this.MSBoost);
        SpellEffectCreate(this.Part, default, "SonaSoundofDiscordSound", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        RequireVar(this.TotalDamage);
        ApplyDamage(Attacker, Owner, 0 + (this.TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        TeamID = GetTeamID(default);
        SetStatus(Owner, default, SetCanMove);
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(this.asdf1, default, "RunePrison_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Part, default, "SonaAriaofPerserveranceSound.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        RequireVar(this.TargetPos);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Attacker, default, SetForceRenderParticles);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(Particle, default, "voidflash.troy", default, TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle3, this.Particle2, "voidportal_green.troy", "voidportal_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        RequireVar(this.DefenseBonus);
        RequireVar(this.Particle2);
        RequireVar(this.Particle3);
        SpellEffectCreate(this.AriaAura, default, "SonaAriaofPer_aura.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffRemove(Owner, "SonaHymnOfValor", Owner, 0);
        SpellBuffRemove(Owner, "SonaSongOfDiscord", Owner, 0);
        IfNotHasBuff(Owner, Owner, "SonaPowerChord", () => {
            OverrideAutoAttack(3, ExtraSlots, Owner, 1, false);
        });
        teamID = GetTeamID(default);
        SpellEffectCreate(this.particleID, default, "SonaPowerChordReady_green.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellBuffRemove(Owner, "SonaHymnofValorCheck", Owner, 0);
        SpellBuffRemove(Owner, "SonaSongofDiscordCheck", Owner, 0);
        SetSpell(Owner, 2, ExtraSlots, SPELLBOOK_CHAMPION, "SonaAriaofPerseveranceUpgrade");
        OverrideAutoAttack(2, ExtraSlots, Owner, 1, false);
        RequireVar(this.TotalDamage);
        ApplyDamage(Attacker, Owner, 0 + (this.TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, false);
        SetAutoAcquireTargets(Owner, false);
        SpellEffectCreate(this.Particle4, default, "irelia_ult_energy_ready.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_BACK_2", default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffRemove(Owner, "SonaAriaofPerseveranceSound", Owner, default);
        SpellBuffRemove(Owner, "SonaHymnofValorSound", Owner, default);
        SpellBuffRemove(Owner, "SonaSongofDiscordSound", Owner, default);
        Count = GetBuffCountFromCaster(Owner, Owner, "SonaPowerChordCount");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
            SpellBuffAdd(Owner, Owner, "SonaPowerChord", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
            SpellBuffRemoveStacks(Owner, Owner, "SonaPowerChordCount", 0);
        });
        SpellEffectCreate(this.b, default, "SonaPowerChord_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, false, default, default, default);
        RequireVar(this.ARMRBoost);
        Count = GetBuffCountFromAll(Attacker, "IreliaIonianDuelist");
        IfHasBuff(Attacker, Attacker, "IreliaIonianDuelist", () => {
            If(Count, default, CO_EQUAL, default, 1, () => {
                TotalBonus = Math(0, MO_ADD, 10);
                SpellEffectCreate(this.Particle1, default, "irelia_new_passive_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_BACK_2", default, Owner, default, default, false, default, default, default, default, default, default);
            });
            If(Count, default, CO_EQUAL, default, 2, () => {
                TotalBonus = Math(0, MO_ADD, 25);
                SpellEffectCreate(this.Particle1, default, "irelia_new_passive_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_BACK_2", default, Owner, default, default, false, default, default, default, default, default, default);
            });
            If(Count, default, CO_EQUAL, default, 3, () => {
                If(this.LastCount, default, CO_NOT_EQUAL, default, 3, () => {
                    TotalBonus = Math(0, MO_ADD, 40);
                    SpellEffectCreate(this.Particle1, default, "irelia_new_passive_03.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_BACK_2", default, Owner, default, default, false, default, default, default, default, default, default);
                });
            });
            this.LastCount = Count;
        });
        SetBuffToolTipVar(1, 0 + (TotalBonus ?? 0));
        SetStatus(Owner, default, SetNoRender);
        BouncePos = GetRandomPointInAreaUnit(Owner, 100, 100);
        Move(Owner, BouncePos, 100, 10, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, FACE_MOVEMENT_DIRECTION);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanAttack);
        RequireVar(this.SpellCooldown);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        OverrideAutoAttack(2, ExtraSlots, Owner, 1, true);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, default, "MonkeyKingClone.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_ORDER, Nothing, true, Owner, "root", default, Target, "root", default, false, default, default, default, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "MonkeyKingClone.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CHAOS, Nothing, true, Owner, "root", default, Target, "root", default, false, default, default, default, default, default, default);
        });
        RequireVar(this.BonusDamage);
        RequireVar(this.BonusHealth);
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (this.BonusDamage ?? 0));
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (this.BonusHealth ?? 0));
        this.Timer = 0;
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(a, default, "VoidlingFlash.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Target, default, default, true, default, default, default, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(a, default, "VoidlingFlash.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Target, default, default, true, default, default, default, default, default, default);
        });
        this.DoOnce = false;
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.a, default, "monkeyKing_W_cas_team_ID_green.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Owner, false, Owner, "L_hand", default, Owner, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.b, default, "monkeyKing_W_cas_team_ID_green.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Owner, false, Owner, "R_hand", default, Owner, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.c, default, "monkeyKing_W_cas_team_ID_red.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_CHAOS, Owner, false, Owner, "L_hand", default, Owner, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.d, default, "monkeyKing_W_cas_team_ID_red.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_CHAOS, Owner, false, Owner, "R_hand", default, Owner, default, default, false, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.a, default, "monkeyKing_W_cas_team_ID_green.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_CHAOS, Owner, false, Owner, "L_hand", default, Owner, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.b, default, "monkeyKing_W_cas_team_ID_green.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_CHAOS, Owner, false, Owner, "R_hand", default, Owner, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.c, default, "monkeyKing_W_cas_team_ID_red.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Owner, false, Owner, "L_hand", default, Owner, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.d, default, "monkeyKing_W_cas_team_ID_red.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Owner, false, Owner, "R_hand", default, Owner, default, default, false, default, default, false, false, default, default);
        });
        TeamID = GetTeamID(default);
        RequireVar(this.ArmorDebuff);
        IncStat(IncPercentArmorMod, Owner, 0 + (this.ArmorDebuff ?? 0));
        SpellEffectCreate(this.Particle1, default, "monkey_king_crushingBlow_armor_debuff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        RequireVar(this.SpellCooldown);
        RequireVar(this.BaseDamage);
        RequireVar(this.MoveSpeedMod);
        PlayAnimation("Spell4", 0, Owner, true, true, true);
        SpellEffectCreate(this.Particle2, default, "monkey_king_ult_spin.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID, default, "garen_weapon_glow_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, "BUFFBONE_WEAPON_3", default, false, false, false, false, false, default, default);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        IfHasBuff(Owner, Owner, "MonkeyKingDecoyStealth", () => {
            SpellBuffRemove(Owner, "MonkeyKingDecoyStealth", Owner, 0);
        });
        Count = GetBuffCountFromCaster(Owner, Owner, "AlZaharVoidlingCount");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
            SpellBuffAdd(Owner, Owner, "AlZaharSummonVoidling", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
            SpellBuffRemoveStacks(Owner, Owner, "AlZaharVoidlingCount", 0);
        });
        SpellEffectCreate(this.ParticleID, default, "olaf_viciousStrikes_weapon_glow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_3", default, Owner, "BUFFBONE_CSTM_WEAPON_2", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ParticleID, default, "olaf_viciousStrikes_weapon_glow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Target, false, Owner, "BUFFBONE_CSTM_WEAPON_7", default, Owner, "BUFFBONE_CSTM_WEAPON_4", default, false, default, default, default, default, default, default);
        RequireVar(this.DamageGain);
        RequireVar(this.LifestealStat);
        SpellCast(Owner, Owner, default, default, false, 2, SpellSlots, 0 + (_1 ?? 0), false, false, false, true, false, default);
        RequireVar(this.dashSpeed);
        RequireVar(this.TargetPos);
        RequireVar(this.Distance);
        RequireVar(this.DamageVar);
        TargetPos = this.TargetPos;
        PlayAnimation("Spell1", 0, Owner, true, true, true);
        Move(Owner, TargetPos, 0 + (this.dashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.SelfParticle, default, "monkeyKing_Q_self_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        this.WillRemove = false;
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanAttack);
        SpellEffectCreate(varrr, default, "voidlingtransform.prt", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        BaseArmor = GetArmor(Owner);
        BaseDamage = GetTotalAttackDamage(Owner);
        this.DamageInc = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 0.5);
        this.ArmorInc = Math(0 + (BaseArmor ?? 0), MO_MULTIPLY, 0.5);
        IncScaleSkinCoef(0.5, Owner);
        RequireVar(this.AttackSpeedVar);
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedVar ?? 0));
        this.DefenseToAdd = 0;
        SetBuffToolTipVar(1, 4);
        SpellEffectCreate(varrr, default, "alzaharvoidling_evo.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(default, default, "Alzahar_death.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(PH, default, "monkeyKing_Q_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, default, default, false, false, default, default);
        RequireVar(this.dashSpeed);
        RequireVar(this.TargetPos);
        RequireVar(this.Distance);
        RequireVar(this.AttackSpeedVar);
        RequireVar(this.DamageVar);
        SpellEffectCreate(this.SelfParticle, default, "monkeyKing_Q_self_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        TargetPos = this.TargetPos;
        PlayAnimation("Spell1", 0, Owner, true, true, true);
        Move(Owner, TargetPos, 0 + (this.dashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        this.WillRemove = false;
        SetStatus(Owner, default, SetGhosted);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetInvulnerable);
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, -0.1);
        RequireVar(this.HealAmount);
        IncHealth(Owner, 0 + (this.HealAmount ?? 0), Owner);
        SpellEffectCreate(HealVFX, default, "galio_bulwark_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetStealthed);
        RequireVar(this.MoveSpeedMod);
        MoveSpeedMod = this.MoveSpeedMod;
        TeamID = GetTeamID(default);
        OrientationPoint = GetPointByUnitFacingOffset(Owner, 10000, 0);
        SpellEffectCreate(this.WindVFXAlly, this.WindVFXEnemy, "galio_windTunnel_rune.troy", "galio_windTunnel_rune_team_red.troy", TeamID ?? TEAM_UNKNOWN, 240, 0, TEAM_UNKNOWN, Nothing, false, Nothing, "head", Owner, Owner, default, default, false, default, default, false, false, OrientationPoint, default);
        this.Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, ExtraSlots, Attacker, GetSlotSpellLevel);
        RequireVar(this.BonusDefense);
        RequireVar(this.HealAmount);
        TeamID = GetTeamID(default);
        If(Owner, default, CO_NOT_EQUAL, Attacker, default, () => {
            ApplyAssistMarker(Attacker, Owner, 10);
            SpellEffectCreate(this.TargetVFX, default, "galio_bullwark_target_shield_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.SelfTargetVFX, default, "galio_bullwark_target_shield_01_self.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "chest", default, Owner, default, default, false, default, default, false, false, default, default);
        });
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetStealthed);
        RequireVar(this.TargetPos);
        TargetPos = this.TargetPos;
        FaceDirection(Owner, TargetPos);
        APMod = GetStat(GetFlatMagicDamageMod, Attacker);
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, 0 + (APMod ?? 0));
        this.Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        SetSpell(Owner, 0, ExtraSlots, SPELLBOOK_CHAMPION, "GalioRighteousGustMissile");
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (this.Level ?? 0), true, true, false, false, false, default);
        RequireVar(this.MoveSpeedMod);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.BuffVFXAlly, default, "galio_windTunnel_speed_buf.troy", default, TEAM_CHAOS, 0, 0, TEAM_ORDER, Owner, false, Owner, "root", default, Owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.BuffVFXEnemy, default, "galio_windTunnel_speed_buf_team_red.tro", default, TEAM_ORDER, 0, 0, TEAM_CHAOS, Owner, false, Owner, "root", default, Owner, default, default, false, default, default, default, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.BuffVFXAlly, default, "galio_windTunnel_speed_buf.troy", default, TEAM_ORDER, 0, 0, TEAM_CHAOS, Owner, false, Owner, "root", default, Owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.BuffVFXEnemy, default, "galio_windTunnel_speed_buf_team_red.tro", default, TEAM_CHAOS, 0, 0, TEAM_ORDER, Owner, false, Owner, "root", default, Owner, default, default, false, default, default, default, default, default, default);
        });
        Caster = SetBuffCasterUnit();
        OwnerTeam = GetTeamID(default);
        SpellEffectCreate(this.b, this.c, "Viktor_ChaosStorm_green.troy", "Viktor_ChaosStorm_red.troy", OwnerTeam ?? TEAM_NEUTRAL, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        this.SoundClear = true;
        SpellEffectCreate(this.PassivePart, default, "xen_ziou_battleCry_passive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, default, default, false, default, default, false, default, default, default);
        CDTimer = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SpellBuffAdd(Attacker, Target, "XenZhaoBattleCryPH", 1, 1, 0 + (CDTimer ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        RequireVar(this.SelfASMod);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.BattleCryPH, default, "xen_ziou_battleCry_cas_05.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.BattleCryPH, default, "xen_ziou_battleCry_cas_03.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.BattleCryPH, default, "xen_ziou_battleCry_cas_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_BUFFBONE_GLB_HAND_LOC", default, Owner, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(this.BattleCryPH, default, "xenZhiou_battleCry_active.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_BUFFBONE_GLB_HAND_LOC", default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.BattleCryPH, default, "xenZhiou_battleCry_active.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_BUFFBONE_GLB_HAND_LOC", default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.BattleCries, default, "xenZiou_battle_cry_weapon_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, "BUFFBONE_CSTM_WEAPON_4", default, false, default, default, false, default, default, default);
        Caster = SetBuffCasterUnit();
        SpellEffectCreate(this.Particle1, default, "Viktor_ChaosStorm_indicator.troy", default, TEAM_CASTER, 0, 0, TEAM_CASTER, Caster, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "Viktor_ChaosStorm_indicator_02.troy", default, TEAM_CASTER, 0, 0, TEAM_CASTER, Caster, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        CancelAutoAttack(Owner, true);
        SpellEffectCreate(this.asdf2, default, "xenZiou_ChainAttack_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.asdf1, default, "xenZiou_ChainAttack_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Owner, default, default, false, default, default, default, default, default, default);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        RequireVar(this.MRByLevel);
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.MRByLevel ?? 0));
        SpellEffectCreate(this.MRShield, default, "xenZiou_SelfShield_01_magic.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        BouncePos = GetRandomPointInAreaUnit(Owner, 80, 80);
        Move(Owner, BouncePos, 100, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 80, FACE_MOVEMENT_DIRECTION);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(this.asdf2, default, "xenZiou_ChainAttack_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.asdf1, default, "xenZiou_ChainAttack_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Owner, default, default, false, default, default, false, default, default, default);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        BouncePos = GetRandomPointInAreaUnit(Owner, 80, 80);
        Move(Owner, BouncePos, 90, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 80, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        ApplyAssistMarker(Attacker, Owner, 10);
        CharVars.ManaToADD = 0;
        CharVars.HealthToADD = 0;
        OwnerLevel = GetLevel(Owner);
        CharVars.BonusForItem = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 3);
        SpellEffectCreate(this.asdf2, default, "xenZiou_ChainAttack_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.asdf1, default, "xenZiou_ChainAttack_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Owner, default, default, false, default, default, false, default, default, default);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        OverrideAnimation("Run", "Spell1", Owner);
        RequireVar(this.DamageDealt);
        RequireVar(this.TargetPos);
        RequireVar(this.Distance);
        RequireVar(this.BonusDamage);
        TargetPos = this.TargetPos;
        SpellEffectCreate(this.a, default, "xenZiou_AudaciousCharge_self_trail_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SetStatus(Owner, default, SetCanMove);
        Move(Target, TargetPos, 3000, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (this.Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        RequireVar(this.TotalArmor);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        XZSkinID = GetSkinID(Owner);
        If(XZSkinID, default, CO_EQUAL, default, 3, () => {
            SpellEffectCreate(this.hi, default, "xenZiou_SelfShield_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, default, default, false, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.hi, default, "xenZiou_SelfShield_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CENTER_LOC", default, Owner, default, default, false, default, default, false, default, default, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.BaseDamage = this.VALUE_BY_LEVEL;
        this.HitCount = 0;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.AreaVFXAlly, this.AreaVFXEnemy, "galio_beguilingStatue_taunt_indicator_team_green.troy", "galio_beguilingStatue_taunt_indicator_team_red.troy", TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.ChannelVFX, default, "galio_talion_channel.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.TauntVFX, default, "galio_taunt_unit_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, default, default, default, default);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.ArmorReduction);
        RequireVar(this.BonusGold);
        CasterID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(CasterID, 1200, Owner, 60, Nothing, Nothing, false);
        this.TotalMR = GetSpellBlock(Owner);
        RequireVar(this.DamageForDot);
        SetBuffToolTipVar(1, 6);
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 50, Target, 10, Nothing, Nothing, false);
        AP = GetStat(GetFlatMagicDamageMod, Owner);
        this.abilityPower = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.1);
        SetSlotSpellIcon(2, SpellSlots, SPELLBOOK_CHAMPION, Owner, 2);
        SpellEffectCreate(this.StaffIdleRED, default, "Viktorb_red.troy", default, OwnerTeam ?? TEAM_UNKNOWN, 200, 0, TEAM_NEUTRAL, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, "BUFFBONE_CSTM_WEAPON_1", default, false, false, false, false, false, default, default);
        this.HasDealtDamage = false;
        this.HasCreatedRing = false;
        SetStatus(Owner, default, SetCanCast);
        SpellEffectCreate(this.CataclysmSound, default, "JarvanCataclysm_sound.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ManaReduction = this.VALUE_BY_LEVEL;
        this.NewCd = this.VALUE_BY_LEVEL;
        SetPARCostInc(Owner, 3, SpellSlots, 0 + (ManaReduction ?? 0), PAR_MANA);
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Self, Owner);
        ShowHealthBar(Attacker, true);
        SetStatus(Attacker, default, SetTargetable);
        SetStatus(Attacker, default, SetInvulnerable);
        SetStatus(Attacker, default, SetCanMove);
        SetStatus(Attacker, default, SetIgnoreCallForHelp);
        SetStatus(Attacker, default, SetCallForHelpSuppresser);
        SetStatus(Attacker, default, SetForceRenderParticles);
        SetStatus(Attacker, default, SetNoRender);
        SetStatus(Attacker, default, SetSuppressCallForHelp);
        SetStatus(Attacker, default, SetCanAttack);
        SetStatus(Attacker, default, SetGhostProof);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ManaReduction = this.VALUE_BY_LEVEL;
        this.NewCd = this.VALUE_BY_LEVEL;
        SetPARCostInc(Owner, 3, SpellSlots, 0 + (ManaReduction ?? 0), PAR_MANA);
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Self, Owner);
        RequireVar(this.TotalArmorAmount);
        RequireVar(this.FinalArmorAmount);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "DeathsCaress");
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 4);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ManaCostInc = this.VALUE_BY_LEVEL;
        SetPARCostInc(Owner, 1, SpellSlots, 0 + (ManaCostInc ?? 0), PAR_MANA);
        IncreaseShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
        SpellEffectCreate(this.ParticleID, default, "ViktorEntropicBeam_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "Up_Hand", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.a, default, "ViktorEntropicBeam_tar_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.hit, default, "ViktorEntropicBeam_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Nothing, default, LaserPos, false, false, false, false, false, default, default);
        CharVars.CannibalismMaxHPMod = Math(0 + (CharVars.CannibalismMaxHPMod ?? 0), MO_ADD, 0 + (this.CannibalismMaxHPMod ?? 0));
        RequireVar(this.HealPercent);
        RequireVar(this.LifestealPercent);
        RequireVar(this.AttackSpeedMod);
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (this.BonusDamage ?? 0));
        CharVars.HPGain = Math(0 + (CharVars.HPGain ?? 0), MO_ADD, 0 + (this.HPGain ?? 0));
        CharVars.HPGain = 0;
        this.lastTooltip = 0;
        RequireVar(this.MovementSpeedMod);
        DebugSay(Owner, "applicator activatre", default);
        RequireVar(this.TargetPos);
        TargetPos = this.TargetPos;
        teamID = GetTeamID(default);
        this.BubbleID = AddPosPerceptionBubble(teamID, 1000, TargetPos, 8, Nothing, false);
        If(teamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(part22, default, "bowmaster_frostHawk_terminate.troy", default, TEAM_ORDER, 600, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, default, default, default, default, default, default);
            SpellEffectCreate(part23, default, "bowmaster_frostHawk_terminate_02.troy", default, TEAM_ORDER, 600, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, default, default, default, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(part22, default, "bowmaster_frostHawk_terminate.troy", default, TEAM_CHAOS, 600, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, default, default, default, default, default, default);
            SpellEffectCreate(part23, default, "bowmaster_frostHawk_terminate_02.troy", default, TEAM_CHAOS, 600, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, default, default, default, default, default, default);
        });
        If(CharVars.IsChampTarget, default, CO_EQUAL, default, true, () => {
            CharVars.TotalDamage = Math(0 + (CharVars.TotalDamage ?? 0), MO_MULTIPLY, 0.4);
            IncreaseShield(Owner, 0 + (CharVars.TotalDamage ?? 0), true, true);
        });
        RequireVar(this.ManaCostPerAttack);
        OverrideAutoAttack(1, ExtraSlots, Owner, 1, false);
        SetSlotSpellIcon(0, SpellSlots, SPELLBOOK_CHAMPION, Owner, 2);
        OwnerTeam = GetTeamID(default);
        RequireVar(this.TargetPos);
        TargetPos = this.TargetPos;
        this.willRemove = false;
        SetStatus(Owner, default, SetTargetable);
        IncPermanentStat(IncPermanentPercentBubbleRadiusMod, Owner, -0.9);
        this.LastCrit = 0;
        OverrideAnimation("Run", "Run3", Owner);
        Move(Owner, Attacker, 1400, 1, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 500, FACE_MOVEMENT_DIRECTION);
        ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            If(Owner, default, CO_IS_TARGET_BEHIND_ME, Unit, default, () => {
                SpellBuffAdd(Attacker, Unit, "JarvanIVDragonStrikeBehindMe", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
            });
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.DragonStrikeSound, default, "JarvanDemacianStandard_flag_hit.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        SetStatus(Owner, default, SetNoRender);
        TeamID = GetTeamID(default);
        RequireVar(this.ArmorDebuff);
        IncStat(IncPercentArmorMod, Owner, 0 + (this.ArmorDebuff ?? 0));
        SpellEffectCreate(this.Particle1, default, "JarvanDragonStrike_debuff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.HitParticle, default, "JarvanDragonStrike_hit.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        RequireVar(this.AttackSpeedMod);
        RequireVar(this.ArmorMod);
        SpellEffectCreate(this.asdf, default, "JarvanDemacianStandard_shield.troy", default, TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.a, default, "olaf_axe_trigger.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectCreate(this.Particle, this.Particle1, "olaf_axe_totem_team_id_green.troy", "olaf_axe_totem_team_id_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 400, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        BouncePos = GetRandomPointInAreaUnit(Owner, 100, 50);
        Move(Owner, BouncePos, 140, 25, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, FACE_MOVEMENT_DIRECTION);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.DamageToDeal);
        RequireVar(this.Level);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle1, "JarvanDemacianStandard_tar_green.troy", "JarvanDemacianStandard_tar_red.troy", TeamID ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        IncPermanentStat(IncPermanentFlatBubbleRadiusMod, Owner, -500);
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.5);
        RequireVar(this.ArmorMod);
        RequireVar(this.AttackSpeedMod);
        this.Count = 0;
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "JarvanDemacianStandard_buf_green.troy", "JarvanDemacianStandard_buf_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SetNotTargetableToTeam(Owner, false, true);
        SpellEffectCreate(this.Particle1, default, "JarvanGoldenAegis_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SetBuffToolTipVar(1, 0 + (this.Shield ?? 0));
        IncreaseShield(Owner, 0 + (this.Shield ?? 0), true, true);
        this.APPERLEV = 0;
        OwnerLevel = GetLevel(Owner);
        this.APPERLEV = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 3);
        RequireVar(this.CastPos);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        RequireVar(this.ManaCost);
        RequireVar(this.ManaCostInc);
        this.RavenID = PushCharacterData("SwainRaven", Owner, false);
        SpellEffectCreate(Particle, default, "swain_metamorph.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "swain_metamorph_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle3, default, "swain_demonForm_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        Count = 0;
        MaxMissiles = 3;
        ForEachUnitInTargetAreaRandom(Owner, Owner, 625, "AffectEnemies AffectHeroes ", default, true, 3, (Unit) => {
            Result = CanSeeTarget(Owner, Unit);
            If(Result, default, CO_EQUAL, default, true, () => {
                If(Count, default, CO_LESS_THAN, MaxMissiles, default, () => {
                    Count = Math(0 + (Count ?? 0), MO_ADD, 1);
                    SpellCast(Owner, Unit, default, default, false, 0, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, default);
                });
            });
        });
        ForEachUnitInTargetAreaRandom(Owner, Owner, 625, "AffectEnemies AffectNeutral AffectMinions ", default, true, 3, (Unit) => {
            Result = CanSeeTarget(Owner, Unit);
            If(Result, default, CO_EQUAL, default, true, () => {
                If(Count, default, CO_LESS_THAN, MaxMissiles, default, () => {
                    Count = Math(0 + (Count ?? 0), MO_ADD, 1);
                    SpellCast(Owner, Unit, default, default, false, 0, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, default);
                });
            });
        });
        RequireVar(this.ManaCost);
        RequireVar(this.TargetPos);
        TargetPos = this.TargetPos;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "Viktor_Catalyst_green.troy", "Viktor_Catalyst_green.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, false, false, false, false, default, default);
        CasterID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(CasterID, 100, Owner, 4, Nothing, Nothing, false);
        OwnerID = GetTeamID(default);
        this.BubbleID2 = AddUnitPerceptionBubble(OwnerID, 100, Owner, 4, Nothing, Nothing, false);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectCreate(this.BParticle, default, "swain_disintegrationBeam_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "head", default, Owner, "Bird_head", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.CParticle, default, "swain_disintegrationBeam_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "head", default, Owner, "Bird_head", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.DParticle, default, "swain_disintegrationBeam_beam_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Bird_head", default, Owner, default, default, false, default, default, default, default, default, default);
        IfNotHasBuff(Attacker, Nothing, "SwainBeamDamage", () => {
            SpellBuffRemoveCurrent(Owner);
        });
        RequireVar(this.DamagePerHalfSecond);
        IfNotHasBuff(Attacker, Attacker, "SwainMetamorphism", () => {
            this.CasterID = PushCharacterData("SwainNoBird", Attacker, false);
        });
        ApplyDamage(Attacker, Owner, 0 + (this.DamagePerHalfSecond ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.3, 1, false, false, Attacker);
        RequireVar(this.MovementSpeedMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        Count = GetBuffCountFromAll(Owner, "ViktorGravitonFieldDebuff");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
            IfNotHasBuff(Owner, Attacker, "ViktorGravitonFieldNoStun", () => {
                IfHasBuff(Attacker, Attacker, "ViktorAugmentW", () => {
                    SpellBuffRemoveStacks(Owner, Attacker, "ViktorGravitonFieldDebuff", 0 + (Count ?? 0));
                    SpellBuffAdd(Attacker, Owner, "ViktorGravitonFieldNoStun", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Owner);
                    SpellBuffAdd(Attacker, Owner, "ViktorGravitonFieldStun", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                });
                Else(() => {
                    SpellBuffRemoveStacks(Owner, Attacker, "ViktorGravitonFieldDebuff", 0 + (Count ?? 0));
                    SpellBuffAdd(Attacker, Owner, "ViktorGravitonFieldNoStun", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Owner);
                    SpellBuffAdd(Attacker, Owner, "ViktorGravitonFieldStun", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                });
            });
            SpellBuffRemoveStacks(Owner, Attacker, "ViktorGravitonFieldDebuff", 0 + (Count ?? 0));
        });
        SpellEffectCreate(this.AuraParticle, default, "nassus_godofDeath_aura.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        RequireVar(this.DamageCap);
        RequireVar(this.DamagePerc);
        RequireVar(this.CurrentDamageTotal);
        RequireVar(this.BonusHealth);
        DamageCap = this.DamageCap;
        DamagePerc = this.DamagePerc;
        ForEachUnitInTargetArea(Owner, Owner, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            Temp1 = GetPAROrHealth(Unit, GetMaxHealth, PAR_MANA);
            AbilityPowerMod = GetStat(GetFlatMagicDamageMod, Owner);
            AbilityPowerBonus = Math(0 + (AbilityPowerMod ?? 0), MO_MULTIPLY, 0.0001);
            DamagePerc = Math(0 + (DamagePerc ?? 0), MO_ADD, 0 + (AbilityPowerBonus ?? 0));
            HToDamage = Math(0 + (DamagePerc ?? 0), MO_MULTIPLY, 0 + (Temp1 ?? 0));
            HToDamage = Math(0 + (HToDamage ?? 0), MO_MIN, 240);
            ApplyDamage(Attacker, Unit, 0 + (HToDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            HToDamage = Math(0.05, MO_MULTIPLY, 0 + (HToDamage ?? 0));
            this.CurrentDamageTotal = Math(0 + (this.CurrentDamageTotal ?? 0), MO_ADD, 0 + (HToDamage ?? 0));
        });
        SetBuffToolTipVar(1, 0 + (this.CurrentDamageTotal ?? 0));
        IncScaleSkinCoef(0.3, Owner);
        this.CasterID = PushCharacterData("SwainNoBird", Owner, false);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectCreate(this.BParticle, default, "swain_disintegrationBeam_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "head", default, Owner, "Bird_head", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.CParticle, default, "swain_disintegrationBeam_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "head", default, Owner, "Bird_head", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.DParticle, default, "swain_disintegrationBeam_beam_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Bird_head", default, Owner, default, default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetStunned);
        PauseAnimation(Owner, true);
        Duration = GetBuffRemainingDuration(Owner, "ViktorGravitonFieldStun");
        SetStatus(Owner, default, SetNoRender);
        RequireVar(this.ManaCost);
        RequireVar(this.TargetPos);
        TargetPos = this.TargetPos;
        TeamOfOwner = GetTeamID(default);
        OwnerSkinID = GetSkinID(Owner);
        If(OwnerSkinID, default, CO_EQUAL, default, 1, () => {
            SpellEffectCreate(this.Particle, this.Particle2, "Viktor_Catalyst_Fullmachine_green.troy", "Viktor_Catalyst_Fullmachine_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, false, false, false, false, default, default);
        });
        ElseIf(OwnerSkinID, default, CO_EQUAL, default, 2, () => {
            SpellEffectCreate(this.Particle, this.Particle2, "Viktor_Catalyst_Prototype_green.troy", "Viktor_Catalyst_Prototype_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, this.Particle2, "Viktor_Catalyst_green.troy", "Viktor_Catalyst_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, false, false, false, false, default, default);
        });
        RequireVar(this.DamagePerHalfSecond);
        IfNotHasBuff(Owner, Owner, "SwainMetamorphism", () => {
            this.CasterID = PushCharacterData("SwainNoBird", Owner, false);
        });
        ApplyDamage(Owner, Attacker, 0 + (this.DamagePerHalfSecond ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.3, 1, false, false, Owner);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "ViktorGravitonFieldAugment");
        RequireVar(this.DamagePerHalfSecond);
        IfNotHasBuff(Attacker, Attacker, "SwainMetamorphism", () => {
            this.CasterID = PushCharacterData("SwainNoBird", Attacker, false);
        });
        ApplyDamage(Attacker, Owner, 0 + (this.DamagePerHalfSecond ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.3, 1, false, false, Attacker);
        CasterID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(CasterID, 1000, Owner, 40, Nothing, Nothing, true);
        RequireVar(this.Passthrough);
        RequireVar(this.SpellSlowPercent);
        RequireVar(this.GateParticle);
        RequireVar(this.GateParticle2);
        RequireVar(this.TargetPos);
        this.IsDisabled = 0;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle3, this.Particle4, "CardmasterTeleport_green.troy", "CardmasterTeleport_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SpellEffectCreate(this.TeleportParticle, default, "GateMarker.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        RequireVar(this.GateParticle);
        RequireVar(this.GateParticle2);
        RequireVar(this.CurrentPos);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.AttackSpeedMod);
        SealSpellSlot(2, SpellSlots, Owner, false, default);
        Count = GetBuffCountFromCaster(Owner, Owner, "CardMasterStackHolder");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
            SpellBuffAdd(Owner, Owner, "CardmasterStackParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            SpellBuffRemoveStacks(Owner, Owner, "CardMasterStackHolder", 0);
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(Sparks, default, "AnnieSparks.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        RequireVar(this.Counter);
        RequireVar(this.WillRemove);
        If(this.Counter, default, CO_LESS_THAN, default, 2, () => {
            SpellEffectCreate(this.EffectID, default, "Card_Blue.troy", default, TeamID ?? TEAM_UNKNOWN, 600, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, false, false, false, default, default);
        });
        ElseIf(this.Counter, default, CO_LESS_THAN, default, 4, () => {
            SpellEffectCreate(this.EffectID, default, "Card_Red.troy", default, TeamID ?? TEAM_UNKNOWN, 600, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.EffectID, default, "Card_Yellow.troy", default, TeamID ?? TEAM_UNKNOWN, 600, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, false, false, false, default, default);
        });
        this.Frozen = 0;
        this.removeParticle = 1;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.a, default, "Cardmaster_stackready.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        RequireVar(this.WillRemove);
        SpellEffectCreate(this.EffectID, default, "Card_Yellow_Tag.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        Count = GetBuffCountFromCaster(Owner, Owner, "ForcePulseCounter");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 6, () => {
            SpellBuffAdd(Attacker, Attacker, "ForcePulseCanCast", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            SpellBuffRemoveStacks(Owner, Owner, "ForcePulseCounter", 0);
        });
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Target, 10);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.BaseDamage = this.VALUE_BY_LEVEL;
        SpellEffectCreate(this.ChargedBladeEffect, default, "Kassadin_Netherblade.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Target, default, default, false, false, false, false, false, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        AttackDamage = GetTotalAttackDamage(Attacker);
        BonusDamage = this.VALUE_BY_LEVEL;
        RedCardDamage = Math(0 + (AttackDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        ForEachUnitInTargetArea(Attacker, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            If(Owner, default, CO_NOT_EQUAL, Unit, default, () => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (RedCardDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, default);
            });
            Else(() => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (BonusDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, default);
            });
            NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
            NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Attacker, Unit, "CardmasterSlow", 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
        });
        this.AttackSpeedBoost = 0;
        this.hasDealtDamage = false;
        RequireVar(this.CooldownBonus);
        RequireVar(this.BonusDamage);
        RequireVar(this.AttackSpeedBonus);
        this.AttackSpeedBoost = 0;
        RequireVar(this.DamageAmpPerc);
        RequireVar(this.DoTDamage);
        RequireVar(this.SwainMultiplier);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.SwainTormentEffect, default, "swain_torment_tar.troy", default, TEAM_UNKNOWN, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(this.SwainDoTEffect, default, "swain_torment_marker.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(this.SwainDoTEffect2, default, "swain_torment_dot.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        this.DamageTaken = 0;
        RequireVar(this.WillRemove);
        SpellEffectCreate(this.EffectID, default, "Card_Red_Tag.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanAttack);
        RequireVar(this.SpellCooldown);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellEffectCreate(this.ParticleID, default, "nassus_siphonStrike_beam_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "weapon_b4", default, Owner, "weapon_b1", default, false, false, false, false, false, default, default);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        CharVars.DamageBonus = Math(0 + (CharVars.DamageBonus ?? 0), MO_ADD, 0 + (this.DamageBonus ?? 0));
        RequireVar(this.DamageBonus);
        RequireVar(this.ArmorReduction);
        RequireVar(this.TargetPos);
        RequireVar(this.InitialDamage);
        RequireVar(this.Damage);
        RequireVar(this.ArmorReduction);
        RequireVar(this.TargetPos);
        TargetPos = this.TargetPos;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.c, default, "nassus_spiritFire_afterburn.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Boom2, this.Boom, "nassus_spiritFire_tar_green.troy", "nassus_spiritFire_tar_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, false, false, false, false, default, default);
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.ArmorReduction = this.ArmorReduction;
        ForEachUnitInTargetArea(Attacker, TargetPos, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Unit) => {
            ApplyDamage(Attacker, Unit, 0 + (this.InitialDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 0, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, "SpiritFireArmorReduction", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Shred, 0, true, false, false, default);
        });
        this.Count = 0;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        IfHasBuff(Attacker, Attacker, "SwainMetamorphism", () => {
            this.MRDebuff = this.VALUE_BY_LEVEL;
        });
        Else(() => {
            this.MRDebuff = 0;
        });
        TeamOfOwner = GetTeamID(default);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectCreate(this.RootParticleEffect2, default, "SwainShadowGraspRootTemp.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.RootParticleEffect, default, "swain_shadowGrasp_magic.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        RequireVar(this.TargetPos);
        RequireVar(this.InitialDamage);
        RequireVar(this.Damage);
        RequireVar(this.ArmorReduction);
        TargetPos = this.TargetPos;
        SpellEffectCreate(a, default, "nassus_spiritFire_warning.troy", default, TeamID ?? TEAM_UNKNOWN, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
        this.BubbleID = AddPosPerceptionBubble(TeamID, 200, TargetPos, 2.6, Nothing, false);
        RequireVar(this.GraspDamage);
        RequireVar(this.RootDuration);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.GroundParticleEffect, this.GroundParticleEffect2, "Swain_shadowGrasp_warning_green.troy", "Swain_shadowGrasp_warning_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.a, default, "swain_shadowGrasp_transform.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        this.manaRegen = 10;
        SetBuffToolTipVar(1, 0 + (this.manaRegen ?? 0));
        RequireVar(this.BonusSpeedMod);
        RequireVar(this.SpeedMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        this.Duration = GetBuffRemainingDuration(Target, "Wither");
        this.TimeBetweenTicks = Math(0 + (this.Duration ?? 0), MO_DIVIDE, 5);
        this.LastLifesteal = 0;
        this.lastTooltip = 0;
        RequireVar(this.DamageAmount);
        RequireVar(this.LastCount);
        SpellEffectCreate(this.Particle, default, "twitch_poison_counter_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, false, false, false, false, default, default);
        RequireVar(this.numAttacks);
        RequireVar(this.bonusDamage);
        this.lastTooltip = 0;
        RequireVar(this.AttackSpeedMod);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        RequireVar(this.SpeedMod);
        SpellBuffAdd(Attacker, Target, "SadismHeal", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.lastTooltip = 0;
        RequireVar(this.dotdmg);
        RequireVar(this.KnockBackDistance);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanCast);
        Distance = DistanceBetweenObjects("Owner", "Attacker");
        Distance = Math(0 + (Distance ?? 0), MO_ADD, 0 + (this.KnockBackDistance ?? 0));
        MoveAway(Owner, Attacker, 1500, 5, 5 + (Distance ?? 0), 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(CharVars.MundoPercent);
        RequireVar(this.BaseDamage);
        RequireVar(this.DamageAdded);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.AllyAttackSpeedMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.MoveMod);
        SpellEffectCreate(this.slow, default, "Global_Slow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, false, false, default, default);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.AttackSpeedMod);
        RequireVar(this.AllyAttackSpeedMod);
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        Duration = GetBuffRemainingDuration(Owner, "OnTheHunt");
        ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", default, true, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "OnTheHuntAuraBuff", 1, 1, 0 + (Duration ?? 0), InstanceVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        RequireVar(this.DamageMod);
        RequireVar(this.BaseIncrease);
        OverrideAutoAttack(1, ExtraSlots, Owner, 1, true);
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamID = GetTeamID(default);
        RequireVar(this.Damage);
        SpellEffectCreate(this.a, default, "tristana_rocketJump_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, true, false, false, false, false, default, default);
        OwnerSkinID = GetSkinID(Owner);
        PlayAnimation("Spell2", 0, Owner, false, false, false);
        RequireVar(this.ManaRegenBonus);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        DamageToDeal = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
        });
        IncStat(IncFlatMovementSpeedMod, Owner, 50);
        RequireVar(this.SpellCooldown);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        OverrideAutoAttack(0, ExtraSlots, Owner, 0 + (Level ?? 0), false);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CancelAutoAttack(Owner, true);
        RequireVar(this.AttackSpeedMod);
        RequireVar(this.WillRemove);
        this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
        SetStatus(Owner, default, SetStealthed);
        this.InitialTime = GetTime();
        SetPARCostInc(Owner, 0, SpellSlots, -60, PAR_MANA);
        RequireVar(this.AttackSpeedMod);
        RequireVar(this.StealthDuration);
        RequireVar(this.InitialTime);
        RequireVar(this.TimeLastHit);
        ID = PushCharacterFade(Owner, 0.2, default, ID);
        this.WillFade = false;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetStealthed);
        RequireVar(this.AttackSpeedMod);
        SpellEffectCreate(this.DeathLotus, default, "katarinaDeathLotus_indicator_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        IncPermanentStat(IncPermanentPercentHPRegenMod, Owner, -0.5);
        BrandSkinID = GetSkinID(Attacker);
        TeamID = GetTeamID(default);
        If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
            SpellEffectCreate(this.a, default, "BrandBlaze_hotfoot_Frost.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_BUFFBONE_GLB_FOOT_LOC", default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.b, default, "BrandBlaze_hotfoot_Frost.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_BUFFBONE_GLB_FOOT_LOC", default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.c, default, "BrandFireMark_Frost.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.a, default, "BrandBlaze_hotfoot.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_BUFFBONE_GLB_FOOT_LOC", default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.b, default, "BrandBlaze_hotfoot.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_BUFFBONE_GLB_FOOT_LOC", default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.c, default, "BrandFireMark.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        IfHasBuff(Attacker, Attacker, "SwainMetamorphism", () => {
            this.MRDebuff = this.VALUE_BY_LEVEL;
        });
        Else(() => {
            this.MRDebuff = 0;
        });
        TeamOfOwner = GetTeamID(default);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectCreate(this.RootParticleEffect2, default, "SwainShadowGraspRootTemp.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.RootParticleEffect, default, "swain_shadowGrasp_magic.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        BrandSkinID = GetSkinID(Attacker);
        If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
            SpellEffectCreate(a, default, "BrandBlazeFrost_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(a, default, "BrandBlaze_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        });
        Count = GetBuffCountFromCaster(Owner, Owner, "BrandScorchCount");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 7, () => {
            SpellBuffAdd(Owner, Owner, "BrandScorch", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffRemoveStacks(Owner, Owner, "BrandScorchCount", 0);
        });
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        TeamOfOwner = GetTeamID(default);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.c, default, "BrandPHScorchGround.troy", default, TEAM_ORDER, 200, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.c, default, "BrandPHScorchGround.troy", default, TEAM_CHAOS, 200, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        });
        ForEachUnitInTargetArea(Attacker, Owner, 150, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        SetDodgePiercing(Owner, true);
        ForEachUnitInTargetArea(Attacker, Owner, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                TargetPos = GetUnitPosition(Target);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                SpellCast(Attacker, Unit, default, default, true, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, TargetPos);
            });
        });
        RequireVar(this.FissureDamage);
        RequireVar(this.AblazeBonusDamage);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.GroundParticleEffect, this.GroundParticleEffect2, "BrandPOF_tar_green.troy", "BrandPOF_tar_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        BrandSkinID = GetSkinID(Attacker);
        If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
            SpellEffectCreate(this.a, default, "BrandPOF_Frost_charge.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.a, default, "BrandPOF_charge.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        this.HPMod = 0;
        this.APMod = 0;
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        OverrideAutoAttack(1, ExtraSlots, Owner, 0 + (Level ?? 0), true);
        SpellEffectCreate(this.asdf1, default, "kennen_ds_proc.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_hand", default, Owner, default, default, false, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.GlobeOne, default, "kennen_mos1.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(default, default, "Vladdeath.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, default, default, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        RequireVar(this.RushDamage);
        RequireVar(this.BonusDamage);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "kennen_ss_aoe_green.troy", "kennen_ss_aoe_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, Owner, Owner, default, Owner, false, default, default, false, false, default, default);
        this.Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SpellEffectCreate(this.ar, default, "kennen_lr_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.MoveSpeedMod = 1;
        this.DefenseBonus = this.VALUE_BY_LEVEL;
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetCanAttack);
        IncStat(IncFlatAttackRangeMod, Owner, -575);
        this.LitRush = PushCharacterFade(Owner, 0, default, this.LitRush);
        NextBuffVars.DefenseBonus = this.DefenseBonus;
        SpellBuffAdd(Owner, Owner, "KennenLightningRushBuff", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        TeamID = GetTeamID(default);
        this.DoOnce = false;
        Level = GetLevel(Owner);
        this.Count = GetBuffCountFromAll(Owner, "KennenMarkofStorm");
        DoOnce = false;
        If(this.Count, default, CO_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "KennenParticleHolder", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(this.Count, default, CO_EQUAL, default, 2, () => {
            this.DoOnce = true;
            SpellBuffRemove(Owner, "KennenParticleHolder", Owner, default);
            SpellEffectCreate(this.GlobeTwo, default, "kennen_mos2.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        });
        If(this.Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
            IfNotHasBuff(Owner, Attacker, "KennenMoSDiminish", () => {
                BreakSpellShields(Owner);
                IncPAR(Attacker, 25);
                SpellEffectCreate(part, default, "kennen_mos_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
                ApplyStun(Attacker, Owner, 1.25);
                SpellBuffRemoveStacks(Owner, Attacker, "KennenMarkofStorm", 0);
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    SpellBuffAdd(Attacker, Owner, "KennenMoSDiminish", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
            Else(() => {
                BreakSpellShields(Owner);
                IncPAR(Attacker, 25);
                SpellEffectCreate(part, default, "kennen_mos_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
                ApplyStun(Attacker, Owner, 0.6);
                SpellBuffRemoveStacks(Owner, Attacker, "KennenMarkofStorm", 0);
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    SpellBuffAdd(Attacker, Owner, "KennenMoSDiminish", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
        });
        RequireVar(this.DefenseBonus);
        Caster = SetBuffCasterUnit();
        RequireVar(this.DamageIncrease);
        RequireVar(this.DamagePerLevel);
        ApplyAssistMarker(Attacker, Owner, 10);
        this.VladSkinID = GetSkinID(Caster);
        If(this.VladSkinID, default, CO_EQUAL, default, 5, () => {
            SpellEffectCreate(this.varrr1, default, "VladHemoplague_BloodKing_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.varrr1, default, "VladHemoplague_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, default, default, false, false, false, false, false, default, default);
        });
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.Level);
        RequireVar(this.DamageReduction);
        this.ID = PushCharacterFade(Owner, 0.5, default, this.ID);
        RequireVar(this.IncrementGain);
        CharVars.IncrementGain = Math(0 + (CharVars.IncrementGain ?? 0), MO_ADD, 0 + (this.IncrementGain ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.BonusDamage = this.VALUE_BY_LEVEL;
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            
        });
        Else(() => {
            SpellBuffRemoveCurrent(Owner);
        });
        SpellEffectCreate(default, default, "VladDeath.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_Waist", default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.KIRHand, default, "katarina_killerInstinct_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.KILHand, default, "katarina_killerInstinct_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Target, default, default, false, default, default, false, false, default, default);
        RequireVar(this.DamageTick);
        RequireVar(this.MoveSpeedMod);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetSilenced);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        this.ID = PushCharacterFade(Owner, 0, default, this.ID);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "VladSanguinePool_buf.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 2.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Idle1down", 2.25, Owner, false, true, true);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        this.HasteBoost = 0.375;
        SpellEffectCreate(this.temp, default, "Vlad_SaguinePool_Skin_Swap.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.AttackDmgMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(Temp, default, "exile_W_tar_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellEffectCreate(Temp, Temp2, "exile_ult_mis_tar.troy ", "exile_ult_mis_tar.troy ", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        });
        SpellEffectCreate(Temp, Temp2, "exile_ult_mis_tar_minion.troy ", "exile_ult_mis_tar_minion.troy ", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        RequireVar(this.AkaliAP);
        this.BonusDmgPerc = 0.08;
        this.AkaliAP = Math(0 + (this.AkaliAP ?? 0), MO_SUBTRACT, 20);
        this.AddBonusDmgPerc = Math(0 + (this.AkaliAP ?? 0), MO_DIVIDE, 600);
        this.DmgMult = Math(0 + (this.BonusDmgPerc ?? 0), MO_ADD, 0 + (this.AddBonusDmgPerc ?? 0));
        DmgMultTooltip = Math(100, MO_MULTIPLY, 0 + (this.DmgMult ?? 0));
        SetBuffToolTipVar(1, 0 + (DmgMultTooltip ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        IfHasBuff(Attacker, Attacker, "RivenFengShuiEngine", () => {
            SpellEffectCreate(this.Temp, default, "exile_W_cast_ult_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.Temp, default, "exile_W_cast_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.Temp, default, "exile_W_weapon_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.Temp, default, "exile_W_cast_ult_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
            ForEachUnitInTargetArea(Attacker, Owner, 360, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                If(Unit, default, CO_IS_NOT_DEAD, default, default, () => {
                    ApplyStun(Attacker, Unit, 0.75);
                });
            });
        });
        Else(() => {
            SpellEffectCreate(this.Temp, default, "exile_W_cast_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.Temp, default, "exile_W_cast_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.Temp, default, "exile_W_weapon_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, default, default, false, false, false, false, false, default, default);
            ForEachUnitInTargetArea(Attacker, Owner, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                If(Unit, default, CO_IS_NOT_DEAD, default, default, () => {
                    ApplyStun(Attacker, Unit, 0.75);
                });
            });
        });
        RequireVar(this.SpeedBoost);
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.SpeedBoost ?? 0));
        CasterID = GetTeamID(default);
        SpellEffectCreate(this.Particle2, this.Particle, "akali_smoke_bomb_tar_team_green.troy", "akali_smoke_bomb_tar_team_red.troy", CasterID ?? TEAM_UNKNOWN, 250, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetNoRender);
        this.AkaliAP = GetStat(GetFlatMagicDamageMod, Owner);
        this.AkaliDmg = GetStat(GetFlatPhysicalDamageMod, Owner);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "RivenCounterDash");
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.AkaliStealth, default, "akali_twilight_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        ID = PushCharacterFade(Owner, 0.2, default, ID);
        SetStatus(Owner, default, SetStealthed);
        SetStatus(Owner, default, SetGhosted);
        this.WillRemove = false;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.MoveSpeedBuff = this.VALUE_BY_LEVEL;
        Dist = DistanceBetweenObjects("Attacker", "Owner");
        Dist = Math(225, MO_ADD, 0 + (Dist ?? 0));
        MoveAway(Owner, Attacker, 200, 10, 0 + (Dist ?? 0), 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, FACE_MOVEMENT_DIRECTION);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        this.ArmorIncrease = this.VALUE_BY_LEVEL;
        RequireVar(this.MotaDamage);
        RequireVar(this.EnergyReturn);
        RequireVar(this.VampPercent);
        SpellEffectCreate(this.a, default, "akali_markOftheAssasin_marker_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.b, default, "akali_markOftheAssasin_marker_tar_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.DoOnce = true;
        SpellEffectCreate(this.Temp, default, "RivenSwordBlue.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "weapon", default, Owner, default, default, false, default, default, false, false, default, default);
        TotalAD = GetTotalAttackDamage(Owner);
        BonusAD = Math(0 + (TotalAD ?? 0), MO_MULTIPLY, 0.2);
        this.BonusAD = BonusAD;
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.BonusAD ?? 0));
        IncStat(IncFlatAttackRangeMod, Owner, 75);
        OverrideAnimation("Attack1", "Attack1_ult", Owner);
        OverrideAnimation("Attack2", "Attack2_ult", Owner);
        OverrideAnimation("Attack3", "Attack3_ult", Owner);
        OverrideAnimation("Crit", "Crit_ult", Owner);
        OverrideAnimation("Idle1", "Idle1_ult", Owner);
        OverrideAnimation("Run", "Run_ult", Owner);
        OverrideAnimation("Spell1a", "Spell1a_ult", Owner);
        OverrideAnimation("Spell1b", "Spell1b_ult", Owner);
        OverrideAnimation("Spell1c", "Spell1c_ult", Owner);
        OverrideAnimation("Spell2", "Spell2_ult", Owner);
        OverrideAnimation("Spell3", "Spell3_ult", Owner);
        AttackDamage = GetTotalAttackDamage(Owner);
        BaseAD = GetStat(GetBaseAttackDamage, Owner);
        AttackDamage = Math(0 + (AttackDamage ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
        QAttackDamage = Math(0.7, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
        SetSpellToolTipVar(0 + (QAttackDamage ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        RAttackDamage = Math(1.8, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
        SetSpellToolTipVar(0 + (RAttackDamage ?? 0), 2, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        EAttackDamage = Math(0 + (AttackDamage ?? 0), MO_MULTIPLY, 1);
        SetSpellToolTipVar(0 + (EAttackDamage ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        WAttackDamage = Math(1, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
        SetSpellToolTipVar(0 + (WAttackDamage ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SpellEffectCreate(this.Temp2, default, "exile_ult_blade_swap_base.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_2", default, Owner, "BUFFBONE_GLB_WEAPON_2", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Temp3, default, "exile_ult_attack_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_hand", default, Owner, "BUFFBONE_GLB_WEAPON_2", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Temp4, this.Temp, "exile_ult_attack_buf.troy", "RivenBladePiece", TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_hand", default, Owner, "BUFFBONE_GLB_WEAPON_2", default, false, false, false, false, false, default, default);
        RAttackDamage = Math(0.6, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
        SetSpellToolTipVar(0 + (RAttackDamage ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SpellBuffAdd(Owner, Owner, "RivenWindSlashReady", 1, 1, 15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SetVoiceOverride("Ult", Owner);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "RivenIzunaBlade");
        SetSlotSpellCooldownTimeVer2(0.5, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        this.MovementSpeed = this.VALUE_BY_LEVEL;
        this.AttackSpeed = this.VALUE_BY_LEVEL;
        RequireVar(this.dashSpeed);
        RequireVar(this.TargetPos);
        RequireVar(this.Distance);
        RequireVar(this.DamageVar);
        TargetPos = this.TargetPos;
        PlayAnimation("Spell4", 0, Owner, true, false, true);
        Move(Owner, TargetPos, 0 + (this.dashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (this.Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.SelfParticle, default, "akali_shadowDance_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        this.WillRemove = false;
        SetStatus(Owner, default, SetGhosted);
        RequireVar(this.AkaliDmg);
        this.BaseVampPercent = 0.08;
        this.AkaliDmg = Math(0 + (this.AkaliDmg ?? 0), MO_SUBTRACT, 10);
        this.AdditionalVampPercent = Math(0 + (this.AkaliDmg ?? 0), MO_DIVIDE, 600);
        CharVars.VampPercent = Math(0 + (this.BaseVampPercent ?? 0), MO_ADD, 0 + (this.AdditionalVampPercent ?? 0));
        this.VampPercentTooltip = Math(100, MO_MULTIPLY, 0 + (CharVars.VampPercent ?? 0));
        SetBuffToolTipVar(1, 0 + (this.VampPercentTooltip ?? 0));
        TeamID = GetTeamID(default);
        RequireVar(this.InitialTime);
        RequireVar(this.TimeLastHit);
        this.WillFade = true;
        IfNotHasBuff(Owner, Owner, "Recall", () => {
            ID = PushCharacterFade(Owner, 0.2, default, ID);
            this.WillFade = false;
            SpellEffectCreate(this.abc, default, "akali_invis_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        });
        RequireVar(this.DotDamage);
        RequireVar(this.moveSpeedMod);
        RequireVar(this.GoldGain);
        RequireVar(this.DamageAmount);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        If(teamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(Boom, default, "pirate_cannonBarrage_point.troy", default, TEAM_ORDER, 225, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(Boom, default, "pirate_cannonBarrage_point.troy", default, TEAM_CHAOS, 225, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, false, default, default);
        });
        RequireVar(this.CastPosition);
        SpellBuffAdd(Owner, Owner, "ExpirationTimer", 1, 1, 12, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        CastPosition = this.CastPosition;
        SpellEffectCreate(this.Particle, this.Particle2, "pirate_cannonBarrage_aoe_indicator_green.troy", "pirate_cannonBarrage_aoe_indicator_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, CastPosition, Target, default, default, false, default, default, false, false, default, default);
        this.BubbleID = AddPosPerceptionBubble(TeamOfOwner, 650, CastPosition, 8, Nothing, false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(PH, default, "akali_shadowDance_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, default, default, default, default, default, default);
        RequireVar(this.DamagePerTick);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SpellEffectCreate(this.Particle, default, default, default, default, default, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, default, default, default, default, default, default, default);
        SpellEffectCreate(HealParticle, default, "akali_shadowSwipe_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        RequireVar(this.DamageBlock);
        IncreaseShield(Owner, 0 + (this.DamageBlock ?? 0), true, true);
        SetStatus(Owner, default, SetGhosted);
        IncStat(IncAcquisitionRangeMod, Owner, -600);
        OwnerVar = GetTeamID(default);
        SpellEffectCreate(a, default, "exile_Q_tar_03.troy", default, OwnerVar ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(a, default, "exile_Q_tar_04.troy", default, OwnerVar ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 1);
        RequireVar(this.DamagePerLevel);
        RequireVar(this.ManaCost);
        RequireVar(this.TargetPos);
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Self, Owner);
        TargetPos = this.TargetPos;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "cryo_storm_green_team.troy", "cryo_storm_red_team.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Attacker, TargetPos, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyDamage(Attacker, Unit, 0 + (this.DamagePerLevel ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.125, 1, false, false, Attacker);
            NextBuffVars.AttackSpeedMod = -0.2;
            NextBuffVars.MovementSpeedMod = -0.2;
            SpellBuffAdd(Attacker, Unit, "Chilled", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        IncStat(IncAcquisitionRangeMod, Owner, -350);
        RequireVar(this.DamagePerLevel);
        SpellEffectCreate(this.AmbientParticle, default, "cryo_storm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetTargetable);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "RivenTriCleaveBuffer");
        SetSlotSpellCooldownTimeVer2(0.1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        RequireVar(this.TargetPos);
        RequireVar(this.Count);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CancelAutoAttack(Owner, false);
        AttackDamage = GetTotalAttackDamage(Owner);
        BaseAD = GetStat(GetBaseAttackDamage, Owner);
        AttackDamage = Math(0 + (AttackDamage ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
        AttackDamage = Math(0 + (AttackDamage ?? 0), MO_MULTIPLY, 0.7);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.BonusDamage = this.VALUE_BY_LEVEL;
        TotalDamage = Math(0 + (AttackDamage ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
        this.TotalDamage = TotalDamage;
        ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffClear(Unit, "RivenTriCleaveDamageDebuff");
        });
        If(this.Count, default, CO_NOT_EQUAL, default, 2, () => {
            FocalPoint = GetPointByUnitFacingOffset(Owner, 125, 0);
            ForEachUnitInTargetArea(Owner, FocalPoint, 150, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RivenTriCleaveDamageDebuff", false, (Unit) => {
                SpellBuffAdd(Owner, Unit, "RivenTriCleaveDamageDebuff", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                ApplyDamage(Owner, Unit, 0 + (this.TotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Owner);
            });
            ForEachUnitInTargetArea(Owner, Owner, 75, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RivenTriCleaveDamageDebuff", false, (Unit) => {
                SpellBuffAdd(Owner, Unit, "RivenTriCleaveDamageDebuff", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                ApplyDamage(Owner, Unit, 0 + (this.TotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Owner);
            });
        });
        If(this.Count, default, CO_EQUAL, default, 0, () => {
            IfHasBuff(Owner, Owner, "RivenFengShuiEngine", () => {
                SpellEffectCreate(default, this.SwordStreak, "exile_Q_01_trail_02_ult.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", default, Owner, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(default, this.SwordStreak, "exile_Q_03_trail.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_hand", default, Owner, default, default, true, false, false, false, false, default, default);
                SpellEffectCreate(default, this.SwordStreak, "exile_Q_01_trail_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", default, Owner, default, default, true, false, false, false, false, default, default);
            });
        });
        If(this.Count, default, CO_EQUAL, default, 1, () => {
            IfHasBuff(Owner, Owner, "RivenFengShuiEngine", () => {
                SpellEffectCreate(default, this.SwordStreak, "exile_Q_02_trail_02_ult.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", default, Owner, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(default, this.SwordStreak, "exile_Q_03_trail.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_hand", default, Owner, default, default, true, false, false, false, false, default, default);
                SpellEffectCreate(default, this.SwordStreak, "exile_Q_02_trail_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", default, Owner, default, default, true, false, false, false, false, default, default);
            });
        });
        If(this.Count, default, CO_EQUAL, default, 2, () => {
            IfHasBuff(Owner, Owner, "RivenFengShuiEngine", () => {
                SpellEffectCreate(default, this.SwordStreak, "exile_Q_03_trail_02_ult.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", default, Owner, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(default, this.SwordStreak, "exile_Q_03_trail.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_hand", default, Owner, default, default, true, false, false, false, false, default, default);
                SpellEffectCreate(default, this.SwordStreak, "exile_Q_03_trail_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", default, Owner, default, default, true, false, false, false, false, default, default);
            });
        });
        RequireVar(this.TargetPos);
        RequireVar(this.Level);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "RivenTriCleaveBuffer");
        SetSlotSpellCooldownTimeVer2(0.1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        RequireVar(NextBuffVars.ParticleID);
        RequireVar(NextBuffVars.WillRemove);
        BouncePos = GetRandomPointInAreaUnit(Owner, 80, 80);
        Move(Owner, BouncePos, 90, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 80, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamID = GetTeamID(default);
        SpellEffectCreate(asf, default, "Powerfist_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Target, default, default, true, default, default, default, default, default, default);
        RequireVar(this.SpellCooldown);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        OverrideAutoAttack(1, ExtraSlots, Owner, 1, true);
        LandPos = GetUnitPosition(Attacker);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanCast);
        Move(Owner, LandPos, 1800, 5, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        OwnerVar = GetTeamID(default);
        SpellEffectCreate(a, default, "exile_Q_tar_01.troy", default, OwnerVar ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(a, default, "exile_Q_tar_02.troy", default, OwnerVar ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        Count = GetBuffCountFromAll(Owner, "EzrealRisingSpellForce");
        TotalAttackSpeed = Math(0 + (Count ?? 0), MO_MULTIPLY, 10);
        SetBuffToolTipVar(1, 0 + (TotalAttackSpeed ?? 0));
        IfHasBuff(Attacker, Attacker, "EzrealRisingSpellForce", () => {
            If(Count, default, CO_EQUAL, default, 1, () => {
                SpellEffectCreate(this.Particle, default, "Ezreal_glow1.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_hand", default, Owner, default, default, false, default, default, default, default, default, default);
            });
            If(Count, default, CO_EQUAL, default, 2, () => {
                SpellEffectCreate(this.Particle, default, "Ezreal_glow2.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_hand", default, Owner, default, default, false, default, default, default, default, default, default);
            });
            If(Count, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(this.Particle, default, "Ezreal_glow3.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_hand", default, Owner, default, default, false, default, default, default, default, default, default);
            });
            If(Count, default, CO_EQUAL, default, 4, () => {
                SpellEffectCreate(this.Particle, default, "Ezreal_glow4.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_hand", default, Owner, default, default, false, default, default, default, default, default, default);
            });
            If(Count, default, CO_EQUAL, default, 5, () => {
                If(this.LastCount, default, CO_NOT_EQUAL, default, 5, () => {
                    SpellEffectCreate(this.Particle, default, "Ezreal_glow5.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_hand", default, Owner, default, default, false, default, default, default, default, default, default);
                });
            });
            this.LastCount = Count;
        });
        this.lastTooltip = 0;
        RequireVar(this.AttackSpeedMod);
        RequireVar(this.MoveSpeedMod);
        this.BlitzcrankID = GetSkinID(Owner);
        If(this.BlitzcrankID, default, CO_EQUAL, default, 4, () => {
            SpellEffectCreate(this.One, default, "SteamGolem_Piltover_Overdrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_PIPE_L_1", default, Owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.Two, default, "SteamGolem_Piltover_Overdrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_PIPE_L_2", default, Owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.Three, default, "SteamGolem_Piltover_Overdrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_PIPE_L_3", default, Owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.Four, default, "SteamGolem_Piltover_Overdrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_PIPE_L_4", default, Owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.Five, default, "SteamGolem_Piltover_Overdrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_PIPE_R_1", default, Owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.Six, default, "SteamGolem_Piltover_Overdrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_PIPE_R_2", default, Owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.Seven, default, "SteamGolem_Piltover_Overdrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_PIPE_R_3", default, Owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.Eight, default, "SteamGolem_Piltover_Overdrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_PIPE_R_4", default, Owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.ClassicOverdrive, default, "Overdrive_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.WheelOne, default, "SteamGolem_Piltover_Overdrive_Tires.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BL_wheel", default, Owner, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.WheelTwo, default, "SteamGolem_Piltover_Overdrive_Tires.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BR_wheel", default, Owner, default, default, false, default, default, default, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.ClassicOverdrive, default, "Overdrive_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        });
        Count = GetBuffCountFromCaster(Owner, Owner, "RivenTriCleave");
        SetBuffToolTipVar(1, 0 + (Count ?? 0));
        SetBuffToolTipVar(1, 5);
        SetBuffToolTipVar(3, 3);
        SetStatus(Owner, default, SetCanMove);
        RequireVar(this.ManaShield);
        RequireVar(this.amountToSubtract);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.asdf1, default, "SteamGolemShield.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        IncreaseShield(Owner, 0 + (this.ManaShield ?? 0), true, true);
        RequireVar(this.AttackSpeedModNegative);
        RequireVar(this.AttackSpeedMod);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        ForEachUnitInTargetArea(Owner, Owner, 100, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes ", default, false, (Unit) => {
            ghosted = GetStatus(Unit, GetGhosted);
            If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                PushDistance = 120;
            });
            Else(() => {
                PushDistance = 250;
            });
            If(Owner, default, CO_IS_TARGET_BEHIND_ME, Unit, default, () => {
                TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (PushDistance ?? 0), 180);
            });
            Else(() => {
                TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (PushDistance ?? 0), 0);
            });
            NextBuffVars.TargetPos = TargetPos;
            If(Attacker, default, CO_DIFFERENT_TEAM, Unit, default, () => {
                ApplyDamage(Attacker, Unit, 0, TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 0, 0, 1, false, false, Attacker);
            });
            If(ghosted, default, CO_EQUAL, default, false, () => {
                SpellBuffAdd(Attacker, Unit, "GlobalWallPush", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        SetTargetingType(0, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Self, Owner);
        this.MissileAlive = 0;
        this.FlashMissileId = 0;
        RequireVar(this.TargetPos);
        TargetPos = this.TargetPos;
        Move(Owner, TargetPos, 600, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, KEEP_CURRENT_FACING);
        ApplyAssistMarker(Attacker, Owner, 10);
        this.CasterID = PushCharacterData("Udyr", Owner, false);
        OverrideAutoAttack(3, ExtraSlots, Owner, 1, true);
        OverrideAnimation("Run", "Run2", Owner);
        OverrideAnimation("Idle1", "Idle2", Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.MoveSpeedMod = this.VALUE_BY_LEVEL;
        SpellEffectCreate(this.bearparticle, default, "PrimalCharge.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        PlayAnimation("Spell3", 0, Owner, true, false, true);
        StartTrackingCollisions(Owner, true);
        RequireVar(this.DashSpeed);
        RequireVar(this.TargetPos);
        RequireVar(this.DiceVersion);
        RequireVar(this.Distance);
        RequireVar(this.BonusDamage);
        RequireVar(this.ShinyParticle);
        RequireVar(this.ArmorShred);
        TargetPos = this.TargetPos;
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        Move(Owner, TargetPos, 0 + (this.DashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (this.Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        this.HitUnit = false;
        this.RageBonus = false;
        RageAmount = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
        If(RageAmount, default, CO_GREATER_THAN_OR_EQUAL, default, 50, () => {
            If(this.DiceVersion, default, CO_EQUAL, default, true, () => {
                this.RageBonus = true;
                IncPAR(Owner, -50);
                SpellEffectCreate(this.ShinyParticle, default, "RenektonSliceDice_buf_rage.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "lhand", default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(this.ShinyParticle, default, "RenektonSliceDice_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "lhand", default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        Else(() => {
            SpellEffectCreate(this.ShinyParticle, default, "RenektonSliceDice_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "lhand", default, Target, default, default, true, false, false, false, false, default, default);
        });
        this.Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ForEachUnitInTargetArea(Owner, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", false, (Unit) => {
            ShouldHit = true;
            Visible = CanSeeTarget(Owner, Unit);
            If(Visible, default, CO_EQUAL, default, false, () => {
                If(Unit, default, CO_IS_NOT_HERO, default, default, () => {
                    ShouldHit = false;
                });
            });
            this.HitUnit = true;
            BaseAttack = GetStat(GetBaseAttackDamage, Owner);
            HitDamage = Math(0, MO_MULTIPLY, 0 + (BaseAttack ?? 0));
            HitDamage = Math(0 + (HitDamage ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
            SpellBuffAdd(Owner, Unit, "RenektonTargetSliced", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            IfHasBuff(Owner, Owner, "RenektonSliceAndDiceDelay", () => {
                
            });
            ElseIf(this.DiceVersion, default, CO_EQUAL, default, true, () => {
                
            });
            ElseIf(ShouldHit, default, CO_EQUAL, default, false, () => {
                
            });
            Else(() => {
                SpellBuffAdd(Owner, Owner, "RenektonSliceAndDiceDelay", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SetSlotSpellCooldownTimeVer2(0, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            });
            If(ShouldHit, default, CO_EQUAL, default, true, () => {
                OwnerVar = GetTeamID(default);
                BreakSpellShields(Unit);
                SpellBuffAdd(Owner, Unit, "RenektonBloodSplatterTarget", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                If(this.RageBonus, default, CO_EQUAL, default, true, () => {
                    NextBuffVars.ArmorShred = this.ArmorShred;
                    SpellBuffAdd(Owner, Unit, "RenektonSliceAndDiceDebuff", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                    ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1.5, 0, 0.9, false, false, Owner);
                });
                Else(() => {
                    ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0.9, false, false, Owner);
                });
            });
        });
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "RenektonDice");
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.a, default, "shyvana_flameBreath_dragon_burn.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.b, default, "shyvana_flameBreath_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.c, default, "shyvana_flameBreath_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        RequireVar(this.Gravity);
        RequireVar(this.Speed);
        RequireVar(this.Position);
        RequireVar(this.IdealDistance);
        Position = this.Position;
        Move(Owner, Position, 0 + (this.Speed ?? 0), 0 + (this.Gravity ?? 0), 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (IdealDistance ?? 0), FACE_MOVEMENT_DIRECTION);
        ApplyAssistMarker(Attacker, Owner, 10);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        TeamID = GetTeamID(default);
        SpellEffectCreate(TargetParticle, default, "shyvana_ult_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        RequireVar(this.ArmorShred);
        IncStat(IncPercentArmorMod, Owner, 0 + (this.ArmorShred ?? 0));
        RequireVar(this.TargetPos);
        this.HasDealtDamage = false;
        this.HasCreatedRing = false;
        SetStatus(Owner, default, SetCanCast);
        TeamID = GetTeamID(default);
        PlayAnimation("Spell4", 0, Owner, true, false, true);
        SpellEffectCreate(this.SelfParticle, default, "shyvana_R_fire_skin.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle2, default, "shyvana_ult_cast_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle11, default, "shyvana_ult_cast_02_firefill.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_forearm", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle12, default, "shyvana_ult_cast_02_firefill.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_forearm", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle3, default, "shyvana_ult_cast_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle4, default, "shyvana_ult_cast_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_shoulder", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle5, default, "shyvana_ult_cast_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_shoulder", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle6, default, "shyvana_ult_cast_02_arm.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_forearm", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle7, default, "shyvana_ult_cast_02_arm.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_forearm", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle8, default, "shyvana_ult_cast_02_tail.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "Tail_g", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle9, default, "shyvana_ult_cast_02_hand.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_hand", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle10, default, "shyvana_ult_cast_02_hand.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_hand", default, Target, default, default, true, false, false, false, false, default, default);
        this.DoOnce = 0;
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        teamID = GetTeamID(default);
        SpellEffectCreate(a, default, "Incinerate_cas.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "top", default, Target, default, default, true, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        PlayAnimation("Spell3", 0, Owner, true, false, true);
        StartTrackingCollisions(Owner, true);
        RequireVar(this.DashSpeed);
        RequireVar(this.TargetPos);
        RequireVar(this.DiceVersion);
        RequireVar(this.Distance);
        RequireVar(this.BonusDamage);
        RequireVar(this.ShinyParticle);
        RequireVar(this.ArmorShred);
        TargetPos = this.TargetPos;
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        Move(Owner, TargetPos, 0 + (this.DashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (this.Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        this.HitUnit = false;
        this.RageBonus = false;
        RageAmount = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
        If(RageAmount, default, CO_GREATER_THAN_OR_EQUAL, default, 50, () => {
            If(this.DiceVersion, default, CO_EQUAL, default, true, () => {
                this.RageBonus = true;
                IncPAR(Owner, -50);
                SpellEffectCreate(this.ShinyParticle, default, "RenektonSliceDice_buf_rage.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "lhand", default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(this.ShinyParticle, default, "RenektonSliceDice_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "lhand", default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        Else(() => {
            SpellEffectCreate(this.ShinyParticle, default, "RenektonSliceDice_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "lhand", default, Target, default, default, true, false, false, false, false, default, default);
        });
        this.Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ForEachUnitInTargetArea(Owner, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", false, (Unit) => {
            ShouldHit = true;
            Visible = CanSeeTarget(Owner, Unit);
            If(Visible, default, CO_EQUAL, default, false, () => {
                If(Unit, default, CO_IS_NOT_HERO, default, default, () => {
                    ShouldHit = false;
                });
            });
            this.HitUnit = true;
            BaseAttack = GetStat(GetBaseAttackDamage, Owner);
            HitDamage = Math(0, MO_MULTIPLY, 0 + (BaseAttack ?? 0));
            HitDamage = Math(0 + (HitDamage ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
            SpellBuffAdd(Owner, Unit, "RenektonTargetSliced", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            IfHasBuff(Owner, Owner, "RenektonSliceAndDiceDelay", () => {
                
            });
            ElseIf(this.DiceVersion, default, CO_EQUAL, default, true, () => {
                
            });
            ElseIf(ShouldHit, default, CO_EQUAL, default, false, () => {
                
            });
            Else(() => {
                SpellBuffAdd(Owner, Owner, "RenektonSliceAndDiceDelay", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SetSlotSpellCooldownTimeVer2(0, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            });
            If(ShouldHit, default, CO_EQUAL, default, true, () => {
                OwnerVar = GetTeamID(default);
                BreakSpellShields(Unit);
                SpellBuffAdd(Owner, Unit, "RenektonBloodSplatterTarget", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                If(this.RageBonus, default, CO_EQUAL, default, true, () => {
                    NextBuffVars.ArmorShred = this.ArmorShred;
                    SpellBuffAdd(Owner, Unit, "RenektonSliceAndDiceDebuff", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                    ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1.5, 0, 0.9, false, false, Owner);
                });
                Else(() => {
                    ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0.9, false, false, Owner);
                });
            });
        });
        this.CasterID = PushCharacterData("ShyvanaDragon", Owner, false);
        IfHasBuff(Owner, Owner, "ShyvanaImmolationAura", () => {
            RemainingDuration = GetBuffRemainingDuration(Owner, "ShyvanaImmolationAura");
            SpellBuffRemove(Owner, "ShyvanaImmolationAura", Owner, 0);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.MovementSpeed = this.VALUE_BY_LEVEL;
            NextBuffVars.DamagePerTick = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Owner, "ShyvanaImmolateDragon", 1, 1, 0 + (RemainingDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "ShyvanaDoubleAttack", () => {
            RemainingDuration = GetBuffRemainingDuration(Owner, "ShyvanaDoubleAttack");
            SpellBuffRemove(Owner, "ShyvanaDoubleAttack", Owner, 0);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Owner, "ShyvanaDoubleAttackDragon", 1, 1, 0 + (RemainingDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "ShyvanaDoubleAttackDragon");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Cooldown2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "ShyvanaImmolateDragon");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown2 ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Cooldown3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "ShyvanaFireballDragon2");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown3 ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellBuffAdd(Owner, Owner, "ShyvanaDragonScales", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        RequireVar(this.CasterID);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.a, default, "shyvana_flameBreath_dragon_burn.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.b, default, "shyvana_flameBreath_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.c, default, "shyvana_flameBreath_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellEffectCreate(default, default, "RenektonDominus_transform", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        IncScaleSkinCoef(0.2, Owner);
        RequireVar(this.Level);
        RequireVar(this.BonusHealth);
        RequireVar(this.BurnDamage);
        RequireVar(this.MaximumSpeed);
        this.BonusSpeed = 0;
        ForEachUnitInTargetArea(Owner, Owner, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyDamage(Owner, Unit, 0 + (this.BurnDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Owner);
        });
        OwnerVar = GetTeamID(default);
        SpellEffectCreate(a, default, "RenektonSliceDice_tar.troy", default, OwnerVar ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        PlayAnimation("Crit", 0.5, Owner, false, false, default);
        SetStatus(Owner, default, SetCanAttack);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        OwnerVar = GetTeamID(default);
        SpellEffectCreate(a, default, "Renekton_Weapon_CoolOff.troy", default, OwnerVar ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, "head", default, Owner, default, default, true, default, default, default, default, default, default);
        BouncePos = GetRandomPointInAreaUnit(Owner, 80, 80);
        Move(Owner, BouncePos, 90, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 80, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        ApplyAssistMarker(Attacker, Owner, 10);
        PlayAnimation("Spell4", 0, Owner, false, false, false);
        SpellBuffAdd(Owner, Owner, "EvelynnUnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        RequireVar(this.ArmorMod);
        RequireVar(this.SpellCooldown);
        RequireVar(this.BonusDamage);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CancelAutoAttack(Owner, true);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.Swung = false;
        RequireVar(this.TickDamage);
        CharVars.DoOnce = false;
        Caster = SetBuffCasterUnit();
        ApplyDamage(Caster, Owner, 0 + (this.TickDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0, 1, false, false, Caster);
        RequireVar(this.DrainPercent);
        RequireVar(this.MaxDrain);
        this.DrainCount = 0;
        this.DrainAmount = 0;
        SpellEffectCreate(this.a, default, "UdyrBuff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        RequireVar(this.DamagePerTick);
        RequireVar(this.MovementSpeed);
        TeamID = GetTeamID(default);
        CurPos = GetPointByUnitFacingOffset(Owner, 25, 180);
        NextBuffVars.DamagePerTick = this.DamagePerTick;
        Other3 = SpawnMinion("AcidTrail", "TestCube", "idle.lua", CurPos, TeamID ?? TEAM_CASTER, true, false, false, true, false, true, 0, false, true, Owner, default);
        SpellBuffAdd(Owner, Other3, "ShyvanaIDApplicator", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
        this.LastPosition = CurPos;
        ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            IfNotHasBuff(Unit, Attacker, "ShyvanaIDDamage", () => {
                NextBuffVars.DamagePerTick = this.DamagePerTick;
                SpellBuffAdd(Attacker, Unit, "ShyvanaIDDamage", 1, 1, 0.75, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        RequireVar(this.DamagePerTick);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetNoRender);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.a, default, "shyvana_scorchedEarth_dragon_01_trail.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Attacker);
        BreakSpellShields(Target);
        ApplyDamage(Attacker, Owner, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0 + (this.VALUE_BY_LEVEL ?? 0), 0, 1, false, false, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            SpellEffectCreate(a, default, "shyvana_doubleAttack_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        });
        RequireVar(this.DamagePerTick);
        RequireVar(this.MovementSpeed);
        BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.2);
        this.DamagePerTick = Math(0 + (this.DamagePerTick ?? 0), MO_ADD, 0 + (BonusAD ?? 0));
        ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyDamage(Attacker, Unit, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            TeamID = GetTeamID(default);
            SpellEffectCreate(a, default, "shyvana_scorchedEarth_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
        });
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.StealthDuration);
        RequireVar(this.StealthDuration);
        RequireVar(this.InitialTime);
        RequireVar(this.TimeLastHit);
        ID = PushCharacterFade(Owner, 0.2, default, ID);
        this.WillFade = false;
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        RequireVar(this.TeamID);
        RequireVar(this.DamagePerTick);
        BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.2);
        this.DamagePerTick = Math(0 + (this.DamagePerTick ?? 0), MO_ADD, 0 + (BonusAD ?? 0));
        ApplyDamage(Attacker, Owner, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        this.CasterID = PushCharacterData("UdyrPhoenix", Owner, false);
        SpellEffectCreate(this.phoenix, default, "phoenixpelt.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, default, default, default, default);
        CharVars.Count = 0;
        OverrideAutoAttack(4, ExtraSlots, Owner, 1, true);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.AbilityPowerInc = this.VALUE_BY_LEVEL;
        this.AttackDamageInc = this.VALUE_BY_LEVEL;
        SetBuffToolTipVar(1, 0 + (this.AbilityPowerInc ?? 0));
        SetBuffToolTipVar(2, 0 + (this.AttackDamageInc ?? 0));
        RequireVar(this.SpellCooldown);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        OverrideAutoAttack(3, ExtraSlots, Owner, 1, true);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.WillRemove);
        this.TeamID = GetTeamID(default);
        this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
        SetStatus(Owner, default, SetStealthed);
        SetPARCostInc(Owner, 1, SpellSlots, -60, PAR_MANA);
        SpellEffectCreate(this.RHand, default, "Renekton_Rage_State.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_Hand", default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.LHand, default, "Renekton_Rage_State.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_Hand", default, Target, default, default, false, default, default, default, default, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        IfHasBuff(Owner, Owner, "ShyvanaTransform", () => {
            this.DefenseToAdd = this.VALUE_BY_LEVEL;
        });
        Else(() => {
            this.DefenseToAdd = this.VALUE_BY_LEVEL;
        });
        RequireVar(this.SpellCooldown);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        IfHasBuff(Owner, Owner, "ShadowWalkSpeed", () => {
            SpellBuffRemove(Owner, "ShadowWalkSpeed", Owner, default);
        });
        TeamID = GetTeamID(default);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Attacker);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        BreakSpellShields(Target);
        ApplyDamage(Attacker, Owner, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0 + (this.VALUE_BY_LEVEL ?? 0), 0, 1, false, false, Attacker);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            SpellEffectCreate(a, default, "shyvana_doubleAttack_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        });
        Level = GetLevel(Owner);
        this.WillRemove = false;
        RebirthArmorMod = this.VALUE_BY_LEVEL;
        SetBuffToolTipVar(1, 0 + (RebirthArmorMod ?? 0));
        TeamID = GetTeamID(default);
        this.OneFrame = true;
        RequireVar(this.RebirthArmorMod);
        CurrentCooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        CurrentCooldown2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCooldown, default, CO_LESS_THAN_OR_EQUAL, default, 6, () => {
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 6);
        });
        If(CurrentCooldown2, default, CO_LESS_THAN_OR_EQUAL, default, 6, () => {
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 6);
        });
        this.SeaHorseID = PushCharacterData("AniviaEgg", Owner, false);
        IncHealth(Owner, 10000, Owner);
        SpellEffectCreate(this.EggTimer, default, "EggTimer.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SetBuffToolTipVar(1, -40);
        this.CasterID = PushCharacterData("UdyrTurtle", Owner, false);
        SpellEffectCreate(this.turtle, default, "turtlepelt.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Turtleparticle, default, "TurtleStance.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        OverrideAutoAttack(2, ExtraSlots, Owner, 1, true);
        this.CasterID = PushCharacterData("UdyrTiger", Owner, false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.tiger, default, "tigerpelt.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, true, default, default, false, false, default, default);
        OverrideAutoAttack(1, ExtraSlots, Owner, 1, true);
        RequireVar(this.passiveAttackSpeed);
        RequireVar(this.ShieldAmount);
        SpellEffectCreate(this.Turtleparticle, default, "TurtleStance.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(this.TurtleShield, default, "TurtleStance_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        IncreaseShield(Owner, 0 + (this.ShieldAmount ?? 0), true, true);
        RequireVar(this.DotDamage);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.lhand, default, "Udyr_Tiger_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_Finger", default, Owner, default, default, true, default, default, false, false, default, default);
        SpellEffectCreate(this.rhand, default, "Udyr_Tiger_buf_R.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_Finger", default, Owner, default, default, true, default, default, false, false, default, default);
        RequireVar(this.ShieldHealth);
        ApplyAssistMarker(Attacker, Owner, 10);
        IncreaseShield(Owner, 0 + (this.ShieldHealth ?? 0), true, false);
        RequireVar(this.MRminus);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        RequireVar(this.HealthTick);
        IncHealth(Owner, 0 + (this.HealthTick ?? 0), Owner);
        SpellEffectCreate(arr, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        this.VampPercent = 0.1;
        TooltipAmount = Math(100, MO_MULTIPLY, 0 + (this.VampPercent ?? 0));
        SetBuffToolTipVar(1, 0 + (TooltipAmount ?? 0));
        RequireVar(this.TickWorth);
        RequireVar(this.TickWorthMana);
        this.TickNumber = 1;
        SpellEffectCreate(arr, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        RequireVar(this.AttackSpeedMod);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.DamagePerTick);
        RequireVar(this.TargetPos);
        RequireVar(this.MRminus);
        TeamOfOwner = GetTeamID(default);
        TargetPos = this.TargetPos;
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.MRminus = this.MRminus;
        SpellEffectCreate(this.Particle2, this.Particle, "TormentedSoil_green_tar.troy", "TormentedSoil_red_tar.troy", TeamOfOwner ?? TEAM_UNKNOWN, 280, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, false, false, false, false, default, default);
        ForEachUnitInTargetArea(Attacker, TargetPos, 280, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Unit) => {
            ApplyDamage(Attacker, Unit, 0 + (this.DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, "TormentedSoilDebuff", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
            SpellEffectCreate(hi1, default, "FireFeet_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "L_foot", default, Unit, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(hi2, default, "FireFeet_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "R_foot", default, Unit, default, default, false, false, false, false, false, default, default);
        });
        RequireVar(this.activeAttackSpeed);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.AttackSpeedMod);
        RequireVar(this.BaseDamage);
        RequireVar(this.ChanceToKill);
        this.AlphaStrikeLaunched = false;
        SetStatus(Owner, default, SetCanMove);
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(this.glowblade, default, "yiglowblade.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "weaponstreak", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellBuffRemove(Owner, "MasterYiWujuDeactivated", Owner, default);
        RequireVar(this.BreakDamage);
        RequireVar(this.BreakStun);
        RequireVar(this.Broken);
        SpellEffectCreate(this.ParticleID, default, "SoulShackle_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "spine", default, Owner, "spine", default, false, default, default, false, false, default, default);
        this.ActivateTime = GetGameTime();
        Say(Owner, "game_lua_DoubleStrike", default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "trundle_PlagueBlock_green.troy", "trundle_PlagueBlock_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Nothing, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        RequireVar(this.ID);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhostProof);
        ForEachUnitInTargetArea(Attacker, Owner, 180, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes ", "GlobalWallPush", false, (Unit) => {
            ApplyAssistMarker(Attacker, Unit, 10);
            offsetAngle = GetOffsetAngle(Owner, Unit);
            TargetPos = GetPointByUnitFacingOffset(Owner, 200, 0 + (offsetAngle ?? 0));
            NextBuffVars.TargetPos = TargetPos;
            SpellBuffAdd(Attacker, Unit, "GlobalWallPush", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            If(Attacker, default, CO_DIFFERENT_TEAM, Unit, default, () => {
                ApplyDamage(Attacker, Unit, 0, TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 0, 0, 1, false, false, Attacker);
            });
        });
        RequireVar(this.TrueMove);
        MoveAway(Owner, Attacker, 750, 0, 0 + (this.TrueMove ?? 0), 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (this.TrueMove ?? 0), default);
        RequireVar(this.TotalDamage);
        CasterTeam = GetTeamID(default);
        SpellEffectCreate(Temp, default, "OrianaIzuna_tar.troy", default, CasterTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        ApplyDamage(Attacker, Owner, 0 + (this.TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        RequireVar(this.CastPos);
        RequireVar(this.TargetPos);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.Landed = false;
        RequireVar(this.armorMod);
        this.CD0 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        this.CD1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        this.CD2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        this.CougarID = PushCharacterData("Nidalee_Cougar", Owner, true);
        SpellEffectCreate(Particle, default, "nidalee_transform.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 4);
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        RequireVar(this.CastPos);
        RequireVar(this.TargetPos);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.Landed = false;
        RequireVar(this.armorMod);
        this.CD0 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        this.CD1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        this.CD2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        this.CougarID = PushCharacterData("Nidalee_Cougar", Owner, true);
        SpellEffectCreate(Particle, default, "nidalee_transform.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 4);
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        SetStatus(Owner, default, SetStunned);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.Level);
        ApplyAssistMarker(Attacker, Target, 10);
        PlayAnimation("Spell3b", 0.5, Owner, false, true, false);
        RequireVar(this.Level);
        ApplyAssistMarker(Attacker, Target, 10);
        this.TicksLeft = 8;
        RequireVar(this.SpellCooldown);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, true);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
        CancelAutoAttack(Owner, true);
        RequireVar(this.MyPosition);
        CharVars.BallPosition = this.MyPosition;
        RequireVar(this.Level);
        Level = this.Level;
        CasterTeam = GetTeamID(default);
        SpellEffectCreate(Temp, default, "Oriana_ts_tar.troy", default, CasterTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        NextBuffVars.Level = this.Level;
        SpellBuffAdd(Attacker, Target, "OrianaShred", 5, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
        RequireVar(this.Level);
        ApplyAssistMarker(Attacker, Target, 10);
        this.TicksLeft = 8;
        CurrentPos = GetUnitPosition(Owner);
        Caster = SetBuffCasterUnit();
        this.Caster = SetBuffCasterUnit();
        this.GhostSpawned = false;
        this.MinionBall = false;
        SkinName = GetUnitSkinName(Owner);
        If(SkinName, default, CO_EQUAL, default, "OriannaBall", () => {
            this.MinionBall = true;
        });
        If(SkinName, default, CO_EQUAL, default, "OriannaBall", () => {
            this.MinionBall = true;
        });
        If(this.MinionBall, default, CO_EQUAL, default, false, () => {
            If(Caster, default, CO_NOT_EQUAL, Owner, default, () => {
                SkinID = GetSkinID(Caster);
                If(SkinID, default, CO_EQUAL, default, 1, () => {
                    SpellEffectCreate(this.Temp, default, "Oriana_ghost_bind_goth.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, CurrentPos, Owner, default, CurrentPos, false, false, false, false, false, default, default);
                });
                ElseIf(SkinID, default, CO_EQUAL, default, 2, () => {
                    SpellEffectCreate(this.Temp, default, "Oriana_ghost_bind_doll.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, CurrentPos, Owner, default, CurrentPos, false, false, false, false, false, default, default);
                });
                Else(() => {
                    SpellEffectCreate(this.Temp, default, "Oriana_Ghost_bind.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, CurrentPos, Owner, default, CurrentPos, false, false, false, false, false, default, default);
                });
            });
        });
        AttackerPos = GetUnitPosition(Attacker);
        Caster = SetBuffCasterUnit();
        Distance = DistanceBetweenObjects("Caster", "Owner");
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 1000, () => {
            SpellEffectCreate(this.OrianaPointer, default, "OrianaBallIndicatorFar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, true, Attacker, default, default, Owner, default, default, false, false, false, false, true, Owner, default);
            this.PreviousState = 0;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 800, () => {
            SpellEffectCreate(this.OrianaPointer, default, "OrianaBallIndicatorMedium.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, true, Attacker, default, default, Owner, default, default, false, false, false, false, true, Owner, default);
            this.PreviousState = 1;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            SpellEffectCreate(this.OrianaPointer, default, "OrianaBallIndicatorNear.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, true, Attacker, default, default, Owner, default, default, false, false, false, false, true, Owner, default);
            this.PreviousState = 2;
        });
        SetSpellOffsetTarget(1, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Attacker, Owner);
        SetSpellOffsetTarget(3, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Attacker, Owner);
        CurrentPos = GetUnitPosition(Owner);
        Caster = SetBuffCasterUnit();
        this.Caster = Caster;
        If(Caster, default, CO_NOT_EQUAL, Owner, default, () => {
            SpellEffectCreate(this.Temp, default, "Oriana_Ghost_bind.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, CurrentPos, Owner, default, CurrentPos, false, default, default, false, default, default, default);
        });
        this.PickUp = false;
        RequireVar(this.TickDamage);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.Hit = false;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetSpellOffsetTarget(1, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        SetSpellOffsetTarget(3, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "ManaLeach_tar2.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 240, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SetStatus(Owner, default, SetTargetable);
        Caster = SetBuffCasterUnit();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Caster, GetSlotSpellLevel);
        BaseDamage = this.VALUE_BY_LEVEL;
        SelfAP = GetStat(GetFlatMagicDamageMod, Caster);
        BonusDamage = Math(0 + (SelfAP ?? 0), MO_MULTIPLY, 0.25);
        TotalDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        this.TickDamage = TotalDamage;
        RequireVar(this.Level);
        ApplyAssistMarker(Attacker, Target, 10);
        this.StartTime = GetGameTime();
        this.SelfParticle = SelfParticle;
        SetSpellOffsetTarget(1, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        SetSpellOffsetTarget(1, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        MyName = GetUnitSkinName(Owner);
        If(MyName, default, CO_EQUAL, default, "Orianna", () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                If(CharVars.GhostInitialized, default, CO_EQUAL, default, true, () => {
                    PopCharacterData(Owner, CharVars.TempSkin);
                });
            });
        });
        SpellBuffClear(Owner, "OriannaBallTracker");
        RequireVar(this.ASMod);
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.ASMod ?? 0));
        tooltip = Math(0 + (this.ASMod ?? 0), MO_MULTIPLY, 100);
        SetBuffToolTipVar(1, 0 + (tooltip ?? 0));
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.DamageBlock);
        ApplyAssistMarker(Attacker, Owner, 10);
        IncreaseShield(Owner, 0 + (this.DamageBlock ?? 0), true, true);
        CDOne = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            If(CDOne, default, CO_LESS_THAN_OR_EQUAL, default, 0.24, () => {
                SetSlotSpellCooldownTimeVer2(0.24, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CDTwo = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            If(CDTwo, default, CO_LESS_THAN_OR_EQUAL, default, 0.24, () => {
                SetSlotSpellCooldownTimeVer2(0.24, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CDThree = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            If(CDThree, default, CO_LESS_THAN_OR_EQUAL, default, 0.24, () => {
                SetSlotSpellCooldownTimeVer2(0.24, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CDFour = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            If(CDFour, default, CO_LESS_THAN_OR_EQUAL, default, 0.24, () => {
                SetSlotSpellCooldownTimeVer2(0.24, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            });
        });
        SpellBuffClear(Owner, "OrianaGlobalCooldown");
        TeamID = GetTeamID(default);
        OwnerPos = GetUnitPosition(Owner);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        this.TempVision = AddPosPerceptionBubble(TeamID, 225, OwnerPos, 25000, Nothing, false);
        SpellEffectCreate(this.Ring2, this.Ring1, "yomu_ring_green.troy", "yomu_ring_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, OwnerPos, Owner, default, OwnerPos, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Ring4, this.Ring3, "oriana_ball_glow_green.troy", "oriana_ball_glow_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "balldown", OwnerPos, Owner, default, OwnerPos, false, default, default, false, false, default, default);
        RequireVar(this.TotalDamage);
        CasterTeam = GetTeamID(default);
        BreakSpellShields(Owner);
        SpellEffectCreate(Temp, default, "OrianaRedact_tar.troy", default, CasterTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        ApplyDamage(Attacker, Owner, 0 + (this.TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        RequireVar(this.Pos);
        Pos = this.Pos;
        Move(Target, Pos, 900, 15, 0, FURTHEST_WITHIN_RANGE, POSTPONE_CURRENT_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        PlayAnimation("Spell2", 0, Owner, false, false, true);
        ApplyAssistMarker(Attacker, Owner, 10);
        this.DotCounter = 4;
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 400, Owner, 20, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(Team, 50, Owner, 20, Nothing, Nothing, true);
        TeamID = GetTeamID(default);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetTargetable);
        this.TeamID = GetTeamID(default);
        this.Active = false;
        this.Sprung = false;
        SpellEffectCreate(default, default, "nidalee_bushwhack_set_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.Hit = false;
        RequireVar(this.TargetPos);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.Hit = false;
        TeamID = GetTeamID(default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", this.TargetPos, TeamID ?? TEAM_ORDER, false, true, false, true, true, true, 0, default, true, Owner, default);
        SpellBuffAdd(Owner, Other3, "OrianaGhost", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other3, "OrianaGhostMinion", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(this.Temp, default, "UrgotHeatseekingIndicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, this.TargetPos, Target, default, default, false, default, default, false, default, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.MRShield, default, "TrundleUlt_self_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        IncStat(IncPercentMovementSpeedMod, Owner, 0.15);
        OverrideAnimation("Run", "Run2", Owner);
        RequireVar(this.DamageDealt);
        APStat = GetStat(GetFlatMagicDamageMod, Attacker);
        APRatio = Math(0 + (APStat ?? 0), MO_MULTIPLY, 0.6);
        this.ModdedDamage = Math(0 + (APRatio ?? 0), MO_ADD, 0 + (this.DamageDealt ?? 0));
        this.DamageSecond = Math(0 + (this.ModdedDamage ?? 0), MO_DIVIDE, 6);
        ApplyDamage(Attacker, Owner, 0 + (this.ModdedDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Attacker);
        IncHealth(Attacker, 0 + (this.ModdedDamage ?? 0), Attacker);
        SpellEffectCreate(this.asdf, default, "TrundleUltParticle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ApplyAssistMarker(Attacker, Owner, 10);
        IncStat(IncPercentArmorMod, Owner, 0 + (this.Debuff ?? 0));
        IncStat(IncPercentSpellBlockMod, Owner, 0 + (this.Debuff ?? 0));
        TooltipDebuff = Math(0 + (this.Debuff ?? 0), MO_MULTIPLY, -100);
        SetBuffToolTipVar(1, 0 + (TooltipDebuff ?? 0));
        RequireVar(this.targetPos);
        RequireVar(this.Particle);
        RequireVar(this.Particle2);
        TeamOfOwner = GetTeamID(default);
        targetPos = this.targetPos;
        RequireVar(this.Survivability);
        this.OwnerArmor = GetArmor(Owner);
        this.OwnerMR = GetSpellBlock(Owner);
        this.LowerArmor = Math(0 + (this.Survivability ?? 0), MO_MULTIPLY, 0 + (this.OwnerArmor ?? 0));
        this.LowerMR = Math(0 + (this.Survivability ?? 0), MO_MULTIPLY, 0 + (this.OwnerMR ?? 0));
        this.Survivability = Math(0 + (this.Survivability ?? 0), MO_DIVIDE, 6);
        this.InstancedArmor = Math(0 + (this.LowerArmor ?? 0), MO_MULTIPLY, -1);
        this.InstancedMR = Math(0 + (this.LowerMR ?? 0), MO_MULTIPLY, -1);
        If(this.InstancedArmor, default, CO_LESS_THAN, default, 0, () => {
            IncStat(IncFlatArmorMod, Owner, 0 + (this.InstancedArmor ?? 0));
        });
        IncStat(IncFlatArmorMod, Owner, 0 + (this.InstancedArmor ?? 0));
        If(this.InstancedMR, default, CO_LESS_THAN, default, 0, () => {
            IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.InstancedMR ?? 0));
        });
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.InstancedMR ?? 0));
        SpellBuffAdd(Attacker, Attacker, "TrundlePainBuff", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        RequireVar(this.NegSapVar);
        RequireVar(this.SapVar);
        NextBuffVars.SapVar = this.SapVar;
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.NegSapVar ?? 0));
        SpellEffectCreate(this.SappedDebuff, default, "TrundleQDebuff_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellBuffAdd(Attacker, Attacker, "TrundleQ", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Geeves1, default, "Trundle_TrollSmash_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_Mouth", default, Owner, default, default, true, default, default, false, default, default, default);
        RequireVar(this.SpellCooldown);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CancelAutoAttack(Owner, true);
        UnlockAnimation(Owner, true);
        SetDodgePiercing(Owner, true);
        RequireVar(this.SapVar);
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.SapVar ?? 0));
        SpellEffectCreate(this.Rh, default, "TrundleQ_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, default, default, false, default, default, false, false, default, default);
        RequireVar(this.DebuffAmount);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.DebuffAmount ?? 0));
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, 16);
        SpellEffectCreate(default, default, "ConsecrationAura_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        TeamOfOwner = GetTeamID(default);
        this.Delay = false;
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_CHAOS, () => {
            Count = GetBuffCountFromAll(Owner, "NocturneParanoiaTargetOrder");
            If(Count, default, CO_GREATER_THAN, default, 0, () => {
                this.Delay = true;
            });
            Else(() => {
                SpellEffectCreate(this.Loop, default, "NocturneParanoiaFriend.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, "root", default, Owner, default, default, false, default, default, default, default, default, default);
            });
        });
        Else(() => {
            SpellBuffClear(Owner, "NocturneParanoiaTargetOrder");
            SpellEffectCreate(this.Loop, default, "NocturneParanoiaFoe.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, "root", default, Owner, default, default, false, default, default, default, default, default, default);
        });
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.AstralArmor);
        OverrideAnimation("Run", "Spell4", Owner);
        RequireVar(this.GreenDash);
        RequireVar(this.dashSpeed);
        RequireVar(this.TargetPos);
        RequireVar(this.Distance);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.HasDealtDamage = false;
        TargetPos = this.TargetPos;
        maxTrackDistance = this.VALUE_BY_LEVEL;
        MoveToUnit(Owner, Attacker, 0 + (this.dashSpeed ?? 0), 0, CANCEL_ORDER, 0, 0 + (maxTrackDistance ?? 0), 0 + (DistanceCheck ?? 0), 0);
        SpellEffectCreate(this.SelfParticle, default, "NocturneParanoiaDash_trail.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, false, false, default, default);
        this.WillRemove = false;
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetGhosted);
        BaseDamage = this.VALUE_BY_LEVEL;
        PhysPreMod = GetStat(GetFlatPhysicalDamageMod, Owner);
        PhysPostMod = Math(1.2, MO_MULTIPLY, 0 + (PhysPreMod ?? 0));
        this.DamageToDeal = Math(0 + (PhysPostMod ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        If(this.HasDealtDamage, default, CO_EQUAL, default, false, () => {
            Distance = DistanceBetweenObjects("Owner", "Attacker");
            If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 300, () => {
                BreakSpellShields(Attacker);
                ApplyDamage(Owner, Attacker, 0 + (this.DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, true, true, Owner);
                SpellEffectCreate(asdf, default, "NocturneParanoiaDash_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Attacker, default, default, Attacker, default, default, true, default, default, false, false, default, default);
                this.HasDealtDamage = true;
            });
        });
        this.PartCreated = false;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        this.Range = this.VALUE_BY_LEVEL;
        Distance = DistanceBetweenObjects("Owner", "Attacker");
        If(Distance, default, CO_LESS_THAN_OR_EQUAL, this.Range, default, () => {
            SpellEffectCreate(this.tpar, default, "NocturneParanoiaTargeting.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, true, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
            this.PartCreated = true;
        });
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, 16);
        TeamOfOwner = GetTeamID(default);
        this.Delay = false;
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            Count = GetBuffCountFromAll(Owner, "NocturneParanoiaTargetChaos");
            If(Count, default, CO_GREATER_THAN, default, 0, () => {
                this.Delay = true;
            });
            Else(() => {
                SpellEffectCreate(this.Loop, default, "NocturneParanoiaFriend.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, "root", default, Owner, default, default, false, default, default, default, default, default, default);
            });
        });
        Else(() => {
            SpellBuffClear(Owner, "NocturneParanoiaTargetChaos");
            SpellEffectCreate(this.Loop, default, "NocturneParanoiaFoe.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, "root", default, Owner, default, default, false, default, default, default, default, default, default);
        });
        RequireVar(this.SightReduction);
        RequireVar(this.SpellLevel);
        IncPermanentStat(IncPermanentFlatBubbleRadiusMod, Owner, 0 + (this.SightReduction ?? 0));
        RequireVar(this.NewCd);
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Target, Owner);
        SetPARCostInc(Owner, 3, SpellSlots, -100, PAR_MANA);
        this.VOSoundCreated = false;
        SpellEffectCreate(this.Loop, default, "NocturneParanoiaDashSound.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, default, default, false, false, default, default);
        TTVar2 = Math(0 + (CharVars.RegenValue ?? 0), MO_MULTIPLY, 100);
        SetBuffToolTipVar(2, 0 + (TTVar2 ?? 0));
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle2, this.Particle, "trundledesecrate_green.troy", "trundledesecrate_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Nothing, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetNoRender);
        RequireVar(this.SelfASMod);
        RequireVar(this.SelfMSMod);
        RequireVar(this.CCReduc);
        RequireVar(this.LastPosition);
        RequireVar(this.ResistanceMod);
        TeamOfAttacker = GetTeamID(default);
        NocturneSkinID = GetSkinID(Attacker);
        If(NocturneSkinID, default, CO_EQUAL, default, 1, () => {
            SpellEffectCreate(this.TargetParticle, default, "NocturneUnspeakableHorror_tar_frost.troy", default, TeamOfAttacker ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.CounterParticle, default, "NocturneUnspeakableHorror_counter_frost.troy", default, TeamOfAttacker ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        ElseIf(NocturneSkinID, default, CO_EQUAL, default, 4, () => {
            SpellEffectCreate(this.TargetParticle, default, "NocturneUnspeakableHorror_tar_ghost.troy", default, TeamOfAttacker ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.CounterParticle, default, "NocturneUnspeakableHorror_counter_ghost.troy", default, TeamOfAttacker ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.TargetParticle, default, "NocturneUnspeakableHorror_tar.troy", default, TeamOfAttacker ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.CounterParticle, default, "NocturneUnspeakableHorror_counter.troy", default, TeamOfAttacker ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        SpellEffectCreate(this.ParticleID1, default, "NocturneUnspeakableHorror_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "L_hand", default, Owner, "spine", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID2, default, "NocturneUnspeakableHorror_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "R_hand", default, Owner, "spine", default, false, false, false, false, false, default, default);
        RequireVar(this.BaseDamage);
        RequireVar(this.FearDuration);
        this.TimeToFear = 3;
        this.Feared = false;
        RequireVar(this.HastePercent);
        RequireVar(this.BonusAD);
        SetStatus(Owner, default, SetGhosted);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.HastePercent ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.BonusAD ?? 0));
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetStealthed);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetNoRender);
        RequireVar(this.HastePercent);
        RequireVar(this.BonusAD);
        TeamOfOwner = GetTeamID(default);
        OrientationPoint = GetPointByUnitFacingOffset(Owner, 10000, 0);
        NocturneSkinID = GetSkinID(Attacker);
        If(NocturneSkinID, default, CO_EQUAL, default, 1, () => {
            SpellEffectCreate(this.Particle2, this.Particle, "NocturneDuskbringer_path_frost_green.troy", "NocturneDuskbringer_path_frost_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 240, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, true, false, OrientationPoint, default);
        });
        ElseIf(NocturneSkinID, 0, CO_EQUAL, default, 4, () => {
            SpellEffectCreate(this.Particle2, this.Particle, "NocturneDuskbringer_path_ghost_green.troy", "NocturneDuskbringer_path_ghost_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 240, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, true, false, OrientationPoint, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle2, this.Particle, "NocturneDuskbringer_path_green.troy", "NocturneDuskbringer_path_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 240, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, true, false, OrientationPoint, default);
        });
        SetStatus(Owner, default, SetTargetable);
        Point1 = GetPointByUnitFacingOffset(Owner, 0, 0);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.AttackSpeedBoost = this.VALUE_BY_LEVEL;
        RequireVar(this.DamageToDeal);
        RequireVar(this.StarcallShred);
        TeamID = GetTeamID(default);
        RequireVar(this.Damage);
        SpellEffectCreate(this.a, default, "Fizz_Jump_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.a, default, "Fizz_Jump_WeaponGlow.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, default, default, true, false, false, false, false, default, default);
        DestroyMissileForTarget(Owner);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        DestroyMissileForTarget(Owner);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.Temp = PushCharacterFade(Owner, 0.7, default, this.Temp);
        IncStat(IncAcquisitionRangeMod, Owner, 100);
        OverrideAnimation("Attack1", "Crit", Owner);
        OverrideAnimation("Attack2", "Crit", Owner);
        CancelAutoAttack(Owner, true);
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Target, 10);
        TeamID = GetTeamID(default);
        RequireVar(this.Damage);
        SpellEffectCreate(this.a, default, "Fizz_Jump_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.a, default, "Fizz_Jump_WeaponGlow.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, default, default, true, false, false, false, false, default, default);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        SpellBuffClear(Owner, "FizzJumpDelay");
        DestroyMissileForTarget(Owner);
        this.FailCount = 0;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetSlotSpellIcon(1, SpellSlots, SPELLBOOK_CHAMPION, Owner, 2);
        TeamID = GetTeamID(default);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetTargetable);
        this.TeamID = GetTeamID(default);
        this.Active = false;
        this.Sprung = false;
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, default, "caitlyn_yordleTrap_idle_red.troy", default, TEAM_ORDER, 10, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.Particle2, default, "caitlyn_yordleTrap_idle_green.troy", default, TEAM_ORDER, 10, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "caitlyn_yordleTrap_idle_red.troy", default, TEAM_CHAOS, 10, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.Particle2, default, "caitlyn_yordleTrap_idle_green.troy", default, TEAM_CHAOS, 10, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        });
        this.Delay = 1;
        SpawnPos = GetPointByUnitFacingOffset(Owner, 50, 180);
        PlayAnimation("Spell3c", 0, Owner, false, false, false);
        IncStat(IncPercentMovementSpeedMod, Owner, 0.5);
        SetStatus(Owner, default, SetCanMove);
        TeamID = GetTeamID(default);
        SpellEffectCreate(Temp, default, "fizz_playfultrickster_flip_sound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", Owner, Owner, default, default, true, true, false, false, false, default, default);
        RequireVar(this.TargetPos);
        RequireVar(this.Level);
        this.LastLifesteal = 0;
        this.LastSunlightDamage = 0;
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "FizzJumpTwo");
        SetSlotSpellCooldownTimeVer2(0, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        TargetPos = GetUnitPosition(Owner);
        TeamID = GetTeamID(default);
        OverrideAnimation("Idle1", "Spell3b", Owner);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "FizzJumpBuffer");
        SetSlotSpellCooldownTimeVer2(0.15, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        this.Defense = 4;
        SetBuffToolTipVar(1, 0 + (this.Defense ?? 0));
        SetStatus(Owner, default, SetGhosted);
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellEffectCreate(this.Particle1, Particle2, "Leona_Sunlight_Champion.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle1, Particle2, "Leona_Sunlight.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        });
        TeamID = GetTeamID(default);
        RequireVar(this.MagicDamage);
        RequireVar(this.DefenseBonus);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.DefenseBonus ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.DefenseBonus ?? 0));
        SpellEffectCreate(this.Particle, default, "Leona_SolarBarrier_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        OverrideAnimation("Idle1", "Spell2_idle", Owner);
        OverrideAnimation("Idle2", "Spell2_idle", Owner);
        OverrideAnimation("Idle3", "Spell2_idle", Owner);
        OverrideAnimation("Idle4", "Spell2_idle", Owner);
        OverrideAnimation("Attack1", "Spell2_attack", Owner);
        OverrideAnimation("Attack2", "Spell2_attack", Owner);
        OverrideAnimation("Attack3", "Spell2_attack", Owner);
        OverrideAnimation("Crit", "Spell2_attack", Owner);
        OverrideAnimation("Run", "Spell2_run", Owner);
        TeamID = GetTeamID(default);
        RequireVar(this.DefenseBonus);
        IncStat(IncFlatArmorMod, Owner, 0 + (this.DefenseBonus ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (this.DefenseBonus ?? 0));
        SpellEffectCreate(this.Particle, default, "Leona_SolarBarrier2_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        OverrideAnimation("Idle1", "Spell2_idle", Owner);
        OverrideAnimation("Idle2", "Spell2_idle", Owner);
        OverrideAnimation("Idle3", "Spell2_idle", Owner);
        OverrideAnimation("Idle4", "Spell2_idle", Owner);
        OverrideAnimation("Attack1", "Spell2_attack", Owner);
        OverrideAnimation("Attack2", "Spell2_attack", Owner);
        OverrideAnimation("Attack3", "Spell2_attack", Owner);
        OverrideAnimation("Crit", "Spell2_attack", Owner);
        OverrideAnimation("Run", "Spell2_run", Owner);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(this.b, default, "Leona_ZenithBlade_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Nothing, default, default, false, default, default, false, false, default, default);
        DebugSay(Owner, "Slash Buff On", default);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(this.b, default, "Leona_ZenithBlade_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Nothing, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.SSSlow, default, "Global_Slow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        this.MSPenalty = -0.8;
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MSPenalty ?? 0));
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.temp, default, "Leona_ShieldOfDaybreak_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_SHIELD_TOP", default, Owner, default, default, true, default, default, false, false, default, default);
        RequireVar(this.SpellCooldown);
        RequireVar(this.BonusDamage);
        RequireVar(this.SilenceDuration);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CancelAutoAttack(Owner, true);
        this.RangeIncrease = 0;
        IncStat(IncFlatAttackRangeMod, Owner, 30 + (this.RangeIncrease ?? 0));
        RequireVar(this.Level);
        RequireVar(this.DamageAmount);
        RequireVar(this.Distance);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle1, this.Particle, "Leona_SolarFlare_cas_green.troy", "Leona_SolarFlare_cas_red.troy", TeamID ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        SetStatus(Owner, default, SetCanMove);
        RequireVar(this.Bubble);
        TargetPos = GetRandomPointInAreaPosition(Owner, 60, 60);
        Move(Owner, TargetPos, 125, 12, 0, FIRST_WALL_HIT, CANCEL_ORDER, 100, KEEP_CURRENT_FACING);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectCreate(default, default, "NocturneDeath.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetGhosted);
        TargetPos = GetPointByUnitFacingOffset(Owner, 100, 315);
        FaceDirection(Owner, TargetPos);
        PlayAnimation("Spell4", 1, Owner, false, false, true);
        SetStatus(Owner, default, SetTargetable);
        RequireVar(this.Destination);
        RequireVar(this.Distance);
        Move(Owner, this.Destination, 1900, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (this.Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Target, 10);
        RequireVar(this.DamageDealt);
        RequireVar(this.OwnerPos);
        RequireVar(this.BonusDamage);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.a, default, "Fizz_PiercingStrike.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, true, false, false, false, false, default, default);
        this.HitTarget = false;
        IncStat(IncAcquisitionRangeMod, Owner, -175);
        SetStatus(Owner, default, SetCanAttack);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        Attacker = SetBuffCasterUnit();
        If(this.HitTarget, default, CO_EQUAL, default, false, () => {
            Distance = DistanceBetweenObjects("Attacker", "Owner");
            If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 175, () => {
                BreakSpellShields(Attacker);
                ApplyDamage(Owner, Attacker, 0 + (this.DamageDealt ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 1, false, false, Owner);
                TotalAD = GetTotalAttackDamage(Owner);
                SetDodgePiercing(Owner, true);
                ApplyDamage(Owner, Attacker, 0 + (TotalAD ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Owner);
                this.HitTarget = true;
                TeamID = GetTeamID(default);
                SpellEffectCreate(this.targetParticle, default, "Fizz_PiercingStrike_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, true, false, false, false, false, default, default);
                SetDodgePiercing(Owner, false);
            });
        });
        SetStatus(Owner, default, SetNoRender);
        SetDodgePiercing(Owner, true);
        Level = GetLevel(Owner);
        Heal = this.VALUE_BY_LEVEL;
        SetBuffToolTipVar(1, 0 + (Heal ?? 0));
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Target, 10);
        TeamID = GetTeamID(default);
        this.TempID = AddUnitPerceptionBubble(TeamID, 300, Owner, 4, Nothing, Nothing, false);
        SpellEffectCreate(this.Temp2, this.Temp, "Fizz_Ring_Green.troy", "Fizz_Ring_Red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Owner, default, default, true, false, true, false, false, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Owner, "FizzMarinerDoomSlow", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "FizzMarinerDoomBoom");
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        this.SlowAmount = this.VALUE_BY_LEVEL;
        ApplyAssistMarker(Attacker, Attacker, 10);
        SetStatus(Owner, default, SetGhosted);
        SpellEffectCreate(this.TremorsFx, default, "alistar_trample_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        OverrideAnimation("Run", "Run2", Owner);
        OverrideAnimation("Idle1", "Idle5", Owner);
        SpellEffectCreate(this.TremorsFx, default, "alistar_nose_puffs.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_NOSE1", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.TremorsFx, default, "alistar_trample_head.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.TremorsFx, default, "alistar_nose_puffs.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_NOSE2", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.TremorsFx, default, "alistar_trample_hand.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.TremorsFx, default, "alistar_trample_hand.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(default, default, "UrgotDeath.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "f_flesh", default, Target, default, default, false, default, default, default, default, default, default);
        SealSpellSlot(2, SpellSlots, Owner, false, default);
        SpellEffectCreate(this.Particle1, default, "UrgotCorrosiveDebuff_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        RequireVar(this.TickDamage);
        RequireVar(this.DamageReduction);
        RequireVar(this.bonusDamage);
        RequireVar(this.movementSpeed);
        RequireVar(this.Shield);
        SpellEffectCreate(this.Particle1, default, "UrgotTerrorCapacitor_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SlowPercent = this.VALUE_BY_LEVEL;
        SetBuffToolTipVar(1, 0 + (this.Shield ?? 0));
        SetBuffToolTipVar(2, 0 + (SlowPercent ?? 0));
        IncreaseShield(Owner, 0 + (this.Shield ?? 0), true, true);
        SpellEffectCreate(this.Particle1, default, "UrgotSwapDef.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle1, default, "UrgotIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_Screw_d", default, Owner, "L_Screw_b", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle1, default, "UrgotIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_Screw_b", default, Owner, "R_Screw_b", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle1, default, "UrgotIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_Screw_b", default, Owner, "R_Screw_d", default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        OwnerPos = GetUnitPosition(Owner);
        SetCameraPosition("Owner", OwnerPos);
        UrgotPos = GetUnitPosition(Attacker);
        TargetPos = GetUnitPosition(Owner);
        TeleportToPosition(Attacker, TargetPos);
        TeleportToPosition(Owner, UrgotPos);
        TeleportToPosition(Attacker, TargetPos);
        SpellBuffAdd(Attacker, Owner, "UrgotSwapMissile", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Attacker, "UrgotSwapMissile2", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SetStatus(Owner, default, SetCanCast);
        RequireVar(this.TargetPos);
        RequireVar(this.DamageIncrease);
        RequireVar(this.DamageReduction);
        SpellEffectCreate(this.arr, default, "gragas_buff_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        this.SlowAmount = -0.35;
        ApplyAssistMarker(Attacker, Attacker, 10);
        RequireVar(this.Lifetime);
        RequireVar(this.SkinID);
        this.Lifetime = default;
        TeamofOwner = GetTeamID(default);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "GragasBarrelRollToggle");
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        If(TeamofOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            If(this.SkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(this.TroyVar, default, "gragas_giftbarrelfoam.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Attacker, "bottom", default, Owner, default, default, true, default, default, false, default, default, default);
            });
            ElseIf(this.SkinID, default, CO_EQUAL, default, 4, () => {
                SpellEffectCreate(this.TroyVar, default, "gragas_barrelfoam_classy.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Attacker, "bottom", default, Owner, default, default, true, default, default, false, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(this.TroyVar, default, "gragas_barrelfoam.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Attacker, "bottom", default, Owner, default, default, true, default, default, false, default, default, default);
            });
        });
        Else(() => {
            If(this.SkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(this.TroyVar, default, "gragas_giftbarrelfoam.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Attacker, "bottom", default, Owner, default, default, true, default, default, false, default, default, default);
            });
            ElseIf(this.SkinID, default, CO_EQUAL, default, 4, () => {
                SpellEffectCreate(this.TroyVar, default, "gragas_barrelfoam_classy.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Attacker, "bottom", default, Owner, default, default, true, default, default, false, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(this.TroyVar, default, "gragas_barrelfoam.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Attacker, "bottom", default, Owner, default, default, true, default, default, false, default, default, default);
            });
        });
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamID = GetTeamID(default);
        OverrideAnimation("Run", "Spell3", Owner);
        StartTrackingCollisions(Owner, true);
        RequireVar(this.DashSpeed);
        RequireVar(this.TargetPos);
        RequireVar(this.Distance);
        RequireVar(this.BonusDamage);
        RequireVar(this.MinimumDamage);
        TargetPos = this.TargetPos;
        SpellEffectCreate(this.a, default, "gragas_bodySlam_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        Move(Target, TargetPos, 0 + (this.DashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (this.Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        SpellBuffAdd(Owner, Owner, "UrgotHeatseekingAmmo", 4, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        RequireVar(this.GateParticle);
        RequireVar(this.TargetPos);
        this.IsDisabled = 0;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle3, default, "UrgotSwapDrip.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        PlayAnimation("teleUp", 1.2, Owner, false, false, true);
        RequireVar(this.ASDebuff);
        RequireVar(this.ManaTick);
        IncPAR(Owner, 0 + (this.ManaTick ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
        Move(Target, BouncePos, 100, 25, 0, default, default, default, default);
        SpellEffectCreate(this.Particle1, default, "UrgotEntropy_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.HitParticle, default, "UrgotPlasmaGrenade_hit.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        RequireVar(this.ArmorReduced);
        IncStat(IncPercentArmorMod, Owner, 0 + (this.ArmorReduced ?? 0));
        MaxHP = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        this.HealAmount = Math(0 + (MaxHP ?? 0), MO_MULTIPLY, 0.01);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        RequireVar(this.VolibearRRatio);
        RequireVar(this.VolibearRDamage);
        RequireVar(this.VolibearRSpeed);
        SpellEffectCreate(this.b, default, "volibear_R_cas_03.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.c, default, "Volibear_R_cas_04.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.a, default, "volibear_R_lightning_arms.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_middle_finger", default, Target, "r_uparm", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.d, default, "volibear_R_lightning_arms.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_middle_finger", default, Target, "l_uparm", default, false, false, false, false, false, default, default);
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.VolibearRSpeed ?? 0));
        IncScaleSkinCoef(0.08, Owner);
        BouncePos = GetRandomPointInAreaUnit(Owner, 10, 10);
        Move(Owner, BouncePos, 10, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 10, FACE_MOVEMENT_DIRECTION);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        ApplyAssistMarker(Attacker, Owner, 10);
        Last = true;
        TeamID = GetTeamID(default);
        SpellEffectCreate(c, default, "Volibear_R_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CENTER_LOC", default, Owner, default, default, true, false, false, false, false, default, default);
        RequireVar(this.BounceCounter);
        RequireVar(this.VolibearRRatio);
        RequireVar(this.VolibearRDamage);
        ChampionPriority = 0;
        this.VolibearRDamage = Math(0 + (this.VolibearRDamage ?? 0), MO_MULTIPLY, 1);
        this.VolibearRRatio = Math(0 + (this.VolibearRRatio ?? 0), MO_MULTIPLY, 1);
        ForEachUnitInTargetArea(Attacker, Owner, 500, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
            ChampionPriority = Math(0 + (ChampionPriority ?? 0), MO_ADD, 1);
        });
        If(ChampionPriority, default, CO_GREATER_THAN, default, 0, () => {
            If(this.BounceCounter, default, CO_LESS_THAN_OR_EQUAL, default, 3, () => {
                ForEachVisibleUnitInTargetAreaRandom(Attacker, Owner, 500, "AffectEnemies AffectHeroes ", 1, "VolibearRChain", false, (Unit) => {
                    SpellEffectCreate(this.ParticleID, default, "volibear_R_chain_lighting_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Unit, false, Owner, "head", default, Unit, "root", default, true, false, false, false, false, default, default);
                    this.BounceCounter = Math(0 + (this.BounceCounter ?? 0), MO_ADD, 1);
                    NextBuffVars.BounceCounter = this.BounceCounter ?? 0;
                    NextBuffVars.VolibearRDamage = this.VolibearRDamage;
                    NextBuffVars.VolibearRRatio = this.VolibearRRatio;
                    ChampionPriority = Math(0 + (ChampionPriority ?? 0), MO_ADD, 999);
                    UnitTeamID = GetTeamID(default);
                    AddUnitPerceptionBubble(UnitTeamID, 10, Owner, 0.75, Nothing, Owner, false);
                    SpellBuffAdd(Attacker, Unit, "VolibearRChain", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    Last = false;
                });
            });
        });
        If(ChampionPriority, default, CO_LESS_THAN, default, 4, () => {
            If(this.BounceCounter, default, CO_LESS_THAN_OR_EQUAL, default, 3, () => {
                ForEachVisibleUnitInTargetAreaRandom(Attacker, Owner, 500, "AffectEnemies AffectNeutral AffectMinions ", 1, "VolibearRChain", false, (Unit) => {
                    SpellEffectCreate(this.ParticleID, default, "volibear_R_chain_lighting_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Unit, false, Owner, "head", default, Unit, "root", default, true, false, false, false, false, default, default);
                    this.BounceCounter = Math(0 + (this.BounceCounter ?? 0), MO_ADD, 1);
                    NextBuffVars.BounceCounter = this.BounceCounter ?? 0;
                    NextBuffVars.VolibearRDamage = this.VolibearRDamage;
                    NextBuffVars.VolibearRRatio = this.VolibearRRatio;
                    UnitTeamID = GetTeamID(default);
                    AddUnitPerceptionBubble(UnitTeamID, 10, Owner, 0.75, Nothing, Owner, false);
                    SpellBuffAdd(Attacker, Unit, "VolibearRChain", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    Last = false;
                });
            });
        });
        If(Last, default, CO_EQUAL, default, true, () => {
            TeamID = GetTeamID(default);
            SpellEffectCreate(TargetParticle, default, "Volibear_R_lasthit_sound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        });
        OwnerTeamID = GetTeamID(default);
        AddUnitPerceptionBubble(OwnerTeamID, 250, Attacker, 0.75, Nothing, Nothing, false);
        BreakSpellShields(Owner);
        ApplyDamage(Attacker, Owner, 0 + (this.VolibearRDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0 + (this.VolibearRRatio ?? 0), 0, false, false, Attacker);
        RequireVar(this.MissilePosition);
        TeamID = GetTeamID(default);
        GetGroundHeight(this.MissilePosition, GroundPos);
        SpellEffectCreate(this.Temp4, this.Temp3, "Fizz_Ring_Green.troy", "Fizz_Ring_Red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, "head", GroundPos, Nothing, default, this.MissilePosition, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Temp, this.Temp2, "Fizz_UltimateMissile_Orbit.troy", "Fizz_UltimateMissile_Orbit.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, "head", GroundPos, Nothing, default, this.MissilePosition, false, false, false, false, false, default, default);
        this.TempVision = AddPosPerceptionBubble(TeamID, 350, this.MissilePosition, 3, Nothing, false);
        this.Exploded = false;
        SpellEffectCreate(this.SpeedParticle, default, "volibear_q_speed_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanCast);
        Distance = DistanceBetweenObjects("Attacker", "Owner");
        MoveAway(Owner, Attacker, 1200, 20, 700 + (Distance ?? 0), 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, KEEP_CURRENT_FACING);
        RequireVar(this.BouncePos);
        Caster = SetBuffCasterUnit();
        IdealDistance = 70;
        Speed = 150;
        Gravity = 60;
        Move(Owner, this.BouncePos, 0 + (Speed ?? 0), 0 + (Gravity ?? 0), 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (IdealDistance ?? 0), FACE_MOVEMENT_DIRECTION);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.Damage);
        RequireVar(this.VolibearEExtender);
        RequireVar(this.VolibearESlow);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.VolibearESlow ?? 0));
        If(Target, default, CO_IS_NOT_HERO, default, true, () => {
            IncStat(IncPercentMovementSpeedMod, Owner, -0.5);
        });
        RequireVar(this.DrainPercent);
        RequireVar(this.DrainedBool);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.c, default, "Volibear_Q_cas_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.a, default, "volibear_Q_attack_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_BUFFBONE_GLB_HAND_LOC", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.b, default, "volibear_Q_attack_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_BUFFBONE_GLB_HAND_LOC", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID, default, "volibear_Q_lightning_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_forearm", default, Owner, "l_middle_finger", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID2, default, "volibear_Q_lightning_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_forearm", default, Owner, "r_middle_finger", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID3, default, "volibear_Q_lightning_cast_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_uparm", default, Owner, "r_uparm", default, false, false, false, false, false, default, default);
        RequireVar(this.SpellCooldown);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        OverrideAnimation("Idle1", "Spell1_Idle", Owner);
        OverrideAnimation("Idle2", "Spell1_Idle", Owner);
        OverrideAnimation("Idle3", "Spell1_Idle", Owner);
        OverrideAnimation("Idle4", "Spell1_Idle", Owner);
        OverrideAnimation("Run", "Spell1_Run", Owner);
        OverrideAnimation("Spell4", "Spell1_Idle", Owner);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, false);
        RequireVar(this.SpeedMod);
        this.lastF1 = 0;
        this.Ready = false;
        this.Critical = false;
        CD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellCooldownTime);
        If(CD, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            Count = GetBuffCountFromAll(Attacker, "VolibearWStats");
            If(Count, default, CO_EQUAL, default, 4, () => {
                this.Ready = true;
                SpellEffectCreate(this.Particle1, default, "Volibear_tar_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, true, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
                HealthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
            });
        });
        this.Ready = false;
        this.Critical = false;
        CD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellCooldownTime);
        If(CD, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            Count = GetBuffCountFromAll(Attacker, "VolibearWStats");
            If(Count, default, CO_EQUAL, default, 4, () => {
                this.Ready = true;
                SpellEffectCreate(this.Particle1, default, "Volibear_tar_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, true, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
                HealthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
            });
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        RequireVar(this.CenterPos);
        Distance = DistanceBetweenObjectAndPoint(Owner, this.CenterPos);
        Distance = Math(0 + (Distance ?? 0), MO_ADD, 150);
        MoveAway(Owner, this.CenterPos, 750, 35, 0 + (Distance ?? 0), 0, FIRST_WALL_HIT, CANCEL_ORDER, 0, KEEP_CURRENT_FACING);
        RequireVar(this.VolibearWAS);
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.VolibearWAS ?? 0));
        RequireVar(this.FinalDamage);
        RequireVar(this.BaseDamageAmount);
        RequireVar(this.BonusDamage);
        TeamID = GetTeamID(default);
        KMSkinID = GetSkinID(Attacker);
        If(KMSkinID, default, CO_EQUAL, default, 5, () => {
            SpellEffectCreate(this.Particle1, this.Particle, "KogMawLivingArtillery_cas_chinese_green.troy", "KogMawLivingArtillery_cas_chinese_red.troy", TeamID ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle1, this.Particle, "KogMawLivingArtillery_cas_green.troy", "KogMawLivingArtillery_cas_red.troy", TeamID ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        this.bonusCrit = 0;
        this.furyPerHit = 5;
        this.furyPerCrit = 10;
        this.furyPerKill = 10;
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 400, Owner, 4, Nothing, Nothing, false);
        SetBuffToolTipVar(1, 10);
        OverrideAnimation("run", "run2", Owner);
        SpellEffectCreate(this.a, default, "UndyingRage_glow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_BUFFBONE_GLB_FOOT_LOC", default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.b, default, "UndyingRage_glow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_BUFFBONE_GLB_FOOT_LOC", default, Owner, default, default, false, default, default, false, false, default, default);
        PlayAnimation("Spell4", 0, Owner, false, false, false);
        RequireVar(this.SlowPercent);
        RequireVar(this.targetPos);
        RequireVar(this.DamageMod);
        RequireVar(this.CritDamageMod);
        Count = GetBuffCountFromAll(Owner, "Bloodlust");
        TotalDamage = Math(0 + (Count ?? 0), MO_MULTIPLY, 0 + (this.DamageMod ?? 0));
        TotalCritDamage = Math(0 + (Count ?? 0), MO_MULTIPLY, 0 + (this.CritDamageMod ?? 0));
        TotalCritDamage = Math(100, MO_MULTIPLY, 0 + (TotalCritDamage ?? 0));
        SetBuffToolTipVar(1, 0 + (TotalDamage ?? 0));
        SetBuffToolTipVar(2, 0 + (TotalCritDamage ?? 0));
        TeamID = GetTeamID(default);
        RequireVar(this.TargetPos);
        RequireVar(this.dashSpeed);
        RequireVar(this.Distance);
        TargetPos = this.TargetPos;
        Move(Owner, TargetPos, 0 + (this.dashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, POSTPONE_CURRENT_ORDER, 0 + (this.Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.SelfParticle, default, "Graves_Move_OnBuffActivate.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        PlayAnimation("Spell3", 0, Owner, true, false, true);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Attacker, "GravesMoveSteroid", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellEffectCreate(this.Particle, default, "bloodLust_flame.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, this.Particle, Target, default, default, false, default, default, false, false, default, default);
        RequireVar(this.SlowPercent);
        RequireVar(this.targetPos);
        TeamOfOwner = GetTeamID(default);
        targetPos = this.targetPos;
        SpellEffectCreate(this.Particle, this.Particle2, "KogMawVoidOoze_green.troy", "KogMawVoidOoze_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 240, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, targetPos, Target, default, default, false, default, default, true, false, default, default);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
        SetDodgePiercing(Owner, true);
        IfNotHasBuff(Owner, Owner, "TalonNoxianDiplomacyBuff", () => {
            
        });
        NextBuffVars.MoveSpeedMod = 0.3;
        TotalAD = GetTotalAttackDamage(Attacker);
        BaseAD = GetStat(GetBaseAttackDamage, Attacker);
        BonusAD = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
        this.BonusDamage = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.3);
        AttackerTeam = GetTeamID(default);
        SpellEffectCreate(this.ParticleZ, this.ParticleY, "talon_ult_blade_hold.troy", "talon_ult_blade_hold_team_ID_red.troy", AttackerTeam ?? TEAM_CASTER, 1, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Attacker, default, default, false, false, false, false, true, default, default);
        RequireVar(this.MovementSpeedMod);
        IncPermanentStat(IncPermanentFlatBubbleRadiusMod, Owner, 300);
        RequireVar(this.SightReduction);
        IncPermanentStat(IncPermanentFlatBubbleRadiusMod, Owner, 0 + (this.SightReduction ?? 0));
        TeamID = GetTeamID(default);
        NextBuffVars.MoveSpeedMod = 0.4;
        this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
        SetStatus(Owner, default, SetStealthed);
        SpellBuffAdd(Owner, Owner, "TalonHaste", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(this.talon_ult_sound, default, "talon_ult_sound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Nothing, default, OwnerPos, true, false, false, false, false, default, default);
        CasterID = GetTeamID(default);
        SpellEffectCreate(this.Particle2, this.Particle, "Graves_SmokeGrenade_Cloud_Team_Green.troy", "Graves_SmokeGrenade_Cloud_Team_Red.troy", CasterID ?? TEAM_UNKNOWN, 250, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetNoRender);
        RequireVar(this.WillMove);
        RequireVar(this.TargetPos);
        RequireVar(this.Damage);
        RequireVar(this.WillRemove);
        RequireVar(this.SlashSpeed);
        TargetPos = this.TargetPos;
        PlayAnimation("Spell3", 0, Owner, true, false, true);
        Move(Owner, TargetPos, 0 + (this.SlashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        StartTrackingCollisions(Owner, true);
        IfNotHasBuff(Owner, Owner, "GravesPassiveGrit", () => {
            SpellBuffAdd(Attacker, Owner, "GravesPassiveGrit", 11, 2, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        });
        CharVars.ArmorAmountNeg = Math(0 + (CharVars.ArmorAmount ?? 0), MO_MULTIPLY, -1);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
        RequireVar(this.AttackRangeIncrease);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        OverrideAutoAttack(1, ExtraSlots, Owner, 1, true);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseSound", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellEffectCreate(Particle, default, "KogMawDeathProc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(Particle, default, "KogMawDeathBackBeam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_Chest", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(Particle, default, "KogMawDeathBackBeam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_Waist", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(Particle, default, "KogMawDeathBackBeam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_Root", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(Particle, default, "KogMawDeathBackBeam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_Tail", default, Target, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.MoveSpeedMod = 0;
        PlayAnimation("death", 0.75, Owner, false, false, true);
        ShowHealthBar(Owner, false);
        CurrentCooldown2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        CurrentCooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCooldown, default, CO_LESS_THAN_OR_EQUAL, default, 5, () => {
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 5);
        });
        If(CurrentCooldown2, default, CO_LESS_THAN_OR_EQUAL, default, 5, () => {
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 5);
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetSilenced);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetCanMove);
        OverrideAnimation("Run", "RunDead", Owner);
        SpellBuffAdd(Owner, Owner, "Untargetable", 1, 1, 0.75, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        TeamID = GetTeamID(default);
        KogMawSkinID = GetSkinID(Attacker);
        If(KogMawSkinID, default, CO_EQUAL, default, 4, () => {
            SpellEffectCreate(this.a, default, "KogNoseGlow.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_nose", default, Owner, default, default, false, false, false, false, false, default, default);
        });
        ElseIf(KogMawSkinID, default, CO_EQUAL, default, 6, () => {
            SpellEffectCreate(this.a, default, "Kogmaw_deepsea_glow.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_ANGLER", default, Owner, default, default, false, false, false, false, false, default, default);
        });
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.DamageMod);
        ApplyAssistMarker(Attacker, Target, 10);
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(this.ParticleZ, default, "BladeRgoue_BladeAOE_TEMP.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Attacker, default, default, false, default, default, false, true, default, default);
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Target, 10);
        this.AttackerTeamID = GetTeamID(default);
        TotalAD = GetTotalAttackDamage(Attacker);
        BaseAD = GetStat(GetBaseAttackDamage, Attacker);
        BonusAD = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
        this.BonusDamage = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.2);
        SpellEffectCreate(this.Blood1, default, "talon_Q_bleed_indicator.troy", default, AttackerTeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Blood2, default, "talon_Q_bleed.troy", default, AttackerTeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.UnitBubble = AddUnitPerceptionBubble(this.AttackerTeamID, 400, Owner, 6, Nothing, Nothing, false);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.AmpValue);
        RequireVar(this.AttackSpeedMod);
        RequireVar(this.ArmorMod);
        this.Ready = 1;
        SpellEffectCreate(this.particle1, default, "CassiopeiaDeath.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Target, default, default, false, default, default, default, default, default, default);
        this.PercentMod = -0.1;
        CurCost = GetPARMultiplicativeCostInc(Owner, 0, SpellSlots, PAR_MANA);
        Cost = Math(0 + (CurCost ?? 0), MO_ADD, 0 + (this.PercentMod ?? 0));
        Tooltip = Math(0 + (Cost ?? 0), MO_MULTIPLY, -100);
        SetBuffToolTipVar(1, 0 + (Tooltip ?? 0));
        SetPARMultiplicativeCostInc(Owner, 0, SpellSlots, 0 + (Cost ?? 0), PAR_MANA);
        SetPARMultiplicativeCostInc(Owner, 1, SpellSlots, 0 + (Cost ?? 0), PAR_MANA);
        SetPARMultiplicativeCostInc(Owner, 2, SpellSlots, 0 + (Cost ?? 0), PAR_MANA);
        SetPARMultiplicativeCostInc(Owner, 3, SpellSlots, 0 + (Cost ?? 0), PAR_MANA);
        this.TestAmount = CharVars.SecondSkin;
        SetBuffToolTipVar(1, 0 + (CharVars.SecondSkin ?? 0));
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        this.numTicks = 20;
        TeamOfOwner = GetTeamID(default);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Attacker, default, SetForceRenderParticles);
        SpellEffectCreate(this.Particle1, this.Particle, "wallofpain_new_post_green.troy", "wallofpain_new_post_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle2, this.Particle3, "wallofpain_new_post_green.troy", "wallofpain_new_post_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.ParticleID6, this.noParticle, "wallofpain__new_beam.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Owner, false, Owner, "bottom", default, Attacker, "bottom", default, false, default, default, false, false, default, default);
        RequireVar(this.ArmorMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.ArmorMod);
        RequireVar(this.Pos);
        Pos = this.Pos;
        NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
        NextBuffVars.ArmorMod = this.ArmorMod;
        ForEachUnitInTargetArea(Attacker, Pos, 75, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "WallofPainTarget", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Unit, "WallofPainExtra", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Unit, "WallofPainMarker", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        RequireVar(this.DamagePerTick);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SpellEffectCreate(this.Particle, default, default, default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SealSpellSlot(3, SpellSlots, Owner, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        DamageToDeal = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Owner, Owner, 550, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.25, 1, false, false, Attacker);
        });
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "Defile_green_cas.troy", "Defile_red_cas.troy", TeamOfOwner ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        RequireVar(this.DamageAmount);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        this.TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.particle, default, "LayWaste_point.troy", default, this.TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        this.COTGFound = false;
        itemCD1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellCooldownTime);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetTargetable);
        SpellEffectCreate(this.Particle, default, "mordekeiser_cotg_skin.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_Die);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(0, InventorySlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, InventorySlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, InventorySlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, InventorySlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(4, InventorySlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(5, InventorySlots, Owner, true, SPELLBOOK_CHAMPION);
        ShowHealthBar(Owner, false);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Shred);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_NOT_EQUAL, default, 0, () => {
            cost0 = this.VALUE_BY_LEVEL;
            SetPARCostInc(Owner, 0, SpellSlots, 0 + (cost0 ?? 0), PAR_MANA);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_NOT_EQUAL, default, 0, () => {
            SetPARCostInc(Owner, 1, SpellSlots, -100, PAR_MANA);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_NOT_EQUAL, default, 0, () => {
            cost0 = this.VALUE_BY_LEVEL;
            SetPARCostInc(Owner, 2, SpellSlots, 0 + (cost0 ?? 0), PAR_MANA);
            IfNotHasBuff(Owner, Owner, "Defile", () => {
                SpellBuffAdd(Owner, Owner, "Defile", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
            SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_NOT_EQUAL, default, 0, () => {
            cost3 = this.VALUE_BY_LEVEL;
            SetPARCostInc(Owner, 3, SpellSlots, 0 + (cost3 ?? 0), PAR_MANA);
        });
        IncPAR(Owner, 5000);
        SetStatus(Owner, default, SetTargetable);
        this.Fade = PushCharacterFade(Owner, 0.5, default, this.Fade);
        RequireVar(this.LichAP);
        SetStatus(Owner, default, SetStunned);
        ApplyAssistMarker(Attacker, Owner, 10);
        PauseAnimation(Owner, true);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        SpellEffectCreate(this.turntostone, default, "TurnToStone.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        RequireVar(this.DamagePerTick);
        RequireVar(this.MoveSpeedMod);
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.6);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetNoRender);
        this.AreaRadius = 185;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle2, this.Particle, "CassMiasma_tar_green.troy", "CassMiasma_tar_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        this.BubbleID = AddUnitPerceptionBubble(TeamOfOwner, 250, Owner, 7, Nothing, Nothing, false);
        ForEachUnitInTargetArea(Attacker, Owner, 0 + (this.AreaRadius ?? 0), "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            NextBuffVars.DamagePerTick = this.DamagePerTick;
            SpellBuffAdd(Attacker, Unit, "CassiopeiaMiasmaPoison", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Poison, 1, true, false, false, default);
            NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
            SpellBuffAdd(Attacker, Unit, "Slow", 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, true, false, default);
        });
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.DamagePerTick);
        RequireVar(this.PoisonPerTick);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        this.TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.particle, this.particle2, "CassNoxiousSnakePlane_green.troy", "CassNoxiousSnakePlane_red.troy", this.TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
        RequireVar(this.DamagePerTick);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        RequireVar(this.TargetPos);
        CasterID = GetTeamID(default);
        TargetPos = this.TargetPos;
        If(CasterID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, default, "corki_phosphorous_bomb_tar.troy", default, TEAM_ORDER, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "corki_phosphorous_bomb_tar.troy", default, TEAM_CHAOS, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
        });
        this.BubbleID = AddPosPerceptionBubble(CasterID, 375, TargetPos, 6, Nothing, false);
        ForEachUnitInTargetArea(Attacker, this.TargetPos, 275, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "PhosphorusBombBlind", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        ForEachUnitInTargetArea(Attacker, this.TargetPos, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Attacker);
        });
        RequireVar(this.WillMove);
        RequireVar(this.TargetPos);
        RequireVar(this.SelfAP);
        RequireVar(this.WillRemove);
        RequireVar(this.SlashSpeed);
        TargetPos = this.TargetPos;
        Move(Owner, TargetPos, 0 + (this.SlashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.Particle, default, "corki_valkrie_speed.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, false, default, default, default);
        PlayAnimation("Spell2", 0, Owner, true, false, true);
        SpellEffectCreate(default, default, "CrashBoom.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, default, default, default, default);
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 400, Owner, 6, Nothing, Nothing, false);
        SpellEffectCreate(this.StarkSelfParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        If(Owner, default, CO_SAME_TEAM, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.StarkSelfParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_ORDER, Owner, true, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.StarkSelfParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        });
        IfHasBuff(Owner, Owner, "AvariceBlade", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "AvariceBlade", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetBuffToolTipVar(1, 30);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.TwoChargeSound, default, "KarmaTwoMantraSound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(this.TwoCharge, default, "karma_mantraCharge_indicator_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.OneCharge, default, "karma_mantraCharge_indicator_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "AbsoluteZero2_green_cas.troy", "AbsoluteZero2_red_cas.troy", TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_CHAOS, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        RequireVar(this.MovementSpeedMod);
        RequireVar(this.AttackSpeedMod);
        NextBuffVars.MovementSpeedMod = this.MovementSpeedMod;
        NextBuffVars.AttackSpeedMod = this.AttackSpeedMod;
        ForEachUnitInTargetArea(Owner, Owner, 575, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Owner, Unit, "AbsoluteZeroSlow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        CharVars.LifeTime = 0;
        RequireVar(this.MovementSpeedMod);
        RequireVar(this.AttackSpeedMod);
        RequireVar(this.MovementSpeedMod);
        RequireVar(this.AttackSpeedMod);
        RequireVar(this.DangerZone);
        OverrideAnimation("Run", "Run2", Owner);
        OverrideAnimation("Attack1", "Attack3", Owner);
        OverrideAnimation("Attack2", "Attack3", Owner);
        this.Counter = 0;
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        this.SlowAmount = this.VALUE_BY_LEVEL;
        ApplyAssistMarker(Attacker, Attacker, 10);
        this.Counter = 0;
        RequireVar(this.MissilePosition);
        MissilePosition = this.MissilePosition;
        TeamOfOwner = GetTeamID(default);
        RumbleSkinID = GetSkinID(Attacker);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, default, "rumble_ult_impact.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, true, Nothing, default, MissilePosition, Target, default, default, true, default, default, false, false, default, default);
            If(RumbleSkinID, default, CO_EQUAL, default, 2, () => {
                SpellEffectCreate(this.Particle2, default, "rumble_ult_impact_burn_cannon_ball_team_ID_green.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Nothing, true, Nothing, default, MissilePosition, Target, default, default, false, default, default, false, false, default, default);
                SpellEffectCreate(this.Particle3, default, "rumble_ult_impact_burn_cannon_ball_team_ID_red.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_CHAOS, Nothing, true, Nothing, default, MissilePosition, Target, default, default, false, default, default, false, false, default, default);
            });
            ElseIf(RumbleSkinID, default, CO_EQUAL, default, 1, () => {
                SpellEffectCreate(this.Particle2, default, "rumble_ult_impact_burn_pineapple_team_ID_green.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Nothing, true, Nothing, default, MissilePosition, Target, default, default, false, default, default, false, false, default, default);
                SpellEffectCreate(this.Particle3, default, "rumble_ult_impact_burn_pineapple_team_ID_red.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_CHAOS, Nothing, true, Nothing, default, MissilePosition, Target, default, default, false, default, default, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(this.Particle2, default, "rumble_ult_impact_burn_teamID_green.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Nothing, true, Nothing, default, MissilePosition, Target, default, default, false, default, default, false, false, default, default);
                SpellEffectCreate(this.Particle3, default, "rumble_ult_impact_burn_teamID_red.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_CHAOS, Nothing, true, Nothing, default, MissilePosition, Target, default, default, false, default, default, false, false, default, default);
            });
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "rumble_ult_impact.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, true, Nothing, default, MissilePosition, Target, default, default, true, default, default, false, false, default, default);
            If(RumbleSkinID, default, CO_EQUAL, default, 2, () => {
                SpellEffectCreate(this.Particle2, default, "rumble_ult_impact_burn_cannon_ball_team_ID_red.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Nothing, true, Nothing, default, MissilePosition, Target, default, default, false, default, default, false, false, default, default);
                SpellEffectCreate(this.Particle3, default, "rumble_ult_impact_burn_cannon_ball_team_ID_green.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_CHAOS, Nothing, true, Nothing, default, MissilePosition, Target, default, default, false, default, default, false, false, default, default);
            });
            ElseIf(RumbleSkinID, default, CO_EQUAL, default, 1, () => {
                SpellEffectCreate(this.Particle2, default, "rumble_ult_impact_burn_pineapple_team_ID_red.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Nothing, true, Nothing, default, MissilePosition, Target, default, default, false, default, default, false, false, default, default);
                SpellEffectCreate(this.Particle3, default, "rumble_ult_impact_burn_pineapple_team_ID_green.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_CHAOS, Nothing, true, Nothing, default, MissilePosition, Target, default, default, false, default, default, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(this.Particle2, default, "rumble_ult_impact_burn_teamID_red.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Nothing, true, Nothing, default, MissilePosition, Target, default, default, false, default, default, false, false, default, default);
                SpellEffectCreate(this.Particle3, default, "rumble_ult_impact_burn_teamID_green.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_CHAOS, Nothing, true, Nothing, default, MissilePosition, Target, default, default, false, default, default, false, false, default, default);
            });
        });
        SpellEffectCreate(this.temp, default, "RumbleCarpetBombSoundStart.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, default, default, default);
        RequireVar(this.DangerZone);
        IfHasBuff(Owner, Owner, "RumbleFlameThrowerBuff", () => {
            SpellEffectCreate(this.test, default, "rumble_gun_cas_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "barrel", default, Target, default, default, false, default, default, false, default, default, default);
            SpellEffectCreate(this.test2, default, "rumble_gun_lite.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.test, default, "rumble_gun_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "barrel", default, Target, default, default, false, default, default, false, default, default, default);
            SpellEffectCreate(this.test2, default, "rumble_gun_lite.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        });
        RequireVar(this.MissilePosition);
        SpellEffectCreate(this.test, default, "RumbleCarpetBombSoundEnd.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, default, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Boom, this.Boom2, "missFortune_makeItRain_tar_green.troy", "missFortune_makeItRain_tar_red.troy", TeamID ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(a, a, "missFortune_makeItRain_incoming.troy", default, TeamID ?? TEAM_UNKNOWN, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(a, a, "missFortune_makeItRain_incoming_02.troy", default, TeamID ?? TEAM_UNKNOWN, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(a, a, "missFortune_makeItRain_incoming_03.troy", default, TeamID ?? TEAM_UNKNOWN, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(a, a, "missFortune_makeItRain_incoming_04.troy", default, TeamID ?? TEAM_UNKNOWN, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetSlotSpellCooldownTimeVer2(0.5, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        this.RainCount = 1;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        RequireVar(this.Damage);
        this.TotalDamage = Math(0 + (this.Damage ?? 0), MO_DIVIDE, 7);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        TeamOfOwner = GetTeamID(default);
        this.MoveSpeedMod = this.VALUE_BY_LEVEL;
        this.AttackSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
        NextBuffVars.AttackSpeedMod = this.MoveSpeedMod;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        ForEachUnitInTargetArea(Attacker, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
            ApplyDamage(Attacker, Unit, 0 + (this.TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.114, 1, false, false, Attacker);
            SpellEffectCreate(asdf, default, "missFortune_makeItRain_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, default, default, default, default);
        });
        RequireVar(this.SlowAmount);
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        ApplyAssistMarker(Attacker, Attacker, 10);
        IfHasBuff(Owner, Owner, "RumbleGrenadeDZ", () => {
            SpellEffectCreate(this.BParticle, default, "rumble_taze_tar_dangerZone_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "spike", default, Owner, "spine", default, false, default, default, false, default, default, default);
            SpellEffectCreate(this.CParticle, default, "rumble_taze_tar_dangerZone.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "spike", default, Owner, "Bird_head", default, false, default, default, false, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.BParticle, default, "rumble_taze_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "spike", default, Owner, "spine", default, false, default, default, false, default, default, default);
            SpellEffectCreate(this.CParticle, default, "rumble_taze_beam_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "spike", default, Owner, "Bird_head", default, false, default, default, false, default, default, default);
        });
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        RequireVar(this.ASMod);
        SpellEffectCreate(this.ar, default, "missFortune_viciousShots_attack_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_BUFFBONE_GLB_HAND_LOC", default, Owner, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(this.ar, default, "missFortune_viciousShots_attack_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_BUFFBONE_GLB_HAND_LOC", default, Owner, default, default, true, default, default, false, default, default, default);
        Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "KarmaHeavenlyWaveC");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Cooldown2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "KarmaSpiritBondC");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown2 ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Cooldown3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "KarmaSoulShieldC");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown3 ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        RequireVar(this.DamageBlock);
        PlayAnimation("Spell2", 0, Owner, false, false, false);
        IncreaseShield(Owner, 0 + (this.DamageBlock ?? 0), true, true);
        RequireVar(this.SpeedBoost);
        RequireVar(this.MovementSpeedMod);
        RequireVar(this.AttackSpeedMod);
        RequireVar(this.MovementSpeedMod);
        RequireVar(this.AttackSpeedMod);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.DamageCounter = this.VALUE_BY_LEVEL;
        RequireVar(this.MissFortunePassive);
        RequireVar(this.AttackSpeedBonusPercent);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.MovementSpeedBonusPercent);
        PlayAnimation("Spell3", 0, Owner, false, false, false);
        SpellBuffAdd(Attacker, Target, "RumbleHeatingUp", 1, 1, 500, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "RumbleHeatingUp2", 1, 1, 500, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        RequireVar(this.TotalArmorAmount);
        SpellEffectCreate(this.Particle, default, "karma_soulShield_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.SoundParticle, default, "KarmaSoulShieldSound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, default, default, default);
        SetBuffToolTipVar(1, 0 + (this.TotalArmorAmount ?? 0));
        ApplyAssistMarker(Attacker, Owner, 10);
        IncreaseShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
        TeamID = GetTeamID(default);
        RequireVar(this.TotalArmorAmount);
        SpellEffectCreate(this.Particle, default, "karma_soulShield_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.SoundParticle, default, "KarmaSoulShieldSound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        SetBuffToolTipVar(1, 0 + (this.TotalArmorAmount ?? 0));
        ApplyAssistMarker(Attacker, Owner, 10);
        IncreaseShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
        Count = GetBuffCountFromCaster(Owner, Owner, "Visionary_Counter");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 7, () => {
            SpellBuffAdd(Owner, Owner, "Visionary", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffRemoveStacks(Owner, Owner, "Visionary_Counter", 0);
        });
        this.MoveSpeedMod = 0;
        this.WillRemove = false;
        IfNotHasBuff(Owner, Owner, "MissFortuneWaves", () => {
            this.MoveSpeedMod = 25;
            OverrideAnimation("Run", "Run2", Owner);
            this.WillRemove = true;
            SpellEffectCreate(this.running, default, "missFortune_passive_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, "root", default, Owner, default, default, false, default, default, default, default, default, default);
        });
        RequireVar(this.MoveSpeedMod);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        SpellEffectCreate(this.MoveSpeedPart1, default, "karma_spiritBond_speed_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, default, default, default, default, default, default);
        ApplyAssistMarker(Attacker, Owner, 10);
        this.punchdmg = 0;
        IfHasBuff(Owner, Owner, "MissFortuneStrut", () => {
            SpellBuffRemove(Owner, "MissFortuneStrut", Owner, default);
        });
        this.punchdmg = 0;
        OverrideAutoAttack(5, ExtraSlots, Owner, 1, true);
        this.punchdmg = 0;
        LevelZero = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        LevelOne = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SpellTwoMana = this.VALUE_BY_LEVEL;
        LevelTwo = Level;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SpellThreeMana = this.VALUE_BY_LEVEL;
        LevelThree = Level;
        If(LevelZero, default, CO_GREATER_THAN, default, 0, () => {
            SetPARCostInc(Owner, 0, SpellSlots, -80, PAR_MANA);
        });
        If(LevelOne, default, CO_GREATER_THAN, default, 0, () => {
            SetPARCostInc(Owner, 1, SpellSlots, -75, PAR_MANA);
        });
        If(LevelTwo, default, CO_GREATER_THAN, default, 0, () => {
            SetPARCostInc(Owner, 2, SpellSlots, 0 + (SpellTwoMana ?? 0), PAR_MANA);
        });
        If(LevelThree, default, CO_GREATER_THAN, default, 0, () => {
            SetPARCostInc(Owner, 3, SpellSlots, 0 + (SpellThreeMana ?? 0), PAR_MANA);
        });
        CharVars.HitCount = 0;
        RequireVar(this.MoveSpeedMod);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        ApplyAssistMarker(Attacker, Target, 10);
        SpellEffectCreate(this.KarmaSlow, default, "karma_spiritBond_slow_trigger.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        RequireVar(this.MantraBoolean);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.DamageToDeal);
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamOfAttacker = GetTeamID(default);
        LinkVisibility(Attacker, Owner);
        this.NegMoveSpeed = Math(0 + (this.MoveSpeedMod ?? 0), MO_MULTIPLY, -1);
        SpellEffectCreate(this.SBIdle1, default, "leBlanc_shackle_self_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.SBIdle2, default, "leBlanc_shackle_self_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.SoulShackleIdle, default, "karma_spiritBond_indicator_target_blank.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.SoulShackleTarget_blood, default, "karma_spiritBond_indicator_impact.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.MoveSpeedPart1, default, "karma_spiritBond_speed_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.MoveSpeedPart2, default, "karma_spiritBond_speed_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "root", default, Attacker, default, default, false, default, default, false, false, default, default);
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Attacker, 0 + (this.MoveSpeedMod ?? 0));
        If(this.MantraBoolean, default, CO_EQUAL, default, 1, () => {
            SpellEffectCreate(this.SoulShackleTarget2, default, "karma_spiritBond_indicator_target.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.dmgIndicatorL2, default, "karma_spiritBond_dmg_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Owner, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.dmgIndicatorR2, default, "karma_spiritBond_dmg_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Owner, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.dmgIndicatorR, default, "karma_spiritBond_dmg_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "R_hand", default, Attacker, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.dmgIndicatorL, default, "karma_spiritBond_dmg_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "L_hand", default, Attacker, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.ParticleID, this.SoulShackleIdle, "karma_spiritBond_ult_beam_teamID_ally_green.troy", "karma_spiritBond_ult_beam_teamID_enemy_red.troy", TeamOfAttacker ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "root", default, Owner, "root", default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.SoundOne, this.SoundTwo, "KarmaSpiritBondSoundGreen.troy", "KarmaSpiritBondSoundRed.troy", TeamOfAttacker ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.ParticleID, this.SoulShackleIdle, "karma_spiritBond_ult_beam_teamID_ally_green.troy", "karma_spiritBond_ult_beam_teamID_enemy_red.troy", TeamOfAttacker ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "root", default, Owner, "root", default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.SoundOne, this.SoundTwo, "KarmaSpiritBondSoundGreen.troy", "KarmaSpiritBondSoundRed.troy", TeamOfAttacker ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        });
        Distance = DistanceBetweenObjects("Owner", "Attacker");
        OffsetAngle = GetOffsetAngle(Owner, Attacker);
        HalfDistance = Math(0 + (Distance ?? 0), MO_DIVIDE, 2);
        CenterPoint = GetPointByUnitFacingOffset(Owner, 0 + (HalfDistance ?? 0), 0 + (OffsetAngle ?? 0));
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            ForEachUnitInTargetRectangle(Attacker, CenterPoint, 25, 0 + (HalfDistance ?? 0), "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes ", false, "KarmaLinkDmgCDOrder", (Unit) => {
                If(Unit, default, CO_NOT_EQUAL, Owner, default, () => {
                    If(Unit, default, CO_NOT_EQUAL, Attacker, default, () => {
                        SpellBuffAdd(Attacker, Unit, "KarmaLinkDmgCDOrder", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        If(this.MantraBoolean, default, CO_EQUAL, default, 1, () => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Owner, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                        Else(() => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Owner, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                    });
                });
            });
        });
        Else(() => {
            ForEachUnitInTargetRectangle(Attacker, CenterPoint, 25, 0 + (HalfDistance ?? 0), "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes ", false, "KarmaLinkDmgCDChaos", (Unit) => {
                If(Unit, default, CO_NOT_EQUAL, Owner, default, () => {
                    If(Unit, default, CO_NOT_EQUAL, Attacker, default, () => {
                        SpellBuffAdd(Owner, Unit, "KarmaLinkDmgCDChaos", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        If(this.MantraBoolean, default, CO_EQUAL, default, 1, () => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                        Else(() => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                    });
                });
            });
        });
        RequireVar(this.CooldownToRestore);
        SetSlotSpellCooldownTimeVer2(0 + (this.CooldownToRestore ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetPARColorOverride(Owner, 255, 0, 0, 255, 175, 0, 0, 255);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        IfHasBuff(Owner, Owner, "RumbleGrenadeCounter", () => {
            SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        });
        IncPAR(Owner, 100);
        Duration = GetBuffRemainingDuration(Owner, "RumbleOverheat");
        SpellBuffAdd(Attacker, Owner, "RumbleOverheatSound", 1, 1, 0 + (Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, true, default);
        SpellBuffAdd(Attacker, Owner, "RumbleHeatDelay", 1, 1, 0 + (Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.punchdmg = 0;
        OverrideAutoAttack(5, ExtraSlots, Owner, 1, true);
        RequireVar(this.MantraBoolean);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.DamageToDeal);
        TeamOfOwner = GetTeamID(default);
        this.NegMoveSpeed = Math(0 + (this.MoveSpeedMod ?? 0), MO_MULTIPLY, -1);
        IncStat(IncPercentMovementSpeedMod, Attacker, 0 + (this.NegMoveSpeed ?? 0));
        SpellEffectCreate(this.MoveSpeedPart1, default, "karma_spiritBond_speed_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "root", default, Attacker, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.SBIdle1, default, "leBlanc_shackle_self_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.SBIdle2, default, "leBlanc_shackle_self_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.SoulShackleTarget_blood, default, "karma_spiritBond_indicator_target_blank.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, default, default, false, false, default, default);
        If(this.MantraBoolean, default, CO_EQUAL, default, 1, () => {
            SpellEffectCreate(this.SoulShackleTarget, default, "karma_spiritBond_indicator_target_enemy.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.SoulShackleTarget2, default, "karma_spiritBond_indicator_impact_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.ParticleID, this.SoulShackleIdle, "karma_spiritBond_ult_beam_teamID_ally_green.troy", "karma_spiritBond_ult_beam_teamID_enemy_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "root", default, Owner, "root", default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.SoundOne, this.SoundTwo, "KarmaSpiritBondSoundGreen.troy", "KarmaSpiritBondSoundRed.troy", TeamOfAttacker ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.SoulShackleTarget, default, "karma_spiritBond_indicator_impact.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.ParticleID, this.SoulShackleIdle, "karma_spiritBond_ult_beam_teamID_ally_green.troy", "karma_spiritBond_ult_beam_teamID_enemy_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "root", default, Owner, "root", default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.SoundOne, this.SoundTwo, "KarmaSpiritBondSoundGreen.troy", "KarmaSpiritBondSoundRed.troy", TeamOfAttacker ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        });
        Distance = DistanceBetweenObjects("Owner", "Attacker");
        OffsetAngle = GetOffsetAngle(Attacker, Owner);
        HalfDistance = Math(0 + (Distance ?? 0), MO_DIVIDE, 2);
        CenterPoint = GetPointByUnitFacingOffset(Attacker, 0 + (HalfDistance ?? 0), 0 + (OffsetAngle ?? 0));
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            ForEachUnitInTargetRectangle(Attacker, CenterPoint, 25, 0 + (HalfDistance ?? 0), "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes ", false, "KarmaLinkDmgCDOrder", (Unit) => {
                If(Unit, default, CO_NOT_EQUAL, Attacker, default, () => {
                    If(Unit, default, CO_NOT_EQUAL, Owner, default, () => {
                        SpellBuffAdd(Attacker, Unit, "KarmaLinkDmgCDOrder", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        If(this.MantraBoolean, default, CO_EQUAL, default, 1, () => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                        Else(() => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                    });
                });
            });
        });
        Else(() => {
            ForEachUnitInTargetRectangle(Attacker, CenterPoint, 25, 0 + (HalfDistance ?? 0), "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes ", false, "KarmaLinkDmgCDChaos", (Unit) => {
                If(Unit, default, CO_NOT_EQUAL, Owner, default, () => {
                    If(Unit, default, CO_NOT_EQUAL, Attacker, default, () => {
                        SpellBuffAdd(Attacker, Unit, "KarmaLinkDmgCDChaos", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        If(this.MantraBoolean, default, CO_EQUAL, default, 1, () => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                        Else(() => {
                            If(Unit, default, CO_SAME_TEAM, Attacker, default, () => {
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.NegMoveSpeed ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBHaste", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                                });
                            });
                            Else(() => {
                                SpellEffectCreate(hit, default, "karma_spiritBond_damage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                                BreakSpellShields(Unit);
                                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 0, false, false, Attacker);
                                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                                    NextBuffVars.MoveSpeedMod = this.MoveSpeedMod ?? 0;
                                    SpellBuffAdd(Attacker, Unit, "KarmaMantraSBSlow", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
                                });
                            });
                        });
                    });
                });
            });
        });
        IfNotHasBuff(Attacker, Owner, "KarmaSpiritBondC", () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Count = GetBuffCountFromCaster(Owner, Owner, "CaitlynHeadshotCount");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, CharVars.tooltipAmount, default, () => {
            SpellBuffAdd(Owner, Owner, "CaitlynHeadshot", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffRemoveStacks(Owner, Owner, "CaitlynHeadshotCount", 0);
        });
        SetDodgePiercing(Owner, true);
        SetBuffToolTipVar(1, 8);
        this.lastTooltip = 8;
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.FinalDamage);
        RequireVar(this.HealthAmount);
        RequireVar(this.ArmorAmount);
        RequireVar(this.MRAmount);
        AnnieSkinID = GetSkinID(Owner);
        If(AnnieSkinID, default, CO_EQUAL, default, 5, () => {
            SpellEffectCreate(this.a, default, "SunfireCape_Aura_frost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.a, default, "SunfireCapeAura_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "olaf_axeThrow_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(a, default, "olaf_axeThrow_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(a, default, "olaf_axeThrow_tar_03.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        BonusDamage = this.VALUE_BY_LEVEL;
        TotalDamage = GetTotalAttackDamage(Attacker);
        IsStealthed = GetStatus(Owner, GetStealthed);
        TotalDamage = Math(0.5, MO_MULTIPLY, 0 + (TotalDamage ?? 0));
        DamageToDeal = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (TotalDamage ?? 0));
        If(IsStealthed, default, CO_EQUAL, default, false, () => {
            ApplyDamage(Attacker, Owner, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        ElseIf(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            ApplyDamage(Attacker, Owner, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        Else(() => {
            CanSee = CanSeeTarget(Attacker, Owner);
            If(CanSee, default, CO_EQUAL, default, true, () => {
                ApplyDamage(Attacker, Owner, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
            });
        });
        RequireVar(this.DamageAbsorption);
        IncScaleSkinCoef(0.1, Owner);
        OverrideAnimation("Attack1", "Attack3", Owner);
        OverrideAnimation("Attack2", "Attack3", Owner);
        OverrideAnimation("Run", "Spell2", Owner);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SizeByLevel = this.VALUE_BY_LEVEL;
        IncScaleSkinCoef(0.5, Owner);
        SpellEffectCreate(this.Particle, default, "feast_tar_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, true, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.a, default, "olaf_axe_trigger.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectCreate(this.Particle1, this.Particle, "olaf_axe_totem_team_id_green.troy", "olaf_axe_totem_team_id_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 400, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        Count = GetBuffCountFromCaster(Owner, Owner, "Feast");
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        HealthPerStack = this.VALUE_BY_LEVEL;
        BonusHealth = Math(0 + (HealthPerStack ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
        SetBuffToolTipVar(1, 0 + (BonusHealth ?? 0));
        If(Count, default, CO_EQUAL, default, 1, () => {
            OverrideAnimation("Run", "Run1", Owner);
        });
        ElseIf(Count, default, CO_EQUAL, default, 2, () => {
            OverrideAnimation("Run", "Run2", Owner);
        });
        ElseIf(Count, default, CO_EQUAL, default, 3, () => {
            OverrideAnimation("Run", "Run3", Owner);
        });
        ElseIf(Count, default, CO_EQUAL, default, 4, () => {
            OverrideAnimation("Run", "Run4", Owner);
        });
        ElseIf(Count, default, CO_EQUAL, default, 5, () => {
            OverrideAnimation("Run", "Run5", Owner);
        });
        ElseIf(Count, default, CO_EQUAL, default, 6, () => {
            OverrideAnimation("Run", "Run6", Owner);
        });
        RequireVar(this.TargetPos);
        RequireVar(this.FacingPos);
        RequireVar(this.MovementSpeedMod);
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(a, default, "rupture_cas_01.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(a, default, "rupture_cas_01.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        });
        RequireVar(this.DamageAmount);
        RequireVar(this.MoveSpeedMod);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.DamageAmount);
        RequireVar(this.MoveSpeedMod);
        BouncePos = GetRandomPointInAreaUnit(Owner, 10, 10);
        Move(Owner, BouncePos, 10, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 10, FACE_MOVEMENT_DIRECTION);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        ApplyAssistMarker(Attacker, Owner, 10);
        Count = GetBuffCountFromAll(Owner, "TantrumCounter");
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        HitsRequired = this.VALUE_BY_LEVEL;
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, HitsRequired, default, () => {
            SpellBuffAdd(Owner, Owner, "TantrumCanCast", 1, 1, 12, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
            SpellBuffRemoveStacks(Owner, Owner, "TantrumCounter", 0);
        });
        SealSpellSlot(2, SpellSlots, Owner, false, default);
        RequireVar(NextBuffVars.ParticleID);
        RequireVar(NextBuffVars.WillRemove);
        PlayAnimation("Spell2", 0, Owner, true, false, true);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetForceRenderParticles);
        RequireVar(this.WillBeam);
        RequireVar(this.ParticleID);
        RequireVar(this.LifeLossPercent);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        InitialDamage = Math(0 + (Level ?? 0), MO_MULTIPLY, 0.003);
        InitialDamage = Math(0 + (InitialDamage ?? 0), MO_ADD, 0.012);
        AbilityPowerMod = GetStat(GetFlatMagicDamageMod, Owner);
        AbilityPowerBonus = Math(0 + (AbilityPowerMod ?? 0), MO_MULTIPLY, _5e_05);
        LifeLossPercent = Math(0 + (AbilityPowerBonus ?? 0), MO_ADD, 0 + (InitialDamage ?? 0));
        BaseDamage = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            Temp1 = GetPAROrHealth(Unit, GetMaxHealth, PAR_MANA);
            Temp1 = Math(0 + (Temp1 ?? 0), MO_MIN, 4500);
            PercentDamage = Math(0 + (Temp1 ?? 0), MO_MULTIPLY, 0 + (LifeLossPercent ?? 0));
            PercentDamage = Math(0 + (PercentDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
            ApplyDamage(Attacker, Unit, 0 + (PercentDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
        });
        this.lastTooltip = 0;
        this.LastHeal = 0;
        this.LastMana = 0;
        RequireVar(this.ManaCost);
        RequireVar(this.MagicResistReduction);
        SpellEffectCreate(this.ParticleID, default, "olaf_viciousStrikes_weapon_glow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_3", default, Owner, "BUFFBONE_CSTM_WEAPON_2", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ParticleID, default, "olaf_viciousStrikes_weapon_glow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Target, false, Owner, "BUFFBONE_CSTM_WEAPON_7", default, Owner, "BUFFBONE_CSTM_WEAPON_4", default, false, default, default, default, default, default, default);
        RequireVar(this.DamageGain);
        RequireVar(this.LifestealStat);
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 50, Owner, 4, Nothing, Nothing, true);
        RequireVar(this.AttackSpeed);
        RequireVar(this.DamageReturn);
        RequireVar(this.ArmorAmount);
        RequireVar(this.BubbleID);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        BaseDamage = this.VALUE_BY_LEVEL;
        AP = GetStat(GetFlatMagicDamageMod, Attacker);
        APBonus = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.6);
        TotalDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (APBonus ?? 0));
        this.DamagePerTick = Math(0 + (TotalDamage ?? 0), MO_DIVIDE, 3);
        this.DOTCounter = 0;
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 100, Owner, 20, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(Team, 100, Owner, 20, Nothing, Nothing, true);
        ApplyAssistMarker(Attacker, Owner, 10);
        ApplyAssistMarker(Attacker, Owner, 10);
        SetStatus(Owner, default, SetCanMove);
        Count = GetBuffCountFromCaster(Owner, Owner, "Pyromania");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 5, () => {
            SpellBuffAdd(Owner, Owner, "Pyromania_particle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffRemoveStacks(Owner, Owner, "Pyromania", 0);
        });
        RequireVar(this.MissChance);
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        this.Collide = false;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        RequireVar(this.CastPoint);
        RequireVar(this.Damage);
        SpellEffectCreate(hi, default, "vayne_E_tar.troy", default, TEAM_NEUTRAL, 200, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, true, false, false, false, false, default, default);
        StartTrackingCollisions(Owner, true);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanCast);
        CastPoint = this.CastPoint;
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, CastPoint);
        PushBack = Math(0 + (Distance ?? 0), MO_ADD, 475);
        CastOffset = GetOffsetAngle(Owner, this.CastPoint);
        TargetPos = GetPointByUnitFacingOffset(Owner, -475, 0 + (CastOffset ?? 0));
        Move(Owner, TargetPos, 2000, 0, 0, FIRST_COLLISION_HIT, POSTPONE_CURRENT_ORDER, 0, KEEP_CURRENT_FACING);
        this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
        RequireVar(this.FearDuration);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(a, default, "jackintheboxpoof.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(a, default, "jackintheboxpoof.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
        });
        RequireVar(this.BuffAdded);
        RequireVar(this.WillFade);
        RequireVar(this.TimeLastHit);
        RequireVar(this.StealthDelay);
        RequireVar(this.TotalCostPerTick);
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0);
        this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
        SpellEffectCreate(this.Particle, default, "ShadowWalk_buf.troy", default, default, default, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, default, default, default, default, default, default, default);
        RequireVar(this.TargetPos);
        RequireVar(this.BonusHealth);
        RequireVar(this.FearDuration);
        SpellBuffClear(Owner, "JackInTheBoxSoftLock");
        RequireVar(this.DCooldown);
        SetDodgePiercing(Owner, true);
        this.HasHit = false;
        RequireVar(this.CritDmgBonus);
        RequireVar(this.DamageAmount);
        RequireVar(this.DamageDealt);
        RequireVar(this.DamageTaken);
        RequireVar(this.shacoDamageTaken);
        SetStatus(Owner, default, SetStunned);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetNoRender);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(FadeParticle, default, "HallucinatePoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        RequireVar(this.CastPos);
        RequireVar(this.CritDmgBonus);
        RequireVar(this.DCooldown);
        ID = PushCharacterFade(Owner, 0.2, default, ID);
        SetStatus(Owner, default, SetStealthed);
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, default, "Jester_Copy.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_ORDER, Nothing, true, Owner, "root", default, Target, "root", default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "Jester_Copy.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CHAOS, Nothing, true, Owner, "root", default, Target, "root", default, false, false, false, false, false, default, default);
        });
        RequireVar(this.DamageAmount);
        RequireVar(this.DamageDealt);
        RequireVar(this.DamageTaken);
        TeamID = GetTeamID(default);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetTargetable);
        this.TeamID = GetTeamID(default);
        this.Active = false;
        this.Sprung = false;
        SpellEffectCreate(this.Particle2, this.Particle, "caitlyn_yordleTrap_idle_green.troy", "caitlyn_yordleTrap_idle_red.troy", this.TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(SpeedParticle, default, "vayne_ult_speed_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        this.SpeedParticle = SpeedParticle;
        IfHasBuff(Owner, Owner, "VayneInquisition", () => {
            OverrideAnimation("Idle1", "Idle_TumbleUlt", Owner);
            OverrideAnimation("Idle2", "Idle_TumbleUlt", Owner);
            OverrideAnimation("Idle3", "Idle_TumbleUlt", Owner);
            OverrideAnimation("Idle4", "Idle_TumbleUlt", Owner);
            OverrideAnimation("Attack1", "Attack_TumbleUlt", Owner);
            OverrideAnimation("Attack2", "Attack_TumbleUlt", Owner);
            OverrideAnimation("Crit", "Attack_TumbleUlt", Owner);
            OverrideAnimation("Spell3", "Attack_TumbleUlt", Owner);
            OverrideAnimation("Run", "Run_TumbleUlt", Owner);
            OverrideAutoAttack(5, ExtraSlots, Owner, 1, false);
        });
        Else(() => {
            OverrideAnimation("Idle1", "Idle_Tumble", Owner);
            OverrideAnimation("Idle2", "Idle_Tumble", Owner);
            OverrideAnimation("Idle3", "Idle_Tumble", Owner);
            OverrideAnimation("Idle4", "Idle_Tumble", Owner);
            OverrideAnimation("Attack1", "Attack_Tumble", Owner);
            OverrideAnimation("Attack2", "Attack_Tumble", Owner);
            OverrideAnimation("Crit", "Attack_Tumble", Owner);
            OverrideAnimation("Run", "Run_Tumble", Owner);
            OverrideAutoAttack(2, ExtraSlots, Owner, 1, false);
        });
        OverrideAnimation("Run", "Spell3b", Owner);
        SpellEffectCreate(SpeedParticle, default, "vayne_passive_speed_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        this.SpeedParticle = SpeedParticle;
        RequireVar(this.ADMod);
        IfHasBuff(Owner, Owner, "VayneTumbleBonus", () => {
            OverrideAnimation("Idle1", "Idle_TumbleUlt", Owner);
            OverrideAnimation("Idle2", "Idle_TumbleUlt", Owner);
            OverrideAnimation("Idle3", "Idle_TumbleUlt", Owner);
            OverrideAnimation("Idle4", "Idle_TumbleUlt", Owner);
            OverrideAnimation("Attack1", "Attack_TumbleUlt", Owner);
            OverrideAnimation("Attack2", "Attack_TumbleUlt", Owner);
            OverrideAnimation("Crit", "Attack_TumbleUlt", Owner);
            OverrideAnimation("Spell3", "Attack_TumbleUlt", Owner);
            OverrideAnimation("Run", "Run_TumbleUlt", Owner);
            OverrideAutoAttack(5, ExtraSlots, Owner, 1, false);
        });
        Else(() => {
            OverrideAnimation("Idle1", "Idle_Ult", Owner);
            OverrideAnimation("Idle2", "Idle_Ult", Owner);
            OverrideAnimation("Idle3", "Idle_Ult", Owner);
            OverrideAnimation("Idle4", "Idle_Ult", Owner);
            OverrideAnimation("Attack1", "Attack_Ult", Owner);
            OverrideAnimation("Attack2", "Attack_Ult", Owner);
            OverrideAnimation("Crit", "Attack_Ult", Owner);
            OverrideAnimation("Spell3", "Attack_Ult", Owner);
            OverrideAnimation("Run", "Run_Ult", Owner);
            OverrideAutoAttack(4, ExtraSlots, Owner, 1, false);
        });
        PushCharacterFade(Owner, 0.2, default, default);
        SetStatus(Owner, default, SetStealthed);
        TeamID = GetTeamID(default);
        PlayAnimation("Spell1", 0, Owner, false, false, true);
        RequireVar(this.DashSpeed);
        RequireVar(this.TargetPos);
        RequireVar(this.Distance);
        this.Failed = false;
        TargetPos = this.TargetPos;
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        Move(Owner, TargetPos, 0 + (this.DashSpeed ?? 0), 0, 0, FIRST_WALL_HIT, POSTPONE_CURRENT_ORDER, 0 + (this.Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        IfHasBuff(Owner, Owner, "VayneInquisition", () => {
            SpellEffectCreate(hi, default, "vayne_ult_invis_cas.troy", default, TEAM_NEUTRAL, 150, 0, TEAM_UNKNOWN, Nothing, false, Nothing, "C_BUFFBONE_GLB_CHEST_LOC", Owner, Owner, default, default, true, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.ShinyParticle, default, "vayne_q_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", default, Target, default, default, true, default, default, false, false, default, default);
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.GlobeOne, default, "vayne_W_ring1.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, default, default, default);
        Caster = SetBuffCasterUnit();
        TeamID = GetTeamID(default);
        TeamIDTarget = GetTeamID(default);
        Count = GetBuffCountFromCaster(Owner, Caster, "VayneSilveredDebuff");
        If(Count, default, CO_EQUAL, default, 1, () => {
            ForEachUnitInTargetArea(Owner, Caster, 3000, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", "VayneSilveredDebuff", true, (Unit) => {
                SpellBuffRemove(Unit, "VayneSilveredDebuff", Caster, 0);
                SpellBuffRemove(Unit, "VayneSilveredDebuff", Caster, 0);
            });
            SpellBuffAdd(Owner, Owner, "VayneSilverParticle1", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ElseIf(Count, default, CO_EQUAL, default, 2, () => {
            SpellBuffRemove(Owner, "VayneSilverParticle1", Owner, 0);
            this.DoOnce2 = true;
            SpellEffectCreate(this.GlobeTwo, default, "vayne_W_ring2.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        });
        SpellEffectCreate(this.Aegis, default, "ZettasManaManipulator_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CASTER, Nothing, true, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        this.StartingLevel = GetLevel(Attacker);
        ADFromLevel = Math(2, MO_MULTIPLY, 0 + (this.StartingLevel ?? 0));
        IncPermanentStat(IncPermanentFlatArmorMod, Owner, 0 + (ADFromLevel ?? 0));
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, 0 + (ADFromLevel ?? 0));
        TAD = GetTotalAttackDamage(Attacker);
        MaxHealth = GetPAROrHealth(Attacker, GetMaxHealth, PAR_MANA);
        ADFromStats = Math(0 + (TAD ?? 0), MO_MULTIPLY, 0.35);
        ADFromStats = Math(0 + (ADFromStats ?? 0), MO_SUBTRACT, 10);
        ADFromStats = Math(0 + (ADFromStats ?? 0), MO_MAX, 10);
        HealthFromStats = Math(0 + (MaxHealth ?? 0), MO_MULTIPLY, 0.35);
        HealthFromStats = Math(0 + (HealthFromStats ?? 0), MO_SUBTRACT, 60);
        HealthFromStats = Math(0 + (HealthFromStats ?? 0), MO_MAX, 60);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (HealthFromStats ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (ADFromStats ?? 0));
        If(this.StartingLevel, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
            IncPermanentStat(IncPermanentFlatMovementSpeedMod, Owner, 30);
        });
        If(this.StartingLevel, default, CO_GREATER_THAN_OR_EQUAL, default, 6, () => {
            IncPermanentStat(IncPermanentFlatMovementSpeedMod, Owner, 30);
        });
        If(this.StartingLevel, default, CO_GREATER_THAN_OR_EQUAL, default, 11, () => {
            IncPermanentStat(IncPermanentFlatMovementSpeedMod, Owner, 40);
        });
        IncPermanentStat(IncPermanentPercentHPRegenMod, Owner, -1);
        SetStatus(Owner, default, SetGhosted);
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, 400, 0);
        Beam2 = GetPointByUnitFacingOffset(Owner, 600, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 800, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other2 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam2, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        LinkVisibility(Other1, Owner);
        LinkVisibility(Other1, Other2);
        LinkVisibility(Other2, Other3);
        LinkVisibility(Other3, Attacker);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        RequireVar(this.MoveSpeedMod);
        SpellEffectCreate(this.DiseaseCloud, default, "yorick_necroCloud.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SetStatus(Attacker, default, SetGhosted);
        NearbyChampion = false;
        CheckBuilding = true;
        this.IsDead = false;
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, -145, 0);
        Beam2 = GetPointByUnitFacingOffset(Owner, 250, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 550, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other2 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam2, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        LinkVisibility(Other1, Owner);
        LinkVisibility(Other1, Other2);
        LinkVisibility(Other2, Other3);
        LinkVisibility(Attacker, Other3);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Owner, default, SetStunned);
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, 850, 0);
        Beam2 = GetPointByUnitFacingOffset(Owner, 1150, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 1400, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other2 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam2, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        LinkVisibility(Other1, Owner);
        LinkVisibility(Other1, Other2);
        LinkVisibility(Other2, Other3);
        LinkVisibility(Other3, Attacker);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Target, 10);
        SpellEffectCreate(this.Particle1, default, "xerath_magechains_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "Xerath_beam_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 550, 0, TEAM_UNKNOWN, Owner, false, Owner, "top", default, Target, default, default, true, false, false, false, false, default, default);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Target, 10);
        YorickLevel = GetLevel(Owner);
        YorickAP = GetStat(GetFlatMagicDamageMod, Owner);
        HealthFromAP = Math(0 + (YorickAP ?? 0), MO_MULTIPLY, 1);
        ADFromAP = Math(0 + (YorickAP ?? 0), MO_MULTIPLY, 0.2);
        HealthFromLevel = Math(50, MO_MULTIPLY, 0 + (YorickLevel ?? 0));
        ADFromLevel = Math(2, MO_MULTIPLY, 0 + (YorickLevel ?? 0));
        TotalAD = Math(0 + (ADFromLevel ?? 0), MO_ADD, 0 + (ADFromAP ?? 0));
        TotalHealth = Math(0 + (HealthFromLevel ?? 0), MO_ADD, 0 + (HealthFromAP ?? 0));
        IncPermanentStat(IncPermanentFlatHPPoolMod, Attacker, 0 + (TotalHealth ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Attacker, 0 + (TotalAD ?? 0));
        IncPermanentStat(IncPermanentFlatArmorMod, Attacker, 0 + (TotalAD ?? 0));
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Attacker, 0 + (TotalAD ?? 0));
        TeamOfOwner = GetTeamID(default);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Attacker, default, SetForceRenderParticles);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.ParticleID, this.ParticleID2, "XerathR_beam_warning_green.troy", "XerathR_beam_warning_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 550, 0, TEAM_UNKNOWN, Owner, false, Owner, "bottom", default, Attacker, "bottom", default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.ParticleID, this.ParticleID2, "XerathR_beam_warning_green.troy", "XerathR_beam_warning_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 550, 0, TEAM_UNKNOWN, Owner, false, Owner, "bottom", default, Attacker, "bottom", default, true, false, false, false, false, default, default);
        });
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, -145, 0);
        Beam2 = GetPointByUnitFacingOffset(Owner, 100, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 200, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other2 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam2, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        LinkVisibility(Other1, Owner);
        LinkVisibility(Other1, Other2);
        LinkVisibility(Other2, Other3);
        LinkVisibility(Attacker, Other3);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        YorickLevel = GetLevel(Owner);
        YorickAP = GetStat(GetFlatMagicDamageMod, Owner);
        HealthFromAP = Math(0 + (YorickAP ?? 0), MO_MULTIPLY, 0.5);
        ADFromAP = Math(0 + (YorickAP ?? 0), MO_MULTIPLY, 0.2);
        HealthFromLevel = Math(50, MO_MULTIPLY, 0 + (YorickLevel ?? 0));
        ADFromLevel = Math(2, MO_MULTIPLY, 0 + (YorickLevel ?? 0));
        TotalAD = Math(0 + (ADFromLevel ?? 0), MO_ADD, 0 + (ADFromAP ?? 0));
        TotalHealth = Math(0 + (HealthFromLevel ?? 0), MO_ADD, 0 + (HealthFromAP ?? 0));
        IncPermanentStat(IncPermanentFlatHPPoolMod, Attacker, 0 + (TotalHealth ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Attacker, 0 + (TotalAD ?? 0));
        IncPermanentStat(IncPermanentFlatArmorMod, Attacker, 0 + (TotalAD ?? 0));
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Attacker, 0 + (TotalAD ?? 0));
        PlayAnimation("Summon", 0, Owner, false, false, false);
        RequireVar(this.BonusDamage);
        RequireVar(this.SpellCooldown);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        RequireVar(this.DurationLevel);
        TeamOfOwner = GetTeamID(default);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Attacker, default, SetForceRenderParticles);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, default, "wallofpain_new_post_red.troy", default, TEAM_CHAOS, 200, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.Particle1, default, "wallofpain_new_post_green.troy", default, TEAM_ORDER, 200, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.Particle2, default, "wallofpain_new_post_red.troy", default, TEAM_CHAOS, 200, 0, TEAM_CHAOS, Nothing, true, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.Particle3, default, "wallofpain_new_post_green.troy", default, TEAM_ORDER, 200, 0, TEAM_ORDER, Nothing, true, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.ParticleID6, default, "YorickPHWallBlue.troy", default, TEAM_ORDER, 200, 0, TEAM_UNKNOWN, Owner, false, Owner, "bottom", default, Attacker, "bottom", default, false, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "wallofpain_new_post_red.troy", default, TEAM_ORDER, 200, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.Particle1, default, "wallofpain_new_post_green.troy", default, TEAM_CHAOS, 200, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.Particle2, default, "wallofpain_new_post_red.troy", default, TEAM_ORDER, 200, 0, TEAM_ORDER, Nothing, true, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.Particle3, default, "wallofpain_new_post_green.troy", default, TEAM_CHAOS, 200, 0, TEAM_CHAOS, Nothing, true, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.ParticleID6, default, "YorickPHWallBlue.troy", default, TEAM_CHAOS, 200, 0, TEAM_UNKNOWN, Owner, false, Owner, "bottom", default, Attacker, "bottom", default, false, default, default, false, false, default, default);
        });
        RequireVar(this.DamageToDeal);
        RequireVar(this.Pos);
        Pos = this.Pos;
        ForEachUnitInTargetArea(Attacker, Pos, 75, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            IfHasBuff(Unit, Nothing, "YorickDeathGripExtra", () => {
                
            });
            Else(() => {
                SpellBuffAdd(Attacker, Unit, "YorickDeathGripExtra", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
                SpellBuffAdd(Attacker, Unit, "YorickDeathGripTarget", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Snare, 0, true, false, false, default);
            });
        });
        SetStatus(Attacker, default, SetGhosted);
        this.IsDead = false;
        PlayAnimation("Death", 4, Owner, false, false, true);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        CurrentCooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        CurrentCooldown2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCooldown, default, CO_LESS_THAN_OR_EQUAL, default, 4, () => {
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 4);
        });
        If(CurrentCooldown2, default, CO_LESS_THAN_OR_EQUAL, default, 4, () => {
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 4);
        });
        SetStatus(Owner, default, SetGhosted);
        SpellEffectCreate(this.SpectraFX, default, "YorickPHSpectral.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Attacker, default, default, Attacker, default, default, false, default, default, false, false, default, default);
        RequireVar(this.AttackDamageMod);
        RequireVar(this.MovementSpeedPercent);
        this.IsDead = false;
        this.StartingLevel = GetLevel(Attacker);
        ADFromLevel = Math(2, MO_MULTIPLY, 0 + (this.StartingLevel ?? 0));
        IncPermanentStat(IncPermanentFlatArmorMod, Owner, 0 + (ADFromLevel ?? 0));
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, 0 + (ADFromLevel ?? 0));
        TAD = GetTotalAttackDamage(Attacker);
        MaxHealth = GetPAROrHealth(Attacker, GetMaxHealth, PAR_MANA);
        ADFromStats = Math(0 + (TAD ?? 0), MO_MULTIPLY, 0.35);
        ADFromStats = Math(0 + (ADFromStats ?? 0), MO_SUBTRACT, 10);
        ADFromStats = Math(0 + (ADFromStats ?? 0), MO_MAX, 10);
        HealthFromStats = Math(0 + (MaxHealth ?? 0), MO_MULTIPLY, 0.35);
        HealthFromStats = Math(0 + (HealthFromStats ?? 0), MO_SUBTRACT, 60);
        HealthFromStats = Math(0 + (HealthFromStats ?? 0), MO_MAX, 60);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (HealthFromStats ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (ADFromStats ?? 0));
        If(this.StartingLevel, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
            IncPermanentStat(IncPermanentFlatMovementSpeedMod, Owner, 30);
        });
        If(this.StartingLevel, default, CO_GREATER_THAN_OR_EQUAL, default, 6, () => {
            IncPermanentStat(IncPermanentFlatMovementSpeedMod, Owner, 30);
        });
        If(this.StartingLevel, default, CO_GREATER_THAN_OR_EQUAL, default, 11, () => {
            IncPermanentStat(IncPermanentFlatMovementSpeedMod, Owner, 40);
        });
        IncPermanentStat(IncPermanentPercentHPRegenMod, Owner, -1);
        SetStatus(Owner, default, SetGhosted);
        RequireVar(this.LifestealPercent);
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.LifestealPercent ?? 0));
        this.StartingLevel = GetLevel(Attacker);
        ADFromLevel = Math(2, MO_MULTIPLY, 0 + (this.StartingLevel ?? 0));
        IncPermanentStat(IncPermanentFlatArmorMod, Owner, 0 + (ADFromLevel ?? 0));
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, 0 + (ADFromLevel ?? 0));
        TAD = GetTotalAttackDamage(Attacker);
        MaxHealth = GetPAROrHealth(Attacker, GetMaxHealth, PAR_MANA);
        ADFromStats = Math(0 + (TAD ?? 0), MO_MULTIPLY, 0.35);
        ADFromStats = Math(0 + (ADFromStats ?? 0), MO_SUBTRACT, 10);
        ADFromStats = Math(0 + (ADFromStats ?? 0), MO_MAX, 10);
        HealthFromStats = Math(0 + (MaxHealth ?? 0), MO_MULTIPLY, 0.35);
        HealthFromStats = Math(0 + (HealthFromStats ?? 0), MO_SUBTRACT, 60);
        HealthFromStats = Math(0 + (HealthFromStats ?? 0), MO_MAX, 60);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (HealthFromStats ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (ADFromStats ?? 0));
        If(this.StartingLevel, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
            IncPermanentStat(IncPermanentFlatMovementSpeedMod, Owner, 30);
        });
        If(this.StartingLevel, default, CO_GREATER_THAN_OR_EQUAL, default, 6, () => {
            IncPermanentStat(IncPermanentFlatMovementSpeedMod, Owner, 30);
        });
        If(this.StartingLevel, default, CO_GREATER_THAN_OR_EQUAL, default, 11, () => {
            IncPermanentStat(IncPermanentFlatMovementSpeedMod, Owner, 40);
        });
        IncPermanentStat(IncPermanentPercentHPRegenMod, Owner, -1);
        RequireVar(this.MovementSpeedPercent);
        SetStatus(Owner, default, SetGhosted);
        RequireVar(this.DamageToDeal);
        RequireVar(this.Pos);
        YorickLevel = GetLevel(Owner);
        YorickAP = GetStat(GetFlatMagicDamageMod, Owner);
        HealthFromAP = Math(0 + (YorickAP ?? 0), MO_MULTIPLY, 1);
        ADFromAP = Math(0 + (YorickAP ?? 0), MO_MULTIPLY, 0.2);
        HealthFromLevel = Math(50, MO_MULTIPLY, 0 + (YorickLevel ?? 0));
        ADFromLevel = Math(2, MO_MULTIPLY, 0 + (YorickLevel ?? 0));
        TotalAD = Math(0 + (ADFromLevel ?? 0), MO_ADD, 0 + (ADFromAP ?? 0));
        TotalHealth = Math(0 + (HealthFromLevel ?? 0), MO_ADD, 0 + (HealthFromAP ?? 0));
        IncPermanentStat(IncPermanentFlatHPPoolMod, Attacker, 0 + (TotalHealth ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Attacker, 0 + (TotalAD ?? 0));
        IncPermanentStat(IncPermanentFlatArmorMod, Attacker, 0 + (TotalAD ?? 0));
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Attacker, 0 + (TotalAD ?? 0));
        SetStatus(Owner, default, SetCanMove);
        SpellEffectCreate(this.RootParticleEffect2, default, "SwainShadowGraspRootTemp.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.RootParticleEffect, default, "swain_shadowGrasp_magic.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        TeamOfOwner = GetTeamID(default);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Attacker, default, SetForceRenderParticles);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, default, "wallofpain_new_post_red.troy", default, TEAM_CHAOS, 200, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.Particle1, default, "wallofpain_new_post_green.troy", default, TEAM_ORDER, 200, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.Particle2, default, "wallofpain_new_post_red.troy", default, TEAM_CHAOS, 200, 0, TEAM_CHAOS, Nothing, true, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.Particle3, default, "wallofpain_new_post_green.troy", default, TEAM_ORDER, 200, 0, TEAM_ORDER, Nothing, true, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.ParticleID6, default, "YorickPHWallOrange.troy", default, TEAM_ORDER, 200, 0, TEAM_UNKNOWN, Owner, false, Owner, "bottom", default, Attacker, "bottom", default, false, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "wallofpain_new_post_red.troy", default, TEAM_ORDER, 200, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.Particle1, default, "wallofpain_new_post_green.troy", default, TEAM_CHAOS, 200, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.Particle2, default, "wallofpain_new_post_red.troy", default, TEAM_ORDER, 200, 0, TEAM_ORDER, Nothing, true, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.Particle3, default, "wallofpain_new_post_green.troy", default, TEAM_CHAOS, 200, 0, TEAM_CHAOS, Nothing, true, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(this.ParticleID6, default, "YorickPHWallOrange.troy", default, TEAM_CHAOS, 200, 0, TEAM_UNKNOWN, Owner, false, Owner, "bottom", default, Attacker, "bottom", default, false, default, default, false, false, default, default);
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle3, this.Particle4, "yorick_ult_03_teamID_green.troy", "yorick_ult_03_teamID_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        this.HasHealed = false;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        this.TotalHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        this.TotalPAR = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        this.TotalPAREnergy = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        IncHealth(Owner, 0 + (this.TotalHealth ?? 0), Owner);
        this.HasHealed = true;
        IncPAR(Owner, 0 + (this.TotalPAR ?? 0));
        IncPAR(Owner, 0 + (this.TotalPAREnergy ?? 0));
        IncPermanentStat(IncPermanentPercentHPRegenMod, Owner, -1);
        YorickLevel = GetLevel(Owner);
        YorickAP = GetStat(GetFlatMagicDamageMod, Owner);
        HealthFromAP = Math(0 + (YorickAP ?? 0), MO_MULTIPLY, 1);
        ADFromAP = Math(0 + (YorickAP ?? 0), MO_MULTIPLY, 0.2);
        HealthFromLevel = Math(50, MO_MULTIPLY, 0 + (YorickLevel ?? 0));
        ADFromLevel = Math(2, MO_MULTIPLY, 0 + (YorickLevel ?? 0));
        TotalAD = Math(0 + (ADFromLevel ?? 0), MO_ADD, 0 + (ADFromAP ?? 0));
        TotalHealth = Math(0 + (HealthFromLevel ?? 0), MO_ADD, 0 + (HealthFromAP ?? 0));
        IncPermanentStat(IncPermanentFlatHPPoolMod, Attacker, 0 + (TotalHealth ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Attacker, 0 + (TotalAD ?? 0));
        IncPermanentStat(IncPermanentFlatArmorMod, Attacker, 0 + (TotalAD ?? 0));
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Attacker, 0 + (TotalAD ?? 0));
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle5, this.Particle5, "yorick_ult_revive_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle, this.Particle, "yorick_ult_02.troy", default, TeamID ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle3, this.Particle4, "yorick_revive_skin_teamID_green.troy", "yorick_revive_skin_teamID_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellBuffRemoveType(Owner, BUFF_CombatEnchancer);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetGhosted);
        IncPermanentStat(IncPermanentPercentHPRegenMod, Owner, -1);
        IfHasBuff(Owner, Owner, "LeblancPassive", () => {
            SpellBuffRemove(Owner, "LeblancPassive", Owner, 0);
        });
        Caster = SetBuffCasterUnit();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Caster, GetSlotSpellLevel);
        this.ADRatio = this.VALUE_BY_LEVEL;
        PlayAnimation("Death", 4, Owner, false, false, true);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        CurrentCooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        CurrentCooldown2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCooldown, default, CO_LESS_THAN_OR_EQUAL, default, 4, () => {
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 4);
        });
        If(CurrentCooldown2, default, CO_LESS_THAN_OR_EQUAL, default, 4, () => {
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 4);
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle3, this.Particle4, "yorick_ult_03_teamID_green.troy", "yorick_ult_03_teamID_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        this.HasHealed = false;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        this.TotalHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        this.TotalPAR = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        this.TotalPAREnergy = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        IncHealth(Owner, 0 + (this.TotalHealth ?? 0), Owner);
        this.HasHealed = true;
        IncPAR(Owner, 0 + (this.TotalPAR ?? 0));
        IncPAR(Owner, 0 + (this.TotalPAREnergy ?? 0));
        IncPermanentStat(IncPermanentPercentHPRegenMod, Owner, -1);
        RequireVar(this.MagicPen);
        IncStat(IncPercentMagicPenetrationMod, Owner, 0 + (this.MagicPen ?? 0));
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "XerathLocusOfPowerToggle");
        SetSlotSpellCooldownTimeVer2(0.5, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "XerathArcanopulseExtended");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Cooldown2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "XerathMageChainsExtended");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown2 ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Cooldown3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "XerathArcaneBarrageWrapperExt");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown3 ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectCreate(this.Particle, default, "Xerath_LocusOfPower_buf.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particlea, default, "Xerath_LocusOfPower_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_CHANNEL_LOC", default, Owner, "spine", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particleb, default, "Xerath_LocusOfPower_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_CHANNEL_2", default, Owner, "spine", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particlec, default, "Xerath_LocusOfPower_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_CHANNEL_3", default, Owner, "spine", default, false, false, false, false, false, default, default);
        SetStatus(Owner, default, SetCanMove);
        OverrideAnimation("Idle1", "Spell2_chan", Owner);
        OverrideAnimation("Idle2", "Spell2_chan", Owner);
        OverrideAnimation("Idle3", "Spell2_chan", Owner);
        OverrideAnimation("Idle4", "Spell2_chan", Owner);
        FlashCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(FlashCheck, default, CO_EQUAL, default, "SummonerFlash", () => {
            SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        });
        FlashCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(FlashCheck, default, CO_EQUAL, default, "SummonerFlash", () => {
            SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        });
        PlayAnimation("Death", 4, Owner, false, false, true);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        CurrentCooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        CurrentCooldown2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCooldown, default, CO_LESS_THAN_OR_EQUAL, default, 4, () => {
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 4);
        });
        If(CurrentCooldown2, default, CO_LESS_THAN_OR_EQUAL, default, 4, () => {
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 4);
        });
        Pos = GetRandomPointInAreaUnit(Owner, 400, 200);
        Other1 = CloneUnitPet(Attacker, "YorickRAPetBuff", 0, Pos, 0, 0, false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle3, this.Particle4, "yorick_ult_03_teamID_green.troy", "yorick_ult_03_teamID_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        this.HasHealed = false;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        this.TotalHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        this.TotalPAR = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        this.TotalPAREnergy = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        IncHealth(Owner, 0 + (this.TotalHealth ?? 0), Owner);
        this.HasHealed = true;
        IncPAR(Owner, 0 + (this.TotalPAR ?? 0));
        IncPAR(Owner, 0 + (this.TotalPAREnergy ?? 0));
        IncPermanentStat(IncPermanentPercentHPRegenMod, Owner, -1);
        RequireVar(this.ArmorCount);
        If(this.ArmorCount, default, CO_EQUAL, default, 20, () => {
            SpellBuffAdd(Owner, Owner, "PoppyDefenseParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ArmorPerHit = this.VALUE_BY_LEVEL;
        this.IncreasedArmor = Math(0 + (this.ArmorCount ?? 0), MO_MULTIPLY, 0 + (ArmorPerHit ?? 0));
        SetBuffToolTipVar(1, 0 + (this.ArmorCount ?? 0));
        SetBuffToolTipVar(2, 0 + (this.IncreasedArmor ?? 0));
        RequireVar(this.DamageCount);
        If(this.DamageCount, default, CO_EQUAL, default, 20, () => {
            SpellBuffAdd(Owner, Owner, "PoppyMightParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        DmgPerHit = this.VALUE_BY_LEVEL;
        this.IncreasedDamage = Math(0 + (this.DamageCount ?? 0), MO_MULTIPLY, 0 + (DmgPerHit ?? 0));
        SetBuffToolTipVar(1, 0 + (this.DamageCount ?? 0));
        SetBuffToolTipVar(2, 0 + (this.IncreasedDamage ?? 0));
        SetStatus(Owner, default, SetStunned);
        RequireVar(this.PetDamage);
        RequireVar(this.PetAP);
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Attacker, 0 + (this.PetDamage ?? 0));
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Attacker, 0 + (this.PetAP ?? 0));
        SetBuffToolTipVar(1, 0 + (this.PetDamage ?? 0));
        SetBuffToolTipVar(2, 0 + (this.PetAP ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        StatMultiplier = this.VALUE_BY_LEVEL;
        MordDmg = GetTotalAttackDamage(Attacker);
        MordAP = GetStat(GetFlatMagicDamageMod, Attacker);
        this.MordAP = Math(0 + (StatMultiplier ?? 0), MO_MULTIPLY, 0 + (MordAP ?? 0));
        this.MordDmg = Math(0 + (StatMultiplier ?? 0), MO_MULTIPLY, 0 + (MordDmg ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (this.MordDmg ?? 0));
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, 0 + (this.MordAP ?? 0));
        MordHealth = GetPAROrHealth(Attacker, GetMaxHealth, PAR_SHIELD);
        PetHealth = Math(0.15, MO_MULTIPLY, 0 + (MordHealth ?? 0));
        IfHasBuff(Owner, Attacker, "MordekaiserCOTGPetBuff2", () => {
            IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (PetHealth ?? 0));
        });
        CharVars.DamageCount = 1;
        this.Count = 0;
        If(Attacker, default, CO_NOT_EQUAL, Owner, default, () => {
            RequireVar(this.DamageToDeal);
            ApplyDamage(Owner, Attacker, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        });
        this.IsKarthus = false;
        this.IsKogMaw = false;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle3, this.Particle4, "yorick_ult_01_teamID_green.troy", "yorick_ult_01_teamID_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle, this.Particle, "yorick_ult_02.troy", default, TeamID ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        IfHasBuff(Owner, Owner, "DeathDefied", () => {
            this.IsKarthus = true;
            SpellBuffRemove(Owner, "DeathDefied", Owner, 0);
        });
        IfHasBuff(Owner, Owner, "KogMawIcathianSurpriseReady", () => {
            this.IsKogMaw = true;
            SpellBuffRemove(Owner, "KogMawIcathianSurpriseReady", Owner, 0);
        });
        CharVars.ArmorCount = 1;
        RequireVar(this.MoveSpeedMod);
        ApplyAssistMarker(Attacker, Owner, 10);
        RequireVar(this.Bubble);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        this.SlowValue = this.VALUE_BY_LEVEL;
        SetPARMultiplicativeCostInc(Owner, 3, SpellSlots, -1, PAR_MANA);
        TeamOfOwner = GetTeamID(default);
        Caster = SetBuffCasterUnit();
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, default, "DiplomaticImmunity_buf.troy", default, TEAM_ORDER, 500, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            ForEachChampion(TEAM_CHAOS, default, true, (Unit) => {
                If(Unit, default, CO_EQUAL, Caster, default, () => {
                    SpellEffectCreate(this.Particle2, default, "DiplomaticImmunity_tar.troy", default, TEAM_ORDER, 500, 0, TEAM_CHAOS, Unit, true, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
                });
                Else(() => {
                    SpellEffectCreate(this.Particle2, default, "DiplomaticImmunity_buf.troy", default, TEAM_ORDER, 500, 0, TEAM_CHAOS, Unit, true, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
                });
            });
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "DiplomaticImmunity_buf.troy", default, TEAM_CHAOS, 500, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            ForEachChampion(TEAM_ORDER, default, true, (Unit) => {
                If(Unit, default, CO_EQUAL, Caster, default, () => {
                    SpellEffectCreate(this.Particle2, default, "DiplomaticImmunity_tar.troy", default, TEAM_CHAOS, 500, 0, TEAM_ORDER, Unit, true, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
                });
                Else(() => {
                    SpellEffectCreate(this.Particle2, default, "DiplomaticImmunity_buf.troy", default, TEAM_ORDER, 500, 0, TEAM_ORDER, Unit, true, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
                });
            });
        });
        PlayAnimation("Spell4", 0, Owner, false, false, false);
        SetStatus(Owner, default, SetInvulnerable);
        If(Attacker, default, CO_EQUAL, Owner, default, () => {
            SpellEffectCreate(this.Self, default, "eyeforaneye_self.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Cas, default, "eyeforaneye_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        });
        ApplyAssistMarker(Attacker, Owner, 10);
        Caster = SetBuffCasterUnit();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Caster, GetSlotSpellLevel);
        SpellBuffAdd(Owner, Caster, "PoppyDiplomaticImmunity", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, default, default, default);
        SpellEffectCreate(this.Particle1, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Head", default, Owner, "Chest", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Chest", default, Owner, "Spine", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle3, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Chest", default, Owner, "r_uparm", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle4, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Chest", default, Owner, "l_uparm", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle5, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_uparm", default, Owner, "r_forearm", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle6, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_uparm", default, Owner, "l_forearm", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle7, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_forearm", default, Owner, "r_hand", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle8, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_forearm", default, Owner, "l_hand", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle9, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, "r_thigh", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle10, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, "l_thigh", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle11, default, "XerathIdle-thin.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_thigh", default, Owner, "r_knee", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle12, default, "XerathIdle-thin.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_thigh", default, Owner, "l_knee", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle13, default, "XerathIdle-thin.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_knee", default, Owner, "R_Foot", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle14, default, "XerathIdle-thin.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_knee", default, Owner, "L_Foot", default, false, false, false, false, false, default, default);
        RequireVar(this.SpellCooldown);
        RequireVar(this.BonusDamage);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        RequireVar(this.Level);
        RequireVar(this.DamageAmount);
        RequireVar(this.SlowAmount);
        RequireVar(this.Distance);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle1, this.Particle, "Xerath_E_cas_green.troy", "Xerath_E_cas_red.troy", TeamID ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        IncStat(IncPercentBubbleRadiusMod, Owner, -0.9);
        this.MoveSpeedMod = 0.35;
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        this.APMod = GetStat(GetFlatMagicDamageMod, Owner);
        SetBuffToolTipVar(2, 15);
        RequireVar(this.MoveSpeedMod);
        SetStatus(Owner, default, SetCanAttack);
        RequireVar(CharVars.SpectralCount);
        PlayAnimation("Spell2", 0, Owner, false, false, false);
        TeamID = GetTeamID(default);
        RequireVar(this.DamageTwo);
        RequireVar(this.NewTargetPos);
        RequireVar(this.SlashSpeed);
        Caster = SetBuffCasterUnit();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Caster, GetSlotSpellLevel);
        NewTargetPos = this.NewTargetPos;
        this.DamageTwo = this.VALUE_BY_LEVEL;
        this.WillRemove = false;
        this.WillMove = true;
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        Move(Owner, NewTargetPos, 0 + (this.SlashSpeed ?? 0), 0, 0, FIRST_COLLISION_HIT, CANCEL_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.ParticleCharge2, default, "HeroicCharge_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ApplyAssistMarker(Caster, Owner, 10);
        TeamID = GetTeamID(default);
        RequireVar(this.TargetPos);
        RequireVar(this.Damage);
        RequireVar(this.DamageTwo);
        RequireVar(this.WillRemove);
        RequireVar(this.SlashSpeed);
        TargetPos = this.TargetPos;
        Move(Owner, TargetPos, 0 + (this.SlashSpeed ?? 0), 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.ParticleCharge, default, "HeroicCharge_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        PlayAnimation("RunUlt", 0, Owner, true, false, true);
        SetStatus(Owner, default, SetCanMove);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
        RequireVar(this.AttackRangeIncrease);
        IncStat(IncFlatAttackRangeMod, Owner, 0 + (this.AttackRangeIncrease ?? 0));
        RequireVar(this.BonusHealth);
        SpellEffectCreate(ar, default, "summoner_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        PlayAnimation("Spell3", 0, Owner, false, false, false);
        RequireVar(this.BonusHealth);
        SpellEffectCreate(ar, default, "summoner_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.SpeedParticle, default, "Global_Haste.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.MoveSpeedVar = this.VALUE_BY_LEVEL;
        RequireVar(this.FinalHPRegen);
        OwnerLevel = GetLevel(Attacker);
        this.DamageMod = Math(1.47059, MO_MULTIPLY, 0 + (OwnerLevel ?? 0));
        this.DamageMod = Math(8.5294, MO_ADD, 0 + (this.DamageMod ?? 0));
        ApplyAssistMarker(Attacker, Owner, 10);
        IncStat(IncPercentArmorMod, Owner, -0.03);
        IncStat(IncPercentSpellBlockMod, Owner, -0.03);
        RequireVar(this.FinalHPRegen);
        OwnerLevel = GetLevel(Attacker);
        this.DamageMod = Math(1.47059, MO_MULTIPLY, 0 + (OwnerLevel ?? 0));
        this.DamageMod = Math(8.5294, MO_ADD, 0 + (this.DamageMod ?? 0));
        this.ApMod = Math(0 + (this.DamageMod ?? 0), MO_MULTIPLY, 2);
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.MaxParticle, default, "PoppyDemacia_max.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_finger", default, Owner, default, default, true, default, default, default, default, default, default);
        Count = GetBuffCountFromAll(Owner, "PoppyParagonStats");
        SetBuffToolTipVar(1, 0 + (Count ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ArmDmgValue = this.VALUE_BY_LEVEL;
        ArmDmgValue = Math(0 + (Count ?? 0), MO_MULTIPLY, 0 + (ArmDmgValue ?? 0));
        SetBuffToolTipVar(2, 0 + (ArmDmgValue ?? 0));
        IfHasBuff(Owner, Owner, "PhilosophersStone", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "PhilosophersStone", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "KagesLuckyPick", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "KagesLuckyPick", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IncPermanentStat(IncPermanentPercentAttackSpeedMod, Owner, 0.04);
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, 7);
        SpellEffectCreate(this.StarkSelfParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        If(Owner, default, CO_SAME_TEAM, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.StarkSelfParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_ORDER, Owner, true, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.StarkSelfParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        SpellEffectCreate(this.SoulShroudParticle, default, "ZettasManaManipulator_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CASTER, Nothing, true, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ManaManipulator, default, "ZettasManaManipulator_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CASTER, Nothing, true, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.EmblemOfValorParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, -0.1);
        lifeStealMod = GetStat(GetPercentLifeStealMod, Owner);
        this.lifeStealMod = Math(0 + (lifeStealMod ?? 0), MO_MULTIPLY, 0.15);
        spellVampMod = GetStat(GetPercentSpellBlockMod, Owner);
        this.spellVampMod = Math(0 + (spellVampMod ?? 0), MO_MULTIPLY, 0.15);
        RequireVar(this.MoveSpeedMod);
        RequireVar(this.WillRemove);
        TeamID = GetTeamID(default);
        IfHasBuff(Owner, Owner, "XerathAscended", () => {
            SpellEffectCreate(this.a, default, "bansheesveil_buf_tempXerath.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CENTER_LOC", default, Owner, default, default, false, true, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.a, default, "bansheesveil_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, true, false, false, false, default, default);
        });
        RequireVar(this.MagicResistanceMod);
        Level = GetLevel(Owner);
        BonusAttackSpeed = Math(0 + (Level ?? 0), MO_MULTIPLY, 0.0059);
        this.BonusAttackSpeed = Math(0 + (BonusAttackSpeed ?? 0), MO_ADD, 0.114);
        IncPermanentStat(IncPermanentPercentAttackSpeedMod, Owner, 0 + (this.BonusAttackSpeed ?? 0));
        IncPermanentStat(IncPermanentFlatCritChanceMod, Owner, 0.08);
        RequireVar(this.TickDamage);
        RequireVar(this.attackSpeedMod);
        RequireVar(this.SpeedBoost);
        SpellEffectCreate(default, default, "Slimecall_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(default, default, "LifeAura.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        PlayAnimation("Death", 4, Owner, false, false, true);
        IncPAR(Owner, -10000);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_CombatEnchancer);
        SpellBuffRemoveType(Owner, BUFF_Shred);
        SpellBuffRemove(Owner, "WillRevive", Owner, 0);
        CurrentCooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        CurrentCooldown2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCooldown, default, CO_LESS_THAN_OR_EQUAL, default, 4, () => {
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 4);
        });
        If(CurrentCooldown2, default, CO_LESS_THAN_OR_EQUAL, default, 4, () => {
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 4);
        });
        RequireVar(this.ManaRegenBonus);
        TeamID = GetTeamID(default);
        this.ThisBubble = AddUnitPerceptionBubble(TeamID, 750, Owner, 25000, Nothing, Nothing, true);
        RequireVar(this.MagicResistBonus);
        RequireVar(this.ArmorBonus);
        RequireVar(this.DamageBonus);
        Level = GetLevel(Owner);
        BonusHealth = Math(0 + (Level ?? 0), MO_MULTIPLY, 5.59);
        this.BonusHealth = Math(0 + (BonusHealth ?? 0), MO_ADD, 134.41);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (this.BonusHealth ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 10);
        RequireVar(this.CooldownReduction);
        RequireVar(this.ManaRegenMod);
        SpellEffectCreate(this.ApocalypseParticle, default, "ZettasManaManipulator_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.cp1, default, "env_manaheal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        RequireVar(this.ArmorMod);
        RequireVar(this.ManaRegenBonus);
        SetDodgePiercing(Owner, true);
        this.AttackCounter = 0;
        CasterID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(CasterID, 1100, Owner, 180, Nothing, Nothing, false);
        SetStatus(Owner, default, SetForceRenderParticles);
        RequireVar(this.AP_Buff);
        RequireVar(this.SpellVamp_Buff);
        SpellEffectCreate(this.WillPlaceholder, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        this.WillRemove = false;
        RequireVar(this.AbilityPower);
        RequireVar(this.MagicResistBonus);
        RequireVar(this.ArmorBonus);
        RequireVar(this.ShieldHealth);
        IncreaseShield(Owner, 0 + (this.ShieldHealth ?? 0), true, false);
        RequireVar(this.BounceCounter);
        TeamID = GetTeamID(default);
        If(this.BounceCounter, default, CO_LESS_THAN_OR_EQUAL, default, 3, () => {
            ForNClosestUnitsInTargetArea(Attacker, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, false, "LightningRodChain", (Unit) => {
                SpellEffectCreate(this.ParticleID, default, "kennen_btl_beam.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Unit, false, Owner, "head", default, Unit, "root", default, true, false, false, false, false, default, default);
                this.BounceCounter = Math(0 + (this.BounceCounter ?? 0), MO_ADD, 1);
                NextBuffVars.BounceCounter = this.BounceCounter ?? 0;
                SpellBuffAdd(Attacker, Unit, "LightningRodChain", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        ApplyDamage(Attacker, Owner, 110, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        SpellEffectCreate(hi, default, "kennen_btl_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle, default, "Aura_defense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 200);
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, 20);
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ak, default, "Summoner_Teleport.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        RequireVar(this.CastPosition);
        RequireVar(this.BuffDuration);
        this.InitialTime = GetGameTime();
        PauseAnimation(Owner, true);
        DestroyMissileForTarget(Owner);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetStunned);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        Level = GetLevel(Owner);
        BonusAP = Math(0 + (Level ?? 0), MO_MULTIPLY, 1.18);
        this.BonusAP = Math(0 + (BonusAP ?? 0), MO_ADD, 18.82);
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, 0 + (this.BonusAP ?? 0));
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, -0.1);
        this.CooldownResevoir = 0;
        RequireVar(this.ArmorReduction);
        SpellEffectCreate(Particle, default, "BlackCleave_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        RequireVar(this.AbilityPowerMod);
        RequireVar(this.PhysicalDamageMod);
        SpellEffectCreate(this.SCP, default, "SunfireCape_Aura.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, -0.05);
        Count = GetBuffCountFromAll(Owner, "MaladyCounter");
        ResistanceShred = Math(0 + (Count ?? 0), MO_MULTIPLY, 6);
        SetBuffToolTipVar(1, 0 + (ResistanceShred ?? 0));
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, -0.15);
        IncPermanentStat(IncPermanentFlatArmorPenetrationMod, Owner, 20);
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, -0.15);
        ForitfyCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(ForitfyCheck, default, CO_EQUAL, default, "SummonerFortify", () => {
            SpellBuffAdd(Owner, Owner, "FortifyCheck", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 3, true, false, false, default);
        });
        ForitfyCheck2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(ForitfyCheck2, default, CO_EQUAL, default, "SummonerFortify", () => {
            SpellBuffAdd(Owner, Owner, "FortifyCheck", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 3, true, false, false, default);
        });
        RequireVar(this.ShieldHealth);
        this.InitialHealth = this.ShieldHealth;
        this._100Destroyed = false;
        this._66Destroyed = false;
        SpellEffectCreate(this.Particle1, default, "razzlespride_100.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle2, default, "razzlespride_66.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle3, default, "razzlespride_33.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SetBuffToolTipVar(1, 0 + (this.ShieldHealth ?? 0));
        CasterID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(CasterID, 1100, Owner, 180, Nothing, Nothing, false);
        SetStatus(Owner, default, SetForceRenderParticles);
        RequireVar(this.MoveSpeedMod);
        SpellEffectCreate(this.slow, default, "Global_Slow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        RequireVar(this.ShieldHealth);
        IncreaseShield(Owner, 0 + (this.ShieldHealth ?? 0), true, false);
        RequireVar(this.MagicResistBonus);
        RequireVar(this.ArmorBonus);
        RequireVar(this.DamageBonus);
        Name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        Name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        Name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        Name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        Name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        Name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(Name, default, CO_EQUAL, default, "PrideShield", () => {
            SetSlotSpellCooldownTimeVer2(24, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(Name1, default, CO_EQUAL, default, "PrideShield", () => {
            SetSlotSpellCooldownTimeVer2(24, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(Name2, default, CO_EQUAL, default, "PrideShield", () => {
            SetSlotSpellCooldownTimeVer2(24, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(Name3, default, CO_EQUAL, default, "PrideShield", () => {
            SetSlotSpellCooldownTimeVer2(24, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(Name4, default, CO_EQUAL, default, "PrideShield", () => {
            SetSlotSpellCooldownTimeVer2(24, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(Name5, default, CO_EQUAL, default, "PrideShield", () => {
            SetSlotSpellCooldownTimeVer2(24, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        this.OwnerHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        RequireVar(this.MoveSpeedMod);
        SpellEffectCreate(this.slow, default, "Global_Slow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        RequireVar(this.TargetPos);
        CasterID = GetTeamID(default);
        TargetPos = this.TargetPos;
        If(CasterID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, default, "Odin_HextechSweeper_tar_green.troy", default, TEAM_ORDER, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "Odin_HextechSweeper_tar_green.troy", default, TEAM_CHAOS, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
        });
        this.BubbleID = AddPosPerceptionBubble(CasterID, 550, TargetPos, 6, Nothing, true);
        RequireVar(this.StatBoost);
        Count = GetBuffCountFromAll(Owner, "MaladyCounter");
        ResistanceShred = Math(-6, MO_MULTIPLY, 0 + (Count ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (ResistanceShred ?? 0));
        CharVars.countHealthPotion = GetBuffCountFromAll(Owner, "RegenerationPotion");
        CharVars.countManaPotion = GetBuffCountFromAll(Owner, "FlaskOfCrystalWater");
        RequireVar(this.ManaRegenBonus);
        RequireVar(this.HealthRegenBonus);
        RequireVar(this.MaxMana);
        Count = GetBuffCountFromAll(Owner, "WitsEndCounter");
        ResistanceBuff = Math(0 + (Count ?? 0), MO_MULTIPLY, 5);
        SetBuffToolTipVar(1, 0 + (ResistanceBuff ?? 0));
        CasterID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(CasterID, 1100, Owner, 180, Nothing, Nothing, true);
        SetStatus(Owner, default, SetForceRenderParticles);
        RequireVar(this.MovementSpeedMod);
        RequireVar(this.AttackSpeedMod);
        this.CooldownResevoir = 0;
        RequireVar(this.BaseDamage);
        RequireVar(this.IsSheen);
        SpellEffectCreate(arr, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        missingHealthPercent = Math(1, MO_SUBTRACT, 0 + (healthPercent ?? 0));
        healthToRestore = Math(20, MO_MULTIPLY, 0 + (missingHealthPercent ?? 0));
        healthToRestore = Math(5, MO_MAX, 0 + (healthToRestore ?? 0));
        IncHealth(Owner, 0 + (healthToRestore ?? 0), Owner);
        this.OwnerMana = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        this.bountyActive = false;
        teamID = GetTeamID(default);
        gameTime = GetGameTime();
        If(gameTime, default, CO_GREATER_THAN_OR_EQUAL, default, 210, () => {
            SpellBuffAdd(Owner, Owner, "RegenerationRune", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 300, Owner, 6, Nothing, Nothing, true);
        ApplyAssistMarker(Attacker, Owner, 10);
        IncPermanentStat(IncPermanentPercentAttackSpeedMod, Owner, 0.04);
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, 6);
        AP = GetStat(GetFlatMagicDamageMod, Owner);
        this.abilityPower = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.3);
        RequireVar(this.MagicResistBonus);
        RequireVar(this.ArmorBonus);
        RequireVar(this.HealthVar);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (this.HealthVar ?? 0));
        RequireVar(this.ManaRegenBonus);
        RequireVar(this.HealthRegenBonus);
        TeamID = GetTeamID(default);
        this.ThisBubble = AddUnitPerceptionBubble(TeamID, 750, Owner, 25000, Nothing, Nothing, true);
        this.AttackCounter = 0;
        Count = GetBuffCountFromAll(Owner, "WitsEndBuff");
        ResistanceBuff = Math(5, MO_MULTIPLY, 0 + (Count ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (ResistanceBuff ?? 0));
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, -0.15);
        RequireVar(this.CooldownReduction);
        RequireVar(this.ManaRegenMod);
        SpellEffectCreate(this.ApocalypseParticle, default, "ZettasManaManipulator_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        RequireVar(this.LifeStealMod);
        RequireVar(this.AttackSpeedMod);
        RequireVar(this.HealthRegenMod);
        SpellEffectCreate(this.StarkAuraParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Target, default, default, Owner, default, default, false, default, default, default, default, default, default);
        RequireVar(this.AP_Buff);
        RequireVar(this.SpellVamp_Buff);
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, -0.15);
        RequireVar(this.LifeStealMod);
        RequireVar(this.AttackSpeedMod);
        RequireVar(this.HealthRegenMod);
        SpellEffectCreate(this.StarkAuraParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Target, default, default, Owner, default, default, false, default, default, default, default, default, default);
        RequireVar(this.AP_Debuff);
        RequireVar(this.AttackSpeedMod);
    }
    public void OnBuffDeactivate()
    {
        #region VarDecl
        bool? UnitFound = null;
        float? BonusAttack = null;
        TeamId? TeamID = null;
        int? FiddlesticksSkinID = null;
        Vector3? CastPos = null;
        float? FinishedTime = null;
        float? TotalTime = null;
        Object? CastPosition = null;
        float? CooldownMultiplier = null;
        long? BaseCooldown = null;
        Object? FoundUnit = null;
        bool? CanSee = null;
        Vector3? CurrentPos = null;
        Vector3? Pos1 = null;
        Object? Level = null;
        Pet? Other1 = null;
        Vector3? OwnerPos = null;
        Vector3? CurrentPosition = null;
        TeamId? CasterID = null;
        float? CooldownPerc = null;
        Object? Cooldown = null;
        float? CooldownStat = null;
        float? Multiplier = null;
        float? NewCooldown = null;
        float? Bonus = null;
        float? TotalDamage = null;
        AttackableUnit? Caster = null;
        int? VeigarSkinID = null;
        Object? CD = null;
        float? Duration = null;
        float? PreCDRCooldown = null;
        int? OwnerSkinID = null;
        Vector3? TargetPos = null;
        Vector3? UnitPos = null;
        float? Distance = null;
        float? PercentDamage = null;
        float? PercentNotDamage = null;
        Object? sourcePosition = null;
        Object? BoomDamage = null;
        Object? Position = null;
        long? SpellCooldown = null;
        int? Count = null;
        TeamId? teamID = null;
        float? CooldownMod = null;
        float? FinalCooldown = null;
        Object? FlashCheck = null;
        Object? DamagePerTick = null;
        float? HP = null;
        Vector3? Pos = null;
        int? rShift = null;
        int? gShift = null;
        int? yShift = null;
        float? DefenseStats = null;
        TeamId? TeemoTeam = null;
        Vector3? UnitPos2 = null;
        Object? FacePos = null;
        float? APMod = null;
        float? ReductionPerc = null;
        float? CooldownTime = null;
        long? baseCD = null;
        Vector3? CenterPos = null;
        float? CDMOD = null;
        float? NEWCD = null;
        float? CDMod = null;
        Object? CooldownByLevel = null;
        float? ModulatedCD = null;
        float? TrueCD = null;
        float? BonusDmgPercent = null;
        float? totalDmgPercent = null;
        float? BonusDamage = null;
        bool? IsStealthed = null;
        Minion? Other3 = null;
        float? BuffCheck = null;
        Object? baseCooldown = null;
        TeamId? OwnerTeamID = null;
        TeamId? TeamOfOwner = null;
        float? CurTime = null;
        float? TimeSinceLast = null;
        float? MaxHealth = null;
        float? DamageToDeal = null;
        Object? DamageMods = null;
        float? AttackDamage = null;
        float? SuperDamage = null;
        int? BrandSkinID = null;
        Object? SpellCD = null;
        float? SuperCDMod = null;
        float? RealCD = null;
        float? CDReduction = null;
        Object? BaseCD = null;
        float? LowerCD = null;
        float? NewCD = null;
        float? BaseAD = null;
        float? QAttackDamage = null;
        float? RAttackDamage = null;
        float? EAttackDamage = null;
        float? WAttackDamage = null;
        Champion? Attacker = null;
        Vector3? MissileEndPosition = null;
        long? CooldownPerLevel = null;
        float? RagePercent = null;
        bool? ShouldHit = null;
        bool? Visible = null;
        float? BaseAttack = null;
        float? HitDamage = null;
        TeamId? OwnerVar = null;
        float? RemainingDuration = null;
        Object? Cooldown2 = null;
        Object? Cooldown3 = null;
        float? TotalAttackDamage = null;
        AttackableUnit? Owner = null;
        float? DeactivateTime = null;
        float? TimeElapsed = null;
        Vector3? OwnerCenter = null;
        float? CD0 = null;
        float? CD1 = null;
        float? CD2 = null;
        string? SkinName = null;
        bool? DropBall = null;
        string? MyName = null;
        bool? Found = null;
        Vector3? EnemyPos = null;
        float? SightReduction = null;
        bool? TargetStruck = null;
        Object? MagicDamage = null;
        bool? zombie = null;
        string? Name = null;
        TeamId? TeamofOwner = null;
        int? GragasSkinID = null;
        Object? CooldownVar = null;
        float? CDModTrue = null;
        float? BarrelCD = null;
        float? CDMinusBarrel = null;
        Vector3? PropelPos = null;
        int? KMSkinID = null;
        float? healthPercent = null;
        float? health = null;
        float? maxHealth = null;
        float? healthFactor = null;
        float? healthToInc = null;
        bool? cast = null;
        float? NewDistance = null;
        float? CooldownVal = null;
        float? FlatCDVal = null;
        float? FlatCD = null;
        float? LevelDamage = null;
        Object? PoisonBaseDamage = null;
        float? PoisonTotalDamage = null;
        float? BaseAttackDamage = null;
        float? FlatAPBonus = null;
        float? NumUnits = null;
        float? DamageAmount = null;
        Object? HealthPerStack = null;
        float? BonusHealth = null;
        int? skin = null;
        Vector3? Pos2 = null;
        TeamId? AttackerID = null;
        Object? SpeedParticle = null;
        Vector3? GhoulPosition = null;
        Object? DurationLevel = null;
        float? BonusAttackSpeed = null;
        float? stacksToAdd = null;
        float? HPToAdd = null;
        float? lifetime = null;
        float? BonusAP = null;
        float? AP = null;
        float? APBonus = null;
        float? ShieldHealth = null;
        float? RemoveHealth = null;
        #endregion
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, default, default, default, default);
        RemovePerceptionBubble(this.ThisBubble);
        UnitFound = false;
        ForNClosestUnitsInTargetArea(Owner, Owner, 200, "AffectMinions AffectHeroes NotAffectSelf ", 1, default, default, (Unit) => {
            UnitFound = true;
            SpellCast(Owner, Owner, Owner, Owner, default, 0, SpellSlots, 1, false, false, false, default, default, default);
        });
        If(UnitFound, default, CO_EQUAL, default, false, () => {
            SpellCast(Owner, Owner, Owner, Owner, default, 2, SpellSlots, 1, false, false, false, default, default, default);
        });
        IncPermanentStat(IncPermanentPercentAttackSpeedMod, Owner, -0.2);
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, 0.1);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.buffParticle);
        IncPermanentStat(IncPermanentPercentMovementSpeedMod, Owner, -0.3);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.buffParticle);
        IncPermanentFlatPARRegenMod(Owner, -3);
        BonusAttack = Math(-1, MO_MULTIPLY, 0 + (this.BonusAttack ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (BonusAttack ?? 0));
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, 0 + (BonusAttack ?? 0));
        SpellEffectRemove(this.buffParticle);
        SpellBuffAdd(Owner, Owner, "WormRecouperateOn", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.CastParticle);
        RemovePerceptionBubble(this.Bubble);
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellEffectRemove(this.CastParticle);
            RemovePerceptionBubble(this.Bubble);
        });
        SetStatus(Owner, default, SetTaunted);
        If(this.removePart, default, CO_EQUAL, default, true, () => {
            SpellEffectRemove(this.Part);
        });
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetPacified);
        SetStatus(Owner, default, SetFeared);
        SetStatus(Owner, default, SetCanCast);
        SpellEffectRemove(this.a);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Attacker);
        If(FiddlesticksSkinID, default, CO_EQUAL, default, 6, () => {
            SpellEffectRemove(this.Confetti);
        });
        SetStatus(Owner, default, SetNetted);
        SetStatus(Owner, default, SetSuppressed);
        SetStatus(Owner, default, SetStunned);
        SetStatus(Owner, default, SetSleep);
        SetStatus(Owner, default, SetPhysicalImmune);
        RemovePerceptionBubble(this.ThisBubble);
        SetStatus(Owner, default, SetMagicImmune);
        SetStatus(Owner, default, SetStunned);
        SetStatus(Owner, default, SetStealthed);
        PopCharacterFade(Owner, this.ID);
        SpellEffectCreate(Particle, default, "FallenOne_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ApplyDamage(Owner, Owner, 200, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, default, default, default, default);
        SetStatus(Owner, default, SetRooted);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetCharmed);
        RedirectGold(Owner, Nothing);
        SetStatus(Owner, default, SetDisarmed);
        SetStatus(Owner, default, SetNearSight);
        SetStatus(Owner, default, SetSilenced);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetPhysicalImmune);
        SetStatus(Owner, default, SetMagicImmune);
        SpellEffectRemove(this.AuraParticle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle);
        SetStatus(Owner, default, SetPhysicalImmune);
        SetStatus(Owner, default, SetMagicImmune);
        CastPos = this.CastPos;
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        TeleportToPosition(Owner, CastPos);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetInvulnerable);
        SpellEffectRemove(this.part);
        RequireVar(this.Interrupted);
        RequireVar(this.ActivateTime);
        FinishedTime = GetGameTime();
        TotalTime = Math(0 + (FinishedTime ?? 0), MO_SUBTRACT, 0 + (this.ActivateTime ?? 0));
        TotalTime = Math(0 + (TotalTime ?? 0), MO_ADD, 0.1);
        If(CharVars.TeleportCancelled, default, CO_EQUAL, default, false, () => {
            If(this.Interrupted, default, CO_EQUAL, default, false, () => {
                If(TotalTime, default, CO_GREATER_THAN_OR_EQUAL, this.BuffDuration, default, () => {
                    CastPosition = this.CastPosition;
                    DestroyMissileForTarget(Owner);
                    TeleportToPosition(Owner, CastPosition);
                    SpellEffectCreate(akc, default, "summoner_teleportarrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
                    If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
                        CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
                        BaseCooldown = Math(300, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
                    });
                    If(AvatarVars.TeleportCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
                        BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_SUBTRACT, 0 + (AvatarVars.TeleportCooldownBonus ?? 0));
                    });
                });
                Else(() => {
                    BaseCooldown = 180;
                });
            });
            Else(() => {
                BaseCooldown = 180;
            });
        });
        Else(() => {
            BaseCooldown = 180;
        });
        SpellEffectRemove(this.ak);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        If(this.SlotNum, default, CO_EQUAL, default, 0, () => {
            SetSpell(Owner, 0, SpellSlots, SPELLBOOK_SUMMONER, "summonerteleport");
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 0 + (BaseCooldown ?? 0));
        });
        ElseIf(this.SlotNum, default, CO_EQUAL, default, 1, () => {
            SetSpell(Owner, 1, SpellSlots, SPELLBOOK_SUMMONER, "summonerteleport");
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 0 + (BaseCooldown ?? 0));
        });
        SpellEffectCreate(ee, default, "summoner_battlecry_obd.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, false, false, false, false, default, default);
        RemovePerceptionBubble(this.Bubble);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.ParticleID2);
        SpellEffectRemove(this.DotPart);
        FoundUnit = false;
        ForNClosestUnitsInTargetArea(Owner, Owner, 900, "AffectEnemies AffectHeroes ", 1, false, "Stealth", (Unit) => {
            FoundUnit = false;
            CanSee = CanSeeTarget(Owner, Unit);
            If(CanSee, default, CO_EQUAL, default, true, () => {
                FaceDirection(Owner, Unit);
                SpellCast(Owner, Unit, Owner, Owner, false, 3, SpellSlots, 1, false, false, false, false, false, default);
            });
            Else(() => {
                SpellBuffAdd(Attacker, Target, "ActionTimer", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
        });
        If(default, false, CO_EQUAL, FoundUnit, default, () => {
            SpellBuffAdd(Attacker, Target, "ActionTimer", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetTargetable);
        SpellEffectRemove(this.waypoint);
        RemovePerceptionBubble(this.BubbleID);
        SpellBuffAdd(Owner, Owner, "WillRevive", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, default, default, default, default);
        SpellEffectRemove(this.Particle);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        SetStatus(Owner, default, SetRevealSpecificUnit);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        Alert("Should not be here", default);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        FoundUnit = false;
        ForNClosestUnitsInTargetArea(Owner, Owner, 900, "AffectEnemies AffectHeroes ", 1, false, "Stealth", (Unit) => {
            FoundUnit = true;
            CanSee = CanSeeTarget(Owner, Unit);
            If(CanSee, default, CO_EQUAL, default, true, () => {
                FaceDirection(Owner, Unit);
                SpellCast(Owner, Unit, Owner, Owner, false, 3, SpellSlots, 1, false, false, false, false, false, default);
            });
            Else(() => {
                SpellBuffAdd(Attacker, Target, "ActionTimer2", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
        });
        If(default, false, CO_EQUAL, FoundUnit, default, () => {
            SpellBuffAdd(Attacker, Target, "ActionTimer2", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        UnlockAnimation(Owner, default);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, default, default, default, default);
        SetStatus(Owner, default, SetForceRenderParticles);
        RemovePerceptionBubble(this.bubbleID);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.c);
        SpellEffectRemove(this.d);
        SpellEffectRemove(this.e);
        SpellEffectRemove(this.f);
        SpellEffectRemove(this.g);
        SpellEffectRemove(this.h);
        SetStatus(Owner, default, SetNoRender);
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.c);
        SpellEffectRemove(this.d);
        SpellEffectRemove(this.e);
        SpellEffectRemove(this.f);
        SpellEffectRemove(this.g);
        SpellEffectRemove(this.h);
        NextBuffVars.WillRemove = false;
        SpellBuffAdd(Owner, Owner, "OdinDebacleCloak", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffClear(Owner, "OdinBombSuppressionOrder");
        SpellBuffClear(Owner, "OdinBombSuppressionChaos");
        SpellEffectRemove(this.buffParticle);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        SetStatus(Owner, default, SetNoRender);
        SpellBuffAdd(Owner, Owner, "Internal_50MS", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OdinGrievousWound", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellEffectRemove(this.buffParticle);
        SetStatus(Owner, default, SetInvulnerable);
        SpellEffectRemove(this.Particle1);
        SetStatus(Owner, default, SetTargetable);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.buffParticle2);
        SpellEffectRemove(this.crystalParticle);
        SpellEffectRemove(this.crystalParticle2);
        RemovePerceptionBubble(this.OrderBubble);
        RemovePerceptionBubble(this.ChaosBubble);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.ParticleOrder);
        SpellEffectRemove(this.ParticleChaos);
        TeamID = GetTeamID(default);
        RemovePerceptionBubble(this.BubbleID);
        If(TeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
            RemovePerceptionBubble(this.BubbleID2);
        });
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.PlatformParticle);
        SpellEffectRemove(this.PlatformParticle2);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.ParticleOrder);
        SpellEffectRemove(this.ParticleChaos);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectRemove(this.ParticleOrder);
        SpellEffectRemove(this.ParticleChaos);
        SpellEffectRemove(this.buffParticle);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        SetStatus(Owner, default, SetNoRender);
        RemoveShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
        SpellEffectRemove(this.buffParticle2);
        SpellEffectRemove(this.ShamanAuraParticle);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        RemovePerceptionBubble(this.BubbleID3);
        RemovePerceptionBubble(this.BubbleID4);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.buffParticle2);
        CurrentPos = GetUnitPosition(Owner);
        SetCameraPosition("Owner", CurrentPos);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.buffParticle);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        SpellEffectRemove(this.buffParticle);
        IncPermanentStat(IncPermanentPercentAttackSpeedMod, Attacker, -0.2);
        IncPermanentStat(IncPermanentFlatArmorMod, Attacker, -15);
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Attacker, -15);
        IncPermanentStat(IncPermanentFlatArmorMod, Owner, 150);
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, 150);
        IncPermanentStat(IncPermanentPercentAttackSpeedMod, Attacker, -0.05);
        IncPermanentStat(IncPermanentFlatArmorMod, Attacker, -5);
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Attacker, -5);
        RemovePerceptionBubble(this.ThisBubble);
        SpellEffectRemove(this.SCP);
        SpellEffectRemove(this.Agony);
        SpellEffectRemove(this.ParticleOrder);
        SpellEffectRemove(this.ParticleChaos);
        SpellEffectRemove(this.buffParticle);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectRemove(this.ParticleOrder);
        SpellEffectRemove(this.ParticleChaos);
        SetStatus(Owner, default, SetCanMove);
        IssueOrder(Owner, AI_ORDER_NONE, default, Owner);
        SpellEffectRemove(this.Part);
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            SpellBuffAdd(Owner, Owner, "OdinScoreSurvivor", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SpellEffectRemove(this.ParticleID);
        If(this.IsCancelled, default, CO_EQUAL, default, 0, () => {
            SpellBuffAdd(Owner, Owner, "OdinPortalTeleport", 1, 1, 0.35, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SpellBuffClear(Owner, "OdinBombSuppressionOrder");
        SpellBuffClear(Owner, "OdinBombSuppressionChaos");
        SpellBuffClear(Owner, "OdinGuardianSuppressionOrder");
        SpellBuffClear(Owner, "OdinGuardianSuppressionChaos");
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ApplyDamage(Owner, Owner, 25000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        If(this.IsCancelled, default, CO_EQUAL, default, 0, () => {
            SpellBuffAdd(Owner, Owner, "OdinPortalChannel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SpellEffectRemove(this.buffParticle);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.Particle1);
        If(this.TotalShield, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.TotalShield ?? 0), true, true);
        });
        SpellEffectRemove(this.buffParticle);
        RemoveShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.ParticleOrder);
        SpellEffectRemove(this.ParticleChaos);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.buffParticle);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectRemove(this.buffParticle);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        SpellEffectRemove(this.EmblemParticle);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.ZephrisPendant);
        ApplyDamage(Owner, Owner, 1500, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, default, default, default, default);
        SpellEffectCreate(poofout, default, "jackintheboxpoof.troy", default, default, default, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, default, default, default, default, default, default, default);
        SpellEffectRemove(this.buffParticle);
        this.BonusDamage = Math(-1, MO_MULTIPLY, 0 + (this.BonusDamage ?? 0));
        this.BonusResist = Math(-1, MO_MULTIPLY, 0 + (this.BonusResist ?? 0));
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectTurrets ", default, default, (Unit) => {
            IncPermanentStat(IncPermanentPercentPhysicalDamageMod, Unit, 0 + (this.BonusDamage ?? 0));
            IncPermanentStat(IncPermanentFlatArmorMod, Unit, 0 + (this.BonusResist ?? 0));
            IncPermanentStat(IncPermanentFlatSpellBlockMod, Unit, 0 + (this.BonusResist ?? 0));
        });
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 0 + (this.StartDecay ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, true, false, default, default);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.b);
        SetStatus(Owner, default, SetStealthed);
        this.ID = PushCharacterFade(Owner, 1, default, this.ID);
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            Pos1 = GetRandomPointInAreaUnit(Owner, 250, 50);
            Level = 1;
            Other1 = CloneUnitPet(Owner, "LeblancMI", 8, Pos1, 0, 0, true);
            SpellBuffAdd(Other1, Other1, "LeblancPassiveCooldown", 1, 1, 60, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            SpellBuffAdd(Owner, Other1, "LeblancMIFull", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellEffectCreate(FadeParticle, default, "LeBlanc_MirrorImagePoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Other1, default, default, Other1, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(FadeParticle, default, "LeBlanc_MirrorImagePoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(hi, default, "leblanc_mirrorimage_death.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Owner, default, default, true, default, default, false, false, default, default);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 10000, MAGIC_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Owner);
        SpellEffectRemove(this.YellowIndicator);
        If(this.doNotTeleport, default, CO_EQUAL, default, false, () => {
            If(Expired, default, CO_EQUAL, default, false, () => {
                OwnerPos = this.OwnerPos;
                CurrentPosition = GetUnitPosition(Owner);
                CasterID = GetTeamID(default);
                SpellEffectCreate(SmokeBomb1, default, "leBlanc_displacement_cas.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, CurrentPosition, Target, default, default, true, default, default, false, default, default, default);
                TeleportToPosition(Owner, OwnerPos);
                SpellEffectCreate(SmokeBomb2, default, "leBlanc_displacement_cas.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, default, default, default);
                SpellEffectCreate(a, default, "Leblanc_displacement_blink_return_trigger.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Owner, default, OwnerPos, true, default, default, false, default, default, default);
            });
        });
        UnlockAnimation(Owner, true);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "LeblancSlideM");
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseCooldown = this.VALUE_BY_LEVEL;
        CooldownPerc = GetStat(GetPercentCooldownMod, Owner);
        CooldownPerc = Math(1, MO_ADD, 0 + (CooldownPerc ?? 0));
        CooldownPerc = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownPerc ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (CooldownPerc ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.SoulShackleIdleM);
        SpellEffectRemove(this.SoulShackleTarget);
        If(this.LeblancVisionBubble, default, CO_EQUAL, default, 1, () => {
            RemovePerceptionBubble(this.a);
        });
        If(this.Broken, default, CO_EQUAL, default, false, () => {
            IfHasBuff(Owner, Attacker, "LeblancChaosOrbM", () => {
                ApplySilence(Attacker, Owner, 2);
                SpellBuffRemove(Owner, "LeblancChaosOrbM", Attacker, 0);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                If(Level, default, CO_EQUAL, default, 1, () => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                    ApplyDamage(Attacker, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.33, 1, false, false, Attacker);
                });
                ElseIf(Level, default, CO_EQUAL, default, 2, () => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                    ApplyDamage(Attacker, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.375, 1, false, false, Attacker);
                });
                Else(() => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                    ApplyDamage(Attacker, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.42, 1, false, false, Attacker);
                });
            });
            IfHasBuff(Owner, Attacker, "LeblancChaosOrb", () => {
                ApplySilence(Attacker, Owner, 2);
                SpellBuffRemove(Owner, "LeblancChaosOrb", Attacker, 0);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                ApplyDamage(Attacker, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.3, 1, false, false, Attacker);
            });
            SpellBuffAdd(Attacker, Owner, "LeblancSoulShackleNetM", 1, 1, 0 + (this.BreakStun ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, false, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                ApplyDamage(Attacker, Owner, 0 + (this.BreakDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.55, 1, false, false, Attacker);
            });
            ElseIf(Level, default, CO_EQUAL, default, 2, () => {
                ApplyDamage(Attacker, Owner, 0 + (this.BreakDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.625, 1, false, false, Attacker);
            });
            Else(() => {
                ApplyDamage(Attacker, Owner, 0 + (this.BreakDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.7, 1, false, false, Attacker);
            });
        });
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.DistortionFx);
        SpellEffectRemove(this.b);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.YellowIndicator);
        If(this.doNotTeleport, default, CO_EQUAL, default, false, () => {
            If(Expired, default, CO_EQUAL, default, false, () => {
                OwnerPos = this.OwnerPos;
                CurrentPosition = GetUnitPosition(Owner);
                CasterID = GetTeamID(default);
                SpellEffectCreate(SmokeBomb1, default, "leBlanc_displacement_cas.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, CurrentPosition, Target, default, default, true, default, default, false, default, default, default);
                TeleportToPosition(Owner, OwnerPos);
                SpellEffectCreate(SmokeBomb2, default, "leBlanc_displacement_cas.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, default, default, default);
                SpellEffectCreate(a, default, "Leblanc_displacement_blink_return_trigger.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Owner, default, OwnerPos, true, default, default, false, default, default, default);
            });
        });
        IfHasBuff(Owner, Owner, "LeblancSlideWallFix", () => {
            SpellBuffRemove(Owner, "LeblancSlideWallFix", Owner, default);
        });
        UnlockAnimation(Owner, true);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseCooldown = this.VALUE_BY_LEVEL;
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "LeblancSlide");
        CooldownPerc = GetStat(GetPercentCooldownMod, Owner);
        CooldownPerc = Math(1, MO_ADD, 0 + (CooldownPerc ?? 0));
        CooldownPerc = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownPerc ?? 0));
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        });
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.SoulShackleIdle);
        SpellEffectRemove(this.SoulShackleTarget);
        SpellEffectRemove(this.SoulShackleTarget_blood);
        If(this.LeblancVisionBubble, default, CO_EQUAL, default, 1, () => {
            RemovePerceptionBubble(this.a);
        });
        If(this.Broken, default, CO_EQUAL, default, false, () => {
            IfHasBuff(Owner, Attacker, "LeblancChaosOrbM", () => {
                ApplySilence(Attacker, Owner, 2);
                SpellBuffRemove(Owner, "LeblancChaosOrbM", Attacker, 0);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                If(Level, default, CO_EQUAL, default, 1, () => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                    ApplyDamage(Attacker, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.33, 1, false, false, Attacker);
                });
                ElseIf(Level, default, CO_EQUAL, default, 2, () => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                    ApplyDamage(Attacker, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.375, 1, false, false, Attacker);
                });
                Else(() => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                    ApplyDamage(Attacker, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.42, 1, false, false, Attacker);
                });
            });
            IfHasBuff(Owner, Attacker, "LeblancChaosOrb", () => {
                ApplySilence(Attacker, Owner, 2);
                SpellBuffRemove(Owner, "LeblancChaosOrb", Attacker, 0);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                ApplyDamage(Attacker, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.3, 1, false, false, Attacker);
            });
            ApplyDamage(Attacker, Owner, 0 + (this.BreakDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.5, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Owner, "LeblancSoulShackleNet", 1, 1, 0 + (this.BreakStun ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, false, default);
        });
        SpellEffectRemove(this.b);
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.DistortionFx);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        TeamID = GetTeamID(default);
        If(this.Detonated, default, CO_EQUAL, default, false, () => {
            SpellEffectCreate(Particle, default, "maoki_sapling_detonate.troy", default, TeamID ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, true, default, default, false, false, default, default);
            ForEachUnitInTargetArea(Attacker, Owner, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (this.MineDamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
            });
        });
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetNoRender);
        ApplyDamage(Owner, Owner, 4000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        TeamID = GetTeamID(default);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "MaokaiDrain3");
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        Cooldown = this.VALUE_BY_LEVEL;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Cooldown ?? 0), MO_MULTIPLY, 0 + (Multiplier ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        If(CharVars.Tally, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            Bonus = Math(0 + (CharVars.Tally ?? 0), MO_MULTIPLY, 2);
            Bonus = Math(0 + (this.BonusCap ?? 0), MO_MIN, 0 + (Bonus ?? 0));
            TotalDamage = Math(0 + (this.BaseDamage ?? 0), MO_ADD, 0 + (Bonus ?? 0));
            SpellEffectCreate(ExplosionVFX, default, "maoki_torrent_deflect_self_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, this.TargetPos, Owner, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(ExplosionVFX, default, "maoki_torrent_deflect_cas_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, this.TargetPos, Owner, default, default, true, false, false, false, false, default, default);
            ForEachUnitInTargetArea(Attacker, this.TargetPos, 550, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Attacker);
                SpellEffectCreate(TargetVFX, default, "maoki_torrent_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            });
            CharVars.Tally = 0;
        });
        RemovePerceptionBubble(this.UnitPerceptionBubble);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetForceRenderParticles);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            UnlockAnimation(Owner, false);
            PlayAnimation("Spell2b", 0.25, Owner, false, true, false);
        });
        SpellEffectRemove(this.Particle);
        Caster = SetBuffCasterUnit();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.DefensiveBonus = this.VALUE_BY_LEVEL;
        StopMoveBlock(Owner);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.RootParticleEffect2);
        SpellEffectRemove(this.RootParticleEffect);
        SpellEffectRemove(this.taric);
        ClearOverrideAnimation("Attack", Owner);
        ClearOverrideAnimation("Attack2", Owner);
        ClearOverrideAnimation("Crit", Owner);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectCreate(arrr, default, "fling_land.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, true, default, default, default, default, default, default);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        NextBuffVars.Duration = this.Duration;
        NextBuffVars.SlowPercent = this.SlowPercent;
        SpellBuffAdd(Attacker, Owner, "MegaAdhesiveApplicator", 1, 1, 0 + (this.Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        VeigarSkinID = GetSkinID(Attacker);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            If(VeigarSkinID, default, CO_EQUAL, default, 4, () => {
                SpellEffectCreate(a, default, "permission_dark_matter_tar_leprechaun.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "permission_dark_matter_tar.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
        });
        Else(() => {
            If(VeigarSkinID, default, CO_EQUAL, default, 4, () => {
                SpellEffectCreate(a, default, "permission_dark_matter_tar_leprechaun.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "permission_dark_matter_tar.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
            });
        });
        ForEachUnitInTargetArea(Attacker, Owner, 240, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (this.DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
        });
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        RemovePerceptionBubble(this.ThisBubble);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        SpellEffectRemove(this.slow);
        IfHasBuff(Attacker, Owner, "BlindMonkQManager", () => {
            SpellBuffRemove(Attacker, "BlindMonkQManager", Owner, default);
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetGhosted);
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        SpellEffectRemove(this.slow);
        IfHasBuff(Attacker, Owner, "BlindMonkQManager", () => {
            SpellBuffRemove(Attacker, "BlindMonkQManager", Owner, 0);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CD = this.VALUE_BY_LEVEL;
        Duration = Math(3, MO_SUBTRACT, 0 + (LifeTime ?? 0));
        Duration = Math(0, MO_MAX, 0 + (Duration ?? 0));
        PreCDRCooldown = Math(0 + (CD ?? 0), MO_ADD, 0 + (Duration ?? 0));
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (PreCDRCooldown ?? 0));
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "BlindMonkQOne");
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CD = this.VALUE_BY_LEVEL;
        Duration = Math(3, MO_SUBTRACT, 0 + (LifeTime ?? 0));
        Duration = Math(0, MO_MAX, 0 + (Duration ?? 0));
        PreCDRCooldown = Math(0 + (CD ?? 0), MO_ADD, 0 + (Duration ?? 0));
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (PreCDRCooldown ?? 0));
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "BlindMonkEOne");
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectRemove(this.turntostone);
        SetStatus(Owner, default, SetGhosted);
        If(this.willRemove, default, CO_EQUAL, default, false, () => {
            SpellEffectCreate(ar, default, "blindMonk_W_shield_self_deactivate.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        });
        If(this.ShieldAbsorb, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.ShieldAbsorb ?? 0), true, true);
        });
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CD = this.VALUE_BY_LEVEL;
        Duration = Math(3, MO_SUBTRACT, 0 + (LifeTime ?? 0));
        Duration = Math(0, MO_MAX, 0 + (Duration ?? 0));
        PreCDRCooldown = Math(0 + (CD ?? 0), MO_ADD, 0 + (Duration ?? 0));
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (PreCDRCooldown ?? 0));
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "BlindMonkWOne");
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        SetStatus(Owner, default, SetGhosted);
        UnlockAnimation(Owner, true);
        If(Expired, default, CO_EQUAL, default, true, () => {
            If(this.hitsRemaining, default, CO_GREATER_THAN, default, 0, () => {
                While(this.hitsRemaining, default, CO_GREATER_THAN, default, 0, () => {
                    SpellEffectCreate(arr, default, "InfiniteDuress_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
                    ApplyDamage(Attacker, Owner, 0 + (this.damagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
                    this.hitsRemaining = Math(0 + (this.hitsRemaining ?? 0), MO_SUBTRACT, 1);
                });
            });
        });
        Else(() => {
            StopChanneling(Attacker, ChannelingStopCondition_Cancel, ChannelingStopSource_LostTarget);
        });
        IssueOrder(Owner, AI_ATTACKTO, default, Target);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.Part1);
        SpellEffectRemove(this.Part2);
        SpellEffectRemove(this.Part3);
        SpellEffectRemove(this.Part4);
        OwnerSkinID = GetSkinID(Owner);
        If(OwnerSkinID, default, CO_EQUAL, default, 7, () => {
            StopCurrentOverrideAnimation("Run", Owner, false);
            OverrideAnimation("Run", "Run", Owner);
        });
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 4);
        SpellEffectRemove(this.Particle);
        RemovePerceptionBubble(this.BubbleStuff);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.ParticleID2);
        RemovePerceptionBubble(this.a);
        RemovePerceptionBubble(this.b);
        SpellEffectRemove(this.Particle);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Owner);
        SpellBuffAdd(Owner, Owner, "LuxDeathParticle", 1, 1, 250000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        IfHasBuff(Owner, Owner, "Pantheon_GS_ParticleRed", () => {
            SpellBuffRemove(Owner, "Pantheon_GS_ParticleRed", Owner, 0);
        });
        IfHasBuff(Owner, Owner, "Pantheon_GS_Particle", () => {
            SpellBuffRemove(Owner, "Pantheon_GS_Particle", Owner, 0);
        });
        TargetPos = CharVars.TargetPos;
        TargetPos = GetUnitPosition(Target);
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "pantheon_grandskyfall_land.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Nothing, default, TargetPos, Target, default, TargetPos, true, default, default, false, false, default, default);
        TargetPos = this.TargetPos;
        NextBuffVars.AttackSpeedMod = 0;
        NextBuffVars.MoveSpeedMod = -0.35;
        OwnerPos = GetUnitPosition(Owner);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetNoRender);
        SpellBuffAdd(Owner, Owner, "Pantheon_GrandSkyfall_FallD", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = CharVars.TargetPos;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.DamageRank = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Target, TargetPos, 700, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            UnitPos = GetUnitPosition(Unit);
            Distance = DistanceBetweenPoints(TargetPos, UnitPos);
            If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 250, () => {
                PercentDamage = 1;
            });
            Else(() => {
                PercentNotDamage = Math(0 + (Distance ?? 0), MO_SUBTRACT, 200);
                PercentNotDamage = Math(0 + (Distance ?? 0), MO_DIVIDE, 500);
                PercentDamage = Math(1, MO_SUBTRACT, 0 + (PercentNotDamage ?? 0));
                PercentDamage = Math(0 + (PercentDamage ?? 0), MO_MIN, 1);
                PercentDamage = Math(0 + (PercentDamage ?? 0), MO_MAX, 0.5);
            });
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (this.DamageRank ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + (PercentDamage ?? 0), 1, 1, false, false, Attacker);
            NextBuffVars.MoveSpeedMod = -0.35;
            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            SpellEffectCreate(a, default, "Globalhit_physical.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "head", default, Target, default, default, false, default, default, false, false, default, default);
        });
        SpellEffectRemove(this.NewName);
        RemovePerceptionBubble(this.BubbleID);
        SpellEffectRemove(this.Part);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.NewName);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.KIRHand);
        If(this.ticksRemaining, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            If(Expired, default, CO_EQUAL, default, true, () => {
                this.ticksRemaining = Math(0 + (this.ticksRemaining ?? 0), MO_SUBTRACT, 1);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                CastPosition = this.CastPosition;
                sourcePosition = this.sourcePosition;
                SpellCast(Owner, Nothing, CastPosition, CastPosition, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, sourcePosition);
            });
        });
        SpellBuffRemove(Owner, "Pantheon_HeartseekerSound", Owner, 0);
        SpellBuffRemove(Owner, "Pantheon_Heartseeker", Owner, 0);
        SpellBuffRemove(Owner, "Pantheon_HeartseekerChannel", Owner, 0);
        UnlockAnimation(Owner, false);
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellEffectRemove(this.Particl3);
        });
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle);
        ClearOverrideAnimation("Run", Owner);
        If(this.executeOnce, default, CO_EQUAL, default, true, () => {
            ClearOverrideAnimation("Run", Owner);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BoomDamage = this.VALUE_BY_LEVEL;
        Position = this.Position;
        ForEachUnitInTargetArea(Attacker, Position, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (BoomDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
            SpellEffectCreate(PartExplodeHit, default, "globalhit_mana.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, false, false, false, false, false, default, default);
            If(Unit, default, CO_IS_NOT_TURRET, default, default, () => {
                SpellBuffAdd(Owner, Unit, "LuxIlluminatingFraulein", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "LuxLightstrikeKugel");
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (this.LSCooldown ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        CasterID = GetTeamID(default);
        If(CasterID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.PartExplode, default, "LuxBlitz_nova.troy", default, TEAM_ORDER, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Position, Owner, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.PartExplode, default, "LuxBlitz_nova.troy", default, TEAM_CHAOS, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Position, Owner, default, default, true, false, false, false, false, default, default);
        });
        RemovePerceptionBubble(this.BubbleID);
        SpellBuffAdd(Owner, Owner, "Pantheon_AegisShield", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.Geeves1);
        SpellEffectRemove(this.Geeves2);
        ForEachUnitInTargetArea(Owner, this.Attacker, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyDamage(Owner, Unit, 300, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Owner);
        });
        ApplyDamage(Attacker, Attacker, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Attacker);
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (this.LSCooldown ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "LuxLightstrikeKugel");
        If(this.willRemove, default, CO_EQUAL, default, false, () => {
            SpellEffectCreate(ar, default, "shen_Feint_self_deactivate.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        If(this.DamageBlock, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.DamageBlock ?? 0), true, true);
        });
        RemoveOverrideAutoAttack(Owner, false);
        SetStatus(Owner, default, SetStealthed);
        SetStatus(Owner, default, SetGhosted);
        PushCharacterFade(Owner, 1, default, default);
        IfHasBuff(Owner, Owner, "Recall", () => {
            SpellBuffRemoveCurrent(Owner);
        });
        SpellEffectRemove(this.AkaliStealth);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "GarenBladestorm");
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        StopCurrentOverrideAnimation("Spell3", Owner, false);
        ClearOverrideAnimation("Run", Owner);
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (this.SpellCooldown ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.ParticleID);
        If(this.willRemove, default, CO_EQUAL, default, false, () => {
            SpellEffectCreate(ar, default, "shen_Feint_self_deactivate.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        If(this.DamageBlock, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.DamageBlock ?? 0), true, true);
        });
        SpellEffectRemove(this.Part);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Part);
        SpellBuffAdd(Owner, Owner, "GarenRecouperateOn", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectRemove(this.taric);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SpellEffectRemove(this.Particle);
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, false);
        SealSpellSlot(1, SpellSlots, Owner, false, default);
        IfHasBuff(Owner, Owner, "RelentlessAssaultMarker", () => {
            OverrideAutoAttack(2, ExtraSlots, Owner, 1, false);
        });
        Else(() => {
            RemoveOverrideAutoAttack(Owner, false);
        });
        SpellEffectRemove(this.Particle);
        SetStatus(Owner, default, SetCanAttack);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        If(this.CooledDown, default, CO_EQUAL, default, false, () => {
            SpellEffectRemove(this.RemoveMe);
        });
        Else(() => {
            SpellEffectRemove(this.RemoveMe2);
        });
        IfHasBuff(Owner, Owner, "Empower", () => {
            OverrideAutoAttack(1, ExtraSlots, Owner, 1, false);
        });
        Else(() => {
            RemoveOverrideAutoAttack(Owner, false);
        });
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, 10);
        IncHealth(Owner, 0 + (this.HealthPlusAbility ?? 0), Owner);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        SpellEffectCreate(Part, default, "GuardianAngel_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        UnlockAnimation(Owner, false);
        PlayAnimation("idle1", 0, Owner, false, false, true);
        UnlockAnimation(Owner, false);
        Count = GetBuffCountFromAll(Owner, "AhriTumble");
        If(Count, default, CO_EQUAL, default, 0, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            this.NewCd = this.VALUE_BY_LEVEL;
            CooldownStat = GetStat(GetPercentCooldownMod, Owner);
            Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
            NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (this.NewCd ?? 0));
            SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
            SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        });
        SpellEffectRemove(this.asdf);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.ParticleID2);
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            teamID = GetTeamID(default);
            SpellEffectCreate(par, default, "TimeBombExplo.troy", default, teamID ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
            ForEachUnitInTargetArea(Attacker, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (this.DamageLevel ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.9, 1, false, false, Attacker);
            });
        });
        ElseIf(Expired, default, CO_EQUAL, default, true, () => {
            SpellEffectCreate(par, default, "TimeBombExplo.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
            ForEachUnitInTargetArea(Attacker, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                ApplyDamage(Attacker, Unit, 0 + (this.DamageLevel ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.9, 1, false, false, Attacker);
            });
        });
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        SetStatus(Owner, default, SetGhosted);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        Cooldown = this.VALUE_BY_LEVEL;
        CooldownMod = GetStat(GetPercentCooldownMod, Owner);
        CooldownMod = Math(1, MO_ADD, 0 + (CooldownMod ?? 0));
        FinalCooldown = Math(0 + (Cooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMod ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (FinalCooldown ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Duration = GetBuffRemainingDuration(Owner, "AhriFoxFire");
        If(Duration, default, CO_LESS_THAN, default, -0.001, () => {
            SpellEffectCreate(this.Particle1, default, "Ahri_foxfire_obd-sound.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, default, default, false, false, false, false, false, default, default);
        });
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanAttack);
        StopMove(Owner);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        Count = GetBuffCountFromAll(Owner, "AhriFoxFireMissile");
        If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            SpellBuffRemove(Owner, "AhriFoxFire", Owner, 0);
        });
        CharVars.FoxFireIsActive = 0;
        CharVars.TumbleIsActive = 0;
        SpellBuffAdd(Owner, Owner, "AhriIdleParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "AhriPassiveParticle", Owner, 0);
        SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusher4", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0.25, true, false, false, default);
        SpellEffectRemove(this.Particle1);
        SetStatus(Owner, default, SetSilenced);
        IfHasBuff(Owner, Owner, "AhriSoulCrusher", () => {
            SpellBuffAdd(Owner, Owner, "AhriPassiveParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "AhriIdleParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SpellEffectRemove(this.Particle1);
        If(this.DamageBlock, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.DamageBlock ?? 0), true, true);
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.partname, default, "Skarner_Exoskeleon_Shatter.troy", default, TEAM_NEUTRAL, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
        SpellEffectRemove(this.ChainPartID);
        SpellEffectRemove(this.CParticle);
        SpellEffectRemove(this.ZParticle);
        SpellEffectRemove(this.crystalineParticle);
        PauseAnimation(Owner, false);
        SetStatus(Attacker, default, SetCanAttack);
        SetStatus(Owner, default, SetStunned);
        SetStatus(Owner, default, SetSuppressed);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            SealSpellSlot(0, SpellSlots, Attacker, false, SPELLBOOK_CHAMPION);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            SealSpellSlot(1, SpellSlots, Attacker, false, SPELLBOOK_CHAMPION);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            SealSpellSlot(2, SpellSlots, Attacker, false, SPELLBOOK_CHAMPION);
        });
        FlashCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Attacker, GetSlotSpellName);
        If(FlashCheck, default, CO_EQUAL, default, "SummonerFlash", () => {
            SealSpellSlot(0, SpellSlots, Attacker, false, SPELLBOOK_SUMMONER);
        });
        FlashCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Attacker, GetSlotSpellName);
        If(FlashCheck, default, CO_EQUAL, default, "SummonerFlash", () => {
            SealSpellSlot(1, SpellSlots, Attacker, false, SPELLBOOK_SUMMONER);
        });
        ClearOverrideAnimation("Run", Attacker);
        ClearOverrideAnimation("Idle1", Attacker);
        ClearOverrideAnimation("Idle2", Attacker);
        ClearOverrideAnimation("Idle3", Attacker);
        ClearOverrideAnimation("Idle4", Attacker);
        ClearOverrideAnimation("Spell2", Attacker);
        ClearOverrideAnimation("Spell1", Attacker);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        DamagePerTick = this.VALUE_BY_LEVEL;
        Duration = GetBuffRemainingDuration(Owner, "SkarnerImpale");
        If(Duration, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            ApplyDamage(Attacker, Owner, 0 + (DamagePerTick ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 0, false, false, Attacker);
            TeamID = GetTeamID(default);
            SpellEffectCreate(MotaExplosion, default, "skarner_ult_tar_03.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Attacker, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        });
        RemovePerceptionBubble(this.VictimBubble);
        SpellBuffClear(Attacker, "SkarnerImpaleBuff");
        HP = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        If(HP, default, CO_GREATER_THAN, default, 0, () => {
            Pos = GetPointByUnitFacingOffset(Attacker, 100, 180);
            FaceDirection(Attacker, Pos);
            PlayAnimation("Run", 0, Attacker, false, false, false);
        });
        SpellEffectRemove(this.SandSwirl);
        UnlockAnimation(Owner, false);
        SpellEffectRemove(this.SelfParticle);
        SpellBuffRemove(Owner, "UnstoppableForceMarker", Owner, default);
        SetStatus(Owner, default, SetStunned);
        FlashCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(FlashCheck, default, CO_EQUAL, default, "SummonerFlash", () => {
            SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        });
        FlashCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(FlashCheck, default, CO_EQUAL, default, "SummonerFlash", () => {
            SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        });
        SpellEffectRemove(this.FrostTurrets);
        If(this.willPop, default, CO_EQUAL, default, true, () => {
            PopCharacterData(Owner, this.RedShift);
        });
        Else(() => {
            IfHasBuff(Owner, Attacker, "ExplosiveCartridges", () => {
                rShift = PushCharacterData("HeimerTRed", Owner, true);
            });
            Else(() => {
                IfHasBuff(Owner, Attacker, "UrAniumRounds", () => {
                    gShift = PushCharacterData("HeimerTGreen", Owner, true);
                });
                Else(() => {
                    yShift = PushCharacterData("HeimerTYellow", Owner, true);
                });
            });
        });
        IfHasBuff(Attacker, Owner, "HeimerdingerTurretMaximum", () => {
            SpellBuffRemove(Attacker, "HeimerdingerTurretMaximum", Owner, 0);
        });
        SpellEffectRemove(this.MordekaiserParticle);
        SpellEffectRemove(this.SSSlow);
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            SpellBuffAdd(Owner, Owner, "HeimerdingerTurretReady", 2, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, false, false, false, default);
        });
        this.PetDamage = Math(-1, MO_MULTIPLY, 0 + (this.PetDamage ?? 0));
        this.PetAP = Math(-1, MO_MULTIPLY, 0 + (this.PetAP ?? 0));
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, 0 + (this.PetAP ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (this.PetDamage ?? 0));
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Owner);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        IfHasBuff(Attacker, Attacker, "MordekaiserCOTGSelf", () => {
            SpellBuffRemove(Attacker, "MordekaiserCOTGSelf", Attacker, 0);
        });
        SpellBuffClear(Owner, "Taunt");
        If(this.removeParticle, default, CO_EQUAL, default, true, () => {
            SpellEffectRemove(this.MordekaiserParticle);
        });
        SpellBuffClear(Owner, "Taunt");
        SpellBuffClear(Owner, "Taunt");
        IfHasBuff(Attacker, Owner, "H28GEvolutionTurret", () => {
            SpellBuffRemove(Attacker, "H28GEvolutionTurret", Owner, 0);
        });
        IfHasBuff(Owner, Attacker, "MordekaiserCreepingDeathCheck", () => {
            SpellBuffClear(Owner, "MordekaiserCreepingDeathCheck");
        });
        DefenseStats = Math(0 + (this.DefenseStats ?? 0), MO_MULTIPLY, -1);
        IncPermanentStat(IncPermanentFlatArmorMod, Owner, 0 + (DefenseStats ?? 0));
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, 0 + (DefenseStats ?? 0));
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.LandslideLHand);
        SpellEffectRemove(this.LandslideRHand);
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (this.SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, false);
        this.DamageIncrease = Math(0 + (this.DamageIncrease ?? 0), MO_MULTIPLY, -1);
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (this.DamageIncrease ?? 0));
        this.ArmorIncrease = Math(0 + (this.ArmorIncrease ?? 0), MO_MULTIPLY, -1);
        IncPermanentStat(IncPermanentFlatArmorMod, Owner, 0 + (this.ArmorIncrease ?? 0));
        RemoveOverrideAutoAttack(Owner, true);
        SpellEffectRemove(this.SandLHand);
        SpellEffectRemove(this.SandRHand);
        SpellEffectRemove(this.Sandroot);
        SpellEffectRemove(this.SEPar);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SpellBuffClear(Owner, "SkarnerVirulentSlashEnergy1");
        SpellBuffClear(Owner, "SkarnerVirulentSlashEnergy2");
        SpellBuffAdd(Owner, Owner, "MalphiteShieldRemoval", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(this.ShieldHealth, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.ShieldHealth ?? 0), true, true);
        });
        If(default, true, CO_EQUAL, default, false, () => {
            SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        });
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.Particle1);
        SetStatus(Owner, default, SetStealthed);
        PopCharacterFade(Owner, this.ID);
        SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Target, "CamouflageBuff", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            SpellBuffAdd(Owner, Owner, "TeemoMushrooms", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        });
        RemovePerceptionBubble(this.bubbleID);
        UnlockAnimation(Owner, true);
        TeemoTeam = GetTeamID(default);
        SpellEffectCreate(Particle, default, "ShroomMine.troy", default, TeemoTeam ?? TEAM_UNKNOWN, 300, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, default, default, default, default);
        ForEachUnitInTargetArea(Attacker, Owner, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            NextBuffVars.AttackSpeedMod = 0;
            NextBuffVars.MoveSpeedMod = -0.6;
            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 4, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
        });
        ApplyDamage(Owner, Owner, 500, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        RemovePerceptionBubble(this.bubbleID);
        If(this.TeemoSkinID, default, CO_EQUAL, default, 5, () => {
            If(this.HasParticle, default, CO_EQUAL, default, default, () => {
                SpellEffectRemove(this.a);
            });
        });
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            
        });
        Else(() => {
            ApplyDamage(Owner, Owner, 4000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        });
        SpellEffectRemove(this.Particle);
        If(this.TotalArmorAmount, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
        });
        UnlockAnimation(Owner, true);
        SetStatus(Owner, default, SetGhosted);
        SpellEffectRemove(this.Particle);
        SetTargetingType(0, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Location, Owner);
        SpellEffectRemove(this.Particle);
        TeamID = GetTeamID(default);
        CastPos = this.CastPos;
        Other1 = SpawnMinion("TestCube", "TestCubeRender", "idle.lua", this.CastPos, TeamID ?? TEAM_CASTER, false, true, false, true, false, true, 0, false, true, Owner, default);
        UnitPos2 = GetUnitPosition(Other1);
        FacePos = this.FacePos;
        FaceDirection(Other1, FacePos);
        APMod = GetStat(GetFlatMagicDamageMod, Owner);
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Other1, 0 + (APMod ?? 0));
        NextBuffVars.Speed = 150;
        NextBuffVars.Gravity = 45;
        NextBuffVars.IdealDistance = 100;
        If(this.LifeTime, default, CO_LESS_THAN_OR_EQUAL, default, 1, () => {
            SetSpell(Owner, 0, ExtraSlots, SPELLBOOK_CHAMPION, "HowlingGaleSpell");
        });
        ElseIf(this.LifeTime, default, CO_LESS_THAN_OR_EQUAL, default, 2, () => {
            SetSpell(Owner, 0, ExtraSlots, SPELLBOOK_CHAMPION, "HowlingGaleSpell1");
        });
        ElseIf(this.LifeTime, default, CO_LESS_THAN_OR_EQUAL, default, 3, () => {
            SetSpell(Owner, 0, ExtraSlots, SPELLBOOK_CHAMPION, "HowlingGaleSpell2");
        });
        Else(() => {
            SetSpell(Owner, 0, ExtraSlots, SPELLBOOK_CHAMPION, "HowlingGaleSpell3");
        });
        SpellCast(Owner, Nothing, FacePos, FacePos, true, 0, ExtraSlots, 0 + (this.Level ?? 0), true, true, false, false, false, UnitPos2);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        CooldownMod = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        Cooldown = this.VALUE_BY_LEVEL;
        Cooldown = Math(0 + (Cooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMod ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (Cooldown ?? 0));
        SetTargetingType(1, SpellSlots, default, TTYPE_Target, Owner);
        SpellEffectRemove(this.MoveQuickParticle);
        SpellBuffClear(Owner, "TeemoMoveQuickDebuff");
        SpellBuffAdd(Attacker, Target, "TeemoMoveQuickSpeed", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
        If(this.CustomRun, default, CO_EQUAL, default, true, () => {
            OverrideAnimation("Run", "Run", Owner);
        });
        SpellEffectRemove(this.UltMagicParticle);
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_SelfAOE, Owner);
        If(this.Blades, default, CO_EQUAL, default, 1, () => {
            SpellEffectRemove(this.Particle1);
        });
        If(this.Blades, default, CO_EQUAL, default, 2, () => {
            SpellEffectRemove(this.Particle1);
            SpellEffectRemove(this.Particle3);
        });
        If(this.Blades, default, CO_EQUAL, default, 3, () => {
            SpellEffectRemove(this.Particle1);
            SpellEffectRemove(this.Particle2);
            SpellEffectRemove(this.Particle3);
        });
        If(this.Blades, default, CO_EQUAL, default, 4, () => {
            SpellEffectRemove(this.Particle1);
            SpellEffectRemove(this.Particle2);
            SpellEffectRemove(this.Particle3);
            SpellEffectRemove(this.Particle4);
        });
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        SpellBuffAdd(Owner, Owner, "IreliaIdleParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (this.NewCd ?? 0));
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        If(this.willRemove, default, CO_EQUAL, default, false, () => {
            SpellEffectCreate(ar, default, "shen_Feint_self_deactivate.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        });
        If(this.DamageBlock, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.DamageBlock ?? 0), true, true);
        });
        SpellEffectRemove(this.TremorsFx);
        SpellEffectRemove(this.Particle);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.Shieldz);
        If(this.shieldHealth, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.shieldHealth ?? 0), true, true);
        });
        TeamID = GetTeamID(default);
        ReductionPerc = GetStat(GetPercentCooldownMod, Owner);
        ReductionPerc = Math(1, MO_ADD, 0 + (ReductionPerc ?? 0));
        CooldownTime = Math(10, MO_MULTIPLY, 0 + (ReductionPerc ?? 0));
        SetStatus(Owner, default, SetCanAttack);
        PopAllCharacterData(Owner);
        SpellEffectCreate(default, default, "PowerBallStop.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownTime ?? 0));
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.slow);
        CharVars.count = 0;
        RemoveOverrideAutoAttack(Owner, false);
        SpellEffectRemove(this.LeftHand);
        SpellEffectRemove(this.RightHand);
        SetDodgePiercing(Owner, true);
        SpellEffectRemove(this.particleID);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.MoveQuickParticle);
        SpellBuffRemove(Owner, "Taunt", Attacker, default);
        StartTrackingCollisions(Owner, false);
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        SpellBuffRemove(Owner, "Taunt", Attacker, default);
        SpellEffectRemove(this.asdf1);
        PopCharacterData(Owner, this.CasterID);
        SpellEffectCreate(default, default, "DBC_out.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        baseCD = 14;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (baseCD ?? 0));
        FinalCooldown = Math(0 + (NewCooldown ?? 0), MO_SUBTRACT, 0 + (LifeTime ?? 0));
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "DefensiveBallCurl");
        SetSlotSpellCooldownTimeVer2(0 + (FinalCooldown ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectRemove(this.particle);
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        SetStatus(Owner, default, SetGhosted);
        SpellEffectRemove(this.IreliaHitenStyle1);
        SpellEffectRemove(this.IreliaHitenStyle2);
        If(Attacker, default, CO_IS_DEAD, default, default, () => {
            SpellEffectCreate(Placeholder, default, "irelia_gotasu_ability_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(CastParticle, default, "irelia_gotasu_mana_refresh.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
            IncPAR(Owner, 35);
        });
        SpellBuffAdd(Owner, Owner, "IreliaHitenStyle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle1);
        SetStatus(Owner, default, SetStealthed);
        SetStatus(Owner, default, SetGhosted);
        PushCharacterFade(Owner, 1, default, default);
        IfNotHasBuff(Owner, Owner, "MonkeyKingSpinToWin", () => {
            IfNotHasBuff(Owner, Nothing, "MonkeyKingNimbusKick", () => {
                SpellBuffAdd(Owner, Owner, "MonkeyKingDecoyStealth", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
                DebugSay(Owner, "YO!", default);
            });
        });
        Else(() => {
            PushCharacterFade(Owner, 1, default, default);
            SetStatus(Owner, default, SetStealthed);
            DebugSay(Owner, "NO", default);
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        SpellCast(Owner, Owner, default, default, false, 1, ExtraSlots, 0 + (Level ?? 0), false, false, false, true, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingKillCloneW", 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectRemove(this.HymnAura);
        ApplyDamage(Attacker, Owner, 0 + (this.DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.266, 1, false, false, Attacker);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        ClearOverrideAnimation("Idle1", Owner);
        SpellEffectRemove(this.particleID);
        SpellEffectRemove(this.SongAura);
        SpellEffectRemove(this.Part2);
        SpellEffectRemove(this.asdf);
        Level = this.Level;
        SpellEffectRemove(this.particleID);
        If(Expired, default, CO_EQUAL, default, false, () => {
            StopChanneling(Attacker, ChannelingStopCondition_Cancel, ChannelingStopSource_LostTarget);
        });
        SpellEffectRemove(this.Part);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.asdf1);
        SpellEffectRemove(this.Part);
        TargetPos = this.TargetPos;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        SpellCast(Attacker, Nothing, TargetPos, TargetPos, true, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, Owner);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Owner);
        NextBuffVars.Particle2 = this.Particle2;
        NextBuffVars.Particle3 = this.Particle3;
        SpellBuffAdd(Attacker, Attacker, "AlZaharCallR", 2, 1, 0.75, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.AriaAura);
        SpellEffectRemove(this.particleID);
        SetDodgePiercing(Owner, false);
        SetAutoAcquireTargets(Owner, true);
        SpellBuffRemove(Owner, "SonaHymnofValorCheck", Owner, 0);
        SpellBuffRemove(Owner, "SonaAriaofPerseveranceCheck", Owner, 0);
        SpellBuffRemove(Owner, "SonaSongofDiscordCheck", Owner, 0);
        IfHasBuff(Owner, Owner, "SonaAriaOfPerseverance", () => {
            OverrideAutoAttack(3, ExtraSlots, Owner, 1, false);
        });
        IfHasBuff(Owner, Owner, "SonaHymnOfValor", () => {
            OverrideAutoAttack(4, ExtraSlots, Owner, 1, false);
        });
        IfHasBuff(Owner, Owner, "SonaSongOfDiscord", () => {
            OverrideAutoAttack(5, ExtraSlots, Owner, 1, false);
        });
        Else(() => {
            OverrideAutoAttack(5, ExtraSlots, Owner, 1, false);
        });
        SpellEffectRemove(this.Particle4);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.Particle1);
        SetStatus(Owner, default, SetNoRender);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, default);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetCanMove);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        RemoveOverrideAutoAttack(Owner, true);
        SetDodgePiercing(Owner, false);
        ApplyDamage(Owner, Owner, 8000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, default);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.c);
        SpellEffectRemove(this.d);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetNoRender);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.particle1);
        TeamID = GetTeamID(default);
        SpellEffectCreate(StoneRemoval, default, "MonkeyKingPHRemoveRocks.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        SpellEffectRemove(this.Particle1);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        StopCurrentOverrideAnimation("Spell4", Owner, true);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.ParticleID);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "MonkeyKingSpinToWin");
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (this.SpellCooldown ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        IfNotHasBuff(Owner, Nothing, "MonkeyKingCloneFull", () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                Pos1 = GetPointByUnitFacingOffset(Owner, 100, 0);
                Level = 1;
                Other1 = CloneUnitPet(Owner, "MonkeyKingClone", 25000, Pos1, 0, 0, false);
                SpellBuffAdd(Other1, Owner, "MonkeyKingCloneSpellCast", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SpellBuffAdd(Owner, Other1, "MonkeyKingCloneFull", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                SpellEffectCreate(FadeParticle, default, "LeBlanc_MirrorImagePoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Other1, default, default, Other1, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(FadeParticle, default, "LeBlanc_MirrorImagePoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
            });
        });
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetCanMove);
        SpellBuffAdd(Owner, Owner, "MonkeyKingKillClone", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Owner, default, SetNoRender);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        UnlockAnimation(Owner, true);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetGhosted);
        SpellEffectRemove(this.SelfParticle);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        SpellEffectRemove(this.WindVFXAlly);
        SpellEffectRemove(this.WindVFXEnemy);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        If(Owner, default, CO_NOT_EQUAL, Attacker, default, () => {
            SpellEffectRemove(this.TargetVFX);
        });
        Else(() => {
            SpellEffectRemove(this.SelfTargetVFX);
        });
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.BuffVFXAlly);
        SpellEffectRemove(this.BuffVFXEnemy);
        CenterPos = GetUnitPosition(Owner);
        ForEachUnitInTargetArea(Owner, CenterPos, 25000, "AffectEnemies AffectFriends AffectMinions AffectHeroes AffectUntargetable ", "ViktorChaosStormGuide", true, (Unit) => {
            If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                SpellBuffClear(Unit, "ViktorChaosStormGuide");
                SpellBuffRemove(Unit, "ViktorChaosStormGuide", Owner, 0);
            });
            Else(() => {
                SetStatus(Unit, default, SetInvulnerable);
                SetStatus(Unit, default, SetTargetable);
                SpellBuffClear(Unit, "ViktorChaosStormGuide");
                SpellBuffRemove(Unit, "ViktorChaosStormGuide", Owner, 0);
                ApplyDamage(Attacker, Unit, 25000, TRUE_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
            });
        });
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        SpellBuffRemove(Attacker, "ViktorChaosStormTimer", Attacker, 0);
        SetSpell(Attacker, 3, SpellSlots, SPELLBOOK_CHAMPION, "ViktorChaosStorm");
        CDMOD = GetStat(GetPercentCooldownMod, Attacker);
        NEWCD = Math(120, MO_MULTIPLY, 0 + (CDMOD ?? 0));
        NEWCD = Math(120, MO_ADD, 0 + (NEWCD ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NEWCD ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker, false);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.c);
        If(this.SoundClear, default, CO_EQUAL, default, false, () => {
            SpellEffectRemove(this.PartThing);
        });
        SpellBuffAdd(Owner, Owner, "XenZhaoBattleCryPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellEffectRemove(this.PassivePart);
        SpellEffectRemove(this.BattleCries);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.asdf2);
        SpellEffectRemove(this.asdf1);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        If(Expired, default, CO_EQUAL, default, true, () => {
            CDMod = GetStat(GetPercentCooldownMod, Owner);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            CooldownByLevel = this.VALUE_BY_LEVEL;
            ModulatedCD = Math(1, MO_ADD, 0 + (CDMod ?? 0));
            TrueCD = Math(0 + (ModulatedCD ?? 0), MO_MULTIPLY, 0 + (CooldownByLevel ?? 0));
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (TrueCD ?? 0));
        });
        SpellEffectRemove(this.MRShield);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SpellEffectRemove(this.asdf1);
        SpellEffectRemove(this.asdf2);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        CDMod = GetStat(GetPercentCooldownMod, Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CooldownByLevel = this.VALUE_BY_LEVEL;
        ModulatedCD = Math(1, MO_ADD, 0 + (CDMod ?? 0));
        TrueCD = Math(0 + (ModulatedCD ?? 0), MO_MULTIPLY, 0 + (CooldownByLevel ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (TrueCD ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SpellEffectRemove(this.asdf2);
        SpellEffectRemove(this.asdf1);
        CDMod = GetStat(GetPercentCooldownMod, Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        CooldownByLevel = this.VALUE_BY_LEVEL;
        ModulatedCD = Math(1, MO_ADD, 0 + (CDMod ?? 0));
        TrueCD = Math(0 + (ModulatedCD ?? 0), MO_MULTIPLY, 0 + (CooldownByLevel ?? 0));
        If(Expired, default, CO_EQUAL, default, false, () => {
            
        });
        Else(() => {
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (TrueCD ?? 0));
        });
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanMove);
        ClearOverrideAnimation("Run", Owner);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.hi);
        TeamID = GetTeamID(default);
        SpellEffectRemove(this.ChannelVFX);
        SpellEffectRemove(this.AreaVFXAlly);
        SpellEffectRemove(this.AreaVFXEnemy);
        SpellEffectCreate(ExplosionVFX, default, "galio_talion_breakout.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(ExplosionVFX, default, "galio_builingStatue_impact_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        this.HitCount = Math(0 + (this.HitCount ?? 0), MO_MIN, 8);
        BonusDmgPercent = Math(0 + (this.HitCount ?? 0), MO_MULTIPLY, 0.05);
        totalDmgPercent = Math(0 + (BonusDmgPercent ?? 0), MO_ADD, 1);
        ForEachUnitInTargetArea(Owner, Owner, 575, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Owner, Unit, 0 + (this.BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + (totalDmgPercent ?? 0), 0.6, 1, false, false, Owner);
            SpellBuffRemove(Unit, "Taunt", Owner, 0);
            SpellBuffRemove(Unit, "GalioIdolOfDurandTaunt", Owner, 0);
            SpellEffectCreate(TargetVFX, default, "galio_builingStatue_unit_impact_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, false, default, default, false, false, default, default);
        });
        SpellEffectRemove(this.TauntVFX);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID);
        SetStatus(Owner, default, SetCanCast);
        SpellEffectRemove(this.CataclysmSound);
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (this.NewCd ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Target, Owner);
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        OwnerPos = GetUnitPosition(Attacker);
        SpellEffectCreate(asdf, default, "JarvanWallCrumble.troy", default, TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Nothing, "root", OwnerPos, Owner, default, default, true, false, false, false, false, default, default);
        SetStatus(Attacker, default, SetInvulnerable);
        ApplyDamage(Attacker, Attacker, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (this.NewCd ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Target, Owner);
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        SpellBuffClear(Owner, "JarvanIVCataclysm");
        If(this.TotalArmorAmount, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
            SpellEffectCreate(varrr, default, "DeathsCaress_nova.prt", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            ForEachUnitInTargetArea(Owner, Owner, 525, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Owner, Unit, 0 + (this.FinalArmorAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            });
        });
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "DeathsCaressFull");
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(8, MO_MULTIPLY, 0 + (Multiplier ?? 0));
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SetPARCostInc(Owner, 1, SpellSlots, 0, PAR_MANA);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 0, false, false, Attacker);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.hit);
        BonusDamage = Math(0 + (this.BonusDamage ?? 0), MO_MULTIPLY, -1);
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (BonusDamage ?? 0));
        RemovePerceptionBubble(this.BubbleID);
        RemoveShield(Owner, 10000, true, true);
        RemoveOverrideAutoAttack(Owner, false);
        SetStatus(Owner, default, SetInvulnerable);
        SpellEffectCreate(part22, default, "bowmaster_frostHawk_terminate.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(part23, default, "bowmaster_frostHawk_terminate_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, false, default, default, default, default, default, default);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, default);
        ClearOverrideAnimation("Run", Owner);
        ForEachUnitInTargetArea(Owner, Owner, 260, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            Count = GetBuffCountFromAll(Unit, "SlashBeenHit");
            If(Count, default, CO_LESS_THAN, default, 1, () => {
                IsStealthed = GetStatus(Unit, GetStealthed);
                If(IsStealthed, default, CO_EQUAL, default, false, () => {
                    SpellBuffAdd(Owner, Unit, "SlashBeenHit", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Unit);
                    SpellEffectCreate(particle, default, "BloodSlash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, false, default, default, default);
                    SpellBuffAdd(Owner, Unit, "JarvanIVDragonStrikePH2", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
                });
                Else(() => {
                    If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                        SpellBuffAdd(Owner, Unit, "SlashBeenHit", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                        BreakSpellShields(Unit);
                        SpellEffectCreate(particle, default, "BloodSlash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, false, default, default, default);
                        SpellBuffAdd(Owner, Unit, "JarvanIVDragonStrikePH2", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
                    });
                    Else(() => {
                        CanSee = CanSeeTarget(Owner, Unit);
                        If(CanSee, default, CO_EQUAL, default, true, () => {
                            SpellBuffAdd(Owner, Unit, "SlashBeenHit", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                            BreakSpellShields(Unit);
                            SpellEffectCreate(particle, default, "BloodSlash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, false, default, default, default);
                            SpellBuffAdd(Owner, Unit, "JarvanIVDragonStrikePH2", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        SpellEffectRemove(this.DragonStrikeSound);
        SetStatus(Owner, default, SetNoRender);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, default);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.HitParticle);
        SpellEffectRemove(this.asdf);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        SpellBuffAdd(Owner, Owner, "OlafAxeExpirationTimer2", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        Level = this.Level;
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(a, default, "JarvanDemacianStandard_hit.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(a, default, "JarvanDemacianStandard_hit.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        ForEachUnitInTargetArea(Attacker, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, true, true, Attacker);
        });
        OwnerPos = GetUnitPosition(Owner);
        Other3 = SpawnMinion("Beacon", "JarvanIVStandard", "idle.lua", OwnerPos, TeamID ?? TEAM_UNKNOWN, true, true, false, false, true, true, 0, false, false, Attacker, default);
        NextBuffVars.ArmorMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Other3, "JarvanIVDemacianStandard", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellBuffAdd(Owner, Owner, "NoRenderExpirationBuff", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectRemove(this.Particle1);
        If(this.Shield, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.Shield ?? 0), true, true);
        });
        CastPos = this.CastPos;
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        TeleportToPosition(Owner, CastPos);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectCreate(Particle, default, "swain_metamorph.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        BuffCheck = 0;
        IfHasBuff(Owner, Owner, "SwainBeamSelf", () => {
            SpellBuffAdd(Owner, Owner, "SwainBeamTransition", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            BuffCheck = Math(0 + (BuffCheck ?? 0), MO_ADD, 1);
        });
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(10, MO_MULTIPLY, 0 + (Multiplier ?? 0));
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        If(BuffCheck, default, CO_EQUAL, default, 0, () => {
            PopAllCharacterData(Owner);
        });
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        baseCooldown = this.VALUE_BY_LEVEL;
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (baseCooldown ?? 0), MO_MULTIPLY, 0 + (Multiplier ?? 0));
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectCreate(this.a, default, "swain_disintegrationBeam_cas_end.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        SpellEffectRemove(this.CParticle);
        SpellEffectRemove(this.BParticle);
        SpellEffectRemove(this.DParticle);
        SetStatus(Owner, default, SetNoRender);
        SpellBuffAdd(Owner, Owner, "SwainBeamExpirationTimer", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        IfNotHasBuff(Attacker, Attacker, "SwainMetamorphism", () => {
            PopAllCharacterData(Attacker);
        });
        IfHasBuff(Attacker, Attacker, "SwainBeamTransition", () => {
            SpellBuffRemove(Attacker, "SwainBeamTransition", Attacker, 0);
        });
        SpellBuffRemove(Attacker, "SwainBeamSelf", Attacker, 0);
        SpellEffectCreate(default, default, "nassus_godofDeath_transform.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectRemove(this.AuraParticle);
        PopCharacterData(Owner, this.CasterID);
        SpellEffectCreate(this.a, default, "swain_disintegrationBeam_cas_end.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        SpellEffectRemove(this.CParticle);
        SpellEffectRemove(this.BParticle);
        SpellEffectRemove(this.DParticle);
        SetStatus(Owner, default, SetNoRender);
        SpellBuffAdd(Owner, Owner, "SwainBeamExpirationTimer", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SetStatus(Owner, default, SetStunned);
        PauseAnimation(Owner, false);
        SetStatus(Owner, default, SetNoRender);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        OwnerTeamID = GetTeamID(default);
        SpellEffectCreate(SoundID, default, "viktor_gravitonfield_deactivate_sound.troy", default, OwnerTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, default, default, this.TargetPos, default, default, this.TargetPos, true, false, false, false, false, default, default);
        baseCooldown = this.VALUE_BY_LEVEL;
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (baseCooldown ?? 0), MO_MULTIPLY, 0 + (Multiplier ?? 0));
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        IfNotHasBuff(Owner, Owner, "SwainMetamorphism", () => {
            PopAllCharacterData(Owner);
        });
        IfHasBuff(Owner, Owner, "SwainBeamTransition", () => {
            SpellBuffRemove(Owner, "SwainBeamTransition", Owner, 0);
        });
        SpellBuffRemove(Owner, "SwainBeamSelf", Owner, 0);
        IfNotHasBuff(Attacker, Attacker, "SwainMetamorphism", () => {
            PopAllCharacterData(Attacker);
        });
        IfHasBuff(Attacker, Attacker, "SwainBeamTransition", () => {
            SpellBuffRemove(Attacker, "SwainBeamTransition", Attacker, 0);
        });
        SpellBuffRemove(Attacker, "SwainBeamSelf", Attacker, 0);
        RemovePerceptionBubble(this.BubbleID);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        TeamOfOwner = GetTeamID(default);
        SpellEffectRemove(this.GateParticle2);
        SpellEffectRemove(this.GateParticle);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        DestroyMissileForTarget(Owner);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        If(this.IsDisabled, default, CO_EQUAL, default, 0, () => {
            If(Expired, default, CO_EQUAL, default, true, () => {
                TargetPos = this.TargetPos;
                TeleportToPosition(Owner, TargetPos);
            });
        });
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        SetStatus(Owner, default, SetTargetable);
        SpellEffectRemove(this.TeleportParticle);
        SpellBuffAdd(Owner, Owner, "GateFix", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "Destiny");
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SpellCooldown = this.VALUE_BY_LEVEL;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        SpellEffectRemove(this.GateParticle);
        SpellEffectRemove(this.GateParticle2);
        SpellBuffRemove(Owner, "PickaCard", Owner, default);
        SealSpellSlot(2, SpellSlots, Owner, true, default);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "PickACard");
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        BaseCooldown = 6;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (BaseCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        If(this.removeParticle, default, CO_NOT_EQUAL, default, 2, () => {
            SpellEffectRemove(this.EffectID);
        });
        SpellBuffRemove(Owner, "GoldCardPreAttack", Owner, 0);
        SpellBuffRemove(Owner, "RedCardPreAttack", Owner, 0);
        SpellBuffRemove(Owner, "BlueCardPreAttack", Owner, 0);
        SetAutoAcquireTargets(Owner, true);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.EffectID);
        BaseCooldown = 4;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (BaseCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SpellEffectRemove(this.ChargedBladeEffect);
        this.AttackSpeedBoost = 0;
        SpellEffectRemove(this.SwainTormentEffect);
        SpellEffectRemove(this.SwainDoTEffect);
        SpellEffectRemove(this.SwainDoTEffect2);
        SpellEffectRemove(this.EffectID);
        BaseCooldown = 4;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (BaseCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, false);
        SpellEffectRemove(this.Boom);
        SpellEffectRemove(this.Boom2);
        SpellEffectRemove(this.c);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.RootParticleEffect2);
        SpellEffectRemove(this.RootParticleEffect);
        NextBuffVars.InitialDamage = this.InitialDamage;
        NextBuffVars.Damage = this.Damage;
        NextBuffVars.ArmorReduction = this.ArmorReduction;
        NextBuffVars.TargetPos = this.TargetPos;
        SpellBuffAdd(Attacker, Owner, "SpiritFireAoE", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectRemove(this.GroundParticleEffect);
        SpellEffectRemove(this.GroundParticleEffect2);
        SpellEffectRemove(this.a);
        ForEachUnitInTargetArea(Owner, Owner, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (this.GraspDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, "SwainShadowGraspRoot", 1, 1, 0 + (this.RootDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, true, false, default);
        });
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.Particle);
        RemoveOverrideAutoAttack(Owner, false);
        SpellBuffRemoveStacks(Owner, Owner, "TwitchSprayAndPray", 0);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.slow);
        RemoveOverrideAutoAttack(Owner, true);
        SpellEffectRemove(this.a);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        RemoveOverrideAutoAttack(Owner, false);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetStealthed);
        BaseCooldown = 11;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (BaseCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        this.ID = PushCharacterFade(Owner, 1, default, this.ID);
        SetPARCostInc(Owner, 0, SpellSlots, 0, PAR_MANA);
        CurTime = GetTime();
        TimeSinceLast = Math(0 + (CurTime ?? 0), MO_SUBTRACT, 0 + (this.InitialTime ?? 0));
        TimeSinceLast = Math(0 + (TimeSinceLast ?? 0), MO_MULTIPLY, 2);
        TimeSinceLast = Math(0 + (TimeSinceLast ?? 0), MO_MIN, 10);
        NextBuffVars.AttackSpeedMod = this.AttackSpeedMod;
        SpellBuffAdd(Owner, Owner, "HideInShadowsBuff", 1, 1, 0.5 + (TimeSinceLast ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.WillRemove = false;
        NextBuffVars.AttackSpeedMod = this.AttackSpeedMod;
        SpellBuffAdd(Owner, Owner, "HideInShadows", 1, 1, 0 + (this.StealthDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, default, default);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetStealthed);
        SpellEffectRemove(this.DeathLotus);
        IncPermanentStat(IncPermanentPercentHPRegenMod, Owner, 0.5);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.c);
        MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        DamageToDeal = Math(0 + (MaxHealth ?? 0), MO_MULTIPLY, 0.02);
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
            DamageToDeal = Math(0 + (DamageToDeal ?? 0), MO_MIN, 80);
        });
        ApplyDamage(Attacker, Owner, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.RootParticleEffect2);
        SpellEffectRemove(this.RootParticleEffect);
        SpellEffectRemove(this.c);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        SetDodgePiercing(Owner, false);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        DamageMods = this.VALUE_BY_LEVEL;
        AttackDamage = GetTotalAttackDamage(Attacker);
        SuperDamage = Math(0 + (AttackDamage ?? 0), MO_MULTIPLY, 0 + (DamageMods ?? 0));
        ApplyDamage(Attacker, Target, 0 + (SuperDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "KennenMarkofStorm", 5, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.GroundParticleEffect);
        SpellEffectRemove(this.GroundParticleEffect2);
        TeamID = GetTeamID(default);
        OwnerPos = GetUnitPosition(Owner);
        BrandSkinID = GetSkinID(Attacker);
        If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
            SpellEffectCreate(b, default, "BrandPOF_Frost_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(b, default, "BrandPOF_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        });
        ForEachUnitInTargetArea(Owner, Owner, 260, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            IfHasBuff(Unit, Attacker, "BrandAblaze", () => {
                ApplyDamage(Attacker, Unit, 0 + (this.AblazeBonusDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
            });
            Else(() => {
                ApplyDamage(Attacker, Unit, 0 + (this.FissureDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
            });
            SpellBuffAdd(Attacker, Unit, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            If(BrandSkinID, default, CO_EQUAL, default, 3, () => {
                SpellEffectCreate(d, default, "BrandCritAttack_Frost_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(d, default, "BrandCritAttack_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            });
        });
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.asdf1);
        SpellEffectRemove(this.GlobeOne);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "KennenLightningRush");
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SpellCD = this.VALUE_BY_LEVEL;
        CDMod = GetStat(GetPercentCooldownMod, Owner);
        SuperCDMod = Math(1, MO_ADD, 0 + (CDMod ?? 0));
        RealCD = Math(0 + (SpellCD ?? 0), MO_MULTIPLY, 0 + (SuperCDMod ?? 0));
        SpellEffectRemove(this.ar);
        SetStatus(Owner, default, SetGhosted);
        SpellBuffRemove(Owner, "KennenLightningRush", Owner, default);
        SetStatus(Owner, default, SetForceRenderParticles);
        SpellEffectCreate(Supervar, default, "kennen_lr_off.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SetStatus(Owner, default, SetCanAttack);
        PopCharacterFade(Owner, this.LitRush);
        IncStat(IncFlatAttackRangeMod, Owner, 575);
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (RealCD ?? 0));
        If(this.DoOnce, default, CO_EQUAL, default, true, () => {
            SpellEffectRemove(this.GlobeTwo);
        });
        If(this.VladSkinID, default, CO_EQUAL, default, 5, () => {
            SpellEffectCreate(varrr, default, "VladHemoplague_BloodKing_proc.troy", default, TEAM_NEUTRAL, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(varrr, default, "VladHemoplague_proc.troy", default, TEAM_NEUTRAL, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        });
        If(Expired, default, CO_EQUAL, default, true, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.DamagePerLevel ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
        });
        SpellEffectRemove(this.varrr1);
        SpellEffectRemove(this.KISpeed);
        this.ID = PushCharacterFade(Owner, 1, default, this.ID);
        SpellEffectRemove(this.KILHand);
        SpellEffectRemove(this.KIRHand);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetSilenced);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        this.ID = PushCharacterFade(Owner, 1, default, this.ID);
        SpellEffectRemove(this.Particle);
        ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyDamage(Attacker, Unit, 0, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
        });
        SpellEffectCreate(this.Particle1, default, "Vlad_Bloodking_Blood_Skin.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectRemove(this.temp);
        If(Attacker, default, CO_EQUAL, Owner, default, () => {
            SpellBuffAdd(Attacker, Attacker, "RaiseMorale", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        SpellEffectRemove(this.Temp);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Attacker);
        SpellBuffClear(Owner, "RivenCounterReady");
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "RivenCounter");
        SetSlotSpellCooldownTimeVer2(10, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetStatus(Owner, default, SetStealthed);
        SetStatus(Owner, default, SetGhosted);
        PushCharacterFade(Owner, 1, default, default);
        SpellBuffAdd(Owner, Owner, "AkaliHoldStealth", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        IfHasBuff(Owner, Owner, "Recall", () => {
            SpellBuffRemoveCurrent(Owner);
        });
        SpellEffectRemove(this.AkaliStealth);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.Temp);
        CDReduction = GetStat(GetPercentCooldownMod, Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseCD = this.VALUE_BY_LEVEL;
        LowerCD = Math(0 + (BaseCD ?? 0), MO_MULTIPLY, 0 + (CDReduction ?? 0));
        NewCD = Math(0 + (BaseCD ?? 0), MO_ADD, 0 + (LowerCD ?? 0));
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "RivenFengShuiEngine");
        SetSlotSpellCooldownTimeVer2(0 + (NewCD ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ClearOverrideAnimation("Attack1", Owner);
        ClearOverrideAnimation("Attack2", Owner);
        ClearOverrideAnimation("Attack3", Owner);
        ClearOverrideAnimation("Crit", Owner);
        ClearOverrideAnimation("Idle1", Owner);
        ClearOverrideAnimation("Run", Owner);
        ClearOverrideAnimation("Spell1a", Owner);
        ClearOverrideAnimation("Spell1b", Owner);
        ClearOverrideAnimation("Spell1c", Owner);
        ClearOverrideAnimation("Spell2", Owner);
        ClearOverrideAnimation("Spell3", Owner);
        AttackDamage = GetTotalAttackDamage(Owner);
        BaseAD = GetStat(GetBaseAttackDamage, Owner);
        AttackDamage = Math(0 + (AttackDamage ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
        QAttackDamage = Math(0.7, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
        SetSpellToolTipVar(0 + (QAttackDamage ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        RAttackDamage = Math(0.6, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
        SetSpellToolTipVar(0 + (RAttackDamage ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        RAttackDamage = Math(1.8, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
        SetSpellToolTipVar(0 + (RAttackDamage ?? 0), 2, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        EAttackDamage = Math(0 + (AttackDamage ?? 0), MO_MULTIPLY, 1);
        SetSpellToolTipVar(0 + (EAttackDamage ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        WAttackDamage = Math(1, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
        SetSpellToolTipVar(0 + (WAttackDamage ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SpellEffectRemove(this.Temp);
        SpellEffectRemove(this.Temp2);
        SpellEffectRemove(this.Temp3);
        SpellEffectRemove(this.Temp4);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellBuffClear(Owner, "RivenWindSlashReady");
        ResetVoiceOverride(Owner);
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        SetStatus(Owner, default, SetGhosted);
        NextBuffVars.WillRemove = false;
        IfNotHasBuff(Owner, Owner, "Recall", () => {
            SpellBuffAdd(Owner, Owner, "AkaliSBStealth", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
        });
        If(this.WillFade, default, CO_EQUAL, default, false, () => {
            SpellEffectRemove(this.abc);
        });
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        });
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        If(teamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            Attacker = GetChampionBySkinName("Gangplank", TEAM_ORDER);
            SpellEffectCreate(Boom, default, "pirate_cannonBarrage_tar.troy", default, TEAM_ORDER, 225, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, false, default, default);
        });
        Else(() => {
            Attacker = GetChampionBySkinName("Gangplank", TEAM_CHAOS);
            SpellEffectCreate(Boom, default, "pirate_cannonBarrage_tar.troy", default, TEAM_CHAOS, 225, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, false, default, default);
        });
        ForEachUnitInTargetArea(Attacker, Owner, 265, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (this.DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
        });
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0.8, 1, false, false, Attacker);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        RemovePerceptionBubble(this.BubbleID);
        SpellEffectRemove(this.Particle);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, default, default, default, default);
        If(this.DamageBlock, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.DamageBlock ?? 0), true, true);
        });
        SetStatus(Owner, default, SetGhosted);
        IncStat(IncAcquisitionRangeMod, Owner, 0);
        SpellBuffClear(Owner, "UnlockAnimation");
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        baseCooldown = this.VALUE_BY_LEVEL;
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (baseCooldown ?? 0), MO_MULTIPLY, 0 + (Multiplier ?? 0));
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Area, Owner);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.AmbientParticle);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_RAW, 1, 1, 1, false, false, default);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "RivenTriCleave");
        IfHasBuff(Owner, Owner, "RivenTriCleaveBuffered", () => {
            SpellBuffClear(Owner, "RivenTriCleaveBuffered");
            IfHasBuff(Owner, Owner, "RivenTriCleave", () => {
                SetSlotSpellCooldownTimeVer2(0.25, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "RivenTriCleaveBuffer");
                SpellBuffAdd(Owner, Owner, "RivenTriCleaveBufferB", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        SpellBuffAdd(Owner, Owner, "RivenTriCleaveUnlock", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RivenTriCleaveGhost", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForNClosestUnitsInTargetArea(Owner, this.TargetPos, 175, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
            this.TargetPos = GetUnitPosition(Unit);
        });
        If(this.ChampionLock, default, CO_EQUAL, default, true, () => {
            ForNClosestUnitsInTargetArea(Owner, Owner, 800, "AffectEnemies AffectHeroes ", 1, true, "RivenTriCleaveBufferLock", (Unit) => {
                this.TargetPos = GetUnitPosition(Unit);
            });
        });
        SpellCast(Owner, Nothing, this.TargetPos, this.TargetPos, false, 4, ExtraSlots, 0 + (this.Level ?? 0), true, false, false, false, false, default);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "RivenTriCleave");
        IfHasBuff(Owner, Owner, "RivenTriCleaveBuffered", () => {
            SpellBuffClear(Owner, "RivenTriCleaveBuffered");
        });
        SpellEffectRemove(this.ParticleID);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        RemoveOverrideAutoAttack(Owner, true);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, false);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            IssueOrder(Attacker, AI_ATTACKTO, default, Owner);
        });
        SpellEffectRemove(this.Particle);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "RivenTriCleave");
        Duration = GetBuffRemainingDuration(Owner, "RivenTriCleaveCooldown");
        Duration = Math(0 + (Duration ?? 0), MO_DIVIDE, 1);
        SetSlotSpellCooldownTimeVer2(0 + (Duration ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        If(this.BlitzcrankID, default, CO_EQUAL, default, 4, () => {
            SpellEffectRemove(this.One);
            SpellEffectRemove(this.Two);
            SpellEffectRemove(this.Three);
            SpellEffectRemove(this.Four);
            SpellEffectRemove(this.Five);
            SpellEffectRemove(this.Six);
            SpellEffectRemove(this.Seven);
            SpellEffectRemove(this.Eight);
            SpellEffectRemove(this.WheelOne);
            SpellEffectRemove(this.WheelTwo);
            SpellEffectRemove(this.ClassicOverdrive);
        });
        Else(() => {
            SpellEffectRemove(this.ClassicOverdrive);
        });
        SpellBuffClear(Owner, "RivenTriCleaveCooldown");
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.asdf1);
        If(this.ManaShield, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.ManaShield ?? 0), true, true);
        });
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Target, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SetTargetingType(0, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Location, Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(this.MissileAlive, default, CO_EQUAL, default, 1, () => {
            MissileEndPosition = GetMissilePosFromID(this.FlashMissileId ?? 0);
            DestroyMissile(this.FlashMissileId);
            TeamID = GetTeamID(default);
            If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellEffectCreate(a, default, "cryo_FlashFrost_tar.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, MissileEndPosition, Target, default, default, true, default, default, default, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "cryo_FlashFrost_tar.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, MissileEndPosition, Target, default, default, true, default, default, default, default, default, default);
            });
            ForEachUnitInTargetArea(Owner, MissileEndPosition, 210, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Attacker);
                ApplyStun(Attacker, Unit, 0.75);
                NextBuffVars.MovementSpeedMod = -0.2;
                NextBuffVars.AttackSpeedMod = 0;
                SpellBuffAdd(Attacker, Unit, "Chilled", 1, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
            this.MissileAlive = 0;
        });
        CooldownPerLevel = this.VALUE_BY_LEVEL;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (CooldownPerLevel ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        RemoveOverrideAutoAttack(Owner, true);
        ClearOverrideAnimation("Run", Owner);
        ClearOverrideAnimation("Idle1", Owner);
        SpellEffectRemove(this.bearparticle);
        UnlockAnimation(Owner, true);
        StartTrackingCollisions(Owner, false);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.ShinyParticle);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        RagePercent = GetPAROrHealth(Owner, GetPARPercent, PAR_SHIELD);
        ForEachUnitInTargetArea(Owner, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", false, (Unit) => {
            ShouldHit = true;
            Visible = CanSeeTarget(Owner, Unit);
            If(Visible, default, CO_EQUAL, default, false, () => {
                If(Unit, default, CO_IS_NOT_HERO, default, default, () => {
                    ShouldHit = false;
                });
            });
            this.HitUnit = true;
            BaseAttack = GetStat(GetBaseAttackDamage, Owner);
            HitDamage = Math(0, MO_MULTIPLY, 0 + (BaseAttack ?? 0));
            HitDamage = Math(0 + (HitDamage ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
            SpellBuffAdd(Owner, Unit, "RenektonTargetSliced", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            IfHasBuff(Owner, Owner, "RenektonSliceAndDiceDelay", () => {
                
            });
            ElseIf(this.DiceVersion, default, CO_EQUAL, default, true, () => {
                
            });
            ElseIf(ShouldHit, default, CO_EQUAL, default, false, () => {
                
            });
            Else(() => {
                SpellBuffAdd(Owner, Owner, "RenektonSliceAndDiceDelay", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SetSlotSpellCooldownTimeVer2(0, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            });
            If(ShouldHit, default, CO_EQUAL, default, true, () => {
                OwnerVar = GetTeamID(default);
                BreakSpellShields(Unit);
                SpellBuffAdd(Owner, Unit, "RenektonBloodSplatterTarget", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                If(this.RageBonus, default, CO_EQUAL, default, true, () => {
                    NextBuffVars.ArmorShred = this.ArmorShred;
                    SpellBuffAdd(Owner, Unit, "RenektonSliceAndDiceDebuff", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                    ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1.5, 0, 0.9, false, false, Owner);
                });
                Else(() => {
                    ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0.9, false, false, Owner);
                });
            });
        });
        ForEachUnitInTargetArea(Owner, Owner, 1250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", true, (Unit) => {
            SpellBuffClear(Unit, "RenektonTargetSliced");
        });
        If(this.DiceVersion, default, CO_EQUAL, default, true, () => {
            SpellBuffClear(Owner, "RenektonSliceAndDiceDelay");
        });
        UnlockAnimation(Owner, true);
        Duration = GetBuffRemainingDuration(Owner, "RenektonSliceAndDiceTimer");
        SpellBuffClear(Owner, "RenektonSliceAndDiceTimer");
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "RenektonSliceAndDice");
        SetSlotSpellCooldownTimeVer2(0 + (Duration ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.c);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        UnlockAnimation(Owner, true);
        SetStatus(Owner, default, SetCanCast);
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.SelfParticle);
        SpellEffectRemove(this.SelfParticle2);
        SpellEffectRemove(this.SelfParticle3);
        SpellEffectRemove(this.SelfParticle4);
        SpellEffectRemove(this.SelfParticle5);
        SpellEffectRemove(this.SelfParticle6);
        SpellEffectRemove(this.SelfParticle7);
        SpellEffectRemove(this.SelfParticle8);
        SpellEffectRemove(this.SelfParticle9);
        SpellEffectRemove(this.SelfParticle10);
        SpellEffectRemove(this.SelfParticle11);
        SpellEffectRemove(this.SelfParticle12);
        SpellBuffAdd(Owner, Owner, "RenektonUppercutBlow", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        UnlockAnimation(Owner, true);
        StartTrackingCollisions(Owner, false);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.ShinyParticle);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        RagePercent = GetPAROrHealth(Owner, GetPARPercent, PAR_SHIELD);
        ForEachUnitInTargetArea(Owner, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", false, (Unit) => {
            ShouldHit = true;
            Visible = CanSeeTarget(Owner, Unit);
            If(Visible, default, CO_EQUAL, default, false, () => {
                If(Unit, default, CO_IS_NOT_HERO, default, default, () => {
                    ShouldHit = false;
                });
            });
            this.HitUnit = true;
            BaseAttack = GetStat(GetBaseAttackDamage, Owner);
            HitDamage = Math(0, MO_MULTIPLY, 0 + (BaseAttack ?? 0));
            HitDamage = Math(0 + (HitDamage ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
            SpellBuffAdd(Owner, Unit, "RenektonTargetSliced", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            IfHasBuff(Owner, Owner, "RenektonSliceAndDiceDelay", () => {
                
            });
            ElseIf(this.DiceVersion, default, CO_EQUAL, default, true, () => {
                
            });
            ElseIf(ShouldHit, default, CO_EQUAL, default, false, () => {
                
            });
            Else(() => {
                SpellBuffAdd(Owner, Owner, "RenektonSliceAndDiceDelay", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SetSlotSpellCooldownTimeVer2(0, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            });
            If(ShouldHit, default, CO_EQUAL, default, true, () => {
                OwnerVar = GetTeamID(default);
                BreakSpellShields(Unit);
                SpellBuffAdd(Owner, Unit, "RenektonBloodSplatterTarget", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                If(this.RageBonus, default, CO_EQUAL, default, true, () => {
                    NextBuffVars.ArmorShred = this.ArmorShred;
                    SpellBuffAdd(Owner, Unit, "RenektonSliceAndDiceDebuff", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                    ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1.5, 0, 0.9, false, false, Owner);
                });
                Else(() => {
                    ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0.9, false, false, Owner);
                });
            });
        });
        ForEachUnitInTargetArea(Owner, Owner, 1250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", true, (Unit) => {
            SpellBuffClear(Unit, "RenektonTargetSliced");
        });
        If(this.DiceVersion, default, CO_EQUAL, default, true, () => {
            SpellBuffClear(Owner, "RenektonSliceAndDiceDelay");
        });
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            NextBuffVars.CasterID = this.CasterID;
            SpellBuffAdd(Owner, Owner, "ShyvanaTransformDeath", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            PopCharacterData(Owner, this.CasterID);
        });
        IncPAR(Owner, -100);
        IfHasBuff(Owner, Owner, "ShyvanaImmolateDragon", () => {
            RemainingDuration = GetBuffRemainingDuration(Owner, "ShyvanaImmolateDragon");
            SpellBuffRemove(Owner, "ShyvanaImmolateDragon", Owner, 0);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.MovementSpeed = this.VALUE_BY_LEVEL;
            NextBuffVars.DamagePerTick = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Owner, "ShyvanaImmolationAura", 1, 1, 0 + (RemainingDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "ShyvanaDoubleAttackDragon", () => {
            RemainingDuration = GetBuffRemainingDuration(Owner, "ShyvanaDoubleAttackDragon");
            SpellBuffRemove(Owner, "ShyvanaDoubleAttackDragon", Owner, 0);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Owner, "ShyvanaDoubleAttack", 1, 1, 0 + (RemainingDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "ShyvanaDoubleAttack");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Cooldown2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "ShyvanaImmolationAura");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown2 ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Cooldown3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "ShyvanaFireball");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown3 ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "shyvana_ult_transform_end.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "ShyvanaDragonScales", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PopCharacterData(Owner, this.CasterID);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.c);
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            
        });
        Else(() => {
            SpellBuffAdd(Attacker, Owner, "RenektonUppercut", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                SpellEffectCreate(default, default, "globalhit_yellow_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            });
        });
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectCreate(default, default, "RenektonDominus_transform", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        UnlockAnimation(Owner, true);
        SetStatus(Owner, default, SetCanAttack);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        OwnerVar = GetTeamID(default);
        If(this.Swung, default, CO_EQUAL, default, false, () => {
            SpellEffectCreate(Temp, default, "Renekton_RuthlessPredator_obd-sound.troy", default, OwnerVar ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        SpellEffectRemove(this.a);
        CharVars.HitCount = 0;
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            
        });
        Else(() => {
            TotalAttackDamage = GetStat(GetBaseAttackDamage, Attacker);
            ApplyDamage(Attacker, Owner, 0 + (TotalAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0.33, 0, default, false, false, default);
            ApplyDamage(Attacker, Owner, 0 + (TotalAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0.33, 0, default, false, false, default);
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                SpellEffectCreate(default, default, "globalhit_yellow_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            });
        });
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.a);
        CharVars.HitCount = 0;
        NextBuffVars.WillRemove = false;
        NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
        NextBuffVars.TeamID = this.TeamID;
        SpellBuffAdd(Owner, Owner, "ShadowWalk", 1, 1, 0 + (this.StealthDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.phoenix);
        RemoveOverrideAutoAttack(Owner, true);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        RemoveOverrideAutoAttack(Owner, true);
        SetDodgePiercing(Owner, false);
        Owner = SetBuffCasterUnit();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SetStatus(Owner, default, SetStealthed);
        BaseCooldown = this.VALUE_BY_LEVEL;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (BaseCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        this.ID = PushCharacterFade(Owner, 1, default, this.ID);
        SetPARCostInc(Owner, 1, SpellSlots, 0, PAR_MANA);
        SpellEffectRemove(this.LHand);
        SpellEffectRemove(this.RHand);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        RemoveOverrideAutoAttack(Owner, true);
        SetDodgePiercing(Owner, false);
        SpellBuffAdd(Owner, Owner, "ShadowWalkSpeed", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, default, default, default);
        TeamID = GetTeamID(default);
        SpellBuffAdd(Owner, Owner, "RebirthCooldown", 1, 1, 240, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            SpellEffectCreate(Particle, default, "Rebirth_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        SpellEffectRemove(this.EggTimer);
        PopAllCharacterData(Owner);
        SpellBuffAdd(Owner, Owner, "RebirthReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellEffectRemove(this.turtle);
        SpellEffectRemove(this.Turtleparticle);
        RemoveOverrideAutoAttack(Owner, true);
        SpellEffectRemove(this.tiger);
        IfNotHasBuff(Owner, Owner, "UdyrTigerPunch", () => {
            SpellBuffRemove(Owner, "UdyrTigerShred", Owner, 0);
        });
        SpellEffectRemove(this.TurtleShield);
        SpellEffectRemove(this.Turtleparticle);
        If(this.ShieldAmount, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.ShieldAmount ?? 0), true, true);
        });
        SpellEffectRemove(this.lhand);
        SpellEffectRemove(this.rhand);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        If(this.ShieldHealth, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.ShieldHealth ?? 0), true, false);
        });
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        IfNotHasBuff(Owner, Owner, "UdyrTigerStance", () => {
            SpellBuffRemove(Owner, "UdyrTigerShred", Owner, default);
        });
        SpellEffectCreate(a, default, "AlphaStrike_Slash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            ApplyDamage(Attacker, Owner, 0 + (this.BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, default, false, false, default);
        });
        Else(() => {
            If(this.ChanceToKill, default, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                BonusDamage = Math(0 + (this.BaseDamage ?? 0), MO_ADD, 400);
                ApplyDamage(Attacker, Owner, 0 + (BonusDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, default, false, false, default);
            });
            Else(() => {
                ApplyDamage(Attacker, Owner, 0 + (this.BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, default, false, false, default);
            });
        });
        If(this.AlphaStrikeLaunched, default, CO_EQUAL, default, true, () => {
            SetStatus(Owner, default, SetCanAttack);
            SetStatus(Owner, default, SetCanMove);
            SetStatus(Owner, default, SetGhosted);
            SetStatus(Owner, default, SetNoRender);
            SetStatus(Owner, default, SetTargetable);
            SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        });
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            SpellCast(Owner, Owner, Owner, default, false, 1, ExtraSlots, 1, true, true, false, false, false, default);
        });
        SetStatus(Owner, default, SetCanMove);
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            
        });
        Else(() => {
            TotalAttackDamage = GetStat(GetBaseAttackDamage, Attacker);
            ApplyDamage(Attacker, Owner, 0 + (TotalAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, default);
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                SpellEffectCreate(default, default, "globalhit_yellow_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            });
        });
        SpellEffectRemove(this.glowblade);
        SpellEffectRemove(this.ParticleID);
        If(this.Broken, default, CO_EQUAL, default, false, () => {
            DeactivateTime = GetGameTime();
            TimeElapsed = Math(0 + (DeactivateTime ?? 0), MO_SUBTRACT, 0 + (this.ActivateTime ?? 0));
            If(TimeElapsed, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
                ApplyDamage(Attacker, Owner, 0 + (this.BreakDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.8, 1, false, false, Attacker);
                ApplyStun(Attacker, Owner, 0 + (this.BreakStun ?? 0));
            });
        });
        SpellBuffAdd(Owner, Owner, "MasterYiWujuDeactivated", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        TotalAttackDamage = GetStat(GetBaseAttackDamage, Attacker);
        ApplyDamage(Attacker, Owner, 100, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, default, default, default, default);
        SpellEffectCreate(default, default, "globalhit_yellow_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Owner);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        OwnerCenter = GetUnitPosition(Owner);
        IfHasBuff(Owner, Owner, "Takedown", () => {
            SpellBuffRemove(Owner, "Takedown", Owner, 0);
        });
        PopCharacterData(Owner, this.CougarID);
        SpellEffectCreate(Particle, default, "nidalee_transform.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 4);
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        CD0 = Math(0 + (this.CD0 ?? 0), MO_SUBTRACT, 0 + (LifeTime ?? 0));
        CD1 = Math(0 + (this.CD1 ?? 0), MO_SUBTRACT, 0 + (LifeTime ?? 0));
        CD2 = Math(0 + (this.CD2 ?? 0), MO_SUBTRACT, 0 + (LifeTime ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (CD0 ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetSlotSpellCooldownTimeVer2(0 + (CD1 ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetSlotSpellCooldownTimeVer2(0 + (CD2 ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        OwnerCenter = GetUnitPosition(Owner);
        IfHasBuff(Owner, Owner, "Takedown", () => {
            SpellBuffRemove(Owner, "Takedown", Owner, 0);
        });
        PopCharacterData(Owner, this.CougarID);
        SpellEffectCreate(Particle, default, "nidalee_transform.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 4);
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        CD0 = Math(0 + (this.CD0 ?? 0), MO_SUBTRACT, 0 + (LifeTime ?? 0));
        CD1 = Math(0 + (this.CD1 ?? 0), MO_SUBTRACT, 0 + (LifeTime ?? 0));
        CD2 = Math(0 + (this.CD2 ?? 0), MO_SUBTRACT, 0 + (LifeTime ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (CD0 ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetSlotSpellCooldownTimeVer2(0 + (CD1 ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetSlotSpellCooldownTimeVer2(0 + (CD2 ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetStatus(Owner, default, SetStunned);
        UnlockAnimation(Owner, false);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SetDodgePiercing(Owner, false);
        RemoveOverrideAutoAttack(Owner, true);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellBuffClear(Attacker, "OrianaGhost");
        SpellEffectRemove(this.OrianaPointer);
        SpellBuffClear(Owner, "OrianaGhostMinion");
        Caster = this.Caster;
        SkinName = GetUnitSkinName(Owner);
        If(SkinName, default, CO_NOT_EQUAL, default, "OriannaBall", () => {
            If(Caster, default, CO_NOT_EQUAL, Owner, default, () => {
                SpellEffectRemove(this.Temp);
            });
        });
        Else(() => {
            SpellBuffClear(Attacker, "OriannaBallTracker");
        });
        If(Caster, default, CO_NOT_EQUAL, Owner, default, () => {
            SpellEffectRemove(this.Temp);
        });
        DropBall = false;
        If(Expired, default, CO_EQUAL, default, true, () => {
            DropBall = true;
        });
        ElseIf(Owner, default, CO_IS_DEAD, default, default, () => {
            DropBall = true;
        });
        If(DropBall, default, CO_EQUAL, default, true, () => {
            Caster = this.Caster;
            TeamID = GetTeamID(default);
            TargetPos = GetUnitPosition(Owner);
            Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamID ?? TEAM_ORDER, false, true, false, true, true, true, 0, default, true, Caster, default);
            SpellBuffAdd(Attacker, Other3, "OrianaGhost", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Other3, "OrianaGhostMinion", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        DestroyMissile(CharVars.MissileID);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        CharVars.GhostAlive = false;
        DestroyMissile(CharVars.MissileID);
        SpellBuffAdd(Owner, Owner, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        SetStatus(Owner, default, SetTargetable);
        SpellEffectRemove(this.Particle);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        MyName = GetUnitSkinName(Owner);
        CharVars.GhostInitialized = true;
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            If(MyName, default, CO_EQUAL, default, "Orianna", () => {
                CharVars.TempSkin = PushCharacterData("OriannaNoBall", Owner, false);
            });
            If(MyName, default, CO_EQUAL, default, "orianna", () => {
                CharVars.TempSkin = PushCharacterData("OriannaNoBall", Owner, false);
            });
        });
        If(this.willRemove, default, CO_EQUAL, default, false, () => {
            SpellEffectCreate(ar, default, "OrianaProtectShield.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        });
        If(this.DamageBlock, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.DamageBlock ?? 0), true, true);
        });
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetInvulnerable);
        RemovePerceptionBubble(this.TempVision);
        SpellEffectRemove(this.Ring1);
        SpellEffectRemove(this.Ring2);
        SpellEffectRemove(this.Ring3);
        SpellEffectRemove(this.Ring4);
        SpellBuffAdd(Owner, Owner, "ExpirationTimer", 1, 1, 0.249, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        UnlockAnimation(Owner, false);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.emptyparticle);
        ApplyDamage(Owner, Owner, 4000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        Found = false;
        ForNClosestUnitsInTargetArea(Owner, this.TargetPos, 25000, "AffectFriends AffectMinions AffectHeroes ", 1, true, "OrianaGhost", (Other2) => {
            this.TargetPos = GetUnitPosition(Other2);
        });
        ForNClosestUnitsInTargetArea(Owner, this.TargetPos, 375, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
            ForNClosestUnitsInTargetArea(Owner, this.TargetPos, 25000, "AffectFriends AffectMinions AffectHeroes ", 1, true, "OrianaGhost", (Other2) => {
                SpellBuffClear(Other2, "OrianaGhost");
            });
            Found = true;
            EnemyPos = GetUnitPosition(Unit);
            SpellBuffAdd(Owner, Owner, "OrianaDissonance", 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SpellCast(Attacker, Unit, EnemyPos, EnemyPos, true, 5, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, this.TargetPos);
        });
        If(Found, default, CO_EQUAL, default, false, () => {
            SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
            SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
            SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        });
        SpellEffectRemove(this.MRShield);
        ClearOverrideAnimation("Run", Owner);
        SpellEffectRemove(this.asdf);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.SappedDebuff);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.Geeves1);
        SetDodgePiercing(Owner, false);
        SpellEffectRemove(this.Rh);
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, -16);
        If(this.Delay, default, CO_EQUAL, default, false, () => {
            SpellEffectRemove(this.Loop);
        });
        SpellEffectRemove(this.GreenDash);
        SpellEffectRemove(this.SelfParticle);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetGhosted);
        ClearOverrideAnimation("Run", Owner);
        SpellBuffRemove(Owner, "UnstoppableForceMarker", Owner, 0);
        If(this.PartCreated, default, CO_EQUAL, default, true, () => {
            SpellEffectRemove(this.tpar);
        });
        IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, -16);
        If(this.Delay, default, CO_EQUAL, default, false, () => {
            SpellEffectRemove(this.Loop);
        });
        SightReduction = Math(0 + (this.SightReduction ?? 0), MO_MULTIPLY, -1);
        IncPermanentStat(IncPermanentFlatBubbleRadiusMod, Owner, 0 + (SightReduction ?? 0));
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_SelfAOE, Owner);
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (this.NewCd ?? 0));
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "NocturneParanoia");
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        SpellEffectRemove(this.Loop);
        FadeOutColorFadeEffect(1, TEAM_UNKNOWN);
        TeamOfOwner = GetTeamID(default);
        If(TeamOfOwner, default, CO_EQUAL, default, 100, () => {
            ForEachChampion(TEAM_CHAOS, "NocturneParanoiaParticle", true, (Unit) => {
                Duration = GetBuffRemainingDuration(Unit, "NocturneParanoiaParticle");
                If(Duration, default, CO_GREATER_THAN, default, 0.5, () => {
                    FadeInColorFadeEffect(75, 0, 0, 1, 0.3, TEAM_ORDER);
                });
            });
        });
        Else(() => {
            ForEachChampion(TEAM_ORDER, "NocturneParanoiaParticle", true, (Unit) => {
                Duration = GetBuffRemainingDuration(Unit, "NocturneParanoiaParticle");
                If(Duration, default, CO_GREATER_THAN, default, 0.5, () => {
                    FadeInColorFadeEffect(75, 0, 0, 1, 0.3, TEAM_CHAOS);
                });
            });
        });
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, false, false, Owner);
        TeamID = GetTeamID(default);
        If(this.Feared, default, CO_EQUAL, default, false, () => {
            SpellEffectCreate(asdf, default, "NocturneUnspeakableHorror_break.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            ApplyDamage(Attacker, Owner, 0 + (this.BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.25, 0, false, false, Attacker);
        });
        SpellEffectRemove(this.TargetParticle);
        SpellEffectRemove(this.CounterParticle);
        SpellEffectRemove(this.ParticleID1);
        SpellEffectRemove(this.ParticleID2);
        SetStatus(Owner, default, SetGhosted);
        IncStat(IncPercentMultiplicativeMovementSpeedMod, Owner, 0);
        IncStat(IncFlatPhysicalDamageMod, Owner, 0);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        NextBuffVars.ResistanceMod = this.StarcallShred;
        SpellBuffAdd(Attacker, Owner, "Starcall", 10, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
        ApplyDamage(Attacker, Owner, 0 + (this.DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
        IfNotHasBuff(Owner, Owner, "FizzJumpTwo", () => {
            SpellBuffAdd(Owner, Owner, "FizzJumpDelay", 1, 1, 0.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        });
        PopCharacterFade(Owner, this.Temp);
        IncStat(IncAcquisitionRangeMod, Owner, 0);
        ClearOverrideAnimation("Attack1", Owner);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSilenced);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "FizzJump");
        CDReduction = GetStat(GetPercentCooldownMod, Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseCD = this.VALUE_BY_LEVEL;
        LowerCD = Math(0 + (BaseCD ?? 0), MO_MULTIPLY, 0 + (CDReduction ?? 0));
        NewCD = Math(0 + (BaseCD ?? 0), MO_ADD, 0 + (LowerCD ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCD ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        UnlockAnimation(Owner, true);
        SetSlotSpellIcon(1, SpellSlots, SPELLBOOK_CHAMPION, Owner, 1);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ApplyDamage(Owner, Owner, 4000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        IfHasBuff(Attacker, Owner, "FizzTempestTrap", () => {
            SpellBuffRemove(Attacker, "FizzTempestTrap", Owner, 0);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        TeamID = GetTeamID(default);
        SpellEffectCreate(asdf, default, "Fizz_TrickSlam.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Owner, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
            SpellEffectCreate(b, default, "Fizz_TrickSlam_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Unit, "FizzWSlow", 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Owner, Nothing, this.TargetPos, this.TargetPos, false, 0, ExtraSlots, 0 + (this.Level ?? 0), true, false, false, false, false, default);
        IfNotHasBuff(Owner, Owner, "FizzJumpTwo", () => {
            SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
            SetStatus(Owner, default, SetTargetable);
            SetStatus(Owner, default, SetGhosted);
            SetStatus(Owner, default, SetCanAttack);
            SetStatus(Owner, default, SetCanAttack);
            SetStatus(Owner, default, SetSilenced);
            SetStatus(Owner, default, SetForceRenderParticles);
            SetStatus(Owner, default, SetCallForHelpSuppresser);
            SetStatus(Owner, default, SetInvulnerable);
            PlayAnimation("Spell3c", 0, Owner, false, true, true);
            SpellBuffAdd(Owner, Owner, "FizzTrickSlamSoundDummy", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
            SpellBuffAdd(Owner, Owner, "FizzTrickSlam", 1, 1, 0.45, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
            SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
            SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "FizzJump");
            CDReduction = GetStat(GetPercentCooldownMod, Owner);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            BaseCD = this.VALUE_BY_LEVEL;
            LowerCD = Math(0 + (BaseCD ?? 0), MO_MULTIPLY, 0 + (CDReduction ?? 0));
            NewCD = Math(0 + (BaseCD ?? 0), MO_ADD, 0 + (LowerCD ?? 0));
            SetSlotSpellCooldownTimeVer2(0 + (NewCD ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        ClearOverrideAnimation("Idle1", Owner);
        SpellEffectRemove(this.Particle1);
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            TargetStruck = false;
            MagicDamage = this.MagicDamage;
            TeamID = GetTeamID(default);
            ForEachUnitInTargetArea(Owner, Owner, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                TargetStruck = true;
                BreakSpellShields(Unit);
                SpellBuffAdd(Attacker, Unit, "LeonaSunlight", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                ApplyDamage(Attacker, Unit, 0 + (MagicDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 0, false, false, Attacker);
                SpellEffectCreate(TargetParticle, default, "Leona_SolarBarrier_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            });
            SpellEffectRemove(this.Particle);
            ClearOverrideAnimation("Idle1", Owner);
            ClearOverrideAnimation("Idle2", Owner);
            ClearOverrideAnimation("Idle3", Owner);
            ClearOverrideAnimation("Idle4", Owner);
            ClearOverrideAnimation("Attack1", Owner);
            ClearOverrideAnimation("Attack2", Owner);
            ClearOverrideAnimation("Attack3", Owner);
            ClearOverrideAnimation("Crit", Owner);
            ClearOverrideAnimation("Run", Owner);
            If(TargetStruck, default, CO_EQUAL, default, true, () => {
                SpellEffectCreate(Temp, default, "Leona_SolarBarrier_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
                NextBuffVars.DefenseBonus = this.DefenseBonus;
                SpellBuffAdd(Attacker, Attacker, "LeonaSolarBarrier2", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
            Else(() => {
                SpellEffectCreate(Temp, default, "Leona_SolarBarrier_nova_whiff.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
            });
        });
        SpellEffectRemove(this.Particle);
        ClearOverrideAnimation("Idle1", Owner);
        ClearOverrideAnimation("Idle2", Owner);
        ClearOverrideAnimation("Idle3", Owner);
        ClearOverrideAnimation("Idle4", Owner);
        ClearOverrideAnimation("Attack1", Owner);
        ClearOverrideAnimation("Attack2", Owner);
        ClearOverrideAnimation("Attack3", Owner);
        ClearOverrideAnimation("Crit", Owner);
        ClearOverrideAnimation("Run", Owner);
        SpellEffectRemove(this.b);
        RemoveOverrideAutoAttack(Owner, false);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.SSSlow);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.temp);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.a, default, "Leona_SolarFlare_tar.troy", default, TEAM_NEUTRAL, 100, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        Level = GetLevel(Attacker);
        NextBuffVars.Level = Level;
        ForEachUnitInTargetArea(Attacker, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (this.DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.8, 1, false, false, Attacker);
            SpellEffectCreate(TargetParticle, default, "Leona_SolarBarrier_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            SpellBuffAdd(Attacker, Unit, "LeonaSunlight", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Unit, "LeonaSolarFlareSlow", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
        });
        ForEachUnitInTargetArea(Attacker, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyStun(Attacker, Unit, 1.5);
        });
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SetStatus(Owner, default, SetCanMove);
        RemovePerceptionBubble(this.Bubble);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        zombie = GetIsZombie(Owner);
        If(zombie, default, CO_EQUAL, default, false, () => {
            If(Owner, default, CO_IS_DEAD, default, default, () => {
                Name = GetUnitSkinName(Owner);
                If(Name, default, CO_EQUAL, default, "Annie", () => {
                    SpellBuffAdd(Owner, Owner, "FizzSharkDissappear", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                If(Name, default, CO_EQUAL, default, "Annie", () => {
                    SpellBuffAdd(Owner, Owner, "FizzSharkDissappear", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                If(Name, default, CO_EQUAL, default, "Amumu", () => {
                    SpellBuffAdd(Owner, Owner, "FizzSharkDissappear", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                If(Name, default, CO_EQUAL, default, "Kennen", () => {
                    SpellBuffAdd(Owner, Owner, "FizzSharkDissappear", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                If(Name, default, CO_EQUAL, default, "Fizz", () => {
                    SpellBuffAdd(Owner, Owner, "FizzSharkDissappear", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                If(Name, default, CO_EQUAL, default, "Poppy", () => {
                    SpellBuffAdd(Owner, Owner, "FizzSharkDissappear", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                If(Name, default, CO_EQUAL, default, "Veigar", () => {
                    SpellBuffAdd(Owner, Owner, "FizzSharkDissappear", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                If(Name, default, CO_EQUAL, default, "Tristana", () => {
                    SpellBuffAdd(Owner, Owner, "FizzSharkDissappear", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        UnlockAnimation(Owner, true);
        SetStatus(Owner, default, SetGhosted);
        SpellBuffAdd(Owner, Owner, "ExpirationTimer", 1, 1, 0.001, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.a);
        UnlockAnimation(Owner, true);
        IncStat(IncAcquisitionRangeMod, Owner, 0);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        CharVars.count = 0;
        SetDodgePiercing(Owner, false);
        RemoveOverrideAutoAttack(Owner, true);
        SpellBuffRemove(Owner, "NocturneUmbraBlades", Owner, default);
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        BreakSpellShields(Owner);
        ApplyDamage(Attacker, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Owner, "FizzKnockup", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, true, default);
        SpellEffectRemove(this.Temp);
        SpellEffectRemove(this.Temp2);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Owner, "FizzMarinerDoomSlow", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
        ForEachUnitInTargetArea(Attacker, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            If(Unit, default, CO_NOT_EQUAL, Owner, default, () => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 0, false, false, Attacker);
                OwnerPos = GetUnitPosition(Owner);
                NextBuffVars.CenterPos = OwnerPos;
                SpellBuffAdd(Owner, Unit, "FizzMoveback", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, true, default);
                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Unit, "FizzMarinerDoomSlow", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
            });
        });
        RemovePerceptionBubble(this.TempID);
        TeamID = GetTeamID(default);
        TargetPos = GetUnitPosition(Owner);
        Other3 = SpawnMinion("Omnomnomnom", "FizzShark", "idle.lua", TargetPos, TeamID ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Attacker, default);
        SpellEffectCreate(Temp, Temp, "Fizz_SharkSplash.troy", "Fizz_SharkSplash.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Other1, "BUFFBONE_CSTM_GROUND", TargetPos, Other1, "BUFFBONE_CSTM_GROUND", TargetPos, true, false, false, false, false, default, default);
        GetGroundHeight(TargetPos, GroundPos);
        SpellEffectCreate(Temp, Temp, "Fizz_SharkSplash_Ground.troy ", "Fizz_SharkSplash_Ground.troy ", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, GroundPos, Nothing, default, GroundPos, true, false, false, false, false, default, default);
        SpellBuffAdd(Other3, Other3, "FizzShark", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "FizzMarinerDoom");
        CDReduction = GetStat(GetPercentCooldownMod, Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseCD = this.VALUE_BY_LEVEL;
        LowerCD = Math(0 + (BaseCD ?? 0), MO_MULTIPLY, 0 + (CDReduction ?? 0));
        NewCD = Math(0 + (BaseCD ?? 0), MO_ADD, 0 + (LowerCD ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCD ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetStatus(Owner, default, SetGhosted);
        SpellEffectRemove(this.TremorsFx);
        ClearOverrideAnimation("Run", Owner);
        ClearOverrideAnimation("Idle1", Owner);
        SealSpellSlot(2, SpellSlots, Owner, true, default);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle1);
        If(this.Shield, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.Shield ?? 0), true, true);
        });
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle1);
        SetStatus(Owner, default, SetCanCast);
        NextBuffVars.MoveSpeedMod = -0.4;
        SpellBuffAdd(Attacker, Owner, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
        SpellEffectRemove(this.arr);
        TeamofOwner = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.ASDebuff = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Owner, Attacker, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Owner, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.9, 1, false, false, Owner);
            SpellBuffAdd(Attacker, Unit, "GragasExplosiveCaskDebuff", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        GragasSkinID = GetSkinID(Owner);
        If(GragasSkinID, default, CO_EQUAL, default, 4, () => {
            If(TeamofOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellEffectCreate(Particle, default, "gragas_barrelboom_classy.troy", default, TEAM_ORDER, 200, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Attacker, Owner, default, default, true, default, default, false, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(Particle, default, "gragas_barrelboom_classy.troy", default, TEAM_CHAOS, 200, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Attacker, Owner, default, default, true, default, default, false, default, default, default);
            });
        });
        Else(() => {
            If(TeamofOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellEffectCreate(Particle, default, "gragas_barrelboom.troy", default, TEAM_ORDER, 200, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Attacker, Owner, default, default, true, default, default, false, default, default, default);
            });
            Else(() => {
                SpellEffectCreate(Particle, default, "gragas_barrelboom.troy", default, TEAM_CHAOS, 200, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Attacker, Owner, default, default, true, default, default, false, default, default, default);
            });
        });
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "GragasBarrelRoll");
        CooldownVar = this.VALUE_BY_LEVEL;
        CDMod = GetStat(GetPercentCooldownMod, Owner);
        CDModTrue = Math(0 + (CDMod ?? 0), MO_ADD, 1);
        BarrelCD = Math(0 + (CooldownVar ?? 0), MO_MULTIPLY, 0 + (CDModTrue ?? 0));
        CDMinusBarrel = Math(0 + (BarrelCD ?? 0), MO_SUBTRACT, 0 + (LifeTime ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (CDMinusBarrel ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectRemove(this.TroyVar);
        SpellBuffRemove(Owner, "GragasBarrelRoll", Owner, default);
        ApplyDamage(Attacker, Attacker, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Attacker);
        SpellEffectRemove(this.a);
        ClearOverrideAnimation("Run", Owner);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        TeamOfOwner = GetTeamID(default);
        SpellEffectRemove(this.GateParticle);
        SpellEffectRemove(this.Particle3);
        SpellBuffRemove(Owner, "UrgotSwapMissile", Attacker, 0);
        SpellBuffRemove(Owner, "Suppression", Attacker, 0);
        SpellBuffRemove(Owner, "UrgotSwapTarget", Attacker, 0);
        UnlockAnimation(Owner, false);
        If(this.IsDisabled, default, CO_GREATER_THAN, default, 0, () => {
            
        });
        Else(() => {
            Distance = DistanceBetweenObjects("Owner", "Attacker");
            If(Distance, default, CO_LESS_THAN, default, 3000, () => {
                SpellBuffAdd(Owner, Attacker, "UrgotSwapExecute", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                PlayAnimation("teleDwn", 0.7, Owner, false, false, true);
            });
        });
        IncPAR(Owner, 0 + (this.ManaTick ?? 0));
        SpellBuffRemove(Owner, "GragasDrunkenRage", Owner, default);
        ApplyDamage(Attacker, Owner, 300, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, default, default, default, default);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.HitParticle);
        SetSpell(Owner, 0, ExtraSlots, SPELLBOOK_CHAMPION, "Propel");
        SpellCast(Owner, Target, Owner, Owner, false, 0, ExtraSlots, 1, true, false, false, false, false, default);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.c);
        SpellEffectRemove(this.d);
        ForEachUnitInTargetAreaRandom(Owner, Owner, 1000, "AffectEnemies AffectMinions AffectHeroes ", default, true, 1, (Unit) => {
            PropelPos = GetRandomPointInAreaUnit(Unit, 100, 25);
            TeamID = GetTeamID(default);
            Other1 = SpawnMinion("DontSeeThisPlease", "SpellBook1", "idle.lua", PropelPos, TEAM_NEUTRAL, false, true, false, true, false, false, 0, default, true, Nothing, default);
            SpellBuffAdd(Owner, Other1, "PropelSpellCaster", 1, 1, 2.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
            SpellEffectCreate(EffectToRemove, default, "PropelBubbles.troy", default, TEAM_NEUTRAL, 600, 0, TEAM_UNKNOWN, Owner, false, Other1, default, PropelPos, Target, default, default, true, default, default, default, default, default, default);
        });
        ForNClosestUnitsInTargetArea(Owner, Owner, 800, "AffectEnemies AffectMinions AffectHeroes ", 1, true, default, (Unit) => {
            FaceDirection(Owner, Unit);
            SpellCast(Owner, Unit, Owner, Owner, false, 3, SpellSlots, 1, false, false, false, false, default, default);
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        ApplyStun(Attacker, Target, 0.5);
        SpellEffectRemove(this.Temp);
        SpellEffectRemove(this.Temp2);
        SpellEffectRemove(this.Temp3);
        SpellEffectRemove(this.Temp4);
        If(this.Exploded, default, CO_EQUAL, default, false, () => {
            TeamID = GetTeamID(default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            ForEachUnitInTargetArea(Owner, this.MissilePosition, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Owner, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 0, false, false, Owner);
                NextBuffVars.CenterPos = this.MissilePosition;
                SpellBuffAdd(Owner, Unit, "FizzMoveback", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, true, default);
                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Unit, "FizzMarinerDoomSlow", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
            });
            Other1 = SpawnMinion("OMNOMNOMNOMONOM", "FizzShark", "idle.lua", this.MissilePosition, TeamID ?? TEAM_CASTER, true, true, true, true, true, true, 100, true, false, Owner, default);
            GetGroundHeight(this.MissilePosition, GroundPos);
            SpellEffectCreate(Temp, Temp, "Fizz_SharkSplash.troy", "Fizz_SharkSplash.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, GroundPos, Nothing, default, GroundPos, true, false, false, false, false, default, default);
            SpellEffectCreate(Temp, Temp, "Fizz_SharkSplash_Ground.troy ", "Fizz_SharkSplash_Ground.troy ", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, GroundPos, Nothing, default, GroundPos, true, false, false, false, false, default, default);
            SpellBuffAdd(Other1, Other1, "FizzShark", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            this.Exploded = true;
        });
        SpellEffectRemove(this.SpeedParticle);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.c);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.ParticleID2);
        SpellEffectRemove(this.ParticleID3);
        ClearOverrideAnimation("Idle1", Owner);
        ClearOverrideAnimation("Idle2", Owner);
        ClearOverrideAnimation("Idle3", Owner);
        ClearOverrideAnimation("Idle4", Owner);
        ClearOverrideAnimation("Run", Owner);
        ClearOverrideAnimation("Spell4", Owner);
        RemoveOverrideAutoAttack(Owner, false);
        SpellBuffRemove(Owner, "VolibearQSpeedPart", Owner, 0);
        SpellBuffAdd(Owner, Owner, "VolibearPassiveHealCheck", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(this.Ready, default, CO_EQUAL, default, true, () => {
            SpellEffectRemove(this.Particle1);
        });
        If(this.Ready, default, CO_EQUAL, default, true, () => {
            SpellEffectRemove(this.Particle1);
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        TeamID = GetTeamID(default);
        KMSkinID = GetSkinID(Attacker);
        If(KMSkinID, default, CO_EQUAL, default, 5, () => {
            
        });
        Else(() => {
            If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellEffectCreate(this.a, default, "KogMawLivingArtillery_tar_green.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Nothing, true, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(this.a, default, "KogMawLivingArtillery_tar_green.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Nothing, true, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
            });
        });
        ForEachUnitInTargetArea(Attacker, Owner, 240, "AffectEnemies AffectNeutral AffectMinions ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellBuffAdd(Attacker, Unit, "KogMawLivingArtillerySight", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Unit, 0 + (this.FinalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 1, false, false, Attacker);
        });
        this.BaseDamageAmount = Math(0 + (this.BaseDamageAmount ?? 0), MO_MULTIPLY, 2.5);
        this.FinalDamage = Math(0 + (this.BaseDamageAmount ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
        ForEachUnitInTargetArea(Attacker, Owner, 240, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellBuffAdd(Attacker, Unit, "KogMawLivingArtillerySight", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Unit, 0 + (this.FinalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 1, false, false, Attacker);
        });
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        RemovePerceptionBubble(this.BubbleID);
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        If(healthPercent, default, CO_LESS_THAN_OR_EQUAL, default, 0.03, () => {
            health = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
            maxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            healthFactor = Math(0 + (maxHealth ?? 0), MO_MULTIPLY, 0.03);
            healthToInc = Math(0 + (healthFactor ?? 0), MO_SUBTRACT, 0 + (health ?? 0));
            IncHealth(Owner, 0 + (healthToInc ?? 0), Owner);
        });
        ClearOverrideAnimation("Run", Owner);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        StopCurrentOverrideAnimation("Spell4", Owner, true);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        cast = false;
        StartTrackingCollisions(Owner, false);
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        StopMove(Owner);
        SpellEffectRemove(this.Particle);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "TalonShadowAssault");
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        OwnerPos = GetUnitPosition(Owner);
        ForEachUnitInTargetArea(Owner, OwnerPos, 3000, "AffectFriends AffectMinions NotAffectSelf AffectUntargetable ", default, true, (Unit) => {
            IfHasBuff(Unit, Owner, "TalonShadowAssaultMarker", () => {
                UnitPos = GetUnitPosition(Unit);
                NewDistance = DistanceBetweenObjects("Owner", "Unit");
                If(NewDistance, default, CO_GREATER_THAN, default, 100, () => {
                    SpellCast(Owner, Owner, OwnerPos, default, true, 4, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, UnitPos);
                });
                SpellBuffRemove(Unit, "TalonShadowAssaultMarker", Owner, 0);
                SetStatus(Unit, default, SetInvulnerable);
                SetStatus(Unit, default, SetTargetable);
                ApplyDamage(Unit, Unit, 50000, PHYSICAL_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 0, false, false, Attacker);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CooldownVal = this.VALUE_BY_LEVEL;
        FlatCDVal = 0;
        FlatCD = GetStat(GetPercentCooldownMod, Owner);
        FlatCDVal = Math(0 + (CooldownVal ?? 0), MO_MULTIPLY, 0 + (FlatCD ?? 0));
        CooldownVal = Math(0 + (CooldownVal ?? 0), MO_ADD, 0 + (FlatCDVal ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (CooldownVal ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        CharVars.HasCastR = false;
        SetStatus(Owner, default, SetCanCast);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        RemoveOverrideAutoAttack(Owner, true);
        SetDodgePiercing(Owner, false);
        IfHasBuff(Owner, Owner, "TalonNoxianDiplomacyBufff", () => {
            
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CooldownVal = this.VALUE_BY_LEVEL;
        FlatCDVal = 0;
        FlatCD = GetStat(GetPercentCooldownMod, Owner);
        FlatCDVal = Math(0 + (CooldownVal ?? 0), MO_MULTIPLY, 0 + (FlatCD ?? 0));
        CooldownVal = Math(0 + (CooldownVal ?? 0), MO_ADD, 0 + (FlatCDVal ?? 0));
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetSlotSpellCooldownTimeVer2(0 + (CooldownVal ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectRemove(this.ParticleZ);
        SpellEffectRemove(this.ParticleY);
        SpellBuffAdd(Attacker, Owner, "GravesSmokeGrenadeDelay", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IncPermanentStat(IncPermanentFlatBubbleRadiusMod, Owner, -300);
        SightReduction = Math(0 + (this.SightReduction ?? 0), MO_MULTIPLY, -1);
        IncPermanentStat(IncPermanentFlatBubbleRadiusMod, Owner, 0 + (SightReduction ?? 0));
        SpellBuffRemove(Owner, "TalonShadowAssaultMisOne", Owner, 0);
        SpellBuffRemove(Owner, "TalonHaste", Owner, 0);
        SetStatus(Owner, default, SetStealthed);
        PopCharacterFade(Owner, this.ID);
        SpellEffectRemove(this.talon_ult_sound);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Attacker);
        UnlockAnimation(Owner, true);
        StartTrackingCollisions(Owner, true);
        If(this.WillMove, default, CO_EQUAL, default, false, () => {
            SpellEffectRemove(this.Particle);
        });
        this.AttackRangeIncrease = Math(0 + (this.AttackRangeIncrease ?? 0), MO_MULTIPLY, -1);
        IncStat(IncFlatAttackRangeMod, Owner, 0 + (this.AttackRangeIncrease ?? 0));
        CancelAutoAttack(Owner, false);
        RemoveOverrideAutoAttack(Owner, true);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        RemoveOverrideAutoAttack(Owner, true);
        LevelDamage = GetLevel(Owner);
        BonusDamage = Math(0 + (LevelDamage ?? 0), MO_MULTIPLY, 25);
        TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 100);
        ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Owner, Unit, 0 + (TotalDamage ?? 0), TRUE_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
        });
        ForceDead(Owner);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetSilenced);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetTargetable);
        StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_Die);
        PopAllCharacterData(Owner);
        ClearOverrideAnimation("Run", Owner);
        this.CasterID = PushCharacterData("KogMawDead", Owner, false);
        Other3 = this.Other3;
        SpellEffectCreate(e, default, "KogMawDeath_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(e, default, "KogMawDead_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "intestines_1", default, Owner, default, default, false, false, false, false, false, default, default);
        SetStatus(Owner, default, SetInvulnerable);
        SpellBuffAdd(Attacker, Owner, "KogMawIcathianSurprise", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ShowHealthBar(Owner, true);
        SpellBuffClear(Owner, "GravesPassiveGrit");
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        OwnerPos = GetUnitPosition(Owner);
        ForEachUnitInTargetArea(Owner, OwnerPos, 3000, "AffectFriends AffectMinions NotAffectSelf AffectUntargetable ", default, true, (Unit) => {
            IfHasBuff(Unit, Owner, "TalonRakeMarker", () => {
                UnitPos = GetUnitPosition(Unit);
                NewDistance = DistanceBetweenObjects("Owner", "Unit");
                If(NewDistance, default, CO_GREATER_THAN, default, 100, () => {
                    SpellCast(Owner, Owner, OwnerPos, default, true, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, UnitPos);
                });
                SpellBuffRemove(Unit, "TalonRakeMarker", Owner, 0);
                SetStatus(Unit, default, SetInvulnerable);
                SetStatus(Unit, default, SetTargetable);
                ApplyDamage(Unit, Unit, 50000, PHYSICAL_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 0, false, false, Attacker);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CooldownVal = this.VALUE_BY_LEVEL;
        FlatCDVal = 0;
        FlatCD = GetStat(GetPercentCooldownMod, Owner);
        FlatCDVal = Math(0 + (CooldownVal ?? 0), MO_MULTIPLY, 0 + (FlatCD ?? 0));
        CooldownVal = Math(0 + (CooldownVal ?? 0), MO_ADD, 0 + (FlatCDVal ?? 0));
        SpellEffectRemove(this.ParticleZ);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        PoisonBaseDamage = this.VALUE_BY_LEVEL;
        PoisonTotalDamage = 0;
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Attacker);
        FlatAPBonus = Math(0 + (FlatAPBonus ?? 0), MO_MULTIPLY, 0.1);
        PoisonTotalDamage = Math(0 + (PoisonBaseDamage ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
        ApplyDamage(Attacker, Owner, 0 + (PoisonTotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        SpellEffectRemove(this.Blood1);
        SpellEffectRemove(this.Blood2);
        RemovePerceptionBubble(this.UnitBubble);
        SpellEffectRemove(this.particle1);
        SetPARMultiplicativeCostInc(Owner, 0, SpellSlots, 0, PAR_MANA);
        SetPARMultiplicativeCostInc(Owner, 1, SpellSlots, 0, PAR_MANA);
        SetPARMultiplicativeCostInc(Owner, 2, SpellSlots, 0, PAR_MANA);
        SetPARMultiplicativeCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.ParticleID6);
        SpellEffectRemove(this.Particle);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, default, default, default, default);
        SealSpellSlot(3, SpellSlots, Owner, true, default);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.particle);
        SpellEffectCreate(particle, default, "LayWaste_tar.troy", default, this.TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        NumUnits = 0;
        ForEachUnitInTargetArea(Attacker, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            NumUnits = Math(0 + (NumUnits ?? 0), MO_ADD, 1);
        });
        If(NumUnits, default, CO_EQUAL, default, 1, () => {
            ForEachUnitInTargetArea(Attacker, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (this.DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 1, false, false, Attacker);
            });
        });
        ElseIf(NumUnits, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
            DamageAmount = Math(0 + (this.DamageAmount ?? 0), MO_DIVIDE, 2);
            ForEachUnitInTargetArea(Attacker, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 1, false, false, Attacker);
            });
        });
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        ForceDead(Owner);
        SetStatus(Owner, default, SetTargetable);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.Particle);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(0, InventorySlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, InventorySlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, InventorySlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, InventorySlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(4, InventorySlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(5, InventorySlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ShowHealthBar(Owner, true);
        SpellBuffRemove(Owner, "Defile", Owner, 0);
        SetPARCostInc(Owner, 0, SpellSlots, 0, PAR_MANA);
        SetPARCostInc(Owner, 1, SpellSlots, 0, PAR_MANA);
        SetPARCostInc(Owner, 2, SpellSlots, 0, PAR_MANA);
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        SpellBuffAdd(Owner, Owner, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Owner);
        });
        SetStatus(Owner, default, SetStunned);
        SpellEffectCreate(asfd, default, "TurnBack.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        PauseAnimation(Owner, false);
        SpellEffectRemove(this.turntostone);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Attacker);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        RemovePerceptionBubble(this.BubbleID);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        SpellEffectCreate(particle, default, "CassNoxious_tar.troy", default, this.TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Attacker, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            NextBuffVars.DamagePerTick = this.PoisonPerTick;
            SpellBuffAdd(Attacker, Unit, "CassiopeiaNoxiousBlastPoison", 1, 1, 3.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Poison, 0, true, false, false, default);
            If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Attacker, "CassiopeiaNoxiousBlastHaste", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        SpellEffectRemove(this.particle);
        SpellEffectRemove(this.particle2);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Attacker);
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            SpellBuffAdd(Owner, Owner, "MissileBarrage", 7, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        });
        RemovePerceptionBubble(this.BubbleID);
        SpellEffectRemove(this.Particle);
        UnlockAnimation(Owner, false);
        If(this.WillMove, default, CO_EQUAL, default, false, () => {
            SpellEffectRemove(this.Particle);
        });
        RemovePerceptionBubble(this.BubbleID);
        SpellEffectRemove(this.StarkSelfParticle);
        SpellEffectRemove(this.TwoCharge);
        SpellEffectRemove(this.OneCharge);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ClearOverrideAnimation("Run", Owner);
        ClearOverrideAnimation("Attack1", Owner);
        ClearOverrideAnimation("Attack2", Owner);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.temp);
        SpellEffectRemove(this.test);
        SpellEffectRemove(this.test2);
        NextBuffVars.MissilePosition = this.MissilePosition;
        SpellBuffAdd(Attacker, Owner, "RumbleCarpetBombEffect", 10, 1, 6, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, false, false, false, default);
        SpellEffectRemove(this.test);
        SpellEffectRemove(this.Boom);
        SpellEffectRemove(this.Boom2);
        SpellBuffClear(Owner, "RumbleCarpetBombEffect");
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.Damage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Owner, "MissFortuneScatterAoE", 1, 1, 1.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        Duration = GetBuffRemainingDuration(Owner, "RumbleGrenadeCD");
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (Duration ?? 0));
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.CParticle);
        SpellEffectRemove(this.BParticle);
        Count = GetBuffCountFromCaster(Owner, Owner, "KarmaChakra");
        If(Count, default, CO_EQUAL, default, 0, () => {
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "KarmaHeavenlyWave");
            SetSlotSpellCooldownTimeVer2(0 + (Cooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            Cooldown2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "KarmaSpiritBond");
            SetSlotSpellCooldownTimeVer2(0 + (Cooldown2 ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            Cooldown3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "KarmaSoulShield");
            SetSlotSpellCooldownTimeVer2(0 + (Cooldown3 ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            SpellBuffAdd(Owner, Owner, "KarmaChakraCharge", 2, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
            IfHasBuff(Owner, Owner, "KarmaOneMantraParticle", () => {
                SpellBuffRemove(Owner, "KarmaOneMantraParticle", Owner, default);
                SpellBuffAdd(Owner, Owner, "KarmaTwoMantraParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            IfNotHasBuff(Owner, Owner, "KarmaOneMantraParticle", () => {
                IfNotHasBuff(Owner, Owner, "KarmaTwoMantraParticle", () => {
                    SpellBuffAdd(Owner, Owner, "KarmaOneMantraParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
            Count = GetBuffCountFromAll(Owner, "KarmaChakraCharge");
            If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "KarmaChakraTimer", 1, 1, 0 + (CharVars.MantraTimerCooldown ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        If(this.willRemove, default, CO_EQUAL, default, false, () => {
            SpellEffectCreate(ar, default, "shen_Feint_self_deactivate.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        });
        If(this.DamageBlock, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.DamageBlock ?? 0), true, true);
        });
        UnlockAnimation(Owner, true);
        SpellBuffRemove(Owner, "RumbleHeatingUp", Owner, default);
        SpellBuffRemove(Owner, "RumbleHeatingUp2", Owner, default);
        SpellBuffAdd(Attacker, Target, "RumbleHeatingUp2", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "RumbleHeatingUp", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectRemove(this.Particle);
        If(this.TotalArmorAmount, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
        });
        SpellEffectRemove(this.Particle);
        If(this.TotalArmorAmount, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
        });
        ClearOverrideAnimation("Run", Owner);
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            SpellEffectRemove(this.running);
        });
        SpellEffectRemove(this.MoveSpeedPart1);
        SpellBuffAdd(Owner, Owner, "MissFortuneStrut", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        RemoveOverrideAutoAttack(Owner, true);
        CancelAutoAttack(Owner, false);
        SetPARCostInc(Owner, 0, SpellSlots, 0, PAR_MANA);
        SetPARCostInc(Owner, 1, SpellSlots, 0, PAR_MANA);
        SetPARCostInc(Owner, 2, SpellSlots, 0, PAR_MANA);
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        SpellEffectRemove(this.KarmaSlow);
        SpellEffectRemove(this.SoundOne);
        SpellEffectRemove(this.SoundTwo);
        SpellEffectRemove(this.SBIdle1);
        SpellEffectRemove(this.SBIdle2);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.SoulShackleIdle);
        SpellEffectRemove(this.SoulShackleTarget_blood);
        SpellEffectRemove(this.MoveSpeedPart1);
        SpellEffectRemove(this.MoveSpeedPart2);
        IfHasBuff(Attacker, Attacker, "KarmaSpiritBondAllySelfTooltip", () => {
            SpellBuffRemove(Attacker, "KarmaSpiritBondAllySelfTooltip", Attacker, 0);
        });
        If(this.MantraBoolean, default, CO_EQUAL, default, 1, () => {
            SpellEffectRemove(this.dmgIndicatorR);
            SpellEffectRemove(this.dmgIndicatorL);
            SpellEffectRemove(this.dmgIndicatorL2);
            SpellEffectRemove(this.dmgIndicatorR2);
            SpellEffectRemove(this.SoulShackleTarget2);
        });
        RemoveLinkVisibility(Attacker, Owner);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellBuffRemove(Owner, "Infuse", Owner, default);
        IncPAR(Owner, -20);
        RemoveOverrideAutoAttack(Owner, true);
        CancelAutoAttack(Owner, false);
        SpellEffectRemove(this.SoundOne);
        SpellEffectRemove(this.SoundTwo);
        SpellEffectRemove(this.MoveSpeedPart1);
        SpellEffectRemove(this.SBIdle1);
        SpellEffectRemove(this.SBIdle2);
        SpellEffectRemove(this.ParticleID);
        IfHasBuff(Owner, Attacker, "KarmaMantraSBSlow", () => {
            SpellBuffRemove(Owner, "KarmaMantraSBSlow", Attacker, 0);
        });
        IfHasBuff(Attacker, Attacker, "KarmaSpiritBondEnemyTooltip", () => {
            SpellBuffRemove(Attacker, "KarmaSpiritBondEnemyTooltip", Attacker, 0);
        });
        SpellEffectRemove(this.SoulShackleIdle);
        SpellEffectRemove(this.SoulShackleTarget);
        SpellEffectRemove(this.SoulShackleTarget_blood);
        If(this.MantraBoolean, default, CO_EQUAL, default, 1, () => {
            SpellEffectRemove(this.SoulShackleTarget2);
        });
        SetDodgePiercing(Owner, false);
        SetStatus(Owner, default, SetNoRender);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, default);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        SpellEffectRemove(this.a);
        SpellBuffRemove(Attacker, "InfernalGuardianTimer", Attacker, 0);
        ClearOverrideAnimation("Attack1", Owner);
        ClearOverrideAnimation("Attack2", Owner);
        ClearOverrideAnimation("Run", Owner);
        SpellEffectRemove(this.Particle);
        SetStatus(Owner, default, SetNoRender);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        SpellBuffAdd(Owner, Owner, "OlafAxeExpirationTimer2", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Count = GetBuffCountFromCaster(Owner, Owner, "Feast");
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        HealthPerStack = this.VALUE_BY_LEVEL;
        BonusHealth = Math(0 + (HealthPerStack ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
        SetBuffToolTipVar(1, 0 + (BonusHealth ?? 0));
        OverrideAnimation("Run", "Run", Owner);
        TeamID = GetTeamID(default);
        skin = GetSkinID(Owner);
        If(skin, default, CO_EQUAL, default, 4, () => {
            If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellEffectCreate(a, default, "rupture_dino_cas_02.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "rupture_dino_cas_02.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        Else(() => {
            If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellEffectCreate(a, default, "rupture_cas_02.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "rupture_cas_02.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
        ForEachUnitInTargetArea(Attacker, Owner, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellBuffAdd(Attacker, Unit, "RuptureLaunch", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, true, false, default);
            ApplyDamage(Attacker, Unit, 0 + (this.DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
        });
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
        SpellBuffAdd(Attacker, Owner, "RuptureTarget", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
        SealSpellSlot(2, SpellSlots, Owner, true, default);
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.ParticleID);
        SetStatus(Owner, default, SetTargetable);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, default, default, default, default);
        SpellEffectRemove(this.ParticleID);
        NextBuffVars.BubbleID = this.BubbleID;
        SpellBuffAdd(Attacker, Owner, "CaitlynAceintheHoleVisibility", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(3, SpellSlots, Attacker, false, SPELLBOOK_CHAMPION);
        RemovePerceptionBubble(this.BubbleID);
        IfHasBuff(Attacker, Owner, "CaitlynYordleTrap", () => {
            SpellBuffRemove(Attacker, "CaitlynYordleTrap", Owner, default);
        });
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        SetStatus(Owner, default, SetCanMove);
        If(this.Collide, default, CO_EQUAL, default, true, () => {
            ApplyStun(Attacker, Owner, 1.5);
            ApplyDamage(Attacker, Owner, 0 + (this.Damage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 0, false, false, Attacker);
            SpellEffectCreate(hi, default, "Vayne_E_terrain_tar.troy", default, TEAM_NEUTRAL, 200, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, true, false, false, false, false, default, default);
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        StartTrackingCollisions(Owner, false);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        BaseCooldown = 5;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (BaseCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        this.ID = PushCharacterFade(Owner, 1, default, this.ID);
        SetStatus(Owner, default, SetStealthed);
        TeamID = GetTeamID(default);
        TargetPos = this.TargetPos;
        NextBuffVars.BonusHealth = this.BonusHealth;
        Other3 = SpawnMinion("Jack In The Box", "ShacoBox", "turret.lua", TargetPos, TeamID ?? TEAM_CASTER, false, false, true, false, false, false, 0, false, false, Attacker, default);
        NextBuffVars.FearDuration = this.FearDuration;
        SpellBuffAdd(Attacker, Other3, "JackInTheBox", 1, 1, 90, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetStatus(Owner, default, SetStealthed);
        PushCharacterFade(Owner, 1, default, default);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (this.DCooldown ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetDodgePiercing(Owner, false);
        SetStatus(Owner, default, SetStunned);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetTargetable);
        Pos1 = GetRandomPointInAreaUnit(Owner, 250, 50);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        Other1 = CloneUnitPet(Owner, "Hallucinate", 18, Pos1, 0, 0, true);
        NextBuffVars.DamageAmount = this.DamageAmount;
        NextBuffVars.DamageDealt = this.DamageDealt;
        NextBuffVars.DamageTaken = this.DamageTaken;
        NextBuffVars.shacoDamageTaken = this.shacoDamageTaken;
        SpellBuffAdd(Owner, Other1, "HallucinateFull", 1, 1, 18, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other1, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other1, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other1, "Backstab", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellEffectCreate(FadeParticle, default, "HallucinatePoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Other1, default, default, Target, default, default, false, false, false, false, false, default, default);
        SetStatus(Other1, default, SetStealthed);
        Pos2 = GetRandomPointInAreaUnit(Owner, 250, 50);
        TeleportToPosition(Owner, Pos2);
        SpellEffectCreate(FadeParticle, default, "HallucinatePoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        NextBuffVars.CritDmgBonus = this.CritDmgBonus;
        NextBuffVars.DCooldown = this.DCooldown;
        CastPos = this.CastPos;
        SpellBuffAdd(Owner, Owner, "Deceive", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "DeceiveCritBonus", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeleportToPosition(Owner, CastPos);
        TeamID = GetTeamID(default);
        SpellEffectCreate(hi, default, "Hallucinate_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Owner, default, default, true, false, false, false, false, default, default);
        ForEachUnitInTargetArea(Attacker, Owner, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (this.DamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
        });
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 10000, MAGIC_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ApplyDamage(Owner, Owner, 4000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        AttackerID = GetTeamID(default);
        SpellEffectCreate(asdadsfa, default, "caitlyn_yordleTrap_trigger_sound.troy", default, AttackerID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        SpeedParticle = this.SpeedParticle;
        SpellEffectRemove(this.SpeedParticle);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SpellCooldown = this.VALUE_BY_LEVEL;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        RemoveOverrideAutoAttack(Owner, false);
        IfHasBuff(Owner, Owner, "VayneInquisition", () => {
            OverrideAnimation("Idle1", "Idle_Ult", Owner);
            OverrideAnimation("Idle2", "Idle_Ult", Owner);
            OverrideAnimation("Idle3", "Idle_Ult", Owner);
            OverrideAnimation("Idle4", "Idle_Ult", Owner);
            OverrideAnimation("Attack1", "Attack_Ult", Owner);
            OverrideAnimation("Attack2", "Attack_Ult", Owner);
            OverrideAnimation("Crit", "Attack_Ult", Owner);
            OverrideAnimation("Spell3", "Attack_Ult", Owner);
            OverrideAnimation("Run", "Run_Ult", Owner);
            OverrideAutoAttack(4, ExtraSlots, Owner, 1, false);
        });
        Else(() => {
            ClearOverrideAnimation("Idle1", Owner);
            ClearOverrideAnimation("Idle2", Owner);
            ClearOverrideAnimation("Idle3", Owner);
            ClearOverrideAnimation("Idle4", Owner);
            ClearOverrideAnimation("Attack1", Owner);
            ClearOverrideAnimation("Attack2", Owner);
            ClearOverrideAnimation("Crit", Owner);
            ClearOverrideAnimation("Spell3", Owner);
            ClearOverrideAnimation("Run", Owner);
        });
        ClearOverrideAnimation("Run", Owner);
        SpeedParticle = this.SpeedParticle;
        SpellEffectRemove(this.SpeedParticle);
        IfHasBuff(Owner, Owner, "VayneTumbleBonus", () => {
            OverrideAnimation("Idle1", "Idle_Tumble", Owner);
            OverrideAnimation("Idle2", "Idle_Tumble", Owner);
            OverrideAnimation("Idle3", "Idle_Tumble", Owner);
            OverrideAnimation("Idle4", "Idle_Tumble", Owner);
            OverrideAnimation("Attack1", "Attack_Tumble", Owner);
            OverrideAnimation("Attack2", "Attack_Tumble", Owner);
            OverrideAnimation("Crit", "Attack_Tumble", Owner);
            ClearOverrideAnimation("Spell3", Owner);
            OverrideAnimation("Run", "Run_Tumble", Owner);
            OverrideAutoAttack(2, ExtraSlots, Owner, 1, false);
        });
        Else(() => {
            ClearOverrideAnimation("Idle1", Owner);
            ClearOverrideAnimation("Idle2", Owner);
            ClearOverrideAnimation("Idle3", Owner);
            ClearOverrideAnimation("Idle4", Owner);
            ClearOverrideAnimation("Attack1", Owner);
            ClearOverrideAnimation("Attack2", Owner);
            ClearOverrideAnimation("Crit", Owner);
            ClearOverrideAnimation("Spell3", Owner);
            ClearOverrideAnimation("Run", Owner);
            RemoveOverrideAutoAttack(Owner, false);
        });
        PushCharacterFade(Owner, 1, default, default);
        SetStatus(Owner, default, SetStealthed);
        IfNotHasBuff(Owner, Owner, "VayneTumble", () => {
            IfNotHasBuff(Owner, Owner, "VayneTumbleBonus", () => {
                UnlockAnimation(Owner, true);
                SetStatus(Owner, default, SetCanAttack);
                SetStatus(Owner, default, SetCanMove);
            });
        });
        Owner = SetBuffCasterUnit();
        UnlockAnimation(Owner, true);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        CancelAutoAttack(Owner, true);
        SpellEffectRemove(this.GlobeOne);
        SpellBuffRemove(Owner, "VayneSilverParticle1", Owner, 0);
        If(this.DoOnce2, default, CO_EQUAL, default, true, () => {
            SpellEffectRemove(this.GlobeTwo);
            this.DoOnce2 = false;
        });
        SpellEffectRemove(this.Aegis);
        SpellEffectRemove(this.DiseaseCloud);
        TeamID = GetTeamID(default);
        GhoulPosition = GetUnitPosition(Attacker);
        SpellEffectCreate(b, default, "yorick_necroExplosion_deactivate.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, GhoulPosition, Owner, default, default, true, default, default, false, false, default, default);
        ApplyDamage(Attacker, Attacker, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        SetStatus(Owner, default, SetStunned);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle);
        SetStatus(Owner, default, SetInvulnerable);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Owner);
        If(Attacker, default, CO_IS_NOT_DEAD, default, default, () => {
            ApplyDamage(Attacker, Attacker, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        });
        If(Attacker, default, CO_IS_NOT_DEAD, default, default, () => {
            ApplyDamage(Attacker, Attacker, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        });
        UnlockAnimation(Owner, true);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, false);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.ParticleID6);
        DurationLevel = this.DurationLevel;
        SpellBuffAdd(Attacker, Owner, "YorickDeathGripBeam", 1, 1, 0 + (DurationLevel ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "YorickActiveRavenous", () => {
            SpellBuffClear(Owner, "YorickActiveRavenous");
        });
        TeamID = GetTeamID(default);
        GhoulPosition = GetUnitPosition(Attacker);
        SpellEffectCreate(b, default, "yorick_ravenousGhoul_death.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, GhoulPosition, Owner, default, default, true, default, default, false, false, default, default);
        ApplyDamage(Attacker, Attacker, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        UnlockAnimation(Owner, false);
        PlayAnimation("idle1", 0, Owner, false, false, true);
        UnlockAnimation(Owner, false);
        IfNotHasBuff(Owner, Owner, "YorickRAZombieKogMaw", () => {
            SpellBuffAdd(Owner, Owner, "YorickRAZombieKogMaw", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "YorickActiveSpectral", () => {
            SpellBuffClear(Owner, "YorickActiveSpectral");
        });
        GhoulPosition = GetUnitPosition(Attacker);
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "yorick_spectralGhoul_death.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, GhoulPosition, Owner, default, GhoulPosition, true, default, default, false, false, default, default);
        ApplyDamage(Attacker, Attacker, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        Duration = GetBuffRemainingDuration(Owner, "YorickRARemovePet");
        If(Duration, default, CO_GREATER_THAN, default, 0.5, () => {
            IfHasBuff(Attacker, Owner, "YorickRAPetBuff2", () => {
                ApplyDamage(Attacker, Attacker, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Attacker);
            });
        });
        SetStatus(Owner, default, SetGhosted);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.DamageToDeal = this.DamageToDeal;
        NextBuffVars.Pos = this.Pos;
        SpellBuffAdd(Attacker, Owner, "YorickDeathGrip", 50, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0.1, true, false, false, default);
        If(Attacker, default, CO_IS_NOT_DEAD, default, default, () => {
            ApplyDamage(Attacker, Attacker, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        });
        SetStatus(Owner, default, SetCanMove);
        SpellEffectRemove(this.RootParticleEffect2);
        SpellEffectRemove(this.RootParticleEffect);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.ParticleID6);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        IncPermanentStat(IncPermanentPercentHPRegenMod, Owner, 1);
        SpellBuffAdd(Owner, Owner, "YorickUltStun", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "TechmaturgicalIcon", () => {
            ForEachUnitInTargetArea(Owner, Owner, 20000, "AffectFriends AffectMinions ", default, true, (Unit) => {
                IfHasBuff(Unit, Owner, "H28GEvolutionTurret", () => {
                    ApplyDamage(Attacker, Unit, 1000, PHYSICAL_DAMAGE, DAMAGESOURCE_RAW, 1, 1, 0, false, false, Attacker);
                });
            });
        });
        ForceDead(Owner);
        If(Attacker, default, CO_IS_NOT_DEAD, default, default, () => {
            ApplyDamage(Attacker, Attacker, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        });
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            ForEachChampion(TEAM_ORDER, "YorickReviveAllySelf", true, (Unit) => {
                SpellBuffClear(Unit, "YorickReviveAllySelf");
            });
        });
        Else(() => {
            ForEachChampion(TEAM_CHAOS, "YorickReviveAllySelf", true, (Unit) => {
                SpellBuffClear(Unit, "YorickReviveAllySelf");
            });
        });
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            SpellEffectCreate(a, default, "YorickRevenantDeathSound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        });
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Owner);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        SpellEffectRemove(this.Particle5);
        IfHasBuff(Attacker, Attacker, "YorickRASelf", () => {
            SpellBuffRemove(Attacker, "YorickRASelf", Attacker, 0);
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        UnlockAnimation(Owner, false);
        PlayAnimation("idle1", 0, Owner, false, false, true);
        UnlockAnimation(Owner, false);
        IfNotHasBuff(Owner, Owner, "YorickRAZombieLich", () => {
            SpellBuffAdd(Owner, Owner, "YorickRAZombieLich", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        IncPermanentStat(IncPermanentPercentHPRegenMod, Owner, 1);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurprise", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetStatus(Owner, default, SetCanMove);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "XerathLocusOfPower");
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        Cooldown = this.VALUE_BY_LEVEL;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Cooldown ?? 0), MO_MULTIPLY, 0 + (Multiplier ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particlea);
        SpellEffectRemove(this.Particleb);
        SpellEffectRemove(this.Particlec);
        Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "XerathArcanopulse");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Cooldown2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "XerathMageChains");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown2 ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "XerathArcaneBarrageWrapper");
        SetSlotSpellCooldownTimeVer2(0 + (Cooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ClearOverrideAnimation("Idle1", Owner);
        ClearOverrideAnimation("Idle2", Owner);
        ClearOverrideAnimation("Idle3", Owner);
        ClearOverrideAnimation("Idle4", Owner);
        FlashCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(FlashCheck, default, CO_EQUAL, default, "SummonerFlash", () => {
            SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        });
        FlashCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(FlashCheck, default, CO_EQUAL, default, "SummonerFlash", () => {
            SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        });
        SpellBuffAdd(Owner, Owner, "XerathEnergize", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        UnlockAnimation(Owner, false);
        PlayAnimation("idle1", 0, Owner, false, false, true);
        UnlockAnimation(Owner, false);
        IfNotHasBuff(Owner, Owner, "YorickRAZombie", () => {
            SpellBuffAdd(Owner, Owner, "YorickRAZombie", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        IncPermanentStat(IncPermanentPercentHPRegenMod, Owner, 1);
        SpellBuffAdd(Owner, Owner, "DeathDefiedBuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetStatus(Owner, default, SetStunned);
        this.PetDamage = Math(-1, MO_MULTIPLY, 0 + (this.PetDamage ?? 0));
        this.PetAP = Math(-1, MO_MULTIPLY, 0 + (this.PetAP ?? 0));
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, 0 + (this.PetAP ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (this.PetDamage ?? 0));
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        If(Expired, default, CO_EQUAL, default, true, () => {
            If(this.IsKarthus, default, CO_EQUAL, default, true, () => {
                SpellBuffAdd(Owner, Owner, "DeathDefied", 1, 1, 30000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
            If(this.IsKogMaw, default, CO_EQUAL, default, true, () => {
                SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 30000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        Else(() => {
            IfNotHasBuff(Owner, Nothing, "YorickRADelayLich", () => {
                IfNotHasBuff(Owner, Nothing, "YorickRADelayKogMaw", () => {
                    If(this.IsKarthus, default, CO_EQUAL, default, true, () => {
                        SpellBuffAdd(Owner, Owner, "DeathDefied", 1, 1, 30000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                    If(this.IsKogMaw, default, CO_EQUAL, default, true, () => {
                        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 30000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                });
            });
        });
        RemovePerceptionBubble(this.Bubble);
        SetPARMultiplicativeCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        UnlockAnimation(Owner, true);
        IfHasBuff(Owner, Owner, "XerathArcaneBarrageBarrage", () => {
            
        });
        Else(() => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SpellCooldown = this.VALUE_BY_LEVEL;
            CooldownStat = GetStat(GetPercentCooldownMod, Owner);
            Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
            NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
            SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        });
        SetStatus(Owner, default, SetInvulnerable);
        If(Attacker, default, CO_EQUAL, Owner, default, () => {
            SpellEffectRemove(this.Self);
        });
        Else(() => {
            SpellEffectRemove(this.Cas);
        });
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        SpellEffectRemove(this.Particle5);
        SpellEffectRemove(this.Particle6);
        SpellEffectRemove(this.Particle7);
        SpellEffectRemove(this.Particle8);
        SpellEffectRemove(this.Particle9);
        SpellEffectRemove(this.Particle10);
        SpellEffectRemove(this.Particle11);
        SpellEffectRemove(this.Particle12);
        SpellEffectRemove(this.Particle13);
        SpellEffectRemove(this.Particle14);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, false);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        SetStatus(Owner, default, SetCanAttack);
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.ParticleCharge2);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanMove);
        StopCurrentOverrideAnimation("RunUlt", Owner, false);
        SpellEffectRemove(this.ParticleCharge);
        IfNotHasBuff(Owner, Owner, "PoppyHeroicChargePart2", () => {
            SetStatus(Owner, default, SetCanAttack);
        });
        this.AttackRangeIncrease = Math(-1, MO_MULTIPLY, 0 + (this.AttackRangeIncrease ?? 0));
        IncStat(IncFlatAttackRangeMod, Owner, 0 + (this.AttackRangeIncrease ?? 0));
        RemoveOverrideAutoAttack(Owner, true);
        CancelAutoAttack(Owner, false);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        UnlockAnimation(Owner, true);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.SpeedParticle);
        SpellEffectRemove(this.MaxParticle);
        SpellEffectRemove(this.StarkSelfParticle);
        SpellEffectRemove(this.SoulShroudParticle);
        SpellEffectRemove(this.ManaManipulator);
        SpellEffectRemove(this.EmblemOfValorParticle);
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, 0.1);
        SpellEffectRemove(this.a);
        BonusAttackSpeed = Math(-1, MO_MULTIPLY, 0 + (this.BonusAttackSpeed ?? 0));
        IncPermanentStat(IncPermanentPercentAttackSpeedMod, Owner, 0 + (BonusAttackSpeed ?? 0));
        IncPermanentStat(IncPermanentFlatCritChanceMod, Owner, -0.08);
        SpellCast(Owner, Owner, Owner, Owner, default, 2, SpellSlots, 1, false, false, false, default, default, default);
        ApplyDamage(Attacker, Owner, 90, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Owner, "WrathDebuff", 10, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, default, default);
        IncHealth(Owner, 750, Owner);
        IncPAR(Owner, 375);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        UnlockAnimation(Owner, false);
        PlayAnimation("idle1", 0, Owner, false, false, true);
        UnlockAnimation(Owner, false);
        SpellEffectCreate(Part, default, "GuardianAngel_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "HasBeenRevived", 1, 1, 300, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        If(CharVars.countHealthPotion, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
            stacksToAdd = Math(0 + (CharVars.countHealthPotion ?? 0), MO_SUBTRACT, 1);
            SpellBuffAdd(Owner, Owner, "RegenerationPotion", 5, 0 + (stacksToAdd ?? 0), 15, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Heal, 0, true, false, false, default);
            SpellBuffAdd(Target, Target, "Potion_Internal", 1, 1, 15, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            CharVars.countHealthPotion = 0;
        });
        RemovePerceptionBubble(this.ThisBubble);
        BonusHealth = Math(-1, MO_MULTIPLY, 0 + (this.BonusHealth ?? 0));
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (BonusHealth ?? 0));
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, -10);
        SpellEffectRemove(this.ApocalypseParticle);
        SpellEffectRemove(this.cp1);
        SetDodgePiercing(Owner, false);
        RemovePerceptionBubble(this.BubbleID);
        ApplyDamage(Owner, Owner, 600, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.WillPlaceholder);
        If(this.ShieldHealth, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.ShieldHealth ?? 0), true, false);
        });
        SpellEffectRemove(this.Particle);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, -200);
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, -20);
        HP = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        If(HP, default, CO_LESS_THAN_OR_EQUAL, default, 200, () => {
            HPToAdd = Math(1, MO_SUBTRACT, 0 + (HP ?? 0));
            IncHealth(Owner, 0 + (HPToAdd ?? 0), Owner);
        });
        Else(() => {
            IncHealth(Owner, -200, Owner);
        });
        If(CharVars.countManaPotion, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
            stacksToAdd = Math(0 + (CharVars.countManaPotion ?? 0), MO_SUBTRACT, 1);
            SpellBuffAdd(Owner, Owner, "FlaskOfCrystalWater", 5, 0 + (stacksToAdd ?? 0), 15, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Heal, 0, true, false, false, default);
            SpellBuffAdd(Target, Target, "Potion_Internal", 1, 1, 15, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            CharVars.countManaPotion = 0;
        });
        CurTime = GetGameTime();
        lifetime = Math(0 + (CurTime ?? 0), MO_SUBTRACT, 0 + (this.InitialTime ?? 0));
        If(lifetime, default, CO_GREATER_THAN_OR_EQUAL, this.BuffDuration, default, () => {
            CastPosition = this.CastPosition;
            DestroyMissileForTarget(Owner);
            TeleportToPosition(Owner, CastPosition);
            SpellEffectCreate(akc, default, "summoner_teleportarrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
                CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
                BaseCooldown = Math(300, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
            });
            If(AvatarVars.TeleportCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
                BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_SUBTRACT, 0 + (AvatarVars.TeleportCooldownBonus ?? 0));
            });
        });
        Else(() => {
            BaseCooldown = 180;
        });
        SpellEffectRemove(this.ak);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanCast);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        If(this.SlotNum, default, CO_EQUAL, default, 0, () => {
            SetSpell(Owner, 0, SpellSlots, SPELLBOOK_SUMMONER, "SummonerTeleport");
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 0 + (BaseCooldown ?? 0));
        });
        ElseIf(this.SlotNum, default, CO_EQUAL, default, 1, () => {
            SetSpell(Owner, 1, SpellSlots, SPELLBOOK_SUMMONER, "SummonerTeleport");
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 0 + (BaseCooldown ?? 0));
        });
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetStunned);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        PauseAnimation(Owner, false);
        BonusAP = Math(-1, MO_MULTIPLY, 0 + (this.BonusAP ?? 0));
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, 0 + (BonusAP ?? 0));
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, 0.1);
        SpellEffectRemove(this.SCP);
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, 0.05);
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, 0.15);
        IncPermanentStat(IncPermanentFlatArmorPenetrationMod, Owner, -20);
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, 0.15);
        SpellEffectRemove(this.Particle3);
        If(this._66Destroyed, default, CO_EQUAL, default, false, () => {
            SpellEffectRemove(this.Particle2);
        });
        If(this._100Destroyed, default, CO_EQUAL, default, false, () => {
            SpellEffectRemove(this.Particle1);
        });
        RemovePerceptionBubble(this.BubbleID);
        ApplyDamage(Owner, Owner, 600, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.slow);
        Duration = Math(60, MO_SUBTRACT, 0 + (LifeTime ?? 0));
        SpellBuffAdd(Owner, Owner, "HexdrinkerTimerCD", 1, 1, 0 + (Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        If(this.ShieldHealth, default, CO_GREATER_THAN, default, 0, () => {
            RemoveShield(Owner, 0 + (this.ShieldHealth ?? 0), true, false);
        });
        AP = GetStat(GetFlatMagicDamageMod, Owner);
        APBonus = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.6);
        ShieldHealth = Math(0 + (APBonus ?? 0), MO_ADD, 200);
        NextBuffVars.ShieldHealth = ShieldHealth;
        SpellBuffAdd(Owner, Owner, "PrideShield", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 1, default, default, default, default);
        SpellEffectRemove(this.slow);
        RemovePerceptionBubble(this.BubbleID);
        SpellEffectRemove(this.Particle);
        this.StatBoost = 0;
        RemovePerceptionBubble(this.BubbleID);
        ApplyDamage(Owner, Owner, 600, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        RemovePerceptionBubble(this.BubbleID);
        IncPermanentStat(IncPermanentPercentAttackSpeedMod, Owner, -0.04);
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, -6);
        RemoveHealth = Math(0 + (this.HealthVar ?? 0), MO_MULTIPLY, -1);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 0 + (RemoveHealth ?? 0));
        RemovePerceptionBubble(this.ThisBubble);
        NextBuffVars.WillRemove = false;
        SpellBuffAdd(Owner, Owner, "BansheesVeil", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, 0.15);
        SpellEffectRemove(this.ApocalypseParticle);
        SpellEffectRemove(this.StarkAuraParticle);
        IncPermanentStat(IncPermanentPercentCooldownMod, Owner, 0.15);
        SpellEffectRemove(this.StarkAuraParticle);
    }
    public void BuffOnAllowAdd()
    {
        #region VarDecl
        float? Distance = null;
        float? HardnessPercent = null;
        float? PercentReduction = null;
        float? Duration = null;
        long? DurationMod = null;
        Object? Level = null;
        double? CCreduction = null;
        float? ReversalDivisor = null;
        #endregion
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(ScriptName, default, CO_EQUAL, default, "globalwallpush", () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Suppression, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Shred, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
            IfNotHasBuff(Owner, Owner, "WrathTimer", () => {
                IfNotHasBuff(Owner, Owner, "SweepTimer", () => {
                    IfNotHasBuff(Owner, Owner, "PropelTimer", () => {
                        IfNotHasBuff(Owner, Owner, "ActionTimer2", () => {
                            IfNotHasBuff(Owner, Owner, "ActionTimer", () => {
                                Distance = DistanceBetweenObjects("Attacker", "Owner");
                                If(Distance, default, CO_GREATER_THAN, default, 950, () => {
                                    SetReturnValue(default);
                                });
                            });
                        });
                    });
                });
            });
        });
        Else(() => {
            SetReturnValue(default);
        });
        HardnessPercent = GetStat(GetPercentHardnessMod, Owner);
        PercentReduction = Math(1, MO_SUBTRACT, 0 + (HardnessPercent ?? 0));
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            Duration = Math(0.3, MO_MAX, 0 + (Duration ?? 0));
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(ScriptName, default, CO_EQUAL, default, "globalwallpush", () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Suppression, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Shred, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        Else(() => {
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Invisibility, () => {
            SetReturnValue(default);
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            Say(Owner, "game_lua_SpellImmunity", default);
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
            this.Interrupted = true;
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
            this.Interrupted = true;
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
            this.Interrupted = true;
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
            this.Interrupted = true;
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
            this.Interrupted = true;
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
            this.Interrupted = true;
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Type, default, CO_EQUAL, default, BUFF_Suppression, () => {
            this.Interrupted = true;
            SpellBuffRemoveCurrent(Owner);
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.35);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.35);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.35);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.35);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.35);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.35);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.35);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.35);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.35);
            });
            Duration = Math(0.3, MO_MAX, 0 + (Duration ?? 0));
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(this.WillRemove, default, CO_EQUAL, default, true, () => {
                SetReturnValue(default);
            });
        });
        Else(() => {
            SetReturnValue(default);
        });
        If(Owner, default, CO_SAME_TEAM, Attacker, default, () => {
            If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
                If(Attacker, default, CO_NOT_EQUAL, Owner, default, () => {
                    If(Type, default, CO_EQUAL, default, BUFF_CombatEnchancer, () => {
                        IfHasBuff(Owner, Owner, "OdinScoreLowHP", () => {
                            SpellBuffAdd(Owner, Target, "OdinScoreArchAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                        Else(() => {
                            SpellBuffAdd(Owner, Attacker, "OdinScoreAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                    If(Type, default, CO_EQUAL, default, BUFF_Haste, () => {
                        IfHasBuff(Owner, Owner, "OdinScoreLowHP", () => {
                            SpellBuffAdd(Owner, Target, "OdinScoreArchAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                        Else(() => {
                            SpellBuffAdd(Owner, Attacker, "OdinScoreAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                    If(Type, default, CO_EQUAL, default, BUFF_Invulnerability, () => {
                        IfHasBuff(Owner, Owner, "OdinScoreLowHP", () => {
                            SpellBuffAdd(Owner, Target, "OdinScoreArchAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                        Else(() => {
                            SpellBuffAdd(Owner, Attacker, "OdinScoreAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                    If(Type, default, CO_EQUAL, default, BUFF_Heal, () => {
                        IfHasBuff(Owner, Owner, "OdinScoreLowHP", () => {
                            SpellBuffAdd(Owner, Target, "OdinScoreArchAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                        Else(() => {
                            SpellBuffAdd(Owner, Attacker, "OdinScoreAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                    If(Type, default, CO_EQUAL, default, BUFF_PhysicalImmunity, () => {
                        IfHasBuff(Owner, Owner, "OdinScoreLowHP", () => {
                            SpellBuffAdd(Owner, Target, "OdinScoreArchAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                        Else(() => {
                            SpellBuffAdd(Owner, Attacker, "OdinScoreAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        SetReturnValue(default);
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.7);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.7);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.7);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.7);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.7);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.7);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.7);
            });
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            DurationMod = 0.5;
            If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
                If(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
                });
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        ElseIf(Duration, default, CO_EQUAL, default, 37037, () => {
            SpellEffectCreate(ar, default, "SpellEffect_proc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
            this.WillRemove = true;
            If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
                If(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
                });
            });
        });
        If(Owner, default, CO_SAME_TEAM, Attacker, default, () => {
            If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
                If(Attacker, default, CO_NOT_EQUAL, Owner, default, () => {
                    If(Type, default, CO_EQUAL, default, BUFF_CombatEnchancer, () => {
                        SpellBuffAdd(Owner, Attacker, "OdinScoreAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        IfHasBuff(Owner, Owner, "OdinScoreLowHP", () => {
                            SpellBuffAdd(Owner, Target, "OdinScoreArchAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                    If(Type, default, CO_EQUAL, default, BUFF_Haste, () => {
                        SpellBuffAdd(Owner, Attacker, "OdinScoreAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        IfHasBuff(Owner, Owner, "OdinScoreLowHP", () => {
                            SpellBuffAdd(Owner, Target, "OdinScoreArchAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                    If(Type, default, CO_EQUAL, default, BUFF_Invulnerability, () => {
                        SpellBuffAdd(Owner, Attacker, "OdinScoreAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        IfHasBuff(Owner, Owner, "OdinScoreLowHP", () => {
                            SpellBuffAdd(Owner, Target, "OdinScoreArchAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                    If(Type, default, CO_EQUAL, default, BUFF_Heal, () => {
                        SpellBuffAdd(Owner, Attacker, "OdinScoreAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        IfHasBuff(Owner, Owner, "OdinScoreLowHP", () => {
                            SpellBuffAdd(Owner, Target, "OdinScoreArchAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                    If(Type, default, CO_EQUAL, default, BUFF_PhysicalImmunity, () => {
                        SpellBuffAdd(Owner, Attacker, "OdinScoreAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        IfHasBuff(Owner, Owner, "OdinScoreLowHP", () => {
                            SpellBuffAdd(Owner, Target, "OdinScoreArchAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Suppression, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        Else(() => {
            SetReturnValue(default);
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffAdd(Owner, Owner, "BootsOfMobilityDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffAdd(Owner, Owner, "BootsOfMobilityDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffAdd(Owner, Owner, "BootsOfMobilityDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffAdd(Owner, Owner, "BootsOfMobilityDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffAdd(Owner, Owner, "BootsOfMobilityDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffAdd(Owner, Owner, "BootsOfMobilityDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffAdd(Owner, Owner, "BootsOfMobilityDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffAdd(Owner, Owner, "BootsOfMobilityDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffAdd(Owner, Owner, "BootsOfMobilityDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        Else(() => {
            SetReturnValue(default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CCreduction = this.VALUE_BY_LEVEL;
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CCreduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CCreduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CCreduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CCreduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CCreduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CCreduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CCreduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            Duration = Math(0.3, MO_MAX, 0 + (Duration ?? 0));
        });
        If(Type, default, CO_EQUAL, default, BUFF_CombatEnchancer, () => {
            
        });
        Else(() => {
            If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_CombatDehancer, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffRemoveCurrent(Owner);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_CombatDehancer, () => {
                SpellBuffAdd(Owner, Owner, "AdrenalineRushDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffAdd(Owner, Owner, "AdrenalineRushDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffAdd(Owner, Owner, "AdrenalineRushDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffAdd(Owner, Owner, "AdrenalineRushDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffAdd(Owner, Owner, "AdrenalineRushDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffAdd(Owner, Owner, "AdrenalineRushDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffAdd(Owner, Owner, "AdrenalineRushDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffAdd(Owner, Owner, "AdrenalineRushDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffAdd(Owner, Owner, "AdrenalineRushDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffAdd(Owner, Owner, "AdrenalineRushDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                HardnessPercent = GetStat(GetPercentHardnessMod, Owner);
                If(HardnessPercent, default, CO_GREATER_THAN, default, 0.5, () => {
                    
                });
                Else(() => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.5);
                    ReversalDivisor = Math(1, MO_SUBTRACT, 0 + (HardnessPercent ?? 0));
                    Duration = Math(0 + (Duration ?? 0), MO_DIVIDE, 0 + (ReversalDivisor ?? 0));
                });
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        If(MaxStack, default, CO_EQUAL, default, 76, () => {
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Suppression, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(ScriptName, default, CO_EQUAL, default, "globalwallpush", () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        Else(() => {
            If(MaxStack, default, CO_EQUAL, default, 76, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(ScriptName, default, CO_EQUAL, default, "globalwallpush", () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Suppression, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_CombatDehancer, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_CombatDehancer, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_CombatDehancer, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_CombatDehancer, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_CombatDehancer, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CharVars.CCReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CharVars.CCReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CharVars.CCReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CharVars.CCReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CharVars.CCReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CharVars.CCReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CharVars.CCReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            Duration = Math(0.3, MO_MAX, 0 + (Duration ?? 0));
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                this.IsDisabled = 1;
                SpellBuffRemoveCurrent(Owner);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                this.IsDisabled = 1;
                SpellBuffRemoveCurrent(Owner);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                this.IsDisabled = 1;
                SpellBuffRemoveCurrent(Owner);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                this.IsDisabled = 1;
                SpellBuffRemoveCurrent(Owner);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                this.IsDisabled = 1;
                SpellBuffRemoveCurrent(Owner);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                this.IsDisabled = 1;
                SpellBuffRemoveCurrent(Owner);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Suppression, () => {
                this.IsDisabled = 1;
                SpellBuffRemoveCurrent(Owner);
            });
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        ElseIf(Duration, default, CO_EQUAL, default, 37037, () => {
            SpellEffectCreate(ar, default, "SpellEffect_proc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            this.WillRemove = true;
            SetReturnValue(default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        DurationMod = this.VALUE_BY_LEVEL;
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (DurationMod ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (PercentReduction ?? 0));
            });
            Duration = Math(0.3, MO_MAX, 0 + (Duration ?? 0));
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffAdd(Owner, Owner, "ShadowWalkSpeedHolder", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffAdd(Owner, Owner, "ShadowWalkSpeedHolder", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffAdd(Owner, Owner, "ShadowWalkSpeedHolder", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffAdd(Owner, Owner, "ShadowWalkSpeedHolder", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffAdd(Owner, Owner, "ShadowWalkSpeedHolder", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffAdd(Owner, Owner, "ShadowWalkSpeedHolder", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffAdd(Owner, Owner, "ShadowWalkSpeedHolder", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffAdd(Owner, Owner, "ShadowWalkSpeedHolder", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffAdd(Owner, Owner, "ShadowWalkSpeedHolder", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Suppression, () => {
                Say(Owner, "game_lua_BlackShield_immune", default);
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        Else(() => {
            SetReturnValue(default);
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                Say(Owner, "game_lua_Highlander", default);
                SetReturnValue(default);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                Say(Owner, "game_lua_Highlander", default);
                SetReturnValue(default);
            });
        });
        Else(() => {
            SetReturnValue(default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (this.CCReduc ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (this.CCReduc ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (this.CCReduc ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (this.CCReduc ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (this.CCReduc ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (this.CCReduc ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (this.CCReduc ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (this.CCReduc ?? 0));
            });
            If(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (this.CCReduc ?? 0));
            });
            Duration = Math(0.3, MO_MAX, 0 + (Duration ?? 0));
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        ElseIf(Duration, default, CO_EQUAL, default, 37037, () => {
            SpellEffectCreate(ar, default, "nocturne_shroud_deactivateTrigger.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
            this.WillRemove = true;
            SetReturnValue(default);
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                this.IsDisabled = 1;
            });
            If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                this.IsDisabled = 1;
            });
            If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                this.IsDisabled = 1;
            });
            If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                this.IsDisabled = 1;
            });
            If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                this.IsDisabled = 1;
            });
            If(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                this.IsDisabled = 1;
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_NOT_EQUAL, default, BUFF_Internal, () => {
                SetReturnValue(default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_NOT_EQUAL, default, BUFF_Internal, () => {
                SetReturnValue(default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Damage, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Polymorph, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
        });
        If(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Suppression, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
            Say(Owner, "game_lua_Ragnarok", default);
            SetReturnValue(default);
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(ScriptName, default, CO_EQUAL, default, "globalwallpush", () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Suppression, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_CombatDehancer, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        Else(() => {
            If(MaxStack, default, CO_EQUAL, default, 76, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
            SetReturnValue(default);
        });
        If(Attacker, default, CO_DIFFERENT_TEAM, Owner, default, () => {
            If(Type, default, CO_NOT_EQUAL, default, BUFF_Internal, () => {
                SetReturnValue(default);
            });
        });
        If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
            SetReturnValue(default);
        });
        If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
            SetReturnValue(default);
        });
        If(Attacker, default, CO_DIFFERENT_TEAM, Owner, default, () => {
            If(Type, default, CO_NOT_EQUAL, default, BUFF_Internal, () => {
                SetReturnValue(default);
            });
        });
        If(Attacker, default, CO_DIFFERENT_TEAM, Owner, default, () => {
            If(Type, default, CO_NOT_EQUAL, default, BUFF_Internal, () => {
                SetReturnValue(default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            IfHasBuff(Attacker, Owner, "PoppyDITarget", () => {
                SetReturnValue(default);
            });
            Else(() => {
                If(Type, default, CO_EQUAL, default, BUFF_CombatEnchancer, () => {
                    SetReturnValue(default);
                });
                Else(() => {
                    SetReturnValue(default);
                });
            });
        });
        Else(() => {
            SetReturnValue(default);
        });
        SetReturnValue(default);
        SetReturnValue(default);
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        ElseIf(Duration, default, CO_EQUAL, default, 37037, () => {
            SpellEffectCreate(ar, default, "SpellEffect_proc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
            this.WillRemove = true;
            SetReturnValue(default);
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(ScriptName, default, CO_EQUAL, default, "globalwallpush", () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Suppression, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_CombatDehancer, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        If(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        If(AvatarVars.MasteryJuggernaut, default, CO_EQUAL, default, true, () => {
            CCreduction = 0.9;
            If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
                If(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CCreduction ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CCreduction ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CCreduction ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CCreduction ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CCreduction ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CCreduction ?? 0));
                });
                If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                    Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0 + (CCreduction ?? 0));
                });
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(ScriptName, default, CO_EQUAL, default, "globalwallpush", () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Suppression, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_CombatDehancer, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(ScriptName, default, CO_EQUAL, default, "globalwallpush", () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Silence, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Blind, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_Suppression, () => {
                SetReturnValue(default);
            });
            ElseIf(Type, default, CO_EQUAL, default, BUFF_CombatDehancer, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(Type, default, CO_EQUAL, default, BUFF_Snare, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.65);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Slow, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.65);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Fear, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.65);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Net, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.65);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Sleep, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.65);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Stun, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.65);
            });
            If(Type, default, CO_EQUAL, default, BUFF_Taunt, () => {
                Duration = Math(0 + (Duration ?? 0), MO_MULTIPLY, 0.65);
            });
        });
    }
    public void BuffOnDeath()
    {
        #region VarDecl
        TeamId? TeamID = null;
        float? Count = null;
        float? NewDuration = null;
        AttackableUnit? Caster = null;
        TeamId? teamID = null;
        float? var = null;
        Object? Name1 = null;
        Object? Name2 = null;
        Champion? Attacker = null;
        Object? Level = null;
        Object? ManaRestore = null;
        Minion? Other3 = null;
        Vector3? TargetPos = null;
        Vector3? OwnerPos = null;
        Object? Cooldown = null;
        float? DLCooldown = null;
        Vector3? MissileEndPosition = null;
        bool? BecomeZombie = null;
        Vector3? CastPos = null;
        Minion? Other2 = null;
        #endregion
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            ForEachChampion(TEAM_ORDER, default, true, (Unit) => {
                If(Unit, default, CO_IS_NOT_DEAD, default, default, () => {
                    SpellBuffAdd(Unit, Unit, "ExaltedWithBaronNashor", 1, 1, 240, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                    IncGold(Unit, 100);
                });
            });
        });
        Else(() => {
            ForEachChampion(TEAM_CHAOS, default, true, (Unit) => {
                If(Unit, default, CO_IS_NOT_DEAD, default, default, () => {
                    SpellBuffAdd(Unit, Unit, "ExaltedWithBaronNashor", 1, 1, 240, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                    IncGold(Unit, 100);
                });
            });
        });
        Count = GetBuffCountFromAll(Attacker, "APBonusDamageToTowers");
        NewDuration = 60;
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            If(Attacker, default, CO_IS_NOT_DEAD, default, default, () => {
                IfHasBuff(Attacker, Attacker, "MonsterBuffs", () => {
                    NewDuration = Math(1.2, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                });
                SpellBuffAdd(Attacker, Attacker, default, 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        ElseIf(Count, default, CO_NOT_EQUAL, default, 0, () => {
            Caster = GetPetOwner(Attacker);
            If(Caster, default, CO_IS_TYPE_HERO, default, default, () => {
                If(Caster, default, CO_IS_NOT_DEAD, default, default, () => {
                    IfHasBuff(Caster, Caster, "MonsterBuffs", () => {
                        NewDuration = Math(1.2, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                    });
                    SpellBuffAdd(Caster, Caster, default, 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
        });
        Count = GetBuffCountFromAll(Attacker, "APBonusDamageToTowers");
        NewDuration = 60;
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            If(Attacker, default, CO_IS_NOT_DEAD, default, default, () => {
                IfHasBuff(Attacker, Attacker, "MonsterBuffs", () => {
                    NewDuration = Math(1.2, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                });
                SpellBuffAdd(Attacker, Attacker, default, 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        ElseIf(Count, default, CO_NOT_EQUAL, default, 0, () => {
            Caster = GetPetOwner(Attacker);
            If(Caster, default, CO_IS_TYPE_HERO, default, default, () => {
                If(Caster, default, CO_IS_NOT_DEAD, default, default, () => {
                    IfHasBuff(Caster, Caster, "MonsterBuffs", () => {
                        NewDuration = Math(1.2, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                    });
                    SpellBuffAdd(Caster, Caster, default, 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
        });
        SpellBuffAdd(Owner, Attacker, "CrestoftheAncientGolem", 1, 1, 180, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellEffectCreate(default, default, "NeutralMonster_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, default, default, default, default, default, default);
        Count = GetBuffCountFromAll(Attacker, "APBonusDamageToTowers");
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            If(Attacker, default, CO_IS_NOT_DEAD, default, default, () => {
                NewDuration = 150;
                IfHasBuff(Attacker, Attacker, "MonsterBuffs", () => {
                    NewDuration = Math(1.2, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                });
                SpellBuffAdd(Attacker, Attacker, default, 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        ElseIf(Count, default, CO_NOT_EQUAL, default, 0, () => {
            Caster = GetPetOwner(Attacker);
            If(Caster, default, CO_IS_TYPE_HERO, default, default, () => {
                If(Caster, default, CO_IS_NOT_DEAD, default, default, () => {
                    NewDuration = 150;
                    IfHasBuff(Caster, Caster, "MonsterBuffs", () => {
                        NewDuration = Math(1.2, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                    });
                    SpellBuffAdd(Caster, Caster, default, 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
        });
        Count = GetBuffCountFromAll(Attacker, "APBonusDamageToTowers");
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            If(Attacker, default, CO_IS_NOT_DEAD, default, default, () => {
                NewDuration = 150;
                IfHasBuff(Attacker, Attacker, "MonsterBuffs", () => {
                    NewDuration = Math(1.2, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                });
                SpellBuffAdd(Attacker, Attacker, default, 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        ElseIf(Count, default, CO_NOT_EQUAL, default, 0, () => {
            Caster = GetPetOwner(Attacker);
            If(Caster, default, CO_IS_TYPE_HERO, default, default, () => {
                If(Caster, default, CO_IS_NOT_DEAD, default, default, () => {
                    NewDuration = 150;
                    IfHasBuff(Caster, Caster, "MonsterBuffs", () => {
                        NewDuration = Math(1.2, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                    });
                    SpellBuffAdd(Caster, Caster, default, 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
        });
        Count = GetBuffCountFromAll(Attacker, "APBonusDamageToTowers");
        NewDuration = 90;
        NextBuffVars.ParticlePosition = this.ParticlePosition;
        If(Attacker, default, CO_IS_NOT_DEAD, default, default, () => {
            If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
                IfHasBuff(Attacker, Attacker, "MonsterBuffs", () => {
                    NewDuration = Math(1.15, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                });
                Else(() => {
                    IfHasBuff(Attacker, Attacker, "MonsterBuffs2", () => {
                        NewDuration = Math(1.3, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                    });
                });
                SpellBuffAdd(Attacker, Attacker, "BlessingoftheLizardElder_Twisted", 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        ElseIf(Count, default, CO_NOT_EQUAL, default, 0, () => {
            Caster = GetPetOwner(Attacker);
            If(Caster, default, CO_IS_TYPE_HERO, default, default, () => {
                If(Caster, default, CO_IS_NOT_DEAD, default, default, () => {
                    NewDuration = 150;
                    IfHasBuff(Caster, Caster, "MonsterBuffs", () => {
                        NewDuration = Math(1.15, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                    });
                    Else(() => {
                        IfHasBuff(Caster, Caster, "MonsterBuffs2", () => {
                            NewDuration = Math(1.3, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                        });
                    });
                    SpellBuffAdd(Caster, Caster, default, 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
        });
        SpellBuffAdd(Owner, Attacker, "BlessingoftheLizardElder", 1, 1, 180, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellEffectCreate(default, default, "NeutralMonster_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Owner, Attacker, "FireoftheGreatDragon", 1, 1, 180, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        teamID = GetTeamID(default);
        If(teamID, default, CO_EQUAL, default, 100, () => {
            ForEachChampion(TEAM_ORDER, default, true, (Unit) => {
                NewDuration = 120;
                IfHasBuff(Unit, Unit, "MonsterBuffs", () => {
                    NewDuration = Math(1.15, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                });
                Else(() => {
                    IfHasBuff(Unit, Unit, "MonsterBuffs2", () => {
                        NewDuration = Math(1.3, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                    });
                });
                If(Unit, default, CO_IS_NOT_DEAD, default, default, () => {
                    SpellBuffAdd(Unit, Unit, "CrestofCrushingWrath", 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                });
            });
        });
        ElseIf(teamID, default, CO_EQUAL, default, 200, () => {
            ForEachChampion(TEAM_CHAOS, default, true, (Unit) => {
                NewDuration = 120;
                IfHasBuff(Unit, Unit, "MonsterBuffs", () => {
                    NewDuration = Math(1.15, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                });
                Else(() => {
                    IfHasBuff(Unit, Unit, "MonsterBuffs2", () => {
                        NewDuration = Math(1.3, MO_MULTIPLY, 0 + (NewDuration ?? 0));
                    });
                });
                If(Unit, default, CO_IS_NOT_DEAD, default, default, () => {
                    SpellBuffAdd(Unit, Unit, "CrestofCrushingWrath", 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                });
            });
        });
        If(Owner, default, CO_IS_NOT_HERO, default, default, () => {
            NextBuffVars.ParticlePosition = this.ParticlePosition;
            SpellBuffAdd(Attacker, Attacker, "DragonVisionBuff", 1, 1, 90, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        Caster = SetBuffCasterUnit();
        If(Caster, default, CO_IS_TYPE_AI, default, default, () => {
            If(Caster, default, CO_IS_TYPE_TURRET, default, default, () => {
                SpellBuffRemove(Caster, "Teleport_Turret", Owner, default);
            });
            Else(() => {
                SpellBuffRemove(Caster, "Teleport_Target", Owner, default);
            });
        });
        SpellBuffRemoveCurrent(Owner);
        var = GetStat(GetPercentRespawnTimeMod, Owner);
        Alert("YO!", var);
        this.TotalDamageOT = 0;
        Name1 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        Name2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(Name1, default, CO_EQUAL, default, "SummonerSpawn", () => {
            SetSlotSpellCooldownTimeVer2(24, 0, SpellSlots, SPELLBOOK_SUMMONER, Owner, default);
        });
        If(Name2, default, CO_EQUAL, default, "SummonerSpawn", () => {
            SetSlotSpellCooldownTimeVer2(24, 1, SpellSlots, SPELLBOOK_SUMMONER, Owner, default);
        });
        this.TotalDamageOT = 0;
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectUseable ", "OdinGuardianBuff", true, (Unit) => {
            SpellBuffClear(Unit, "OdinQuestIndicator");
        });
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            If(Attacker, default, CO_IS_NOT_DEAD, default, default, () => {
                SpellBuffAdd(Attacker, Attacker, default, 1, 1, 120, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
            });
        });
        SpellBuffAdd(Owner, Owner, "LuxDeathParticleTimer", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            this.WillRemove = true;
        });
        SpellEffectRemove(this.Particle1);
        this.ParticleAlive = false;
        Caster = SetBuffCasterUnit();
        SpellBuffClear(Caster, "SkarnerImpale");
        IfNotHasBuff(Owner, Nothing, "YorickReviveAllySelf", () => {
            IfNotHasBuff(Owner, Nothing, "YorickRADelay", () => {
                ForEachUnitInTargetArea(Owner, Owner, 20000, "AffectFriends AffectMinions ", default, true, (Unit) => {
                    IfHasBuff(Unit, Owner, "H28GEvolutionTurret", () => {
                        ApplyDamage(Attacker, Unit, 1000, PHYSICAL_DAMAGE, DAMAGESOURCE_RAW, 1, 1, 0, false, false, Attacker);
                    });
                });
            });
        });
        SpellEffectRemove(this.TremorsFx);
        Attacker = GetChampionBySkinName("Malzahar", this.teamID ?? TEAM_UNKNOWN);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        ManaRestore = this.VALUE_BY_LEVEL;
        IncPAR(Attacker, 0 + (ManaRestore ?? 0));
        ForNClosestUnitsInTargetArea(Attacker, Owner, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, false, "AlZaharRecentVis", (Unit) => {
            BreakSpellShields(Unit);
            SpellBuffAdd(Attacker, Unit, "AlZaharRecentVis", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            SpellBuffAdd(Attacker, Unit, "AlZaharMaleficVisions", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, default, default);
        });
        SpellEffectCreate(this.particle1, default, "CassiopeiaDeath.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 20000, "AffectFriends AffectMinions ", default, true, (Unit) => {
            IfHasBuff(Unit, Owner, "AlZaharVoidling", () => {
                ApplyDamage(Attacker, Unit, 2000, PHYSICAL_DAMAGE, DAMAGESOURCE_RAW, 1, 1, 1, false, false, default);
            });
        });
        Other3 = SetBuffCasterUnit();
        TargetPos = GetUnitPosition(Other3);
        OwnerPos = GetUnitPosition(Owner);
        SpellCast(Other3, Other3, default, default, true, 2, ExtraSlots, 1, true, true, false, false, false, OwnerPos);
        SpellEffectCreate(default, default, "DeathsCaress_nova.prt", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        If(Attacker, default, CO_IS_DEAD, default, default, () => {
            
        });
        Else(() => {
            NextBuffVars.DamageBonus = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Attacker, Attacker, "SiphoningStrikeDamageBonus", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Caster = SetBuffCasterUnit();
        If(Caster, default, CO_IS_DEAD, default, default, () => {
            
        });
        Else(() => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Caster, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Caster, GetSlotSpellCooldownTime);
                If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                    SetSlotSpellCooldownTime(Caster, 1, SPELLBOOK_CHAMPION, SpellSlots, 0);
                });
            });
        });
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            this.WillRemove = true;
        });
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, default, (Unit) => {
            IfHasBuff(Unit, Unit, "Voracity", () => {
                SpellEffectCreate(Placeholder, default, "katarina_spell_refresh_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, false, default, default, default, default, default, default);
                IncGold(Unit, 50);
                SetSlotSpellCooldownTime(Unit, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
                SetSlotSpellCooldownTime(Unit, 1, SPELLBOOK_CHAMPION, SpellSlots, 0);
                SetSlotSpellCooldownTime(Unit, 2, SPELLBOOK_CHAMPION, SpellSlots, 0);
                DLCooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Unit, GetSlotSpellCooldownTime);
                If(DLCooldown, default, CO_GREATER_THAN, default, 15, () => {
                    DLCooldown = Math(0 + (DLCooldown ?? 0), MO_SUBTRACT, 15);
                    SetSlotSpellCooldownTime(Unit, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + (DLCooldown ?? 0));
                });
                Else(() => {
                    SetSlotSpellCooldownTime(Unit, 3, SPELLBOOK_CHAMPION, SpellSlots, 0);
                });
            });
        });
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            this.WillRemove = true;
        });
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Caster = SetBuffCasterUnit();
        If(Attacker, default, CO_IS_NOT_DEAD, default, default, () => {
            If(Attacker, default, CO_EQUAL, Caster, default, () => {
                IncGold(Attacker, 0 + (this.GoldGain ?? 0));
            });
        });
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
            IfHasBuff(Unit, Unit, "SilentKiller", () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Unit, GetSlotSpellLevel);
                If(Level, default, CO_GREATER_THAN, default, 0, () => {
                    SetSlotSpellCooldownTime(Unit, 3, SPELLBOOK_CHAMPION, SpellSlots, 0);
                });
            });
        });
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes ", default, true, (Unit) => {
            IfHasBuff(Unit, Nothing, "OrianaGhost", () => {
                SpellBuffClear(Unit, "OrianaGhost");
            });
        });
        SpellEffectRemove(this.OrianaPointer);
        If(this.GhostSpawned, default, CO_EQUAL, default, false, () => {
            If(this.MinionBall, default, CO_EQUAL, default, false, () => {
                Caster = SetBuffCasterUnit();
                MissileEndPosition = GetUnitPosition(Owner);
                TeamID = GetTeamID(default);
                this.GhostSpawned = true;
                Other3 = SpawnMinion("TheDoomBall", "OriannaBall", "idle.lua", MissileEndPosition, TeamID ?? TEAM_ORDER, false, true, false, true, true, true, 0, false, true, Caster, default);
                SpellBuffAdd(Caster, Other3, "OrianaGhost", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SpellBuffAdd(Caster, Other3, "OrianaGhostMinion", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SpellBuffClear(Owner, "OrianaGhost");
            });
        });
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            BecomeZombie = true;
        });
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            BecomeZombie = true;
        });
        Count = GetBuffCountFromCaster(Owner, Owner, "Feast");
        Count = Math(0.5, MO_MULTIPLY, 0 + (Count ?? 0));
        If(Count, default, CO_LESS_THAN, default, 1.5, () => {
            SpellBuffRemoveStacks(Owner, Owner, "Feast", 1);
        });
        ElseIf(Count, default, CO_LESS_THAN, default, 2.5, () => {
            SpellBuffRemoveStacks(Owner, Owner, "Feast", 2);
        });
        Else(() => {
            SpellBuffRemoveStacks(Owner, Owner, "Feast", 3);
        });
        If(Attacker, default, CO_IS_DEAD, default, default, () => {
            
        });
        Else(() => {
            IncPAR(Attacker, 0 + (this.ManaCost ?? 0));
        });
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            BecomeZombie = true;
        });
        Caster = SetBuffCasterUnit();
        IfHasBuff(Caster, Owner, "PoppyDiplomaticImmunity", () => {
            SpellBuffRemove(Caster, "PoppyDiplomaticImmunity", Owner, default);
        });
        If(Attacker, default, CO_IS_NOT_TURRET, default, default, () => {
            If(Attacker, default, CO_IS_TYPE_AI, default, default, () => {
                TeamID = GetTeamID(default);
                CastPos = GetUnitPosition(Owner);
                Other2 = SpawnMinion("k", "TestCubeRender", "idle.lua", CastPos, TeamID ?? TEAM_UNKNOWN, true, true, false, true, true, true, 0, false, true, Nothing, default);
                SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SetSpell(Other2, 0, SpellSlots, SPELLBOOK_CHAMPION, "MonsterRegenSpell");
                SpellCast(Other2, Attacker, CastPos, default, true, 0, SpellSlots, 1, false, true, false, false, false, CastPos);
            });
        });
    }
    public void BuffOnDealDamage()
    {
        #region VarDecl
        TeamId? TeamID = null;
        float? CurrentTime = null;
        float? TimeDiff = null;
        float? Distance = null;
        float? DamageAmount = null;
        #endregion
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Attacker, Target, "CallForHelp", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Target, default, CO_NOT_EQUAL, Owner, default, () => {
            SpellBuffAdd(Owner, Owner, "OdinCombatActive", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Attacker, Target, "CallForHelp", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        TeamID = GetTeamID(default);
        CurrentTime = GetGameTime();
        TimeDiff = Math(0 + (CurrentTime ?? 0), MO_SUBTRACT, 0 + (this.PrevSpellTrigger ?? 0));
        If(Owner, default, CO_NOT_EQUAL, Target, default, () => {
            If(TimeDiff, default, CO_GREATER_THAN_OR_EQUAL, default, 4, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                        If(default, DAMAGESOURCE_PERIODIC, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
                            If(default, DAMAGESOURCE_PROC, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
                                If(default, DAMAGESOURCE_DEFAULT, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
                                    Distance = DistanceBetweenObjects("Owner", "Target");
                                    If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 1600, () => {
                                        SpellEffectCreate(this.ParticleID, default, "Odin_CenterbuffBeam.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Attacker, "head", default, Target, "root", default, true, false, false, false, false, default, default);
                                        this.PrevSpellTrigger = CurrentTime;
                                        ApplyDamage(Owner, Target, 0 + (this.TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.8);
        });
        If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
            If(CharVars.DoOnce, default, CO_EQUAL, default, false, () => {
                CharVars.DoOnce = true;
            });
        });
        SpellBuffAdd(Owner, Owner, "ShadowWalkSpeedHolder", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
    }
    public void BuffOnHitUnit()
    {
        #region VarDecl
        float? DamageAmount = null;
        Object? Level = null;
        float? DamageBonus = null;
        float? newDamage = null;
        float? MaxHealth = null;
        TeamId? TeamId = null;
        float? Damage = null;
        ObjAIBase? Caster = null;
        int? TurretBuffCount = null;
        int? TargetBuffCount = null;
        float? BuffCount = null;
        float? healthPercent = null;
        TeamId? TeamID = null;
        float? maxHealth = null;
        double? RegenPercent = null;
        float? HealthToInc = null;
        int? Count = null;
        float? AttackDamage = null;
        float? PhysicalBonus = null;
        float? AOEDmg = null;
        float? RadiusOfCleave = null;
        float? AoEDamage = null;
        float? DamagePercent = null;
        Object? BaseDamage = null;
        Object? baseDamage = null;
        float? totalDamage = null;
        float? damageDifference = null;
        float? bonusDamage = null;
        float? abilityPower = null;
        float? bonusAPDamage = null;
        float? UnitCount = null;
        Vector3? TargetPos = null;
        Object? CleavePerc = null;
        float? DamageAmount2 = null;
        float? Distance = null;
        long? HealthRestoration = null;
        long? TrueDamage = null;
        float? BonusDamage = null;
        float? TotalAD = null;
        float? BonusADRatio = null;
        string? HitResult = null;
        float? DamageToDeal = null;
        Object? CD0 = null;
        float? Slot0CD = null;
        Object? CD2 = null;
        float? Slot2CD = null;
        Object? CD3 = null;
        float? Slot3CD = null;
        float? HealthOne = null;
        float? HealthCost = null;
        float? CurrentHealth = null;
        Object? ManaGainAmount = null;
        float? ModifiedManaGainAmount = null;
        float? RedCardDamage = null;
        long? SpellCooldown = null;
        float? CooldownStat = null;
        float? Multiplier = null;
        float? NewCooldown = null;
        float? TAD = null;
        float? totalAttackDamage = null;
        float? BaseAD = null;
        float? PassiveAD = null;
        float? RemainingDuration = null;
        float? NewDuration = null;
        float? BaseAttackDamage = null;
        Object? ProcDamage = null;
        float? HealthPercent = null;
        float? DotDamage = null;
        float? TargetHealth = null;
        float? APBonus = null;
        float? MagicDamageAmount = null;
        float? SelfAP = null;
        long? TotalIncValue = null;
        Object? CoreDamage = null;
        bool? IsCCD = null;
        float? TrueDamageAmount = null;
        float? Temp1 = null;
        float? APMod = null;
        float? ModdedDmg = null;
        float? PreCount = null;
        float? DamageDealt = null;
        TeamId? teamID = null;
        float? TotalDamage = null;
        bool? CanMove = null;
        TeamId? TeamIDTarget = null;
        float? AbilityPower = null;
        float? BonusMaxHealthDamage = null;
        float? TarMaxHealth = null;
        float? RankScaling = null;
        Object? FlatScaling = null;
        Champion? Attacker = null;
        Object? Time = null;
        float? PassiveMultiplier = null;
        Object? LifestealPercent = null;
        float? HealAmount = null;
        Object? MaxDamage = null;
        float? SpectralDuration = null;
        float? AbilityDamageToAdd = null;
        float? BonusAttackPower = null;
        float? PercentBase = null;
        #endregion
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Owner, Target, "CallForHelp", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        DamageAmount = 10000;
        Level = this.Level;
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                    
                });
                Else(() => {
                    DamageBonus = this.VALUE_BY_LEVEL;
                    DamageAmount = Math(0 + (DamageBonus ?? 0), MO_ADD, 0 + (DamageAmount ?? 0));
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                    If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                            
                        });
                        Else(() => {
                            Level = GetLevel(Owner);
                            NextBuffVars.TickDamage = this.VALUE_BY_LEVEL;
                            NextBuffVars.attackSpeedMod = this.VALUE_BY_LEVEL;
                            SpellBuffAdd(Attacker, Target, "Burning", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 1, true, false, false, default);
                            If(Owner, default, CO_IS_RANGED, default, default, () => {
                                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                            });
                            Else(() => {
                                IfHasBuff(Owner, Nothing, "JudicatorRighteousFury", () => {
                                    NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                                });
                                Else(() => {
                                    NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                                });
                            });
                            NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
                            SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                SpellBuffAdd(Attacker, Target, "Burning", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, default, default, default, default);
            });
        });
        this.WillRemove = true;
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            BreakSpellShields(Target);
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
                SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        If(this.BreakDamage, default, CO_GREATER_THAN, default, 0, () => {
            ApplyDamage(Owner, Target, 0 + (this.BreakDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        });
        If(this.Splash, default, CO_EQUAL, default, true, () => {
            newDamage = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.5);
            ForEachUnitInTargetArea(Owner, Target, 250, "AffectEnemies AffectMinions AffectHeroes ", default, true, (Unit) => {
                If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                    ApplyDamage(Attacker, Unit, 0 + (newDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 1, 1, false, false, default);
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(Target, default, CO_IS_NOT_HERO, default, default, () => {
                    DamageAmount = Math(0 + (DamageAmount ?? 0), MO_ADD, 9);
                });
            });
        });
        If(this.Splash, default, CO_EQUAL, default, true, () => {
            newDamage = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.5);
            ForEachUnitInTargetArea(Owner, Target, 250, "AffectEnemies AffectMinions AffectHeroes ", default, true, (Unit) => {
                If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                    ApplyDamage(Attacker, Unit, 0 + (newDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 1, 1, false, false, Attacker);
                });
            });
        });
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_ADD, 15);
        });
        IfHasBuff(Owner, Owner, "PromoteMeBuff", () => {
            SpellEffectCreate(Gemhit, default, "GemKnightBasicAttack_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.25);
        });
        SpellBuffAdd(Attacker, Attacker, "OdinBloodbursterBuff", 7, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Owner, Target, "CallForHelp", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                    If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                        MaxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
                        TeamId = GetTeamID(default);
                        Damage = Math(0.025, MO_MULTIPLY, 0 + (MaxHealth ?? 0));
                        If(TeamId, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                            Damage = Math(120, MO_MIN, 0 + (Damage ?? 0));
                        });
                        Caster = SetBuffCasterUnit();
                        If(Attacker, default, CO_IS_NOT_HERO, default, default, () => {
                            Caster = GetPetOwner(Attacker);
                        });
                        ApplyDamage(Caster, Target, 0 + (Damage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
                    });
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                SpellEffectCreate(num, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, false, default, false, false, default, default);
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                SpellEffectCreate(default, default, "TiamatMelee_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, false, default, default, default);
                If(Owner, default, CO_IS_RANGED, default, default, () => {
                    TempTable1.ThirdDA = Math(0.4, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                });
                Else(() => {
                    IfHasBuff(Owner, Nothing, "JudicatorRighteousFury", () => {
                        TempTable1.ThirdDA = Math(0.4, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                    });
                    Else(() => {
                        TempTable1.ThirdDA = Math(0.6, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                    });
                });
                ForEachUnitInTargetArea(Owner, Target, 210, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                    If(Target, default, CO_NOT_EQUAL, Unit, default, () => {
                        If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
                            ApplyDamage(Owner, Unit, 0 + (TempTable1.ThirdDA ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, true, true, Attacker);
                        });
                        ElseIf(DamageType, default, CO_EQUAL, default, PHYSICAL_DAMAGE, () => {
                            ApplyDamage(Owner, Unit, 0 + (TempTable1.ThirdDA ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, true, true, Attacker);
                        });
                        Else(() => {
                            ApplyDamage(Owner, Unit, 0 + (TempTable1.ThirdDA ?? 0), TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, true, true, Attacker);
                        });
                    });
                });
            });
        });
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            ApplyTaunt(Owner, Target, 5);
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                    If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                            
                        });
                        Else(() => {
                            NextBuffVars.TickDamage = 40;
                            NextBuffVars.attackSpeedMod = 0;
                            SpellBuffAdd(Attacker, Target, "EntropyBurning", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 1, true, false, false, default);
                            SpellBuffAdd(Target, Target, "Internal_30Slow", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                            SpellBuffAdd(Owner, Target, "ItemSlow", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                this.BonusDamage = Math(0 + (this.BonusDamage ?? 0), MO_ADD, 0.125);
                this.BonusArmor = Math(0 + (this.BonusArmor ?? 0), MO_ADD, 0.125);
            });
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            TurretBuffCount = GetBuffCountFromCaster(Owner, Owner, "TurretDamageMarker");
            TargetBuffCount = GetBuffCountFromCaster(Target, Owner, "TurretDamageMarker");
            BuffCount = Math(0 + (TurretBuffCount ?? 0), MO_ADD, 0 + (TargetBuffCount ?? 0));
            DamageBonus = Math(0.2, MO_MULTIPLY, 0 + (BuffCount ?? 0));
            DamageBonus = Math(0.9, MO_ADD, 0 + (DamageBonus ?? 0));
            DamageAmount = Math(0 + (DamageBonus ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
            If(TurretBuffCount, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
                SpellBuffAdd(Owner, Target, "TurretDamageMarker", 3, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, default, default);
            });
            SpellBuffAdd(Owner, Owner, "TurretDamageMarker", 3, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, default, default);
        });
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
                If(healthPercent, default, CO_LESS_THAN, default, 1, () => {
                    TeamID = GetTeamID(default);
                    maxHealth = GetPAROrHealth(Attacker, GetMaxHealth, PAR_MANA);
                    Level = GetLevel(Owner);
                    RegenPercent = 0.07;
                    HealthToInc = Math(0 + (maxHealth ?? 0), MO_MULTIPLY, 0 + (RegenPercent ?? 0));
                    IncHealth(Owner, 0 + (HealthToInc ?? 0), Owner);
                    SpellEffectCreate(ar, default, "Maokai_Heal.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
                    SpellBuffClear(Owner, "MaokaiSapMagicMelee");
                });
            });
        });
        IncPAR(Owner, 15);
        this.TotalHits = Math(0 + (this.TotalHits ?? 0), MO_SUBTRACT, 1);
        If(this.TotalHits, default, CO_EQUAL, default, 0, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        IfHasBuff(Target, Attacker, "LuxIlluminatingFraulein", () => {
            TeamID = GetTeamID(default);
            ApplyDamage(Attacker, Target, 0 + (CharVars.IlluminateDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            SpellEffectCreate(MotaExplosion, default, "LuxPassive_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
            SpellBuffRemove(Target, "LuxIlluminatingFraulein", Attacker, 0);
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                IfNotHasBuff(Owner, Owner, "Pantheon_AegisShield2", () => {
                    IfNotHasBuff(Owner, Owner, "Pantheon_AegisShield", () => {
                        SpellBuffAdd(Owner, Owner, "Pantheon_Aegis_Counter", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Aura, 0, false, false, false, default);
                        Count = GetBuffCountFromAll(Owner, "Pantheon_Aegis_Counter");
                        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 4, () => {
                            SpellBuffAdd(Owner, Owner, "Pantheon_AegisShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                            SpellBuffClear(Owner, "Pantheon_Aegis_Counter");
                        });
                    });
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                TeamID = GetTeamID(default);
                SpellEffectRemove(this.Particle);
                AttackDamage = GetStat(GetFlatPhysicalDamageMod, Owner);
                PhysicalBonus = Math(0 + (AttackDamage ?? 0), MO_MULTIPLY, 0.4);
                AOEDmg = Math(0 + (PhysicalBonus ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
                SpellEffectCreate(this.Particle, default, "EmpowerTwoHit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
                BreakSpellShields(Target);
                ApplyDamage(Attacker, Target, 0 + (AOEDmg ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.4, 1, false, false, Attacker);
                SpellEffectCreate(this.Particle, default, "EmpowerTwoHit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
                SpellBuffRemove(Owner, "EmpowerTwo", Owner, 0);
                SetDodgePiercing(Owner, false);
            });
        });
        SpellEffectCreate(part, default, "TiamatMelee_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, false, default, default, default);
        Count = GetBuffCountFromAll(Owner, "EmpowerCleave");
        DamageBonus = Math(0 + (this.DamagePerStack ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
        RadiusOfCleave = Math(125, MO_MULTIPLY, 0 + (Count ?? 0));
        AoEDamage = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.6);
        ForEachUnitInTargetArea(Owner, Target, 0 + (RadiusOfCleave ?? 0), "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            If(Target, default, CO_NOT_EQUAL, Unit, default, () => {
                ApplyDamage(Attacker, Unit, 0 + (AoEDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
            });
        });
        ApplyDamage(Attacker, Target, 0 + (DamageBonus ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        SpellBuffRemove(Owner, "Empower", Owner, 0);
        SpellBuffRemoveStacks(Owner, Owner, "EmpowerCleave", 0);
        CharVars.LastHitTime = GetTime();
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                
            });
            SpellBuffAdd(Owner, Owner, "ArmsmasterRelentlessCounter", 10, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, default, default);
            If(CharVars.NumSwings, default, CO_LESS_THAN_OR_EQUAL, default, 9, () => {
                CharVars.NumSwings = Math(0 + (CharVars.NumSwings ?? 0), MO_ADD, 1);
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    
                });
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    SpellBuffAdd(Attacker, Attacker, "RelentlessAssaultDebuff", 8, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, default, default);
                    Count = GetBuffCountFromCaster(Attacker, Attacker, "RelentlessAssaultDebuff");
                    If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
                        SpellBuffAdd(Owner, Owner, "RelentlessAssaultMarker", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                DamagePercent = Math(0.075, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                IncPAR(Owner, 0 + (DamagePercent ?? 0));
            });
        });
        If(this.IsActive, default, CO_EQUAL, default, true, () => {
            SpellBuffRemove(Owner, "RelentlessAssaultMarker", Owner, default);
            SpellBuffRemoveStacks(Attacker, Attacker, "RelentlessAssaultDebuff", 0);
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            Caster = SetBuffCasterUnit();
            NextBuffVars.DamageToDeal = DamageAmount;
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            SpellBuffAdd(Target, Caster, "MordekaiserCOTGPetDmg", 1, 1, 0.001, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            Caster = SetBuffCasterUnit();
            SpellBuffAdd(Caster, Caster, "MordekaiserCOTGPetDmg", 1, 1, 0.001, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ApplyDamage(Caster, Target, 0 + (DamageAmount ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, true, true, Caster);
            DamageAmount = 0;
        });
        If(Target, default, CO_IS_NOT_AI, default, default, () => {
            
        });
        ElseIf(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            
        });
        Else(() => {
            TeamID = GetTeamID(default);
            this.WillRemove = true;
            SpellBuffAdd(Owner, Owner, "MordekaiserSyphonParticle", 1, 1, 0.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            BaseDamage = this.VALUE_BY_LEVEL;
            baseDamage = GetStat(GetBaseAttackDamage, Owner);
            totalDamage = GetTotalAttackDamage(Owner);
            damageDifference = 0;
            If(DamageAmount, default, CO_GREATER_THAN, totalDamage, default, () => {
                damageDifference = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (totalDamage ?? 0));
            });
            bonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (baseDamage ?? 0));
            BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (bonusDamage ?? 0));
            abilityPower = GetStat(GetFlatMagicDamageMod, Owner);
            bonusAPDamage = Math(0 + (abilityPower ?? 0), MO_MULTIPLY, 0.4);
            BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (bonusAPDamage ?? 0));
            UnitCount = 0;
            ForEachUnitInTargetArea(Owner, Target, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                UnitCount = Math(0 + (UnitCount ?? 0), MO_ADD, 1);
            });
            If(UnitCount, default, CO_GREATER_THAN, default, 1, () => {
                SpellEffectCreate(a, default, "mordakaiser_maceOfSpades_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
                TargetPos = GetUnitPosition(Target);
                ForNClosestUnitsInTargetArea(Owner, Target, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 4, true, default, (Unit) => {
                    If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                        SpellCast(Owner, Unit, Target, Target, true, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, TargetPos);
                    });
                });
            });
            Else(() => {
                BaseDamage = Math(0 + (BaseDamage ?? 0), MO_MULTIPLY, 1.65);
                SpellEffectCreate(b, default, "mordakaiser_maceOfSpades_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            If(damageDifference, default, CO_GREATER_THAN, default, 0, () => {
                BaseDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (damageDifference ?? 0));
            });
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            NextBuffVars.BaseDamage = BaseDamage;
            SpellBuffAdd(Target, Owner, "MordekaiserMaceOfSpadesDmg", 1, 1, 0.001, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        });
        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            CleavePerc = this.VALUE_BY_LEVEL;
            DamageAmount2 = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (CleavePerc ?? 0));
            IfHasBuff(Attacker, Attacker, "ObduracyBuff", () => {
                SpellEffectCreate(a, default, "MalphiteCleaveEnragedHit.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "MalphiteCleaveHit.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
            ForEachUnitInTargetArea(Owner, Target, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                    Distance = DistanceBetweenObjects("Attacker", "Unit");
                    If(Distance, default, CO_LESS_THAN, default, 200, () => {
                        If(Owner, default, CO_IS_TARGET_IN_FRONT_OF_ME, Unit, default, () => {
                            If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
                                ApplyDamage(Attacker, Unit, 0 + (DamageAmount2 ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
                                SpellEffectCreate(a, default, "globalhit_physical.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                IfHasBuff(Attacker, Attacker, "ObduracyBuff", () => {
                                    SpellEffectCreate(a, default, "MalphiteCleaveEnragedHit.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                });
                                Else(() => {
                                    SpellEffectCreate(a, default, "MalphiteCleaveHit.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                });
                            });
                            ElseIf(DamageType, default, CO_EQUAL, default, PHYSICAL_DAMAGE, () => {
                                ApplyDamage(Attacker, Unit, 0 + (DamageAmount2 ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
                                SpellEffectCreate(a, default, "globalhit_physical.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                IfHasBuff(Attacker, Attacker, "ObduracyBuff", () => {
                                    SpellEffectCreate(a, default, "MalphiteCleaveEnragedHit.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                });
                                Else(() => {
                                    SpellEffectCreate(a, default, "MalphiteCleaveHit.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                });
                            });
                            Else(() => {
                                ApplyDamage(Attacker, Unit, 0 + (DamageAmount2 ?? 0), TRUE_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
                                SpellEffectCreate(a, default, "globalhit_physical.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                IfHasBuff(Attacker, Attacker, "ObduracyBuff", () => {
                                    SpellEffectCreate(a, default, "MalphiteCleaveEnragedHit.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                });
                                Else(() => {
                                    SpellEffectCreate(a, default, "MalphiteCleaveHit.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                                });
                            });
                        });
                    });
                });
            });
        });
        If(Target, default, CO_IS_NOT_AI, default, default, () => {
            SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                    If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                        NextBuffVars.DamagePerTick = this.VALUE_BY_LEVEL;
                        SpellBuffAdd(Owner, Target, "ToxicShotParticle", 1, 1, 5.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Poison, 0, true, false, false, default);
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                IfHasBuff(Owner, Owner, "ShenWayOfTheNinjaAura", () => {
                    this.LastHit = GetGameTime();
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        HealthRestoration = this.VALUE_BY_LEVEL;
        IncHealth(Owner, 0 + (HealthRestoration ?? 0), Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        TrueDamage = this.VALUE_BY_LEVEL;
        HealthRestoration = this.VALUE_BY_LEVEL;
        IncHealth(Owner, 0 + (HealthRestoration ?? 0), Owner);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                ApplyDamage(Attacker, Target, 0 + (TrueDamage ?? 0), TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, false, false, Attacker);
            });
        });
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BonusDamage = this.VALUE_BY_LEVEL;
        TotalAD = GetTotalAttackDamage(Owner);
        BonusADRatio = Math(0 + (TotalAD ?? 0), MO_MULTIPLY, 0.1);
        BonusDamage = Math(0 + (BonusADRatio ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
            HitResult = HIT_Normal;
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                DamageToDeal = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (DamageAmount ?? 0));
                SpellEffectCreate(a, default, "monkey_king_crushingBlow_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
                SpellBuffRemove(Owner, "MonkeyKingDoubleAttack", Owner, 0);
            });
            Else(() => {
                DamageToDeal = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (DamageAmount ?? 0));
                NextBuffVars.ArmorDebuff = this.VALUE_BY_LEVEL;
                BreakSpellShields(Target);
                SpellBuffAdd(Attacker, Target, "MonkeyKingDoubleAttackDebuff", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                SpellEffectCreate(a, default, "monkey_king_crushingBlow_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
                SpellBuffRemove(Owner, "MonkeyKingDoubleAttack", Owner, 0);
            });
        });
        Else(() => {
            DamageToDeal = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (DamageAmount ?? 0));
            SpellBuffRemove(Owner, "MonkeyKingDoubleAttack", Owner, 0);
        });
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        SpellEffectCreate(HealParticle, default, "olaf_viciousStrikes_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                CharVars.ComboCounter = Math(0 + (CharVars.ComboCounter ?? 0), MO_ADD, 1);
                If(CharVars.ComboCounter, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
                    CharVars.ComboCounter = 0;
                    Level = GetLevel(Owner);
                    this.HealAmount = this.VALUE_BY_LEVEL;
                    IncHealth(Owner, 0 + (this.HealAmount ?? 0), Owner);
                    SpellEffectCreate(num, default, "xenZiou_heal_passive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, default, default, false, false, default, default);
                });
            });
        });
        CD0 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        Slot0CD = Math(0 + (CD0 ?? 0), MO_SUBTRACT, 1);
        SetSlotSpellCooldownTimeVer2(0 + (Slot0CD ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        CD2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        Slot2CD = Math(0 + (CD2 ?? 0), MO_SUBTRACT, 1);
        SetSlotSpellCooldownTimeVer2(0 + (Slot2CD ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        CD3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        Slot3CD = Math(0 + (CD3 ?? 0), MO_SUBTRACT, 1);
        SetSlotSpellCooldownTimeVer2(0 + (Slot3CD ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        DamageToDeal = Math(0, MO_ADD, 0 + (DamageAmount ?? 0));
        SpellBuffClear(Owner, "EnrageDeathRecapFix");
        ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        HealthOne = Math(0 + (Level ?? 0), MO_MULTIPLY, -2);
        HealthCost = Math(0 + (HealthOne ?? 0), MO_ADD, -4);
        CurrentHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        If(CurrentHealth, default, CO_GREATER_THAN_OR_EQUAL, default, 15, () => {
            IncHealth(Owner, 0 + (HealthCost ?? 0), Owner);
        });
        Else(() => {
            SpellBuffRemoveCurrent(Owner);
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Owner, Target, "FrostArrow", 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, default, default, default);
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                    If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                        NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                        SpellBuffAdd(Owner, Target, "FrostArrow", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
                    });
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            SpellEffectCreate(ar, default, "DeathsCaress_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        ForEachUnitInTargetArea(Owner, Target, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Unit) => {
            BreakSpellShields(Unit);
            ApplyStun(Attacker, Unit, 1.25);
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, default, default, default, default);
        });
        this.WillRemove = true;
        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
            ApplyDamage(Attacker, Target, 0 + (this.BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.15, 0, false, false, Attacker);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ManaGainAmount = this.VALUE_BY_LEVEL;
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            ModifiedManaGainAmount = Math(0 + (ManaGainAmount ?? 0), MO_MULTIPLY, 3);
            IncPAR(Owner, 0 + (ModifiedManaGainAmount ?? 0));
        });
        Else(() => {
            IncPAR(Owner, 0 + (ManaGainAmount ?? 0));
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            SpellEffectCreate(num, default, "Netherblade_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                IfHasBuff(Owner, Owner, "CardmasterStackParticle", () => {
                    SpellBuffRemove(Owner, "CardmasterStackParticle", Owner, default);
                    TeamID = GetTeamID(default);
                    BreakSpellShields(Target);
                    ApplyDamage(Attacker, Target, 0 + (this.BonusDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.4, 1, false, false, Attacker);
                    SpellEffectCreate(c, default, "CardmasterStackAttack_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, default, default, default);
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "CardMasterStackHolder", 4, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        AttackDamage = GetTotalAttackDamage(Owner);
        BonusDamage = this.VALUE_BY_LEVEL;
        RedCardDamage = Math(0 + (AttackDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            SpellEffectCreate(ar, default, "Pulverize_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Owner, Target, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellBuffAdd(Owner, Unit, "Slow", 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, default, default, default);
            If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                DebugSay(Owner, "YO!2", default);
                ApplyDamage(Attacker, Unit, 0 + (RedCardDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0.4, 1, false, false, default);
            });
            Else(() => {
                ApplyDamage(Attacker, Unit, 0 + (BonusDamage ?? 0) + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0.4, 1, false, false, default);
                DebugSay(Owner, "YO!", default);
            });
        });
        this.WillRemove = true;
        DamageAmount = Math(0, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseDamage = this.VALUE_BY_LEVEL;
        DamageToDeal = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (DamageAmount ?? 0));
        DamageToDeal = Math(0 + (DamageToDeal ?? 0), MO_ADD, 0 + (CharVars.DamageBonus ?? 0));
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                TeamID = GetTeamID(default);
                SpellEffectCreate(sdg, default, "nassus_siphonStrike_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
                SpellBuffAdd(Owner, Target, "SiphoningStrike", 1, 1, 1, CharVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        SpellEffectRemove(this.ParticleID);
        SpellBuffClear(Owner, "SiphoningStrikeNew");
        ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellCooldown = this.SpellCooldown ?? 0;
        CooldownStat = GetStat(GetPercentCooldownMod, Owner);
        Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
        NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (SpellCooldown ?? 0));
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        SetDodgePiercing(Owner, false);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
                SpellBuffAdd(Owner, Target, "DetonatingShot_Target", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Attacker, Attacker, "SivirPassiveSpeed", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        CharVars.Count = Math(1, MO_ADD, 0 + (CharVars.Count ?? 0));
        If(CharVars.Count, default, CO_GREATER_THAN_OR_EQUAL, default, 5, () => {
            
        });
        Else(() => {
            If(CharVars.Count, default, CO_GREATER_THAN_OR_EQUAL, default, 4, () => {
                SpellBuffAdd(Owner, Owner, "KennenDoubleStrikeProc", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, default, default, default);
                SpellBuffRemoveStacks(Owner, Owner, "KennenDoubleStrikeIndicator", 0);
            });
            Else(() => {
                SpellBuffAdd(Owner, Owner, "KennenDoubleStrikeIndicator", 8, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, default, default, default);
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                        CharVars.Count = Math(1, MO_ADD, 0 + (CharVars.Count ?? 0));
                        SpellBuffAdd(Owner, Owner, "KennenDoubleStrikeIndicator", 8, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, default, default, default);
                        If(CharVars.Count, default, CO_GREATER_THAN_OR_EQUAL, default, 4, () => {
                            SpellBuffAdd(Owner, Owner, "KennenDoubleStrikeLive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, default, default, default);
                            SpellBuffRemoveStacks(Owner, Owner, "KennenDoubleStrikeIndicator", 0);
                        });
                    });
                });
            });
        });
        DamageAmount = Math(0 + (this.BonusDamage ?? 0), MO_ADD, 0 + (DamageAmount ?? 0));
        TAD = GetTotalAttackDamage(Attacker);
        DamageToDeal = Math(0 + (TAD ?? 0), MO_MULTIPLY, 0 + (this.DmgMult ?? 0));
        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
            ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        });
        totalAttackDamage = GetTotalAttackDamage(Owner);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_ADD, 0 + (totalAttackDamage ?? 0));
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                BreakSpellShields(Target);
                SpellBuffAdd(Owner, Target, "PowerFistSlow", 1, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Stun, 0, true, false, false, default);
            });
        });
        SpellBuffRemove(Owner, "PowerFist", Owner, 0);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                Level = GetLevel(Owner);
                NextBuffVars.DotDamage = this.VALUE_BY_LEVEL;
                NextBuffVars.moveSpeedMod = -0.07;
                SpellBuffAdd(Owner, Target, "ScurvyStrikeParticle", 3, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Slow, 0, true, false, false, default);
                SpellBuffAdd(Attacker, Target, "ScurvyStrike", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        Count = GetBuffCountFromCaster(Owner, Owner, "RivenPassiveAABoost");
        If(Count, default, CO_GREATER_THAN, default, 0, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    Level = GetLevel(Owner);
                    AttackDamage = GetTotalAttackDamage(Owner);
                    BaseAD = GetStat(GetBaseAttackDamage, Owner);
                    AttackDamage = Math(0 + (AttackDamage ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
                    PassiveAD = Math(0.5, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
                    BaseDamage = this.VALUE_BY_LEVEL;
                    BonusDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (PassiveAD ?? 0));
                    DamageAmount = Math(0 + (DamageAmount ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                    If(Count, default, CO_GREATER_THAN, default, 1, () => {
                        SpellBuffRemove(Owner, "RivenPassiveAABoost", Owner, 5);
                    });
                    Else(() => {
                        SpellBuffClear(Owner, "RivenPassiveAABoost");
                    });
                });
            });
        });
        If(CharVars.HitCount, default, CO_LESS_THAN, default, 4, () => {
            RemainingDuration = GetBuffRemainingDuration(Owner, "ShyvanaImmolateDragon");
            NewDuration = Math(0 + (RemainingDuration ?? 0), MO_ADD, 1);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.MovementSpeed = this.VALUE_BY_LEVEL;
            NextBuffVars.DamagePerTick = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Owner, "ShyvanaImmolateDragon", 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            CharVars.HitCount = Math(0 + (CharVars.HitCount ?? 0), MO_ADD, 1);
        });
        If(CharVars.HitCount, default, CO_LESS_THAN, default, 5, () => {
            RemainingDuration = GetBuffRemainingDuration(Owner, "ShyvanaImmolationAura");
            NewDuration = Math(0 + (RemainingDuration ?? 0), MO_ADD, 1);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.MovementSpeed = this.VALUE_BY_LEVEL;
            NextBuffVars.DamagePerTick = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Owner, "ShyvanaImmolationAura", 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            CharVars.HitCount = Math(0 + (CharVars.HitCount ?? 0), MO_ADD, 1);
        });
        TeamID = GetTeamID(default);
        BaseAttackDamage = GetStat(GetBaseAttackDamage, Owner);
        SpellBuffRemove(Owner, "ShyvanaDoubleAttackDragon", Owner, 0);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ForEachUnitInTargetArea(Owner, Target, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            Distance = DistanceBetweenObjects("Attacker", "Unit");
            If(Target, default, CO_EQUAL, Unit, default, () => {
                
            });
            Else(() => {
                If(Distance, default, CO_LESS_THAN, default, 250, () => {
                    If(Owner, default, CO_IS_TARGET_IN_FRONT_OF_ME, Unit, default, () => {
                        BreakSpellShields(Unit);
                        ApplyDamage(Attacker, Unit, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
                        ApplyDamage(Attacker, Unit, 0 + (BaseAttackDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 0 + (this.VALUE_BY_LEVEL ?? 0), 0, 1, false, false, Attacker);
                        IfHasBuff(Target, Attacker, "ShyvanaFireballMissile", () => {
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                            ProcDamage = this.VALUE_BY_LEVEL;
                            ApplyDamage(Attacker, Unit, 0 + (ProcDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.1, 0, false, false, Attacker);
                            TeamID = GetTeamID(default);
                            SpellEffectCreate(a, default, "shyvana_flameBreath_reignite.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
                        });
                        IfHasBuff(Target, Attacker, "ShyvanaFireballMissileMinion", () => {
                            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                            ProcDamage = this.VALUE_BY_LEVEL;
                            ApplyDamage(Attacker, Unit, 0 + (ProcDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.1, 0, false, false, Attacker);
                            TeamID = GetTeamID(default);
                            SpellEffectCreate(a, default, "shyvana_flameBreath_reignite.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
                        });
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                        If(Level, default, CO_EQUAL, default, 1, () => {
                            IncPAR(Owner, 2);
                        });
                        ElseIf(Level, default, CO_EQUAL, default, 2, () => {
                            IncPAR(Owner, 3);
                        });
                        ElseIf(Level, default, CO_EQUAL, default, 3, () => {
                            IncPAR(Owner, 4);
                        });
                        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                            SpellEffectCreate(a, default, "shyvana_doubleAttack_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                        });
                    });
                });
            });
        });
        SpellBuffRemove(Owner, "ShyvanaDoubleAttack", Owner, 0);
        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                IncPAR(Owner, 5);
                HealthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
                If(HealthPercent, default, CO_LESS_THAN_OR_EQUAL, CharVars.RageThreshold, default, () => {
                    IncPAR(Owner, 2.5);
                });
            });
        });
        If(CharVars.hitOnce, default, CO_EQUAL, default, true, () => {
            CharVars.hitOnce = false;
            TeamID = GetTeamID(default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            baseDamage = this.VALUE_BY_LEVEL;
            TAD = GetTotalAttackDamage(Owner);
            DotDamage = Math(0 + (TAD ?? 0), MO_MULTIPLY, 1.7);
            DotDamage = Math(0 + (DotDamage ?? 0), MO_ADD, 0 + (baseDamage ?? 0));
            DotDamage = Math(0 + (DotDamage ?? 0), MO_MULTIPLY, 0.25);
            NextBuffVars.DotDamage = DotDamage;
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    SpellBuffAdd(Attacker, Target, "UdyrTigerPunchBleed", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
                });
            });
            SpellEffectRemove(CharVars.lhand);
            SpellEffectRemove(CharVars.rhand);
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                TeamID = GetTeamID(default);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                baseDamage = this.VALUE_BY_LEVEL;
                TAD = GetTotalAttackDamage(Owner);
                DotDamage = Math(0 + (TAD ?? 0), MO_MULTIPLY, 1.5);
                DotDamage = Math(0 + (DotDamage ?? 0), MO_ADD, 0 + (baseDamage ?? 0));
                DotDamage = Math(0 + (DotDamage ?? 0), MO_MULTIPLY, 0.25);
                NextBuffVars.DotDamage = DotDamage;
                SpellBuffAdd(Attacker, Target, "UdyrTigerPunchBleed", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
                SpellBuffRemove(Owner, "UdyrTigerShred", Owner, 0);
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(default, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                TargetHealth = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
                If(TargetHealth, default, CO_LESS_THAN_OR_EQUAL, default, 0.3, () => {
                    DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.3);
                });
            });
        });
        APBonus = GetStat(GetFlatMagicDamageMod, Owner);
        Level = GetLevel(Owner);
        BaseDamage = this.VALUE_BY_LEVEL;
        Damage = Math(0 + (APBonus ?? 0), MO_MULTIPLY, 0.2);
        Damage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (Damage ?? 0));
        Count = GetBuffCountFromCaster(Target, Owner, "OrianaPowerDagger");
        Multiplier = Math(0.15, MO_MULTIPLY, 0 + (Count ?? 0));
        Multiplier = Math(0 + (Multiplier ?? 0), MO_ADD, 1);
        Damage = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (Damage ?? 0));
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                IfNotHasBuff(Target, Owner, "OrianaPowerDagger", () => {
                    SpellBuffClear(Owner, "OrianaPowerDaggerDisplay");
                });
                SpellBuffAdd(Owner, Target, "OrianaPowerDagger", 3, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                ForEachUnitInTargetArea(Owner, Target, 25000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "OrianaPowerDagger", true, (Unit) => {
                    If(Unit, default, CO_NOT_EQUAL, Target, default, () => {
                        SpellBuffClear(Unit, "OrianaPowerDagger");
                    });
                });
                SpellBuffAdd(Owner, Owner, "OrianaPowerDaggerDisplay", 3, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    ApplyDamage(Attacker, Target, 0 + (Damage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
                });
            });
        });
        SpellBuffAdd(Target, Target, "Internal_50MS", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "GrievousWound", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        Say(Owner, "YO!", default);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                SpellBuffAdd(Target, Target, "Internal_50MS", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SpellBuffAdd(Attacker, Target, "GrievousWound", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                MagicDamageAmount = this.VALUE_BY_LEVEL;
                SelfAP = GetStat(GetFlatMagicDamageMod, Owner);
                APBonus = Math(0 + (SelfAP ?? 0), MO_MULTIPLY, 0.35);
                MagicDamageAmount = Math(0 + (MagicDamageAmount ?? 0), MO_ADD, 0 + (APBonus ?? 0));
                ApplyDamage(Attacker, Target, 0 + (MagicDamageAmount ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
                TeamID = GetTeamID(default);
                SpellEffectCreate(Temp, default, "fizz_seastoneactive_hit_sound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                IfHasBuff(Owner, Owner, "LeonaSolarBarrierTracker", () => {
                    If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                            SpellBuffAdd(Attacker, Target, "LeonaSunlight", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    SpellBuffAdd(Owner, Target, "FizzSeastoneTrident", 1, 1, 3.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(Target, default, CO_IS_NOT_DEAD, default, true, () => {
                    If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                        SpellBuffAdd(Attacker, Target, "UrgotSlow", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
                    });
                });
            });
        });
        TeamID = GetTeamID(default);
        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                    If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                        Caster = SetBuffCasterUnit();
                        If(Attacker, default, CO_IS_NOT_HERO, default, default, () => {
                            Caster = GetPetOwner(Attacker);
                        });
                        SpellEffectCreate(this.ParticleID, default, "volibear_R_chain_lighting_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Attacker, "head", default, Target, "root", default, true, false, false, false, false, default, default);
                        SpellEffectCreate(Kennenss, default, "Volibear_R_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Attacker, false, Target, "C_BUFFBONE_GLB_CENTER_LOC", default, Target, default, default, true, false, false, false, false, default, default);
                        SpellEffectCreate(Kennenss, default, "Volibear_R_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Attacker, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
                        SpellEffectCreate(c, default, "Volibear_R_cas_04.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
                        NextBuffVars.BounceCounter = 1;
                        NextBuffVars.VolibearRDamage = this.VolibearRDamage;
                        NextBuffVars.VolibearRRatio = this.VolibearRRatio;
                        SpellBuffAdd(Attacker, Target, "VolibearRChain", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                TeamID = GetTeamID(default);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                NextBuffVars.VolibearWAS = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Attacker, Attacker, "VolibearWStats", 3, 1, 4.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
                Count = GetBuffCountFromAll(Attacker, "VolibearWStats");
                If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
                    SpellBuffAdd(Attacker, Attacker, "VolibearWParticle", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
                });
                UpdateCanCast(Attacker);
            });
        });
        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
                    IncPAR(Owner, 0 + (this.furyPerCrit ?? 0));
                });
                Else(() => {
                    IncPAR(Owner, 0 + (this.furyPerHit ?? 0));
                });
            });
        });
        NextBuffVars.MoveSpeedMod = 0;
        TotalIncValue = 0;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CoreDamage = this.VALUE_BY_LEVEL;
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_ADD, 0 + (CoreDamage ?? 0));
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
        ApplyDamage(Attacker, Target, 0, PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 0, 0, 0, false, false, Attacker);
        IfHasBuff(Owner, Owner, "TalonNoxianDiplomacyBuff", () => {
            SpellBuffClear(Owner, "TalonNoxianDiplomacyBuff");
            SpellBuffClear(Owner, "TalonNoxianDiplomacy");
            NextBuffVars.MissChance = 1;
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            BreakSpellShields(Target);
            SpellBuffAdd(Attacker, Target, "TalonBleedDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        PopCharacterFade(Owner, this.ID);
        SetStatus(Owner, default, SetStealthed);
        SpellBuffRemove(Owner, "TalonShadowAssaultBuff", Owner, 0);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            IfHasBuffOfType(Target, BUFF_Slow, () => {
                IsCCD = true;
            });
            IfHasBuffOfType(Target, BUFF_Stun, () => {
                IsCCD = true;
            });
            IfHasBuffOfType(Target, BUFF_Net, () => {
                IsCCD = true;
            });
            IfHasBuffOfType(Target, BUFF_Suppression, () => {
                IsCCD = true;
            });
            If(IsCCD, default, CO_EQUAL, default, true, () => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.1);
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                TrueDamageAmount = Math(0.1, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                Temp1 = GetPAROrHealth(Target, GetHealth, PAR_MANA);
                If(TrueDamageAmount, default, CO_GREATER_THAN, Temp1, default, () => {
                    TrueDamageAmount = Math(0 + (Temp1 ?? 0), MO_SUBTRACT, 1);
                    ApplyDamage(Attacker, Target, 0 + (TrueDamageAmount ?? 0), TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, false, false, default);
                });
                Else(() => {
                    ApplyDamage(Attacker, Target, 0 + (TrueDamageAmount ?? 0), TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, false, false, default);
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Attacker, default, CO_DIFFERENT_TEAM, Target, default, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                SpellBuffAdd(Target, Target, "Internal_50MS", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SpellBuffAdd(Attacker, Target, "GrievousWound", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                        APMod = GetStat(GetFlatMagicDamageMod, Owner);
                        ModdedDmg = Math(0 + (APMod ?? 0), MO_MULTIPLY, 0.05);
                        PreCount = Math(0 + (ModdedDmg ?? 0), MO_ADD, 0 + (this.DamageCounter ?? 0));
                        TeamID = GetTeamID(default);
                        SpellBuffAdd(Owner, Target, "MissFortunePassiveStack", 4, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Damage, 0, false, false, false, default);
                        Count = GetBuffCountFromAll(Target, "MissFortunePassiveStack");
                        DamageDealt = Math(0 + (PreCount ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
                        ApplyDamage(Owner, Target, 0 + (DamageDealt ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
                        SpellEffectCreate(asdf, default, "missFortune_passive_tar_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
                    });
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(CharVars.MiniCritChance, default, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                    If(Target, default, CO_IS_NOT_HERO, default, default, () => {
                        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 10);
                        TeamID = GetTeamID(default);
                        SpellEffectCreate(MotaExplosion, default, "akali_mark_impact_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
                        Say(Target, "Mini Crit: ", DamageAmount);
                    });
                    Else(() => {
                        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 10);
                        TeamID = GetTeamID(default);
                        SpellEffectCreate(MotaExplosion, default, "akali_mark_impact_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
                        Say(Target, "Mini Crit: ", DamageAmount);
                    });
                });
            });
        });
        SpellEffectCreate(HealParticle, default, "olaf_viciousStrikes_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        this.HasHit = true;
        SpellBuffRemove(Owner, "DeceiveCritBonus", Owner, 0);
        ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0);
        teamID = GetTeamID(default);
        Caster = GetChampionBySkinName("Shaco", teamID ?? TEAM_UNKNOWN);
        TotalDamage = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (this.DamageDealt ?? 0));
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            TotalDamage = Math(0 + (TotalDamage ?? 0), MO_MULTIPLY, 0.5);
        });
        DamageAmount = 0;
        ApplyDamage(Caster, Target, 0 + (TotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 1, 0, false, false, Caster);
        CanMove = GetStatus(Owner, GetCanMove);
        If(IsBlinded, default, CO_EQUAL, default, false, () => {
            SetReturnValue(default);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                            Count = GetBuffCountFromCaster(Target, Attacker, "VayneSilveredDebuff");
                            If(Count, default, CO_EQUAL, default, 2, () => {
                                TeamID = GetTeamID(default);
                                TeamIDTarget = GetTeamID(default);
                                SpellEffectCreate(gragas, default, "vayne_W_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Nothing, default, Target, Target, default, default, true, false, false, false, false, default, default);
                                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                                AbilityPower = GetStat(GetFlatMagicDamageMod, Attacker);
                                BonusMaxHealthDamage = Math(0, MO_MULTIPLY, 0 + (AbilityPower ?? 0));
                                SpellBuffClear(Target, "VayneSilveredDebuff");
                                TarMaxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
                                RankScaling = this.VALUE_BY_LEVEL;
                                FlatScaling = this.VALUE_BY_LEVEL;
                                RankScaling = Math(0 + (RankScaling ?? 0), MO_ADD, 0 + (BonusMaxHealthDamage ?? 0));
                                DamageToDeal = Math(0 + (TarMaxHealth ?? 0), MO_MULTIPLY, 0 + (RankScaling ?? 0));
                                DamageToDeal = Math(0 + (DamageToDeal ?? 0), MO_ADD, 0 + (FlatScaling ?? 0));
                                If(TeamIDTarget, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                                    DamageToDeal = Math(0 + (DamageToDeal ?? 0), MO_MIN, 200);
                                });
                                ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), TRUE_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
                            });
                            Else(() => {
                                SpellBuffAdd(Attacker, Target, "VayneSilveredDebuff", 3, 1, 3.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
                            });
                        });
                    });
                });
            });
        });
        CanMove = GetStatus(Owner, GetCanMove);
        If(IsBlinded, default, CO_EQUAL, default, false, () => {
            SetReturnValue(default);
        });
        Else(() => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                            Count = GetBuffCountFromCaster(Target, Attacker, "VayneSilveredDebuff");
                            If(Count, default, CO_EQUAL, default, 2, () => {
                                TeamID = GetTeamID(default);
                                SpellEffectCreate(gragas, default, "vayne_W_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Nothing, default, Target, Target, default, default, true, false, false, false, false, default, default);
                            });
                            SpellBuffAdd(Attacker, Target, "VayneSilveredDebuff", 3, 1, 3.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
                            If(Count, default, CO_EQUAL, default, 2, () => {
                                ApplyDamage(Attacker, Target, 0 + (DamageAmount ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
                                DamageAmount = 0;
                            });
                        });
                    });
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                IfHasBuff(Owner, Owner, "FromBehind", () => {
                    DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.2);
                    SpellEffectCreate(Particle, default, "AbsoluteZero_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
                });
                Else(() => {
                    If(Owner, default, CO_IS_TARGET_IN_FRONT_OF_ME, Target, default, () => {
                        If(Target, default, CO_IS_TARGET_BEHIND_ME, Owner, default, () => {
                            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.2);
                            SpellEffectCreate(Particle, default, "AbsoluteZero_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
                        });
                    });
                });
                teamID = GetTeamID(default);
                Attacker = GetChampionBySkinName("Shaco", teamID ?? TEAM_UNKNOWN);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
                Time = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellCooldownTime);
                If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                    If(Time, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                                NextBuffVars.MissChance = this.VALUE_BY_LEVEL;
                                SpellBuffAdd(Attacker, Target, "TwoShivPoison", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
                            });
                        });
                    });
                });
            });
        });
        Caster = SetBuffCasterUnit();
        ApplyDamage(Caster, Target, 0 + (DamageAmount ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Caster);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0);
        PassiveMultiplier = 0.05;
        Count = 0;
        IfHasBuff(Owner, Nothing, "YorickSummonSpectral", () => {
            Count = Math(0 + (Count ?? 0), MO_ADD, 1);
        });
        IfHasBuff(Owner, Nothing, "YorickSummonRavenous", () => {
            Count = Math(0 + (Count ?? 0), MO_ADD, 1);
        });
        IfHasBuff(Owner, Nothing, "YorickSummonDecayed", () => {
            Count = Math(0 + (Count ?? 0), MO_ADD, 1);
        });
        IfHasBuff(Owner, Nothing, "YorickRARemovePet", () => {
            Count = Math(0 + (Count ?? 0), MO_ADD, 1);
        });
        IfHasBuff(Owner, Nothing, "YorickUltPetActive", () => {
            Count = Math(0 + (Count ?? 0), MO_ADD, 1);
        });
        PassiveMultiplier = Math(0 + (Count ?? 0), MO_MULTIPLY, 0 + (PassiveMultiplier ?? 0));
        PassiveMultiplier = Math(1, MO_ADD, 0 + (PassiveMultiplier ?? 0));
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (PassiveMultiplier ?? 0));
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                IfHasBuff(Owner, Nothing, "YorickSummonSpectral", () => {
                    SpellBuffClear(Owner, "YorickSummonSpectral");
                });
                If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
                    HitResult = HIT_Normal;
                });
                TeamID = GetTeamID(default);
                SpellEffectCreate(a, default, "yorick_spectralGhoul_attack_buf_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
                DamageAmount = Math(1.2, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                TotalDamage = Math(0 + (DamageAmount ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
                SpellBuffAdd(Attacker, Target, "YorickSpectralPrimaryTarget", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                BreakSpellShields(Target);
                ApplyDamage(Attacker, Target, 0 + (TotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, true, true, Attacker);
                TargetPos = GetPointByUnitFacingOffset(Owner, 25, 0);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, default);
                SpellBuffRemove(Owner, "YorickSpectral", Owner, 0);
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            });
        });
        Caster = SetBuffCasterUnit();
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Caster, GetSlotSpellLevel);
        LifestealPercent = this.VALUE_BY_LEVEL;
        HealAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (LifestealPercent ?? 0));
        IncHealth(Caster, 0 + (HealAmount ?? 0), Caster);
        SpellEffectCreate(A, default, "yorick_ravenousGhoul_lifesteal_self.troy", default, TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Caster, false, Caster, default, default, Caster, default, default, true, default, default, false, false, default, default);
        ApplyDamage(Caster, Target, 0 + (DamageAmount ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Caster);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0);
        Caster = SetBuffCasterUnit();
        ApplyDamage(Caster, Target, 0 + (DamageAmount ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Caster);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0);
        DamageAmount = Math(0 + (this.ADRatio ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        Caster = SetBuffCasterUnit();
        ApplyDamage(Caster, Target, 0 + (DamageAmount ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, true, true, Caster);
        DamageAmount = 0;
        NextBuffVars.DamageCount = CharVars.DamageCount;
        SpellBuffAdd(Owner, Owner, "PoppyMightOfDemacia", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        CharVars.DamageCount = Math(0 + (CharVars.DamageCount ?? 0), MO_ADD, 1);
        CharVars.DamageCount = Math(0 + (CharVars.DamageCount ?? 0), MO_MIN, 20);
        SpellEffectCreate(A, default, "poppydam_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "hammer_b", default, Target, default, default, false, default, default, default, default, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        MaxDamage = this.VALUE_BY_LEVEL;
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                TeamID = GetTeamID(default);
                TarMaxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
                TarMaxHealth = Math(0 + (TarMaxHealth ?? 0), MO_MULTIPLY, 0.08);
                DamageToDeal = Math(0 + (TarMaxHealth ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
                DamageToDeal = Math(0 + (DamageToDeal ?? 0), MO_MIN, 0 + (MaxDamage ?? 0));
                SpellEffectCreate(a, default, "Poppy_DevastatingBlow_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
                DamageToDeal = Math(0 + (DamageToDeal ?? 0), MO_ADD, 0 + (DamageAmount ?? 0));
                BreakSpellShields(Target);
                ApplyDamage(Attacker, Target, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 1, false, false, Attacker);
                SpellBuffRemove(Owner, "PoppyDevastatingBlow", Owner, default);
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            });
        });
        If(CharVars.SpectralCount, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
            
        });
        ElseIf(Owner, default, CO_IS_MELEE, default, default, () => {
            IfNotHasBuff(Owner, Nothing, "JudicatorRighteousFury", () => {
                SpectralDuration = GetBuffRemainingDuration(Owner, "SpectralFury");
                SpellBuffAdd(Attacker, Owner, "SpectralFury", 1, 1, 2 + (SpectralDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                CharVars.SpectralCount = Math(0 + (CharVars.SpectralCount ?? 0), MO_ADD, 1);
            });
        });
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonIcon", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        Count = GetBuffCountFromAll(Owner, "PoppyParagonStats");
        If(Count, default, CO_EQUAL, default, 10, () => {
            SpellBuffAdd(Owner, Owner, "PoppyParagonParticle", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(A, default, "poppydam_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "hammer_b", default, Target, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(b, default, "poppydef_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_finger", default, Target, default, default, false, default, default, default, default, default, default);
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Target, Target, "Internal_50MS", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            SpellBuffAdd(Attacker, Target, "GrievousWound", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                        
                    });
                    Else(() => {
                        NextBuffVars.MovementSpeedMod = -0.35;
                        NextBuffVars.AttackSpeedMod = 0;
                        SpellBuffAdd(Attacker, Target, "Chilled", 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, default, default, default, default);
                    });
                });
                SpellBuffRemoveCurrent(Owner);
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    SpellBuffAdd(Attacker, Target, "MaladyCounter", 4, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
                    SpellBuffAdd(Attacker, Target, "MaladySpell", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    ApplyDamage(Attacker, Target, 20, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
                });
            });
        });
        this.AttackCounter = Math(0 + (this.AttackCounter ?? 0), MO_ADD, 1);
        If(this.AttackCounter, default, CO_EQUAL, default, 4, () => {
            Caster = SetBuffCasterUnit();
            If(Attacker, default, CO_IS_NOT_HERO, default, default, () => {
                Caster = GetPetOwner(Attacker);
            });
            ApplyDamage(Caster, Target, 100, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
            this.AttackCounter = 0;
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                SpellEffectCreate(part, default, "sword_of_the_divine_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
            });
        });
        ApplyDamage(Attacker, Target, 90, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, default, default, default, default);
        this.WillRemove = true;
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_ADD, 0 + (this.AbilityPower ?? 0));
                IfNotHasBuff(Owner, Owner, "SheenDelay", () => {
                    SpellBuffAdd(Owner, Owner, "SheenDelay", 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
                });
                SpellBuffClear(Owner, "LichBane");
            });
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, true, () => {
            
        });
        Else(() => {
            If(this.CooldownResevoir, default, CO_GREATER_THAN, default, 0, () => {
                SpellEffectCreate(KillMe_, default, "TearoftheGoddess_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
                CharVars.TearBonusMana = Math(0 + (CharVars.TearBonusMana ?? 0), MO_ADD, 1);
                CharVars.TearBonusMana = Math(0 + (CharVars.TearBonusMana ?? 0), MO_MIN, 1000);
                this.CooldownResevoir = Math(-1, MO_ADD, 0 + (this.CooldownResevoir ?? 0));
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(default, 0.2, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    If(Target, default, CO_IS_NOT_HERO, default, default, () => {
                        ApplyDamage(Attacker, Target, 300, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
                    });
                });
            });
        });
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
            AbilityDamageToAdd = Math(0 + (AbilityPower ?? 0), MO_DIVIDE, 2.5);
            BonusAttackPower = GetStat(GetFlatPhysicalDamageMod, Owner);
            If(BonusAttackPower, default, CO_LESS_THAN_OR_EQUAL, AbilityDamageToAdd, default, () => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (BonusAttackPower ?? 0));
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_ADD, 0 + (AbilityDamageToAdd ?? 0));
            });
            If(AvatarVars.MasteryDemolitionist, default, CO_EQUAL, default, true, () => {
                DamageAmount = Math(0 + (AvatarVars.MasteryDemolitionistAmt ?? 0), MO_ADD, 0 + (DamageAmount ?? 0));
            });
        });
        Else(() => {
            If(Target, default, CO_IS_NOT_AI, default, default, () => {
                AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
                AbilityDamageToAdd = Math(0 + (AbilityPower ?? 0), MO_DIVIDE, 2.5);
                BonusAttackPower = GetStat(GetFlatPhysicalDamageMod, Owner);
                If(BonusAttackPower, default, CO_LESS_THAN_OR_EQUAL, AbilityDamageToAdd, default, () => {
                    DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (BonusAttackPower ?? 0));
                    DamageAmount = Math(0 + (DamageAmount ?? 0), MO_ADD, 0 + (AbilityDamageToAdd ?? 0));
                });
                If(AvatarVars.MasteryDemolitionist, default, CO_EQUAL, default, true, () => {
                    DamageAmount = Math(0 + (AvatarVars.MasteryDemolitionistAmt ?? 0), MO_ADD, 0 + (DamageAmount ?? 0));
                });
            });
        });
        If(AvatarVars.MasteryButcher, default, CO_EQUAL, default, true, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                    
                });
                Else(() => {
                    If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                        
                    });
                    Else(() => {
                        DamageAmount = Math(0 + (AvatarVars.MasteryButcherAmt ?? 0), MO_ADD, 0 + (DamageAmount ?? 0));
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                        SpellBuffAdd(Owner, Owner, "WitsEndBuff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        SpellBuffAdd(Owner, Owner, "WitsEndCounter", 4, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
                    });
                    Else(() => {
                        SpellBuffAdd(Owner, Owner, "WitsEndBuff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        SpellBuffAdd(Owner, Owner, "WitsEndCounter", 4, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
                        ApplyDamage(Attacker, Target, 42, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
                    });
                });
                Else(() => {
                    If(default, default, CO_IS_NOT_TURRET, default, default, () => {
                        SpellBuffAdd(Owner, Owner, "WitsEndBuff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        SpellBuffAdd(Owner, Owner, "WitsEndCounter", 4, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
                    });
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                    If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                        MaxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
                        TeamId = GetTeamID(default);
                        Damage = Math(0.04, MO_MULTIPLY, 0 + (MaxHealth ?? 0));
                        If(TeamId, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                            Damage = Math(120, MO_MIN, 0 + (Damage ?? 0));
                        });
                        Caster = SetBuffCasterUnit();
                        If(Attacker, default, CO_IS_NOT_HERO, default, default, () => {
                            Caster = GetPetOwner(Attacker);
                        });
                        ApplyDamage(Caster, Target, 0 + (Damage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, default);
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(this.IsSheen, default, CO_EQUAL, default, false, () => {
                    PercentBase = Math(0 + (this.BaseDamage ?? 0), MO_MULTIPLY, 1.5);
                    DamageAmount = Math(0 + (DamageAmount ?? 0), MO_ADD, 0 + (PercentBase ?? 0));
                    IfNotHasBuff(Owner, Owner, "SheenDelay", () => {
                        SpellBuffAdd(Owner, Owner, "SheenDelay", 1, 1, 1.3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
                    });
                    SpellBuffClear(Owner, "Sheen");
                    SpellBuffRemoveCurrent(Owner);
                });
                If(this.IsSheen, default, CO_EQUAL, default, true, () => {
                    PercentBase = Math(0 + (this.BaseDamage ?? 0), MO_MULTIPLY, 1);
                    DamageAmount = Math(0 + (DamageAmount ?? 0), MO_ADD, 0 + (PercentBase ?? 0));
                    IfNotHasBuff(Owner, Owner, "SheenDelay", () => {
                        SpellBuffAdd(Owner, Owner, "SheenDelay", 1, 1, 1.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
                    });
                    SpellBuffClear(Owner, "Sheen");
                    SpellBuffRemoveCurrent(Owner);
                });
            });
        });
        this.AttackCounter = Math(0 + (this.AttackCounter ?? 0), MO_ADD, 1);
        TeamID = GetTeamID(default);
        If(this.AttackCounter, default, CO_EQUAL, default, 4, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                            Caster = SetBuffCasterUnit();
                            If(Attacker, default, CO_IS_NOT_HERO, default, default, () => {
                                Caster = GetPetOwner(Attacker);
                            });
                            SpellEffectCreate(this.ParticleID, default, "kennen_btl_beam.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Attacker, "head", default, Target, "root", default, true, default, default, false, default, default, default);
                            BreakSpellShields(Target);
                            NextBuffVars.BounceCounter = 1;
                            SpellBuffAdd(Attacker, Target, "LightningRodChain", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                            this.AttackCounter = 0;
                        });
                    });
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(default, 0.2, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    If(Target, default, CO_IS_NOT_HERO, default, default, () => {
                        IfNotHasBuff(Target, Nothing, "OdinGolemBombBuff", () => {
                            ApplyDamage(Attacker, Target, 425, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
                        });
                    });
                });
            });
        });
    }
    public void BuffOnPreDamage()
    {
        #region VarDecl
        float? CurHealth = null;
        TeamId? TeamID = null;
        long? DamageAmount = null;
        float? CurHealthPercent = null;
        float? DamageMod = null;
        Object? CurrentCooldown = null;
        float? DamageReduction = null;
        string? BuffName = null;
        float? DamageStartTime = null;
        bool? CancelChannel = null;
        AttackableUnit? Caster = null;
        float? HPTotal = null;
        float? HPPercent = null;
        float? DrainAmount = null;
        float? DamageAbsorbed = null;
        Vector3? TargetPos = null;
        float? CurrentEnergy = null;
        float? DA = null;
        float? Distance = null;
        float? AttackSpeedBoost = null;
        float? AttackSpeedIncrement = null;
        float? CurrentHealth = null;
        float? MaxHealth = null;
        float? remainingHealth = null;
        float? percentHealthRemaining = null;
        float? twentyPercentHealth = null;
        float? damageToLetThrough = null;
        float? damageToBlock = null;
        float? CurMana = null;
        float? ManaShield = null;
        float? Level = null;
        float? Duration = null;
        float? RemainingDuration = null;
        float? PassiveMultiplier = null;
        float? Count = null;
        float? HealthCurrent = null;
        float? DamageSoftCap = null;
        float? DamageManipulator = null;
        float? PercentRemain = null;
        #endregion
        CurHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        If(CurHealth, default, CO_LESS_THAN_OR_EQUAL, DamageAmount, default, () => {
            TeamID = GetTeamID(default);
            SpellEffectCreate(arm8, default, "teleportarrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                TeleportToKeyLocation(Owner, SPAWN_LOCATION, TEAM_ORDER);
            });
            ElseIf(default, default, CO_EQUAL, default, default, () => {
                TeleportToKeyLocation(Attacker, SPAWN_LOCATION, TEAM_CHAOS);
            });
        });
        DamageAmount = 0;
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            If(default, DAMAGESOURCE_SPELLAOE, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (this.DamageMultiplier ?? 0));
            });
        });
        CurHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        CurHealthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        DamageMod = Math(0 + (CurHealthPercent ?? 0), MO_ADD, 0 + (__1 ?? 0));
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (DamageMod ?? 0));
        If(DamageAmount, default, CO_GREATER_THAN_OR_EQUAL, CurHealth, default, () => {
            DamageAmount = Math(0 + (CurHealth ?? 0), MO_SUBTRACT, 1);
        });
        If(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
            If(this.flashSlot, default, CO_EQUAL, default, 0, () => {
                CurrentCooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(CurrentCooldown, default, CO_LESS_THAN_OR_EQUAL, default, 3, () => {
                    SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 3);
                });
            });
            Else(() => {
                CurrentCooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(CurrentCooldown, default, CO_LESS_THAN_OR_EQUAL, default, 3, () => {
                    SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 3);
                });
            });
        });
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            If(this.flashSlot, default, CO_EQUAL, default, 0, () => {
                CurrentCooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(CurrentCooldown, default, CO_LESS_THAN_OR_EQUAL, default, 3, () => {
                    SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 3);
                });
            });
            Else(() => {
                CurrentCooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(CurrentCooldown, default, CO_LESS_THAN_OR_EQUAL, default, 3, () => {
                    SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 3);
                });
            });
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
                DamageAmount = 0;
            });
        });
        this.oldStoredAmount = CharVars.StoredDamage;
        If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
            If(DamageAmount, default, CO_GREATER_THAN, default, 0, () => {
                DamageReduction = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.1);
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.9);
                CharVars.StoredDamage = Math(0 + (DamageReduction ?? 0), MO_ADD, 0 + (CharVars.StoredDamage ?? 0));
            });
        });
        CharVars.StoredDamage = Math(0 + (CharVars.StoredDamage ?? 0), MO_MIN, 200);
        SetBuffToolTipVar(1, 0 + (CharVars.StoredDamage ?? 0));
        SpellBuffAdd(Owner, Owner, "OdinCenterRelicShieldCheck", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.oldArmorAmount = this.TotalArmorAmount;
        If(this.TotalArmorAmount, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.TotalArmorAmount = Math(0 + (this.TotalArmorAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.TotalArmorAmount ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.TotalArmorAmount ?? 0));
            this.TotalArmorAmount = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            RemoveShield(Owner, 0 + (this.TotalArmorAmount ?? 0), true, true);
            SpellEffectRemove(this.buffParticle2);
        });
        SetBuffToolTipVar(1, 0 + (this.TotalArmorAmount ?? 0));
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.75);
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            If(DamageType, default, CO_DAMAGE_SOURCETYPE_IS, default, DAMAGESOURCE_PERIODIC, () => {
                
            });
            Else(() => {
                BuffName = GetDamagingBuffName();
                DamageStartTime = GetBuffStartTime(Owner, BuffName);
                CancelChannel = false;
                If(DamageStartTime, default, CO_EQUAL, default, 0, () => {
                    CancelChannel = true;
                });
                If(DamageStartTime, default, CO_GREATER_THAN_OR_EQUAL, this.ChannelStartTime, default, () => {
                    CancelChannel = true;
                });
                If(CancelChannel, default, CO_EQUAL, default, true, () => {
                    SpellEffectCreate(asdf, default, "Ezreal_essenceflux_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, true, false, false, false, false, default, default);
                    SpellBuffClear(Owner, "OdinCaptureChannel");
                    IssueOrder(Owner, AI_HOLD, default, Owner);
                    SpellBuffAdd(Attacker, Owner, "OdinCaptureInterrupt", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            If(DamageType, default, CO_DAMAGE_SOURCETYPE_IS, default, DAMAGESOURCE_PERIODIC, () => {
                
            });
            Else(() => {
                BuffName = GetDamagingBuffName();
                DamageStartTime = GetBuffStartTime(Owner, BuffName);
                CancelChannel = false;
                If(DamageStartTime, default, CO_EQUAL, default, 0, () => {
                    CancelChannel = true;
                });
                If(DamageStartTime, default, CO_GREATER_THAN_OR_EQUAL, this.ChannelStartTime, default, () => {
                    CancelChannel = true;
                });
                If(CancelChannel, default, CO_EQUAL, default, true, () => {
                    SpellEffectCreate(asdf, default, "Ezreal_essenceflux_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, true, false, false, false, false, default, default);
                    IssueOrder(Owner, AI_ORDER_NONE, default, Owner);
                    SpellBuffRemove(Attacker, "OdinChannelVision", Attacker, 0);
                    SpellBuffRemoveCurrent(Owner);
                });
            });
        });
        Caster = SetBuffCasterUnit();
        If(Attacker, default, CO_EQUAL, Caster, default, () => {
            HPTotal = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            HPPercent = Math(0 + (HPTotal ?? 0), MO_MULTIPLY, 0.045);
            DamageAmount = Math(0 + (HPPercent ?? 0), MO_MAX, 0 + (DamageAmount ?? 0));
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            DamageAmount = Math(0.5, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        });
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.5);
        this.oldArmorAmount = this.TotalShield;
        If(this.TotalShield, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.TotalShield = Math(0 + (this.TotalShield ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.TotalShield ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.TotalShield ?? 0));
            this.TotalShield = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellBuffRemoveCurrent(Owner);
        });
        SetBuffToolTipVar(1, 0 + (this.TotalShield ?? 0));
        this.oldArmorAmount = this.TotalArmorAmount;
        If(this.TotalArmorAmount, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.TotalArmorAmount = Math(0 + (this.TotalArmorAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.TotalArmorAmount ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.TotalArmorAmount ?? 0));
            this.TotalArmorAmount = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellBuffRemoveCurrent(Owner);
        });
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.75);
        If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
            If(Attacker, default, CO_IS_NOT_TURRET, default, true, () => {
                DrainAmount = DamageAmount;
                Caster = SetBuffCasterUnit();
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (this.DefenseBonus ?? 0));
                DamageAbsorbed = Math(1, MO_SUBTRACT, 0 + (this.DefenseBonus ?? 0));
                DrainAmount = Math(0 + (DrainAmount ?? 0), MO_MULTIPLY, 0 + (DamageAbsorbed ?? 0));
                NextBuffVars.DrainAmount = DrainAmount;
                SpellBuffAdd(Attacker, Caster, "MaokaiDrain3Tally", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                IfNotHasBuff(Caster, Caster, "MaokaiDrain3Toggle", () => {
                    TargetPos = this.TargetPos;
                    SpellBuffAdd(Caster, Caster, "MaokaiDrain3Toggle", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    SpellEffectCreate(this.Particle4, default, "maoki_torrent_damage_pulse.troy", default, TEAM_NEUTRAL, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, true, default, default, false, default, default, default);
                });
            });
        });
        this.oldArmorAmount = this.ShieldAbsorb;
        If(this.ShieldAbsorb, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.ShieldAbsorb = Math(0 + (this.ShieldAbsorb ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.ShieldAbsorb ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            Caster = SetBuffCasterUnit();
            TeamID = GetTeamID(default);
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.ShieldAbsorb ?? 0));
            this.ShieldAbsorb = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellEffectCreate(ar, default, "blindMonk_W_shield_block.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, default, default, default);
            SpellBuffRemoveCurrent(Owner);
        });
        this.oldArmorAmount = this.DamageBlock;
        If(this.DamageBlock, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.DamageBlock = Math(0 + (this.DamageBlock ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            TeamID = GetTeamID(default);
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
            this.DamageBlock = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellEffectCreate(ar, default, "SpellEffect_proc.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
            SpellBuffRemoveCurrent(Owner);
        });
        this.oldArmorAmount = this.DamageBlock;
        If(this.DamageBlock, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.DamageBlock = Math(0 + (this.DamageBlock ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            TeamID = GetTeamID(default);
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
            this.DamageBlock = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellEffectCreate(ar, default, "SpellEffect_proc.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
            SpellBuffRemoveCurrent(Owner);
        });
        SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        DamageAmount = 0;
        CurHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        Caster = SetBuffCasterUnit();
        If(CurHealth, default, CO_LESS_THAN_OR_EQUAL, DamageAmount, default, () => {
            DamageAmount = Math(0 + (CurHealth ?? 0), MO_SUBTRACT, 1);
            NextBuffVars.HealthPlusAbility = this.HealthPlusAbility;
            this.WillRemove = true;
            IfNotHasBuff(Owner, Owner, "YorickRAZombie", () => {
                IfNotHasBuff(Owner, Owner, "YorickRAZombieLich", () => {
                    IfNotHasBuff(Owner, Owner, "YorickRAZombieKogMaw", () => {
                        IfNotHasBuff(Owner, Owner, "YorickRAPetBuff2", () => {
                            SpellBuffAdd(Caster, Owner, "ChronoRevive", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        If(this.activations, default, CO_EQUAL, default, 1, () => {
            If(DamageAmount, default, CO_GREATER_THAN, default, 0, () => {
                If(DamageAmount, default, CO_LESS_THAN_OR_EQUAL, default, 10, () => {
                    DamageAmount = this.TickDamage;
                    this.activations = 0;
                    Caster = SetBuffCasterUnit();
                    SpellBuffRemove(Owner, "TimeBombCountdown", Caster, default);
                });
            });
        });
        If(default, DAMAGESOURCE_PERIODIC, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
                SpellEffectCreate(OnHitSpellEffect, default, "JaxRelentlessAssaultShield_hit.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            });
        });
        this.oldArmorAmount = this.DamageBlock;
        If(this.DamageBlock, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.DamageBlock = Math(0 + (this.DamageBlock ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
            this.DamageBlock = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellBuffRemoveCurrent(Owner);
        });
        CurrentEnergy = GetPAROrHealth(Owner, GetPAR, PAR_SHIELD);
        DA = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, -1);
        IncPAR(Owner, 0 + (DA ?? 0));
        If(CurrentEnergy, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (CurrentEnergy ?? 0));
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            IfNotHasBuff(Owner, Owner, "IfHasBuffCheck", () => {
                If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
                    ForEachUnitInTargetArea(Owner, Owner, 1500, "AffectFriends AffectMinions ", "H28GEvolutionTurret", true, (Unit) => {
                        IfNotHasBuff(Unit, Nothing, "H28GEvolutionTurretSpell1", () => {
                            SetTriggerUnit(Attacker);
                            Distance = DistanceBetweenObjects("Attacker", "Unit");
                            If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 450, () => {
                                CancelAutoAttack(Unit, true);
                                SpellBuffClear(Unit, "H28GEvolutionTurretSpell2");
                                SpellBuffClear(Unit, "H28GEvolutionTurretSpell3");
                                SpellBuffAdd(Attacker, Unit, "H28GEvolutionTurretSpell1", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                            });
                        });
                    });
                    SpellBuffAdd(Owner, Owner, "IfHasBuffCheck", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        this.oldArmorAmount = this.ShieldHealth;
        If(this.ShieldHealth, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.ShieldHealth = Math(0 + (this.ShieldHealth ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.ShieldHealth ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.ShieldHealth ?? 0));
            this.ShieldHealth = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        SpellBuffAdd(Owner, Owner, "MalphiteShieldBeenHit", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.oldArmorAmount = this.TotalArmorAmount;
        If(this.TotalArmorAmount, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.TotalArmorAmount = Math(0 + (this.TotalArmorAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.TotalArmorAmount ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.TotalArmorAmount ?? 0));
            this.TotalArmorAmount = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellBuffRemoveCurrent(Owner);
        });
        this.oldArmorAmount = this.DamageBlock;
        If(this.DamageBlock, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.DamageBlock = Math(0 + (this.DamageBlock ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            TeamID = GetTeamID(default);
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
            this.DamageBlock = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellEffectCreate(ar, default, "shen_Feint_block.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
            SpellBuffRemoveCurrent(Owner);
        });
        this.oldArmorAmount = this.shieldHealth;
        If(this.shieldHealth, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.shieldHealth = Math(0 + (this.shieldHealth ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.shieldHealth ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SetBuffToolTipVar(1, 0 + (this.shieldHealth ?? 0));
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.shieldHealth ?? 0));
            this.shieldHealth = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellBuffRemoveCurrent(Owner);
        });
        If(default, DAMAGESOURCE_PERIODIC, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
                SpellBuffAdd(Owner, Owner, "TeemoMoveQuickDebuff", 1, 1, 0 + (this.DebuffDuration ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
                SpellBuffAdd(Owner, Owner, "TeemoMoveQuickDebuff", 1, 1, 0 + (this.DebuffDuration ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
            });
        });
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        If(default, DAMAGESOURCE_PERIODIC, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            Caster = SetBuffCasterUnit();
            NextBuffVars.HealAmount = this.HealAmount;
            SpellBuffAdd(Caster, Caster, "GalioBulwarkHeal", 1, 1, 0, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            this.HealAmount = Math(0 + (this.HealAmount ?? 0), MO_MULTIPLY, 0.8);
            this.HealAmount = Math(0 + (this.HealAmount ?? 0), MO_MAX, 1);
            If(Owner, default, CO_EQUAL, Caster, default, () => {
                SpellEffectCreate(GalioHitVFX, default, "galio_bullwark_shield_activate_self.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", default, Owner, default, default, false, default, default, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(AllyHitVFX, default, "galio_bullwark_shield_activate.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
            });
        });
        If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.5);
        });
        If(DamageType, default, CO_NOT_EQUAL, default, DAMAGESOURCE_PERIODIC, () => {
            this.HitCount = Math(0 + (this.HitCount ?? 0), MO_ADD, 1);
        });
        this.oldArmorAmount = this.TotalArmorAmount;
        If(this.TotalArmorAmount, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.TotalArmorAmount = Math(0 + (this.TotalArmorAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.TotalArmorAmount ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.TotalArmorAmount ?? 0));
            this.TotalArmorAmount = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellBuffRemoveCurrent(Owner);
        });
        If(DamageAmount, default, CO_GREATER_THAN, CharVars.TotalDamage, default, () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (CharVars.TotalDamage ?? 0));
            ReduceShield(Owner, 0 + (DamageAmount ?? 0), true, true);
            RemoveShield(Owner, 0, true, true);
            SpellBuffRemove(Owner, default, Owner, 0);
        });
        Else(() => {
            ReduceShield(Owner, 0 + (DamageAmount ?? 0), true, true);
            CharVars.TotalDamage = Math(0 + (CharVars.TotalDamage ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
        });
        If(Attacker, default, CO_IS_TYPE_TURRET, default, true, () => {
            
        });
        Else(() => {
            If(DamageType, default, CO_EQUAL, default, TRUE_DAMAGE, () => {
                DamageAmount = 0;
            });
            Else(() => {
                DamageAmount = 1;
            });
        });
        this.oldArmorAmount = this.Shield;
        If(this.Shield, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.Shield = Math(0 + (this.Shield ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.Shield ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.Shield ?? 0));
            this.Shield = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellBuffRemoveCurrent(Owner);
        });
        SetBuffToolTipVar(1, 0 + (this.Shield ?? 0));
        If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
            If(DamageAmount, default, CO_GREATER_THAN, default, 0, () => {
                AttackSpeedBoost = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.0015);
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (CharVars.MagicAbsorb ?? 0));
                SpellBuffAdd(Owner, Owner, "VoidStoneAttackSpeedBoost", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
            AttackSpeedIncrement = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.0015);
            this.AttackSpeedBoost = Math(0 + (AttackSpeedIncrement ?? 0), MO_ADD, 0 + (this.AttackSpeedBoost ?? 0));
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            DamageAmount = 0;
        });
        this.oldArmorAmount = this.DamageBlock;
        If(this.DamageBlock, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.DamageBlock = Math(0 + (this.DamageBlock ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            TeamID = GetTeamID(default);
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
            this.DamageBlock = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellEffectCreate(ar, default, "exile_E_interupt.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
            SpellBuffRemoveCurrent(Owner);
        });
        CurrentHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        MaxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        remainingHealth = Math(0 + (CurrentHealth ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
        percentHealthRemaining = Math(0 + (remainingHealth ?? 0), MO_DIVIDE, 0 + (MaxHealth ?? 0));
        IfNotHasBuff(Owner, Owner, "ManaBarrier", () => {
            IfNotHasBuff(Owner, Owner, "ManaBarrierCooldown", () => {
                If(percentHealthRemaining, default, CO_LESS_THAN_OR_EQUAL, default, 0.2, () => {
                    twentyPercentHealth = Math(0.2, MO_MULTIPLY, 0 + (MaxHealth ?? 0));
                    damageToLetThrough = Math(0 + (CurrentHealth ?? 0), MO_SUBTRACT, 0 + (twentyPercentHealth ?? 0));
                    damageToBlock = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (damageToLetThrough ?? 0));
                    CurMana = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
                    ManaShield = Math(0 + (CurMana ?? 0), MO_MULTIPLY, 0.5);
                    If(ManaShield, default, CO_GREATER_THAN_OR_EQUAL, damageToBlock, default, () => {
                        NextBuffVars.ManaShield = ManaShield;
                        NextBuffVars.amountToSubtract = damageToBlock;
                        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (damageToBlock ?? 0));
                        SpellEffectCreate(default, default, "SteamGolemShield_hit.troy", default, TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
                        SpellBuffAdd(Owner, Owner, "ManaBarrier", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                    });
                    Else(() => {
                        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (ManaShield ?? 0));
                        SpellEffectCreate(default, default, "SteamGolemShield_hit.troy", default, TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
                    });
                    SpellBuffAdd(Owner, Owner, "ManaBarrierCooldown", 1, 1, 60, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
        });
        this.oldArmorAmount = this.ManaShield;
        TeamID = GetTeamID(default);
        If(this.ManaShield, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.ManaShield = Math(0 + (this.ManaShield ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.ManaShield ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellEffectCreate(default, default, "SteamGolemShield_hit.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.ManaShield ?? 0));
            this.ManaShield = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellEffectCreate(default, default, "SteamGolemShield_hit.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
            SpellBuffRemoveCurrent(Owner);
        });
        SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CurHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        If(CurHealth, default, CO_LESS_THAN_OR_EQUAL, DamageAmount, default, () => {
            IfHasBuff(Owner, Owner, "WillRevive", () => {
                
            });
            Else(() => {
                DamageAmount = 0;
                IfNotHasBuff(Owner, Owner, "Rebirth", () => {
                    IfNotHasBuff(Owner, Owner, "YorickRAZombie", () => {
                        Level = GetLevel(Owner);
                        NextBuffVars.RebirthArmorMod = this.VALUE_BY_LEVEL;
                        SpellBuffAdd(Owner, Owner, "Rebirth", 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                });
                this.WillRemove = true;
            });
        });
        If(this.OneFrame, default, CO_EQUAL, default, true, () => {
            DamageAmount = 0;
        });
        this.oldArmorAmount = this.ShieldAmount;
        If(this.ShieldAmount, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.ShieldAmount = Math(0 + (this.ShieldAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.ShieldAmount ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.ShieldAmount ?? 0));
            this.ShieldAmount = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellBuffRemoveCurrent(Owner);
        });
        this.oldArmorAmount = this.ShieldHealth;
        If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
            If(this.ShieldHealth, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
                this.ShieldHealth = Math(0 + (this.ShieldHealth ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
                DamageAmount = 0;
                this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.ShieldHealth ?? 0));
                ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, false);
            });
            Else(() => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.ShieldHealth ?? 0));
                this.ShieldHealth = 0;
                ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, false);
            });
        });
        this.oldArmorAmount = this.DamageBlock;
        If(this.DamageBlock, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.DamageBlock = Math(0 + (this.DamageBlock ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            TeamID = GetTeamID(default);
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
            this.DamageBlock = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellBuffRemoveCurrent(Owner);
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            DamageAmount = 0;
        });
        this.oldArmorAmount = this.Shield;
        If(this.Shield, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.Shield = Math(0 + (this.Shield ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.Shield ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.Shield ?? 0));
            this.Shield = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellBuffRemoveCurrent(Owner);
        });
        SetBuffToolTipVar(1, 0 + (this.Shield ?? 0));
        CurrentHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        MaxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        remainingHealth = Math(0 + (CurrentHealth ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
        percentHealthRemaining = Math(0 + (remainingHealth ?? 0), MO_DIVIDE, 0 + (MaxHealth ?? 0));
        IfNotHasBuff(Owner, Owner, "VolibearPassiveCD", () => {
            If(percentHealthRemaining, default, CO_LESS_THAN_OR_EQUAL, default, 0.3, () => {
                Duration = 6;
                IfHasBuff(Owner, Owner, "VolibearPassiveHeal", () => {
                    RemainingDuration = GetBuffRemainingDuration(Owner, "VolibearPassiveHeal");
                    Duration = Math(0 + (Duration ?? 0), MO_ADD, 0 + (RemainingDuration ?? 0));
                });
                SpellBuffAdd(Owner, Owner, "VolibearPassiveHeal", 1, 1, 0 + (Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SpellBuffAdd(Owner, Owner, "VolibearPassiveCD", 1, 1, 120, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SpellBuffRemove(Owner, "VolibearPassiveHealCheck", Owner, 0);
            });
        });
        SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CurHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        If(CurHealth, default, CO_LESS_THAN_OR_EQUAL, DamageAmount, default, () => {
            DamageAmount = Math(0 + (CurHealth ?? 0), MO_SUBTRACT, 1);
            Say(Owner, "game_lua_UndyingRage", default);
        });
        DamageAmount = 0;
        IfHasBuff(Owner, Owner, "KogmawIcathianSurprise", () => {
            DamageAmount = 0;
        });
        DamageAmount = 0;
        IfHasBuff(Owner, Owner, "DeathDefiedBuff", () => {
            DamageAmount = 0;
        });
        this.oldArmorAmount = this.DamageBlock;
        If(this.DamageBlock, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.DamageBlock = Math(0 + (this.DamageBlock ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            TeamID = GetTeamID(default);
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
            this.DamageBlock = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellBuffRemoveCurrent(Owner);
        });
        this.oldArmorAmount = this.TotalArmorAmount;
        If(this.TotalArmorAmount, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.TotalArmorAmount = Math(0 + (this.TotalArmorAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.TotalArmorAmount ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.TotalArmorAmount ?? 0));
            this.TotalArmorAmount = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellBuffRemoveCurrent(Owner);
        });
        this.oldArmorAmount = this.TotalArmorAmount;
        If(this.TotalArmorAmount, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.TotalArmorAmount = Math(0 + (this.TotalArmorAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.TotalArmorAmount ?? 0));
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.TotalArmorAmount ?? 0));
            this.TotalArmorAmount = 0;
            ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, true);
            SpellBuffRemoveCurrent(Owner);
        });
        SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, false, false, false, default);
        SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
            If(this.DamageAbsorption, default, CO_LESS_THAN_OR_EQUAL, DamageAmount, default, () => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageAbsorption ?? 0));
            });
            Else(() => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
                SpellEffectCreate(Particle, default, "AnnieSparks.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, default, default, default, default);
                ApplyDamage(Owner, Attacker, 0 + (this.DamageReturn ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Owner);
            });
        });
        SetTriggerUnit(Attacker);
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
                SpellBuffAdd(Owner, Attacker, "JackInTheBoxHardLock", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (this.DamageTaken ?? 0));
        PassiveMultiplier = 0.05;
        Count = 0;
        IfHasBuff(Owner, Nothing, "YorickSummonSpectral", () => {
            Count = Math(0 + (Count ?? 0), MO_ADD, 1);
        });
        IfHasBuff(Owner, Nothing, "YorickSummonRavenous", () => {
            Count = Math(0 + (Count ?? 0), MO_ADD, 1);
        });
        IfHasBuff(Owner, Nothing, "YorickSummonDecayed", () => {
            Count = Math(0 + (Count ?? 0), MO_ADD, 1);
        });
        IfHasBuff(Owner, Nothing, "YorickRARemovePet", () => {
            Count = Math(0 + (Count ?? 0), MO_ADD, 1);
        });
        PassiveMultiplier = Math(0 + (Count ?? 0), MO_MULTIPLY, 0 + (PassiveMultiplier ?? 0));
        PassiveMultiplier = Math(1, MO_SUBTRACT, 0 + (PassiveMultiplier ?? 0));
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (PassiveMultiplier ?? 0));
        If(default, DAMAGESOURCE_INTERNALRAW, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            DamageAmount = 0;
        });
        If(default, DAMAGESOURCE_INTERNALRAW, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            DamageAmount = 0;
        });
        If(default, DAMAGESOURCE_INTERNALRAW, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            DamageAmount = 0;
        });
        IfHasBuff(Owner, Owner, "YorickRADelay", () => {
            DamageAmount = 0;
        });
        IfHasBuff(Attacker, Owner, "PoppyDITarget", () => {
            
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
        });
        If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
            If(Attacker, default, CO_IS_NOT_TURRET, default, default, () => {
                HealthCurrent = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
                DamageSoftCap = Math(0.1, MO_MULTIPLY, 0 + (HealthCurrent ?? 0));
                DamageManipulator = DamageAmount;
                If(DamageManipulator, default, CO_GREATER_THAN, DamageSoftCap, default, () => {
                    DamageManipulator = Math(0 + (DamageManipulator ?? 0), MO_SUBTRACT, 0 + (DamageSoftCap ?? 0));
                    DamageManipulator = Math(0 + (DamageManipulator ?? 0), MO_MULTIPLY, 0.5);
                    DamageAmount = Math(0 + (DamageSoftCap ?? 0), MO_ADD, 0 + (DamageManipulator ?? 0));
                });
            });
        });
        If(this.WillRemove, default, CO_EQUAL, default, true, () => {
            DamageAmount = 0;
        });
        DamageAmount = Math(0.85, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        If(default, DAMAGESOURCE_INTERNALRAW, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            DamageAmount = 0;
        });
        IfNotHasBuff(Owner, Owner, "HasBeenRevived", () => {
            CurHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
            If(CurHealth, default, CO_LESS_THAN_OR_EQUAL, DamageAmount, default, () => {
                If(default, DAMAGESOURCE_INTERNALRAW, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
                    IfNotHasBuff(Owner, Owner, "GuardianAngel", () => {
                        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                            IfNotHasBuff(Owner, Owner, "YorickRAZombie", () => {
                                IfNotHasBuff(Owner, Owner, "YorickRAZombieLich", () => {
                                    IfNotHasBuff(Owner, Owner, "YorickRAZombieKogMaw", () => {
                                        DamageAmount = Math(0 + (CurHealth ?? 0), MO_SUBTRACT, 1);
                                        SpellBuffAdd(Owner, Owner, "GuardianAngel", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        If(DamageAmount, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            If(Attacker, default, CO_IS_NOT_TURRET, default, default, () => {
                If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
                    DamageAmount = 0;
                });
                Else(() => {
                    DamageAmount = 1;
                });
            });
        });
        this.oldArmorAmount = this.ShieldHealth;
        If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
            If(this.ShieldHealth, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
                this.ShieldHealth = Math(0 + (this.ShieldHealth ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
                DamageAmount = 0;
                this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.ShieldHealth ?? 0));
                ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, false);
            });
            Else(() => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.ShieldHealth ?? 0));
                this.ShieldHealth = 0;
                ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, false);
            });
        });
        If(this.ShieldHealth, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
            this.ShieldHealth = Math(0 + (this.ShieldHealth ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
            DamageAmount = 0;
            SetBuffToolTipVar(1, 0 + (this.ShieldHealth ?? 0));
            PercentRemain = Math(0 + (this.ShieldHealth ?? 0), MO_DIVIDE, 0 + (this.InitialHealth ?? 0));
            If(this._66Destroyed, default, CO_EQUAL, default, false, () => {
                If(PercentRemain, default, CO_LESS_THAN_OR_EQUAL, default, 0.33, () => {
                    this._66Destroyed = true;
                    SpellEffectRemove(this.Particle2);
                });
            });
            If(this._100Destroyed, default, CO_EQUAL, default, false, () => {
                If(PercentRemain, default, CO_LESS_THAN_OR_EQUAL, default, 0.66, () => {
                    SpellEffectRemove(this.Particle1);
                    this._100Destroyed = true;
                });
            });
        });
        Else(() => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.ShieldHealth ?? 0));
            this.ShieldHealth = 0;
            SpellBuffRemoveCurrent(Owner);
        });
        If(DamageAmount, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            If(Attacker, default, CO_IS_NOT_TURRET, default, default, () => {
                If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
                    DamageAmount = 0;
                });
                Else(() => {
                    DamageAmount = 1;
                });
            });
        });
        this.oldArmorAmount = this.ShieldHealth;
        If(DamageAmount, default, CO_GREATER_THAN, default, 0, () => {
            If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
                SpellEffectCreate(a, default, "hexTech_dmg_shield_onHit_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
                SpellEffectCreate(b, default, "hexTech_dmg_shield_onHit_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
                If(this.ShieldHealth, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
                    this.ShieldHealth = Math(0 + (this.ShieldHealth ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
                    DamageAmount = 0;
                    this.oldArmorAmount = Math(0 + (this.oldArmorAmount ?? 0), MO_SUBTRACT, 0 + (this.ShieldHealth ?? 0));
                    ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, false);
                });
                Else(() => {
                    DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.ShieldHealth ?? 0));
                    this.ShieldHealth = 0;
                    ReduceShield(Owner, 0 + (this.oldArmorAmount ?? 0), true, false);
                });
            });
        });
        If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
            If(DamageAmount, default, CO_GREATER_THAN, default, 0, () => {
                this.StatBoostInc = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.0625);
                this.StatBoost = Math(0 + (this.StatBoost ?? 0), MO_ADD, 0 + (this.StatBoostInc ?? 0));
                this.StatBoost = Math(0 + (this.StatBoost ?? 0), MO_MIN, 50);
                NextBuffVars.StatBoost = this.StatBoost;
                SpellBuffAdd(Owner, Owner, "RunegorgedBattleaxe", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
            });
        });
        If(DamageAmount, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            If(Attacker, default, CO_IS_NOT_TURRET, default, default, () => {
                If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
                    DamageAmount = 0;
                });
                Else(() => {
                    DamageAmount = 1;
                });
            });
        });
    }
    public void UpdateSelfBuffActions()
    {
        #region VarDecl
        Object? Level = null;
        Object? ForitfyCheck = null;
        Object? Cooldown = null;
        Object? ForitfyCheck2 = null;
        Object? DotCheck = null;
        Object? DotCheck2 = null;
        float? CurrentHealth = null;
        float? MaxHealth = null;
        float? PercentHealth = null;
        float? BlitzAP = null;
        float? KayleAP = null;
        Object? DamageMod = null;
        float? AttackDamage = null;
        int? WarwickID = null;
        float? armorMod = null;
        float? bonusArmor = null;
        Object? Level2 = null;
        TeamId? TeamID = null;
        float? Dodge = null;
        long? Factor = null;
        long? FlatBonusMR = null;
        float? AD = null;
        int? Count = null;
        Object? HealthPerStack = null;
        Object? FeastBase = null;
        float? BonusFeastHealth = null;
        float? FeastHealth = null;
        float? TargetHealth = null;
        float? BonusAD = null;
        float? BonusAD200 = null;
        Object? Cooldown2 = null;
        ObjAIBase? Caster = null;
        float? TempLevel = null;
        float? BonusAD9 = null;
        float? Damage = null;
        float? BaseDamage = null;
        Object? HSS = null;
        float? HSSDamage = null;
        Object? Spear = null;
        float? SpearDamage = null;
        float? totalDamage = null;
        float? baseDamage = null;
        float? bonusDamage = null;
        float? Spell3Display = null;
        Object? ShatterCD = null;
        float? ArmorVal = null;
        float? BonusDamage = null;
        Object? MushroomCooldown = null;
        float? CooldownMod = null;
        float? MushroomCooldownNL = null;
        float? Mana = null;
        float? BonusDamage2 = null;
        float? TAD = null;
        float? BonusAD2 = null;
        TeamId? OwnerTeam = null;
        float? CooldownStat = null;
        float? Multiplier = null;
        float? NewCooldown = null;
        float? bbBonusDamage = null;
        float? dlBonusDamage = null;
        float? AkaliDamage1 = null;
        Object? DanceTimerCooldown = null;
        float? DanceTimerCooldownNL = null;
        float? AP = null;
        float? FinalAP = null;
        float? RAttackGain = null;
        float? BaseAD = null;
        float? QAttackDamage = null;
        float? RAttackDamage = null;
        float? EAttackDamage = null;
        float? WAttackDamage = null;
        float? RenektonBonusAD = null;
        float? RenekthonTooltip1 = null;
        float? RenekthonTooltip1b = null;
        float? RenekthonTooltip3 = null;
        float? RenekthonTooltip4 = null;
        float? RenekthonTooltip2 = null;
        float? RenekthonTooltip5 = null;
        float? RageCount = null;
        bool? IsInBrush = null;
        float? OwnerLevel = null;
        float? UnitLevel = null;
        Object? Scaling = null;
        float? Damagess = null;
        float? TTVar = null;
        float? CurTime = null;
        float? TimeSinceLastHit = null;
        float? HPPoolMod = null;
        float? TotalAD = null;
        float? AD1 = null;
        float? AD3A = null;
        float? AD3B = null;
        float? WBonusAD = null;
        float? EBonusAD = null;
        float? QTotalBonus = null;
        float? RBonusAD = null;
        float? QMagicBonus = null;
        float? W2BonusAD = null;
        Object? QDamagePercentVal = null;
        float? BaseAP = null;
        float? QBonusAD2 = null;
        long? ChargeCooldown = null;
        Object? MantraTimerCooldown = null;
        float? HealthDamage = null;
        float? BonusAD80 = null;
        #endregion
        Level = TalentLevel;
        AvatarVars.MasteryButcher = true;
        AvatarVars.MasteryButcherAmt = this.VALUE_BY_LEVEL;
        AvatarVars.Scout = true;
        ForitfyCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(ForitfyCheck, default, CO_EQUAL, default, "SummonerPromote", () => {
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                IfHasBuff(Owner, Owner, "PromoteBuff", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "PromoteBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
                });
            });
        });
        ForitfyCheck2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(ForitfyCheck2, default, CO_EQUAL, default, "SummonerPromote", () => {
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                IfHasBuff(Owner, Owner, "PromoteBuff", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "PromoteBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
                });
            });
        });
        Level = TalentLevel;
        NextBuffVars.GoldAmount = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "MasteryHoardBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        DotCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(DotCheck, default, CO_EQUAL, default, "SummonerDot", () => {
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                IfHasBuff(Owner, Owner, "BurningEmbers", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "BurningEmbers", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
                });
            });
            Else(() => {
                SpellBuffRemove(Owner, "BurningEmbers", Owner, default);
            });
        });
        DotCheck2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(DotCheck2, default, CO_EQUAL, default, "SummonerDot", () => {
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                IfHasBuff(Owner, Owner, "BurningEmbers", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "BurningEmbers", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
                });
            });
            Else(() => {
                SpellBuffRemove(Owner, "BurningEmbers", Owner, default);
            });
        });
        If(TalentLevel, default, CO_EQUAL, default, 2, () => {
            SpellBuffAdd(Owner, Owner, "MonsterBuffs2", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "MonsterBuffs", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        DotCheck = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(DotCheck, default, CO_EQUAL, default, "SummonerDot", () => {
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                IfHasBuff(Owner, Owner, "BurningEmbers", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "BurningEmbers", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
            Else(() => {
                SpellBuffRemove(Owner, "BurningEmbers", Owner, 0);
            });
        });
        DotCheck2 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
        If(DotCheck2, default, CO_EQUAL, default, "SummonerDot", () => {
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                IfHasBuff(Owner, Owner, "BurningEmbers", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "BurningEmbers", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
            Else(() => {
                SpellBuffRemove(Owner, "BurningEmbers", Owner, 0);
            });
        });
        SpellBuffAdd(Owner, Owner, "MonsterBuffs", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ExecutePeriodically(0.8, CharVars.LastTimeExecuted, default, () => {
            ForEachUnitInTargetArea(Owner, Owner, 400, "AffectFriends AffectHeroes ", default, default, (Unit) => {
                NextBuffVars.AttackSpeedIncrease = CharVars.AttackSpeedIncrease;
                SpellBuffAdd(Owner, Unit, "DivineBlessingAura", 1, default, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, default, default, default, default, default);
            });
        });
        AvatarVars.Test = 10;
        Level = TalentLevel;
        AvatarVars.MasteryInitiate = true;
        AvatarVars.MasteryInitiateAmt = this.VALUE_BY_LEVEL;
        AvatarVars.MasteryBladedArmor = true;
        AvatarVars.MasteryBladedArmorAmt = 6;
        IfHasBuff(Owner, Owner, "MasteryImprovedRecallBuff", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "MasteryImprovedRecallBuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfNotHasBuff(Owner, Owner, "Ardor", () => {
            Level = TalentLevel;
            NextBuffVars.PercentMod = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Owner, "Ardor", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfNotHasBuff(Owner, Owner, "MasteryBlastBuff", () => {
            Level = TalentLevel;
            NextBuffVars.PercentMod = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Owner, "MasteryBlastBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        AvatarVars.MasterySeigeCommander = true;
        Level = TalentLevel;
        AvatarVars.MasteryBounty = true;
        AvatarVars.MasteryBountyAmt = this.VALUE_BY_LEVEL;
        AvatarVars.MasteryScholar = true;
        NextBuffVars.Level = TalentLevel;
        IfHasBuff(Owner, Owner, "OffensiveMasteryBuff", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "OffensiveMasteryBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(3, this.LastTimeExecuted, false, () => {
            Level = TalentLevel;
            AvatarVars.MasteryDemolitionist = true;
            AvatarVars.MasteryDemolitionistAmt = this.VALUE_BY_LEVEL;
        });
        Level = TalentLevel;
        AvatarVars.MasteryJuggernaut = true;
        IfHasBuff(Owner, Owner, "CrestOfNaturesFury", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "CrestOfNaturesFury", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 100000, default, default, default, default);
        });
        IfHasBuff(Owner, Owner, "HPByPlayerLevel", () => {
            
        });
        Else(() => {
            NextBuffVars.HPPerLevel = 130;
            SpellBuffAdd(Owner, Owner, "HPByPlayerLevel", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        IfNotHasBuff(Owner, Owner, "BlessingoftheLizardElder", () => {
            SpellBuffAdd(Owner, Owner, "BlessingoftheLizardElder", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 100000, true, false, default, default);
        });
        IfNotHasBuff(Owner, Owner, "HPByPlayerLevel", () => {
            NextBuffVars.HPPerLevel = 175;
            SpellBuffAdd(Owner, Owner, "HPByPlayerLevel", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            
        });
        Else(() => {
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(Cooldown, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                    IfHasBuff(Owner, Owner, "StaticField", () => {
                        
                    });
                    Else(() => {
                        SpellBuffAdd(Owner, Owner, "StaticField", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
                    });
                });
            });
        });
        CurrentHealth = GetPAROrHealth(Target, GetHealth, PAR_MANA);
        MaxHealth = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
        PercentHealth = Math(0 + (MaxHealth ?? 0), MO_MULTIPLY, 0.2);
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            
        });
        Else(() => {
            IfHasBuff(Owner, Owner, "ManaBarrierCooldown", () => {
                
            });
            Else(() => {
                If(CurrentHealth, default, CO_LESS_THAN_OR_EQUAL, PercentHealth, default, () => {
                    SpellBuffAdd(Owner, Owner, "ManaBarrier", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                    SpellBuffAdd(Owner, Owner, "ManaBarrierCooldown", 1, 1, 60, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                });
            });
        });
        ExecutePeriodically(1, this.LastTime2Executed, true, () => {
            BlitzAP = GetStat(GetFlatMagicDamageMod, Owner);
            SetSpellToolTipVar(0 + (BlitzAP ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(2, this.LastTimeExecuted, true, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 0, () => {
                Level = 1;
            });
            KayleAP = GetStat(GetFlatMagicDamageMod, Owner);
            KayleAP = Math(0.3, MO_MULTIPLY, 0 + (KayleAP ?? 0));
            DamageMod = this.VALUE_BY_LEVEL;
            AttackDamage = Math(0 + (KayleAP ?? 0), MO_ADD, 0 + (DamageMod ?? 0));
            SetSpellToolTipVar(0 + (AttackDamage ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(2, this.LastTimeExecuted, false, () => {
            IfNotHasBuff(Owner, Owner, "HalloweenUrfCD", () => {
                ForNClosestUnitsInTargetArea(Owner, Owner, 300, "AffectEnemies AffectMinions AffectHeroes ", 1, true, default, (Unit) => {
                    IfHasBuff(Unit, Unit, "EternalThirstIcon", () => {
                        WarwickID = GetSkinID(Unit);
                        If(WarwickID, default, CO_EQUAL, default, 2, () => {
                            SpellCast(Owner, Unit, default, Unit, false, 0, SpellSlots, 1, false, false, false, false, false, default);
                            SpellBuffAdd(Owner, Owner, "HalloweenUrfWarwick", 1, 1, 4.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                        });
                        Else(() => {
                            SpellBuffAdd(Owner, Owner, "HalloweenUrfAppear", 1, 1, 6.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                        });
                    });
                    Else(() => {
                        SpellBuffAdd(Owner, Owner, "HalloweenUrfAppear", 1, 1, 6.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                    });
                });
            });
        });
        armorMod = GetArmor(Owner);
        bonusArmor = Math(0 + (armorMod ?? 0), MO_MULTIPLY, 0.1);
        SetSpellToolTipVar(0 + (bonusArmor ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        IfHasBuff(Owner, Owner, "NetherBlade", () => {
            
        });
        Else(() => {
            Level2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level2, default, CO_GREATER_THAN, default, 0, () => {
                SpellBuffAdd(Owner, Owner, "NetherBlade", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                    TeamID = GetTeamID(default);
                    ForEachUnitInTargetArea(Owner, Owner, 1800, "AffectEnemies AffectFriends AffectHeroes AlwaysSelf ", default, true, (Unit) => {
                        If(TeamID, default, CO_EQUAL, default, 100, () => {
                            SpellBuffAdd(Attacker, Unit, "ForcePulse", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                        Else(() => {
                            SpellBuffAdd(Attacker, Unit, "forcepulsechaos", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        ExecutePeriodically(4, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                    SpellBuffAdd(Owner, Unit, "HeightenedLearning", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                });
            });
        });
        SpellBuffAdd(Owner, Owner, "EquipmentMastery", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        IfHasBuff(Owner, Owner, "CounterStrikeDodgeUp", () => {
            
        });
        Else(() => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                SpellBuffAdd(Owner, Owner, "CounterStrikeDodgeUp", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, default, default);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        IfHasBuff(Owner, Owner, "RelentlessAssault", () => {
            
        });
        Else(() => {
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                SpellBuffAdd(Owner, Owner, "RelentlessAssault", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0.25, true, false, default, default);
            });
        });
        AttackDamage = GetStat(GetFlatPhysicalDamageMod, Owner);
        AttackDamage = Math(0 + (AttackDamage ?? 0), MO_MULTIPLY, 0.4);
        SetSpellToolTipVar(0 + (AttackDamage ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        Dodge = GetStat(GetDodge, Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        Factor = this.VALUE_BY_LEVEL;
        If(Level, default, CO_EQUAL, default, 0, () => {
            Factor = 100;
        });
        FlatBonusMR = this.VALUE_BY_LEVEL;
        If(Level, default, CO_EQUAL, default, 0, () => {
            FlatBonusMR = 20;
        });
        CharVars.BonusMR = Math(0 + (Dodge ?? 0), MO_MULTIPLY, 0 + (Factor ?? 0));
        CharVars.BonusMR = Math(0 + (CharVars.BonusMR ?? 0), MO_ADD, 0 + (FlatBonusMR ?? 0));
        SetSpellToolTipVar(0 + (CharVars.BonusMR ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(4, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                    SpellBuffAdd(Owner, Unit, "SecondSight", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(3, CharVars.LastCrit, false, () => {
            CharVars.NumSecondsSinceLastCrit = Math(0 + (CharVars.NumSecondsSinceLastCrit ?? 0), MO_ADD, 1);
        });
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            
        });
        Else(() => {
            IfHasBuff(Owner, Owner, "ArchersMark", () => {
                
            });
            Else(() => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                If(Level, default, CO_GREATER_THAN, default, 0, () => {
                    SpellBuffAdd(Owner, Owner, "ArchersMark", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
                });
            });
        });
        AD = GetTotalAttackDamage(Owner);
        SetSpellToolTipVar(0 + (AD ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            If(Owner, default, CO_IS_DEAD, default, default, () => {
                
            });
            Else(() => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                If(Level, default, CO_GREATER_THAN, default, 0, () => {
                    Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                    If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                        
                    });
                    Else(() => {
                        ForEachUnitInTargetArea(Owner, Owner, 600, "AffectFriends AffectHeroes ", default, default, (Unit) => {
                            SpellBuffAdd(Attacker, Unit, "ShatterAura", 1, 1, 0.6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
                        });
                    });
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            Count = GetBuffCountFromCaster(Owner, Owner, "Feast");
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(Cooldown, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                    ForEachUnitInTargetArea(Owner, Owner, 1500, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
                        Count = GetBuffCountFromCaster(Owner, Owner, "Feast");
                        HealthPerStack = this.VALUE_BY_LEVEL;
                        FeastBase = this.VALUE_BY_LEVEL;
                        BonusFeastHealth = Math(0 + (HealthPerStack ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
                        FeastHealth = Math(0 + (BonusFeastHealth ?? 0), MO_ADD, 0 + (FeastBase ?? 0));
                        TargetHealth = GetPAROrHealth(Unit, GetHealth, PAR_MANA);
                        If(FeastHealth, default, CO_GREATER_THAN_OR_EQUAL, TargetHealth, default, () => {
                            SpellBuffAdd(Owner, Unit, "FeastMarker", 1, 1, 1.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
            BonusAD200 = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 2);
            SetSpellToolTipVar(0 + (BonusAD ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + (BonusAD ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + (BonusAD200 ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "Tantrum", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            IfNotHasBuff(Owner, Owner, "RaiseMoraleTeamBuff", () => {
                SpellBuffAdd(Attacker, Attacker, "RaiseMorale", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        Level2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level2, default, CO_GREATER_THAN, default, 0, () => {
            Cooldown2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown2, default, CO_GREATER_THAN, default, 0, () => {
                
            });
            Else(() => {
                SpellBuffAdd(Attacker, Owner, "PirateScurvy", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 1, true, false, false, default);
            });
        });
        Else(() => {
            SpellBuffAdd(Attacker, Owner, "PirateScurvy", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 1, true, false, false, default);
        });
        AttackDamage = GetTotalAttackDamage(Owner);
        SetSpellToolTipVar(0 + (AttackDamage ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "NashorsToothCD", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "ViktorHexCore", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpellToolTipVar(0 + (CharVars.BonusForItem ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(3, this.LastTimeExecuted2, true, () => {
            SpellBuffAdd(Owner, Owner, "ViktorAugmentE", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                SpellBuffAdd(Attacker, Owner, "SunfireCloakParticle", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                    ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                        If(Owner, default, CO_EQUAL, Unit, default, () => {
                            SpellBuffAdd(Owner, Unit, "EmblemOfValorParticle", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
                        });
                        Else(() => {
                            SpellBuffAdd(Owner, Unit, "EmblemOfValor", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
                        });
                    });
                });
                Else(() => {
                    ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                        Caster = GetPetOwner(Owner);
                        If(Unit, default, CO_EQUAL, Owner, default, () => {
                            IfNotHasBuff(Owner, Caster, "EmblemOfValor", () => {
                                SpellBuffAdd(Owner, Unit, "EmblemOfValorParticle", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
                            });
                        });
                        If(Unit, default, CO_EQUAL, Owner, default, () => {
                            SpellBuffAdd(Owner, Unit, "EmblemOfValorParticle", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
                        });
                        ElseIf(Unit, default, CO_NOT_EQUAL, Caster, default, () => {
                            SpellBuffAdd(Owner, Unit, "EmblemOfValor", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
                        });
                    });
                });
            });
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "Thornmail", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        TempLevel = GetLevel(Owner);
        If(TempLevel, default, CO_GREATER_THAN, this.OwnerLevel, default, () => {
            SpellBuffAdd(Attacker, Target, "CatalystHeal", 1, 1, 8.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            this.OwnerLevel = TempLevel;
        });
        ExecutePeriodically(2, this.LastTimeExecuted, false, () => {
            IfNotHasBuff(Owner, Owner, "BansheesVeilTimer", () => {
                NextBuffVars.WillRemove = false;
                SpellBuffAdd(Owner, Owner, "BansheesVeil", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
            });
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "FiendishCodex", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(0.95, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "TearOfTheGoddessTrack", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpellToolTipVar(0 + (CharVars.TearBonusMana ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "HauntingGuise", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () => {
            NextBuffVars.MagicResistBonus = 30;
            NextBuffVars.ArmorBonus = 25;
            ForEachUnitInTargetArea(Owner, Owner, 800, "AffectFriends AffectMinions AffectHeroes ", default, default, (Unit) => {
                If(Unit, default, CO_EQUAL, Owner, default, () => {
                    SpellBuffAdd(Attacker, Unit, "PendantofZephirisAuraSelf", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
                });
                Else(() => {
                    SpellBuffAdd(Attacker, Unit, "PendantofZephirisAuraFriend", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "MejaisCheck", 1, 1, 1.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            Count = GetBuffCountFromAll(Owner, "MejaisStats");
            If(Count, default, CO_EQUAL, default, 20, () => {
                SpellBuffAdd(Owner, Owner, "MejaisCap", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "AtmasImpaler", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "Brutalizer", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "Kindlegem", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        this.MaxMana = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "TearOfTheGoddessTrack", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpellToolTipVar(0 + (CharVars.TearBonusMana ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(5, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "PrilisasBlessing", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "WriggleLantern", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            IfHasBuff(Owner, Owner, "MadredsRazors", () => {
                SpellBuffRemove(Owner, "MadredsRazors", Owner, default);
            });
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "HextechSweeper", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "OdinBloodrazor", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () => {
            IfNotHasBuff(Owner, Owner, "HasBeenRevived", () => {
                IfNotHasBuff(Owner, Owner, "GuardianAngel", () => {
                    SpellBuffAdd(Owner, Owner, "WillRevive", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                TeamID = GetTeamID(default);
                ForEachUnitInTargetArea(Owner, Owner, 1800, "AffectEnemies AffectFriends AffectHeroes AlwaysSelf ", default, true, (Unit) => {
                    If(TeamID, default, CO_EQUAL, default, 100, () => {
                        SpellBuffAdd(Attacker, Unit, "MaokaiSapMagic", 1, 1, 0.75, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                    Else(() => {
                        SpellBuffAdd(Attacker, Unit, "MaokaiSapMagicChaos", 1, 1, 0.75, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
            BonusAD200 = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 2);
            BonusAD9 = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.9);
            SetSpellToolTipVar(0 + (BonusAD9 ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + (BonusAD ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + (BonusAD200 ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                IfNotHasBuff(Owner, Owner, "MonkeyKingCloneCD", () => {
                    IfNotHasBuff(Owner, Nothing, "MonkeyKingCloneSpellCast", () => {
                        SpellBuffAdd(Owner, Owner, "MonkeyKingCloneApplicator", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
        });
        Damage = GetTotalAttackDamage(Owner);
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        BonusAD = Math(0 + (Damage ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_EQUAL, default, 0, () => {
            Level = 1;
        });
        HSS = this.VALUE_BY_LEVEL;
        HSSDamage = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0 + (HSS ?? 0));
        SetSpellToolTipVar(0 + (HSSDamage ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "Pantheon_CertainDeath", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_EQUAL, default, 0, () => {
            Level = 1;
        });
        Spear = this.VALUE_BY_LEVEL;
        SpearDamage = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0 + (Spear ?? 0));
        SetSpellToolTipVar(0 + (SpearDamage ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ExecutePeriodically(1, this.LastTime2Executed, true, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            totalDamage = GetTotalAttackDamage(Owner);
            baseDamage = GetStat(GetBaseAttackDamage, Owner);
            bonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (baseDamage ?? 0));
            Spell3Display = Math(0 + (bonusDamage ?? 0), MO_MULTIPLY, 1.4);
            SetSpellToolTipVar(0 + (Spell3Display ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        SpellBuffAdd(Owner, Owner, "EquipmentMastery", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        IfHasBuff(Owner, Owner, "CounterStrikeDodgeUp", () => {
            
        });
        Else(() => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                SpellBuffAdd(Owner, Owner, "CounterStrikeDodgeUp", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, default, default);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        IfHasBuff(Owner, Owner, "RelentlessAssault", () => {
            
        });
        Else(() => {
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                SpellBuffAdd(Owner, Owner, "RelentlessAssault", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0.25, true, false, default, default);
            });
        });
        AttackDamage = GetStat(GetFlatPhysicalDamageMod, Owner);
        AttackDamage = Math(0 + (AttackDamage ?? 0), MO_MULTIPLY, 0.4);
        SetSpellToolTipVar(0 + (AttackDamage ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        Dodge = GetStat(GetDodge, Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        Factor = this.VALUE_BY_LEVEL;
        If(Level, default, CO_EQUAL, default, 0, () => {
            Factor = 100;
        });
        FlatBonusMR = this.VALUE_BY_LEVEL;
        If(Level, default, CO_EQUAL, default, 0, () => {
            FlatBonusMR = 20;
        });
        CharVars.BonusMR = Math(0 + (Dodge ?? 0), MO_MULTIPLY, 0 + (Factor ?? 0));
        CharVars.BonusMR = Math(0 + (CharVars.BonusMR ?? 0), MO_ADD, 0 + (FlatBonusMR ?? 0));
        SetSpellToolTipVar(0 + (CharVars.BonusMR ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
                If(Owner, default, CO_IS_DEAD, default, default, () => {
                    
                });
                Else(() => {
                    ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                        SpellBuffAdd(Attacker, Unit, "ShatterAura", 1, 1, 1.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                    ShatterCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                    If(ShatterCD, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                        SpellBuffAdd(Attacker, Target, "ShatterSelfBonus", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                    });
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "ParanoiaMissChance", false, (Unit) => {
                    SpellBuffAdd(Owner, Unit, "ParanoiaMissChance", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Shred, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(4, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                    SpellBuffAdd(Owner, Unit, "HeightenedLearning", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                });
            });
        });
        IfNotHasBuff(Owner, Owner, "MalphiteShieldBeenHit", () => {
            SpellBuffAdd(Owner, Owner, "MalphiteShieldEffect", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                SpellBuffAdd(Owner, Owner, "MalphiteCleave", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
            ArmorVal = GetArmor(Owner);
            ArmorVal = Math(0.5, MO_MULTIPLY, 0 + (ArmorVal ?? 0));
            SetSpellToolTipVar(0 + (ArmorVal ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            SpellBuffAdd(Owner, Owner, "MordekaiserDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        Else(() => {
            IfHasBuff(Owner, Owner, "MordekaiserDeathParticle", () => {
                SpellBuffRemove(Owner, "MordekaiserDeathParticle", Owner, default);
            });
        });
        AD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusDamage = Math(0 + (AD ?? 0), MO_MULTIPLY, 0.8);
        SetSpellToolTipVar(0 + (BonusDamage ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        IfHasBuff(Owner, Owner, "ToxicShot", () => {
            
        });
        Else(() => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                SpellBuffAdd(Owner, Owner, "ToxicShot", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(1, this.LastTime2Executed, true, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 0, () => {
                Level = 1;
            });
            MushroomCooldown = this.VALUE_BY_LEVEL;
            CooldownMod = GetStat(GetPercentCooldownMod, Owner);
            CooldownMod = Math(1, MO_ADD, 0 + (CooldownMod ?? 0));
            CharVars.MushroomCooldown = Math(0 + (MushroomCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMod ?? 0));
            SetSpellToolTipVar(0 + (CharVars.MushroomCooldown ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            MushroomCooldownNL = Math(0 + (MushroomCooldown ?? 0), MO_SUBTRACT, 4);
            MushroomCooldownNL = Math(0 + (MushroomCooldownNL ?? 0), MO_MULTIPLY, 0 + (CooldownMod ?? 0));
            SetSpellToolTipVar(0 + (MushroomCooldownNL ?? 0), 2, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                IfNotHasBuff(Owner, Owner, "SowTheWind", () => {
                    Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                    If(Cooldown, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                        SpellBuffAdd(Owner, Owner, "SowTheWind", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                });
            });
        });
        ExecutePeriodically(4, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (Unit) => {
                    SpellBuffAdd(Owner, Unit, "Tailwind", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        Level = this.VALUE_BY_LEVEL;
        armorMod = GetArmor(Owner);
        bonusArmor = Math(0 + (Level ?? 0), MO_ADD, 0 + (armorMod ?? 0));
        If(Level, 0, CO_EQUAL, default, default, () => {
            bonusArmor = Math(0 + (bonusArmor ?? 0), MO_ADD, 50);
        });
        bonusArmor = Math(0 + (bonusArmor ?? 0), MO_MULTIPLY, 0.1);
        SetSpellToolTipVar(0 + (bonusArmor ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            Mana = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
            BonusDamage = Math(0 + (Mana ?? 0), MO_MULTIPLY, 0.08);
            BonusDamage2 = Math(0 + (Mana ?? 0), MO_MULTIPLY, 0.05);
            SetSpellToolTipVar(0 + (BonusDamage ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            SetSpellToolTipVar(0 + (BonusDamage2 ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
                IfHasBuff(Owner, Owner, "SonaHymnofValor", () => {
                    SpellBuffAdd(Owner, Owner, "SonaHymnofValorAura", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                });
                IfHasBuff(Owner, Owner, "SonaAriaofPerseverance", () => {
                    SpellBuffAdd(Owner, Owner, "SonaAriaofPerseveranceAura", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                });
                IfHasBuff(Owner, Owner, "SonaSongofDiscord", () => {
                    SpellBuffAdd(Owner, Owner, "SonaSongofDiscordAura", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                });
                IfNotHasBuff(Owner, Owner, "SonaSoundOff", () => {
                    IfHasBuff(Owner, Owner, "SonaHymnofValor", () => {
                        SpellBuffAdd(Owner, Owner, "SonaHymnofValorSound", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                    IfHasBuff(Owner, Owner, "SonaAriaofPerseverance", () => {
                        SpellBuffAdd(Owner, Owner, "SonaAriaofPerseveranceSound", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                    IfHasBuff(Owner, Owner, "SonaSongofDiscord", () => {
                        SpellBuffAdd(Owner, Owner, "SonaSongofDiscordSound", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
        });
        BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.6);
        SetSpellToolTipVar(0 + (BonusAD ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(0.4, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_DEAD, default, default, () => {
                SpellBuffAdd(Owner, Owner, "AlZaharDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
            });
            Else(() => {
                IfHasBuff(Owner, Owner, "AlZaharDeathParticle", () => {
                    SpellBuffRemove(Owner, "AlZaharDeathParticle", Owner, default);
                });
            });
        });
        ExecutePeriodically(5, this.LastTimeExecuted, true, () => {
            BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
            BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.8);
            SetSpellToolTipVar(0 + (BonusAD ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            TAD = GetTotalAttackDamage(Owner);
            TAD = Math(0 + (TAD ?? 0), MO_MULTIPLY, 1.2);
            SetSpellToolTipVar(0 + (TAD ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            AD = GetTotalAttackDamage(Owner);
            AD = Math(0 + (AD ?? 0), MO_MULTIPLY, 1.1);
            SetSpellToolTipVar(0 + (AD ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusAD2 = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 1.2);
        BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 1.5);
        SetSpellToolTipVar(0 + (BonusAD2 ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        SetSpellToolTipVar(0 + (BonusAD ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(3, CharVars.LastCrit, false, () => {
            CharVars.NumSecondsSinceLastCrit = Math(0 + (CharVars.NumSecondsSinceLastCrit ?? 0), MO_ADD, 1);
        });
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            
        });
        Else(() => {
            IfHasBuff(Owner, Owner, "ArchersMark", () => {
                
            });
            Else(() => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                If(Level, default, CO_GREATER_THAN, default, 0, () => {
                    SpellBuffAdd(Owner, Owner, "ArchersMark", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
                });
            });
        });
        AD = GetTotalAttackDamage(Owner);
        SetSpellToolTipVar(0 + (AD ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        If(CharVars.HasRemoved, default, CO_NOT_EQUAL, default, true, () => {
            OwnerTeam = GetTeamID(default);
            IfHasBuff(Owner, Owner, "ViktorAugmentQ", () => {
                SpellEffectRemove(this.StaffIdle);
                SpellEffectRemove(this.StaffIdle2);
                CharVars.HasRemoved = true;
                SpellEffectCreate(this.StaffIdleYELLOW, StaffIdleYELLOW2, "Viktorb_yellow.troy", "Viktorb_yellow.troy", OwnerTeam ?? TEAM_NEUTRAL, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, "BUFFBONE_CSTM_WEAPON_1", default, false, false, false, false, false, default, default);
            });
            Else(() => {
                IfHasBuff(Owner, Owner, "ViktorAugmentW", () => {
                    SpellEffectRemove(this.StaffIdle);
                    SpellEffectRemove(this.StaffIdle2);
                    CharVars.HasRemoved = true;
                    SpellEffectCreate(this.StaffIdleBLUE, StaffIdleBLUE2, "Viktorb_blue.troy", "Viktorb_blue.troy", OwnerTeam ?? TEAM_NEUTRAL, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, "BUFFBONE_CSTM_WEAPON_1", default, false, false, false, false, false, default, default);
                });
                Else(() => {
                    IfHasBuff(Owner, Owner, "ViktorAugmentE", () => {
                        SpellEffectRemove(this.StaffIdle);
                        SpellEffectRemove(this.StaffIdle2);
                        CharVars.HasRemoved = true;
                        SpellEffectCreate(this.StaffIdleRED, StaffIdleRED2, "Viktorb_red.troy", "Viktorb_red.troy", OwnerTeam ?? TEAM_NEUTRAL, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, "BUFFBONE_CSTM_WEAPON_1", default, false, false, false, false, false, default, default);
                    });
                });
            });
        });
        IfHasBuff(Owner, Owner, "NetherBlade", () => {
            
        });
        Else(() => {
            Level2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level2, default, CO_GREATER_THAN, default, 0, () => {
                SpellBuffAdd(Owner, Owner, "NetherBlade", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                    TeamID = GetTeamID(default);
                    ForEachUnitInTargetArea(Owner, Owner, 1800, "AffectEnemies AffectFriends AffectHeroes AlwaysSelf ", default, true, (Unit) => {
                        If(TeamID, default, CO_EQUAL, default, 100, () => {
                            SpellBuffAdd(Attacker, Unit, "ForcePulse", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                        Else(() => {
                            SpellBuffAdd(Attacker, Unit, "forcepulsechaos", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        ExecutePeriodically(4, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                    SpellBuffAdd(Owner, Unit, "SecondSight", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            CooldownStat = GetStat(GetPercentCooldownMod, Owner);
            Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
            NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 1);
            SetSpellToolTipVar(0 + (NewCooldown ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        IfHasBuff(Owner, Owner, "DetonatingShot", () => {
            
        });
        Else(() => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "DetonatingShot", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
            });
        });
        ExecutePeriodically(1, this.LastTime2Executed, true, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            totalDamage = GetTotalAttackDamage(Owner);
            baseDamage = GetStat(GetBaseAttackDamage, Owner);
            bonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (baseDamage ?? 0));
            Spell3Display = Math(0 + (bonusDamage ?? 0), MO_MULTIPLY, 1.1);
            SetSpellToolTipVar(0 + (Spell3Display ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(2, this.LastTimeExecuted, false, () => {
            IfNotHasBuff(Owner, Owner, "HalloweenUrfCD", () => {
                ForNClosestUnitsInTargetArea(Owner, Owner, 300, "AffectEnemies AffectMinions AffectHeroes ", 1, true, default, (Unit) => {
                    IfHasBuff(Unit, Unit, "EternalThirstIcon", () => {
                        WarwickID = GetSkinID(Unit);
                        If(WarwickID, default, CO_EQUAL, default, 2, () => {
                            SpellCast(Owner, Unit, default, Unit, false, 0, SpellSlots, 1, false, false, false, false, false, default);
                            SpellBuffAdd(Owner, Owner, "HalloweenUrfWarwick", 1, 1, 4.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                        });
                        Else(() => {
                            SpellBuffAdd(Owner, Owner, "HalloweenUrfAppear", 1, 1, 6.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                        });
                    });
                    Else(() => {
                        SpellBuffAdd(Owner, Owner, "HalloweenUrfAppear", 1, 1, 6.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                    });
                });
            });
        });
        ExecutePeriodically(0.4, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_DEAD, default, default, () => {
                SpellBuffAdd(Owner, Owner, "VladDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            Else(() => {
                IfHasBuff(Owner, Owner, "VladDeathParticle", () => {
                    SpellBuffRemove(Owner, "VladDeathParticle", Owner, default);
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            totalDamage = GetTotalAttackDamage(Owner);
            baseDamage = GetStat(GetBaseAttackDamage, Owner);
            bonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (baseDamage ?? 0));
            bbBonusDamage = Math(0 + (bonusDamage ?? 0), MO_MULTIPLY, 0.8);
            SetSpellToolTipVar(0 + (bbBonusDamage ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            dlBonusDamage = Math(0 + (bonusDamage ?? 0), MO_MULTIPLY, 0.5);
            SetSpellToolTipVar(0 + (dlBonusDamage ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(1, this.LastTime2Executed, true, () => {
            this.AkaliDamageVar = GetTotalAttackDamage(Owner);
            AkaliDamage1 = Math(0 + (this.AkaliDamageVar ?? 0), MO_MULTIPLY, 0.6);
            SetSpellToolTipVar(0 + (AkaliDamage1 ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 0, () => {
                Level = 1;
            });
            DanceTimerCooldown = this.VALUE_BY_LEVEL;
            CooldownMod = GetStat(GetPercentCooldownMod, Owner);
            CooldownMod = Math(1, MO_ADD, 0 + (CooldownMod ?? 0));
            CharVars.DanceTimerCooldown = Math(0 + (DanceTimerCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMod ?? 0));
            SetSpellToolTipVar(0 + (CharVars.DanceTimerCooldown ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            DanceTimerCooldownNL = Math(0 + (DanceTimerCooldown ?? 0), MO_SUBTRACT, 5);
            DanceTimerCooldownNL = Math(0 + (DanceTimerCooldownNL ?? 0), MO_MULTIPLY, 0 + (CooldownMod ?? 0));
            SetSpellToolTipVar(0 + (DanceTimerCooldownNL ?? 0), 2, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(1, this.LastTime2Executed, true, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            totalDamage = GetTotalAttackDamage(Owner);
            baseDamage = GetStat(GetBaseAttackDamage, Owner);
            bonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (baseDamage ?? 0));
            Spell3Display = Math(0 + (bonusDamage ?? 0), MO_MULTIPLY, 1);
            SetSpellToolTipVar(0 + (Spell3Display ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            AP = GetStat(GetFlatMagicDamageMod, Owner);
            FinalAP = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.2);
            BaseDamage = GetTotalAttackDamage(Owner);
            AttackDamage = Math(1, MO_MULTIPLY, 0 + (BaseDamage ?? 0));
            SetSpellToolTipVar(0 + (AttackDamage ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + (FinalAP ?? 0), 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            IfNotHasBuff(Owner, Owner, "RaiseMoraleTeamBuff", () => {
                SpellBuffAdd(Attacker, Attacker, "RaiseMorale", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        Level2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level2, default, CO_GREATER_THAN, default, 0, () => {
            Cooldown2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown2, default, CO_GREATER_THAN, default, 0, () => {
                
            });
            Else(() => {
                SpellBuffAdd(Attacker, Owner, "PirateScurvy", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 1, true, false, false, default);
            });
        });
        Else(() => {
            SpellBuffAdd(Attacker, Owner, "PirateScurvy", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 1, true, false, false, default);
        });
        AttackDamage = GetTotalAttackDamage(Owner);
        SetSpellToolTipVar(0 + (AttackDamage ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            AttackDamage = GetTotalAttackDamage(Owner);
            RAttackGain = Math(0.2, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
            SetSpellToolTipVar(0 + (RAttackGain ?? 0), 3, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            BaseAD = GetStat(GetBaseAttackDamage, Owner);
            AttackDamage = Math(0 + (AttackDamage ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
            QAttackDamage = Math(0.7, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
            SetSpellToolTipVar(0 + (QAttackDamage ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            RAttackDamage = Math(0.6, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
            SetSpellToolTipVar(0 + (RAttackDamage ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            RAttackDamage = Math(1.8, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
            SetSpellToolTipVar(0 + (RAttackDamage ?? 0), 2, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            EAttackDamage = Math(0 + (AttackDamage ?? 0), MO_MULTIPLY, 1);
            SetSpellToolTipVar(0 + (EAttackDamage ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            WAttackDamage = Math(1, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
            SetSpellToolTipVar(0 + (WAttackDamage ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(Cooldown, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                    IfHasBuff(Owner, Owner, "StaticField", () => {
                        
                    });
                    Else(() => {
                        SpellBuffAdd(Owner, Owner, "StaticField", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                });
            });
        });
        ExecutePeriodically(1, this.LastTime2Executed, true, () => {
            BlitzAP = GetStat(GetFlatMagicDamageMod, Owner);
            SetSpellToolTipVar(0 + (BlitzAP ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(1, this.LastTime2Executed, true, () => {
            BaseDamage = GetStat(GetBaseAttackDamage, Owner);
            this.RenekthonDamage = GetTotalAttackDamage(Owner);
            RenektonBonusAD = Math(0 + (this.RenekthonDamage ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
            RenekthonTooltip1 = Math(0 + (RenektonBonusAD ?? 0), MO_MULTIPLY, 0.8);
            SetSpellToolTipVar(0 + (RenekthonTooltip1 ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            RenekthonTooltip1b = Math(1.5, MO_MULTIPLY, 0 + (RenekthonTooltip1 ?? 0));
            SetSpellToolTipVar(0 + (RenekthonTooltip1b ?? 0), 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            RenekthonTooltip3 = Math(0 + (this.RenekthonDamage ?? 0), MO_MULTIPLY, 0 + (this.AttackPercentage ?? 0));
            RenekthonTooltip3 = Math(0 + (RenekthonTooltip3 ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
            SetSpellToolTipVar(0 + (RenekthonTooltip3 ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            RenekthonTooltip4 = Math(0 + (this.RenekthonDamage ?? 0), MO_MULTIPLY, 0 + (this.BonusAttackPercentage ?? 0));
            RenekthonTooltip4 = Math(0 + (RenekthonTooltip4 ?? 0), MO_ADD, 0 + (this.RageBonusDamage ?? 0));
            SetSpellToolTipVar(0 + (RenekthonTooltip4 ?? 0), 2, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            RenekthonTooltip2 = Math(0 + (RenektonBonusAD ?? 0), MO_MULTIPLY, 0.9);
            SetSpellToolTipVar(0 + (RenekthonTooltip2 ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            RenekthonTooltip5 = Math(0 + (RenektonBonusAD ?? 0), MO_MULTIPLY, 1.35);
            SetSpellToolTipVar(0 + (RenekthonTooltip5 ?? 0), 2, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        RageCount = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
        If(RageCount, default, CO_GREATER_THAN_OR_EQUAL, default, 100, () => {
            SetPARColorOverride(Owner, 255, 0, 0, 255, 175, 0, 0, 255);
        });
        Else(() => {
            SetPARColorOverride(Owner, 255, 0, 0, 255, 175, 0, 0, 255);
            ClearPARColorOverride(Owner);
        });
        ExecutePeriodically(1.5, this.LastTimeExecuted, false, () => {
            IfNotHasBuff(Owner, Owner, "ShyvanaTransform", () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                    IncPAR(Owner, 1);
                });
            });
            IfNotHasBuff(Owner, Owner, "ShyvanaDoubleAttack", () => {
                IfNotHasBuff(Owner, Owner, "ShyvanaDoubleAttackDragon", () => {
                    SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                IfHasBuff(Owner, Owner, "WujuStyle", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "WujuStyle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                });
            });
        });
        ExecutePeriodically(0.4, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_DEAD, default, default, () => {
                SpellBuffAdd(Owner, Owner, "CassiopeiaDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            Else(() => {
                IfHasBuff(Owner, Owner, "CassiopeiaDeathParticle", () => {
                    SpellBuffRemove(Owner, "CassiopeiaDeathParticle", Owner, default);
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "VorpalSpikes", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            Count = GetBuffCountFromCaster(Owner, Owner, "Feast");
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(Cooldown, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                    ForEachUnitInTargetArea(Owner, Owner, 1500, "AffectEnemies AffectHeroes ", default, default, (Unit) => {
                        Count = GetBuffCountFromCaster(Owner, Owner, "Feast");
                        HealthPerStack = this.VALUE_BY_LEVEL;
                        FeastBase = this.VALUE_BY_LEVEL;
                        BonusFeastHealth = Math(0 + (HealthPerStack ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
                        FeastHealth = Math(0 + (BonusFeastHealth ?? 0), MO_ADD, 0 + (FeastBase ?? 0));
                        TargetHealth = GetPAROrHealth(Unit, GetHealth, PAR_MANA);
                        If(FeastHealth, default, CO_GREATER_THAN_OR_EQUAL, TargetHealth, default, () => {
                            SpellBuffAdd(Owner, Unit, "FeastMarker", 1, 1, 1.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
                        });
                    });
                });
            });
        });
        IsInBrush = IsInBrush(Attacker);
        If(IsInBrush, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Owner, Owner, "Prowl", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ExecutePeriodically(5, this.LastTimeExecuted, true, () => {
            OwnerLevel = GetLevel(Owner);
            ForEachUnitInTargetArea(Owner, Owner, 500, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (Unit) => {
                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                    UnitLevel = GetLevel(Unit);
                    If(OwnerLevel, default, CO_GREATER_THAN, UnitLevel, default, () => {
                        IncExp(Unit, 5);
                    });
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        Scaling = this.VALUE_BY_LEVEL;
        Damagess = GetTotalAttackDamage(Owner);
        TTVar = Math(0 + (Damagess ?? 0), MO_MULTIPLY, 0 + (Scaling ?? 0));
        SetSpellToolTipVar(0 + (TTVar ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ExecutePeriodically(1, CharVars.LastTimeExecuted, false, () => {
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (Unit) => {
                If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                    SpellBuffAdd(Owner, Unit, "ConsecrationAuraNoParticle", 1, 1, 1.15, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 25000, true, false, default, default);
                });
            });
        });
        BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusAD2 = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 1.2);
        BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.75);
        SetSpellToolTipVar(0 + (BonusAD ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        SetSpellToolTipVar(0 + (BonusAD2 ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            IfNotHasBuff(Owner, Owner, "NocturneUmbraBlades", () => {
                CurTime = GetGameTime();
                TimeSinceLastHit = Math(0 + (CurTime ?? 0), MO_SUBTRACT, 0 + (CharVars.LastHit ?? 0));
                If(TimeSinceLastHit, default, CO_GREATER_THAN_OR_EQUAL, default, 10, () => {
                    IfNotHasBuff(Owner, Owner, "NocturneUmbraBlades", () => {
                        SpellBuffAdd(Owner, Owner, "NocturneUmbraBlades", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () => {
            AttackDamage = GetTotalAttackDamage(Owner);
            AttackDamage = Math(0 + (AttackDamage ?? 0), MO_MULTIPLY, 0.66);
            SetSpellToolTipVar(0 + (AttackDamage ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(0.5, this.LastTime2Executed, true, () => {
            If(Owner, default, CO_IS_DEAD, default, default, () => {
                SpellBuffAdd(Owner, Owner, "UrgotDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            Else(() => {
                IfHasBuff(Owner, Owner, "UrgotDeathParticle", () => {
                    SpellBuffRemove(Owner, "UrgotDeathParticle", Owner, 0);
                });
            });
            AD = GetStat(GetFlatPhysicalDamageMod, Owner);
            BonusDamage = Math(0 + (AD ?? 0), MO_MULTIPLY, 0.6);
            SetSpellToolTipVar(0 + (BonusDamage ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(5, this.LastTimeExecuted, true, () => {
            HPPoolMod = GetStat(GetFlatHPPoolMod, Attacker);
            HPPoolMod = Math(0 + (HPPoolMod ?? 0), MO_MULTIPLY, 0.18);
            SetSpellToolTipVar(0 + (HPPoolMod ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            CooldownStat = GetStat(GetPercentCooldownMod, Owner);
            Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
            NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 1);
            SetSpellToolTipVar(0 + (NewCooldown ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(5, this.LastTimeExecuted, false, () => {
            TotalAD = GetTotalAttackDamage(Owner);
            BaseAD = GetStat(GetBaseAttackDamage, Owner);
            BonusAD = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
            AD1 = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.8);
            AD3A = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 1.4);
            AD3B = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 1.2);
            SetSpellToolTipVar(0 + (AD1 ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + (AD3A ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + (AD3B ?? 0), 2, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(1, this.LastTime2Executed, true, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            totalDamage = GetTotalAttackDamage(Owner);
            baseDamage = GetStat(GetBaseAttackDamage, Owner);
            bonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (baseDamage ?? 0));
            Spell3Display = Math(0 + (bonusDamage ?? 0), MO_MULTIPLY, 0.5);
            SetSpellToolTipVar(0 + (Spell3Display ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            IfNotHasBuff(Owner, Nothing, "YorickRAZombie", () => {
                IfNotHasBuff(Owner, Nothing, "YorickReviveAllySelf", () => {
                    If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                IfHasBuff(Owner, Owner, "KogMawCausticSpittle", () => {
                    
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "KogMawCausticSpittle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_EQUAL, default, 0, () => {
            Level = 1;
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "WizardsRegalia", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "IonianBootsofLucidity", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BonusAD = 0;
        WBonusAD = 0;
        EBonusAD = 0;
        QTotalBonus = 0;
        RBonusAD = 0;
        QMagicBonus = 0;
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        TotalAD = GetTotalAttackDamage(Owner);
        BonusAD = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
        WBonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.6);
        WBonusAD = Math(0 + (WBonusAD ?? 0), MO_ROUNDUP, 0);
        SetSpellToolTipVar(0 + (WBonusAD ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Target);
        W2BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.3);
        W2BonusAD = Math(0 + (W2BonusAD ?? 0), MO_ROUNDUP, 0);
        SetSpellToolTipVar(0 + (W2BonusAD ?? 0), 2, 1, SpellSlots, SPELLBOOK_CHAMPION, Target);
        EBonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 1.2);
        EBonusAD = Math(0 + (EBonusAD ?? 0), MO_ROUNDUP, 0);
        SetSpellToolTipVar(0 + (EBonusAD ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Target);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        QDamagePercentVal = this.VALUE_BY_LEVEL;
        QTotalBonus = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.3);
        QTotalBonus = Math(0 + (QTotalBonus ?? 0), MO_ROUNDUP, 0);
        SetSpellToolTipVar(0 + (QTotalBonus ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Target);
        RBonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.9);
        RBonusAD = Math(0 + (RBonusAD ?? 0), MO_ROUNDUP, 0);
        SetSpellToolTipVar(0 + (RBonusAD ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Target);
        BaseAP = GetStat(GetFlatMagicDamageMod, Owner);
        QMagicBonus = Math(0 + (BaseAP ?? 0), MO_MULTIPLY, 0.1);
        QBonusAD2 = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 1.2);
        QBonusAD2 = Math(0 + (QBonusAD2 ?? 0), MO_ROUNDUP, 0);
        SetSpellToolTipVar(0 + (QBonusAD2 ?? 0), 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Target);
        ExecutePeriodically(9, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "ViktorHexCore", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpellToolTipVar(0 + (CharVars.BonusForItem ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(3, this.LastTimeExecuted2, true, () => {
            SpellBuffAdd(Owner, Owner, "ViktorAugmentQ", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Attacker, Target, "Hardening", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_DEAD, default, default, () => {
                SpellBuffAdd(Owner, Owner, "CassiopeiaDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            Else(() => {
                IfHasBuff(Owner, Owner, "CassiopeiaDeathParticle", () => {
                    SpellBuffRemove(Owner, "CassiopeiaDeathParticle", Owner, default);
                });
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () => {
            CooldownStat = GetStat(GetPercentCooldownMod, Owner);
            Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
            NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 1);
            SetSpellToolTipVar(0 + (NewCooldown ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(0, this.LastTimeExecuted, true, () => {
            IfNotHasBuff(Owner, Nothing, "YorickRAZombie", () => {
                IfNotHasBuff(Owner, Nothing, "YorickReviveAllySelf", () => {
                    SpellBuffAdd(Owner, Owner, "DeathDefied", 1, 1, 30000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                });
            });
        });
        ExecutePeriodically(0.4, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_DEAD, default, default, () => {
                SpellBuffAdd(Owner, Owner, "CorkiDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            Else(() => {
                IfHasBuff(Owner, Owner, "CorkiDeathParticle", () => {
                    SpellBuffRemove(Owner, "CorkiDeathParticle", Owner, 0);
                });
            });
        });
        ExecutePeriodically(2, this.LastTime2Executed, true, () => {
            ChargeCooldown = 10;
            CooldownMod = GetStat(GetPercentCooldownMod, Owner);
            CooldownMod = Math(1, MO_ADD, 0 + (CooldownMod ?? 0));
            CharVars.ChargeCooldown = Math(0 + (ChargeCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMod ?? 0));
            SetSpellToolTipVar(0 + (CharVars.ChargeCooldown ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            totalDamage = GetTotalAttackDamage(Owner);
            BaseAD = GetStat(GetBaseAttackDamage, Owner);
            BonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
            BonusDamage = Math(0.2, MO_MULTIPLY, 0 + (BonusDamage ?? 0));
            BonusDamage = Math(2, MO_MULTIPLY, 0 + (BonusDamage ?? 0));
            SetSpellToolTipVar(0 + (BonusDamage ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            NextBuffVars.AP_Buff = 30;
            NextBuffVars.SpellVamp_Buff = 0.25;
            If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                    If(Unit, default, CO_EQUAL, Owner, default, () => {
                        SpellBuffAdd(Owner, Unit, "WillOfTheAncientsSelf", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                    Else(() => {
                        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                            SpellBuffAdd(Owner, Unit, "WillOfTheAncientsFriendly", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        });
                    });
                });
            });
            Else(() => {
                If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                    ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                        Caster = GetPetOwner(Owner);
                        If(Unit, default, CO_EQUAL, Owner, default, () => {
                            IfNotHasBuff(Owner, Caster, "WillOfTheAncientsFriendly", () => {
                                SpellBuffAdd(Owner, Unit, "WillOfTheAncientsSelf", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                            });
                        });
                        If(Unit, default, CO_EQUAL, Owner, default, () => {
                            
                        });
                        ElseIf(Unit, default, CO_NOT_EQUAL, Caster, default, () => {
                            SpellBuffAdd(Owner, Unit, "WillOfTheAncientsFriendly", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "ViktorHexCore", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpellToolTipVar(0 + (CharVars.BonusForItem ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(3, this.LastTimeExecuted2, true, () => {
            SpellBuffAdd(Owner, Owner, "ViktorAugmentW", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        this.MaxMana = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "TearOfTheGoddessTrack", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "ManamuneAttackTrack", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "ManamuneAttackConversion", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpellToolTipVar(0 + (CharVars.TearBonusMana ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "WitsEnd", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "SpiritVisage", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                IfNotHasBuff(Owner, Owner, "MonkeyKingCloneCD", () => {
                    IfNotHasBuff(Owner, Nothing, "MonkeyKingCloneSpellCast", () => {
                        SpellBuffAdd(Owner, Owner, "MonkeyKingCloneApplicator", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "AvariceBlade", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(1, this.LastTime2Executed, true, () => {
            Level = GetLevel(Owner);
            MantraTimerCooldown = this.VALUE_BY_LEVEL;
            CooldownMod = GetStat(GetPercentCooldownMod, Owner);
            CooldownMod = Math(1, MO_ADD, 0 + (CooldownMod ?? 0));
            CharVars.MantraTimerCooldown = Math(0 + (MantraTimerCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMod ?? 0));
            SetSpellToolTipVar(0 + (CharVars.MantraTimerCooldown ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.45);
        SetSpellToolTipVar(0 + (BonusAD ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "LightningRodApplicator", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(60, this.LastTimeExecuted, false, () => {
            this.BonusHealth = Math(0 + (this.BonusHealth ?? 0), MO_ADD, 18);
            this.BonusMana = Math(0 + (this.BonusMana ?? 0), MO_ADD, 20);
            this.BonusAbilityPower = Math(0 + (this.BonusAbilityPower ?? 0), MO_ADD, 2);
            this.BonusHealth = Math(0 + (this.BonusHealth ?? 0), MO_MIN, 180);
            this.BonusMana = Math(0 + (this.BonusMana ?? 0), MO_MIN, 200);
            this.BonusAbilityPower = Math(0 + (this.BonusAbilityPower ?? 0), MO_MIN, 20);
            SpellEffectCreate(ThisParticle, default, "RodofAges_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        });
        TempLevel = GetLevel(Owner);
        If(TempLevel, default, CO_GREATER_THAN, this.OwnerLevel, default, () => {
            SpellBuffAdd(Attacker, Target, "CatalystHeal", 1, 1, 8.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            this.OwnerLevel = TempLevel;
        });
        BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 2);
        SetSpellToolTipVar(0 + (BonusAD ?? 0), 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            Count = GetBuffCountFromCaster(Owner, Owner, "Feast");
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(Cooldown, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                    ForEachUnitInTargetArea(Owner, Owner, 1500, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
                        Count = GetBuffCountFromCaster(Owner, Owner, "Feast");
                        HealthPerStack = this.VALUE_BY_LEVEL;
                        FeastBase = this.VALUE_BY_LEVEL;
                        BonusFeastHealth = Math(0 + (HealthPerStack ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
                        FeastHealth = Math(0 + (BonusFeastHealth ?? 0), MO_ADD, 0 + (FeastBase ?? 0));
                        TargetHealth = GetPAROrHealth(Unit, GetHealth, PAR_MANA);
                        If(FeastHealth, default, CO_GREATER_THAN_OR_EQUAL, TargetHealth, default, () => {
                            SpellBuffAdd(Owner, Unit, "FeastMarker", 1, 1, 1.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "Tantrum", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Attacker, Target, "Hardening", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            HealthDamage = Math(0 + (MaxHealth ?? 0), MO_MULTIPLY, 0.01);
            SetSpellToolTipVar(0 + (HealthDamage ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        AD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusDamage2 = Math(0 + (AD ?? 0), MO_MULTIPLY, 0.5);
        SetSpellToolTipVar(0 + (BonusDamage2 ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        Damage = GetTotalAttackDamage(Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_EQUAL, default, 0, () => {
            Level = 1;
        });
        Spear = this.VALUE_BY_LEVEL;
        SpearDamage = Math(0 + (Damage ?? 0), MO_MULTIPLY, 0 + (Spear ?? 0));
        SetSpellToolTipVar(0 + (SpearDamage ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "ShurelyasCrest", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "YoumusBlade", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "Sting", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "OdynsVeil", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "ZhonyasRing", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            NextBuffVars.MagicResistBonus = 15;
            NextBuffVars.ArmorBonus = 12;
            NextBuffVars.DamageBonus = 8;
            If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                    If(Unit, default, CO_EQUAL, Owner, default, () => {
                        SpellBuffAdd(Attacker, Unit, "AegisoftheLegionAuraSelf", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    });
                    Else(() => {
                        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                            SpellBuffAdd(Attacker, Unit, "AegisoftheLegionAuraFriend", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        });
                    });
                });
            });
            Else(() => {
                If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                    ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                        Caster = GetPetOwner(Owner);
                        If(Unit, default, CO_EQUAL, Owner, default, () => {
                            IfNotHasBuff(Owner, Caster, "AegisoftheLegionAuraFriend", () => {
                                SpellBuffAdd(Attacker, Unit, "AegisoftheLegionAuraSelf", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                            });
                        });
                        ElseIf(Unit, default, CO_NOT_EQUAL, Caster, default, () => {
                            SpellBuffAdd(Attacker, Unit, "AegisoftheLegionAuraFriend", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
            BonusAD80 = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.8);
            SetSpellToolTipVar(0 + (BonusAD ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + (BonusAD80 ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + (BonusAD ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "Bloodrazor", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(2, this.LastTimeExecuted, true, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 0, () => {
                Level = 1;
            });
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            KayleAP = GetStat(GetFlatMagicDamageMod, Owner);
            KayleAP = Math(0.2, MO_MULTIPLY, 0 + (KayleAP ?? 0));
            DamageMod = this.VALUE_BY_LEVEL;
            AttackDamage = Math(0 + (KayleAP ?? 0), MO_ADD, 0 + (DamageMod ?? 0));
            BaseAD = GetStat(GetBaseAttackDamage, Owner);
            TotalAD = GetTotalAttackDamage(Owner);
            BonusAD = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
            BonusAD = Math(1, MO_MULTIPLY, 0 + (BonusAD ?? 0));
            SetSpellToolTipVar(0 + (AttackDamage ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            SetSpellToolTipVar(0 + (BonusAD ?? 0), 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, default, (Unit) => {
                    SpellBuffAdd(Owner, Unit, "SoulSphere", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
                });
            });
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "HextechRevolver", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "LeviathanCheck", 1, 1, 1.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            Count = GetBuffCountFromAll(Owner, "LeviathanStats");
            If(Count, default, CO_EQUAL, default, 20, () => {
                SpellBuffAdd(Owner, Owner, "LeviathanCap", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Attacker, Target, "MuramasaCheck", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
            Count = GetBuffCountFromAll(Owner, "MuramasaStats");
            If(Count, default, CO_EQUAL, default, 20, () => {
                SpellBuffAdd(Owner, Owner, "MuramasaCap", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "LightstrikerApplicator", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "ForceofNature", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "ViktorHexCore", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpellToolTipVar(0 + (CharVars.BonusForItem ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "PhilosophersStone", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "VoidStaff", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        ExecutePeriodically(3, this.LastTimeExecuted, true, () => {
            If(this.CooldownResevoir, default, CO_LESS_THAN, default, 1, () => {
                this.CooldownResevoir = Math(1, MO_ADD, 0 + (this.CooldownResevoir ?? 0));
            });
            NextBuffVars.ManaRegenBonus = 1.8;
            NextBuffVars.HealthRegenBonus = 0;
            If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                    If(Unit, default, CO_EQUAL, Owner, default, () => {
                        SpellBuffAdd(Attacker, Unit, "InnervatingLocketAuraSelf", 1, 1, 4.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
                    });
                    Else(() => {
                        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                            SpellBuffAdd(Attacker, Unit, "InnervatingLocketAuraFriend", 1, 1, 4.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
                        });
                    });
                });
            });
            Else(() => {
                If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                    ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                        Caster = GetPetOwner(Owner);
                        If(Unit, default, CO_EQUAL, Owner, default, () => {
                            IfNotHasBuff(Owner, Caster, "InnervatingLocketAuraSelf", () => {
                                SpellBuffAdd(Attacker, Unit, "InnervatingLocketAuraSelf", 1, 1, 4.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
                            });
                        });
                        ElseIf(Unit, default, CO_NOT_EQUAL, Caster, default, () => {
                            SpellBuffAdd(Attacker, Unit, "InnervatingLocketAuraFriend", 1, 1, 4.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
                        });
                    });
                });
            });
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "KagesLuckyPick", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "DeathfireGrasp", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(2.85, this.LastTimeExecuted, false, () => {
            If(this.CooldownResevoir, default, CO_LESS_THAN, default, 2, () => {
                this.CooldownResevoir = Math(1, MO_ADD, 0 + (this.CooldownResevoir ?? 0));
            });
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "Malady", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "InfinityEdge", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                NextBuffVars.LifeStealMod = 0.2;
                NextBuffVars.AttackSpeedMod = 0.2;
                NextBuffVars.HealthRegenMod = 6;
                If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                    ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                        If(Unit, default, CO_EQUAL, Owner, default, () => {
                            SpellBuffAdd(Owner, Unit, "RallyingBannerAuraSelf", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        });
                        Else(() => {
                            SpellBuffAdd(Owner, Unit, "RallyingBannerAuraFriend", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        });
                    });
                });
                Else(() => {
                    ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                        Caster = GetPetOwner(Owner);
                        If(Unit, default, CO_EQUAL, Owner, default, () => {
                            IfNotHasBuff(Owner, Caster, "RallyingBannerAuraFriend", () => {
                                SpellBuffAdd(Owner, Unit, "RallyingBannerAuraSelf", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                            });
                        });
                        ElseIf(Unit, default, CO_NOT_EQUAL, Caster, default, () => {
                            SpellBuffAdd(Owner, Unit, "RallyingBannerAuraFriend", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        });
                    });
                });
                NextBuffVars.ArmorMod = -20;
                ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RallyingBanner", false, (Unit) => {
                    SpellBuffAdd(Owner, Unit, "RallyingBanner", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Shred, 0, true, true, false, default);
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                NextBuffVars.ManaRegenMod = 2.4;
                NextBuffVars.CooldownReduction = -0.1;
                If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                    ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                        If(Unit, default, CO_EQUAL, Owner, default, () => {
                            SpellBuffAdd(Owner, Unit, "SoulShroudAuraSelf", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        });
                        Else(() => {
                            SpellBuffAdd(Owner, Unit, "SoulShroudAuraFriend", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        });
                    });
                });
                Else(() => {
                    ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                        Caster = GetPetOwner(Owner);
                        If(Unit, default, CO_EQUAL, Owner, default, () => {
                            IfNotHasBuff(Owner, Caster, "SoulShroudAuraFriend", () => {
                                SpellBuffAdd(Owner, Unit, "SoulShroudAuraSelf", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                            });
                        });
                        If(Unit, default, CO_EQUAL, Owner, default, () => {
                            SpellBuffAdd(Owner, Unit, "SoulShroudAuraSelf", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        });
                        ElseIf(Unit, default, CO_NOT_EQUAL, Caster, default, () => {
                            SpellBuffAdd(Owner, Unit, "SoulShroudAuraFriend", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "HextechGunblade", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "RanduinsOmen", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Attacker, Target, "Hardening", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "LastWhisper", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "GlacialShroud", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "Breathstealer", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                NextBuffVars.ManaRegenBonus = 1.44;
                If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                    ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                        If(Unit, default, CO_EQUAL, Owner, default, () => {
                            SpellBuffAdd(Attacker, Unit, "ManaManipulatorAuraSelf", 1, 1, 1.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
                        });
                        Else(() => {
                            SpellBuffAdd(Attacker, Unit, "ManaManipulatorAuraFriend", 1, 1, 1.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
                        });
                    });
                });
                Else(() => {
                    ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                        Caster = GetPetOwner(Owner);
                        If(Unit, default, CO_EQUAL, Owner, default, () => {
                            IfNotHasBuff(Owner, Caster, "ManaManipulatorAuraFriend", () => {
                                SpellBuffAdd(Attacker, Unit, "ManaManipulatorAuraSelf", 1, 1, 4.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
                            });
                        });
                        ElseIf(Unit, default, CO_NOT_EQUAL, Caster, default, () => {
                            SpellBuffAdd(Attacker, Unit, "ManaManipulatorAuraFriend", 1, 1, 4.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
                        });
                    });
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Attacker, Target, "Hardening", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () => {
            IfNotHasBuff(Owner, Owner, "WriggleLantern", () => {
                SpellBuffAdd(Owner, Owner, "MadredsRazors", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            Else(() => {
                SpellBuffRemove(Owner, "MadredsRazors", Owner, default);
            });
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "RitualStaff", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
    }
    public void UpdateSelfBuffStats()
    {
        #region VarDecl
        float? MoveSpeedMod = null;
        float? Level = null;
        float? HealthMod = null;
        float? CooldownMod = null;
        Object? Greed = null;
        Object? ManaMod = null;
        float? AttackDamageBonus = null;
        float? OwnerLevel = null;
        Object? BonusDamage = null;
        float? TotalBonusDamage = null;
        float? ArmorMod = null;
        float? MagicResistanceMod = null;
        float? CDRPerLevel = null;
        float? ChampLevel = null;
        float? CDRMod = null;
        Object? ExperienceMod = null;
        Object? Energy = null;
        float? CharLevel = null;
        float? Mana = null;
        float? AbilityPowerBonus = null;
        Object? RegenPercent = null;
        float? DodgeMod = null;
        Object? RegenMod = null;
        float? MaxMana = null;
        float? Regen = null;
        float? CriticalMod = null;
        float? DamageInc = null;
        float? AttackSpeedMod = null;
        Object? Vamp = null;
        float? HealthPerLevel = null;
        float? HP = null;
        float? PlusHealth = null;
        float? HPRegenBonus = null;
        float? CritToAdd = null;
        Object? ArmorBonus = null;
        float? Health = null;
        float? HealthIncAmount = null;
        float? BonusAbilityPower = null;
        float? TotalBonus = null;
        float? Count = null;
        bool? CanSee = null;
        float? DamageBonus = null;
        float? maxHP = null;
        long? baseHP = null;
        long? healthPerLevel = null;
        float? levelHealth = null;
        float? totalBaseHealth = null;
        float? totalBonusHealth = null;
        float? PercentLifeStealTT = null;
        float? ExtraRegenTT = null;
        bool? Hunt = null;
        bool? Visible = null;
        float? SpeedBoost = null;
        #endregion
        MoveSpeedMod = Math(0.01, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (MoveSpeedMod ?? 0));
        Level = TalentLevel;
        IncStat(IncFlatArmorPenetrationMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        HealthMod = Math(12, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncFlatHPPoolMod, Owner, 0 + (HealthMod ?? 0));
        CooldownMod = Math(-0.01, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncPercentCooldownMod, Owner, 0 + (CooldownMod ?? 0));
        MoveSpeedMod = Math(0.005, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (MoveSpeedMod ?? 0));
        Level = TalentLevel;
        Greed = this.VALUE_BY_LEVEL;
        IncStat(IncFlatGoldPer10Mod, Owner, 0 + (Greed ?? 0));
        IncStat(IncPercentMagicPenetrationMod, Owner, 0.15);
        Level = TalentLevel;
        ManaMod = this.VALUE_BY_LEVEL;
        IncPercentPARPoolMod(Owner, 0 + (ManaMod ?? 0));
        AttackDamageBonus = Math(1, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (AttackDamageBonus ?? 0));
        Level = TalentLevel;
        ManaMod = this.VALUE_BY_LEVEL;
        IncFlatPARRegenMod(Owner, 0 + (ManaMod ?? 0));
        CooldownMod = Math(-0.0075, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncPercentCooldownMod, Owner, 0 + (CooldownMod ?? 0));
        OwnerLevel = GetLevel(Owner);
        Level = TalentLevel;
        BonusDamage = this.VALUE_BY_LEVEL;
        TotalBonusDamage = Math(0 + (BonusDamage ?? 0), MO_MULTIPLY, 0 + (OwnerLevel ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (TotalBonusDamage ?? 0));
        ArmorMod = Math(2, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (ArmorMod ?? 0));
        MagicResistanceMod = Math(2, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (MagicResistanceMod ?? 0));
        Level = TalentLevel;
        CooldownMod = this.VALUE_BY_LEVEL;
        IncStat(IncPercentCooldownMod, Owner, 0 + (CooldownMod ?? 0));
        ArmorMod = Math(2, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (ArmorMod ?? 0));
        CDRPerLevel = Math(0 + (TalentLevel ?? 0), MO_MULTIPLY, -0.0015);
        ChampLevel = GetLevel(Owner);
        CDRMod = Math(0 + (ChampLevel ?? 0), MO_MULTIPLY, 0 + (CDRPerLevel ?? 0));
        IncStat(IncPercentCooldownMod, Owner, 0 + (CDRMod ?? 0));
        Level = TalentLevel;
        ExperienceMod = this.VALUE_BY_LEVEL;
        IncStat(IncPercentEXPBonus, Owner, 0 + (ExperienceMod ?? 0));
        Level = TalentLevel;
        ManaMod = this.VALUE_BY_LEVEL;
        Energy = this.VALUE_BY_LEVEL;
        CharLevel = GetLevel(Owner);
        Mana = Math(0 + (ManaMod ?? 0), MO_MULTIPLY, 0 + (CharLevel ?? 0));
        IncFlatPARPoolMod(Owner, 0 + (Mana ?? 0));
        IncFlatPARPoolMod(Owner, 0 + (Energy ?? 0));
        AbilityPowerBonus = Math(1, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (AbilityPowerBonus ?? 0));
        Level = TalentLevel;
        IncStat(IncFlatArmorPenetrationMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        Level = TalentLevel;
        ExperienceMod = this.VALUE_BY_LEVEL;
        IncStat(IncPercentEXPBonus, Owner, 0 + (ExperienceMod ?? 0));
        Level = TalentLevel;
        RegenPercent = this.VALUE_BY_LEVEL;
        IncPercentPARRegenMod(Owner, 0 + (RegenPercent ?? 0));
        IncStat(IncPercentHPRegenMod, Owner, 0 + (RegenPercent ?? 0));
        DodgeMod = Math(0.005, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncFlatDodgeMod, Owner, 0 + (DodgeMod ?? 0));
        Level = TalentLevel;
        IncStat(IncPercentRespawnTimeMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        IncStat(IncFlatGoldPer10Mod, Owner, 1);
        OwnerLevel = GetLevel(Owner);
        Level = TalentLevel;
        BonusDamage = this.VALUE_BY_LEVEL;
        TotalBonusDamage = Math(0 + (BonusDamage ?? 0), MO_MULTIPLY, 0 + (OwnerLevel ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (TotalBonusDamage ?? 0));
        Level = TalentLevel;
        RegenMod = this.VALUE_BY_LEVEL;
        IncFlatPARRegenMod(Owner, 0 + (RegenMod ?? 0));
        CooldownMod = Math(-0.02, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncPercentCooldownMod, Owner, 0 + (CooldownMod ?? 0));
        Level = TalentLevel;
        RegenPercent = this.VALUE_BY_LEVEL;
        MaxMana = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        Regen = Math(0 + (RegenPercent ?? 0), MO_MULTIPLY, 0 + (MaxMana ?? 0));
        Regen = Math(0 + (Regen ?? 0), MO_DIVIDE, 5);
        IncStat(IncFlatHPRegenMod, Owner, 0 + (Regen ?? 0));
        CriticalMod = Math(0.0066, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncFlatCritChanceMod, Owner, 0 + (CriticalMod ?? 0));
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.1);
        HealthMod = Math(30, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncFlatHPPoolMod, Owner, 0 + (HealthMod ?? 0));
        DamageInc = Math(100, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (DamageInc ?? 0));
        ExecutePeriodically(1, this.LastTimeExecuted, default, () => {
            DebugSay(Owner, "DamageInc: ", DamageInc);
        });
        AttackSpeedMod = Math(0.01, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (AttackSpeedMod ?? 0));
        Level = TalentLevel;
        IncStat(IncFlatCritDamageMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        Level = TalentLevel;
        IncStat(IncFlatCritDamageMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        Level = TalentLevel;
        IncStat(IncPercentRespawnTimeMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        IncStat(IncPercentMagicPenetrationMod, Owner, 0.1);
        Level = TalentLevel;
        Vamp = this.VALUE_BY_LEVEL;
        IncStat(IncPercentSpellVampMod, Owner, 0 + (Vamp ?? 0));
        AttackDamageBonus = Math(1, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (AttackDamageBonus ?? 0));
        IfNotHasBuff(Owner, Owner, "StrengthOfSpirit", () => {
            Level = TalentLevel;
            NextBuffVars.multiplier = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Owner, "StrengthOfSpirit", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Level = TalentLevel;
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        HealthPerLevel = Math(0 + (TalentLevel ?? 0), MO_MULTIPLY, 1.5);
        ChampLevel = GetLevel(Owner);
        HealthMod = Math(0 + (ChampLevel ?? 0), MO_MULTIPLY, 0 + (HealthPerLevel ?? 0));
        IncMaxHealth(Owner, 0 + (HealthMod ?? 0), false);
        HP = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        PlusHealth = Math(0 + (HP ?? 0), MO_MULTIPLY, 0.03);
        IncMaxHealth(Owner, 0 + (PlusHealth ?? 0), false);
        MagicResistanceMod = Math(2, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncFlatSpellBlockMod, Owner, 0 + (MagicResistanceMod ?? 0));
        HPRegenBonus = Math(0.2, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncFlatHPRegenMod, Owner, 0 + (HPRegenBonus ?? 0));
        AttackSpeedMod = Math(0.01, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (AttackSpeedMod ?? 0));
        CriticalMod = Math(0.01, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        IncStat(IncFlatCritChanceMod, Owner, 0 + (CriticalMod ?? 0));
        IfNotHasBuff(Owner, Owner, "DragonVisionBuff", () => {
            SpellBuffAdd(Owner, Owner, "DragonVisionBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 100000, default, default, default, default);
        });
        IfNotHasBuff(Owner, Owner, "HPByPlayerLevel", () => {
            NextBuffVars.HPPerLevel = 125;
            SpellBuffAdd(Owner, Owner, "HPByPlayerLevel", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        IfHasBuff(Owner, Owner, "CrestOfFlowingWater", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "CrestOfFlowingWater", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 100000, default, default, default, default);
        });
        IfHasBuff(Owner, Owner, "HPByPlayerLevel", () => {
            
        });
        Else(() => {
            NextBuffVars.HPPerLevel = 100;
            SpellBuffAdd(Owner, Owner, "HPByPlayerLevel", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        IncStat(IncPercentLifeStealMod, Owner, 0.5);
        IfHasBuff(Owner, Owner, "LifestealAttack", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Attacker, Owner, "LifestealAttack", 1, 1, 9999, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        });
        IfNotHasBuff(Owner, Owner, "dragonApplicator", () => {
            SpellBuffAdd(Owner, Owner, "dragonApplicator", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 100000, true, false, false, default);
        });
        IfNotHasBuff(Owner, Owner, "HPByPlayerLevel", () => {
            NextBuffVars.HPPerLevel = 200;
            SpellBuffAdd(Owner, Owner, "HPByPlayerLevel", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IncStat(IncPercentLifeStealMod, Owner, 1);
        IfHasBuff(Owner, Owner, "LifestealAttack", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Attacker, Owner, "LifestealAttack", 1, 1, 9999, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        });
        SpellBuffAdd(Owner, Owner, "ResistantSkin", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "WormRecouperateOn", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        IfHasBuff(Owner, Owner, "HPByPlayerLevel", () => {
            
        });
        Else(() => {
            NextBuffVars.HPPerLevel = 220;
            SpellBuffAdd(Owner, Owner, "HPByPlayerLevel", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "TurretShield", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Attacker, Owner, "TurretShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        });
        IfHasBuff(Owner, Owner, "TurretShield", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Attacker, Owner, "TurretShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        });
        IfHasBuff(Owner, Owner, "TurretShield", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Attacker, Owner, "TurretShield", 1, 1, 20000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "TurretShield", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Attacker, Owner, "TurretShield", 1, 1, 20000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.2);
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.2);
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.2);
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.2);
        CritToAdd = Math(0 + (CharVars.NumSecondsSinceLastCrit ?? 0), MO_MULTIPLY, 0 + (CharVars.CritPerSecond ?? 0));
        IncStat(IncFlatCritChanceMod, Owner, 0 + (CritToAdd ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            ArmorBonus = this.VALUE_BY_LEVEL;
            IncStat(IncFlatArmorMod, Owner, 0 + (ArmorBonus ?? 0));
        });
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.2);
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.2);
        Health = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        HealthIncAmount = Math(0 + (Health ?? 0), MO_MULTIPLY, 0.15);
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "HeartOfGold", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.2);
        IncStat(IncPercentArmorPenetrationMod, Owner, 0.2);
        SetSpellToolTipVar(0 + (CharVars.TearBonusMana ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        BonusAbilityPower = Math(0.03, MO_MULTIPLY, 0 + (this.MaxMana ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (BonusAbilityPower ?? 0));
        SetSpellToolTipVar(0 + (CharVars.TearBonusMana ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            NextBuffVars.HealthVar = 200;
            SpellBuffAdd(Owner, Owner, "DoranT2Health", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () => {
            If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
                NextBuffVars.MagicResistanceMod = -20;
                SpellBuffAdd(Owner, Owner, "AbyssalScepterAuraSelf", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "AbyssalScepterAura", false, (Unit) => {
                    SpellBuffAdd(Owner, Unit, "AbyssalScepterAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Shred, 0, true, false, false, default);
                });
            });
        });
        RequireVar(ChampionAPGain);
        RequireVar(CharVars.TotalBonus);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            TotalBonus = Math(0, MO_ADD, 0 + (CharVars.TotalBonus ?? 0));
            TotalBonus = Math(0 + (CharVars.APGain ?? 0), MO_ADD, 0 + (CharVars.TotalBonus ?? 0));
            SetSpellToolTipVar(0 + (TotalBonus ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        RequireVar(CharVars.APGain);
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (CharVars.APGain ?? 0));
        ExecutePeriodically(1, this.LastTimeExecuted, false, () => {
            Count = 0;
            CharVars.CCReduction = 1;
            ForEachUnitInTargetArea(Owner, Owner, 1400, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
                CanSee = CanSeeTarget(Owner, Unit);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    Count = Math(0 + (Count ?? 0), MO_ADD, 1);
                });
            });
            SpellBuffClear(Owner, "IreliaIonianDuelist");
            If(Count, default, CO_EQUAL, default, 1, () => {
                CharVars.CCReduction = Math(0 + (CharVars.CCReduction ?? 0), MO_ADD, -0.1);
                SpellBuffAdd(Owner, Owner, "IreliaIonianDuelist", 3, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
            });
            If(Count, default, CO_EQUAL, default, 2, () => {
                CharVars.CCReduction = Math(0 + (CharVars.CCReduction ?? 0), MO_ADD, -0.25);
                SpellBuffAdd(Owner, Owner, "IreliaIonianDuelist", 3, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
                SpellBuffAdd(Owner, Owner, "IreliaIonianDuelist", 3, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
            });
            If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
                CharVars.CCReduction = Math(0 + (CharVars.CCReduction ?? 0), MO_ADD, -0.4);
                SpellBuffAdd(Owner, Owner, "IreliaIonianDuelist", 3, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
                SpellBuffAdd(Owner, Owner, "IreliaIonianDuelist", 3, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
                SpellBuffAdd(Owner, Owner, "IreliaIonianDuelist", 3, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
            });
        });
        CritToAdd = Math(0 + (CharVars.NumSecondsSinceLastCrit ?? 0), MO_MULTIPLY, 0 + (CharVars.CritPerSecond ?? 0));
        IncStat(IncFlatCritChanceMod, Owner, 0 + (CritToAdd ?? 0));
        Level = GetLevel(Owner);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 11, () => {
            IncStat(IncPercentLifeStealMod, Owner, 0.2);
        });
        ElseIf(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 6, () => {
            IncStat(IncPercentLifeStealMod, Owner, 0.17);
        });
        Else(() => {
            IncStat(IncPercentLifeStealMod, Owner, 0.14);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            DamageBonus = Math(0, MO_ADD, 0 + (CharVars.DamageBonus ?? 0));
            SetSpellToolTipVar(0 + (DamageBonus ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        IncStat(IncFlatAttackRangeMod, Owner, 0 + (CharVars.BonusRange ?? 0));
        maxHP = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        baseHP = 400;
        healthPerLevel = 85;
        Level = GetLevel(Owner);
        levelHealth = Math(0 + (Level ?? 0), MO_MULTIPLY, 0 + (healthPerLevel ?? 0));
        totalBaseHealth = Math(0 + (levelHealth ?? 0), MO_ADD, 0 + (baseHP ?? 0));
        totalBonusHealth = Math(0 + (maxHP ?? 0), MO_SUBTRACT, 0 + (totalBaseHealth ?? 0));
        totalBonusHealth = Math(0 + (totalBonusHealth ?? 0), MO_MULTIPLY, 0.15);
        SetSpellToolTipVar(0 + (totalBonusHealth ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        this.CurrentPar = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
        IfHasBuff(Owner, Owner, "ShyvanaTransform", () => {
            this.CurrentPar = 0;
        });
        IncStat(IncFlatPhysicalDamageMod, Owner, 0 + (this.PhysicalDamageBonus ?? 0));
        IncStat(IncPercentLifeStealMod, Owner, 0 + (this.PercentLifeSteal ?? 0));
        SetSpellToolTipVar(0 + (this.PhysicalDamageBonus ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        PercentLifeStealTT = Math(0 + (this.PercentLifeSteal ?? 0), MO_MULTIPLY, 100);
        SetSpellToolTipVar(0 + (PercentLifeStealTT ?? 0), 2, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        Health = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        HealthIncAmount = Math(0 + (Health ?? 0), MO_MULTIPLY, 0.15);
        IncStat(IncFlatGoldPer10Mod, Owner, 1);
        Health = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        HealthIncAmount = Math(0 + (Health ?? 0), MO_MULTIPLY, 0.15);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            SpellBuffAdd(Owner, Owner, "OdinBloodburster", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Level = GetLevel(Owner);
        this.punchdmg = this.VALUE_BY_LEVEL;
        SetBuffToolTipVar(1, 0 + (this.punchdmg ?? 0));
        IncStat(IncFlatHPPoolMod, Owner, 0 + (this.ExtraHP ?? 0));
        IncStat(IncFlatHPRegenMod, Owner, 0 + (this.ExtraRegen ?? 0));
        SetSpellToolTipVar(0 + (this.ExtraHP ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExtraRegenTT = Math(0 + (this.ExtraRegen ?? 0), MO_MULTIPLY, 5);
        SetSpellToolTipVar(0 + (ExtraRegenTT ?? 0), 2, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        IncStat(IncFlatHPPoolMod, Owner, 0 + (this.BonusHealth ?? 0));
        IncStat(IncFlatMagicDamageMod, Owner, 0 + (this.BonusAbilityPower ?? 0));
        IncFlatPARPoolMod(Owner, 0 + (this.BonusMana ?? 0));
        SetSpellToolTipVar(0 + (this.BonusHealth ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        SetSpellToolTipVar(0 + (this.BonusAbilityPower ?? 0), 3, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        SetSpellToolTipVar(0 + (this.BonusMana ?? 0), 2, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        Hunt = false;
        ForEachUnitInTargetArea(Owner, Owner, 2000, "AffectEnemies AffectNeutral AffectHeroes ", default, true, (Unit) => {
            If(Owner, default, CO_IS_TARGET_IN_FRONT_OF_ME, Unit, default, () => {
                Visible = CanSeeTarget(Owner, Unit);
                If(Visible, default, CO_EQUAL, default, true, () => {
                    Hunt = true;
                    SpellBuffAdd(Owner, Unit, "VayneHunted", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                IfHasBuff(Unit, Owner, "VayneHunted", () => {
                    Hunt = true;
                });
            });
        });
        If(Hunt, default, CO_EQUAL, default, true, () => {
            SpeedBoost = 40;
            IfHasBuff(Owner, Owner, "VayneInquisition", () => {
                SpeedBoost = Math(0 + (SpeedBoost ?? 0), MO_MULTIPLY, 3);
                IfNotHasBuff(Owner, Owner, "VayneInquisitionSpeedPart", () => {
                    SpellBuffRemove(Owner, "VayneInquisitionSpeedPartNormal", Owner, 0);
                    SpellBuffAdd(Owner, Owner, "VayneInquisitionSpeedPart", 1, 1, 20, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
            Else(() => {
                SpellBuffAdd(Owner, Owner, "VayneInquisitionSpeedPartNormal", 1, 1, 20, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SpellBuffRemove(Owner, "VayneInquisitionSpeedPart", Owner, 0);
            });
            IncStat(IncFlatMovementSpeedMod, Owner, 0 + (SpeedBoost ?? 0));
        });
        Else(() => {
            SpellBuffRemove(Owner, "VayneInquisitionSpeedPart", Owner, 0);
            SpellBuffRemove(Owner, "VayneInquisitionSpeedPartNormal", Owner, 0);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () => {
            SpellBuffAdd(Owner, Owner, "ChaliceOfHarmony", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Owner, default, CO_IS_NOT_DEAD, default, default, () => {
            ExecutePeriodically(0.9, this.LastTimeExecuted, false, () => {
                SpellBuffAdd(Owner, Owner, "FrozenHeart", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
                ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Unit) => {
                    SpellBuffAdd(Owner, Unit, "FrozenHeartAura", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
                });
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () => {
            NextBuffVars.HealthVar = 200;
            SpellBuffAdd(Owner, Owner, "DoranT2Health", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IncStat(IncFlatMagicPenetrationMod, Owner, 20);
    }
    public void CharOnPreDamage()
    {
        #region VarDecl
        float? DamageAmount = null;
        float? DRPERC = null;
        float? DamageMultiplier = null;
        float? FlatDR = null;
        float? Distance = null;
        float? curHealth = null;
        float? CurrentHealth = null;
        #endregion
        If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.96);
            If(DamageAmount, default, CO_LESS_THAN, default, 0, () => {
                DamageAmount = 0;
            });
        });
        If(Attacker, default, CO_IS_TYPE_AI, default, default, () => {
            If(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
                    
                });
                Else(() => {
                    DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.SmallDamageAmount ?? 0));
                });
            });
        });
        If(DamageAmount, default, CO_LESS_THAN, default, 0, () => {
            DamageAmount = 0;
        });
        DRPERC = Math(0 + (TalentLevel ?? 0), MO_MULTIPLY, 0.01);
        DamageMultiplier = Math(1, MO_SUBTRACT, 0 + (DRPERC ?? 0));
        If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
            If(default, DAMAGESOURCE_SPELLAOE, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (DamageMultiplier ?? 0));
                If(DamageAmount, default, CO_LESS_THAN, default, 0, () => {
                    DamageAmount = 0;
                });
            });
        });
        FlatDR = Math(0 + (TalentLevel ?? 0), MO_MULTIPLY, 1);
        If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (FlatDR ?? 0));
            If(DamageAmount, default, CO_LESS_THAN, default, 0, () => {
                DamageAmount = 0;
            });
        });
        If(Attacker, default, CO_IS_TYPE_AI, default, default, () => {
            If(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
                    
                });
                Else(() => {
                    DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.SmallDamageAmount ?? 0));
                });
            });
        });
        If(DamageAmount, default, CO_LESS_THAN, default, 0, () => {
            DamageAmount = 0;
        });
        DRPERC = Math(0 + (TalentLevel ?? 0), MO_MULTIPLY, 0.005);
        DamageMultiplier = Math(1, MO_SUBTRACT, 0 + (DRPERC ?? 0));
        If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (DamageMultiplier ?? 0));
            If(DamageAmount, default, CO_LESS_THAN, default, 0, () => {
                DamageAmount = 0;
            });
        });
        IfNotHasBuff(Owner, Owner, "WrathTimer", () => {
            IfNotHasBuff(Owner, Owner, "SweepTimer", () => {
                IfNotHasBuff(Owner, Owner, "PropelTimer", () => {
                    IfNotHasBuff(Owner, Owner, "ActionTimer2", () => {
                        IfNotHasBuff(Owner, Owner, "ActionTimer", () => {
                            Distance = DistanceBetweenObjects("Attacker", "Owner");
                            If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 950, () => {
                                FaceDirection(Owner, Attacker);
                                SpellCast(Owner, Attacker, Owner, Owner, false, 3, SpellSlots, 1, false, false, false, false, false, default);
                            });
                            Else(() => {
                                DamageAmount = 0;
                            });
                        });
                    });
                });
            });
        });
        curHealth = GetPAROrHealth(Target, GetHealth, PAR_MANA);
        If(DamageAmount, default, CO_GREATER_THAN_OR_EQUAL, curHealth, default, () => {
            If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
                
            });
            Else(() => {
                If(DAMAGESOURCE_RAW, default, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
                    DamageAmount = Math(0 + (curHealth ?? 0), MO_SUBTRACT, 1);
                });
            });
        });
        curHealth = GetPAROrHealth(Target, GetHealth, PAR_MANA);
        If(DamageAmount, default, CO_GREATER_THAN_OR_EQUAL, curHealth, default, () => {
            If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
                
            });
            Else(() => {
                If(DAMAGESOURCE_RAW, default, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
                    DamageAmount = Math(0 + (curHealth ?? 0), MO_SUBTRACT, 1);
                });
            });
        });
        SpellBuffAdd(Owner, Owner, "MalphiteShieldBeenHit", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "GravesPassiveCounter", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "GravesPassiveGrit", 11, 0, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        If(Attacker, default, CO_EQUAL, Owner, default, () => {
            CurrentHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
            If(CurrentHealth, default, CO_LESS_THAN_OR_EQUAL, DamageAmount, default, () => {
                DamageAmount = Math(0 + (CurrentHealth ?? 0), MO_SUBTRACT, 1);
            });
        });
    }
    public void SetVarsByLevel()
    {
        #region VarDecl
        Object? Level = null;
        float? SummonerCooldownBonus = null;
        #endregion
        Level = TalentLevel;
        this.SmallDamageAmount = this.VALUE_BY_LEVEL;
        Level = TalentLevel;
        AvatarVars.PromoteArmorBonus = 20;
        AvatarVars.PromoteCooldownBonus = this.VALUE_BY_LEVEL;
        AvatarVars.ManaBonus = 1;
        Level = TalentLevel;
        AvatarVars.ClairvoyanceDurationBonus = 4;
        AvatarVars.ClairvoyanceCooldownBonus = this.VALUE_BY_LEVEL;
        SummonerCooldownBonus = Math(0.15, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        AvatarVars.SummonerCooldownBonus = SummonerCooldownBonus;
        SummonerCooldownBonus = Math(0.15, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        AvatarVars.SummonerCooldownBonus = SummonerCooldownBonus;
        AvatarVars.FortifySplashDamage = 1;
        AvatarVars.utilityMastery = TalentLevel;
        Level = TalentLevel;
        AvatarVars.GhostMovementBonus = this.VALUE_BY_LEVEL;
        AvatarVars.GhostDurationBonus = this.VALUE_BY_LEVEL;
        Level = TalentLevel;
        AvatarVars.HealCooldownBonus = this.VALUE_BY_LEVEL;
        AvatarVars.StifleDurationBonus = 0.5;
        AvatarVars.StifleCooldownBonus = 10;
        Level = TalentLevel;
        AvatarVars.RallyAPMod = 70;
        AvatarVars.RallyDurationBonus = this.VALUE_BY_LEVEL;
        Level = TalentLevel;
        AvatarVars.RevivePreservationBonus = 400;
        AvatarVars.ReviveCooldownBonus = this.VALUE_BY_LEVEL;
        AvatarVars.offensiveMastery = TalentLevel;
        Level = TalentLevel;
        this.SmallDamageAmount = this.VALUE_BY_LEVEL;
        CharVars.AttackSpeedIncrease = this.VALUE_BY_LEVEL;
        Level = TalentLevel;
        this.DamageBlock = this.VALUE_BY_LEVEL;
        Level = TalentLevel;
        AvatarVars.BoostCooldownBonus = 20;
        AvatarVars.defensiveMastery = TalentLevel;
        Level = TalentLevel;
        AvatarVars.FlashCooldownBonus = this.VALUE_BY_LEVEL;
        Level = TalentLevel;
        AvatarVars.SmiteGoldBonus = 5;
        AvatarVars.SmiteCooldownBonus = this.VALUE_BY_LEVEL;
        Level = TalentLevel;
        AvatarVars.TeleportDelayBonus = Math(0.5, MO_MULTIPLY, 0 + (TalentLevel ?? 0));
        AvatarVars.TeleportCooldownBonus = this.VALUE_BY_LEVEL;
        AvatarVars.PromoteCooldownBonus = this.VALUE_BY_LEVEL;
        Level = TalentLevel;
        AvatarVars.ExhaustArmorMod = -10;
        AvatarVars.ExhaustDurationBonus = this.VALUE_BY_LEVEL;
        CharVars.MagicAbsorb = this.VALUE_BY_LEVEL;
        CharVars.LifeStealAmount = this.VALUE_BY_LEVEL;
        CharVars.CritPerSecond = this.VALUE_BY_LEVEL;
        CharVars.BaseBlockAmount = this.VALUE_BY_LEVEL;
        CharVars.KillsPerArmor = this.VALUE_BY_LEVEL;
        CharVars.ArmorPerChampionKill = this.VALUE_BY_LEVEL;
        CharVars.MagicResistReduction = this.VALUE_BY_LEVEL;
        CharVars.KillsPerArmor = this.VALUE_BY_LEVEL;
        CharVars.ArmorPerChampionKill = this.VALUE_BY_LEVEL;
        CharVars.BaseCritChance = this.VALUE_BY_LEVEL;
        CharVars.LifeStealAmount = this.VALUE_BY_LEVEL;
        CharVars.RegenMod = this.VALUE_BY_LEVEL;
        CharVars.KillsPerArmor = this.VALUE_BY_LEVEL;
        CharVars.ArmorPerChampionKill = this.VALUE_BY_LEVEL;
        CharVars.TrailDuration = this.VALUE_BY_LEVEL;
        CharVars.BlockChance = this.VALUE_BY_LEVEL;
        CharVars.BaseBlockAmount = this.VALUE_BY_LEVEL;
        CharVars.CritPerSecond = this.VALUE_BY_LEVEL;
        CharVars.MagicAbsorb = this.VALUE_BY_LEVEL;
        CharVars.BonusRange = this.VALUE_BY_LEVEL;
        CharVars.DamageAmount = this.VALUE_BY_LEVEL;
        CharVars.KillsPerArmor = this.VALUE_BY_LEVEL;
        CharVars.ArmorPerChampionKill = this.VALUE_BY_LEVEL;
        CharVars.BaseCritChance = this.VALUE_BY_LEVEL;
        CharVars.HealAmount = this.VALUE_BY_LEVEL;
        CharVars.BaseCritChance = this.VALUE_BY_LEVEL;
        CharVars.BaseBlockAmount = this.VALUE_BY_LEVEL;
        CharVars.ArmorAmount = this.VALUE_BY_LEVEL;
        CharVars.tooltipAmount = this.VALUE_BY_LEVEL;
        CharVars.MagicResistReduction = this.VALUE_BY_LEVEL;
        CharVars.BaseCritChance = this.VALUE_BY_LEVEL;
        CharVars.StunDuration = this.VALUE_BY_LEVEL;
    }
    public void CharOnPreDealDamage()
    {
        #region VarDecl
        Object? Level = null;
        Object? HavocDamage = null;
        float? DamageAmount = null;
        float? HealthPerc = null;
        int? Count = null;
        float? Multiplier = null;
        Object? DamagePercent = null;
        #endregion
        If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
            Level = TalentLevel;
            HavocDamage = this.VALUE_BY_LEVEL;
            DamageAmount = Math(0 + (HavocDamage ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        });
        If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
            Level = TalentLevel;
            HavocDamage = this.VALUE_BY_LEVEL;
            DamageAmount = Math(0 + (HavocDamage ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        });
        If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                    
                });
                Else(() => {
                    HealthPerc = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
                    If(HealthPerc, default, CO_LESS_THAN_OR_EQUAL, default, 0.4, () => {
                        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.06);
                    });
                });
            });
        });
        Count = GetBuffCountFromAll(Target, "OdinTurretDamage");
        If(Count, default, CO_GREATER_THAN, default, 0, () => {
            Multiplier = Math(0 + (Count ?? 0), MO_MULTIPLY, 0.4);
            Multiplier = Math(0 + (Multiplier ?? 0), MO_ADD, 1);
            DamageAmount = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        });
        SpellBuffAdd(Owner, Target, "OdinTurretDamage", 8, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        Count = GetBuffCountFromAll(Target, "OdinTurretDamage");
        If(Count, default, CO_GREATER_THAN, default, 0, () => {
            Multiplier = Math(0 + (Count ?? 0), MO_MULTIPLY, 0.4);
            Multiplier = Math(0 + (Multiplier ?? 0), MO_ADD, 1);
            DamageAmount = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        });
        SpellBuffAdd(Owner, Target, "OdinTurretDamage", 8, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        IfHasBuff(Target, Owner, "JudicatorReckoning", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                DamagePercent = this.VALUE_BY_LEVEL;
                DamageAmount = Math(0 + (DamagePercent ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
            });
        });
        IfHasBuff(Target, Owner, "SwainTorment", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                DamagePercent = this.VALUE_BY_LEVEL;
                DamageAmount = Math(0 + (DamagePercent ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
            });
        });
        IfHasBuff(Target, Owner, "SwainTorment", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                DamagePercent = this.VALUE_BY_LEVEL;
                DamageAmount = Math(0 + (DamagePercent ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
            });
        });
        IfHasBuff(Target, Owner, "SwainTorment", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                DamagePercent = this.VALUE_BY_LEVEL;
                DamageAmount = Math(0 + (DamagePercent ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
            });
        });
        SpellBuffAdd(Owner, Owner, "GravesPassiveCounter", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "GravesPassiveGrit", 11, 0, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        IfHasBuff(Target, Owner, "SwainTorment", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                DamagePercent = this.VALUE_BY_LEVEL;
                DamageAmount = Math(0 + (DamagePercent ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
            });
        });
        IfHasBuff(Target, Owner, "SwainTorment", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                DamagePercent = this.VALUE_BY_LEVEL;
                DamageAmount = Math(0 + (DamagePercent ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
            });
        });
        IfHasBuff(Target, Owner, "JudicatorReckoning", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                DamagePercent = this.VALUE_BY_LEVEL;
                DamageAmount = Math(0 + (DamagePercent ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
            });
        });
    }
    public void CharOnPreAttack()
    {
        #region VarDecl
        float? healthPercent = null;
        float? Level = null;
        Object? BrushCount = null;
        bool? IsInBrush = null;
        int? Count = null;
        #endregion
        DebugSay(Owner, "Avatar PreAttack event.", default);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                IfHasBuff(Owner, Attacker, "MaokaiSapMagicMelee", () => {
                    healthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
                    If(healthPercent, default, CO_LESS_THAN, default, 1, () => {
                        OverrideAnimation("Attack", "Passive", Owner);
                        OverrideAnimation("Attack2", "Passive", Owner);
                        OverrideAnimation("Crit", "Passive", Owner);
                    });
                    Else(() => {
                        ClearOverrideAnimation("Attack", Owner);
                        ClearOverrideAnimation("Attack2", Owner);
                        ClearOverrideAnimation("Crit", Owner);
                    });
                });
                Else(() => {
                    ClearOverrideAnimation("Attack", Owner);
                    ClearOverrideAnimation("Attack2", Owner);
                    ClearOverrideAnimation("Crit", Owner);
                });
            });
            Else(() => {
                ClearOverrideAnimation("Attack", Owner);
                ClearOverrideAnimation("Attack2", Owner);
                ClearOverrideAnimation("Crit", Owner);
            });
        });
        Else(() => {
            ClearOverrideAnimation("Attack", Owner);
            ClearOverrideAnimation("Attack2", Owner);
            ClearOverrideAnimation("Crit", Owner);
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                IfHasBuff(Target, Attacker, "JarvanIVMartialCadenceCheck", () => {
                    RemoveOverrideAutoAttack(Owner, true);
                });
                Else(() => {
                    OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
                });
            });
            Else(() => {
                RemoveOverrideAutoAttack(Owner, true);
            });
        });
        Else(() => {
            RemoveOverrideAutoAttack(Owner, true);
        });
        Level = GetLevel(Owner);
        BrushCount = this.VALUE_BY_LEVEL;
        IsInBrush = IsInBrush(Attacker);
        If(IsInBrush, default, CO_EQUAL, default, true, () => {
            Count = GetBuffCountFromCaster(Owner, Owner, "CaitlynHeadshotCount");
            If(Count, default, CO_GREATER_THAN_OR_EQUAL, BrushCount, default, () => {
                SpellBuffAdd(Owner, Owner, "CaitlynHeadshot", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SpellBuffRemoveStacks(Owner, Owner, "CaitlynHeadshotCount", 0);
            });
        });
    }
    public void CharOnDodge()
    {
        #region VarDecl
        Object? Level = null;
        #endregion
        SpellBuffAdd(Owner, Owner, "Nimbleness", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, default, default, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "CounterStrikeCanCast", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0.25, true, false, default, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "CounterStrikeCanCast", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0.25, true, false, default, default);
        });
    }
    public void CharOnBeingHit()
    {
        #region VarDecl
        float? DamageAmount = null;
        #endregion
        If(DamageType, default, CO_EQUAL, default, PHYSICAL_DAMAGE, () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.DamageBlock ?? 0));
        });
        If(DamageAmount, default, CO_LESS_THAN, default, 0, () => {
            DamageAmount = 0;
        });
        If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
            If(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
                DamageAmount = Math(0.33, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                SpellEffectCreate(default, default, "FeelNoPain_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            });
        });
        If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
            If(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
                DamageAmount = Math(0.33, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                SpellEffectCreate(default, default, "FeelNoPain_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            });
        });
        If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
            If(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
                DamageAmount = Math(0.5, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                SpellEffectCreate(default, default, "FeelNoPain_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            });
        });
        If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
            If(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
                DamageAmount = Math(0.5, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                SpellEffectCreate(default, default, "FeelNoPain_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            });
        });
        If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
            If(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
                DamageAmount = Math(0.5, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                SpellEffectCreate(ar, default, "FeelNoPain_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
            });
        });
        If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
            If(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
                DamageAmount = Math(0.5, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                SpellEffectCreate(ar, default, "FeelNoPain_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
            });
        });
        If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
            If(CharVars.BlockChance, default, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                this.BlockAmount = Math(0 + (CharVars.BaseBlockAmount ?? 0), MO_MIN, 0 + (DamageAmount ?? 0));
                this.FinalDamage = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.BlockAmount ?? 0));
                SpellEffectCreate(default, default, "FeelNoPain_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
                DamageAmount = this.FinalDamage;
            });
        });
    }
    public void CharOnHitUnit()
    {
        #region VarDecl
        float? DamageAmount = null;
        int? Count = null;
        float? LifeStealToHeal = null;
        Object? Level = null;
        Object? Cooldown = null;
        float? NewCooldown = null;
        Vector3? castPosition = null;
        double? CDR = null;
        Object? cooldown = null;
        float? newCooldown = null;
        Object? SpellCD1 = null;
        float? SpellCD1a = null;
        float? SpellCD1b = null;
        int? DSCount = null;
        Vector3? MissileEndPosition = null;
        float? CurTime = null;
        float? TimeSinceLastHit = null;
        float? CD = null;
        bool? IsInBrush = null;
        #endregion
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.43);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.43);
        ForEachUnitInTargetArea(Owner, Target, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Unit) => {
            If(Target, default, CO_NOT_EQUAL, Unit, default, () => {
                NextBuffVars.TickDamage = 15;
                SpellBuffAdd(Attacker, Unit, "Burning", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 1, default, default, default, default);
            });
        });
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.43);
        SpellEffectCreate(default, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, default, default, default, default);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.43);
        SpellEffectCreate(default, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, default, default, default, default);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.43);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.43);
        SpellEffectCreate(default, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, default, default, default, default);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.43);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.43);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.43);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.43);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.43);
        NextBuffVars.TickDamage = 15;
        NextBuffVars.attackSpeedMod = -0.2;
        SpellBuffAdd(Attacker, Target, "DragonBurning", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.43);
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            DamageAmount = Math(2, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        });
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            DamageAmount = Math(2, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        });
        IfNotHasBuff(Owner, Owner, "Visionary", () => {
            SpellBuffAdd(Owner, Owner, "Visionary_Counter", 8, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                        
                    });
                    Else(() => {
                        SpellBuffAdd(Attacker, Target, "EternalThirst", 3, 1, 4.1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                        Count = GetBuffCountFromAll(Target, "EternalThirst");
                        LifeStealToHeal = Math(0 + (CharVars.LifeStealAmount ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
                        IncHealth(Owner, 0 + (LifeStealToHeal ?? 0), Owner);
                        SpellEffectCreate(num, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, false, default, default, default);
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                CharVars.LastCrit = GetTime();
                CharVars.NumSecondsSinceLastCrit = 0;
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                If(Level, default, CO_GREATER_THAN, default, 0, () => {
                    Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                    If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                        NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 2);
                        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
                    });
                });
            });
        });
        IfHasBuff(Owner, Owner, "VorpalSpikes", () => {
            castPosition = GetPointByUnitFacingOffset(Owner, 550, 0);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SpellCast(Owner, Target, castPosition, default, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        });
        If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                    NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 2);
                    SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                        
                    });
                    Else(() => {
                        NextBuffVars.MagicResistReduction = CharVars.MagicResistReduction;
                        SpellBuffAdd(Attacker, Target, "CursedTouch", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                        
                    });
                    Else(() => {
                        SpellBuffAdd(Attacker, Target, "EternalThirst", 3, 1, 4.1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                        Count = GetBuffCountFromAll(Target, "EternalThirst");
                        LifeStealToHeal = Math(0 + (CharVars.LifeStealAmount ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
                        IncHealth(Owner, 0 + (LifeStealToHeal ?? 0), Owner);
                        SpellEffectCreate(num, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, false, default, default, default);
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                If(Level, default, CO_GREATER_THAN, default, 0, () => {
                    Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                    If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                            NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 3);
                            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
                        });
                        Else(() => {
                            NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 1);
                            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
                        });
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                            CDR = 1;
                        });
                        Else(() => {
                            CDR = 0.5;
                        });
                        cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                        If(cooldown, default, CO_GREATER_THAN, default, 0, () => {
                            newCooldown = Math(0 + (cooldown ?? 0), MO_SUBTRACT, 0 + (CDR ?? 0));
                            SetSlotSpellCooldownTimeVer2(0 + (newCooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                        });
                        cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                        If(cooldown, default, CO_GREATER_THAN, default, 0, () => {
                            newCooldown = Math(0 + (cooldown ?? 0), MO_SUBTRACT, 0 + (CDR ?? 0));
                            SetSlotSpellCooldownTimeVer2(0 + (newCooldown ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                        });
                        cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                        If(cooldown, default, CO_GREATER_THAN, default, 0, () => {
                            newCooldown = Math(0 + (cooldown ?? 0), MO_SUBTRACT, 0 + (CDR ?? 0));
                            SetSlotSpellCooldownTimeVer2(0 + (newCooldown ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                        });
                        cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                        If(cooldown, default, CO_GREATER_THAN, default, 0, () => {
                            newCooldown = Math(0 + (cooldown ?? 0), MO_SUBTRACT, 0 + (CDR ?? 0));
                            SetSlotSpellCooldownTimeVer2(0 + (newCooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                        });
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                CharVars.LastCrit = GetTime();
                CharVars.NumSecondsSinceLastCrit = 0;
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                SpellEffectCreate(num, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                        
                    });
                    Else(() => {
                        SpellBuffAdd(Attacker, Target, "DeadlyVenom", 6, 1, 6.1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Poison, 0, true, false, default, default);
                        NextBuffVars.DamageAmount = CharVars.DamageAmount;
                        NextBuffVars.LastCount = 1;
                        SpellBuffAdd(Attacker, Target, "DeadlyVenom_Internal", 1, 1, 6.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
                    });
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                IfNotHasBuff(Owner, Owner, "ShyvanaDoubleAttack", () => {
                    IfNotHasBuff(Owner, Owner, "ShyvanaDoubleAttackDragon", () => {
                        SpellCD1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                        SpellCD1a = Math(0 + (SpellCD1 ?? 0), MO_ADD, -0.5);
                        SpellCD1b = Math(0 + (SpellCD1a ?? 0), MO_MAX, 0);
                        SetSlotSpellCooldownTimeVer2(0 + (SpellCD1b ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                    });
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            IncPAR(Owner, 2);
        });
        IfNotHasBuff(Owner, Owner, "DoubleStrikeIcon", () => {
            SpellBuffAdd(Attacker, Attacker, "DoubleStrike", 7, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, default, default);
            DSCount = GetBuffCountFromCaster(Owner, Owner, "DoubleStrike");
            If(DSCount, default, CO_GREATER_THAN_OR_EQUAL, default, 7, () => {
                SpellBuffAdd(Attacker, Attacker, "DoubleStrikeIcon", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                SpellBuffRemoveStacks(Attacker, Attacker, "DoubleStrike", 7);
                OverrideAutoAttack(0, ExtraSlots, Attacker, 1, true);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            MissileEndPosition = GetPointByUnitFacingOffset(Owner, 550, 0);
            SpellCast(Owner, Target, MissileEndPosition, default, default, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, default, default, default);
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                IfHasBuff(Owner, Owner, "LeonaSolarBarrierTracker", () => {
                    If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                            SpellBuffAdd(Attacker, Target, "LeonaSunlight", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                IfHasBuff(Owner, Owner, "NocturneUmbraBlades", () => {
                    CharVars.LastHit = GetGameTime();
                    If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                        SpellEffectCreate(hi, default, "Globalhit_red.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Target, default, Owner, Owner, default, default, true, default, default, false, default, default, default);
                    });
                });
                Else(() => {
                    CharVars.LastHit = Math(0 + (CharVars.LastHit ?? 0), MO_SUBTRACT, 1);
                    CurTime = GetGameTime();
                    TimeSinceLastHit = Math(0 + (CurTime ?? 0), MO_SUBTRACT, 0 + (CharVars.LastHit ?? 0));
                    If(TimeSinceLastHit, default, CO_GREATER_THAN_OR_EQUAL, default, 9, () => {
                        IfNotHasBuff(Owner, Owner, "NocturneUmbraBlades", () => {
                            SpellBuffAdd(Owner, Owner, "NocturneUmbraBlades", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                SpellBuffAdd(Owner, Target, "UrgotEntropyPassive", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
        If(HitResult, default, CO_EQUAL, default, HIT_Critical, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                    NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 2);
                    SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
                    CD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                    If(CD, default, CO_GREATER_THAN, default, 0, () => {
                        CD = Math(0 + (CD ?? 0), MO_SUBTRACT, 1.05);
                        SetSlotSpellCooldownTimeVer2(0 + (CD ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                    });
                });
            });
        });
        IfNotHasBuff(Owner, Owner, "Visionary", () => {
            SpellBuffAdd(Owner, Owner, "Visionary_Counter", 8, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
        });
        IfNotHasBuff(Attacker, Attacker, "IfHasBuffCheck", () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                IfNotHasBuff(Attacker, Attacker, "CaitlynHeadshot", () => {
                    IsInBrush = IsInBrush(Attacker);
                    If(IsInBrush, default, CO_EQUAL, default, true, () => {
                        SpellBuffAdd(Attacker, Attacker, "CaitlynHeadshotCount", 8, 2, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
                    });
                    Else(() => {
                        SpellBuffAdd(Attacker, Attacker, "CaitlynHeadshotCount", 8, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
                    });
                });
                Else(() => {
                    If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                            
                        });
                        Else(() => {
                            RemoveOverrideAutoAttack(Owner, false);
                        });
                    });
                });
            });
        });
        IfHasBuff(Owner, Owner, "VorpalSpikes", () => {
            castPosition = GetPointByUnitFacingOffset(Owner, 550, 0);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SpellCast(Owner, Target, castPosition, default, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                        
                    });
                    Else(() => {
                        NextBuffVars.MagicResistReduction = CharVars.MagicResistReduction;
                        SpellBuffAdd(Attacker, Target, "CursedTouch", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, false, false, default);
                    });
                });
            });
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Attacker, Target, "JudicatorHolyFervorDebuff", 5, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
        });
    }
    public void CharOnActivate()
    {
        #region VarDecl
        string? teamID = null;
        float? NewDuration = null;
        float? Range = null;
        Vector3? OwnerPosition = null;
        TeamId? MyTeam = null;
        Region? PerceptionBubble = null;
        string? EnemyTeam = null;
        Region? PerceptionBubble2 = null;
        float? Level = null;
        int? FiddlesticksSkinID = null;
        bool? GhostAlive = null;
        float? AD = null;
        float? BonusDamage = null;
        TeamId? OwnerTeam = null;
        int? SkinID = null;
        TeamId? TeamID = null;
        Champion? Caster = null;
        Vector3? MyPosition = null;
        string? Name = null;
        float? MaxHealth = null;
        float? HealthDamage = null;
        float? BonusDamage2 = null;
        #endregion
        SpellBuffAdd(Owner, Owner, "ResistantSkinDragon", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        NextBuffVars.spawnTime = 101;
        NextBuffVars.healthPerMinute = 37;
        NextBuffVars.damagePerMinute = 1.05;
        NextBuffVars.areaDmgReduction = 0.2;
        NextBuffVars.goldPerMinute = 0.38;
        NextBuffVars.expPerMinute = 1.55;
        NextBuffVars.upgradeTimer = false;
        SpellBuffAdd(Attacker, Attacker, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RegenerationRuneAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 150);
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 3);
        IncPermanentGoldReward(Owner, 8);
        IncPermanentExpReward(Owner, 24);
        NextBuffVars.spawnTime = 101;
        NextBuffVars.healthPerMinute = 16.5;
        NextBuffVars.damagePerMinute = 0.286;
        NextBuffVars.areaDmgReduction = 0.2;
        NextBuffVars.goldPerMinute = 0.054;
        NextBuffVars.expPerMinute = 0.2136;
        NextBuffVars.upgradeTimer = false;
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IncPermanentGoldReward(Owner, -3);
        IncPermanentExpReward(Owner, -5);
        SpellBuffAdd(Owner, Target, "ManaBarrierIcon", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanMove);
        SpellBuffAdd(Owner, Owner, "OdinDisintegrate", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        teamID = TEAM_NEUTRAL;
        this.Bubble = AddPosPerceptionBubble(teamID, 1600, Owner, 25000, Nothing, false);
        NextBuffVars.spawnTime = 101;
        NextBuffVars.areaDmgReduction = 0.2;
        NextBuffVars.healthPerMinute = 90;
        NextBuffVars.damagePerMinute = 1.825;
        NextBuffVars.goldPerMinute = 0.342;
        NextBuffVars.expPerMinute = 2.5;
        NextBuffVars.upgradeTimer = true;
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "BlessingoftheLizardElder", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 100000, true, false, false, default);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 100);
        SpellBuffAdd(Attacker, Owner, "LifestealAttack", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.spawnTime = 101;
        NextBuffVars.healthPerMinute = 28;
        NextBuffVars.damagePerMinute = 0.5;
        NextBuffVars.areaDmgReduction = 0.2;
        NextBuffVars.goldPerMinute = 0.48;
        NextBuffVars.expPerMinute = 1.4;
        NextBuffVars.upgradeTimer = false;
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RegenerationRuneAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        IncPermanentExpReward(Owner, 33);
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 1);
        NextBuffVars.spawnTime = 101;
        NextBuffVars.healthPerMinute = 90;
        NextBuffVars.damagePerMinute = 1.825;
        NextBuffVars.areaDmgReduction = 0.2;
        NextBuffVars.goldPerMinute = 0.324;
        NextBuffVars.expPerMinute = 2.5;
        NextBuffVars.upgradeTimer = true;
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "CrestoftheAncientGolem", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, 100);
        NextBuffVars.spawnTime = 101;
        NextBuffVars.healthPerMinute = 25;
        NextBuffVars.damagePerMinute = 0.84;
        NextBuffVars.goldPerMinute = 0.15;
        NextBuffVars.areaDmgReduction = 0.2;
        NextBuffVars.expPerMinute = 1.08;
        NextBuffVars.upgradeTimer = false;
        SpellBuffAdd(Attacker, Attacker, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IncPermanentStat(IncPermanentFlatHPPoolMod, Owner, -150);
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, -3);
        IncPermanentGoldReward(Owner, -8);
        IncPermanentExpReward(Owner, -12);
        SpellBuffAdd(Attacker, Target, "ResistantSkinDragon", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        NextBuffVars.spawnTime = 101;
        NextBuffVars.healthPerMinute = 31;
        NextBuffVars.damagePerMinute = 0.44;
        NextBuffVars.areaDmgReduction = 0.2;
        NextBuffVars.goldPerMinute = 0.43;
        NextBuffVars.expPerMinute = 1.5;
        NextBuffVars.upgradeTimer = false;
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RegenerationRuneAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 2);
        IncPermanentGoldReward(Owner, 6);
        IncPermanentExpReward(Owner, 14);
        NextBuffVars.spawnTime = 101;
        NextBuffVars.healthPerMinute = 11.88;
        NextBuffVars.damagePerMinute = 0.22;
        NextBuffVars.goldPerMinute = 0.05;
        NextBuffVars.areaDmgReduction = 0.2;
        NextBuffVars.expPerMinute = 0.424;
        NextBuffVars.upgradeTimer = true;
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.spawnTime = 101;
        NextBuffVars.healthPerMinute = 12.1;
        NextBuffVars.damagePerMinute = 0.2195;
        NextBuffVars.areaDmgReduction = 0.2;
        NextBuffVars.goldPerMinute = 0.036;
        NextBuffVars.expPerMinute = 0.1064;
        NextBuffVars.upgradeTimer = false;
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.spawnTime = 101;
        NextBuffVars.healthPerMinute = 12.1;
        NextBuffVars.damagePerMinute = 0.2195;
        NextBuffVars.areaDmgReduction = 0.2;
        NextBuffVars.goldPerMinute = 0.036;
        NextBuffVars.expPerMinute = 0.1064;
        NextBuffVars.upgradeTimer = false;
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IncPermanentExpReward(Owner, -11);
        SpellBuffAdd(Owner, Owner, "OdinSuperMinion", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SpellBuffAdd(Owner, Owner, "OdinShieldRelicAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
            NewDuration = 50;
            IfHasBuff(Unit, Unit, "MonsterBuffs", () => {
                NewDuration = Math(1.2, MO_MULTIPLY, 0 + (NewDuration ?? 0));
            });
            SpellBuffAdd(Unit, Unit, "OdinQuestBuff", 1, 1, 0 + (NewDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectUseable ", "OdinGuardianBuff", true, (Unit) => {
            SpellBuffAdd(Unit, Unit, "OdinQuestBuffParticle", 1, 1, 50, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        SetStatus(Owner, default, SetMagicImmune);
        SetStatus(Owner, default, SetPhysicalImmune);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetForceRenderParticles);
        SpellBuffAdd(Owner, Owner, "OdinOpeningBarrierParticle", 1, 1, 80, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OdinMinion", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OdinMinion", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, true, false, false, default);
        NextBuffVars.BonusHealth = 0;
        NextBuffVars.BubbleSize = 1600;
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Owner, Unit, "CallForHelpManager", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Range = GetStat(GetFlatAttackRangeMod, Owner);
        OwnerPosition = GetUnitPosition(Owner);
        MyTeam = GetTeamID(default);
        SetStatus(Owner, default, SetTargetable);
        OwnerPosition = GetUnitPosition(Owner);
        MyTeam = GetTeamID(default);
        PerceptionBubble = AddPosPerceptionBubble(MyTeam, 1600, OwnerPosition, 25000, Owner, true);
        EnemyTeam = TEAM_ORDER;
        PerceptionBubble2 = AddPosPerceptionBubble(EnemyTeam, 50, OwnerPosition, 25000, Nothing, false);
        SetDodgePiercing(Owner, true);
        SetStatus(Owner, default, SetCanMoveEver);
        SetDodgePiercing(Owner, true);
        SpellBuffAdd(Owner, Owner, "OdinGuardianBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OdinGuardianUI", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectFriends AffectHeroes ", default, false, (Unit) => {
            SpellBuffAdd(Unit, Unit, "OdinPlayerBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        NextBuffVars.HPPerLevel = 75;
        NextBuffVars.DmgPerLevel = 15;
        NextBuffVars.ArmorPerLevel = 4;
        NextBuffVars.MR_per_level = 2;
        SpellBuffAdd(Owner, Owner, "OdinGuardianStatsByLevel", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Owner, default, SetMagicImmune);
        SetStatus(Owner, default, SetPhysicalImmune);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetGhosted);
        SpellBuffAdd(Owner, Owner, "OdinMinionPortal", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, true, false, false, default);
        NextBuffVars.BonusHealth = 0;
        NextBuffVars.BubbleSize = 1600;
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Owner, Unit, "CallForHelpManager", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Range = GetStat(GetFlatAttackRangeMod, Owner);
        OwnerPosition = GetUnitPosition(Owner);
        MyTeam = GetTeamID(default);
        SetStatus(Owner, default, SetTargetable);
        OwnerPosition = GetUnitPosition(Owner);
        MyTeam = GetTeamID(default);
        PerceptionBubble = AddPosPerceptionBubble(MyTeam, 1600, OwnerPosition, 25000, Owner, true);
        EnemyTeam = TEAM_CHAOS;
        PerceptionBubble2 = AddPosPerceptionBubble(EnemyTeam, 50, OwnerPosition, 25000, Nothing, false);
        SetDodgePiercing(Owner, true);
        SetStatus(Owner, default, SetMagicImmune);
        SetStatus(Owner, default, SetPhysicalImmune);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SpellBuffAdd(Owner, Owner, "OdinBombBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Owner, default, SetMagicImmune);
        SetStatus(Owner, default, SetPhysicalImmune);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetGhosted);
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectUseable ", "OdinGuardianBuff", true, (Unit) => {
            SpellBuffAdd(Unit, Unit, "OdinQuestIndicator", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        SpellBuffAdd(Owner, Owner, "OdinQuestParticleRemover", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OdinSuperMinion", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetRooted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetSuppressCallForHelp);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SpellBuffAdd(Owner, Owner, "OdinSpeedShrineAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Owner, default, SetMagicImmune);
        SetStatus(Owner, default, SetPhysicalImmune);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetForceRenderParticles);
        SpellBuffAdd(Owner, Owner, "OdinParticlePHBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Owner, default, SetMagicImmune);
        SetStatus(Owner, default, SetPhysicalImmune);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetForceRenderParticles);
        SpellBuffAdd(Owner, Owner, "OdinMinionPortal", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "JudicatorHolyFervor", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "TurretShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "StructureDamageReduction", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RebirthReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RebirthMarker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(part, default, "HallucinatePoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, Owner, false, default, default, default, default, default, default);
        SpellBuffAdd(Attacker, Owner, "TurretShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "StructureDamageReduction", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "PromoteMeBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "PromoteMeBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanMove);
        SpellBuffAdd(Owner, Owner, "OdinDisintegrate", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SetStatus(Owner, default, SetNoRender);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetNoRender);
        SpellBuffAdd(Owner, Owner, "Visionary_marker", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "EmpoweredBulwark", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "Backstab", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "EmpathizeAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SpikedShell", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "VoidStone", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "DeathDefied", 1, 1, 30000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        CharVars.NumSwings = 0;
        CharVars.LastHitTime = 0;
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Target, "EternalThirstIcon", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Owner, Unit, "SecondSight", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.Count = 0;
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 480.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, true, false, false, default);
        NextBuffVars.BonusHealth = 250;
        NextBuffVars.BubbleSize = 800;
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, true, false, false, default);
        SetDodgePiercing(Owner, true);
        NextBuffVars.StartDecay = 660.1;
        SpellBuffAdd(Owner, Owner, "TurretPreBonus", 1, 1, 420, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 420, default, default, default, default);
        NextBuffVars.BonusHealth = 250;
        NextBuffVars.BubbleSize = 800;
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SetDodgePiercing(Owner, true);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, default, default, default, default);
        NextBuffVars.BonusHealth = 0;
        NextBuffVars.BubbleSize = 1600;
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        NextBuffVars.StartDecay = 1200.1;
        SpellBuffAdd(Owner, Owner, "TurretPreBonus", 1, 1, 960, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 960, default, default, default, default);
        NextBuffVars.BonusHealth = 250;
        NextBuffVars.BubbleSize = 800;
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SetDodgePiercing(Owner, true);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 2280.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, default, default, default, default);
        NextBuffVars.BonusHealth = 125;
        NextBuffVars.BubbleSize = 1000;
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SetDodgePiercing(Owner, true);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, default, default, default, default);
        NextBuffVars.BonusHealth = 0;
        NextBuffVars.BubbleSize = 1600;
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "Focus", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "BowMasterFocusDisplay", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "Gemcraft", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        NextBuffVars.StartDecay = 660.1;
        SpellBuffAdd(Owner, Owner, "TurretPreBonus", 1, 1, 420, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 420, default, default, default, default);
        NextBuffVars.BonusHealth = 250;
        NextBuffVars.BubbleSize = 800;
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SetDodgePiercing(Owner, true);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, default, default, default, default);
        NextBuffVars.BonusHealth = 0;
        NextBuffVars.BubbleSize = 1600;
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "Carnivore", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "BattleFury", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "ColossalStrength", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "CursedTouchMarker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "Scurvy", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "IsPirate", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 480.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, default, default, default, default);
        NextBuffVars.BonusHealth = 250;
        NextBuffVars.BubbleSize = 800;
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SetDodgePiercing(Owner, true);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 2280.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, default, default, default, default);
        NextBuffVars.BonusHealth = 125;
        NextBuffVars.BubbleSize = 1000;
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SetDodgePiercing(Owner, true);
        NextBuffVars.StartDecay = 1200.1;
        SpellBuffAdd(Owner, Owner, "TurretPreBonus", 1, 1, 960, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 960, default, default, default, default);
        NextBuffVars.BonusHealth = 250;
        NextBuffVars.BubbleSize = 800;
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SetDodgePiercing(Owner, true);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "LeblancPassive", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.lastCast = 0;
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MaokaiSapMagicPass", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.Tally = 0;
        SpellBuffAdd(Owner, Owner, "EmpoweredBulwark", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "UdyrMonkeyAgility", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "VeigarEquilibrium", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.APGain = 0;
        CharVars.TotalBonus = 0;
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingCloneApplicator", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "EternalThirstIcon", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "LuxDeath", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Level = GetLevel(Owner);
        CharVars.IlluminateDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "LuxIlluminationPassive", 1, 1, 250000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Pantheon_Aegis", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "GarenRecouperateOn", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.CommandBonus = 0;
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        CharVars.NumSwings = 0;
        CharVars.LastHitTime = 0;
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "RebirthMarker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "RebirthReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "Gemcraft", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CharVars.DarkWindCount = 0;
        SpellBuffAdd(Owner, Owner, "Paranoia", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        FiddlesticksSkinID = GetSkinID(Attacker);
        If(FiddlesticksSkinID, default, CO_EQUAL, default, 6, () => {
            SetSlotSpellIcon(2, SpellSlots, SPELLBOOK_CHAMPION, Owner, 2);
            SetSlotSpellIcon(3, SpellSlots, SPELLBOOK_CHAMPION, Owner, 2);
        });
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "AhriIdleParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.OrbofDeceptionIsActive = 0;
        CharVars.FoxFireIsActive = 0;
        CharVars.SeduceIsActive = 0;
        CharVars.TumbleIsActive = 0;
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "HeimerdingerTurretDetonation", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TechmaturgicalIcon", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.Time1 = 25000;
        CharVars.Time2 = 25000;
        CharVars.Time3 = 25000;
        CharVars.Time4 = 25000;
        CharVars.Time5 = 25000;
        CharVars.Time6 = 25000;
        CharVars.Level1 = 4;
        CharVars.Level2 = 4;
        CharVars.Level3 = 4;
        CharVars.Level4 = 4;
        CharVars.Level5 = 4;
        CharVars.Level6 = 4;
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MalphiteShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "MordekaiserIronMan", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        IncPAR(Owner, -180);
        SpellBuffAdd(Attacker, Owner, "OrianaSpellSword", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        CharVars.GhostInitialized = false;
        SpellBuffAdd(Owner, Owner, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        GhostAlive = false;
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "SkarnerBrushCheck", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        AD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusDamage = Math(0 + (AD ?? 0), MO_MULTIPLY, 0.8);
        SetSpellToolTipVar(0 + (BonusDamage ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SpellBuffAdd(Owner, Owner, "Camouflage", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0.1, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "TailwindSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (Unit) => {
            SpellBuffAdd(Owner, Unit, "Tailwind", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ShenWayOfTheNinjaMarker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "IsNinja", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "SpikedShell", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ArcaneMastery", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "IreliaIdleParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "AlZaharVoidlingDetonation", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.BleedAmount = 0.4;
        SpellBuffAdd(Owner, Owner, "XenZhaoPuncture", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.ComboCounter = 0;
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        NextBuffVars.BleedAmount = 0.4;
        SpellBuffAdd(Owner, Owner, "XenZhaoPuncture", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        CharVars.ComboCounter = 0;
        SetStatus(Owner, default, SetNoRender);
        SpellBuffAdd(Attacker, Owner, "YomuSpellSword", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "YomuGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        GhostAlive = false;
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "JarvanIVMartialCadence", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "FeelNoPain", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "GalioRunicSkin", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "Focus", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "BowMasterFocusDisplay", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ViktorPassiveAPPerLev", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CreateItem(Owner, 3200);
        OwnerTeam = GetTeamID(default);
        SpellEffectCreate(this.StaffIdle, this.StaffIdle2, "Viktor_idle.troy", "Viktor_idle.troy", OwnerTeam ?? TEAM_UNKNOWN, 0, 0, TEAM_NEUTRAL, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, "BUFFBONE_CSTM_WEAPON_1", default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "VoidStone", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Owner, Unit, "SecondSight", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.Count = 0;
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SwainDampeningFieldMana", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "SoulEater", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.DamageBonus = 0;
        SpellBuffAdd(Owner, Owner, "DrawABead", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "DeadlyVenom_marker", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SivirPassive", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Nevershade", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetInvulnerable);
        SetStatus(Owner, default, SetIgnoreCallForHelp);
        SetStatus(Owner, default, SetNoRender);
        SpellBuffAdd(Owner, Owner, "VladimirBloodGorged", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.WildfireCount = 0;
        SpellBuffAdd(Owner, Owner, "BrandPassive", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "BrandPassiveSound", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, true, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "IsNinja", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.Count = 0;
        SpellBuffAdd(Attacker, Owner, "Voracity", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "AkaliTwinDisciplines", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "IsNinja", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        this.AkaliDamageVar = default;
        CharVars.VampPercent = 0;
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.CastPoint = 1;
        SpellBuffAdd(Owner, Owner, "Scurvy", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "IsPirate", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SkinID = GetSkinID(Owner);
        If(SkinID, default, CO_EQUAL, default, 4, () => {
            PlayAnimation("gangplank_key", 0, Owner, true, false, false);
        });
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RivenPassive", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "ManaBarrierIcon", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RenektonPredator", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        IncPAR(Owner, -99);
        CharVars.PerPercent = 0.1;
        this.BonusAttackPercentage = 2.25;
        this.AttackPercentage = 1.5;
        CharVars.RageThreshold = 0.5;
        CharVars.BonusDamage = this.VALUE_BY_LEVEL;
        CharVars.RageBonusDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "RebirthReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RebirthMarker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "SilentKiller", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ShyvanaPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.HitCount = 0;
        IncPAR(Owner, -100);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "UdyrMonkeyAgility", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "EmpathizeAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Attacker, "DoubleStrike", 7, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "MasterYiWujuDeactivated", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Owner, "OrianaSpellSword", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        CharVars.GhostInitialized = false;
        SpellBuffAdd(Owner, Owner, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        GhostAlive = false;
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        CharVars.SecondSkinArmor = 11;
        SpellBuffAdd(Owner, Owner, "Carnivore", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SealSpellSlot(2, SpellSlots, Owner, true, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        CharVars.DrippingWoundDuration = 10;
        CharVars.DrippingWoundMax = 5;
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetSpellToolTipVar(40, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SetSpellToolTipVar(125, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SetSpellToolTipVar(150, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        Level = GetLevel(Owner);
        CharVars.RegenValue = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "TrundleDiseaseOverseer", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        CharVars.DiseaseCounter = 0;
        SetStatus(Owner, default, SetTargetable);
        SpellBuffAdd(Owner, Owner, "ConsecrationAura", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "UdyrMonkeyAgility", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "LeonaSunlightPassive", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "FizzPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.LastHit = 0;
        TeamID = GetTeamID(default);
        Caster = GetChampionBySkinName("Orianna", TeamID ?? TEAM_UNKNOWN);
        SpellBuffAdd(Caster, Owner, "OrianaGhost", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Caster, Owner, "OrianaGhostMinion", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        MyPosition = GetUnitPosition(Owner);
        NextBuffVars.MyPosition = MyPosition;
        SpellBuffAdd(Owner, Caster, "OriannaBallTracker", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "GragasHappyHour", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "ColossalStrength", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "VolibearPassiveBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "VolibearPassiveHealCheck", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.RegenPercent = 0.3;
        CharVars.RegenTooltip = 30;
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
            Name = GetUnitSkinName(Unit);
            If(Name, default, CO_EQUAL, default, "Zilean", () => {
                SpellBuffAdd(Owner, Owner, "VolibearHatred", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                SpellBuffAdd(Owner, Unit, "VolibearHatredZilean", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SwainTacticalSupremacy", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "BattleFury", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        IncPAR(Owner, -99);
        SetPARColorOverride(Owner, 255, 0, 0, 255, 175, 0, 0, 255);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "GravesPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.PassiveDuration = 3;
        CharVars.PassiveMaxStacks = 10;
        CharVars.ArmorAmount = 1;
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianDisplay", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SetStatus(Owner, default, SetTargetable);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.LastHit = 0;
        CharVars.AttackCounter = 1;
        CharVars.MissileNumber = 0;
        SpellBuffAdd(Attacker, Target, "TalonMercy", 1, 1, 250000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Owner, default, SetTargetable);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        CharVars.SecondSkinArmor = 11;
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SwainTacticalSupremacy", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "DeathDefied", 1, 1, 30000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.BarrageCounter = 0;
        SpellBuffAdd(Owner, Owner, "RapidReload", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 20000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingCloneApplicator", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "YomuSpellSword", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "YomuGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        GhostAlive = false;
        CharVars.MantraTimerCooldown = 25;
        IncSpellLevel(Owner, 3, SpellSlots);
        SpellBuffAdd(Owner, Owner, "KarmaChakraCharge", 3, 2, 0 + (CharVars.MantraTimerCooldown ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "KarmaOneMantraParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "KarmaTranscendence", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MissFortuneStrut", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "IsPirateHunter", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Visionary_marker", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RumbleHeatSystem", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RumbleHeatPunchTT", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IncPAR(Owner, -100);
        CharVars.DangerZone = 50;
        CharVars.ShieldAmount = 0;
        this.BaseCDR = 10;
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "CaitlynHeadshotPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Carnivore", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "CursedTouchMarker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OlafBerzerkerRage", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        HealthDamage = Math(0 + (MaxHealth ?? 0), MO_MULTIPLY, 0.004);
        this.BonusDamage = Math(12, MO_ADD, 0 + (HealthDamage ?? 0));
        SetSpellToolTipVar(0 + (this.BonusDamage ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "UdyrMonkeyAgility", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "Pyromania_Marker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CharVars.CastPoint = 1;
        AD = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusDamage2 = Math(0 + (AD ?? 0), MO_MULTIPLY, 0.8);
        SetSpellToolTipVar(0 + (BonusDamage2 ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Backstab", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        Caster = GetChampionBySkinName("Oriana", TeamID ?? TEAM_UNKNOWN);
        SpellBuffAdd(Caster, Owner, "OrianaGhost", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Caster, Owner, "OrianaGhostMinion", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        MyPosition = GetUnitPosition(Owner);
        NextBuffVars.MyPosition = MyPosition;
        SpellBuffAdd(Owner, Caster, "OriannaBallTracker", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "YorickUnholySymbiosis", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "YorickRavenousLifesteal", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RebirthMarker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "RebirthReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "XerathAscended", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "JudicatorHolyFervor", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyValiantFighter", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        CharVars.DamageCount = 0;
        CharVars.ArmorCount = 0;
    }
    public void CharOnDisconnect()
    {
        #region VarDecl
        TeamId? teamID = null;
        #endregion
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        teamID = GetTeamID(default);
        If(teamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            ForEachChampion(TEAM_ORDER, default, default, (Unit) => {
                If(Owner, default, CO_NOT_EQUAL, Unit, default, () => {
                    IncPermanentStat(IncPermanentFlatGoldPer10Mod, Unit, 4);
                    IncPermanentStat(IncPermanentPercentEXPBonus, Unit, 0.04);
                });
            });
        });
        Else(() => {
            ForEachChampion(TEAM_CHAOS, default, default, (Unit) => {
                If(Owner, default, CO_NOT_EQUAL, Unit, default, () => {
                    IncPermanentStat(IncPermanentFlatGoldPer10Mod, Unit, 4);
                    IncPermanentStat(IncPermanentPercentEXPBonus, Unit, 0.04);
                });
            });
        });
        SetStatus(Owner, default, SetDisableAmbientGold);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
    }
    public void CharOnSpellCast()
    {
        #region VarDecl
        Object? SpellName = null;
        Object? TempName = null;
        Object? tempName = null;
        Object? Level = null;
        Object? SlotName = null;
        Object? Cooldown = null;
        Object? name = null;
        Object? temp = null;
        Object? Slot = null;
        Object? slotNumber = null;
        Object? SlotValue = null;
        Object? HealthCost = null;
        Object? SpellSlot = null;
        float? CooldownStat = null;
        long? BaseCooldown = null;
        float? Multiplier = null;
        float? NewCooldown = null;
        Object? Names = null;
        Vector3? TargetPos = null;
        float? Distance = null;
        Vector3? FacingPos = null;
        Object? BuffDuration = null;
        #endregion
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "RocketGrab", () => {
            SpellBuffAdd(Owner, Owner, "Root", 1, 1, 0.6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        SpellBuffRemove(Owner, "ActionTimer", Owner, default);
        SpellBuffRemove(Owner, "PropelTimer", Owner, default);
        SpellBuffRemove(Owner, "WrathTimer", Owner, default);
        SpellBuffRemove(Owner, "SweepTimer", Owner, default);
        If(default, 0.04, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
            IfHasBuff(Owner, Owner, "WrathCooldown", () => {
                SpellBuffAdd(Owner, Owner, "ActionTimer", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
            IfNotHasBuff(Owner, Owner, "WrathCooldown", () => {
                SpellBuffAdd(Owner, Owner, "WrathTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
                SpellBuffAdd(Owner, Owner, "WrathCooldown", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            });
        });
        ElseIf(default, 0.12, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
            SpellBuffAdd(Owner, Owner, "SweepTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        ElseIf(default, 0.18, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
            SpellBuffAdd(Owner, Owner, "PropelTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "ActionTimer", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        IfNotHasBuff(Owner, Owner, "WrathTimer", () => {
            IfNotHasBuff(Owner, Owner, "SweepTimer", () => {
                IfNotHasBuff(Owner, Owner, "PropelTimer", () => {
                    IfNotHasBuff(Owner, Owner, "ActionTimer", () => {
                        SpellBuffAdd(Owner, Owner, "ActionTimer2", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
                    });
                });
            });
        });
        TempName = GetCastInfo(GetSpellName);
        If(TempName, default, CO_EQUAL, default, "EnchantedCrystalArrow", () => {
            CharVars.CastPoint = GetUnitPosition(Owner);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "BlindMonkRKick", () => {
            SpellBuffAdd(Owner, Target, "BlindMonkRRoot", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, true, () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "BlindMonkPassive", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        tempName = GetCastInfo(GetSpellName);
        If(tempName, default, CO_EQUAL, default, "MockingShout", () => {
            ForEachUnitInTargetArea(Owner, Owner, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                If(Unit, default, CO_IS_TARGET_BEHIND_ME, Owner, default, () => {
                    SpellBuffAdd(Owner, Unit, "FacingMe", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        IfNotHasBuff(Owner, Nothing, "LeblancSlideM", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SlotName = GetCastInfo(GetSpellName);
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(SlotName, default, CO_EQUAL, default, "LeblancChaosOrb", () => {
                If(Level, default, CO_GREATER_THAN, default, 0, () => {
                    SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "LeblancChaosOrbM");
                    SetSlotSpellCooldownTimeVer2(0 + (Cooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
                    SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
                });
                Else(() => {
                    CharVars.lastCast = 0;
                });
            });
            ElseIf(SlotName, default, CO_EQUAL, default, "LeblancSlide", () => {
                If(Level, default, CO_GREATER_THAN, default, 0, () => {
                    SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "leblancslidem");
                    SetSlotSpellCooldownTimeVer2(0 + (Cooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
                    SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
                });
                Else(() => {
                    CharVars.lastCast = 1;
                });
            });
            ElseIf(SlotName, default, CO_EQUAL, default, "LeblancSoulShackle", () => {
                If(Level, default, CO_GREATER_THAN, default, 0, () => {
                    SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "LeblancSoulShackleM");
                    SetSlotSpellCooldownTimeVer2(0 + (Cooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
                    SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
                });
                Else(() => {
                    CharVars.lastCast = 2;
                });
            });
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "BlindMonkRKick", () => {
            SpellBuffAdd(Owner, Target, "BlindMonkRRoot", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, true, () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "BlindMonkPassive", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "LuxLightBinding", () => {
            CharVars.FirstTargetHit = false;
        });
        name = GetCastInfo(GetSpellName);
        If(name, default, CO_EQUAL, default, "garenjustice", () => {
            SpellBuffAdd(Owner, Owner, "GarenJusticePreCast", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        temp = GetCastInfo(GetSpellSlot);
        If(temp, default, CO_EQUAL, default, 3, () => {
            SpellBuffAdd(Attacker, Owner, "TaricHammerInternal", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfHasBuff(Attacker, Attacker, "AhriSoulCrusher", () => {
            SpellName = GetCastInfo(GetSpellName);
            If(SpellName, default, CO_EQUAL, default, "AhriOrbofDeception", () => {
                CharVars.OrbofDeceptionIsActive = 1;
                SpellBuffRemove(Owner, "AhriPassiveParticle", Owner, 0);
                SpellBuffAdd(Owner, Owner, "AhriIdleCheck", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            If(SpellName, default, CO_EQUAL, default, "AhriFoxFire", () => {
                CharVars.FoxFireIsActive = 1;
            });
            If(SpellName, default, CO_EQUAL, default, "AhriSeduce", () => {
                CharVars.SeduceIsActive = 1;
                SpellBuffRemove(Owner, "AhriPassiveParticle", Owner, 0);
                SpellBuffAdd(Owner, Owner, "AhriIdleCheck", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            If(SpellName, default, CO_EQUAL, default, "AhriTumble", () => {
                CharVars.TumbleIsActive = 1;
            });
        });
        Else(() => {
            SpellName = GetCastInfo(GetSpellName);
            If(SpellName, default, CO_EQUAL, default, "AhriOrbofDeception", () => {
                SpellBuffRemove(Owner, "AhriIdleParticle", Owner, 0);
                SpellBuffAdd(Owner, Owner, "AhriIdleCheck", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            If(SpellName, default, CO_EQUAL, default, "AhriSeduce", () => {
                SpellBuffRemove(Owner, "AhriIdleParticle", Owner, 0);
                SpellBuffAdd(Owner, Owner, "AhriIdleCheck", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        Slot = GetCastInfo(GetSpellSlot);
        If(Slot, default, CO_EQUAL, default, 3, () => {
            SpellBuffAdd(Owner, Owner, "SkarnerImpaleFlashLock", 1, 1, 0.25, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            IfNotHasBuff(Attacker, Attacker, "IfHasBuffCheck", () => {
                IfNotHasBuff(Attacker, Attacker, "SonaPowerChord", () => {
                    SpellBuffAdd(Attacker, Attacker, "SonaPowerChordCount", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
                });
            });
            slotNumber = GetCastInfo(GetSpellSlot);
            If(slotNumber, default, CO_EQUAL, default, 3, () => {
                IfHasBuff(Owner, Owner, "SonaPowerChord", () => {
                    IfHasBuff(Owner, Owner, "SonaAriaofPerseverance", () => {
                        SpellBuffRemove(Owner, "SonaAriaofPerseveranceCheck", Owner, 0);
                        SpellBuffAdd(Owner, Owner, "SonaAriaofPerseveranceCheck", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                    IfHasBuff(Owner, Owner, "SonaHymnofValor", () => {
                        SpellBuffRemove(Owner, "SonaHymnofValorCheck", Owner, 0);
                        SpellBuffAdd(Owner, Owner, "SonaHymnofValorCheck", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                    IfHasBuff(Owner, Owner, "SonaSongofDiscord", () => {
                        SpellBuffRemove(Owner, "SonaSongofDiscordCheck", Owner, 0);
                        SpellBuffAdd(Owner, Owner, "SonaSongofDiscordCheck", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
        });
        TempName = GetCastInfo(GetSpellName);
        If(TempName, default, CO_EQUAL, default, "EnchantedCrystalArrow", () => {
            CharVars.CastPoint = GetUnitPosition(Owner);
        });
        SlotValue = GetCastInfo(GetSpellSlot);
        If(SlotValue, default, CO_EQUAL, default, 0, () => {
            IfNotHasBuff(Owner, Owner, "SwainMetamorphism", () => {
                SpellEffectCreate(this.a, default, "swain_disintegrationBeam_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Bird_root", default, Owner, default, default, true, default, default, default, default, default, default);
            });
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "SpiralBlade", () => {
            CharVars.percentOfAttack = 1;
        });
        name = GetCastInfo(GetSpellName);
        If(name, default, CO_EQUAL, default, "InfectedCleaverMissile", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            HealthCost = this.VALUE_BY_LEVEL;
            IncHealth(Owner, 0 + (HealthCost ?? 0), Owner);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "EzrealTrueshotBarrage", () => {
            CharVars.percentOfAttack = 1;
            SpellBuffAdd(Owner, Owner, "CantAttack", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "RocketGrab", () => {
            SpellBuffAdd(Owner, Owner, "Root", 1, 1, 0.6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "AlphaStrike", () => {
            SpellBuffAdd(Owner, Owner, "AlphaStrike", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, false, () => {
            SpellBuffAdd(Owner, Owner, "CassiopeiaDeadlyCadence", 5, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, default, default);
            SpellEffectCreate(this.Particle, default, "CassDeadlyCadence_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "root", default, Attacker, default, default, false, default, default, default, default, default, default);
        });
        SlotName = GetCastInfo(GetSpellName);
        Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(SlotName, default, CO_EQUAL, default, "NocturneParanoia", () => {
            SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "NocturneParanoia2");
            SetSlotSpellCooldownTimeVer2(0 + (Cooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            SpellBuffAdd(Owner, Owner, "GragasPassiveHeal", 1, 1, 4.3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Heal, 0, true, false, false, default);
        });
        tempName = GetCastInfo(GetSpellName);
        If(tempName, default, CO_EQUAL, default, "MockingShout", () => {
            ForEachUnitInTargetArea(Owner, Owner, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                If(Unit, default, CO_IS_TARGET_BEHIND_ME, Owner, default, () => {
                    SpellBuffAdd(Owner, Unit, "FacingMe", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        SlotName = GetCastInfo(GetSpellName);
        If(SlotName, default, CO_EQUAL, default, "BladeRogue_ShackleShot", () => {
            CharVars.FirstTargetHit = false;
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, false, () => {
            SpellBuffAdd(Owner, Owner, "CassiopeiaDeadlyCadence", 5, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, default, default);
            SpellEffectCreate(this.Particle, default, "CassDeadlyCadence_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "root", default, Attacker, default, default, false, default, default, default, default, default, default);
        });
        SpellSlot = GetCastInfo(GetSpellSlot);
        SpellName = GetCastInfo(GetSpellName);
        If(SpellSlot, default, CO_EQUAL, default, 3, () => {
            
        });
        Else(() => {
            IfHasBuff(Owner, Owner, "KarmaChakra", () => {
                If(SpellName, default, CO_EQUAL, default, "karmasoulshieldc", () => {
                    CooldownStat = GetStat(GetPercentCooldownMod, Owner);
                    BaseCooldown = 10;
                    Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
                    NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (BaseCooldown ?? 0));
                    SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                    SpellBuffRemoveStacks(Owner, Owner, "KarmaChakra", 1);
                });
                ElseIf(SpellName, default, CO_EQUAL, default, "karmaspiritbondc", () => {
                    CooldownStat = GetStat(GetPercentCooldownMod, Owner);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    BaseCooldown = this.VALUE_BY_LEVEL;
                    Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
                    NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (BaseCooldown ?? 0));
                    SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                    SpellBuffRemoveStacks(Owner, Owner, "KarmaChakra", 1);
                });
                ElseIf(SpellName, default, CO_EQUAL, default, "karmaheavenlywavec", () => {
                    CooldownStat = GetStat(GetPercentCooldownMod, Owner);
                    BaseCooldown = 6;
                    Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
                    NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (BaseCooldown ?? 0));
                    SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                    SpellBuffRemoveStacks(Owner, Owner, "KarmaChakra", 1);
                });
            });
        });
        Names = GetCastInfo(GetSpellName);
        If(Names, default, CO_EQUAL, default, "MissFortuneBulletTime", () => {
            SpellBuffAdd(Owner, Owner, "MissFortuneBulletSound", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "CaitlynPiltoverPeacemaker", () => {
            CharVars.percentOfAttack = 1;
            SpellBuffAdd(Owner, Owner, "CantAttack", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "OlafAxeThrow", () => {
            TargetPos = GetCastSpellTargetPos();
            Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
            Distance = Math(50, MO_ADD, 0 + (Distance ?? 0));
            FacingPos = GetPointByUnitFacingOffset(Owner, 0 + (Distance ?? 0), 0);
            NextBuffVars.FacingPos = FacingPos;
            NextBuffVars.TargetPos = TargetPos;
            SpellBuffAdd(Owner, Owner, "OlafAxeThrow", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, true, () => {
            
        });
        Else(() => {
            Slot = GetCastInfo(GetSpellSlot);
            If(Slot, default, CO_EQUAL, default, 1, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                BuffDuration = this.VALUE_BY_LEVEL;
                NextBuffVars.MagicPen = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Owner, Owner, "XerathLocusOfPower", 1, 1, 0 + (BuffDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
    }
    public void BuffOnSpellCast()
    {
        #region VarDecl
        Object? Name = null;
        AttackableUnit? Caster = null;
        Object? SpellName = null;
        Object? CooldownTime = null;
        AttackableUnit? Attacker = null;
        int? Count = null;
        Object? slot = null;
        Object? cooldown = null;
        float? newCooldown = null;
        TeamId? TeamID = null;
        Vector3? CastPos = null;
        Minion? Other3 = null;
        Object? Level = null;
        float? BonusDamage = null;
        float? BonusHealth = null;
        Object? ManaCost = null;
        float? MaxHealth = null;
        float? CurrHealth = null;
        float? MaxHealthReturn = null;
        float? MaxPAR = null;
        float? CurrPAR = null;
        float? MaxPARReturn = null;
        float? CurrentADDMana = null;
        float? CurrentADDHealth = null;
        Object? SpellCastName = null;
        float? displayDuration = null;
        Fade? ID = null;
        float? AttackDamage = null;
        float? BaseAD = null;
        float? PassiveAD = null;
        float? BonusBaseAD = null;
        float? FuryRemaining = null;
        Object? CastSlot = null;
        bool? Deployed = null;
        Vector3? TargetPos = null;
        bool? IsStealth = null;
        Object? SpellSlot = null;
        float? CooldownStat = null;
        long? BaseCooldown = null;
        float? Multiplier = null;
        float? NewCooldown = null;
        #endregion
        SpellBuffAdd(Owner, Owner, "WormRecoupDebuff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "WormRecoupDebuff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        If(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, false, () => {
            
        });
        Else(() => {
            If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, false, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        Name = GetCastInfo(GetSpellName);
        If(Name, default, CO_EQUAL, default, "teleportcancel", () => {
            Caster = SetBuffCasterUnit();
            If(Caster, default, CO_IS_TYPE_TURRET, default, default, () => {
                SpellBuffRemove(Caster, "Teleport_Turret", Owner, default);
            });
            Else(() => {
                SpellBuffRemove(Caster, "Teleport_Target", Owner, default);
            });
            SpellBuffRemoveCurrent(Owner);
        });
        If(Target, default, CO_DIFFERENT_TEAM, Owner, default, () => {
            SpellBuffAdd(Owner, Owner, "OdinCombatActive", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            If(Target, default, CO_NOT_EQUAL, Owner, default, () => {
                
            });
        });
        IfHasBuff(Target, Target, "OdinCombatActive", () => {
            If(Target, default, CO_NOT_EQUAL, Owner, default, () => {
                SpellBuffAdd(Owner, Owner, "OdinCombatActive", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        SpellBuffRemoveCurrent(Owner);
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "leblancslidereturnm", () => {
            IfHasBuff(Owner, Nothing, "LeblancSlide", () => {
                CooldownTime = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(CooldownTime, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                    SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0.25);
                });
            });
            SpellBuffRemove(Owner, "LeblancSlideWallFixM", Owner, default);
            SpellBuffRemoveCurrent(Owner);
        });
        If(SpellName, default, CO_EQUAL, default, "LeblancSlide", () => {
            this.doNotTeleport = true;
            SpellBuffRemove(Owner, "LeblancSlideWallFixM", Owner, default);
            SpellBuffRemoveCurrent(Owner);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "leblancslidereturn", () => {
            IfHasBuff(Owner, Nothing, "LeblancSlideM", () => {
                CooldownTime = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(CooldownTime, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                    SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0.25);
                });
            });
            SpellBuffRemoveCurrent(Owner);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "leblancslidem", () => {
            this.doNotTeleport = true;
            SpellBuffRemoveCurrent(Owner);
            SpellBuffRemove(Owner, "LeblancSlideMove", Owner, default);
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            Attacker = SetBuffCasterUnit();
            IfNotHasBuff(Attacker, Attacker, "MaokaiSapMagicMelee", () => {
                SpellBuffAdd(Attacker, Attacker, "MaokaiSapMagicHot", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
            });
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            Attacker = SetBuffCasterUnit();
            IfNotHasBuff(Attacker, Attacker, "MaokaiSapMagicMelee", () => {
                SpellBuffAdd(Attacker, Attacker, "MaokaiSapMagicHot", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
            });
        });
        If(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, true, () => {
            this.WillRemove = true;
        });
        ElseIf(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            this.WillRemove = true;
        });
        If(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, false, () => {
            
        });
        Else(() => {
            If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, false, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        If(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ElseIf(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, false, () => {
            
        });
        Else(() => {
            If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, false, () => {
                SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "SowTheWind", () => {
            this.SowCast = 1;
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "SowTheWind", () => {
            Caster = SetBuffCasterUnit();
            SpellBuffRemove(Caster, "SowTheWind", Owner, default);
            SpellBuffRemove(Owner, "SowTheWindCastMarker", Caster, default);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "IreliaTranscendentBlades", () => {
            this.Blades = Math(0 + (this.Blades ?? 0), MO_ADD, -1);
            Count = GetBuffCountFromAll(Owner, "IreliaTranscendentBladesSpell");
            If(Count, default, CO_EQUAL, default, 4, () => {
                SpellEffectRemove(this.Particle4);
            });
            If(Count, default, CO_EQUAL, default, 3, () => {
                SpellEffectRemove(this.Particle2);
            });
            If(Count, default, CO_EQUAL, default, 2, () => {
                SpellEffectRemove(this.Particle3);
            });
            If(Count, default, CO_EQUAL, default, 1, () => {
                SpellEffectRemove(this.Particle1);
            });
        });
        If(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, false, () => {
            
        });
        ElseIf(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            slot = GetCastInfo(GetSpellSlot);
            If(slot, default, CO_NOT_EQUAL, default, 0, () => {
                cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(cooldown, default, CO_GREATER_THAN, default, 0, () => {
                    newCooldown = Math(0 + (cooldown ?? 0), MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(0 + (newCooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
                });
            });
            If(slot, default, CO_NOT_EQUAL, default, 1, () => {
                cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(cooldown, default, CO_GREATER_THAN, default, 0, () => {
                    newCooldown = Math(0 + (cooldown ?? 0), MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(0 + (newCooldown ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
                });
            });
            If(slot, default, CO_NOT_EQUAL, default, 2, () => {
                cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(cooldown, default, CO_GREATER_THAN, default, 0, () => {
                    newCooldown = Math(0 + (cooldown ?? 0), MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(0 + (newCooldown ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
                });
            });
            If(slot, default, CO_NOT_EQUAL, default, 3, () => {
                cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(cooldown, default, CO_GREATER_THAN, default, 0, () => {
                    newCooldown = Math(0 + (cooldown ?? 0), MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(0 + (newCooldown ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
                });
            });
        });
        SpellBuffAdd(Owner, Attacker, "MonkeyKingCloneSweep", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            TeamID = GetTeamID(default);
            CastPos = GetPointByUnitFacingOffset(Owner, 100, 0);
            Other3 = SpawnMinion("Voidling", "MalzaharVoidling", "UncontrollablePet.lua", CastPos, TeamID ?? TEAM_CASTER, false, false, true, false, false, true, 0, default, false, Owner, default);
            Level = GetLevel(Owner);
            BonusDamage = Math(0 + (Level ?? 0), MO_MULTIPLY, 5);
            BonusHealth = Math(0 + (Level ?? 0), MO_MULTIPLY, 50);
            NextBuffVars.BonusHealth = BonusHealth;
            NextBuffVars.BonusDamage = BonusDamage;
            SpellBuffAdd(Owner, Other3, "AlZaharVoidling", 1, 1, 21, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
            SpellBuffAdd(Attacker, Attacker, "IfHasBuffCheck", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            SpellBuffRemove(Owner, "AlZaharSummonVoidling", Owner, default);
        });
        ManaCost = GetCastInfo(GetPARCost);
        MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        CurrHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        MaxHealthReturn = Math(0 + (MaxHealth ?? 0), MO_MULTIPLY, 0.2);
        MaxPAR = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        CurrPAR = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
        MaxPARReturn = Math(0 + (MaxPAR ?? 0), MO_MULTIPLY, 0.2);
        CurrentADDMana = Math(0 + (ManaCost ?? 0), MO_MULTIPLY, 0.1);
        CurrentADDHealth = Math(0 + (ManaCost ?? 0), MO_MULTIPLY, 0.1);
        CharVars.ManaToADD = Math(0 + (CharVars.ManaToADD ?? 0), MO_ADD, 0 + (CurrentADDMana ?? 0));
        CharVars.HealthToADD = Math(0 + (CharVars.HealthToADD ?? 0), MO_ADD, 0 + (CurrentADDHealth ?? 0));
        SpellName = GetCastInfo(GetSpellName);
        NextBuffVars.MoveSpeedMod = 0.3;
        If(SpellName, default, CO_EQUAL, default, "ViktorPowerTransfer", () => {
            SpellBuffAdd(Owner, Owner, "Haste", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        ElseIf(SpellName, default, CO_EQUAL, default, "HexMageCatalyst", () => {
            
        });
        ElseIf(SpellName, default, CO_EQUAL, default, "HexMageChaosCharge", () => {
            
        });
        ElseIf(SpellName, default, CO_EQUAL, default, "HexMageChaoticStorm", () => {
            
        });
        Else(() => {
            
        });
        SpellCastName = GetCastInfo(GetSpellName);
        If(SpellCastName, default, CO_EQUAL, default, "SwainBeam", () => {
            PlayAnimation("Spell1", 0, Owner, false, true, false);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "pickacardlock", () => {
            If(this.Frozen, default, CO_NOT_EQUAL, default, 1, () => {
                SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
                this.Frozen = 1;
            });
        });
        ElseIf(SpellName, default, CO_EQUAL, default, "redcardlock", () => {
            If(this.Frozen, default, CO_NOT_EQUAL, default, 1, () => {
                displayDuration = GetBuffRemainingDuration(Owner, "PickACard");
                SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
                this.Frozen = 1;
                SpellBuffAdd(Owner, Owner, "RedCardPreAttack", 1, 1, 0 + (displayDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                this.removeParticle = false;
                SpellBuffRemove(Owner, "Pickacard_tracker", Owner, 0);
                SetAutoAcquireTargets(Owner, false);
            });
        });
        ElseIf(SpellName, default, CO_EQUAL, default, "goldcardlock", () => {
            If(this.Frozen, default, CO_NOT_EQUAL, default, 1, () => {
                displayDuration = GetBuffRemainingDuration(Owner, "PickACard");
                SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
                this.Frozen = 1;
                SpellBuffAdd(Owner, Owner, "GoldCardPreAttack", 1, 1, 0 + (displayDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                this.removeParticle = false;
                SpellBuffRemove(Owner, "Pickacard_tracker", Owner, 0);
                SetAutoAcquireTargets(Owner, false);
            });
        });
        ElseIf(SpellName, default, CO_EQUAL, default, "bluecardlock", () => {
            If(this.Frozen, default, CO_NOT_EQUAL, default, 1, () => {
                displayDuration = GetBuffRemainingDuration(Owner, "PickACard");
                SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
                this.Frozen = 1;
                SpellBuffAdd(Owner, Owner, "BlueCardPreAttack", 1, 1, 0 + (displayDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                this.removeParticle = false;
                SpellBuffRemove(Owner, "Pickacard_tracker", Owner, 0);
                SetAutoAcquireTargets(Owner, false);
            });
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            Attacker = SetBuffCasterUnit();
            IfHasBuff(Attacker, Attacker, "ForcePulseCanCast", () => {
                
            });
            Else(() => {
                SpellBuffAdd(Attacker, Attacker, "ForcePulseCounter", 6, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, default, default, default);
            });
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            Attacker = SetBuffCasterUnit();
            IfHasBuff(Attacker, Attacker, "ForcePulseCanCast", () => {
                
            });
            Else(() => {
                SpellBuffAdd(Attacker, Attacker, "ForcePulseCounter", 6, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
            });
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_NOT_EQUAL, default, "HideInShadows", () => {
            If(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, true, () => {
                this.WillRemove = true;
                SpellBuffRemoveCurrent(Owner);
            });
            ElseIf(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, false, () => {
                
            });
            ElseIf(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
                this.WillRemove = true;
                SpellBuffRemoveCurrent(Owner);
            });
        });
        this.TimeLastHit = GetTime();
        ID = PushCharacterFade(Owner, 1, default, ID);
        this.WillFade = true;
        SpellBuffRemove(Owner, "HideInShadows", Owner, default);
        SpellBuffRemoveCurrent(Owner);
        If(SpellName, default, CO_NOT_EQUAL, default, "ShadowWalk", () => {
            If(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, true, () => {
                this.WillRemove = true;
            });
            ElseIf(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, false, () => {
                
            });
            ElseIf(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
                this.WillRemove = true;
            });
        });
        Name = GetCastInfo(GetSpellName);
        If(Name, default, CO_EQUAL, default, "RivenIzunaBlade", () => {
            SpellEffectRemove(this.Temp2);
            SpellEffectCreate(this.Temp2, default, "exile_ult_blade_swap_base.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_2", default, Owner, "BUFFBONE_GLB_WEAPON_2", default, false, false, false, false, false, default, default);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "RivenMartyr", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SpellBuffAdd(Owner, Owner, "RivenMartyr", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(SpellName, default, CO_EQUAL, default, "RivenFengShuiEngine", () => {
            AttackDamage = GetTotalAttackDamage(Owner);
            BaseAD = GetStat(GetBaseAttackDamage, Owner);
            AttackDamage = Math(0 + (AttackDamage ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
            PassiveAD = Math(0.6, MO_MULTIPLY, 0 + (AttackDamage ?? 0));
            BonusBaseAD = Math(0.12, MO_MULTIPLY, 0 + (BaseAD ?? 0));
            PassiveAD = Math(0.6, MO_ADD, 0 + (BonusBaseAD ?? 0));
            SetBuffToolTipVar(2, 0 + (PassiveAD ?? 0));
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, true, () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "RivenPassiveAABoost", 3, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "ShyvanaFireballDragon", () => {
            FuryRemaining = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
            If(FuryRemaining, default, CO_LESS_THAN_OR_EQUAL, default, 3, () => {
                IncPAR(Owner, 3);
            });
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            SpellBuffAdd(Owner, Owner, "UdyrMonkeyAgilityBuff", 3, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, default, default);
        });
        this.TimeLastHit = GetTime();
        ID = PushCharacterFade(Owner, 1, default, ID);
        this.WillFade = true;
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "Ravage", () => {
            NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
            NextBuffVars.TeamID = this.TeamID;
            NextBuffVars.BreakDamage = 0;
            SpellBuffAdd(Owner, Owner, "WasStealthed", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(SpellName, default, CO_EQUAL, default, "HateSpike", () => {
            NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
            NextBuffVars.TeamID = this.TeamID;
            NextBuffVars.BreakDamage = 0;
            SpellBuffAdd(Owner, Owner, "WasStealthed", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(SpellName, default, CO_NOT_EQUAL, default, "ShadowWalk", () => {
            If(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, true, () => {
                this.WillRemove = true;
            });
            ElseIf(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, false, () => {
                
            });
            ElseIf(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
                this.WillRemove = true;
            });
        });
        CastSlot = GetCastInfo(GetSpellSlot);
        If(CastSlot, default, CO_EQUAL, default, 3, () => {
            TeamID = GetTeamID(default);
            Deployed = false;
            ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf AffectUntargetable ", 1, true, "OrianaGhost", (Unit) => {
                Deployed = true;
                TargetPos = GetUnitPosition(Unit);
                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                    IsStealth = GetStatus(Owner, GetStealthed);
                    If(IsStealth, default, CO_EQUAL, default, false, () => {
                        SpellEffectCreate(this.Particle, default, "OrianaVacuumIndicator_ally.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, "spinnigtopridge", TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
                        CharVars.UltimateType = 0;
                        CharVars.UltimateTargetPos = TargetPos;
                    });
                    Else(() => {
                        SpellEffectCreate(this.Particle, default, "OrianaVacuumIndicatorSelfNoRing.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, "root", TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
                        SpellEffectCreate(this.Particle, default, "OrianaVacuumIndicatorSelfRing.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, "root", TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
                        CharVars.UltimateType = 1;
                        CharVars.UltimateTargetPos = TargetPos;
                    });
                });
                Else(() => {
                    SpellEffectCreate(this.Particle, default, "OrianaVacuumIndicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, "spinnigtopridge", TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
                    CharVars.UltimateType = 1;
                    CharVars.UltimateTargetPos = TargetPos;
                });
            });
            If(Deployed, default, CO_EQUAL, default, false, () => {
                IfHasBuff(Owner, Nothing, "OriannaBallTracker", () => {
                    TargetPos = CharVars.BallPosition;
                    SpellEffectCreate(this.Particle, default, "OrianaVacuumIndicatorSelfNoRing.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, "root", TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
                    SpellEffectCreate(this.Particle, default, "OrianaVacuumIndicatorSelfRing.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, "root", TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
                    CharVars.UltimateType = 5;
                    CharVars.UltimateTargetPos = TargetPos;
                });
                Else(() => {
                    TargetPos = GetPointByUnitFacingOffset(Owner, 0, 0);
                    SpellEffectCreate(this.Particle, default, "OrianaVacuumIndicatorSelfNoRing.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "spinnigtopridge", TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
                    SpellEffectCreate(this.Particle, default, "OrianaVacuumIndicatorSelfRing.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, "root", TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
                    CharVars.UltimateType = 3;
                    CharVars.UltimateTargetPos = TargetPos;
                });
            });
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "gragasbarrelrolltoggle", () => {
            SpellBuffRemoveCurrent(Owner);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "UrgotHeatseekingMissile", () => {
            Count = GetBuffCountFromAll(Owner, "UrgotHeatseekingAmmo");
            If(Count, default, CO_EQUAL, default, 4, () => {
                ExecutePeriodicallyReset(this.LastTimeExecuted);
            });
        });
        PopCharacterFade(Owner, this.ID);
        SetStatus(Owner, default, SetStealthed);
        SpellBuffRemove(Owner, "TalonShadowAssaultBuff", Owner, 0);
        SpellSlot = GetCastInfo(GetSpellSlot);
        If(SpellSlot, default, CO_EQUAL, default, 3, () => {
            CharVars.BarrageCounter = Math(0 + (CharVars.BarrageCounter ?? 0), MO_ADD, 1);
        });
        SpellSlot = GetCastInfo(GetSpellSlot);
        SpellName = GetCastInfo(GetSpellName);
        DebugSay(Owner, "YOshield", SpellName);
        If(SpellSlot, default, CO_EQUAL, default, 3, () => {
            IfHasBuff(Owner, Owner, "KarmaOneMantraParticle", () => {
                SpellBuffRemove(Owner, "KarmaOneMantraParticle", Owner, 0);
            });
            IfHasBuff(Owner, Owner, "KarmaTwoMantraParticle", () => {
                SpellBuffRemove(Owner, "KarmaTwoMantraParticle", Owner, 0);
                SpellBuffAdd(Owner, Owner, "KarmaOneMantraParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            If(SpellSlot, default, CO_EQUAL, default, 2, () => {
                CooldownStat = GetStat(GetPercentCooldownMod, Owner);
                BaseCooldown = 10;
                Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
                NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (BaseCooldown ?? 0));
                SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                SpellBuffRemoveStacks(Owner, Owner, "KarmaChakra", 1);
            });
            ElseIf(SpellSlot, default, CO_EQUAL, default, 1, () => {
                CooldownStat = GetStat(GetPercentCooldownMod, Owner);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                BaseCooldown = this.VALUE_BY_LEVEL;
                Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
                NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (BaseCooldown ?? 0));
                SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                SpellBuffRemoveStacks(Owner, Owner, "KarmaChakra", 1);
            });
            ElseIf(SpellSlot, default, CO_EQUAL, default, 0, () => {
                CooldownStat = GetStat(GetPercentCooldownMod, Owner);
                BaseCooldown = 6;
                Multiplier = Math(1, MO_ADD, 0 + (CooldownStat ?? 0));
                NewCooldown = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (BaseCooldown ?? 0));
                SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                SpellBuffRemoveStacks(Owner, Owner, "KarmaChakra", 1);
            });
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, true, () => {
            
        });
        Else(() => {
            SpellBuffRemoveCurrent(Owner);
        });
        If(SpellVars.CastingBreaksStealth, default, CO_NOT_EQUAL, default, false, () => {
            this.TimeLastHit = GetTime();
            this.ID = PushCharacterFade(Owner, 1, default, this.ID);
            this.WillFade = true;
            this.BuffAdded = false;
            SetStatus(Owner, default, SetStealthed);
        });
        ElseIf(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            this.TimeLastHit = GetTime();
            this.ID = PushCharacterFade(Owner, 1, default, this.ID);
            this.WillFade = true;
            this.BuffAdded = false;
            SetStatus(Owner, default, SetStealthed);
        });
        If(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, false, () => {
            
        });
        ElseIf(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        If(SpellVars.CastingBreaksStealth, default, CO_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        ElseIf(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        SpellName = GetCastInfo(GetSpellName);
        If(SpellName, default, CO_EQUAL, default, "TwoShivPoison", () => {
            If(Owner, default, CO_IS_TARGET_IN_FRONT_OF_ME, Target, default, () => {
                If(Target, default, CO_IS_TARGET_BEHIND_ME, Owner, default, () => {
                    SpellBuffAdd(Owner, Owner, "CastFromBehind", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, true, () => {
            
        });
        Else(() => {
            If(this.CooldownResevoir, default, CO_GREATER_THAN, default, 0, () => {
                SpellEffectCreate(KillMe_, default, "TearoftheGoddess_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
                CharVars.TearBonusMana = Math(0 + (CharVars.TearBonusMana ?? 0), MO_ADD, 4);
                CharVars.TearBonusMana = Math(0 + (CharVars.TearBonusMana ?? 0), MO_MIN, 1000);
                this.CooldownResevoir = Math(-1, MO_ADD, 0 + (this.CooldownResevoir ?? 0));
            });
        });
    }
    public void BuffOnPreDealDamage()
    {
        #region VarDecl
        Object? Level = null;
        float? DamageAmount = null;
        float? DrainHealth = null;
        float? DrainMana = null;
        string? TargetName = null;
        long? DamageMultiplier = null;
        Object? percentLeech = null;
        float? ShieldAmount = null;
        AttackableUnit? Caster = null;
        TeamId? teamID = null;
        float? HealAmount = null;
        float? Temp1 = null;
        float? manaRestore = null;
        float? DrainCandidate = null;
        Object? LevelMultiplier = null;
        #endregion
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    If(default, DAMAGESOURCE_SPELL, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
                        Level = GetLevel(Owner);
                        NextBuffVars.TickDamage = this.VALUE_BY_LEVEL;
                        NextBuffVars.attackSpeedMod = this.VALUE_BY_LEVEL;
                        If(Owner, default, CO_IS_RANGED, default, default, () => {
                            NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                        });
                        Else(() => {
                            IfHasBuff(Owner, Nothing, "JudicatorRighteousFury", () => {
                                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                            });
                            Else(() => {
                                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                            });
                        });
                        SpellBuffAdd(Attacker, Target, "Burning", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 1, true, false, false, default);
                        SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
                    });
                    If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
                        Level = GetLevel(Owner);
                        NextBuffVars.TickDamage = this.VALUE_BY_LEVEL;
                        NextBuffVars.attackSpeedMod = this.VALUE_BY_LEVEL;
                        If(Owner, default, CO_IS_RANGED, default, default, () => {
                            NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                        });
                        Else(() => {
                            IfHasBuff(Owner, Nothing, "JudicatorRighteousFury", () => {
                                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                            });
                            Else(() => {
                                NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
                            });
                        });
                        SpellBuffAdd(Attacker, Target, "Burning", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 1, true, false, false, default);
                        SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
                    });
                });
            });
        });
        If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.2);
        });
        If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.3);
        });
        ElseIf(default, DAMAGESOURCE_INTERNALRAW, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.65);
            });
        });
        If(this.DrainedBool, default, CO_NOT_EQUAL, default, true, () => {
            DrainHealth = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (this.DrainPercent ?? 0));
            IncHealth(Attacker, 0 + (DrainHealth ?? 0), Attacker);
            this.DrainedBool = true;
        });
        If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
            If(this.DrainedBool, default, CO_NOT_EQUAL, default, true, () => {
                DrainHealth = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (this.DrainPercent ?? 0));
                IncHealth(Attacker, 0 + (DrainHealth ?? 0), Attacker);
                DrainMana = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (this.ManaDrainPercent ?? 0));
                IncPAR(Owner, 0 + (DrainMana ?? 0));
                this.DrainedBool = true;
            });
        });
        TargetName = GetUnitSkinName(Target);
        DamageMultiplier = 1.5;
        If(TargetName, default, CO_EQUAL, default, "OdinChaosGuardian", () => {
            DamageMultiplier = 1;
        });
        If(TargetName, default, CO_EQUAL, default, "OdinOrderGuardian", () => {
            DamageMultiplier = 1;
        });
        If(TargetName, default, CO_EQUAL, default, "OdinNeutralGuardian", () => {
            DamageMultiplier = 1;
        });
        DamageAmount = Math(0 + (DamageMultiplier ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        TargetName = GetUnitSkinName(Target);
        If(TargetName, default, CO_NOT_EQUAL, default, "OdinChaosGuardian", () => {
            If(TargetName, default, CO_NOT_EQUAL, default, "OdinOrderGuardian", () => {
                If(TargetName, default, CO_NOT_EQUAL, default, "OdinNeutralGuardian", () => {
                    If(TargetName, default, CO_NOT_EQUAL, default, "OdinShrineBomb", () => {
                        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.4);
                    });
                });
            });
        });
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.1);
        Level = GetLevel(Owner);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            percentLeech = this.VALUE_BY_LEVEL;
        });
        Else(() => {
            percentLeech = this.VALUE_BY_LEVEL;
        });
        ShieldAmount = Math(0 + (percentLeech ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        IncPAR(Owner, 0 + (ShieldAmount ?? 0));
        Caster = SetBuffCasterUnit();
        Level = GetLevel(Owner);
        percentLeech = this.VALUE_BY_LEVEL;
        If(Caster, default, CO_NOT_EQUAL, Owner, default, () => {
            If(this.Count, default, CO_EQUAL, default, 0, () => {
                ShieldAmount = Math(0 + (percentLeech ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                IncPAR(Owner, 0 + (ShieldAmount ?? 0));
                this.Count = 1;
            });
        });
        Else(() => {
            If(Target, default, CO_IS_NOT_AI, default, default, () => {
                ShieldAmount = Math(0 + (percentLeech ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                IncPAR(Owner, 0 + (ShieldAmount ?? 0));
                this.count = 1;
            });
        });
        If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
            If(this.DoOnce, default, CO_EQUAL, default, false, () => {
                Level = GetLevel(Owner);
                percentLeech = this.VALUE_BY_LEVEL;
                ShieldAmount = Math(0 + (percentLeech ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                IncPAR(Owner, 0 + (ShieldAmount ?? 0));
                IncHealth(Owner, 0 + (DamageAmount ?? 0), Owner);
                this.DoOnce = true;
            });
        });
        If(this.Count, default, CO_EQUAL, default, 0, () => {
            Level = GetLevel(Owner);
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                percentLeech = this.VALUE_BY_LEVEL;
            });
            Else(() => {
                percentLeech = this.VALUE_BY_LEVEL;
            });
            ShieldAmount = Math(0 + (percentLeech ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
            IncPAR(Owner, 0 + (ShieldAmount ?? 0));
            this.Count = 1;
        });
        Caster = SetBuffCasterUnit();
        Level = GetLevel(Owner);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            percentLeech = this.VALUE_BY_LEVEL;
        });
        Else(() => {
            percentLeech = this.VALUE_BY_LEVEL;
        });
        If(Caster, default, CO_NOT_EQUAL, Owner, default, () => {
            If(this.Count, default, CO_EQUAL, default, 0, () => {
                ShieldAmount = Math(0 + (percentLeech ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                IncPAR(Owner, 0 + (ShieldAmount ?? 0));
                this.Count = 1;
            });
        });
        Else(() => {
            If(Target, default, CO_IS_NOT_AI, default, default, () => {
                ShieldAmount = Math(0 + (percentLeech ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                IncPAR(Owner, 0 + (ShieldAmount ?? 0));
                this.count = 1;
            });
            ElseIf(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                ShieldAmount = Math(0.3 + (percentLeech ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                IncPAR(Owner, 0 + (ShieldAmount ?? 0));
                this.count = 1;
            });
        });
        If(this.Count, default, CO_EQUAL, default, 0, () => {
            Level = GetLevel(Owner);
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                percentLeech = this.VALUE_BY_LEVEL;
            });
            Else(() => {
                percentLeech = this.VALUE_BY_LEVEL;
            });
            ShieldAmount = Math(0 + (percentLeech ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
            IncPAR(Owner, 0 + (ShieldAmount ?? 0));
            this.Count = 1;
        });
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        teamID = GetTeamID(default);
        Caster = GetChampionBySkinName("MonkeyKing", teamID ?? TEAM_UNKNOWN);
        ApplyDamage(Caster, Target, 0 + (DamageAmount ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Caster);
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
                    If(Target, default, CO_DIFFERENT_TEAM, Owner, default, () => {
                        SpellEffectCreate(Particle, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
                        HealAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (this.HealPercent ?? 0));
                        ForEachUnitInTargetArea(Owner, Owner, 350, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", default, true, (Unit) => {
                            Temp1 = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
                            If(Temp1, default, CO_LESS_THAN, default, 1, () => {
                                IncHealth(Unit, 0 + (HealAmount ?? 0), Owner);
                                ApplyAssistMarker(Owner, Unit, 10);
                            });
                            SpellEffectCreate(Particle2, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, false, false, false, false, false, default, default);
                        });
                    });
                });
            });
        });
        If(this.hasDealtDamage, default, CO_EQUAL, default, false, () => {
            If(default, DAMAGESOURCE_PROC, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    teamID = GetTeamID(default);
                    Caster = SetBuffCasterUnit();
                    SpellEffectCreate(a, default, "soraka_infuse_ally_tar.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, true, default, default, false, false, default, default);
                    SpellEffectCreate(a, default, "soraka_infuse_ally_tar.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Caster, default, default, Attacker, default, default, true, default, default, false, false, default, default);
                    manaRestore = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.65);
                    IncPAR(Owner, 0 + (manaRestore ?? 0));
                    this.hasDealtDamage = true;
                });
            });
        });
        If(DamageType, default, CO_EQUAL, default, PHYSICAL_DAMAGE, () => {
            DrainHealth = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (this.DrainPercent ?? 0));
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                DrainHealth = Math(0 + (DrainHealth ?? 0), MO_MULTIPLY, 4);
            });
            DrainCandidate = Math(0 + (this.MaxDrain ?? 0), MO_SUBTRACT, 0 + (this.DrainAmount ?? 0));
            DrainHealth = Math(0 + (DrainHealth ?? 0), MO_MIN, 0 + (DrainCandidate ?? 0));
            DrainHealth = Math(0 + (DrainHealth ?? 0), MO_MAX, 0);
            IncHealth(Attacker, 0 + (DrainHealth ?? 0), Attacker);
            this.DrainCount = Math(0 + (this.DrainCount ?? 0), MO_ADD, 1);
            this.DrainAmount = Math(0 + (this.DrainAmount ?? 0), MO_ADD, 0 + (DrainHealth ?? 0));
        });
        SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IfHasBuff(Target, Target, "VolibearHatred", () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.01);
        });
        IfHasBuff(Target, Attacker, "VolibearHatredZilean", () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 1.01);
        });
        If(DamageType, default, CO_NOT_EQUAL, default, TRUE_DAMAGE, () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.85);
        });
        If(this.DrainedBool, default, CO_NOT_EQUAL, default, true, () => {
            DrainHealth = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (this.DrainPercent ?? 0));
            IncHealth(Attacker, 0 + (DrainHealth ?? 0), Attacker);
            this.DrainedBool = true;
        });
        SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            If(default, DAMAGESOURCE_SPELL, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
                SpellBuffAdd(Owner, Target, "JackInTheBoxHardLock", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            ElseIf(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
                SpellBuffAdd(Owner, Target, "JackInTheBoxHardLock", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        Caster = SetBuffCasterUnit();
        Level = GetLevel(Owner);
        percentLeech = this.VALUE_BY_LEVEL;
        If(Caster, default, CO_NOT_EQUAL, Owner, default, () => {
            If(this.Count, default, CO_EQUAL, default, 0, () => {
                ShieldAmount = Math(0 + (percentLeech ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                IncPAR(Owner, 0 + (ShieldAmount ?? 0));
                this.Count = 1;
            });
        });
        Else(() => {
            If(Target, default, CO_IS_NOT_AI, default, default, () => {
                ShieldAmount = Math(0 + (percentLeech ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                IncPAR(Owner, 0 + (ShieldAmount ?? 0));
                this.count = 1;
            });
        });
        IfHasBuff(Target, Owner, "PoppyDITarget", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            LevelMultiplier = this.VALUE_BY_LEVEL;
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (LevelMultiplier ?? 0));
        });
    }
    public void BuffOnSpellHit()
    {
        #region VarDecl
        AttackableUnit? Caster = null;
        TeamId? teamID = null;
        AttackableUnit? Attacker = null;
        float? Dmg = null;
        float? ThirdDA = null;
        Object? Level = null;
        TeamId? TeamID = null;
        Champion? Other1 = null;
        #endregion
        NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
        Caster = SetBuffCasterUnit();
        If(Caster, default, CO_NOT_EQUAL, Target, default, () => {
            this.WillRemove = true;
            SpellBuffAdd(Owner, Target, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        If(this.BreakDamage, default, CO_GREATER_THAN, default, 0, () => {
            ApplyDamage(Owner, Target, 0 + (this.BreakDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                teamID = GetTeamID(default);
                Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
                SpellBuffAdd(Attacker, Target, "UrAniumRoundsHit", 25, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
                IfHasBuff(Owner, Attacker, "UpgradeSlow", () => {
                    SpellEffectCreate(faas, default, "AbsoluteZero_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
                });
            });
        });
        this.BonusArmor = Math(0 + (this.BonusArmor ?? 0), MO_ADD, 0.143);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                teamID = GetTeamID(default);
                Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
                SpellBuffAdd(Attacker, Target, "UrAniumRoundsHit", 50, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
                SpellEffectCreate(asdf, default, "TiamatMelee_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
                Dmg = GetTotalAttackDamage(Owner);
                ForEachUnitInTargetArea(Owner, Target, 210, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                    If(Target, default, CO_NOT_EQUAL, Unit, default, () => {
                        ThirdDA = Math(0.4, MO_MULTIPLY, 0 + (Dmg ?? 0));
                        ApplyDamage(Attacker, Unit, 0 + (ThirdDA ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
                    });
                });
            });
        });
        Level = this.Level;
        TeamID = GetTeamID(default);
        Other1 = GetChampionBySkinName("Galio", TeamID ?? TEAM_UNKNOWN);
        BreakSpellShields(Target);
        ApplyDamage(Other1, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Other1);
        SpellEffectCreate(HitVFX, default, "galio_windTunnel_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, false, false, default, default);
        Attacker = SetBuffCasterUnit();
        IfHasBuff(Target, Attacker, "SealFateMissile", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Attacker, Target, "SealFateMissile", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            BreakSpellShields(Target);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            ApplyDamage(Attacker, Target, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.65, 1, false, false, Attacker);
        });
    }
    public void BuffOnTakeDamage()
    {
        #region VarDecl
        TeamId? teamID = null;
        Minion? Other1 = null;
        string? AttackerSkinName = null;
        long? DamageMultiplier = null;
        TeamId? AttackerTeam = null;
        float? DamageAmount = null;
        float? HP_Percent = null;
        float? MaxHealth = null;
        float? DamagePercent = null;
        float? PercentDamage = null;
        float? HealthPercent = null;
        float? curHealth = null;
        AttackableUnit? Caster = null;
        int? Count = null;
        float? Duration = null;
        TeamId? TeamID = null;
        float? Level = null;
        float? HealingAmount = null;
        float? APStat = null;
        float? BonusHeal = null;
        Object? HealingMod = null;
        Object? HealAmount = null;
        float? HealTotal = null;
        AttackableUnit? Attacker = null;
        Object? CD = null;
        float? NewCD = null;
        Fade? ID = null;
        Object? Cooldown = null;
        float? NewCooldown = null;
        TeamId? TeamIDAttacker = null;
        TeamId? TeamIDCaster = null;
        float? SunlightDamage = null;
        bool? Sunglasses = null;
        #endregion
        If(default, DAMAGESOURCE_PERIODIC, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        If(default, DAMAGESOURCE_PERIODIC, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            this.WillRemove = true;
        });
        If(default, DAMAGESOURCE_PERIODIC, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            this.WillRemove = true;
        });
        teamID = GetTeamID(default);
        Other1 = SpawnMinion("RunToMe", "TestCube", "idle.lua", Owner, teamID ?? TEAM_UNKNOWN, false, false, false, true, false, true, 0, default, true, Nothing, default);
        SpellBuffAdd(Owner, Other1, "DisconnectTarget", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.WillRemove = true;
        AttackerSkinName = GetUnitSkinName(Attacker);
        DamageMultiplier = 1;
        IfHasBuff(Attacker, Attacker, "OdinGuardianBuff", () => {
            AttackerTeam = GetTeamID(default);
            If(AttackerTeam, default, CO_NOT_EQUAL, default, TEAM_NEUTRAL, () => {
                DamageMultiplier = this.DamageTakenFromGuardian ?? 0;
            });
        });
        DamageAmount = Math(0 + (DamageMultiplier ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        If(default, DAMAGESOURCE_PERIODIC, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            this.WillRemove = true;
        });
        SpellBuffAdd(Owner, Owner, "OdinCombatActive", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemoveStacks(Owner, Owner, "OdinGuardianRegen", 0);
        this.PreviousTakeDamageTime = GetGameTime();
        this.TotalDamageOT = Math(0 + (this.TotalDamageOT ?? 0), MO_ADD, 0 + (DamageAmount ?? 0));
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            HP_Percent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
            MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            DamagePercent = Math(0 + (this.TotalDamageOT ?? 0), MO_DIVIDE, 0 + (MaxHealth ?? 0));
            If(HP_Percent, default, CO_LESS_THAN_OR_EQUAL, default, 0.4, () => {
                SpellBuffAdd(Owner, Attacker, "OdinScoreLowHPAttacker", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                If(DamagePercent, default, CO_GREATER_THAN, default, 0.2, () => {
                    SpellBuffAdd(Owner, Owner, "OdinScoreLowHP", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                IfHasBuff(Owner, Owner, "OdinScoreLowHP", () => {
                    SpellBuffAdd(Owner, Owner, "OdinScoreLowHP", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        If(default, DAMAGESOURCE_PERIODIC, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            this.WillRemove = true;
        });
        PercentDamage = Math(0 + (DamageAmount ?? 0), MO_DIVIDE, 0 + (this.TowerHP ?? 0));
        If(PercentDamage, default, CO_GREATER_THAN_OR_EQUAL, default, 0.01, () => {
            SpellBuffAdd(Owner, Owner, "OdinGuardianUIDamage", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "OdinGuardianUIDamageChaos", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        this.TotalDamageOT = Math(0 + (this.TotalDamageOT ?? 0), MO_ADD, 0 + (DamageAmount ?? 0));
        HP_Percent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
        MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        DamagePercent = Math(0 + (this.TotalDamageOT ?? 0), MO_DIVIDE, 0 + (MaxHealth ?? 0));
        If(HP_Percent, default, CO_LESS_THAN_OR_EQUAL, default, 0.4, () => {
            SpellBuffAdd(Owner, Attacker, "OdinScoreLowHPAttacker", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            If(DamagePercent, default, CO_GREATER_THAN, default, 0.2, () => {
                SpellBuffAdd(Owner, Owner, "OdinScoreLowHP", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            IfHasBuff(Owner, Owner, "OdinScoreLowHP", () => {
                SpellBuffAdd(Owner, Owner, "OdinScoreLowHP", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        If(default, DAMAGESOURCE_PERIODIC, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            this.WillRemove = true;
        });
        IfNotHasBuff(Owner, Owner, "LeblancPassiveCooldown", () => {
            HealthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
            If(HealthPercent, default, CO_LESS_THAN_OR_EQUAL, default, 0.4, () => {
                SpellBuffAdd(Owner, Owner, "LeblancMIApplicator", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SpellBuffAdd(Owner, Owner, "LeblancPassiveCooldown", 1, 1, 60, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
        SpellBuffRemoveCurrent(Owner);
        SpellBuffAdd(Owner, Owner, "AdrenalineRushDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
            curHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
            If(curHealth, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
                Caster = SetBuffCasterUnit();
                this.removeParticle = false;
                NextBuffVars.MordekaiserParticle = this.MordekaiserParticle;
                SpellBuffAdd(Owner, Caster, "MordekaiserCOTGRevive", 1, 1, 30, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        this.BrushChecks = 0;
        Caster = SetBuffCasterUnit();
        If(Caster, default, CO_EQUAL, Attacker, default, () => {
            Count = GetBuffCountFromCaster(Attacker, Attacker, "SkarnerFracture");
            Duration = GetBuffRemainingDuration(Owner, "SkarnerFractureMissile");
            TeamID = GetTeamID(default);
            SpellBuffClear(Owner, "SkarnerFractureMissile");
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            HealingAmount = this.VALUE_BY_LEVEL;
            APStat = GetStat(GetFlatMagicDamageMod, Attacker);
            BonusHeal = Math(0 + (APStat ?? 0), MO_MULTIPLY, 0.3);
            HealingAmount = Math(0 + (HealingAmount ?? 0), MO_ADD, 0 + (BonusHeal ?? 0));
            Level = Count;
            Level = Math(0 + (Level ?? 0), MO_ADD, 1);
            HealingMod = this.VALUE_BY_LEVEL;
            HealingAmount = Math(0 + (HealingAmount ?? 0), MO_MULTIPLY, 0 + (HealingMod ?? 0));
            SpellEffectCreate(MotaExplosion, default, "Skarner_Fracture_Tar_Consume.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
            IncHealth(Attacker, 0 + (HealingAmount ?? 0), Attacker);
            SpellEffectCreate(HealVFX, default, "galio_bulwark_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, false, Attacker, default, default, Attacker, default, default, true, false, false, false, false, default, default);
            SpellBuffAdd(Attacker, Attacker, "SkarnerFracture", 8, 1, 0 + (Duration ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        });
        If(default, DAMAGESOURCE_PERIODIC, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetTriggerUnit(Target);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            IfHasBuff(Target, Target, "IsNinja", () => {
                HealAmount = Math(0 + (this.LifeReturn ?? 0), MO_ADD, 0 + (this.NinjaBonus ?? 0));
            });
            Else(() => {
                HealAmount = this.LifeReturn;
            });
            HealTotal = Math(0 + (HealAmount ?? 0), MO_MULTIPLY, 0 + (DamageAmount ?? 0));
            Caster = SetBuffCasterUnit();
            IncHealth(Target, 0 + (HealTotal ?? 0), Caster);
            SpellEffectCreate(default, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        If(Attacker, default, CO_IS_TYPE_AI, default, default, () => {
            Attacker = SetBuffCasterUnit();
            IfNotHasBuff(Attacker, Attacker, "ShenShadowDashCooldown", () => {
                SpellBuffAdd(Attacker, Attacker, "ShenShadowDashCooldown", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
                CD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellCooldownTime);
                If(CD, default, CO_GREATER_THAN, default, 0, () => {
                    NewCD = Math(0 + (CD ?? 0), MO_SUBTRACT, 1);
                    SetSlotSpellCooldownTimeVer2(0 + (NewCD ?? 0), 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker, default);
                });
            });
        });
        IfNotHasBuff(Owner, Owner, "DesperatePower", () => {
            HealthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
            If(HealthPercent, default, CO_LESS_THAN_OR_EQUAL, default, 0.4, () => {
                NextBuffVars.AddSpellDamage = CharVars.AddSpellDamage;
                SpellBuffAdd(Owner, Owner, "DesperatePower", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0.75, default, default, default, default);
            });
        });
        this.TimeLastHit = GetTime();
        ID = PushCharacterFade(Owner, 1, default, ID);
        this.WillFade = true;
        this.TimeLastHit = GetTime();
        ID = PushCharacterFade(Owner, 1, default, ID);
        this.WillFade = true;
        SpellBuffAdd(Owner, Owner, "ShadowWalkSpeedHolder", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        If(default, DAMAGESOURCE_PERIODIC, CO_DAMAGE_SOURCETYPE_IS_NOT, default, default, () => {
            this.WillRemove = true;
        });
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            IncPAR(Owner, 20);
            SpellEffectCreate(default, default, "Infuse_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 0.5);
                SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
            });
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 0.5);
                SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
            });
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 0.5);
                SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
            });
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 0.5);
                SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
            });
        });
        Else(() => {
            If(default, 0.25, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                IncPAR(Owner, 20);
                SpellEffectCreate(default, default, "Infuse_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                    NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 0.5);
                    SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
                });
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                    NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 0.5);
                    SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
                });
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                    NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 0.5);
                    SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
                });
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                    NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 0.5);
                    SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
                });
            });
        });
        If(Attacker, default, CO_IS_TYPE_HERO, default, true, () => {
            Caster = SetBuffCasterUnit();
            If(Caster, default, CO_NOT_EQUAL, Attacker, default, () => {
                TeamIDAttacker = GetTeamID(default);
                TeamIDCaster = GetTeamID(default);
                If(TeamIDAttacker, default, CO_EQUAL, TeamIDCaster, default, () => {
                    Level = GetLevel(Caster);
                    SunlightDamage = this.VALUE_BY_LEVEL;
                    Sunglasses = TestUnitAttributeFlag(Owner, HAS_SUNGLASSES);
                    If(Sunglasses, default, CO_EQUAL, default, true, () => {
                        SunlightDamage = Math(0 + (SunlightDamage ?? 0), MO_SUBTRACT, 1);
                    });
                    this.Attacker1 = Attacker;
                    this.TeamIDAttacker = TeamIDAttacker;
                    SpellEffectCreate(MotaExplosion, default, "LeonaPassive_tar.troy", default, TeamIDAttacker ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
                    SpellBuffClear(Owner, "LeonaSunlight");
                    ApplyDamage(Attacker, Owner, 0 + (SunlightDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
                    SpellBuffRemoveCurrent(Owner);
                });
            });
        });
        Caster = SetBuffCasterUnit();
        If(Attacker, default, CO_EQUAL, Caster, default, () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0 + (this.AmpValue ?? 0));
        });
    }
    public void BuffOnHeal()
    {
        #region VarDecl
        float? EffectiveHeal = null;
        float? PercentHeal = null;
        int? Count = null;
        float? bonusHealPercent = null;
        float? healRatio = null;
        #endregion
        IfHasBuff(Owner, Owner, "Internal_50MS", () => {
            If(Health, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
                EffectiveHeal = Math(0 + (Health ?? 0), MO_MULTIPLY, 0.5);
                SetReturnValue(EffectiveHeal);
            });
        });
        If(Health, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            EffectiveHeal = Math(0 + (Health ?? 0), MO_MULTIPLY, 0.8);
            SetReturnValue(EffectiveHeal);
        });
        IfHasBuff(Target, Target, "OdinCombatActive", () => {
            If(Target, default, CO_NOT_EQUAL, Owner, default, () => {
                SpellBuffAdd(Owner, Owner, "OdinCombatActive", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        If(Health, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            EffectiveHeal = Math(0 + (Health ?? 0), MO_MULTIPLY, 0.8);
            SetReturnValue(EffectiveHeal);
        });
        If(Owner, default, CO_SAME_TEAM, Target, default, () => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                If(Target, default, CO_NOT_EQUAL, Owner, default, () => {
                    If(EffectiveHeal, default, CO_GREATER_THAN_OR_EQUAL, default, 30, () => {
                        IfHasBuff(Owner, Owner, "OdinScoreLowHP", () => {
                            SpellBuffAdd(Owner, Target, "OdinScoreArchAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                        Else(() => {
                            SpellBuffAdd(Owner, Target, "OdinScoreAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        PercentHeal = Math(0 + (Health ?? 0), MO_DIVIDE, 0 + (this.TowerHP ?? 0));
        If(PercentHeal, default, CO_GREATER_THAN, default, 0.01, () => {
            SpellBuffAdd(Owner, Owner, "OdinGuardianUIDamageOrder", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Owner, default, CO_SAME_TEAM, Target, default, () => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                If(Target, default, CO_NOT_EQUAL, Owner, default, () => {
                    SpellBuffAdd(Owner, Target, "OdinScoreAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    IfHasBuff(Owner, Owner, "OdinScoreLowHP", () => {
                        SpellBuffAdd(Owner, Target, "OdinScoreArchAngel", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
        });
        If(Health, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            EffectiveHeal = Math(0 + (Health ?? 0), MO_MULTIPLY, 0.5);
            SetReturnValue(EffectiveHeal);
        });
        If(Health, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            Count = GetBuffCountFromAll(Owner, "VladimirTidesofBloodCost");
            bonusHealPercent = Math(0 + (Count ?? 0), MO_MULTIPLY, 0.08);
            healRatio = Math(0 + (bonusHealPercent ?? 0), MO_ADD, 1);
            EffectiveHeal = Math(0 + (healRatio ?? 0), MO_MULTIPLY, 0 + (Health ?? 0));
            SetReturnValue(EffectiveHeal);
        });
        If(Health, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            EffectiveHeal = Math(0 + (Health ?? 0), MO_MULTIPLY, 0);
            SetReturnValue(EffectiveHeal);
        });
        If(Health, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            EffectiveHeal = Math(0 + (Health ?? 0), MO_MULTIPLY, 0);
            SetReturnValue(EffectiveHeal);
        });
        If(Health, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            EffectiveHeal = Math(0 + (Health ?? 0), MO_MULTIPLY, 0);
            SetReturnValue(EffectiveHeal);
        });
        If(this.HasHealed, default, CO_EQUAL, default, true, () => {
            If(Health, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
                EffectiveHeal = Math(0 + (Health ?? 0), MO_MULTIPLY, 0);
                SetReturnValue(EffectiveHeal);
            });
        });
        If(Health, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            EffectiveHeal = Math(0 + (Health ?? 0), MO_MULTIPLY, 0);
            SetReturnValue(EffectiveHeal);
        });
        If(this.HasHealed, default, CO_EQUAL, default, true, () => {
            If(Health, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
                EffectiveHeal = Math(0 + (Health ?? 0), MO_MULTIPLY, 0);
                SetReturnValue(EffectiveHeal);
            });
        });
        If(this.HasHealed, default, CO_EQUAL, default, true, () => {
            If(Health, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
                EffectiveHeal = Math(0 + (Health ?? 0), MO_MULTIPLY, 0);
                SetReturnValue(EffectiveHeal);
            });
        });
        If(Health, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            If(Owner, default, CO_EQUAL, Target, default, () => {
                EffectiveHeal = Math(0 + (Health ?? 0), MO_MULTIPLY, 1.15);
                SetReturnValue(EffectiveHeal);
            });
        });
        SetReturnValue(default);
        SetReturnValue(default);
        SetReturnValue(default);
    }
    public void UpdateBuffs()
    {
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorIncrease ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncFlatArmorMod, Owner, 0 + (this.ArmorIncrease ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
        IncStat(IncPercentAttackSpeedMod, Owner, 0 + (this.AttackSpeedMod ?? 0));
        IncStat(IncPercentMovementSpeedMod, Owner, 0 + (this.MoveSpeedMod ?? 0));
    }
    public void SelfExecute()
    {
        #region VarDecl
        Object? Level = null;
        TeamId? TeamOfOwner = null;
        TeamId? TeamOfTarget = null;
        Object? SlotName = null;
        Vector3? CastPos = null;
        Vector3? OwnerPos = null;
        float? Distance = null;
        float? OwnerLevel = null;
        float? BonusMana = null;
        float? TotalMana = null;
        float? SecondaryMana = null;
        float? BonusHealth = null;
        int? Count = null;
        string? SkinName = null;
        float? BonusArmor = null;
        float? TotalMR = null;
        Vector3? TargetPos = null;
        TeamId? TeamID = null;
        float? Duration = null;
        float? FinalDamage = null;
        Object? name = null;
        Object? name1 = null;
        Object? name2 = null;
        Object? name3 = null;
        Object? name4 = null;
        Object? name5 = null;
        Vector3? CastPosition = null;
        TeamId? CasterID = null;
        Region? asdf = null;
        Minion? Other2 = null;
        Object? BaseDamage = null;
        bool? IsStealthed = null;
        bool? CanSee = null;
        Vector3? Pos = null;
        Minion? Other3 = null;
        Region? BubbleID = null;
        float? MoveSpeed = null;
        float? dashSpeed = null;
        float? BonusAD = null;
        float? DamageVar = null;
        Vector3? TeleportPos = null;
        bool? HasHitTarget = null;
        Object? DamageToDeal = null;
        Vector3? DamagePoint = null;
        TeamId? teamID = null;
        Vector3? Beam1 = null;
        Vector3? Beam3 = null;
        Minion? Other1 = null;
        Object? baseDamageBlock = null;
        float? AbilityPower = null;
        float? DamageBlock = null;
        Object? ArmorAmount = null;
        Object? BuffDuration = null;
        float? TotalArmorAmount = null;
        Vector3? NearestAvailablePos = null;
        float? Distance2 = null;
        Vector3? Point1 = null;
        Vector3? Point2 = null;
        Vector3? Point3 = null;
        float? SlashSpeed = null;
        float? MaxHP = null;
        Object? MaxStacks = null;
        Object? Level4BonusHP = null;
        float? NumFound = null;
        float? minDuration = null;
        float? durationRemaining = null;
        float? AbilityPowerBonus = null;
        float? BonusDamage = null;
        float? remainingDuration = null;
        bool? Result = null;
        float? HealthCost = null;
        float? Temp1 = null;
        float? ArmorDamage = null;
        int? MalphiteSkinID = null;
        Object? ProcDamage = null;
        double? RatioVar = null;
        bool? ChampionHit = null;
        Vector3? FacePos = null;
        float? ReductionPerc = null;
        Object? CooldownTime = null;
        float? EnergyRefunds = null;
        Vector3? OwnerFacing = null;
        Object? ManaCost = null;
        Object? HealthPercent = null;
        float? AbilityPowerRatio = null;
        float? HealthPercentPerTick = null;
        float? CooldownPerc = null;
        Object? CurrentCD = null;
        float? AvailChamps = null;
        bool? FoundFirstPos = null;
        Vector3? FirstPos = null;
        Vector3? LastPos = null;
        Object? JumpTarget = null;
        float? JumpTargetHealth_ = null;
        float? UnitHealth_ = null;
        float? APMod = null;
        float? HealthToInc = null;
        float? MaxHealth = null;
        float? HealthDamage = null;
        float? HMCSStartTime = null;
        float? HMCSCurrTime = null;
        float? RemainingBuffTime = null;
        bool? HasTarget = null;
        Vector3? CenterPos = null;
        float? DtD = null;
        Object? PercentByLevel = null;
        float? DtDReal = null;
        float? CurrentHP = null;
        float? PercentDmg = null;
        float? WeaponDmg = null;
        float? WeaponDmgBonus = null;
        Vector3? TargetPosStart = null;
        Vector3? TargetPosEnd = null;
        Object? dist = null;
        float? PhysPreMod = null;
        float? AbilityPowerPostMod = null;
        Object? ShieldAmount = null;
        Object? ShieldBonus = null;
        float? BonusShield = null;
        float? Shield = null;
        Vector3? Pos1 = null;
        Vector3? Pos2 = null;
        Vector3? Pos3 = null;
        float? Damage = null;
        float? Count2 = null;
        float? TotalDamage = null;
        float? ExtraCost = null;
        float? Health = null;
        float? HealthLoss = null;
        long? GravityVar = null;
        long? SpeedVar = null;
        Object? ExplosionDamage = null;
        float? Multiplier = null;
        float? CurrentHealth = null;
        int? ownerskinid = null;
        Object? DamageTick = null;
        float? maxHP = null;
        long? baseHP = null;
        long? healthPerLevel = null;
        float? levelHealth = null;
        float? totalBaseHealth = null;
        float? totalBonusHealth = null;
        float? HealthMod = null;
        Object? HealLevel = null;
        float? HealAmount = null;
        float? BaseMS = null;
        float? BonusMS = null;
        float? TotalAD = null;
        float? BaseAD = null;
        bool? fired = null;
        float? CDReduction = null;
        Object? BaseCD = null;
        float? LowerCD = null;
        float? NewCD = null;
        long? MaxRange = null;
        bool? LockOn = null;
        bool? IsMoving = null;
        Vector3? LeadPos = null;
        Vector3? CheckPos = null;
        bool? CanMove = null;
        bool? Pathable = null;
        Object? Iter = null;
        Object? LineWidth = null;
        Object? halfLength = null;
        Vector3? FacingPoint = null;
        Vector3? PointToSpawn = null;
        Vector3? PointToFace = null;
        float? DashSpeed = null;
        float? CooldownMod = null;
        float? DebuffTime = null;
        Vector3? Point4 = null;
        Vector3? Point5 = null;
        Object? BaseBurn = null;
        float? SelfAP = null;
        float? APBonus = null;
        float? RagePercent = null;
        long? FuryGainIncrement = null;
        float? FuryGain = null;
        float? WeaponDamage = null;
        Object? RangeVar = null;
        bool? ShouldHit = null;
        bool? Visible = null;
        float? APAmount = null;
        float? AP = null;
        float? APDamage = null;
        float? StartingDamage = null;
        long? CastRange = null;
        bool? Deployed = null;
        bool? ShiftWithoutMissile = null;
        Vector3? LeftPoint = null;
        Vector3? RightPoint = null;
        float? LeftDistance = null;
        float? RightDistance = null;
        long? CurrentType = null;
        bool? ValidTarget = null;
        Vector3? OldPos = null;
        Vector3? NewPos = null;
        long? CheckDistance = null;
        Vector3? JumpBuffer = null;
        Vector3? Skip = null;
        Vector3? StartPos = null;
        Vector3? EndPos = null;
        Object? BaseHeal = null;
        float? FinalHeal = null;
        long? Homed = null;
        float? DistanceObjs = null;
        Object? VolibearRCharges = null;
        double? ADRatio = null;
        float? DamageAmount = null;
        float? currentFury = null;
        Object? baseHeal = null;
        Object? HealthPerFury = null;
        float? HealthToRestore = null;
        float? SpellPower = null;
        float? AbilityPowerMod = null;
        float? furyToRemove = null;
        Object? baseAbilityDamage = null;
        float? totalDamage = null;
        float? baseDamage = null;
        float? bonusDamage = null;
        float? abilityPower = null;
        TeamId? OwnerTeam = null;
        Object? Iterations = null;
        Vector3? targetPos = null;
        Object? TickAmount = null;
        int? BarrageCount = null;
        float? par = null;
        Object? InitialHeatCost = null;
        Object? FirstCost = null;
        Object? SecondCost = null;
        float? CDRMod = null;
        int? AnnieSkinID = null;
        float? APPreMod = null;
        float? APPostMod = null;
        Vector3? PushbackPos = null;
        float? YorickAD = null;
        float? CastArmor = null;
        float? CastMR = null;
        float? DefTotal = null;
        float? FinalSlow = null;
        long? NewCooldown = null;
        #endregion
        ForNClosestUnitsInTargetArea(Owner, Owner, 3000, "AffectEnemies AffectNeutral AffectHeroes ", 1, true, default, (Unit) => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Unit, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 0, () => {
                IncSpellLevel(Unit, 0, SpellSlots);
            });
            SpellCast(Unit, Owner, default, default, false, 0, SpellSlots, 0, true, true, false, false, false, default);
        });
        SpellEffectCreate(ar, default, "summoner_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        IfHasBuff(Owner, Owner, "FortifyBuff", () => {
            SpellBuffRemove(Owner, "FortifyBuff", Owner, default);
        });
        SpellEffectCreate(ar, default, "summoner_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ForNClosestUnitsInTargetArea(Owner, Owner, 1800, "AffectEnemies AffectFriends AffectMinions AffectTurrets AffectUseable AffectWards ", 1, true, "OdinGuardianBuff", (Unit) => {
            If(AvatarVars.defensiveMastery, default, CO_EQUAL, default, 1, () => {
                NextBuffVars.Splash = true;
            });
            Else(() => {
                NextBuffVars.Splash = false;
            });
            TeamOfOwner = GetTeamID(default);
            TeamOfTarget = GetTeamID(default);
            IfHasBuff(Unit, Unit, "OdinGuardianBuff", () => {
                If(TeamOfOwner, default, CO_EQUAL, TeamOfTarget, default, () => {
                    SpellBuffAdd(Owner, Unit, default, 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invulnerability, 0, true, false, false, default);
                });
                Else(() => {
                    SpellBuffAdd(Owner, Unit, "SummonerOdinGarrisonDebuff", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invulnerability, 0, true, false, false, default);
                });
            });
            Else(() => {
                SlotName = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellName);
                If(SlotName, default, CO_EQUAL, default, "SummonerOdinGarrison", () => {
                    SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_SUMMONER, SpellSlots, 1);
                });
                Else(() => {
                    SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_SUMMONER, SpellSlots, 1);
                });
            });
        });
        CastPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, CastPos);
        FaceDirection(Owner, CastPos);
        If(Distance, default, CO_GREATER_THAN, default, 400, () => {
            CastPos = GetPointByUnitFacingOffset(Owner, 400, 0);
        });
        StopChanneling(Target, ChannelingStopCondition_Cancel, ChannelingStopSource_Move);
        SpellEffectCreate(p3, default, "summoner_flashback.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, CastPos, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(ar, default, "summoner_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(ar1, default, "summoner_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        IfHasBuff(Owner, Owner, "FlashBeenHit", () => {
            NextBuffVars.CastPos = CastPos;
            SpellBuffAdd(Owner, Owner, default, 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            TeleportToPosition(Owner, CastPos);
        });
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        OwnerLevel = GetLevel(Owner);
        BonusMana = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 30);
        TotalMana = Math(0 + (BonusMana ?? 0), MO_ADD, 160);
        If(AvatarVars.utilityMastery, default, CO_EQUAL, default, 1, () => {
            TotalMana = Math(0 + (TotalMana ?? 0), MO_MULTIPLY, 1.2);
        });
        SecondaryMana = Math(0 + (TotalMana ?? 0), MO_MULTIPLY, 0.5);
        ForEachUnitInTargetArea(Owner, Owner, 600, "AffectFriends AffectHeroes ", default, true, (Unit) => {
            SpellEffectCreate(CastParticle, default, "Summoner_Mana.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, false, false, false, false, false, default, default);
            If(Unit, default, CO_EQUAL, Owner, default, () => {
                IncPAR(Unit, 0 + (TotalMana ?? 0));
            });
            Else(() => {
                IncPAR(Unit, 0 + (SecondaryMana ?? 0));
            });
        });
        SpellEffectCreate(ar, default, "summoner_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        OwnerLevel = GetLevel(Owner);
        BonusHealth = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 75);
        BonusHealth = Math(0 + (BonusHealth ?? 0), MO_ADD, 200);
        NextBuffVars.BonusHealth = BonusHealth;
        ForNClosestUnitsInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions NotAffectSelf ", 1, true, "OdinSuperMinion", (Unit) => {
            IfHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                ForNClosestUnitsInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions NotAffectSelf ", 2, true, "OdinSuperMinion", (Unit) => {
                    IfHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                        Count = Math(0 + (Count ?? 0), MO_ADD, 1);
                        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
                            ForNClosestUnitsInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions NotAffectSelf ", 3, true, "OdinSuperMinion", (Unit) => {
                                IfHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                                    Count = Math(0 + (Count ?? 0), MO_MAX, 0);
                                    Count = Math(0 + (Count ?? 0), MO_ADD, 1);
                                    If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
                                        ForNClosestUnitsInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions NotAffectSelf ", 4, true, "OdinSuperMinion", (Unit) => {
                                            IfNotHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                                                SkinName = GetUnitSkinName(Unit);
                                                If(SkinName, default, CO_EQUAL, default, "OdinBlueSuperminion", () => {
                                                    SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                                                    SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                                                    IncHealth(Unit, 10000, Unit);
                                                });
                                                ElseIf(SkinName, default, CO_EQUAL, default, "OdinRedSuperminion", () => {
                                                    SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                                                    SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                                                    IncHealth(Unit, 10000, Unit);
                                                });
                                            });
                                        });
                                    });
                                });
                                IfNotHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                                    SkinName = GetUnitSkinName(Unit);
                                    If(SkinName, default, CO_EQUAL, default, "OdinBlueSuperminion", () => {
                                        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                                        SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                                        IncHealth(Unit, 10000, Unit);
                                    });
                                    ElseIf(SkinName, default, CO_EQUAL, default, "OdinRedSuperminion", () => {
                                        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                                        SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                                        IncHealth(Unit, 10000, Unit);
                                    });
                                });
                            });
                        });
                    });
                    IfNotHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                        SkinName = GetUnitSkinName(Unit);
                        If(SkinName, default, CO_EQUAL, default, "OdinBlueSuperminion", () => {
                            SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                            SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                            IncHealth(Unit, 10000, Unit);
                        });
                        ElseIf(SkinName, default, CO_EQUAL, default, "OdinRedSuperminion", () => {
                            SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                            SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                            IncHealth(Unit, 10000, Unit);
                        });
                    });
                });
            });
            IfNotHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                SkinName = GetUnitSkinName(Unit);
                If(SkinName, default, CO_EQUAL, default, "OdinBlueSuperminion", () => {
                    SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                    SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    IncHealth(Unit, 10000, Unit);
                });
                ElseIf(SkinName, default, CO_EQUAL, default, "OdinRedSuperminion", () => {
                    SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                    SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    IncHealth(Unit, 10000, Unit);
                });
            });
        });
        IfHasBuff(Owner, Owner, "PromoteBuff", () => {
            SpellBuffRemove(Owner, "PromoteBuff", Owner, default);
        });
        IfHasBuff(Owner, Owner, "OdinPlayerBuff", () => {
            OwnerLevel = GetLevel(Owner);
            BonusHealth = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 75);
            BonusHealth = Math(0 + (BonusHealth ?? 0), MO_ADD, 200);
            NextBuffVars.BonusHealth = BonusHealth;
            ForNClosestUnitsInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions NotAffectSelf ", 1, true, "OdinSuperMinion", (Unit) => {
                IfHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                    ForNClosestUnitsInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions NotAffectSelf ", 2, true, "OdinSuperMinion", (Unit) => {
                        IfHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                            Count = Math(0 + (Count ?? 0), MO_ADD, 1);
                            If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
                                ForNClosestUnitsInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions NotAffectSelf ", 3, true, "OdinSuperMinion", (Unit) => {
                                    IfHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                                        Count = Math(0 + (Count ?? 0), MO_MAX, 0);
                                        Count = Math(0 + (Count ?? 0), MO_ADD, 1);
                                        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
                                            ForNClosestUnitsInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions NotAffectSelf ", 4, true, "OdinSuperMinion", (Unit) => {
                                                IfNotHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                                                    SkinName = GetUnitSkinName(Unit);
                                                    If(SkinName, default, CO_EQUAL, default, "OdinBlueSuperminion", () => {
                                                        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                                                        SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                                                        IncHealth(Unit, 10000, Unit);
                                                    });
                                                    ElseIf(SkinName, default, CO_EQUAL, default, "OdinRedSuperminion", () => {
                                                        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                                                        SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                                                        IncHealth(Unit, 10000, Unit);
                                                    });
                                                });
                                            });
                                        });
                                    });
                                    IfNotHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                                        SkinName = GetUnitSkinName(Unit);
                                        If(SkinName, default, CO_EQUAL, default, "OdinBlueSuperminion", () => {
                                            SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                                            SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                                            IncHealth(Unit, 10000, Unit);
                                        });
                                        ElseIf(SkinName, default, CO_EQUAL, default, "OdinRedSuperminion", () => {
                                            SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                                            SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                                            IncHealth(Unit, 10000, Unit);
                                        });
                                    });
                                });
                            });
                        });
                        IfNotHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                            SkinName = GetUnitSkinName(Unit);
                            If(SkinName, default, CO_EQUAL, default, "OdinBlueSuperminion", () => {
                                SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                                SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                                IncHealth(Unit, 10000, Unit);
                            });
                            ElseIf(SkinName, default, CO_EQUAL, default, "OdinRedSuperminion", () => {
                                SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                                SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                                IncHealth(Unit, 10000, Unit);
                            });
                        });
                    });
                });
                IfNotHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                    SkinName = GetUnitSkinName(Unit);
                    If(SkinName, default, CO_EQUAL, default, "OdinBlueSuperminion", () => {
                        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                        SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        IncHealth(Unit, 10000, Unit);
                    });
                    ElseIf(SkinName, default, CO_EQUAL, default, "OdinRedSuperminion", () => {
                        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, false, false, false, false, default, default);
                        SpellBuffAdd(Attacker, Unit, default, 1, 1, 3600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        IncHealth(Unit, 10000, Unit);
                    });
                });
            });
        });
        Else(() => {
            OwnerLevel = GetLevel(Owner);
            BonusHealth = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 100);
            BonusHealth = Math(0 + (BonusHealth ?? 0), MO_ADD, 100);
            NextBuffVars.BonusHealth = BonusHealth;
            BonusArmor = Math(5, MO_MULTIPLY, 0 + (OwnerLevel ?? 0));
            BonusArmor = Math(0 + (BonusArmor ?? 0), MO_ADD, 20);
            NextBuffVars.BonusArmor = BonusArmor;
            TotalMR = Math(0.75, MO_MULTIPLY, 0 + (OwnerLevel ?? 0));
            TotalMR = Math(0 + (TotalMR ?? 0), MO_ADD, 10);
            NextBuffVars.TotalMR = TotalMR;
            ForNClosestUnitsInTargetArea(Attacker, Attacker, 1000, "AffectFriends AffectMinions AlwaysSelf ", 1, true, "PromoteMeBuff", (Unit) => {
                SpellBuffAdd(Attacker, Unit, "SummonerPromoteSR", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                SpellBuffRemove(Unit, "PromoteBuff", Owner, 0);
            });
        });
        TargetPos = GetCastSpellTargetPos();
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(ParticleID, ParticleID2, "ClairvoyanceEyeLong_green.troy", "ClairvoyanceEyeLong_red.troy", TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, false, false, false, false, default, default);
        NextBuffVars.ParticleID = ParticleID;
        NextBuffVars.ParticleID2 = ParticleID2;
        Duration = 4;
        If(AvatarVars.utilityMastery, default, CO_EQUAL, default, 1, () => {
            Duration = Math(2, MO_ADD, 0 + (Duration ?? 0));
        });
        NextBuffVars.Bubble = AddPosPerceptionBubble(TeamID, 1400, TargetPos, 0 + (Duration ?? 0), Nothing, false);
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 0 + (Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(a, default, "OdynsVeil_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        FinalDamage = Math(200, MO_ADD, 0 + (CharVars.StoredDamage ?? 0));
        ForEachUnitInTargetArea(Owner, Owner, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyDamage(Attacker, Unit, 0 + (FinalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        CharVars.StoredDamage = 0;
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "odynsveil", () => {
            SetSlotSpellCooldownTimeVer2(90, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name1, default, CO_EQUAL, default, "odynsveil", () => {
            SetSlotSpellCooldownTimeVer2(90, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name2, default, CO_EQUAL, default, "odynsveil", () => {
            SetSlotSpellCooldownTimeVer2(90, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name3, default, CO_EQUAL, default, "odynsveil", () => {
            SetSlotSpellCooldownTimeVer2(90, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name4, default, CO_EQUAL, default, "odynsveil", () => {
            SetSlotSpellCooldownTimeVer2(90, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name5, default, CO_EQUAL, default, "odynsveil", () => {
            SetSlotSpellCooldownTimeVer2(90, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        SpellEffectCreate(ar, default, "spectral_fury_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "OdinEntropicClaymore", () => {
            SetSlotSpellCooldownTimeVer2(60, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name1, default, CO_EQUAL, default, "OdinEntropicClaymore", () => {
            SetSlotSpellCooldownTimeVer2(60, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name2, default, CO_EQUAL, default, "OdinEntropicClaymore", () => {
            SetSlotSpellCooldownTimeVer2(60, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name3, default, CO_EQUAL, default, "OdinEntropicClaymore", () => {
            SetSlotSpellCooldownTimeVer2(60, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name4, default, CO_EQUAL, default, "OdinEntropicClaymore", () => {
            SetSlotSpellCooldownTimeVer2(60, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name5, default, CO_EQUAL, default, "OdinEntropicClaymore", () => {
            SetSlotSpellCooldownTimeVer2(60, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        OwnerPos = GetUnitPosition(Owner);
        CastPosition = GetCastSpellTargetPos();
        CasterID = GetTeamID(default);
        SpellEffectCreate(SmokeBomb1, default, "leBlanc_displacement_cas_ult.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, default, default, default);
        Distance = DistanceBetweenPoints(OwnerPos, CastPosition);
        If(Distance, default, CO_GREATER_THAN, default, 600, () => {
            FaceDirection(Owner, CastPosition);
            CastPosition = GetPointByUnitFacingOffset(Owner, 600, 0);
        });
        NextBuffVars.SilenceDuration = this.VALUE_BY_LEVEL;
        NextBuffVars.OwnerPos = OwnerPos;
        NextBuffVars.CastPosition = CastPosition;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_EQUAL, default, 1, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.AEDamage = this.VALUE_BY_LEVEL;
        });
        ElseIf(Level, default, CO_EQUAL, default, 2, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.AEDamage = this.VALUE_BY_LEVEL;
        });
        Else(() => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.AEDamage = this.VALUE_BY_LEVEL;
        });
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "LeblancSlideMoveM", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "LeblancSlideWallFixM", 1, 1, 3.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        OwnerPos = GetUnitPosition(Owner);
        CastPosition = GetCastSpellTargetPos();
        CasterID = GetTeamID(default);
        SpellEffectCreate(SmokeBomb1, default, "leBlanc_displacement_cas.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, default, default, default);
        Distance = DistanceBetweenPoints(OwnerPos, CastPosition);
        If(Distance, default, CO_GREATER_THAN, default, 600, () => {
            FaceDirection(Owner, CastPosition);
            CastPosition = GetPointByUnitFacingOffset(Owner, 600, 0);
        });
        TeamOfOwner = GetTeamID(default);
        NextBuffVars.AEDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.SilenceDuration = this.VALUE_BY_LEVEL;
        NextBuffVars.OwnerPos = OwnerPos;
        NextBuffVars.CastPosition = CastPosition;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "LeblancSlideMove", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "LeblancSlideWallFix", 1, 1, 3.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        asdf = AddPosPerceptionBubble(TeamID, 250, TargetPos, 1, Nothing, false);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        FaceDirection(Owner, TargetPos);
        Other2 = SpawnMinion("k", "TestCubeRender10Vision", "idle.lua", TargetPos, TeamID ?? TEAM_NEUTRAL, true, true, false, true, true, true, 1, default, true, Attacker, default);
        SpellBuffAdd(Attacker, Other2, "MaokaiSapling2", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Owner, Other2, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + (Level ?? 0), false, false, false, false, false, default);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "MaokaiDrain3", Owner, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.DefenseBonus = this.VALUE_BY_LEVEL;
        NextBuffVars.CCReduction = this.VALUE_BY_LEVEL;
        NextBuffVars.ManaCost = this.VALUE_BY_LEVEL;
        NextBuffVars.BaseDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.BonusCap = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "MaokaiDrain3", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 650, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 600, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        BaseDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.partname, default, "maoki_trunkSmash_cas.troy", default, TeamOfOwner ?? TEAM_NEUTRAL, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, default, default, default, default, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffRemove(Unit, "MaokaiTrunkLine", Owner, default);
        });
        ForEachUnitInTargetArea(Owner, Owner, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            IfNotHasBuff(Unit, Owner, "MaokaiTrunkLine", () => {
                IsStealthed = GetStatus(Unit, GetStealthed);
                If(IsStealthed, default, CO_EQUAL, default, false, () => {
                    SpellBuffAdd(Owner, Unit, "MaokaiTrunkLine", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Unit);
                    SpellEffectCreate(A, default, "PowerballHit.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, default, default, default, default);
                    ApplyDamage(Attacker, Unit, 0 + (BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
                    SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, true, false, default);
                    SpellBuffAdd(Attacker, Unit, "MaokaiTrunkLineStun", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                });
                Else(() => {
                    If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                        SpellBuffAdd(Owner, Unit, "MaokaiTrunkLine", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        BreakSpellShields(Unit);
                        SpellEffectCreate(A, default, "PowerballHit.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, default, default, default, default);
                        ApplyDamage(Attacker, Unit, 0 + (BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
                        SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, true, false, default);
                        SpellBuffAdd(Attacker, Unit, "MaokaiTrunkLineStun", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                    });
                    Else(() => {
                        CanSee = CanSeeTarget(Owner, Unit);
                        If(CanSee, default, CO_EQUAL, default, true, () => {
                            SpellBuffAdd(Owner, Unit, "MaokaiTrunkLine", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                            BreakSpellShields(Unit);
                            SpellEffectCreate(A, default, "PowerballHit.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, default, default, default, default);
                            ApplyDamage(Attacker, Unit, 0 + (BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
                            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, true, false, default);
                            SpellBuffAdd(Attacker, Unit, "MaokaiTrunkLineStun", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        IfHasBuff(Owner, Owner, "PoisonTrail", () => {
            SpellBuffRemove(Owner, "PoisonTrail", Owner, 0);
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 1);
        });
        Else(() => {
            Pos = GetUnitPosition(Owner);
            NextBuffVars.LastPosition = Pos;
            NextBuffVars.DamagePerTick = this.VALUE_BY_LEVEL;
            NextBuffVars.ManaCost = 13;
            SpellBuffAdd(Owner, Owner, "PoisonTrail", 1, 1, 20000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        TeamID = GetTeamID(default);
        CastPos = GetCastSpellTargetPos();
        Other2 = SpawnMinion("k", "SpellBook1", "idle.lua", CastPos, TeamID ?? TEAM_NEUTRAL, true, true, false, false, true, false, 0, default, true, Nothing, default);
        NextBuffVars.Duration = this.VALUE_BY_LEVEL;
        NextBuffVars.SlowPercent = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Other2, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1 + (NextBuffVars.Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = TargetPos;
        TeamOfOwner = GetTeamID(default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, false, 0, false, true, Owner, default);
        NextBuffVars.StunDuration = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Other3, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0.1, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        BubbleID = AddPosPerceptionBubble(TeamOfOwner, 300, TargetPos, 1, Nothing, false);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, default, true, Owner, default);
        NextBuffVars.DamageAmount = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 1.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.FlurryScalar = 0.7;
        NextBuffVars.MonkTotalDamage = MonkTotalDamage;
        SpellBuffAdd(Target, Target, default, 1, 1, 0.58, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            ForNClosestUnitsInTargetArea(Owner, Owner, 2000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 2, true, "BlindMonkQOne", (Unit) => {
                IfHasBuff(Unit, Owner, "BlindMonkQOne", () => {
                    SpellBuffRemove(Unit, "BlindMonkQOne", Owner, 0);
                    OwnerPos = GetUnitPosition(Owner);
                    SpellEffectCreate(p3, default, "blindMonk_Q_resonatingStrike_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
                    TargetPos = GetUnitPosition(Unit);
                    MoveSpeed = GetStat(GetMovementSpeed, Owner);
                    dashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 1350);
                    Distance = DistanceBetweenObjects("Owner", "Unit");
                    NextBuffVars.TargetPos = TargetPos;
                    NextBuffVars.Distance = Distance;
                    NextBuffVars.dashSpeed = dashSpeed;
                    BaseDamage = this.VALUE_BY_LEVEL;
                    BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
                    BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.9);
                    DamageVar = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusAD ?? 0));
                    NextBuffVars.DamageVar = DamageVar;
                    SpellBuffAdd(Unit, Owner, "BlindMonkQTwoDash", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
                    SpellBuffClear(Owner, "BlindMonkQManager");
                });
            });
        });
        Else(() => {
            ForNClosestUnitsInTargetArea(Owner, Owner, 2000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 2, true, "BlindMonkQOneChaos", (Unit) => {
                IfHasBuff(Unit, Owner, "BlindMonkQOneChaos", () => {
                    SpellBuffRemove(Unit, "BlindMonkQOneChaos", Owner, 0);
                    OwnerPos = GetUnitPosition(Owner);
                    SpellEffectCreate(p3, default, "blindMonk_Q_resonatingStrike_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
                    TargetPos = GetUnitPosition(Unit);
                    MoveSpeed = GetStat(GetMovementSpeed, Owner);
                    dashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 1350);
                    Distance = DistanceBetweenObjects("Owner", "Unit");
                    NextBuffVars.TargetPos = TargetPos;
                    NextBuffVars.Distance = Distance;
                    NextBuffVars.dashSpeed = dashSpeed;
                    BaseDamage = this.VALUE_BY_LEVEL;
                    BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
                    BonusAD = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 0.9);
                    DamageVar = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusAD ?? 0));
                    NextBuffVars.DamageVar = DamageVar;
                    SpellBuffAdd(Unit, Owner, "BlindMonkQTwoDash", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
                    SpellBuffClear(Owner, "BlindMonkQManager");
                });
            });
        });
        ForNClosestUnitsInTargetArea(Owner, Owner, 400, "AffectEnemies AffectHeroes ", 1, true, "BlindMonkRMarker", (Unit) => {
            TargetPos = GetCastSpellTargetPos();
            TeamID = GetTeamID(default);
            Other2 = SpawnMinion("TestMinion", "TestCubeRender", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, true, false, false, false, true, 0, default, true, Nothing, default);
            SpellBuffAdd(Other2, Other2, "BlindMonkRNewMinion", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            FaceDirection(Unit, TargetPos);
            TeleportPos = GetPointByUnitFacingOffset(Unit, 100, 180);
            TeleportToPosition(Owner, TeleportPos);
            OwnerPos = GetUnitPosition(Owner);
            SpellCast(Owner, Unit, TargetPos, TargetPos, true, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, false, OwnerPos);
        });
        NextBuffVars.TotalArmor = this.VALUE_BY_LEVEL;
        NextBuffVars.LifestealPercent = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "BlindMonkWManager", () => {
            SpellBuffRemove(Owner, "BlindMonkWManager", Owner, default);
        });
        HasHitTarget = false;
        CasterID = GetTeamID(default);
        BaseDamage = this.VALUE_BY_LEVEL;
        BonusAD = GetStat(GetFlatPhysicalDamageMod, Owner);
        DamageToDeal = Math(0 + (BonusAD ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        SpellEffectCreate(this.partname, default, "blindMonk_thunderCrash_impact_cas.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", Owner, Target, default, default, true, default, default, false, false, default, default);
        SpellEffectCreate(this.partname, default, "blindMonk_thunderCrash_impact_02.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", Owner, Target, default, default, true, default, default, false, false, default, default);
        SpellEffectCreate(this.partname, default, "blindMonk_E_cas.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_hand", Owner, Target, default, default, true, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "SharedWardBuff", false, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, default, 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            SpellEffectCreate(aoehit, default, "blindMonk_thunderCrash_impact_unit_tar.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            SpellEffectCreate(aoehit, default, "blindMonk_E_thunderCrash_tar.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            SpellEffectCreate(aoehit, default, "blindMonk_E_thunderCrash_unit_tar_blood.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            HasHitTarget = true;
        });
        If(HasHitTarget, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Owner, Owner, "BlindMonkEManager", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        OwnerPos = GetUnitPosition(Owner);
        ForEachUnitInTargetArea(Owner, Owner, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "BlindMonkEOne", true, (Unit) => {
            SpellCast(Owner, Unit, default, default, true, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, OwnerPos);
        });
        IfHasBuff(Owner, Owner, "BlindMonkEManager", () => {
            SpellBuffRemove(Owner, "BlindMonkEManager", Owner, default);
        });
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "Bloodscent_internal", () => {
            SpellBuffRemove(Owner, "BloodScent_internal", Owner, 0);
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "BloodScent_internal", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        DamagePoint = GetPointByUnitFacingOffset(Owner, 1650, 0);
        TeamID = GetTeamID(default);
        ForEachUnitInTargetRectangle(Owner, DamagePoint, 100, 1700, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", true, default, (Unit) => {
            BreakSpellShields(Unit);
            IfHasBuff(Unit, Attacker, "LuxIlluminatingFraulein", () => {
                TeamID = GetTeamID(default);
                ApplyDamage(Attacker, Unit, 0 + (CharVars.IlluminateDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                SpellEffectCreate(MotaExplosion, default, "LuxPassive_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, default, default, default);
                SpellBuffRemove(Unit, "LuxIlluminatingFraulein", Attacker, default);
            });
            SpellEffectCreate(asdf, default, "LuxMaliceCannon_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, default, default, default);
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
            If(Unit, default, CO_IS_NOT_TURRET, default, default, () => {
                SpellBuffAdd(Owner, Unit, "LuxIlluminatingFraulein", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
        TargetPos = GetCastSpellTargetPos();
        teamID = GetTeamID(default);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        Beam1 = GetPointByUnitFacingOffset(Owner, 145, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 3300, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", Beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 450, default, false, Owner, default);
        Other3 = SpawnMinion("hiu", "TestCube", "idle.lua", Beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 450, default, false, Owner, default);
        LinkVisibility(Other1, Other3);
        SpellBuffAdd(Attacker, Other1, "LuxMaliceCannonDeathFix", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Other3, "LuxMaliceCannonDeathFix", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other1, Owner, "LuxMaliceCannonPartFix", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other1, Owner, "LuxMaliceCannonPartFix2", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other1, Other3, "LuxMaliceCannonBeam", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other1, Other1, "LuxMaliceCannonBall", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        DamagePoint = GetPointByUnitFacingOffset(Owner, 1650, 0);
        SpellEffectCreate(default, default, "LuxMaliceCannon_beammiddle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, DamagePoint, Nothing, default, default, false, default, default, default, default, default, default);
        TargetPos = GetCastSpellTargetPos();
        SetCameraPosition("Owner", TargetPos);
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.DamageRank = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "Pantheon_GrandSkyfall_Fall", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 2, true, false, false, default);
        IfNotHasBuff(Owner, Owner, "Pantheon_AegisShield2", () => {
            IfNotHasBuff(Owner, Owner, "Pantheon_AegisShield", () => {
                SpellBuffAdd(Owner, Owner, "Pantheon_Aegis_Counter", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Aura, 0, false, false, false, default);
                Count = GetBuffCountFromAll(Owner, "Pantheon_Aegis_Counter");
                If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 4, () => {
                    SpellBuffAdd(Owner, Owner, "Pantheon_AegisShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    SpellBuffClear(Owner, "Pantheon_Aegis_Counter");
                });
            });
        });
        TargetPos = GetCastSpellTargetPos();
        TargetPos = GetNearestPassablePosition(Owner, TargetPos);
        CharVars.TargetPos = TargetPos;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        FaceDirection(Owner, TargetPos);
        IfNotHasBuff(Owner, Owner, "Pantheon_AegisShield2", () => {
            IfNotHasBuff(Owner, Owner, "Pantheon_AegisShield", () => {
                SpellBuffAdd(Owner, Owner, "Pantheon_Aegis_Counter", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Aura, 0, false, false, false, default);
                Count = GetBuffCountFromAll(Owner, "Pantheon_Aegis_Counter");
                If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 4, () => {
                    SpellBuffAdd(Owner, Owner, "Pantheon_AegisShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    SpellBuffClear(Owner, "Pantheon_Aegis_Counter");
                });
            });
        });
        SpellBuffAdd(Owner, Owner, "Pantheon_AegisShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        IfNotHasBuff(Owner, Owner, "Pantheon_AegisShield2", () => {
            IfNotHasBuff(Owner, Owner, "Pantheon_AegisShield", () => {
                SpellBuffAdd(Owner, Owner, "Pantheon_Aegis_Counter", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Aura, 0, false, false, false, default);
                Count = GetBuffCountFromAll(Owner, "Pantheon_Aegis_Counter");
                If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 4, () => {
                    SpellBuffAdd(Owner, Owner, "Pantheon_AegisShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    SpellBuffClear(Owner, "Pantheon_Aegis_Counter");
                });
            });
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(hi1, default, "TaricHammerSmash_shatter.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.partname, default, "TaricHammerSmash_nova.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        NextBuffVars.DamageIncrease = this.VALUE_BY_LEVEL;
        NextBuffVars.AbilityPower = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 0, false, false, Attacker);
            SpellEffectCreate(shatterz, default, "Taric_GemStorm_Tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
        });
        SpellBuffAdd(Attacker, Attacker, "Radiance", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 1000, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 950, 0);
        });
        baseDamageBlock = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        BonusHealth = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.35);
        DamageBlock = Math(0 + (baseDamageBlock ?? 0), MO_ADD, 0 + (BonusHealth ?? 0));
        NextBuffVars.DamageBlock = DamageBlock;
        SpellBuffAdd(Attacker, Target, "LuxPrismaticWaveShieldSelf", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 3, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        NextBuffVars.SpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "GarenFastMove", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        NextBuffVars.SilenceDuration = this.VALUE_BY_LEVEL;
        NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemove(Owner, "LuxLightstrikeKugel", Owner, default);
        SpellBuffRemove(Owner, "GarenBladestorm", Owner, default);
        NextBuffVars.baseDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "GarenBladestormLeave");
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffAdd(Attacker, Owner, "GarenBladestorm", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        SetSlotSpellCooldownTimeVer2(1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        TeamID = GetTeamID(default);
        AbilityPower = GetStat(GetFlatMagicDamageMod, Attacker);
        ArmorAmount = this.VALUE_BY_LEVEL;
        NextBuffVars.DamageReduction = this.VALUE_BY_LEVEL;
        BuffDuration = this.VALUE_BY_LEVEL;
        AbilityPower = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.8);
        TotalArmorAmount = Math(0 + (AbilityPower ?? 0), MO_ADD, 0 + (ArmorAmount ?? 0));
        NextBuffVars.TotalArmorAmount = TotalArmorAmount;
        SpellEffectCreate(this.Particle, default, "garen_command_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "C_BUFFBONE_GLB_CENTER_LOC", default, Attacker, default, default, true, default, default, false, false, default, default);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 0 + (BuffDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(hi, default, "Shatter_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellBuffRemove(Owner, "ShatterSelfBonus", Owner, 0);
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "EmpowerTwo", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0);
        NextBuffVars.DamagePerStack = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Duration = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Owner, "ArmsmasterRelentlessMR", 1, 1, 0 + (Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellEffectCreate(AddPart, default, "Counterstrike_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffRemove(Owner, "CounterStrikeCanCast", Owner, default);
        SpellBuffAdd(Owner, Owner, "LeapStrikeSpeed", 1, 1, 0.35, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Count = GetBuffCountFromAll(Owner, "AhriTumble");
        If(Count, default, CO_EQUAL, default, 0, () => {
            SpellBuffAdd(Owner, Owner, "AhriTumble", 2, 2, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0.25, true, false, false, default);
            SetSlotSpellCooldownTimeVer2(0.75, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
            SetPARCostInc(Owner, 3, SpellSlots, -150, PAR_MANA);
        });
        ElseIf(Count, default, CO_EQUAL, default, 1, () => {
            SpellBuffRemoveStacks(Owner, Owner, "AhriTumble", 1);
        });
        ElseIf(Count, default, CO_EQUAL, default, 2, () => {
            SpellBuffRemoveStacks(Owner, Owner, "AhriTumble", 1);
            SetSlotSpellCooldownTimeVer2(0.75, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        });
        SpellEffectCreate(SmokeBomb, default, "Ahri_SpiritRush_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_GROUND_LOC", default, Owner, "BUFFBONE_GLB_GROUND_LOC", default, false, false, false, false, false, default, default);
        SpellEffectCreate(SmokeBomb, default, "Ahri_Orb_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, "BUFFBONE_GLB_WEAPON_1", default, false, false, false, false, false, default, default);
        OwnerPos = GetUnitPosition(Owner);
        TargetPos = GetCastSpellTargetPos();
        MoveSpeed = GetStat(GetMovementSpeed, Owner);
        dashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 1200);
        Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 500, () => {
            FaceDirection(Owner, TargetPos);
            TargetPos = GetPointByUnitFacingOffset(Owner, 500, 0);
            Distance = 500;
            NearestAvailablePos = GetNearestPassablePosition(Owner, TargetPos);
            Distance2 = DistanceBetweenPoints(NearestAvailablePos, TargetPos);
            If(Distance2, default, CO_GREATER_THAN, default, 25, () => {
                TargetPos = GetPointByUnitFacingOffset(Owner, 600, 0);
                Distance = 600;
            });
        });
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.Distance = Distance;
        NextBuffVars.dashSpeed = dashSpeed;
        SpellBuffAdd(Owner, Owner, "AhriTumbleKick", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell2", 0.71, Owner, false, true, true);
        TeamID = GetTeamID(default);
        SpellEffectCreate(VarA, default, "Ahri_FoxFire_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(VarA, default, "Ahri_FoxFire_weapon_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "BUFFBONE_GLB_WEAPON_1", default, Target, "BUFFBONE_GLB_WEAPON_1", default, true, false, false, false, false, default, default);
        Point1 = GetPointByUnitFacingOffset(Owner, 150, 45);
        Point2 = GetPointByUnitFacingOffset(Owner, 150, 165);
        Point3 = GetPointByUnitFacingOffset(Owner, 150, 285);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        SpellCast(Attacker, Attacker, default, default, true, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, Point1);
        SpellCast(Attacker, Attacker, default, default, true, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, Point2);
        SpellCast(Attacker, Attacker, default, default, true, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, Point3);
        SpellBuffAdd(Attacker, Target, "AhriFoxFire", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "AhriFoxFireMissile", 3, 3, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "AhriFoxFireMissileTwo", () => {
            SpellBuffClear(Owner, "AhriFoxFireMissileTwo");
        });
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        FaceDirection(Owner, TargetPos);
        TargetPos = GetPointByUnitFacingOffset(Owner, 900, 0);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 1000, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 950, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 4, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.Damage = this.VALUE_BY_LEVEL;
        OwnerPos = GetUnitPosition(Owner);
        MoveSpeed = GetStat(GetMovementSpeed, Owner);
        SlashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 1000);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        Duration = Math(0 + (Distance ?? 0), MO_DIVIDE, 0 + (SlashSpeed ?? 0));
        NextBuffVars.SlashSpeed = SlashSpeed;
        NextBuffVars.StunDuration = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 0 + (Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "UnstoppableForceMarker", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        Level = GetCastInfo(GetCastSpellLevelPlusOne);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other2 = SpawnMinion("k", "TestCubeRender", "idle.lua", TargetPos, TeamID ?? TEAM_NEUTRAL, true, true, false, false, true, true, 0, default, true, Attacker, default);
        SetStatus(Other2, default, SetNoRender);
        IfHasBuff(Owner, Owner, "UpgradeBuff", () => {
            SpellCast(Owner, Other2, TargetPos, TargetPos, false, 3, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, default);
        });
        Else(() => {
            SpellCast(Owner, Other2, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, default);
        });
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions ", "H28GEvolutionTurret", true, (Unit) => {
            IfHasBuff(Unit, Attacker, "H28GEvolutionTurret", () => {
                SpellBuffAdd(Attacker, Unit, "UpgradeSlow", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                MaxHP = GetPAROrHealth(Unit, GetMaxHealth, PAR_MANA);
                IncHealth(Unit, 0 + (MaxHP ?? 0), Attacker);
            });
        });
        SpellBuffAdd(Attacker, Attacker, "UpgradeBuff", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemove(Owner, "HeimerdingerTurretReady", Owner, 0);
        MaxStacks = this.VALUE_BY_LEVEL;
        Level4BonusHP = this.VALUE_BY_LEVEL;
        NumFound = 0;
        minDuration = 25000;
        Other2 = SetUnit(Owner);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions ", "H28GEvolutionTurret", true, (Unit) => {
            NumFound = Math(0 + (NumFound ?? 0), MO_ADD, 1);
            durationRemaining = GetBuffRemainingDuration(Unit, "H28GEvolutionTurret");
            If(durationRemaining, default, CO_LESS_THAN, minDuration, default, () => {
                minDuration = durationRemaining;
                InvalidateUnit(Other2);
                Other2 = SetUnit(Unit);
            });
        });
        If(NumFound, default, CO_GREATER_THAN_OR_EQUAL, MaxStacks, default, () => {
            If(Owner, default, CO_NOT_EQUAL, Other2, default, () => {
                ApplyDamage(Other2, Other2, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Other2);
            });
        });
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        AbilityPowerBonus = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.2);
        BaseDamage = this.VALUE_BY_LEVEL;
        BonusDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (AbilityPowerBonus ?? 0));
        NextBuffVars.BonusDamage = BonusDamage;
        OwnerLevel = GetLevel(Owner);
        NextBuffVars.BonusHealthPreLevel4 = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 15);
        NextBuffVars.BonusHealth = Math(0 + (NextBuffVars.BonusHealthPreLevel4 ?? 0), MO_ADD, 0 + (Level4BonusHP ?? 0));
        NextBuffVars.BonusStats = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 1);
        NextBuffVars.BonusArmor = this.VALUE_BY_LEVEL;
        IfHasBuff(Owner, Owner, "UpgradeBuff", () => {
            Other3 = SpawnMinion("H-28G Evolution Turret", "HeimerTBlue", "Minion.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, false, true, false, false, false, 0, false, false, Owner, default);
            remainingDuration = GetBuffRemainingDuration(Owner, "UpgradeBuff");
            SpellBuffAdd(Attacker, Other3, "UpgradeSlow", 1, 1, 0 + (remainingDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        If(Level, default, CO_EQUAL, default, 5, () => {
            IfNotHasBuff(Owner, Owner, "UpgradeBuff", () => {
                Other3 = SpawnMinion("H-28G Evolution Turret", "HeimerTRed", "Minion.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, false, true, false, false, false, 0, false, false, Owner, default);
            });
            SpellBuffAdd(Owner, Other3, "ExplosiveCartridges", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        ElseIf(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
            IfNotHasBuff(Owner, Owner, "UpgradeBuff", () => {
                Other3 = SpawnMinion("H-28G Evolution Turret", "HeimerTGreen", "Minion.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, false, true, false, false, false, 0, false, false, Owner, default);
            });
            SpellBuffAdd(Owner, Other3, "UrAniumRounds", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        Else(() => {
            IfNotHasBuff(Owner, Owner, "UpgradeBuff", () => {
                Other3 = SpawnMinion("H-28G Evolution Turret", "HeimerTYellow", "Minion.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, false, true, false, false, false, 0, false, false, Owner, default);
            });
        });
        SpellBuffAdd(Owner, Other3, "UPGRADE!!!Proof", 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other3, default, 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        CasterID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        IfHasBuff(Owner, Owner, "UpgradeBuff", () => {
            ForNClosestUnitsInTargetArea(Owner, Owner, 1000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 5, true, default, (Unit) => {
                Result = CanSeeTarget(Owner, Unit);
                If(Result, default, CO_EQUAL, default, true, () => {
                    this.BubbleID = AddUnitPerceptionBubble(CasterID, 300, Unit, 1, Nothing, Nothing, false);
                    SpellCast(Owner, Unit, Owner, Owner, false, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
                });
            });
        });
        Else(() => {
            ForNClosestUnitsInTargetArea(Owner, Owner, 1000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 3, true, default, (Unit) => {
                Result = CanSeeTarget(Owner, Unit);
                If(Result, default, CO_EQUAL, default, true, () => {
                    this.BubbleID = AddUnitPerceptionBubble(CasterID, 300, Unit, 1, Nothing, Nothing, false);
                    SpellCast(Owner, Unit, Owner, Owner, false, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
                });
            });
        });
        HealthCost = this.VALUE_BY_LEVEL;
        Temp1 = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        If(HealthCost, default, CO_GREATER_THAN_OR_EQUAL, Temp1, default, () => {
            HealthCost = Math(0 + (Temp1 ?? 0), MO_SUBTRACT, 1);
        });
        HealthCost = Math(0 + (HealthCost ?? 0), MO_MULTIPLY, -1);
        IncHealth(Owner, 0 + (HealthCost ?? 0), Owner);
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.Level = Level;
        ArmorAmount = GetArmor(Owner);
        BaseDamage = this.VALUE_BY_LEVEL;
        ArmorAmount = Math(0 + (ArmorAmount ?? 0), MO_MULTIPLY, 0.5);
        ArmorDamage = Math(0 + (ArmorAmount ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        MalphiteSkinID = GetSkinID(Owner);
        If(MalphiteSkinID, default, CO_EQUAL, default, 2, () => {
            SpellEffectCreate(this.partname, default, "landslide_blue_nova.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.partname, default, "landslide_nova.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
        });
        ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (ArmorDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, "LandslideDebuff", 1, 1, 4, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        NextBuffVars.PercMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "ObduracyBuff", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        HealthCost = this.VALUE_BY_LEVEL;
        Temp1 = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        If(HealthCost, default, CO_GREATER_THAN_OR_EQUAL, Temp1, default, () => {
            HealthCost = Math(0 + (Temp1 ?? 0), MO_SUBTRACT, 1);
        });
        HealthCost = Math(0 + (HealthCost ?? 0), MO_MULTIPLY, -1);
        IncHealth(Owner, 0 + (HealthCost ?? 0), Owner);
        CastPos = GetCastSpellTargetPos();
        HealthCost = this.VALUE_BY_LEVEL;
        Temp1 = GetPAROrHealth(Owner, GetHealth, PAR_SHIELD);
        If(HealthCost, default, CO_GREATER_THAN_OR_EQUAL, Temp1, default, () => {
            HealthCost = Math(0 + (Temp1 ?? 0), MO_SUBTRACT, 1);
        });
        HealthCost = Math(0 + (HealthCost ?? 0), MO_MULTIPLY, -1);
        IncHealth(Owner, 0 + (HealthCost ?? 0), Owner);
        BaseDamage = this.VALUE_BY_LEVEL;
        ProcDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.SlowPercent = this.VALUE_BY_LEVEL;
        RatioVar = 0.3;
        TeamID = GetTeamID(default);
        PlayAnimation("Spell1", 0, Owner, false, true, false);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, InstanceVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Count = GetBuffCountFromCaster(Owner, Owner, "SkarnerVirulentSlash");
        If(Count, default, CO_EQUAL, default, 0, () => {
            SpellEffectCreate(this.partname, default, "Skarner_Crystal_Slash_Mini_Nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.partname, default, "Skarner_Crystal_Slash_Buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        });
        ChampionHit = false;
        ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (BaseDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0.8, false, false, Attacker);
            ChampionHit = true;
            If(Count, default, CO_EQUAL, default, 0, () => {
                SpellEffectCreate(Temp, default, "chogath_basic_attack_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                ApplyDamage(Attacker, Unit, 0 + (ProcDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 0, false, false, Attacker);
                SpellEffectCreate(Temp, default, "Skarner_Crystal_Slash_Tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                SpellBuffAdd(Owner, Unit, "SkarnerVirulentSlashSlow", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
            });
        });
        If(ChampionHit, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Attacker, Attacker, "SkarnerVirulentSlash", 1, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
            If(Count, default, CO_EQUAL, default, 0, () => {
                SpellBuffAdd(Attacker, Attacker, "SkarnerVirulentSlashEnergy1", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 600, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 600, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        SpellEffectCreate(this.partname, default, "Skarner_Fracture_Cas.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
        Duration = GetBuffRemainingDuration(Owner, "TeemoMushrooms");
        If(Duration, default, CO_GREATER_THAN, default, 40, () => {
            SpellBuffRemove(Owner, "TeemoMushrooms", Owner, 0 + (CharVars.MushroomCooldown ?? 0));
        });
        Else(() => {
            SpellBuffRemove(Owner, "TeemoMushrooms", Owner, 0);
        });
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other3 = SpawnMinion("Noxious Trap", "TeemoMushroom", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, true, true, false, false, true, false, 0, true, false, Owner, default);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "SharedWardBuff", 1, 1, 600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        Count = GetBuffCountFromAll(Owner, "HowlingGale");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            SpellBuffRemove(Owner, "HowlingGale", Owner, 0);
        });
        Else(() => {
            PlayAnimation("Spell1", 0, Owner, false, false, false);
            TargetPos = GetCastSpellTargetPos();
            FaceDirection(Owner, TargetPos);
            CastPos = GetPointByUnitFacingOffset(Owner, 100, 0);
            FacePos = GetPointByUnitFacingOffset(Owner, 200, 0);
            NextBuffVars.CastPos = CastPos;
            NextBuffVars.FacePos = FacePos;
            NextBuffVars.LifeTime = 0;
            NextBuffVars.Level = Level;
            SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SetTargetingType(0, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Self, Owner);
        });
        IfHasBuff(Owner, Owner, "IreliaTranscendentBladesSpell", () => {
            Level = GetCastInfo(GetCastSpellLevelPlusOne);
            TargetPos = GetCastSpellTargetPos();
            OwnerPos = GetUnitPosition(Owner);
            Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
            Count = GetBuffCountFromAll(Owner, "IreliaTranscendentBladesSpell");
            SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
            SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0.5);
            SpellBuffRemove(Owner, "IreliaTranscendentBladesSpell", Owner, default);
            If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 1, () => {
                SpellBuffRemove(Owner, "IreliaTranscendentBlades", Owner, default);
            });
        });
        Else(() => {
            NextBuffVars.NewCd = this.VALUE_BY_LEVEL;
            NextBuffVars.Blades = 4;
            SpellBuffAdd(Owner, Owner, "IreliaTranscendentBlades", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "IreliaTranscendentBladesSpell", 4, 4, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            PlayAnimation("Spell4", 1.5, Owner, false, true, true);
            SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0.25);
        });
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 1300, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 1150, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 4, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        TeamID = GetTeamID(default);
        ReductionPerc = GetStat(GetPercentCooldownMod, Owner);
        ReductionPerc = Math(1, MO_ADD, 0 + (ReductionPerc ?? 0));
        CooldownTime = Math(10, MO_MULTIPLY, 0 + (ReductionPerc ?? 0));
        IfHasBuff(Owner, Owner, "PowerBall", () => {
            SpellBuffRemove(Owner, "PowerBall", Owner, 0);
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownTime ?? 0));
            SetStatus(Owner, default, SetCanAttack);
            PopAllCharacterData(Owner);
            SpellEffectCreate(default, default, "PowerBallStop.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            NextBuffVars.AoEDamage = this.VALUE_BY_LEVEL;
            NextBuffVars.SlowPercent = this.VALUE_BY_LEVEL;
            NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
            NextBuffVars.CasterID = GetTeamID(default);
            SpellBuffAdd(Attacker, Owner, "PowerBall", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 1);
        });
        SpellBuffRemove(Owner, "DefensiveBallCurl", Owner, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        MoveSpeed = GetStat(GetMovementSpeed, Owner);
        dashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 800);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 575, () => {
            FaceDirection(Owner, TargetPos);
            Distance = 575;
            TargetPos = GetPointByUnitFacingOffset(Owner, 575, 0);
        });
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.Distance = Distance;
        NextBuffVars.dashSpeed = dashSpeed;
        NextBuffVars.tauntDuration = this.VALUE_BY_LEVEL;
        EnergyRefunds = 1;
        ForEachUnitInTargetArea(Owner, Owner, 150, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            IfNotHasBuff(Unit, Owner, "ShenShadowDashCooldown", () => {
                SpellBuffAdd(Owner, Unit, "ShenShadowDashCooldown", 1, 1, 0 + (NextBuffVars.tauntDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                BreakSpellShields(Unit);
                ApplyTaunt(Attacker, Unit, 0 + (NextBuffVars.tauntDuration ?? 0));
                SpellEffectCreate(TargetParticle, default, "shen_shadowDash_unit_impact.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                    If(EnergyRefunds, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                        IncPAR(Owner, 40);
                        EnergyRefunds = Math(0 + (EnergyRefunds ?? 0), MO_SUBTRACT, 1);
                    });
                });
            });
        });
        NextBuffVars.EnergyRefunds = EnergyRefunds;
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0.1, true, false, false, default);
        NextBuffVars.ArmorAmount = this.VALUE_BY_LEVEL;
        NextBuffVars.DamageReturn = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Owner, "DefensiveBallCurl", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemove(Owner, "IreliaHitenStyle", Owner, default);
        OwnerPos = GetUnitPosition(Owner);
        TeamID = GetTeamID(default);
        OwnerFacing = GetPointByUnitFacingOffset(Owner, 100, 0);
        SetStatus(Owner, default, SetGhosted);
        ManaCost = this.VALUE_BY_LEVEL;
        Move(Owner, OwnerFacing, 3000, 0, 0, FIRST_WALL_HIT, POSTPONE_CURRENT_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        Other1 = CloneUnitPet(Owner, "MonkeyKingDecoyDummy", 0, OwnerPos, 0, 0, true);
        IssueOrder(Other1, AI_HOLD, default, Other1);
        PlayAnimation("idle1", 0, Other1, false, false, false);
        IncPAR(Other1, 0 + (ManaCost ?? 0));
        FaceDirection(Other1, OwnerFacing);
        SpellBuffAdd(Owner, Other1, "MonkeyKingDecoyClone", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingDecoyStealth", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IfNotHasBuff(Attacker, Attacker, "IfHasBuffCheck", () => {
            SpellBuffAdd(Attacker, Attacker, "AlZaharVoidlingCount", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = TargetPos;
        TeamID = GetTeamID(default);
        HealthPercent = this.VALUE_BY_LEVEL;
        NextBuffVars.HealthFlat = this.VALUE_BY_LEVEL;
        AbilityPowerRatio = GetStat(GetFlatMagicDamageMod, Owner);
        AbilityPower = Math(0 + (AbilityPowerRatio ?? 0), MO_MULTIPLY, 0.0001);
        HealthPercentPerTick = Math(0 + (HealthPercent ?? 0), MO_ADD, 0 + (AbilityPower ?? 0));
        NextBuffVars.HealthPercentPerTick = HealthPercentPerTick;
        SpellBuffAdd(Attacker, Owner, "AlZaharNullZone", 5, 1, 5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, false, false, false, default);
        SpellBuffAdd(Owner, Owner, "SonaHymnofValor", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "SonaPowerChord", () => {
            SpellBuffAdd(Owner, Owner, "SonaHymnofValorCheck", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        CooldownPerc = GetStat(GetPercentCooldownMod, Owner);
        CooldownPerc = Math(1, MO_ADD, 0 + (CooldownPerc ?? 0));
        CooldownPerc = Math(2, MO_MULTIPLY, 0 + (CooldownPerc ?? 0));
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        CasterID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        AvailChamps = 0;
        ForEachUnitInTargetArea(Owner, Owner, 650, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
            AvailChamps = Math(0 + (AvailChamps ?? 0), MO_ADD, 1);
        });
        If(AvailChamps, default, CO_EQUAL, default, 1, () => {
            ForNClosestUnitsInTargetArea(Owner, Owner, 650, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
                Result = CanSeeTarget(Owner, Unit);
                If(Result, default, CO_EQUAL, default, true, () => {
                    this.BubbleID = AddUnitPerceptionBubble(CasterID, 300, Unit, 1, Nothing, Nothing, false);
                    SpellCast(Owner, Unit, Owner, Owner, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
                });
            });
            ForNClosestUnitsInTargetArea(Owner, Owner, 850, "AffectEnemies AffectNeutral AffectMinions ", 1, true, default, (Unit) => {
                Result = CanSeeTarget(Owner, Unit);
                If(Result, default, CO_EQUAL, default, true, () => {
                    this.BubbleID = AddUnitPerceptionBubble(CasterID, 300, Unit, 1, Nothing, Nothing, false);
                    SpellCast(Owner, Unit, Owner, Owner, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
                });
            });
        });
        If(AvailChamps, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
            ForNClosestUnitsInTargetArea(Owner, Owner, 650, "AffectEnemies AffectHeroes ", 2, true, default, (Unit) => {
                Result = CanSeeTarget(Owner, Unit);
                If(Result, default, CO_EQUAL, default, true, () => {
                    this.BubbleID = AddUnitPerceptionBubble(CasterID, 300, Unit, 1, Nothing, Nothing, false);
                    SpellCast(Owner, Unit, Owner, Owner, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
                });
            });
        });
        If(AvailChamps, default, CO_EQUAL, default, 0, () => {
            ForNClosestUnitsInTargetArea(Owner, Owner, 850, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 2, true, default, (Unit) => {
                Result = CanSeeTarget(Owner, Unit);
                If(Result, default, CO_EQUAL, default, true, () => {
                    this.BubbleID = AddUnitPerceptionBubble(CasterID, 300, Unit, 1, Nothing, Nothing, false);
                    SpellCast(Owner, Unit, Owner, Owner, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
                });
            });
        });
        SpellBuffAdd(Owner, Owner, "SonaHymnofValorAura", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell1", 1, Owner, false, true, true);
        SpellBuffAdd(Owner, Owner, "SonaSongofDiscord", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "SonaPowerChord", () => {
            SpellBuffAdd(Owner, Owner, "SonaSongofDiscordCheck", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        CooldownPerc = GetStat(GetPercentCooldownMod, Owner);
        CooldownPerc = Math(1, MO_ADD, 0 + (CooldownPerc ?? 0));
        CooldownPerc = Math(2, MO_MULTIPLY, 0 + (CooldownPerc ?? 0));
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
            SpellCast(Owner, Unit, Owner, Owner, false, 6, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        });
        ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions ", default, true, (Unit) => {
            ApplyAssistMarker(Attacker, Unit, 10);
            SpellBuffAdd(Owner, Unit, "SonaSongofDiscordHaste", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Haste, 0, true, false, false, default);
        });
        SpellBuffAdd(Owner, Owner, "SonaSongofDiscordAura", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell3", 1, Owner, false, true, true);
        IfNotHasBuff(Attacker, Attacker, "IfHasBuffCheck", () => {
            SpellBuffAdd(Attacker, Attacker, "AlZaharVoidlingCount", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        teamID = GetTeamID(default);
        FoundFirstPos = false;
        ForEachPointOnLine(OwnerPos, TargetPos, 750, 0 + (Distance ?? 0), 15, (Pos) => {
            If(FoundFirstPos, default, CO_EQUAL, default, false, () => {
                FirstPos = Pos;
                FoundFirstPos = true;
            });
            LastPos = Pos;
        });
        Other1 = SpawnMinion("Portal to the Void", "TestCubeRender", "idle.lua", FirstPos, teamID ?? TEAM_CASTER, false, true, false, true, false, true, 300, false, false, Owner, default);
        Other2 = SpawnMinion("Portal to the Void", "TestCubeRender", "idle.lua", LastPos, teamID ?? TEAM_CASTER, false, true, false, true, false, true, 300 + (LineWidth ?? 0), false, false, Owner, default);
        FaceDirection(Other1, TargetPos);
        FaceDirection(Other2, TargetPos);
        NextBuffVars.TargetPos = TargetPos;
        SpellBuffAdd(Owner, Other1, default, 1, 1, 0.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other2, default, 1, 1, 0.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "SonaAriaofPerseverance", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "SonaPowerChord", () => {
            SpellBuffAdd(Owner, Owner, "SonaAriaofPerseveranceCheck", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        CooldownPerc = GetStat(GetPercentCooldownMod, Owner);
        CooldownPerc = Math(1, MO_ADD, 0 + (CooldownPerc ?? 0));
        CooldownPerc = Math(2, MO_MULTIPLY, 0 + (CooldownPerc ?? 0));
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        CasterID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        JumpTarget = NoTargetYet;
        JumpTargetHealth_ = 1;
        ForEachUnitInTargetAreaRandom(Owner, Owner, 1000, "AffectFriends AffectHeroes NotAffectSelf ", default, true, 999, (Unit) => {
            If(JumpTarget, default, CO_EQUAL, default, NoValidTarget, () => {
                JumpTarget = Unit;
            });
            UnitHealth_ = GetPAROrHealth(Unit, GetHealthPercent, PAR_MANA);
            If(UnitHealth_, default, CO_LESS_THAN, JumpTargetHealth_, default, () => {
                JumpTarget = Unit;
                JumpTargetHealth_ = UnitHealth_;
            });
        });
        If(JumpTarget, default, CO_NOT_EQUAL, default, NoValidTarget, () => {
            Other1 = JumpTarget;
            ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (Unit) => {
                If(Unit, default, CO_EQUAL, Other1, default, () => {
                    SpellCast(Owner, Unit, Owner, Owner, false, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
                });
            });
        });
        APMod = GetStat(GetFlatMagicDamageMod, Attacker);
        APMod = Math(0 + (APMod ?? 0), MO_MULTIPLY, 0.25);
        IncHealth(Owner, 0 + (APMod ?? 0) + (this.VALUE_BY_LEVEL ?? 0), Attacker);
        SpellEffectCreate(self, default, "Global_Heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "SonaAriaofPerseveranceAura", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell2", 1, Owner, false, true, true);
        NextBuffVars.DefenseBonus = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Attacker, "SonaAriaShield", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemove(Owner, "MonkeyKingSpinToWin", Owner, 0);
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        SpellEffectCreate(this.BattleCries, default, "xenZiou_battle_cry_weapon_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "weapon_a_bend3", default, Owner, "weapon_b_bend3", default, false, default, default, false, false, default, default);
        SpellEffectCreate(ar, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        HealthToInc = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        AbilityPower = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 1);
        HealthToInc = Math(0 + (HealthToInc ?? 0), MO_ADD, 0 + (AbilityPower ?? 0));
        IncHealth(Owner, 0 + (HealthToInc ?? 0), Owner);
        SpellBuffAdd(Owner, Owner, "MonkeyKingKillCloneE", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        NextBuffVars.BaseDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "MonkeyKingSpinToWinLeave");
        SetSlotSpellCooldownTimeVer2(1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        HealthPercent = this.VALUE_BY_LEVEL;
        BaseDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.LifestealStat = this.VALUE_BY_LEVEL;
        HealthDamage = Math(0 + (HealthPercent ?? 0), MO_MULTIPLY, 0 + (MaxHealth ?? 0));
        NextBuffVars.DamageGain = Math(0 + (HealthDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        TargetPos = GetPointByUnitFacingOffset(Owner, 1100, 0);
        NextBuffVars.TargetPos = TargetPos;
        Other3 = SpawnMinion("RighteousGustLauncher", "TestCubeRender", "idle.lua", OwnerPos, TeamID ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Owner, default);
        SpellBuffAdd(Owner, Other3, default, 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Attacker, "GalioRighteousGustHaste", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        Other1 = SpawnPet("Tibbers", "TempMovableChar", "InfernalGuardian", "StormIdle.lua", 7, TargetPos, 0 + (this.VALUE_BY_LEVEL ?? 0), 0 + (this.VALUE_BY_LEVEL ?? 0));
        ForNClosestUnitsInTargetArea(Owner, TargetPos, 350, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
            SpellBuffAdd(Owner, Unit, "ViktorChaosStormGuide", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        SetStatus(Other1, default, SetTargetable);
        SetStatus(Other1, default, SetInvulnerable);
        StopMove(Other1);
        this.blah = PushCharacterFade(Other1, 0, default, this.blah);
        SpellBuffAdd(Owner, Other1, "ViktorChaosStormAOE", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "ViktorChaosStormTimer", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "ViktorExpirationTimer", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "ViktorChaosStormGuide");
        NextBuffVars.SelfASMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        HMCSStartTime = GetBuffStartTime(Owner, "ViktorChaosStormGuide");
        HMCSCurrTime = GetTime();
        RemainingBuffTime = Math(0 + (HMCSCurrTime ?? 0), MO_MULTIPLY, 0 + (HMCSStartTime ?? 0));
        HasTarget = false;
        CenterPos = GetUnitPosition(Owner);
        TargetPos = GetCastSpellTargetPos();
        ForEachUnitInTargetArea(Owner, CenterPos, 25000, "AffectEnemies AffectFriends AffectMinions AffectHeroes AffectUntargetable ", "ViktorChaosStormGuide", true, (Unit) => {
            If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                SpellBuffRemove(Unit, "ViktorChaosStormGuide", Owner, 0);
            });
            Else(() => {
                SetStatus(Unit, default, SetInvulnerable);
                ApplyDamage(Attacker, Unit, 25000, TRUE_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
            });
        });
        ForNClosestUnitsInTargetArea(Owner, TargetPos, 150, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "ViktorChaosStormGuide", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            HasTarget = true;
        });
        If(HasTarget, default, CO_EQUAL, default, false, () => {
            TeamID = GetTeamID(default);
            Other2 = SpawnMinion("GuideMarker", "TestCube", default, TargetPos, TeamID ?? TEAM_UNKNOWN, false, true, false, true, false, true, 0, false, false, Nothing, default);
            SpellBuffAdd(Attacker, Other2, "ViktorExpirationTimer", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Other2, "ViktorChaosStormGuide", 1, 1, 7 + (RemainingBuffTime ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        Else(() => {
            
        });
        SpellBuffAdd(Owner, Owner, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        DtD = this.VALUE_BY_LEVEL;
        PercentByLevel = this.VALUE_BY_LEVEL;
        SpellEffectCreate(p3, default, "xenZiou_ult_cas.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", CastPos, Owner, default, default, true, false, false, false, false, default, default);
        DtDReal = Math(0 + (DtD ?? 0), MO_ADD, 0 + (WeaponDmgBonus ?? 0));
        TeamID = GetTeamID(default);
        NextBuffVars.Count = 0;
        ForEachUnitInTargetArea(Owner, Owner, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            CurrentHP = GetPAROrHealth(Unit, GetHealth, PAR_MANA);
            PercentDmg = Math(0 + (CurrentHP ?? 0), MO_MULTIPLY, 0 + (PercentByLevel ?? 0));
            DtDReal = Math(0 + (DtD ?? 0), MO_ADD, 0 + (PercentDmg ?? 0));
            IsStealthed = GetStatus(Unit, GetStealthed);
            SpellEffectCreate(bye, default, "xenZiou_utl_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(gda, default, "xenZiou_utl_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(asdf, default, "xenZiou_utl_tar_03.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            If(Unit, default, CO_IS_NOT_HERO, default, true, () => {
                If(DtDReal, default, CO_GREATER_THAN, default, 600, () => {
                    DtDReal = 600;
                });
            });
            If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                NextBuffVars.Count = Math(1, MO_ADD, 0 + (NextBuffVars.Count ?? 0));
            });
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                ApplyDamage(Attacker, Unit, 0 + (DtDReal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
            });
            ElseIf(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                ApplyDamage(Attacker, Unit, 0 + (DtDReal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
            });
            Else(() => {
                CanSee = CanSeeTarget(Owner, Unit);
                If(CanSee, default, CO_EQUAL, default, true, () => {
                    ApplyDamage(Attacker, Unit, 0 + (DtDReal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
                });
            });
        });
        NextBuffVars.MRByLevel = this.VALUE_BY_LEVEL;
        ArmorAmount = this.VALUE_BY_LEVEL;
        NextBuffVars.ScalingArmor = this.VALUE_BY_LEVEL;
        NextBuffVars.ScalingMR = this.VALUE_BY_LEVEL;
        NextBuffVars.CountMR = Math(0 + (NextBuffVars.Count ?? 0), MO_MULTIPLY, 0 + (NextBuffVars.ScalingMR ?? 0));
        NextBuffVars.TotalMR = Math(0 + (NextBuffVars.CountMR ?? 0), MO_ADD, 0 + (NextBuffVars.MRByLevel ?? 0));
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.CountArmor = Math(0 + (NextBuffVars.Count ?? 0), MO_MULTIPLY, 0 + (NextBuffVars.ScalingArmor ?? 0));
        NextBuffVars.TotalArmor = Math(0 + (NextBuffVars.CountArmor ?? 0), MO_ADD, 0 + (ArmorAmount ?? 0));
        SpellBuffAdd(Owner, Owner, "XenZhaoSweepArmor", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        DtD = this.VALUE_BY_LEVEL;
        SpellEffectCreate(a, default, default, default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, default, default, false, default, default, default);
        WeaponDmg = GetTotalAttackDamage(Owner);
        WeaponDmgBonus = Math(0 + (WeaponDmg ?? 0), MO_MULTIPLY, 0.4);
        DtDReal = Math(0 + (DtD ?? 0), MO_ADD, 0 + (WeaponDmgBonus ?? 0));
        NextBuffVars.Count = 0;
        ForEachUnitInTargetArea(Owner, Owner, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyDamage(Attacker, Unit, 0 + (DtDReal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
            If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                NextBuffVars.Count = Math(1, MO_ADD, 0 + (NextBuffVars.Count ?? 0));
            });
        });
        Pos = GetPointByUnitFacingOffset(Owner, 1000, -14);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, default, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 0);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, default, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 7);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, default, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, -7);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, default, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 14);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, default, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, -21);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, default, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 21);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, default, default);
        PlayAnimation("Spell3", 0, Owner, false, false, false);
        TeamOfOwner = GetTeamID(default);
        TargetPosStart = GetCastSpellTargetPos();
        TargetPosEnd = GetCastSpellDragEndPos();
        Other1 = SpawnMinion("MaokaiSproutling", "MaokaiSproutling", "idle.lua", TargetPosStart, TeamOfOwner ?? TEAM_CASTER, false, false, false, false, true, true, 0, false, true, Owner, default);
        SpellBuffAdd(Attacker, Other1, "ViktorExpirationTimer", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        FaceDirection(Other1, TargetPosEnd);
        TargetPosEnd = GetPointByUnitFacingOffset(Other1, 700, 0);
        TeamID = GetTeamID(default);
        SpellBuffAdd(Attacker, Other1, "ViktorDeathRay", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Move(Other1, TargetPosEnd, 550, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 500, FACE_MOVEMENT_DIRECTION);
        teamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = TargetPos;
        SpellBuffAdd(Attacker, Other1, default, 1, 1, 30, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, default, default);
        dist = this.VALUE_BY_LEVEL;
        Move(Other1, TargetPos, 1350, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (dist ?? 0), default);
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        DamagePoint = GetPointByUnitFacingOffset(Owner, 425, 0);
        TeamID = GetTeamID(default);
        PhysPreMod = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusDamage = this.VALUE_BY_LEVEL;
        PhysPreMod = Math(0 + (PhysPreMod ?? 0), MO_MULTIPLY, 1.2);
        DtD = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (PhysPreMod ?? 0));
        NextBuffVars.ArmorDebuff = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetRectangle(Owner, DamagePoint, 68, 360, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", true, default, (Unit) => {
            IsStealthed = GetStatus(Unit, GetStealthed);
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (DtD ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Attacker);
                SpellBuffAdd(Attacker, Unit, "JarvanIVDragonStrikeDebuff", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Shred, 0, true, false, false, default);
            });
            Else(() => {
                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                    BreakSpellShields(Unit);
                    ApplyDamage(Attacker, Unit, 0 + (DtD ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Attacker);
                    SpellBuffAdd(Attacker, Unit, "JarvanIVDragonStrikeDebuff", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Shred, 0, true, false, false, default);
                });
                Else(() => {
                    CanSee = CanSeeTarget(Owner, Unit);
                    If(CanSee, default, CO_EQUAL, default, true, () => {
                        BreakSpellShields(Unit);
                        ApplyDamage(Attacker, Unit, 0 + (DtD ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Attacker);
                        SpellBuffAdd(Attacker, Unit, "JarvanIVDragonStrikeDebuff", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Shred, 0, true, false, false, default);
                    });
                });
            });
        });
        ForEachUnitInTargetRectangle(Owner, DamagePoint, 150, 425, "AffectEnemies AffectFriends AffectMinions NotAffectSelf ", true, default, (Unit) => {
            IfHasBuff(Unit, Attacker, "JarvanIVDemacianStandard", () => {
                SpellBuffAdd(Unit, Owner, "JarvanIVDragonStrikePH", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
                SpellBuffAdd(Unit, Unit, "JarvanIVDragonStrikeSound", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
                SpellEffectCreate(asdf, default, "caitlyn_peaceMaker_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, "spine", default, Unit, default, default, true, false, false, false, false, default, default);
            });
        });
        SpellBuffAdd(Owner, Owner, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        SpellEffectCreate(a, default, "JarvanDemacianStandard_mis.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "R_Hand", default, Attacker, default, default, true, default, default, false, false, default, default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, false, 0, false, false, Owner, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.Level = Level;
        BaseDamage = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        AbilityPowerPostMod = Math(0.8, MO_MULTIPLY, 0 + (AbilityPower ?? 0));
        DamageToDeal = Math(0 + (AbilityPowerPostMod ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        NextBuffVars.DamageToDeal = DamageToDeal;
        SpellBuffAdd(Attacker, Other3, "JarvanIVDemacianStandardDelay", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        FaceDirection(Owner, TargetPos);
        PlayAnimation("Spell3", 0.75, Owner, false, true, false);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ShieldAmount = this.VALUE_BY_LEVEL;
        ShieldBonus = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Owner, Owner, 500, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
            BonusShield = Math(0 + (BonusShield ?? 0), MO_ADD, 0 + (ShieldBonus ?? 0));
        });
        Shield = Math(0 + (ShieldAmount ?? 0), MO_ADD, 0 + (BonusShield ?? 0));
        NextBuffVars.Shield = Shield;
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = 0;
        SpellEffectCreate(a, default, "JarvanGoldenAegis_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            SpellEffectCreate(asdf, default, "JarvanGoldenAegis_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Unit, "spine", default, Unit, default, default, true, default, default, false, default, default, default);
        });
        DestroyMissileForTarget(Owner);
        CastPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, CastPos);
        FaceDirection(Owner, CastPos);
        If(Distance, default, CO_GREATER_THAN, default, 450, () => {
            CastPos = GetPointByUnitFacingOffset(Owner, 425, 0);
        });
        StopChanneling(Target, ChannelingStopCondition_Cancel, ChannelingStopSource_Move);
        SpellEffectCreate(p3, default, "summoner_flashback.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, CastPos, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(ar1, default, "summoner_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        IfHasBuff(Owner, Owner, "FlashBeenHit", () => {
            NextBuffVars.CastPos = CastPos;
            SpellBuffAdd(Owner, Owner, default, 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, default, default, default);
        });
        Else(() => {
            TeleportToPosition(Owner, CastPos);
        });
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "RanduinsOmen", () => {
            SetSlotSpellCooldownTimeVer2(60, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name1, default, CO_EQUAL, default, "RanduinsOmen", () => {
            SetSlotSpellCooldownTimeVer2(60, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name2, default, CO_EQUAL, default, "RanduinsOmen", () => {
            SetSlotSpellCooldownTimeVer2(60, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name3, default, CO_EQUAL, default, "RanduinsOmen", () => {
            SetSlotSpellCooldownTimeVer2(60, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name4, default, CO_EQUAL, default, "RanduinsOmen", () => {
            SetSlotSpellCooldownTimeVer2(60, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name5, default, CO_EQUAL, default, "RanduinsOmen", () => {
            SetSlotSpellCooldownTimeVer2(60, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        IfHasBuff(Owner, Owner, "SwainMetamorphism", () => {
            SpellBuffRemove(Owner, "SwainMetamorphism", Owner, 0);
        });
        Else(() => {
            NextBuffVars.ManaCostInc = this.VALUE_BY_LEVEL;
            NextBuffVars.ManaCost = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Attacker, Attacker, default, 1, 1, 25000 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.ManaCost = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "ViktorGravitonField", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.DamageCap = this.VALUE_BY_LEVEL;
        NextBuffVars.DamagePerc = this.VALUE_BY_LEVEL;
        NextBuffVars.CurrentDamageTotal = 0;
        NextBuffVars.BonusHealth = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.ManaCost = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "ViktorGravitonField", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Destiny_marker", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellBuffAdd(Attacker, Unit, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "Gate");
        SetSlotSpellCooldownTimeVer2(0.5, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        StopChanneling(Owner, ChannelingStopCondition_NotCancelled, ChannelingStopSource_NotCancelled);
        TeamID = GetTeamID(default);
        Pos = GetPointByUnitFacingOffset(Owner, 30, 0);
        Pos1 = GetPointByUnitFacingOffset(Owner, 1000, 0);
        Other1 = SpawnMinion("TestCube", "TestCubeRender", "idle.lua", Pos, TeamID ?? TEAM_CASTER, false, true, false, true, false, true, 0, false, true, Owner, default);
        Pos2 = GetPointByUnitFacingOffset(Owner, 1000, -28);
        Pos3 = GetPointByUnitFacingOffset(Owner, 1000, 28);
        SetSpell(Other1, 0, ExtraSlots, SPELLBOOK_CHAMPION, "SealFateMissile");
        SpellCast(Other1, Nothing, Pos1, Pos1, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        SpellCast(Other1, Nothing, Pos2, Pos2, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        SpellCast(Other1, Nothing, Pos3, Pos3, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        SpellBuffAdd(Attacker, Other1, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 6, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 6, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        TargetPos = GetNearestPassablePosition(Owner, TargetPos);
        IfHasBuff(Owner, Owner, "Destiny_marker", () => {
            TeamOfOwner = GetTeamID(default);
            SpellEffectCreate(this.GateParticle, this.GateParticle2, "GateMarker_green.troy", "GateMarker_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, default, default, false, false, default, default);
            NextBuffVars.GateParticle = this.GateParticle;
            NextBuffVars.GateParticle2 = this.GateParticle2;
            NextBuffVars.TargetPos = TargetPos;
            SpellBuffAdd(Owner, Owner, default, 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffRemove(Owner, "Destiny_marker", Owner, 0);
        });
        Else(() => {
            SpellCast(Owner, Owner, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        });
        TeamID = GetTeamID(default);
        CastPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, CastPos);
        FaceDirection(Owner, CastPos);
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 700, () => {
            CastPos = GetPointByUnitFacingOffset(Owner, 700, 0);
        });
        CasterID = GetTeamID(default);
        If(CasterID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(p3, default, "Riftwalk_flashback.troy", default, TEAM_ORDER, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(p3, default, "Riftwalk_flashback.troy", default, TEAM_CHAOS, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        });
        TeleportToPosition(Owner, CastPos);
        Count = GetBuffCountFromAll(Owner, "Riftwalk");
        Damage = this.VALUE_BY_LEVEL;
        Count2 = Math(1, MO_ADD, 0 + (Count ?? 0));
        TotalDamage = Math(0 + (Damage ?? 0), MO_MULTIPLY, 0 + (Count2 ?? 0));
        ForEachUnitInTargetArea(Owner, Owner, 270, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Attacker);
        });
        ExtraCost = Math(100, MO_MULTIPLY, 0 + (Count2 ?? 0));
        SetPARCostInc(Owner, 3, SpellSlots, 0 + (ExtraCost ?? 0), PAR_MANA);
        SpellBuffAdd(Attacker, Owner, "RiftWalk", 10, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        If(CasterID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(ar1, default, "Riftwalk_flash.troy", default, TEAM_ORDER, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, CastPos, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(ar1, default, "Riftwalk_flash.troy", default, TEAM_CHAOS, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, CastPos, Target, default, default, true, false, false, false, false, default, default);
        });
        TargetPos = GetCastSpellTargetPos();
        TeamOfOwner = GetTeamID(default);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(this.Particle, default, "CardmasterTeleport_red.troy", default, TEAM_ORDER, 200, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.Particle, default, "GateMarker_red.troy", default, TEAM_ORDER, 200, 0, TEAM_CHAOS, Nothing, true, Nothing, default, TargetPos, Target, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.Particle2, default, "GateMarker_green.troy", default, TEAM_ORDER, 200, 0, TEAM_ORDER, Nothing, true, Nothing, default, TargetPos, Target, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.Particle2, default, "CardmasterTeleport_green.troy", default, TEAM_ORDER, 200, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle, default, "CardmasterTeleport_red.troy", default, TEAM_CHAOS, 200, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.Particle, default, "GateMarker_red.troy", default, TEAM_CHAOS, 200, 0, TEAM_ORDER, Nothing, true, Nothing, default, TargetPos, Target, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.Particle2, default, "GateMarker_green.troy", default, TEAM_CHAOS, 200, 0, TEAM_CHAOS, Nothing, true, Nothing, default, TargetPos, Target, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(this.Particle2, default, "CardmasterTeleport_green.troy", default, TEAM_CHAOS, 200, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        NextBuffVars.GateParticle = GateParticle;
        NextBuffVars.CurrentPos = GetUnitPosition(Owner);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellBuffRemove(Owner, "ForcePulseCanCast", Owner, default);
        SpellBuffRemove(Owner, "ForcePulseCanCast", Owner, 0);
        SpellBuffRemove(Owner, "PickaCard", Owner, default);
        SpellBuffRemove(Owner, "BlueCardPreAttack", Owner, default);
        SpellBuffAdd(Attacker, Owner, "NetherBladeBuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        SpellBuffRemove(Owner, "PickaCard", Owner, default);
        SpellBuffRemove(Owner, "RedCardPreAttack", Owner, default);
        SpellBuffRemove(Owner, "GoldCardPreAttack", Owner, default);
        SpellBuffRemove(Owner, "PickACard", Owner, default);
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.InitialDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.Damage = this.VALUE_BY_LEVEL;
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.ArmorReduction = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        TeamOfOwner = GetTeamID(default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Owner, default);
        NextBuffVars.RootDuration = this.VALUE_BY_LEVEL;
        NextBuffVars.GraspDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        Health = GetPAROrHealth(Target, GetHealth, PAR_MANA);
        HealthLoss = Math(-0.2, MO_MULTIPLY, 0 + (Health ?? 0));
        IncHealth(Owner, 0 + (HealthLoss ?? 0), Owner);
        NextBuffVars.SpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
        SpellEffectCreate(Activate, default, "dr_mundo_sadism_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "pelvis", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(Activate, default, "dr_mundo_sadism_cas_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(Activate, default, "dr_mundo_sadism_cas_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Target, default, default, false, false, false, false, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 1000, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 850, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, default, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        HealthCost = this.VALUE_BY_LEVEL;
        NextBuffVars.DamageMod = this.VALUE_BY_LEVEL;
        NextBuffVars.BaseIncrease = this.VALUE_BY_LEVEL;
        IncHealth(Owner, 0 + (HealthCost ?? 0), Owner);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 1000, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 950, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 900, () => {
            GravityVar = 50;
            SpeedVar = 1200;
            FaceDirection(Owner, TargetPos);
            TargetPos = GetPointByUnitFacingOffset(Owner, 900, 0);
            Distance = 900;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 600, () => {
            GravityVar = 50;
            SpeedVar = 1200;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 500, () => {
            GravityVar = 80;
            SpeedVar = 1200;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 400, () => {
            GravityVar = 100;
            SpeedVar = 1100;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 300, () => {
            GravityVar = 120;
            SpeedVar = 1025;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 200, () => {
            GravityVar = 150;
            SpeedVar = 975;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 100, () => {
            GravityVar = 300;
            SpeedVar = 800;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            GravityVar = 1000;
            SpeedVar = 800;
        });
        Move(Owner, TargetPos, 0 + (SpeedVar ?? 0), 0 + (GravityVar ?? 0), 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + (Distance ?? 0), FACE_MOVEMENT_DIRECTION);
        NextBuffVars.Damage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.WillRemove = false;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        IfHasBuff(Owner, Owner, "BurningAgony", () => {
            SpellBuffRemove(Owner, "BurningAgony", Owner, default);
        });
        Else(() => {
            SpellBuffAdd(Attacker, Target, default, 1, 1, 30000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        });
        SetSlotSpellCooldownTimeVer2(0, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "Ricochet", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        ExplosionDamage = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            IfHasBuff(Unit, Owner, "DeadlyVenom", () => {
                BreakSpellShields(Unit);
                Count = GetBuffCountFromAll(Unit, "DeadlyVenom");
                BaseDamage = this.VALUE_BY_LEVEL;
                BonusDamage = Math(0 + (Count ?? 0), MO_MULTIPLY, 0 + (ExplosionDamage ?? 0));
                TotalDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
                ApplyDamage(Attacker, Unit, 0 + (TotalDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
                SpellEffectCreate(asdf, default, "Expunge_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, true, default, default, default, default, default, default);
                SpellBuffRemoveStacks(Unit, Owner, "DeadlyVenom", 0);
            });
        });
        Count = GetBuffCountFromAll(Owner, "VladimirTidesofBloodCost");
        CharVars.numTideStacks = Count;
        Multiplier = Math(0 + (Count ?? 0), MO_MULTIPLY, 0.5);
        Multiplier = Math(0 + (Multiplier ?? 0), MO_ADD, 1);
        HealthCost = this.VALUE_BY_LEVEL;
        HealthCost = Math(0 + (HealthCost ?? 0), MO_MULTIPLY, 0 + (Multiplier ?? 0));
        Temp1 = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        If(HealthCost, default, CO_GREATER_THAN_OR_EQUAL, Temp1, default, () => {
            HealthCost = Math(0 + (Temp1 ?? 0), MO_SUBTRACT, 1);
        });
        HealthCost = Math(0 + (HealthCost ?? 0), MO_MULTIPLY, -1);
        IncHealth(Owner, 0 + (HealthCost ?? 0), Owner);
        CasterID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ForEachUnitInTargetArea(Owner, Owner, 620, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            CanSee = CanSeeTarget(Owner, Target);
            If(CanSee, default, CO_EQUAL, default, true, () => {
                SpellCast(Owner, Unit, Owner, Owner, false, 4, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
            });
        });
        SpellBuffAdd(Attacker, Attacker, "VladimirTidesofBloodCost", 4, 1, 10, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "VladimirTidesofBloodNuke", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "DeathLotusSound", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        NextBuffVars.Level = Level;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0.25, true, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 1050, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 800, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 1100, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 1050, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        TeamOfOwner = GetTeamID(default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Owner, default);
        NextBuffVars.FissureDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.AblazeBonusDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0.5);
        SpellBuffRemove(Owner, "KennenLightningRush", Owner, default);
        SpellBuffRemove(Owner, "KennenLightningRushDamage", Owner, default);
        TeamID = GetTeamID(default);
        ForEachUnitInTargetArea(Owner, Owner, 925, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            IfHasBuff(Unit, Owner, "KennenMarkofStorm", () => {
                BreakSpellShields(Unit);
                SpellBuffAdd(Attacker, Unit, "KennenMarkofStorm", 5, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
                BaseDamage = this.VALUE_BY_LEVEL;
                SpellEffectCreate(this.ParticleID, default, "kennen_btl_beam.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Unit, false, Attacker, "head", default, Unit, "root", default, true, default, default, default, default, default, default);
                ApplyDamage(Attacker, Unit, 0 + (BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.55, 1, false, false, Attacker);
                SpellEffectCreate(hi, default, "kennen_btl_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, default, default, default, default);
            });
        });
        NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.RushDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "KennenLightningRushDamage", 1, 1, 2.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0.1, true, false, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Haste, 0, true, false, default, default);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "KennenLRCancel");
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0.5);
        CurrentHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        HealthCost = Math(0 + (CurrentHealth ?? 0), MO_MULTIPLY, -0.15);
        IncHealth(Owner, 0 + (HealthCost ?? 0), Owner);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 701, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 1050, 0);
        });
        Other2 = SpawnMinion("k", "TestCubeRender", "idle.lua", TargetPos, TeamID ?? TEAM_NEUTRAL, true, true, false, true, true, true, 0, false, true, Attacker, default);
        SpellCast(Owner, Other2, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, default);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        HealthCost = this.VALUE_BY_LEVEL;
        Temp1 = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        If(HealthCost, default, CO_GREATER_THAN_OR_EQUAL, Temp1, default, () => {
            HealthCost = Math(0 + (Temp1 ?? 0), MO_SUBTRACT, 1);
        });
        HealthCost = Math(0 + (HealthCost ?? 0), MO_MULTIPLY, -1);
        IncHealth(Owner, 0 + (HealthCost ?? 0), Owner);
        SpellEffectCreate(SmokeBomb, default, "katarina_shadowStep_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        CastPos = GetUnitPosition(Owner);
        ownerskinid = GetSkinID(Owner);
        If(ownerskinid, default, CO_EQUAL, default, 6, () => {
            SpellEffectCreate(p3, default, "katarina_shadowStep_Sand_return.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, CastPos, Target, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(p3, default, "katarina_shadowStep_return.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, CastPos, Target, default, default, true, false, false, false, false, default, default);
        });
        SpellBuffAdd(Owner, Owner, "KillerInstinct", 1, 1, 15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        DestroyMissileForTarget(Owner);
        CurrentHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        HealthCost = Math(0 + (CurrentHealth ?? 0), MO_MULTIPLY, -0.2);
        IncHealth(Owner, 0 + (HealthCost ?? 0), Owner);
        SpellEffectCreate(hi, default, "Vlad_Bloodking_Blood_Skin.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, true, false, false, false, false, default, default);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        DamageTick = this.VALUE_BY_LEVEL;
        maxHP = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        baseHP = 400;
        healthPerLevel = 85;
        Level = GetLevel(Owner);
        levelHealth = Math(0 + (Level ?? 0), MO_MULTIPLY, 0 + (healthPerLevel ?? 0));
        totalBaseHealth = Math(0 + (levelHealth ?? 0), MO_ADD, 0 + (baseHP ?? 0));
        totalBonusHealth = Math(0 + (maxHP ?? 0), MO_SUBTRACT, 0 + (totalBaseHealth ?? 0));
        HealthMod = Math(0 + (totalBonusHealth ?? 0), MO_MULTIPLY, 0.0375);
        NextBuffVars.DamageTick = Math(0 + (HealthMod ?? 0), MO_ADD, 0 + (DamageTick ?? 0));
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemove(Owner, "RaiseMorale", Owner, 0);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackDmgMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Attacker, "RaiseMoraleTeamBuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackDmgMod = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Owner, Owner, 1500, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "RaiseMoraleTeamBuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        HealLevel = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        AbilityPower = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 1);
        HealAmount = Math(0 + (HealLevel ?? 0), MO_ADD, 0 + (AbilityPower ?? 0));
        IncHealth(Owner, 0 + (HealAmount ?? 0), Owner);
        IfHasBuff(Owner, Owner, "PirateScurvy", () => {
            SpellBuffRemove(Owner, "PirateScurvy", Owner, default);
        });
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamID ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Owner, default);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffClear(Owner, "RivenWindSlashReady");
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        Pos = GetPointByUnitFacingOffset(Owner, 150, 0);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 150, 9);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 150, -9);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        IfHasBuff(Owner, Owner, "RivenFengShuiEngine", () => {
            SetSlotSpellCooldownTimeVer2(0, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        });
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Nothing, default);
        NextBuffVars.DamageAmount = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        CastPosition = GetCastSpellTargetPos();
        NextBuffVars.CastPosition = CastPosition;
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        Other1 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", CastPosition, TeamOfOwner ?? TEAM_CASTER, false, true, true, true, true, true, 0, false, true, Nothing, default);
        SpellBuffAdd(Owner, Other1, "CannonBarrage", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
        Pos = GetPointByUnitFacingOffset(Owner, 250, 0);
        BaseMS = GetStat(GetFlatMovementSpeedMod, Owner);
        BonusMS = Math(0 + (BaseMS ?? 0), MO_ADD, 650);
        PlayAnimation("Spell3", 0, Owner, false, true, false);
        Move(Owner, Pos, 900 + (BonusMS ?? 0), 0, 0, FIRST_WALL_HIT, CANCEL_ORDER, 325, KEEP_CURRENT_FACING);
        baseDamageBlock = this.VALUE_BY_LEVEL;
        TotalAD = GetTotalAttackDamage(Owner);
        BaseAD = GetStat(GetBaseAttackDamage, Owner);
        BonusAD = Math(0 + (TotalAD ?? 0), MO_SUBTRACT, 0 + (BaseAD ?? 0));
        BonusHealth = Math(0 + (BonusAD ?? 0), MO_MULTIPLY, 1);
        DamageBlock = Math(0 + (baseDamageBlock ?? 0), MO_ADD, 0 + (BonusHealth ?? 0));
        NextBuffVars.DamageBlock = DamageBlock;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellEffectCreate(this.Temp_, default, "exile_E_mis.troy  ", "exile_E_mis.troy  ", TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        IfHasBuff(Owner, Owner, "GlacialStorm", () => {
            SpellBuffRemove(Owner, "GlacialStorm", Owner, 0);
        });
        Else(() => {
            TargetPos = GetCastSpellTargetPos();
            NextBuffVars.DamagePerLevel = this.VALUE_BY_LEVEL;
            NextBuffVars.TargetPos = TargetPos;
            NextBuffVars.ManaCost = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Owner, "GlacialStorm", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.ChampionLock = false;
        ForNClosestUnitsInTargetArea(Owner, TargetPos, 125, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
            TargetPos = GetUnitPosition(Unit);
            NextBuffVars.ChampionLock = true;
            SpellBuffAdd(Owner, Unit, "RivenTriCleaveBufferLock", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.Level = Level;
        SpellBuffAdd(Owner, Owner, "RivenTriCleaveBuffered", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "StaticField", Owner, default);
        SpellEffectCreate(default, default, "StaticField_nova.prt", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.ChampionLock = false;
        ForNClosestUnitsInTargetArea(Owner, TargetPos, 125, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
            TargetPos = GetUnitPosition(Unit);
            NextBuffVars.ChampionLock = true;
            SpellBuffAdd(Owner, Unit, "RivenTriCleaveBufferLock", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.Level = Level;
        SpellBuffAdd(Owner, Owner, "RivenTriCleaveBuffered", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 1100, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 1050, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 1050, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 900, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, default, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, default, default, default);
        CastPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, CastPos);
        FaceDirection(Owner, CastPos);
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 475, () => {
            CastPos = GetPointByUnitFacingOffset(Owner, 475, 0);
        });
        TeleportToPosition(Owner, CastPos);
        teamID = GetTeamID(default);
        If(teamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(p3, default, "Ezreal_arcaneshift_cas.troy", default, TEAM_ORDER, 225, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(p3, default, "Ezreal_arcaneshift_cas.troy", default, TEAM_CHAOS, 225, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, default, default, default);
        });
        CasterID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        fired = false;
        ForNClosestUnitsInTargetArea(Owner, Owner, 750, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 5, true, default, (Unit) => {
            If(fired, default, CO_EQUAL, default, false, () => {
                IsStealthed = GetStatus(Unit, GetStealthed);
                CanSee = CanSeeTarget(Owner, Unit);
                If(IsStealthed, default, CO_EQUAL, default, false, () => {
                    this.BubbleID = AddUnitPerceptionBubble(CasterID, 100, Unit, 1, Nothing, Nothing, false);
                    FaceDirection(Attacker, Unit);
                    SpellCast(Owner, Unit, Owner, Owner, false, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
                    fired = true;
                });
                ElseIf(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                    this.BubbleID = AddUnitPerceptionBubble(CasterID, 100, Unit, 1, Nothing, Nothing, false);
                    FaceDirection(Attacker, Unit);
                    SpellCast(Owner, Unit, Owner, Owner, false, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
                    fired = true;
                });
                ElseIf(CanSee, default, CO_EQUAL, default, true, () => {
                    this.BubbleID = AddUnitPerceptionBubble(CasterID, 100, Unit, 1, Nothing, Nothing, false);
                    FaceDirection(Attacker, Unit);
                    SpellCast(Owner, Unit, Owner, Owner, false, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
                    fired = true;
                });
            });
        });
        If(teamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(ar1, default, "Ezreal_arcaneshift_flash.troy", default, TEAM_ORDER, 225, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(ar1, default, "Ezreal_arcaneshift_flash.troy", default, TEAM_CHAOS, 225, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, default, default, default);
        });
        SpellBuffClear(Owner, "RivenTriCleaveUnlock");
        CancelAutoAttack(Owner, true);
        TargetPos = GetCastSpellTargetPos();
        Count = GetBuffCountFromCaster(Owner, Nothing, "RivenTriCleave");
        SpellBuffAdd(Owner, Owner, "RivenTriCleave", 3, 1, 3.75, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        If(Count, default, CO_EQUAL, default, 0, () => {
            CDReduction = GetStat(GetPercentCooldownMod, Owner);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            BaseCD = this.VALUE_BY_LEVEL;
            LowerCD = Math(0 + (BaseCD ?? 0), MO_MULTIPLY, 0 + (CDReduction ?? 0));
            NewCD = Math(0 + (BaseCD ?? 0), MO_ADD, 0 + (LowerCD ?? 0));
            NewCD = Math(1, MO_MULTIPLY, 0 + (NewCD ?? 0));
            SpellBuffAdd(Owner, Owner, "RivenTriCleaveCooldown", 1, 1, 0 + (NewCD ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Distance = 240;
        MaxRange = 240;
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, MaxRange, default, () => {
            Pos = GetPointByUnitFacingOffset(Owner, 0 + (MaxRange ?? 0), 0);
        });
        Else(() => {
            Distance = Math(0 + (Distance ?? 0), MO_MAX, 75);
            Pos = GetPointByUnitFacingOffset(Owner, 0 + (Distance ?? 0), 0);
        });
        CastPos = GetCastSpellTargetPos();
        LockOn = false;
        ForNClosestUnitsInTargetArea(Owner, CastPos, 175, "AffectEnemies AffectNeutral AffectMinions ", 1, true, default, (Unit) => {
            CanSee = CanSeeTarget(Owner, Unit);
            If(CanSee, default, CO_EQUAL, default, true, () => {
                Other1 = SetUnit(Unit);
                LockOn = true;
                IssueOrder(Owner, AI_ATTACKTO, default, Unit);
            });
        });
        ForNClosestUnitsInTargetArea(Owner, CastPos, 150, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
            CanSee = CanSeeTarget(Owner, Unit);
            If(CanSee, default, CO_EQUAL, default, true, () => {
                Other1 = SetUnit(Unit);
                LockOn = true;
                IssueOrder(Owner, AI_ATTACKTO, default, Unit);
            });
        });
        If(LockOn, default, CO_EQUAL, default, true, () => {
            FaceDirection(Owner, Other1);
            Distance = DistanceBetweenObjects("Owner", "Other1");
            IsMoving = GetStatus(Other1, IsMoving);
            If(IsMoving, default, CO_EQUAL, default, false, () => {
                Distance = Math(0 + (Distance ?? 0), MO_SUBTRACT, 25);
            });
            Else(() => {
                LeadPos = GetPointByUnitFacingOffset(Other1, 125, 0);
                FaceDirection(Owner, LeadPos);
                Distance = DistanceBetweenObjectAndPoint(Owner, LeadPos);
            });
            If(Distance, default, CO_GREATER_THAN_OR_EQUAL, MaxRange, default, () => {
                Pos = GetPointByUnitFacingOffset(Owner, 0 + (MaxRange ?? 0), 0);
            });
            Else(() => {
                Distance = Math(0 + (Distance ?? 0), MO_MAX, 25);
                Pos = GetPointByUnitFacingOffset(Owner, 0 + (Distance ?? 0), 0);
            });
        });
        NextBuffVars.Count = Count;
        NextBuffVars.TargetPos = TargetPos;
        CheckPos = GetPointByUnitFacingOffset(Owner, 75, 0);
        CanMove = GetStatus(Owner, GetCanMove);
        If(CanMove, default, CO_EQUAL, default, false, () => {
            Pos = GetPointByUnitFacingOffset(Owner, 40, 0);
        });
        Pathable = IsPathable(CheckPos);
        If(Pathable, default, CO_EQUAL, default, false, () => {
            CheckPos = GetPointByUnitFacingOffset(Owner, 125, 0);
            Pathable = IsPathable(CheckPos);
            If(Pathable, default, CO_EQUAL, default, false, () => {
                Pos = GetPointByUnitFacingOffset(Owner, 75, 180);
            });
        });
        If(Count, default, CO_EQUAL, default, 0, () => {
            UnlockAnimation(Owner, true);
            PlayAnimation("Spell1a", 0, Owner, false, true, true);
            SpellBuffAdd(Owner, Owner, "RivenTriCleaveSoundOne", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
            SpellBuffAdd(Owner, Owner, "RivenTriCleaveBuffer", 1, 1, 0.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SetSlotSpellCooldownTimeVer2(0.25, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            SpellBuffAdd(Owner, Owner, "RivenTriCleaveDamage", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.75, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            Move(Owner, Pos, 825, 15, 15, FURTHEST_WITHIN_RANGE, POSTPONE_CURRENT_ORDER, 275, KEEP_CURRENT_FACING);
        });
        If(Count, default, CO_EQUAL, default, 1, () => {
            UnlockAnimation(Owner, true);
            PlayAnimation("Spell1b", 0, Owner, false, true, true);
            SpellBuffAdd(Owner, Owner, "RivenTriCleaveSoundTwo", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
            SpellBuffAdd(Owner, Owner, "RivenTriCleaveBufferB", 1, 1, 0.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SetSlotSpellCooldownTimeVer2(0.25, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            SpellBuffAdd(Owner, Owner, "RivenTriCleaveDamage", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.75, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            Move(Owner, Pos, 825, 15, 15, FURTHEST_WITHIN_RANGE, POSTPONE_CURRENT_ORDER, 275, KEEP_CURRENT_FACING);
        });
        If(Count, default, CO_EQUAL, default, 2, () => {
            UnlockAnimation(Owner, true);
            PlayAnimation("Spell1c", 0, Owner, false, true, true);
            SpellBuffAdd(Owner, Owner, "RivenTriCleaveSoundThree", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
            SpellBuffAdd(Owner, Owner, "RivenTriCleaveDamage", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.75, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            Move(Owner, Pos, 900, 75, 15, FURTHEST_WITHIN_RANGE, POSTPONE_CURRENT_ORDER, 375, KEEP_CURRENT_FACING);
            SpellBuffClear(Owner, "RivenTriCleave");
        });
        SpellBuffAdd(Owner, Owner, "RivenSword", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 1050, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 1000, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        IfHasBuff(Owner, Owner, "Crystallize", () => {
            
        });
        Else(() => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            this.MeltingTime = 5;
            TargetPos = GetCastSpellTargetPos();
            OwnerPos = GetUnitPosition(Owner);
            Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
            teamID = GetTeamID(default);
            Iter = this.VALUE_BY_LEVEL;
            LineWidth = this.VALUE_BY_LEVEL;
            halfLength = this.VALUE_BY_LEVEL;
            FoundFirstPos = false;
            FacingPoint = GetPointByUnitFacingOffset(Owner, 9999, 0);
            ForEachPointOnLine(OwnerPos, TargetPos, 0 + (LineWidth ?? 0), 0 + (Distance ?? 0), 0 + (Iter ?? 0), (Pos) => {
                Other2 = SpawnMinion("IceBlock", "AniviaIceblock", "idle.lua", Pos, teamID ?? TEAM_UNKNOWN, true, true, true, true, false, true, 0, false, false, Nothing, default);
                FaceDirection(Other2, FacingPoint);
                SpellBuffAdd(Owner, Other2, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SetStatus(Other2, default, SetGhostProof);
            });
        });
        IfHasBuff(Owner, Owner, "FlashFrost", () => {
            SpellBuffRemove(Owner, "FlashFrost", Owner, default);
        });
        Else(() => {
            Level = GetCastInfo(GetCastSpellLevelPlusOne);
            TargetPos = GetCastSpellTargetPos();
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0.285);
            SpellBuffAdd(Attacker, Target, default, 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        });
        IfHasBuff(Owner, Owner, "UdyrPhoenixStance", () => {
            SpellBuffRemove(Owner, "UdyrPhoenixStance", Owner, default);
        });
        IfHasBuff(Owner, Owner, "UdyrTurtleStance", () => {
            SpellBuffRemove(Owner, "UdyrTurtleStance", Owner, default);
        });
        IfHasBuff(Owner, Owner, "UdyrTigerStance", () => {
            SpellBuffRemove(Owner, "UdyrTigerStance", Owner, default);
        });
        CooldownPerc = GetStat(GetPercentCooldownMod, Owner);
        CooldownPerc = Math(1, MO_ADD, 0 + (CooldownPerc ?? 0));
        CooldownPerc = Math(1.5, MO_MULTIPLY, 0 + (CooldownPerc ?? 0));
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        SpellBuffAdd(Owner, Owner, default, 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "UdyrBearActivation", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        teamID = GetTeamID(default);
        PointToSpawn = GetPointByUnitFacingOffset(Owner, 25, 0);
        PointToFace = GetPointByUnitFacingOffset(Owner, -100, 0);
        Other1 = SpawnMinion("ConeBreathMarker", "TestCubeRender10Vision", "idle.lua", PointToSpawn, teamID ?? TEAM_NEUTRAL, false, true, false, false, false, true, 1, false, false, Owner, default);
        FaceDirection(Other1, PointToFace);
        SpellBuffAdd(Attacker, Other1, "ShyvanaFireballDragonMinion", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 1250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", true, (Unit) => {
            SpellBuffClear(Unit, "RenektonTargetSliced");
        });
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        MoveSpeed = GetStat(GetMovementSpeed, Owner);
        DashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 750);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            FaceDirection(Owner, TargetPos);
            Distance = 450;
            TargetPos = GetPointByUnitFacingOffset(Owner, 450, 0);
        });
        IfNotHasBuff(Owner, Owner, "RenektonSliceAndDiceDelay", () => {
            CooldownMod = GetStat(GetPercentCooldownMod, Owner);
            Multiplier = Math(1, MO_ADD, 0 + (CooldownMod ?? 0));
            CooldownTime = this.VALUE_BY_LEVEL;
            DebuffTime = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (CooldownTime ?? 0));
            SpellBuffAdd(Owner, Owner, "RenektonSliceAndDiceTimer", 1, 1, 0 + (DebuffTime ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            NextBuffVars.DiceVersion = false;
        });
        Else(() => {
            NextBuffVars.DiceVersion = true;
            SpellBuffClear(Owner, "RenektonSliceAndDiceDelay");
        });
        NextBuffVars.DashSpeed = DashSpeed;
        NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.ArmorShred = this.VALUE_BY_LEVEL;
        NextBuffVars.Distance = Distance;
        NextBuffVars.TargetPos = TargetPos;
        SpellBuffAdd(Attacker, Owner, "RenektonSliceAndDice", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.1, true, false, false, default);
        Point1 = GetPointByUnitFacingOffset(Owner, 300, 20);
        Point2 = GetPointByUnitFacingOffset(Owner, 300, -20);
        Point3 = GetPointByUnitFacingOffset(Owner, 325, 0);
        SpellCast(Owner, Nothing, Point1, Point1, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        SpellCast(Attacker, Nothing, Point2, Point2, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        SpellCast(Attacker, Nothing, Point3, Point3, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        Point4 = GetPointByUnitFacingOffset(Owner, 310, 10);
        Point5 = GetPointByUnitFacingOffset(Owner, 310, -10);
        SpellCast(Attacker, Nothing, Point4, Point5, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        SpellCast(Attacker, Nothing, Point5, Point5, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        SpellBuffAdd(Owner, Owner, "ShyvanaTransform", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        NextBuffVars.TargetPos = TargetPos;
        SpellBuffAdd(Target, Owner, "ShyvanaTransformLeap", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
        Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
        Move(Owner, TargetPos, 1100, 10, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        TargetPos = GetPointByUnitFacingOffset(Owner, 75 + (Distance ?? 0), 0);
        If(Distance, default, CO_LESS_THAN, default, 300, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 375, 0);
        });
        If(Distance, default, CO_GREATER_THAN, default, 950, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 950, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 1250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", true, (Unit) => {
            SpellBuffClear(Unit, "RenektonTargetSliced");
        });
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        MoveSpeed = GetStat(GetMovementSpeed, Owner);
        DashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 750);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            FaceDirection(Owner, TargetPos);
            Distance = 450;
            TargetPos = GetPointByUnitFacingOffset(Owner, 450, 0);
        });
        IfNotHasBuff(Owner, Owner, "RenektonSliceAndDiceDelay", () => {
            CooldownMod = GetStat(GetPercentCooldownMod, Owner);
            Multiplier = Math(1, MO_ADD, 0 + (CooldownMod ?? 0));
            CooldownTime = this.VALUE_BY_LEVEL;
            DebuffTime = Math(0 + (Multiplier ?? 0), MO_MULTIPLY, 0 + (CooldownTime ?? 0));
            SpellBuffAdd(Owner, Owner, "RenektonSliceAndDiceTimer", 1, 1, 0 + (DebuffTime ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            NextBuffVars.DiceVersion = false;
        });
        Else(() => {
            NextBuffVars.DiceVersion = true;
            SpellBuffClear(Owner, "RenektonSliceAndDiceDelay");
        });
        NextBuffVars.DashSpeed = DashSpeed;
        NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.ArmorShred = this.VALUE_BY_LEVEL;
        NextBuffVars.Distance = Distance;
        NextBuffVars.TargetPos = TargetPos;
        SpellBuffAdd(Attacker, Owner, "RenektonSliceAndDice", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.1, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 850, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 925, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        NextBuffVars.Level = Level;
        NextBuffVars.BonusHealth = this.VALUE_BY_LEVEL;
        BaseBurn = this.VALUE_BY_LEVEL;
        NextBuffVars.MaximumSpeed = this.VALUE_BY_LEVEL;
        SelfAP = GetStat(GetFlatMagicDamageMod, Owner);
        APBonus = Math(0.05, MO_MULTIPLY, 0 + (SelfAP ?? 0));
        NextBuffVars.BurnDamage = Math(0 + (BaseBurn ?? 0), MO_ADD, 0 + (APBonus ?? 0));
        SpellBuffAdd(Owner, Owner, default, 1, 1, 15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        RagePercent = GetPAROrHealth(Owner, GetPARPercent, PAR_OTHER);
        HealthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_OTHER);
        SpellBuffAdd(Owner, Owner, "RenektonUnlockAnimationCleave", 1, 1, 0.24, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell1", 0, Owner, false, false, true);
        FuryGainIncrement = this.VALUE_BY_LEVEL;
        FuryGain = 0;
        BonusDamage = this.VALUE_BY_LEVEL;
        WeaponDamage = GetTotalAttackDamage(Owner);
        BaseDamage = GetStat(GetBaseAttackDamage, Owner);
        WeaponDamage = Math(0 + (WeaponDamage ?? 0), MO_SUBTRACT, 0 + (BaseDamage ?? 0));
        WeaponDamage = Math(0 + (WeaponDamage ?? 0), MO_MULTIPLY, 0.8);
        DamageToDeal = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (WeaponDamage ?? 0));
        RangeVar = 400;
        IfHasBuff(Owner, Owner, "RenektonReignOfTheTyrant", () => {
            RangeVar = Math(1.2, MO_MULTIPLY, 0 + (RangeVar ?? 0));
        });
        If(RagePercent, default, CO_GREATER_THAN_OR_EQUAL, default, 0.5, () => {
            SpellEffectCreate(c, default, "renektoncleave_trail_rage.troy ", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, "spine", default, Owner, default, default, true, default, default, false, default, default, default);
            ForEachUnitInTargetArea(Owner, Owner, 0 + (RangeVar ?? 0), "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                ShouldHit = true;
                Visible = CanSeeTarget(Owner, Unit);
                If(Visible, default, CO_EQUAL, default, false, () => {
                    If(Unit, default, CO_IS_NOT_HERO, default, default, () => {
                        ShouldHit = false;
                    });
                });
                If(ShouldHit, default, CO_EQUAL, default, true, () => {
                    NextBuffVars.DrainPercent = 0.1;
                    NextBuffVars.MaxDrain = this.VALUE_BY_LEVEL;
                    SpellBuffAdd(Attacker, Target, "RenektonCleaveDrain", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Unit);
                    If(Visible, default, CO_EQUAL, default, true, () => {
                        SpellBuffAdd(Owner, Unit, "RenektonBloodSplatterTarget", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                    If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                        ApplyDamage(Owner, Unit, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1.5, 0, 0, true, false, Attacker);
                    });
                    Else(() => {
                        ApplyDamage(Owner, Unit, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1.5, 0, 0, true, false, Attacker);
                    });
                });
            });
            IncPAR(Owner, -50);
            SpellBuffClear(Owner, "RenektonRageReady");
        });
        Else(() => {
            SpellEffectCreate(c, default, "renektoncleave_trail.troy ", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, "spine", default, Owner, default, default, true, default, default, false, default, default, default);
            ForEachUnitInTargetArea(Owner, Owner, 0 + (RangeVar ?? 0), "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                ShouldHit = true;
                Visible = CanSeeTarget(Owner, Unit);
                If(Visible, default, CO_EQUAL, default, false, () => {
                    If(Unit, default, CO_IS_NOT_HERO, default, default, () => {
                        ShouldHit = false;
                    });
                });
                If(ShouldHit, default, CO_EQUAL, default, true, () => {
                    NextBuffVars.DrainPercent = 0.05;
                    NextBuffVars.MaxDrain = this.VALUE_BY_LEVEL;
                    BreakSpellShields(Unit);
                    SpellBuffAdd(Attacker, Target, "RenektonCleaveDrain", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                        ApplyDamage(Owner, Unit, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, true, false, Attacker);
                    });
                    Else(() => {
                        ApplyDamage(Owner, Unit, 0 + (DamageToDeal ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, true, false, Attacker);
                    });
                    FuryGain = Math(0 + (FuryGain ?? 0), MO_ADD, 0 + (FuryGainIncrement ?? 0));
                    FuryGain = Math(0 + (FuryGain ?? 0), MO_MIN, 25);
                    If(Visible, default, CO_EQUAL, default, true, () => {
                        SpellBuffAdd(Owner, Unit, "RenektonBloodSplatterTarget", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
            IncPAR(Owner, 0 + (FuryGain ?? 0));
            If(HealthPercent, default, CO_LESS_THAN_OR_EQUAL, CharVars.RageThreshold, default, () => {
                FuryGain = Math(0.5, MO_MULTIPLY, 0 + (FuryGain ?? 0));
                IncPAR(Owner, 0 + (FuryGain ?? 0));
            });
        });
        SpellBuffClear(Owner, "RenektonCleaveDrain");
        SpellBuffAdd(Attacker, Target, "MaliceandSpite", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTimeVer2(0, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
        RagePercent = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ForNClosestUnitsInTargetArea(Owner, Owner, 355, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", 1, true, default, (Unit) => {
            SpellCast(Owner, Unit, Owner, Owner, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        });
        NextBuffVars.MovementSpeed = this.VALUE_BY_LEVEL;
        NextBuffVars.DamagePerTick = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.MovementSpeed = this.VALUE_BY_LEVEL;
        NextBuffVars.DamagePerTick = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "UdyrBearStance", () => {
            SpellBuffRemove(Owner, "UdyrBearStance", Owner, default);
        });
        IfHasBuff(Owner, Owner, "UdyrTigerStance", () => {
            SpellBuffRemove(Owner, "UdyrTigerStance", Owner, default);
        });
        IfHasBuff(Owner, Owner, "UdyrTurtleStance", () => {
            SpellBuffRemove(Owner, "UdyrTurtleStance", Owner, default);
        });
        CooldownPerc = GetStat(GetPercentCooldownMod, Owner);
        CooldownPerc = Math(1, MO_ADD, 0 + (CooldownPerc ?? 0));
        CooldownPerc = Math(1.5, MO_MULTIPLY, 0 + (CooldownPerc ?? 0));
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        SpellBuffAdd(Owner, Owner, default, 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellEffectCreate(Phoenixparticle, default, "PhoenixStance.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "UdyrPhoenixActivation", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        IfHasBuff(Owner, Owner, "UdyrBearStance", () => {
            SpellBuffRemove(Owner, "UdyrBearStance", Owner, default);
        });
        IfHasBuff(Owner, Owner, "UdyrTigerStance", () => {
            SpellBuffRemove(Owner, "UdyrTigerStance", Owner, default);
        });
        IfHasBuff(Owner, Owner, "UdyrPhoenixStance", () => {
            SpellBuffRemove(Owner, "UdyrPhoenixStance", Owner, default);
        });
        IfHasBuff(Owner, Owner, "UdyrTurtleActivation", () => {
            SpellBuffRemove(Owner, "UdyrTurtleActivation", Owner, default);
        });
        CooldownPerc = GetStat(GetPercentCooldownMod, Owner);
        CooldownPerc = Math(1, MO_ADD, 0 + (CooldownPerc ?? 0));
        CooldownPerc = Math(1.5, MO_MULTIPLY, 0 + (CooldownPerc ?? 0));
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        SpellBuffAdd(Owner, Owner, default, 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        APAmount = GetStat(GetFlatMagicDamageMod, Owner);
        APAmount = Math(0.5, MO_MULTIPLY, 0 + (APAmount ?? 0));
        ShieldAmount = this.VALUE_BY_LEVEL;
        ShieldAmount = Math(0 + (APAmount ?? 0), MO_ADD, 0 + (ShieldAmount ?? 0));
        NextBuffVars.ShieldAmount = ShieldAmount;
        SpellBuffAdd(Owner, Owner, "UdyrTurtleActivation", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        IfHasBuff(Owner, Owner, "UdyrBearStance", () => {
            SpellBuffRemove(Owner, "UdyrBearStance", Owner, 0);
        });
        IfHasBuff(Owner, Owner, "UdyrPhoenixStance", () => {
            SpellBuffRemove(Owner, "UdyrPhoenixStance", Owner, 0);
        });
        IfHasBuff(Owner, Owner, "UdyrTurtleStance", () => {
            SpellBuffRemove(Owner, "UdyrTurtleStance", Owner, 0);
        });
        CooldownPerc = GetStat(GetPercentCooldownMod, Owner);
        CooldownPerc = Math(1, MO_ADD, 0 + (CooldownPerc ?? 0));
        CooldownPerc = Math(1.5, MO_MULTIPLY, 0 + (CooldownPerc ?? 0));
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        CurrentCD = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(CurrentCD, default, CO_LESS_THAN_OR_EQUAL, CooldownPerc, default, () => {
            SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + (CooldownPerc ?? 0));
        });
        NextBuffVars.activeAttackSpeed = this.VALUE_BY_LEVEL;
        NextBuffVars.passiveAttackSpeed = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UdyrTigerPunch", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(Tigerparticle, default, "TigerStance.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "UdyrTigerShred", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.DamagePerTick = this.VALUE_BY_LEVEL;
        NextBuffVars.MRminus = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 2000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectUntargetable ", "AlphaStrikeMarker", true, (Unit) => {
            IfHasBuff(Unit, Owner, "AlphaStrikeMarker", () => {
                Pos = GetPointByUnitFacingOffset(Unit, 75, 0);
                TeleportToPosition(Owner, Pos);
                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                    IssueOrder(Owner, AI_ATTACKTO, default, Unit);
                });
                SpellBuffRemove(Unit, "AlphaStrikeMarker", Owner, 0);
                SpellBuffRemove(Owner, "AlphaStrikeMarker", Owner, 0);
            });
        });
        SpellBuffRemove(Owner, "WujuStyle", Owner, default);
        SpellBuffAdd(Owner, Owner, "SoulShacklesOwner", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 1300, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 1150, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, default, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, default, default, default);
        IfHasBuff(Owner, Owner, "Crystallize", () => {
            
        });
        Else(() => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            TargetPos = GetCastSpellTargetPos();
            teamID = GetTeamID(default);
            Other3 = SpawnMinion("PlagueBlock", "TrundleWall", "idle.lua", TargetPos, teamID ?? TEAM_UNKNOWN, true, true, true, true, false, true, 0, false, false, Nothing, default);
            NextBuffVars.ID = 1;
            SpellBuffAdd(Owner, Other3, "TrundleCircle", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            FaceDirection(Other3, Owner);
        });
        BaseDamage = this.VALUE_BY_LEVEL;
        AP = GetStat(GetFlatMagicDamageMod, Owner);
        APDamage = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.65);
        StartingDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (APDamage ?? 0));
        CharVars.StartingDamage = StartingDamage;
        SpellBuffClear(Owner, "OrianaGhostSelf");
        SetSpellOffsetTarget(3, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        SetSpellOffsetTarget(1, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        SpellBuffClear(Owner, "OrianaBlendDelay");
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        OwnerPos = GetUnitPosition(Owner);
        CharVars.IzunaPercent = 1;
        CastRange = 885;
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        If(Distance, default, CO_GREATER_THAN, CastRange, default, () => {
            FaceDirection(Owner, TargetPos);
            TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (CastRange ?? 0), 0);
        });
        If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 150, () => {
            FaceDirection(Owner, TargetPos);
            TargetPos = GetPointByUnitFacingOffset(Owner, 150, 0);
        });
        NextBuffVars.GhostAlive = CharVars.GhostAlive;
        Deployed = false;
        ShiftWithoutMissile = false;
        ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf AffectUntargetable ", 1, true, "OrianaGhost", (Unit) => {
            Deployed = true;
            TargetPos = GetCastSpellTargetPos();
            Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
            If(Distance, default, CO_GREATER_THAN, CastRange, default, () => {
                TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (CastRange ?? 0), 0);
            });
            CastPos = GetUnitPosition(Unit);
            SpellBuffClear(Unit, "OrianaGhost");
            Distance = DistanceBetweenPoints(CastPos, TargetPos);
            If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 75, () => {
                NextBuffVars.TargetPos = TargetPos;
                NextBuffVars.CastPos = CastPos;
                SpellBuffAdd(Owner, Owner, "OrianaIzuna", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SpellCast(Owner, Nothing, TargetPos, TargetPos, true, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, CastPos);
            });
            Else(() => {
                ShiftWithoutMissile = true;
            });
        });
        If(Deployed, default, CO_EQUAL, default, false, () => {
            IfHasBuff(Owner, Nothing, "OriannaBallTracker", () => {
                CastPos = CharVars.BallPosition;
                SpellBuffClear(Owner, "OriannaBallTracker");
                TargetPos = GetCastSpellTargetPos();
                Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
                If(Distance, default, CO_GREATER_THAN, CastRange, default, () => {
                    TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (CastRange ?? 0), 0);
                });
                Distance = DistanceBetweenPoints(CharVars.BallPosition, TargetPos);
                If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 75, () => {
                    NextBuffVars.TargetPos = TargetPos;
                    NextBuffVars.CastPos = CharVars.BallPosition;
                    SpellBuffAdd(Owner, Owner, "OrianaIzuna", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    SpellCast(Owner, Nothing, TargetPos, TargetPos, true, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, CharVars.BallPosition);
                });
                Else(() => {
                    CastPos = CharVars.BallPosition;
                    ShiftWithoutMissile = true;
                });
            });
            Else(() => {
                CastPos = GetUnitPosition(Owner);
                Distance = DistanceBetweenPoints(CastPos, TargetPos);
                If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 75, () => {
                    NextBuffVars.TargetPos = TargetPos;
                    NextBuffVars.CastPos = CastPos;
                    SpellBuffAdd(Owner, Owner, "OrianaIzuna", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    SpellCast(Owner, Nothing, TargetPos, TargetPos, true, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, CastPos);
                });
                Else(() => {
                    ShiftWithoutMissile = true;
                });
            });
        });
        If(ShiftWithoutMissile, default, CO_EQUAL, default, true, () => {
            TeamID = GetTeamID(default);
            Other3 = SpawnMinion("TheDoomBall", "OriannaBall", "idle.lua", TargetPos, TeamID ?? TEAM_ORDER, false, true, false, true, true, true, 0, default, true, Owner, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SpellEffectCreate(Temp, default, "Oriana_Izuna_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Nothing, default, TargetPos, true, default, default, false, false, default, default);
            ForEachUnitInTargetArea(Attacker, Other3, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Unit) => {
                BaseDamage = this.VALUE_BY_LEVEL;
                AP = GetStat(GetFlatMagicDamageMod, Owner);
                BonusDamage = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.6);
                TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
                TotalDamage = Math(0 + (TotalDamage ?? 0), MO_MULTIPLY, 0 + (CharVars.IzunaPercent ?? 0));
                CharVars.IzunaPercent = Math(0.9, MO_MULTIPLY, 0 + (CharVars.IzunaPercent ?? 0));
                CharVars.IzunaPercent = Math(0.4, MO_MAX, 0 + (CharVars.IzunaPercent ?? 0));
                NextBuffVars.TotalDamage = TotalDamage;
                IfNotHasBuff(Unit, Nothing, "OrianaIzunaDamage", () => {
                    BreakSpellShields(Unit);
                    SpellBuffAdd(Owner, Unit, "OrianaIzunaDamage", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        SpellBuffAdd(Owner, Owner, "OrianaGlobalCooldown", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        LeftPoint = GetPointByUnitFacingOffset(Owner, 500, 90);
        RightPoint = GetPointByUnitFacingOffset(Owner, 500, -90);
        LeftDistance = DistanceBetweenPoints(CastPos, LeftPoint);
        RightDistance = DistanceBetweenPoints(CastPos, RightPoint);
        If(LeftDistance, default, CO_GREATER_THAN_OR_EQUAL, RightDistance, default, () => {
            PlayAnimation("Spell1b", 1, Owner, true, false, false);
        });
        Else(() => {
            PlayAnimation("Spell1", 1, Owner, true, false, false);
        });
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffClear(Owner, "0");
        SpellBuffClear(Owner, "OrianaGhostSelf");
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 775, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 800, 0);
        });
        NextBuffVars.GhostAlive = CharVars.GhostAlive;
        Deployed = false;
        ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes ", 1, true, "OrianaGhost", (Unit) => {
            Deployed = true;
            TargetPos = GetCastSpellTargetPos();
            Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
            If(Distance, default, CO_GREATER_THAN, default, 775, () => {
                TargetPos = GetPointByUnitFacingOffset(Owner, 750, 0);
            });
            CastPos = GetUnitPosition(Unit);
            NextBuffVars.CastPos = CastPos;
            NextBuffVars.TargetPos = TargetPos;
            SpellBuffAdd(Owner, Owner, "OrianaIzuna", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffClear(Unit, "OrianaGhost");
            IfHasBuff(Owner, Owner, "OrianaDesperatePower", () => {
                SpellCast(Owner, Nothing, TargetPos, TargetPos, true, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, CastPos);
            });
            Else(() => {
                SpellCast(Owner, Nothing, TargetPos, TargetPos, true, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, CastPos);
            });
        });
        If(Deployed, default, CO_EQUAL, default, false, () => {
            If(CharVars.GhostAlive, default, CO_EQUAL, default, true, () => {
                
            });
            Else(() => {
                CastPos = GetUnitPosition(Owner);
                NextBuffVars.CastPos = CastPos;
                NextBuffVars.TargetPos = TargetPos;
                SpellBuffAdd(Owner, Owner, "OrianaIzuna", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                IfHasBuff(Owner, Owner, "OrianaDesperatePower", () => {
                    SpellCast(Owner, Nothing, TargetPos, TargetPos, true, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, CastPos);
                });
                Else(() => {
                    SpellCast(Owner, Nothing, TargetPos, TargetPos, true, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, CastPos);
                });
            });
        });
        PlayAnimation("Spell2", 1.25, Owner, true, false, true);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OrianaGlobalCooldown", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OrianaGlobalCooldown", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Damage = this.VALUE_BY_LEVEL;
        Deployed = false;
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        RangeVar = this.VALUE_BY_LEVEL;
        SelfAP = GetStat(GetFlatMagicDamageMod, Owner);
        BonusDamage = Math(0 + (SelfAP ?? 0), MO_MULTIPLY, 0.7);
        Damage = Math(0 + (Damage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        TeamID = GetTeamID(default);
        ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", 1, true, "OrianaGhost", (Unit) => {
            Deployed = true;
            TargetPos = GetUnitPosition(Unit);
            If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                CurrentType = 0;
            });
            Else(() => {
                CurrentType = 1;
            });
            Other1 = SetUnit(Unit);
        });
        If(Deployed, default, CO_EQUAL, default, false, () => {
            IfHasBuff(Owner, Nothing, "OriannaBallTracker", () => {
                CurrentType = 5;
                TargetPos = CharVars.BallPosition;
            });
            Else(() => {
                TargetPos = GetUnitPosition(Owner);
                CurrentType = 3;
                TargetPos = GetPointByUnitFacingOffset(Owner, 0, 0);
            });
        });
        If(CurrentType, default, CO_NOT_EQUAL, CharVars.UltimateType, default, () => {
            CurrentType = 5;
            TargetPos = CharVars.UltimateTargetPos;
        });
        If(CurrentType, default, CO_EQUAL, default, 0, () => {
            IsStealthed = GetStatus(Other1, GetStealthed);
            If(IsStealthed, default, CO_EQUAL, default, false, () => {
                SpellEffectCreate(this.Particle, default, "Oriana_Shockwave_nova_ally.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Other1, "SpinnigTopRidge", TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(this.Particle, default, "Oriana_Shockwave_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
            });
        });
        ElseIf(CurrentType, default, CO_EQUAL, default, 1, () => {
            SpellEffectCreate(this.Particle, default, "Oriana_Shockwave_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Other1, "SpinnigTopRidge", TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
        });
        ElseIf(CurrentType, default, CO_EQUAL, default, 2, () => {
            SpellEffectCreate(this.Particle, default, "Oriana_Shockwave_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, "SpinnigTopRidge", TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
        });
        ElseIf(CurrentType, default, CO_EQUAL, default, 3, () => {
            SpellEffectCreate(this.Particle, default, "Oriana_Shockwave_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "SpinnigTopRidge", TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
        });
        ElseIf(CurrentType, default, CO_EQUAL, default, 5, () => {
            SpellEffectCreate(this.Particle, default, "Oriana_Shockwave_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
        });
        ForEachUnitInTargetArea(Owner, TargetPos, 0 + (RangeVar ?? 0), "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            CanSee = CanSeeTarget(Owner, Unit);
            ValidTarget = true;
            If(Unit, default, CO_IS_NOT_HERO, default, default, () => {
                If(CanSee, default, CO_EQUAL, default, false, () => {
                    ValidTarget = false;
                });
            });
            If(ValidTarget, default, CO_EQUAL, default, true, () => {
                BreakSpellShields(Unit);
                OldPos = GetPointByUnitFacingOffset(Unit, 425, 0);
                FaceDirection(Unit, TargetPos);
                SpellEffectCreate(Temp, default, "OrianaDetonate_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                ApplyDamage(Owner, Unit, 0 + (Damage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Owner);
                NewPos = GetPointByUnitFacingOffset(Unit, 425, -180);
                FaceDirection(Unit, OldPos);
                NextBuffVars.Distance = 790;
                NextBuffVars.IdealDistance = 870;
                NextBuffVars.Gravity = 25;
                NextBuffVars.Speed = 775;
                NextBuffVars.Center = NewPos;
                SpellBuffAdd(Owner, Unit, "OrianaStun", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                SpellBuffAdd(Owner, Unit, "MoveAwayCollision", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
            });
        });
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        PlayAnimation("Spell2", 0, Owner, false, true, false);
        SpellBuffAdd(Owner, Owner, "OrianaGlobalCooldown", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        Damage = this.VALUE_BY_LEVEL;
        Deployed = false;
        SelfAP = GetStat(GetFlatMagicDamageMod, Owner);
        BonusDamage = Math(0 + (SelfAP ?? 0), MO_MULTIPLY, 0.5);
        Damage = Math(0 + (Damage ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf AffectUntargetable ", 1, true, "OrianaGhost", (Unit) => {
            Deployed = true;
            TargetPos = GetUnitPosition(Unit);
            If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                SpellEffectCreate(Particle, Particle2, "OrianaDissonance_ally_green.troy", "OrianaDissonance_ally_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(Particle, Particle2, "OrianaDissonance_ball_green.troy", "OrianaDissonance_ball_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
            });
        });
        If(Deployed, default, CO_EQUAL, default, false, () => {
            TargetPos = GetUnitPosition(Owner);
            IfHasBuff(Owner, Nothing, "OriannaBallTracker", () => {
                TargetPos = CharVars.BallPosition;
            });
            SpellEffectCreate(Particle, Particle2, "OrianaDissonance_cas_green.troy", "OrianaDissonance_cas_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
        });
        ForEachUnitInTargetArea(Owner, TargetPos, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellEffectCreate(Temp, default, "OrianaDissonance_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            ApplyDamage(Owner, Unit, 0 + (Damage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Owner);
            NextBuffVars.Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SpellBuffAdd(Attacker, Unit, "OrianaSlow", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
        });
        ForEachUnitInTargetArea(Owner, TargetPos, 225, "AffectFriends AffectMinions AffectHeroes ", default, true, (Unit) => {
            NextBuffVars.Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SpellBuffAdd(Attacker, Unit, "OrianaHaste", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        NextBuffVars.Particle2 = Particle2;
        NextBuffVars.Particle = Particle;
        NextBuffVars.targetPos = TargetPos;
        SpellBuffAdd(Owner, Owner, "OrianaDissonanceWave", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        TeamID = GetTeamID(default);
        Other3 = SpawnMinion("Noxious Trap", "Nidalee_Spear", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, true, false, true, true, true, 0, false, false, Owner, default);
        PlayAnimation("Spell1", 1, Other3, false, false, true);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 240, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        OwnerPos = GetUnitPosition(Owner);
        CastRange = 1640;
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        If(Distance, default, CO_GREATER_THAN, CastRange, default, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (CastRange ?? 0), 0);
        });
        NextBuffVars.GhostAlive = CharVars.GhostAlive;
        Deployed = false;
        ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes ", 1, true, "OrianaGhost", (Unit) => {
            Deployed = true;
            TargetPos = GetCastSpellTargetPos();
            Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
            If(Distance, default, CO_GREATER_THAN, CastRange, default, () => {
                TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (CastRange ?? 0), 0);
            });
            CastPos = GetUnitPosition(Unit);
            NextBuffVars.CastPos = CastPos;
            NextBuffVars.TargetPos = TargetPos;
            SpellCast(Owner, Nothing, TargetPos, TargetPos, true, 5, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, CastPos);
        });
        If(Deployed, default, CO_EQUAL, default, false, () => {
            If(CharVars.GhostAlive, default, CO_EQUAL, default, true, () => {
                
            });
            Else(() => {
                CastPos = GetUnitPosition(Owner);
                NextBuffVars.CastPos = CastPos;
                NextBuffVars.TargetPos = TargetPos;
                SpellCast(Owner, Nothing, TargetPos, TargetPos, true, 5, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, CastPos);
            });
        });
        PlayAnimation("Spell2", 1.25, Owner, true, false, true);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OrianaGlobalCooldown", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        If(TeamOfOwner, default, CO_EQUAL, default, 100, () => {
            FadeInColorFadeEffect(0, 0, 75, 1, 0.3, TEAM_ORDER);
            FadeOutColorFadeEffect(1, TEAM_CHAOS);
            FadeInColorFadeEffect(75, 0, 0, 1, 0.3, TEAM_CHAOS);
        });
        Else(() => {
            FadeInColorFadeEffect(0, 0, 75, 1, 0.3, TEAM_CHAOS);
            FadeOutColorFadeEffect(1, TEAM_ORDER);
            FadeInColorFadeEffect(75, 0, 0, 1, 0.3, TEAM_ORDER);
        });
        IfHasBuff(Attacker, Attacker, "NocturneParanoia", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            PlayAnimation("Spell4b", 1, Owner, false, false, true);
            NextBuffVars.NewCd = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Owner, "NocturneParanoia", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "NocturneParanoiaParticle", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
            SetSlotSpellCooldownTime(Attacker, 3, SPELLBOOK_CHAMPION, SpellSlots, 0.25);
            NextBuffVars.SightReduction = this.VALUE_BY_LEVEL;
            NextBuffVars.SpellLevel = this.VALUE_BY_LEVEL;
            If(TeamOfOwner, default, CO_EQUAL, default, 100, () => {
                ForEachChampion(TEAM_ORDER, default, true, (Unit) => {
                    SpellEffectCreate(asdf, default, "NocturneParanoiaStartOrderFriend.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Unit, true, Unit, "root", default, Unit, default, default, false, default, default, false, default, default, default);
                });
                ForEachChampion(TEAM_CHAOS, default, true, (Unit) => {
                    SpellEffectCreate(asdf, default, "NocturneParanoiaStartOrderFoe.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Unit, true, Unit, "root", default, Unit, default, default, false, default, default, false, default, default, default);
                    SpellBuffAdd(Attacker, Unit, "NocturneParanoiaTargeting", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, true, default);
                    BreakSpellShields(Unit);
                    SpellBuffAdd(Attacker, Unit, "NocturneParanoiaTarget", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, true, default);
                    ApplyNearSight(Attacker, Unit, 4);
                });
                ForEachChampion(TEAM_UNKNOWN, default, true, (Unit) => {
                    SpellBuffAdd(Attacker, Unit, "NocturneParanoiaTargetOrder", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, true, default);
                });
            });
            Else(() => {
                ForEachChampion(TEAM_CHAOS, default, true, (Unit) => {
                    SpellEffectCreate(asdf, default, "NocturneParanoiaStartChaosFriend.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Unit, true, Unit, "root", default, Unit, default, default, false, default, default, false, default, default, default);
                });
                ForEachChampion(TEAM_ORDER, default, true, (Unit) => {
                    SpellEffectCreate(asdf, default, "NocturneParanoiaStartChaosFoe.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Unit, true, Unit, "root", default, Unit, default, default, false, default, default, false, default, default, default);
                    SpellBuffAdd(Attacker, Unit, "NocturneParanoiaTargeting", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, true, default);
                    BreakSpellShields(Unit);
                    SpellBuffAdd(Attacker, Unit, "NocturneParanoiaTarget", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, true, default);
                    ApplyNearSight(Attacker, Unit, 4);
                });
                ForEachChampion(TEAM_UNKNOWN, default, true, (Unit) => {
                    SpellBuffAdd(Attacker, Unit, "NocturneParanoiaTargetChaos", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, true, default);
                });
            });
        });
        OwnerPos = GetCastSpellTargetPos();
        TeamID = GetTeamID(default);
        Other1 = SpawnMinion("birds", "TestCube", "idle.lua", OwnerPos, TeamID ?? TEAM_UNKNOWN, true, true, true, true, true, true, 0, false, true, Nothing, default);
        SpellBuffAdd(Attacker, Other1, "TrundleDesecrate", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell2", 1, Owner, false, true, true);
        this.WillRemove = false;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell2", 1, Owner, false, true, true);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.HastePercent = this.VALUE_BY_LEVEL;
        NextBuffVars.BonusAD = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Attacker, "NocturneDuskbringerHaste", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 400, () => {
            GravityVar = 40;
            SpeedVar = 1325;
            FaceDirection(Owner, TargetPos);
            TargetPos = GetPointByUnitFacingOffset(Owner, 400, 0);
            Distance = 400;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 300, () => {
            GravityVar = 35;
            SpeedVar = 1075;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 200, () => {
            GravityVar = 30;
            SpeedVar = 1025;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 100, () => {
            GravityVar = 25;
            SpeedVar = 800;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 25, () => {
            GravityVar = 20;
            SpeedVar = 800;
        });
        ElseIf(Distance, default, CO_LESS_THAN, default, 25, () => {
            GravityVar = 20;
            SpeedVar = 800;
            TargetPos = GetPointByUnitFacingOffset(Owner, 25, 0);
        });
        DestroyMissileForTarget(Owner);
        UnlockAnimation(Owner, false);
        CancelAutoAttack(Owner, true);
        PlayAnimation("Spell3a", 0.75, Owner, false, true, false);
        Move(Owner, TargetPos, 0 + (SpeedVar ?? 0), 0 + (GravityVar ?? 0), 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 500, FACE_MOVEMENT_DIRECTION);
        NextBuffVars.Damage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "FizzJumpBuffer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "FizzSeastoneTridentActive", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 300, () => {
            GravityVar = 30;
            SpeedVar = 1325;
            FaceDirection(Owner, TargetPos);
            TargetPos = GetPointByUnitFacingOffset(Owner, 300, 0);
            Distance = 275;
            Result = IsPathable(TargetPos);
            If(Result, default, CO_EQUAL, default, false, () => {
                CheckDistance = 300;
                While(CheckDistance, default, CO_LESS_THAN_OR_EQUAL, default, 400, () => {
                    CheckDistance = Math(0 + (CheckDistance ?? 0), MO_ADD, 25);
                    TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (CheckDistance ?? 0), 0);
                    Pathable = IsPathable(TargetPos);
                    If(Pathable, default, CO_EQUAL, default, true, () => {
                        Distance = CheckDistance ?? 0;
                        CheckDistance = 500;
                    });
                });
            });
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 200, () => {
            GravityVar = 25;
            SpeedVar = 1175;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 100, () => {
            GravityVar = 20;
            SpeedVar = 900;
        });
        ElseIf(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 25, () => {
            GravityVar = 15;
            SpeedVar = 825;
        });
        ElseIf(Distance, default, CO_LESS_THAN, default, 25, () => {
            GravityVar = 15;
            SpeedVar = 800;
            TargetPos = GetPointByUnitFacingOffset(Owner, 25, 0);
        });
        Move(Owner, TargetPos, 0 + (SpeedVar ?? 0), 0 + (GravityVar ?? 0), 0, FURTHEST_WITHIN_RANGE, POSTPONE_CURRENT_ORDER, 500, FACE_MOVEMENT_DIRECTION);
        NextBuffVars.Damage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell3d", 1, Owner, false, true, false);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        TeamID = GetTeamID(default);
        Other3 = SpawnMinion("Bantam Trap", "CaitlynTrap", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, true, false, true, true, false, 0, false, false, Owner, default);
        PlayAnimation("Spell1", 1, Other3, false, false, true);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        MaxStacks = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Other3, Owner, "FizzTempestTrapCount", 0 + (MaxStacks ?? 0), 1, 30, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, false, false, false, default);
        JumpBuffer = GetCastSpellTargetPos();
        CharVars.JumpBuffer = JumpBuffer;
        SpellBuffAdd(Owner, Owner, "FizzJumpBuffered", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.DefenseBonus = this.VALUE_BY_LEVEL;
        NextBuffVars.MagicDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Attacker, "LeonaSolarBarrier", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        NextBuffVars.SilenceDuration = this.VALUE_BY_LEVEL;
        NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "LeonaShieldOfDaybreak", 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        NextBuffVars.Distance = Distance;
        SpellEffectCreate(a, default, "Leona_SolarFlare_cas.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "root", default, Attacker, default, default, true, default, default, false, false, default, default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Owner, default);
        NextBuffVars.DamageAmount = this.VALUE_BY_LEVEL;
        NextBuffVars.Level = Level;
        SpellBuffAdd(Attacker, Other3, "LeonaSolarFlare", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.Bubble = AddPosPerceptionBubble(TeamOfOwner, 800, TargetPos, 4, Nothing, false);
        SpellBuffAdd(Owner, Owner, "LeonaSolarFlareVision", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CastPos = GetCastSpellTargetPos();
        FaceDirection(Owner, CastPos);
        CenterPos = GetPointByUnitFacingOffset(Owner, 225, 0);
        PlayAnimation("Attack1", 0.5, Owner, false, true, true);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetRectangle(Owner, CenterPos, 80, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", true, default, (Unit) => {
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.66, 0, false, false, Attacker);
            SpellBuffAdd(Owner, Unit, "RenektonBloodSplatterTarget", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SpellBuffAdd(Owner, Owner, "FizzUnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Skip = GetPointByUnitFacingOffset(Owner, 250, 0);
        Move(Owner, Skip, 600, 18, 25, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 300, FACE_MOVEMENT_DIRECTION);
        CancelAutoAttack(Owner, true);
        TeamID = GetTeamID(default);
        StartPos = GetPointByUnitFacingOffset(Owner, -75, 0);
        Other1 = SpawnMinion("TestCube", "TestCube", "idle.lua", StartPos, TeamID ?? TEAM_UNKNOWN, false, true, true, true, true, true, 10, true, false, Nothing, default);
        EndPos = GetPointByUnitFacingOffset(Owner, 550, 0);
        Other2 = SpawnMinion("TestCube", "TestCube", "idle.lua", EndPos, TeamID ?? TEAM_UNKNOWN, false, true, true, true, true, true, 10, true, false, Nothing, default);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(this.ParticleID, default, "kennen_btl_beam.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Unit, false, Other1, "head", default, Other2, "head", default, true, false, false, false, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 1250, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 1250, 0);
        });
        ElseIf(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 200, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 200, 0);
        });
        Else(() => {
            Distance = Math(0 + (Distance ?? 0), MO_ADD, 50);
            TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (Distance ?? 0), 0);
        });
        SpellBuffAdd(Owner, Owner, "FizzMarinerDoom", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 4, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        CharVars.UltFired = true;
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 700, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 700, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SpellBuffAdd(Owner, Owner, "LeonaZenithBlade", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffClear(Owner, "FizzUnlockAnimation");
        PlayAnimation("Spell6", 0, Owner, false, true, true);
        ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Owner, Unit, "RenektonBloodSplatterTarget", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 0, false, false, Attacker);
        });
        SpellBuffAdd(Owner, Owner, "FizzUnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffClear(Owner, "FizzQ1");
        CancelAutoAttack(Owner, true);
        SpellBuffAdd(Attacker, Attacker, "NocturneUmbraBladesAttack", 1, 1, 0.01, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffClear(Owner, "FizzMarinerDoomMissile");
        ForEachChampion(TEAM_UNKNOWN, default, true, (Unit) => {
            IfHasBuff(Unit, Owner, "FizzMarinerDoomBomb", () => {
                SpellBuffClear(Unit, "FizzMarinerDoomBomb");
            });
        });
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        NextBuffVars.DamageReduction = this.VALUE_BY_LEVEL;
        NextBuffVars.bonusDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "AlistarTrample", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        AbilityPower = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.2);
        BaseHeal = this.VALUE_BY_LEVEL;
        FinalHeal = Math(0 + (BaseHeal ?? 0), MO_ADD, 0 + (AbilityPower ?? 0));
        IncHealth(Owner, 0 + (FinalHeal ?? 0), Owner);
        SpellEffectCreate(par, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        FinalHeal = Math(0 + (FinalHeal ?? 0), MO_DIVIDE, 2);
        ForEachUnitInTargetArea(Owner, Owner, 575, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", default, true, (Unit) => {
            Temp1 = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
            If(Temp1, default, CO_LESS_THAN, default, 1, () => {
                ApplyAssistMarker(Attacker, Target, 10);
            });
            IncHealth(Unit, 0 + (FinalHeal ?? 0), Owner);
            SpellEffectCreate(par, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        SpellBuffAdd(Owner, Owner, "AlistarTrample", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ShieldAmount = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        BonusShield = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.8);
        Shield = Math(0 + (ShieldAmount ?? 0), MO_ADD, 0 + (BonusShield ?? 0));
        NextBuffVars.Shield = Shield;
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.DamageLevel = this.VALUE_BY_LEVEL;
        NextBuffVars.TargetPos = TargetPos;
        SpellBuffAdd(Attacker, Owner, "GragasBarrelRoll", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellCast(Attacker, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        OwnerPos = GetUnitPosition(Owner);
        Homed = 0;
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        TeamID = GetTeamID(default);
        If(Distance, default, CO_LESS_THAN_OR_EQUAL, default, 3000, () => {
            ForNClosestUnitsInTargetArea(Owner, TargetPos, 350, "AffectEnemies AffectNeutral AffectHeroes ", 999, true, "UrgotCorrosiveDebuff", (Unit) => {
                If(Homed, default, CO_EQUAL, default, 0, () => {
                    DistanceObjs = DistanceBetweenObjects("Owner", "Unit");
                    If(DistanceObjs, default, CO_LESS_THAN_OR_EQUAL, default, 1200, () => {
                        SpellEffectCreate(hit, default, "UrgotHeatseekingIndicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, true, Nothing, default, TargetPos, Nothing, default, TargetPos, true, default, default, default, default, default, default);
                        Homed = 1;
                        SpellCast(Owner, Unit, Owner, Owner, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
                        SpellEffectCreate(hit, default, "UrgotTargetIndicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, default, default, default, default);
                    });
                });
            });
            If(Homed, default, CO_EQUAL, default, 0, () => {
                ForNClosestUnitsInTargetArea(Owner, TargetPos, 350, "AffectEnemies AffectNeutral AffectMinions ", 999, true, "UrgotCorrosiveDebuff", (Unit) => {
                    If(Homed, default, CO_EQUAL, default, 0, () => {
                        DistanceObjs = DistanceBetweenObjects("Owner", "Unit");
                        If(DistanceObjs, default, CO_LESS_THAN_OR_EQUAL, default, 1200, () => {
                            SpellEffectCreate(hit, default, "UrgotHeatseekingIndicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, true, Nothing, default, TargetPos, Nothing, default, TargetPos, true, default, default, default, default, default, default);
                            Homed = 1;
                            SpellCast(Owner, Unit, Owner, Owner, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
                            SpellEffectCreate(hit, default, "UrgotTargetIndicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, default, default, default, default);
                        });
                    });
                });
            });
        });
        If(Homed, default, CO_EQUAL, default, 0, () => {
            SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, Owner);
        });
        SpellBuffRemove(Owner, "GragasBarrelRoll", Owner, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 600, () => {
            FaceDirection(Owner, TargetPos);
            Distance = 600;
            TargetPos = GetPointByUnitFacingOffset(Owner, 600, 0);
        });
        NextBuffVars.DashSpeed = this.VALUE_BY_LEVEL;
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.Distance = Distance;
        NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.MinimumDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Owner, "GragasBodySlam", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0.1, true, false, false, default);
        SpellEffectCreate(default, default, "gragas_bodySlam_cas_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        SpellBuffAdd(Attacker, Target, "GragasBodySlamHolder", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 1050, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 1050, 0);
        });
        Other2 = SpawnMinion("k", "TestCubeRender", "idle.lua", TargetPos, TeamID ?? TEAM_NEUTRAL, true, true, false, true, true, true, 0, default, true, Attacker, default);
        SpellCast(Owner, Other2, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, default);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 950, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 950, 0);
        });
        Other2 = SpawnMinion("k", "TestCubeRender", "idle.lua", TargetPos, TeamID ?? TEAM_NEUTRAL, true, true, false, true, true, true, 0, default, true, Attacker, default);
        SpellCast(Owner, Other2, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + (Level ?? 0), false, false, false, false, false, default);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        NextBuffVars.VolibearRDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.VolibearRSpeed = this.VALUE_BY_LEVEL;
        NextBuffVars.VolibearRRatio = 0.3;
        VolibearRCharges = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "VolibearRApplicator", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        CancelAutoAttack(Owner, true);
        SpellBuffAdd(Owner, Owner, "AlistarTrample", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellBuffAdd(Owner, Unit, "Pulverize", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Attacker);
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.partname, default, "volibear_E_aoe_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 350, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.partname, default, "volibear_E_aoe_indicator_02.troy", default, TeamID ?? TEAM_UNKNOWN, 350, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(default, default, "Volibear_E_cas_blast.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Nothing, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(default, default, "Volibear_E_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Nothing, default, default, true, false, false, false, false, default, default);
        NextBuffVars.VolibearESlow = this.VALUE_BY_LEVEL;
        NextBuffVars.VolibearEExtender = this.VALUE_BY_LEVEL;
        DamageToDeal = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Attacker, Attacker, 425, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellEffectCreate(TargetParticle, default, "volibear_E_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            BreakSpellShields(Unit);
            SpellBuffAdd(Attacker, Unit, default, 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
            ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 0, false, false, Attacker);
            If(Unit, default, CO_IS_NOT_HERO, default, default, () => {
                If(Unit, default, CO_IS_NOT_DEAD, default, default, () => {
                    ApplyFear(Owner, Unit, 2);
                });
            });
        });
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        NextBuffVars.SpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "VolibearQSpeed", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        ADRatio = 0.5;
        BonusDamage = GetStat(GetFlatPhysicalDamageMod, Owner);
        BonusDamage = Math(0 + (ADRatio ?? 0), MO_MULTIPLY, 0 + (BonusDamage ?? 0));
        TargetPos = GetCastSpellTargetPos();
        SpellEffectCreate(a, default, "KogMawLivingArtillery_mis.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "C_Mouth_d", default, Attacker, default, default, true, default, default, false, false, default, default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Owner, default);
        DamageAmount = this.VALUE_BY_LEVEL;
        NextBuffVars.BaseDamageAmount = this.VALUE_BY_LEVEL;
        NextBuffVars.BonusDamage = BonusDamage;
        DamageAmount = Math(0 + (DamageAmount ?? 0), MO_ADD, 0 + (BonusDamage ?? 0));
        NextBuffVars.FinalDamage = DamageAmount;
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Count = GetBuffCountFromAll(Owner, "KogMawLivingArtilleryCost");
        Count2 = Math(1, MO_ADD, 0 + (Count ?? 0));
        ExtraCost = Math(40, MO_MULTIPLY, 0 + (Count2 ?? 0));
        ExtraCost = Math(160, MO_MIN, 0 + (ExtraCost ?? 0));
        SetPARCostInc(Owner, 3, SpellSlots, 0 + (ExtraCost ?? 0), PAR_MANA);
        SpellBuffAdd(Attacker, Owner, "KogMawLivingArtilleryCost", 5, 1, 6, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.Bubble = AddPosPerceptionBubble(TeamOfOwner, 100, TargetPos, 1, Nothing, false);
        CharVars.BriggsCastPos = GetUnitPosition(Owner);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 600, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 600, 0);
        });
        SpellCast(Attacker, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        StopMove(Attacker);
        Pos = GetPointByUnitFacingOffset(Owner, 925, 0);
        SpellCast(Owner, Nothing, Pos, Pos, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 50, 0);
        SpellCast(Owner, Nothing, Pos, Pos, false, 7, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 925, 16);
        SpellCast(Owner, Nothing, Pos, Pos, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 925, -16);
        SpellCast(Owner, Nothing, Pos, Pos, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        SpellBuffRemove(Owner, "TalonShadowAssaultBuff", Owner, 0);
        SpellBuffRemove(Owner, "TalonShadowAssaultMisOne", Owner, 0);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 1150, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 1100, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        currentFury = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
        baseHeal = this.VALUE_BY_LEVEL;
        HealthPerFury = this.VALUE_BY_LEVEL;
        HealthToRestore = Math(0 + (currentFury ?? 0), MO_MULTIPLY, 0 + (HealthPerFury ?? 0));
        HealthToRestore = Math(0 + (baseHeal ?? 0), MO_ADD, 0 + (HealthToRestore ?? 0));
        SpellPower = GetStat(GetFlatMagicDamageMod, Owner);
        AbilityPowerMod = Math(1.5, MO_MULTIPLY, 0 + (SpellPower ?? 0));
        HealthToRestore = Math(0 + (HealthToRestore ?? 0), MO_ADD, 0 + (AbilityPowerMod ?? 0));
        IncHealth(Owner, 0 + (HealthToRestore ?? 0), Owner);
        SpellEffectCreate(Part, default, "Tryndamere_Heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        furyToRemove = Math(-1, MO_MULTIPLY, 0 + (currentFury ?? 0));
        IncPAR(Owner, 0 + (furyToRemove ?? 0));
        StopMove(Attacker);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        MoveSpeed = GetStat(GetMovementSpeed, Owner);
        dashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 850);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 425, () => {
            Distance = 425;
        });
        FaceDirection(Owner, TargetPos);
        TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (Distance ?? 0), 0);
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.Distance = Distance;
        NextBuffVars.dashSpeed = dashSpeed;
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.1, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TalonNoxianDiplomacyBuff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        SpellBuffAdd(Attacker, Target, "TalonNoxianDiplomacy", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        CancelAutoAttack(Owner, true);
        SpellEffectCreate(this.ParticleZ, default, "talon_ult_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Attacker, default, default, false, false, false, false, true, default, default);
        SpellEffectCreate(this.ParticleZ, default, "talon_invis_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Attacker, default, default, false, false, false, false, true, default, default);
        SpellBuffAdd(Attacker, Target, "TalonShadowAssaultAnimBuff", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TalonShadowAssaultBuff", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TalonShadowAssaultMisOne", 1, 1, 10000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 0);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 135);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, -90);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 45);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 180);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, -45);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 90);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, -135);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "TalonShadowAssaultToggle");
        SetStatus(Owner, default, SetCanCast);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetSlotSpellCooldownTimeVer2(0.5, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 950, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 950, 0);
        });
        Other2 = SpawnMinion("k", "TestCubeRender10Vision", "idle.lua", TargetPos, TeamID ?? TEAM_NEUTRAL, true, true, false, true, true, true, 50, false, true, Attacker, default);
        SpellCast(Owner, Other2, TargetPos, TargetPos, false, 3, ExtraSlots, 0 + (Level ?? 0), false, false, false, false, false, default);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 650, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 645, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = TargetPos;
        baseAbilityDamage = this.VALUE_BY_LEVEL;
        totalDamage = GetTotalAttackDamage(Owner);
        baseDamage = GetStat(GetBaseAttackDamage, Owner);
        bonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (baseDamage ?? 0));
        bonusDamage = Math(1.2, MO_MULTIPLY, 0 + (bonusDamage ?? 0));
        abilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        bonusDamage = Math(0 + (abilityPower ?? 0), MO_ADD, 0 + (bonusDamage ?? 0));
        NextBuffVars.Damage = Math(0 + (baseAbilityDamage ?? 0), MO_ADD, 0 + (bonusDamage ?? 0));
        NextBuffVars.WillRemove = false;
        OwnerPos = GetUnitPosition(Owner);
        SlashSpeed = 900;
        SlashSpeed = Math(0 + (SlashSpeed ?? 0), MO_MAX, 425);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        Duration = Math(0 + (Distance ?? 0), MO_DIVIDE, 0 + (SlashSpeed ?? 0));
        NextBuffVars.WillMove = true;
        NextBuffVars.SlashSpeed = SlashSpeed;
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 0.05 + (Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.AttackRangeIncrease = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        OwnerTeam = GetTeamID(default);
        CastPos = GetUnitPosition(Owner);
        SpellEffectCreate(p3, default, "talon_E_cast.troy", default, OwnerTeam ?? TEAM_NEUTRAL, 1, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, CastPos, Target, default, default, true, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "TalonRakeMissileOne", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        Pos = GetPointByUnitFacingOffset(Owner, 750, 0);
        SpellCast(Owner, Nothing, Pos, Pos, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 750, 20);
        SpellCast(Owner, Nothing, Pos, Pos, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 750, -20);
        SpellCast(Owner, Nothing, Pos, Pos, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        teamID = GetTeamID(default);
        Iterations = this.VALUE_BY_LEVEL;
        LineWidth = this.VALUE_BY_LEVEL;
        FoundFirstPos = false;
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.ArmorMod = this.VALUE_BY_LEVEL;
        ForEachPointOnLine(OwnerPos, TargetPos, 0 + (LineWidth ?? 0), 0 + (Distance ?? 0), 0 + (Iterations ?? 0), (Pos) => {
            NextBuffVars.Pos = Pos;
            SpellBuffAdd(Owner, Owner, default, 50, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0.1, true, false, false, default);
            If(FoundFirstPos, default, CO_EQUAL, default, false, () => {
                FirstPos = Pos;
                FoundFirstPos = true;
            });
            LastPos = Pos;
        });
        Other1 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", FirstPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, true, Owner, default);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Other2 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", LastPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, true, Owner, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other1, Other2, "WallOfPainBeam", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        LinkVisibility(Other1, Other2);
        Other3 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", TargetPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300 + (LineWidth ?? 0), false, true, Owner, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        LinkVisibility(Other1, Other3);
        LinkVisibility(Other2, Other3);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "FallenOneTarget", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "Defile", () => {
            SpellBuffRemove(Owner, "Defile", Owner, 0);
        });
        Else(() => {
            SpellBuffAdd(Attacker, Target, "Defile", 1, 1, 30000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        BubbleID = AddPosPerceptionBubble(TeamOfOwner, 200, TargetPos, 1, Nothing, false);
        Other3 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Owner, default);
        NextBuffVars.DamageAmount = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        targetPos = GetCastSpellTargetPos();
        SpellCast(Owner, Nothing, targetPos, targetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        TeamOfOwner = GetTeamID(default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Owner, default);
        NextBuffVars.PoisonPerTick = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = TargetPos;
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TickAmount = this.VALUE_BY_LEVEL;
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        If(Distance, default, CO_GREATER_THAN, default, 800, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 800, 0);
        });
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.SelfAP = GetStat(GetFlatMagicDamageMod, Owner);
        NextBuffVars.Damage = Damage;
        NextBuffVars.WillRemove = false;
        OwnerPos = GetUnitPosition(Owner);
        MoveSpeed = GetStat(GetMovementSpeed, Owner);
        SlashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 650);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        Duration = Math(0 + (Distance ?? 0), MO_DIVIDE, 0 + (SlashSpeed ?? 0));
        this.TickDuration = Math(0 + (Duration ?? 0), MO_DIVIDE, 0 + (TickAmount ?? 0));
        NextBuffVars.WillMove = true;
        NextBuffVars.SlashSpeed = SlashSpeed;
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 0.05 + (Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "ValkyrieSound", 1, 1, 0 + (Duration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        Pos = GetCastSpellTargetPos();
        Count = GetBuffCountFromAll(Owner, "MissileBarrage");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 8, () => {
            SpellBuffRemove(Owner, "MissileBarrage", Owner, 0 + (CharVars.ChargeCooldown ?? 0));
        });
        Else(() => {
            SpellBuffRemove(Owner, default, Owner, 0);
        });
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, Pos);
        FaceDirection(Owner, Pos);
        If(Distance, default, CO_GREATER_THAN, default, 1200, () => {
            Pos = GetPointByUnitFacingOffset(Owner, 1150, 0);
        });
        IfHasBuff(Owner, Owner, "MBCheck2", () => {
            SpellCast(Owner, Nothing, Pos, Pos, false, 2, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
            SpellBuffRemove(Owner, "MBCheck2", Owner, 0);
        });
        Else(() => {
            SpellCast(Owner, Nothing, Pos, Pos, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        });
        BarrageCount = GetBuffCountFromAll(Owner, "CorkiMissileBarrageNC");
        If(BarrageCount, default, CO_EQUAL, default, 3, () => {
            SpellBuffAdd(Owner, Owner, "MBCheck2", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            SpellBuffRemoveStacks(Owner, Owner, "CorkiMissileBarrageNC", 3);
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "CorkiMissileBarrageNC", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "BLARGH", () => {
            SpellBuffRemove(Owner, "RumbleFlameThrower", Owner, 0);
        });
        Else(() => {
            par = GetPAROrHealth(Target, GetPAR, PAR_OTHER);
            If(par, default, CO_GREATER_THAN_OR_EQUAL, default, 80, () => {
                SpellBuffAdd(Attacker, Attacker, "RumbleOverheat", 1, 1, 5.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                SetPARColorOverride(Owner, 255, 0, 0, 255, 175, 0, 0, 255);
            });
            IfHasBuff(Owner, Owner, "RumbleDangerZone", () => {
                SpellBuffAdd(Attacker, Target, "RumbleFlameThrowerBuff", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            SpellBuffAdd(Attacker, Owner, "RumbleFlameThrower", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            InitialHeatCost = this.VALUE_BY_LEVEL;
            IncPAR(Owner, 0 + (InitialHeatCost ?? 0));
            SpellBuffAdd(Attacker, Target, "RumbleHeatDelay", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        TeamOfOwner = GetTeamID(default);
        TargetPosStart = GetCastSpellTargetPos();
        TargetPosEnd = GetCastSpellDragEndPos();
        Other1 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPosStart, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, default, true, Owner, default);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        FaceDirection(Other1, TargetPosEnd);
        TargetPosEnd = GetPointByUnitFacingOffset(Other1, 1200, 0);
        TeamID = GetTeamID(default);
        SpellCast(Owner, Nothing, TargetPosEnd, TargetPosEnd, true, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, TargetPosStart);
        SpellBuffAdd(Owner, Owner, "RumbleHeatDelay", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IncPAR(Owner, 0);
        SpellBuffAdd(Owner, Owner, "RumbleCarpetBomb", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Owner, Owner, Owner, default, true, 2, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, false, TargetPosStart);
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        BubbleID = AddPosPerceptionBubble(TeamOfOwner, 200, TargetPos, 2.6, Nothing, false);
        Other3 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, true, true, true, true, true, true, 0, default, true, Owner, default);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Other3, "MissFortuneScatterParticle", 1, 1, 2.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        FirstCost = this.VALUE_BY_LEVEL;
        SecondCost = this.VALUE_BY_LEVEL;
        If(default, 1, CO_EQUAL, default, 1, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            CDRMod = GetStat(GetPercentCooldownMod, Attacker);
            NextBuffVars.BaseCDR = this.VALUE_BY_LEVEL;
            NextBuffVars.CDRMod = Math(-1, MO_MULTIPLY, 0 + (CDRMod ?? 0));
            NextBuffVars.CDRMod = Math(1, MO_SUBTRACT, 0 + (NextBuffVars.CDRMod ?? 0));
            NextBuffVars.BaseCDR = Math(0 + (NextBuffVars.CDRMod ?? 0), MO_MULTIPLY, 0 + (NextBuffVars.BaseCDR ?? 0));
        });
        If(Distance, default, CO_GREATER_THAN, default, 800, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 750, 0);
        });
        this.Cooldown = NextBuffVars.BaseCDR;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 3, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        IfNotHasBuff(Owner, Owner, "RumbleGrenadeCounter", () => {
            par = GetPAROrHealth(Target, GetPAR, PAR_OTHER);
            If(par, default, CO_GREATER_THAN_OR_EQUAL, default, 80, () => {
                SpellBuffAdd(Attacker, Attacker, "RumbleOverheat", 1, 1, 5.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                SetPARColorOverride(Owner, 255, 0, 0, 255, 175, 0, 0, 255);
            });
            SpellBuffAdd(Attacker, Attacker, "RumbleGrenadeCounter", 1, 1, 3.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Attacker, default, 1, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Attacker, "RumbleGrenadeCD", 1, 1, 0 + (this.Cooldown ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            IncPAR(Owner, 0 + (FirstCost ?? 0));
            SpellBuffAdd(Attacker, Attacker, "RumbleHeatDelay", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            IfHasBuff(Owner, Owner, "RumbleDangerZone", () => {
                SpellBuffAdd(Attacker, Target, "RumbleGrenadeDZ", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        Else(() => {
            SpellBuffRemove(Owner, "RumbleGrenadeCounter", Owner, default);
            SpellBuffRemove(Owner, default, Owner, default);
            IncPAR(Owner, 0 + (SecondCost ?? 0));
            SpellBuffClear(Owner, "RumbleGrenadeCounter");
        });
        Count = GetBuffCountFromAll(Owner, "KarmaChakraCharge");
        If(Count, default, CO_GREATER_THAN, default, 2, () => {
            SpellBuffRemove(Owner, "KarmaChakraCharge", Owner, 0 + (CharVars.MantraTimerCooldown ?? 0));
            SpellBuffRemove(Owner, "KarmaTwoMantraParticle", Owner, 0);
            SpellBuffAdd(Owner, Owner, "KarmaOneMantraParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            SpellBuffRemove(Owner, "KarmaOneMantraParticle", Owner, 0);
            SpellBuffRemove(Owner, "KarmaChakraCharge", Owner, 0);
        });
        SpellBuffAdd(Owner, Owner, default, 2, 1, 8, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_CombatEnchancer, 0, false, false, false, default);
        IfHasBuff(Owner, Owner, "KarmaChakraCharge", () => {
            SetSlotSpellCooldownTimeVer2(0, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        });
        Else(() => {
            remainingDuration = GetBuffRemainingDuration(Owner, "KarmaChakraTimer");
            SetSlotSpellCooldownTimeVer2(0 + (remainingDuration ?? 0), 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        });
        SpellEffectCreate(ar, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        HealthToInc = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        AbilityPower = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 1);
        HealthToInc = Math(0 + (HealthToInc ?? 0), MO_ADD, 0 + (AbilityPower ?? 0));
        IncHealth(Owner, 0 + (HealthToInc ?? 0), Owner);
        IfHasBuff(Owner, Owner, "KarmaChakra", () => {
            SpellBuffRemove(Owner, "KarmaChakra", Owner, default);
        });
        TargetPos = GetCastSpellTargetPos();
        TeamID = GetTeamID(default);
        AnnieSkinID = GetSkinID(Owner);
        If(AnnieSkinID, default, CO_EQUAL, default, 5, () => {
            If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellEffectCreate(a, default, "infernalguardian_tar_frost.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "infernalguardian_tar_frost.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        Else(() => {
            If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
                SpellEffectCreate(a, default, "InfernalGuardian_tar.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
            });
            Else(() => {
                SpellEffectCreate(a, default, "InfernalGuardian_tar.troy", default, TEAM_CHAOS, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
            });
        });
        Other1 = SpawnPet("Tibbers", "AnnieTibbers", "InfernalGuardian", default, 45, TargetPos, 0 + (this.VALUE_BY_LEVEL ?? 0), 0 + (this.VALUE_BY_LEVEL ?? 0));
        NextBuffVars.ArmorAmount = this.VALUE_BY_LEVEL;
        NextBuffVars.MRAmount = this.VALUE_BY_LEVEL;
        NextBuffVars.HealthAmount = this.VALUE_BY_LEVEL;
        DamageAmount = DamageAmount ?? this.VALUE_BY_LEVEL;
        APPreMod = GetStat(GetFlatMagicDamageMod, Owner);
        APPostMod = Math(0.2, MO_MULTIPLY, 0 + (APPreMod ?? 0));
        NextBuffVars.FinalDamage = Math(0 + (DamageAmount ?? 0), MO_ADD, 0 + (APPostMod ?? 0));
        SpellBuffAdd(Attacker, Attacker, "InfernalGuardianTimer", 1, 1, 45, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other1, "InfernalGuardianBurning", 1, 1, 45, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        CharVars.SpellWillStun = false;
        Count = GetBuffCountFromCaster(Owner, Owner, "Pyromania_particle");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            CharVars.SpellWillStun = true;
            SpellBuffRemove(Owner, "Pyromania_particle", Owner, 0);
        });
        SpellBuffAdd(Owner, Owner, "Pyromania", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        TeamOfOwner = GetTeamID(default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Owner, default);
        NextBuffVars.DamageAmount = this.VALUE_BY_LEVEL;
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        SpellEffectCreate(hi, default, "Tantrum_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        IfHasBuff(Owner, Owner, "VorpalSpikes", () => {
            SpellBuffRemove(Owner, "VorpalSpikes", Owner, default);
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "VorpalSpikes", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        });
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        TargetPos = GetPointByUnitFacingOffset(Owner, 1100, 0);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, default, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, default, default);
        IfHasBuff(Owner, Owner, "AuraofDespair", () => {
            SpellBuffRemove(Owner, "AuraofDespair", Owner, default);
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "AuraofDespair", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        HealthPercent = this.VALUE_BY_LEVEL;
        BaseDamage = this.VALUE_BY_LEVEL;
        NextBuffVars.LifestealStat = this.VALUE_BY_LEVEL;
        HealthDamage = Math(0 + (HealthPercent ?? 0), MO_MULTIPLY, 0 + (MaxHealth ?? 0));
        NextBuffVars.DamageGain = Math(0 + (HealthDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        CharVars.SpellWillStun = false;
        Count = GetBuffCountFromCaster(Owner, Owner, "Pyromania_particle");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            CharVars.SpellWillStun = true;
            SpellBuffRemove(Owner, "Pyromania_particle", Owner, 0);
        });
        SpellBuffAdd(Owner, Owner, "Pyromania", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = TargetPos;
        NextBuffVars.BonusHealth = this.VALUE_BY_LEVEL;
        NextBuffVars.FearDuration = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Owner, "JackInTheBoxInternal", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "ManiacalCloak", () => {
            SpellBuffRemove(Owner, "ManiacalCloak", Owner, default);
        });
        Else(() => {
            NextBuffVars.TimeLastHit = GetTime();
            NextBuffVars.BuffAdded = false;
            NextBuffVars.WillFade = false;
            NextBuffVars.TotalCostPerTick = this.VALUE_BY_LEVEL;
            NextBuffVars.StealthDelay = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Attacker, Owner, default, 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, default, default, default, default);
        });
        NextBuffVars.DCooldown = this.VALUE_BY_LEVEL;
        SpellEffectCreate(hi, default, "jackintheboxpoof2.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, true, false, false, false, false, default, default);
        CastPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, CastPos);
        If(Distance, default, CO_GREATER_THAN, default, 500, () => {
            FaceDirection(Owner, CastPos);
            CastPos = GetPointByUnitFacingOffset(Owner, 500, 0);
        });
        NextBuffVars.CastPos = CastPos;
        NextBuffVars.CritDmgBonus = this.VALUE_BY_LEVEL;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "DeceiveFade", 1, 1, 0.05, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        MaxStacks = this.VALUE_BY_LEVEL;
        NumFound = 0;
        minDuration = 240;
        Other2 = SetUnit(Owner);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectUntargetable ", "CaitlynYordleTrap", true, (Unit) => {
            NumFound = Math(0 + (NumFound ?? 0), MO_ADD, 1);
            durationRemaining = GetBuffRemainingDuration(Unit, "CaitlynYordleTrap");
            If(durationRemaining, default, CO_LESS_THAN, minDuration, default, () => {
                minDuration = durationRemaining;
                InvalidateUnit(Other2);
                Other2 = SetUnit(Unit);
            });
        });
        If(NumFound, default, CO_GREATER_THAN_OR_EQUAL, MaxStacks, default, () => {
            If(Owner, default, CO_NOT_EQUAL, Other2, default, () => {
                ApplyDamage(Other2, Other2, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Other2);
            });
        });
        TargetPos = GetCastSpellTargetPos();
        TeamID = GetTeamID(default);
        Other3 = SpawnMinion("Noxious Trap", "CaitlynTrap", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, true, false, true, true, false, 0, false, false, Owner, default);
        PlayAnimation("Spell1", 1, Other3, false, false, true);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 240, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        CanMove = GetStatus(Owner, GetCanMove);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Distance, default, CO_GREATER_THAN, default, 800, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 850, 0);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        PushbackPos = GetPointByUnitFacingOffset(Owner, 10, 0);
        If(CanMove, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Attacker, Attacker, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            MoveAway(Owner, PushbackPos, 1000, 3, 500, 0, FURTHEST_WITHIN_RANGE, POSTPONE_CURRENT_ORDER, 0, KEEP_CURRENT_FACING);
        });
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        MoveSpeed = GetStat(GetMovementSpeed, Owner);
        DashSpeed = Math(0 + (MoveSpeed ?? 0), MO_ADD, 500);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        SpellEffectCreate(hi, default, "vayne_ult_invis_cas_02.troy", default, TEAM_NEUTRAL, 150, 0, TEAM_UNKNOWN, Nothing, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", Owner, Owner, default, default, true, default, default, false, false, default, default);
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 0, () => {
            TargetPos = GetPointByUnitFacingOffset(Owner, 300, 0);
        });
        NextBuffVars.DashSpeed = 900;
        NextBuffVars.Distance = 300;
        NextBuffVars.TargetPos = TargetPos;
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Attacker, Owner, "VayneTumble", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0.1, true, false, false, default);
        CancelAutoAttack(Owner, true);
        IfHasBuff(Owner, Owner, "VayneInquisition", () => {
            SpellBuffAdd(Owner, Owner, "VayneTumbleFade", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        SpellBuffAdd(Attacker, Owner, "VayneTumbleBonus", 1, 1, 6.75, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0.1, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, 145, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 1100, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, TeamOfOwner ?? TEAM_CASTER, false, true, false, false, false, true, 1, false, false, Owner, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, TeamOfOwner ?? TEAM_CASTER, false, true, false, false, false, true, 1, false, false, Owner, default);
        FaceDirection(Other1, Other3);
        LinkVisibility(Other1, Other3);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulsePartFix", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulsePartFix2", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "XerathArcanopulseDeath", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "XerathArcanopulseDeath", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Other1, default, SetForceRenderParticles);
        SetStatus(Other3, default, SetForceRenderParticles);
        SpellEffectCreate(this.ParticleID, this.ParticleID2, "XerathR_beam.troy", "XerathR_beam.troy", TeamOfOwner ?? TEAM_UNKNOWN, 550, 0, TEAM_UNKNOWN, Owner, false, Other3, "top", default, Other1, "top", default, true, false, false, false, false, default, default);
        DamagePoint = GetPointByUnitFacingOffset(Owner, 500, 0);
        ForEachUnitInTargetRectangle(Owner, DamagePoint, 95, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", true, default, (Unit) => {
            BreakSpellShields(Unit);
            SpellEffectCreate(asdf, default, "Xerath_beam_hit.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
            IfHasBuff(Unit, Owner, "XerathMageChains", () => {
                SpellEffectCreate(asdf2, default, "Xerath_MageChains_consume.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                SpellBuffAdd(Owner, Unit, "XerathMageChainsRoot", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, true, false, default);
                SpellBuffRemove(Unit, "XerathMageChains", Owner, 0);
            });
        });
        TeamOfOwner = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, 145, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 1600, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, TeamOfOwner ?? TEAM_CASTER, false, true, false, false, false, true, 1, false, false, Owner, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, TeamOfOwner ?? TEAM_CASTER, false, true, false, false, false, true, 1, false, false, Owner, default);
        FaceDirection(Other1, Other3);
        LinkVisibility(Other1, Other3);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulsePartFix", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulsePartFix2", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "XerathArcanopulseDeath", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "XerathArcanopulseDeath", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetStatus(Other1, default, SetForceRenderParticles);
        SetStatus(Other3, default, SetForceRenderParticles);
        SpellEffectCreate(this.ParticleID, this.ParticleID2, "XerathR_beam.troy", "XerathR_beam.troy", TeamOfOwner ?? TEAM_UNKNOWN, 550, 0, TEAM_UNKNOWN, Owner, false, Other3, "top", default, Other1, "top", default, true, false, false, false, false, default, default);
        DamagePoint = GetPointByUnitFacingOffset(Owner, 800, 0);
        ForEachUnitInTargetRectangle(Owner, DamagePoint, 95, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", true, default, (Unit) => {
            BreakSpellShields(Unit);
            SpellEffectCreate(asdf, default, "Xerath_beam_hit.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
            IfHasBuff(Unit, Owner, "XerathMageChains", () => {
                SpellEffectCreate(asdf2, default, "Xerath_MageChains_consume.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                SpellBuffAdd(Owner, Unit, "XerathMageChainsRoot", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, true, false, default);
                SpellBuffRemove(Unit, "XerathMageChains", Owner, 0);
            });
        });
        TargetPos = GetCastSpellTargetPos();
        TeamID = GetTeamID(default);
        Other1 = SpawnMinion("Inky", "YorickDecayedGhoul", "YorickPHPet.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, false, true, false, false, false, 0, false, false, Owner, default);
        SpellBuffAdd(Other1, Attacker, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Other1, "YorickDecayedDiseaseCloud", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "YorickDecayedLogic", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellEffectCreate(e, default, "yorick_necroExplosion.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Other1, default, default, Other1, default, default, false, default, default, false, false, default, default);
        BaseDamage = this.VALUE_BY_LEVEL;
        YorickAD = GetStat(GetFlatPhysicalDamageMod, Owner);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Owner, Other1, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellEffectCreate(b, default, "yorick_necroExplosion_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            SpellBuffAdd(Owner, Unit, "YorickDecayedSlow", 100, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
            ApplyDamage(Owner, Unit, 0 + (BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 0, false, false, Owner);
        });
        TargetPos = GetCastSpellTargetPos();
        teamID = GetTeamID(default);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        Beam1 = GetPointByUnitFacingOffset(Owner, 145, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 1600, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, teamID ?? TEAM_NEUTRAL, false, true, false, false, false, true, 1, false, false, Owner, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, teamID ?? TEAM_NEUTRAL, false, true, false, false, false, true, 1, false, false, Owner, default);
        FaceDirection(Other1, Other3);
        LinkVisibility(Other1, Other3);
        SpellBuffAdd(Attacker, Other1, "XerathArcanopulseDeath", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "XerathArcanopulseDeath", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulseWPartFix", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulseWPartFix2", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other1, Other3, "XerathArcanopulseBeam", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other1, "XerathArcanopulseBall", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        IfHasBuff(Owner, Nothing, "YorickSummonDecayed", () => {
            SpellBuffClear(Owner, "YorickSummonDecayed");
        });
        TargetPos = GetCastSpellTargetPos();
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, false, default);
        TargetPos = GetCastSpellTargetPos();
        teamID = GetTeamID(default);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        Beam1 = GetPointByUnitFacingOffset(Owner, 145, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 1100, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, teamID ?? TEAM_NEUTRAL, false, true, false, false, false, true, 1, false, false, Owner, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, teamID ?? TEAM_NEUTRAL, false, true, false, false, false, true, 1, false, false, Owner, default);
        FaceDirection(Other1, Other3);
        LinkVisibility(Other1, Other3);
        SpellBuffAdd(Attacker, Other1, "XerathArcanopulseDeath", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "XerathArcanopulseDeath", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulsePartFix", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulsePartFix2", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other1, Other3, "XerathArcanopulseBeam", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other1, "XerathArcanopulseBall", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
        IfHasBuff(Owner, Owner, "YorickSpectralUnlock", () => {
            SpellBuffRemove(Owner, "YorickSpectralUnlock", Owner, 0);
        });
        SpellBuffAdd(Owner, Owner, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "YorickSpectralUnlock", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        teamID = GetTeamID(default);
        Iterations = this.VALUE_BY_LEVEL;
        LineWidth = this.VALUE_BY_LEVEL;
        FoundFirstPos = false;
        NextBuffVars.DamageToDeal = this.VALUE_BY_LEVEL;
        ForEachPointOnLine(OwnerPos, TargetPos, 0 + (LineWidth ?? 0), 0 + (Distance ?? 0), 0 + (Iterations ?? 0), (Pos) => {
            NextBuffVars.Pos = Pos;
            SpellBuffAdd(Owner, Owner, "YorickDeathGripDelay", 50, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
            If(FoundFirstPos, default, CO_EQUAL, default, false, () => {
                FirstPos = Pos;
                FoundFirstPos = true;
            });
            LastPos = Pos;
        });
        Other1 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", FirstPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, true, Owner, default);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Other2 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", LastPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, true, Owner, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.DurationLevel = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Other1, Other2, "YorickDeathGripBeamDelay", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        LinkVisibility(Other1, Other2);
        Other3 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", TargetPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300 + (LineWidth ?? 0), default, true, Owner, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 0 + (this.VALUE_BY_LEVEL ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        LinkVisibility(Other1, Other3);
        LinkVisibility(Other2, Other3);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other1 = SpawnMinion("Blinky", "YorickRavenousGhoul", "YorickPHPet.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, false, true, false, false, false, 0, false, false, Owner, default);
        SpellBuffAdd(Other1, Attacker, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "YorickRavenousLogic", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        TargetPos = GetCastSpellTargetPos();
        TeamID = GetTeamID(default);
        Other1 = SpawnMinion("Clyde", "YorickSpectralGhoul", "YorickPHPet.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, false, true, false, false, false, 0, false, false, Owner, default);
        NextBuffVars.MovementSpeedPercent = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackDamageMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Other1, Attacker, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "YorickSpectralLogic", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "YorickActiveSpectral", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemove(Owner, "XerathLocusOfPower", Owner, 0);
        TargetPos = GetCastSpellTargetPos();
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        IfHasBuff(Owner, Owner, "XerathArcaneBarrageBarrage", () => {
            SpellBuffRemove(Owner, "XerathArcaneBarrageBarrage", Owner, 0);
            IfHasBuff(Owner, Owner, "XerathArcaneBarrageBarrage", () => {
                SetSlotSpellCooldownTimeVer2(0.6, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            });
        });
        Else(() => {
            IfNotHasBuff(Owner, Owner, "XerathArcaneBarrageWrapper", () => {
                SetSlotSpellCooldownTimeVer2(0.6, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                SpellBuffAdd(Owner, Owner, "XerathArcaneBarrageBarrage", 3, 2, 12, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
                SpellBuffAdd(Owner, Owner, "XerathArcaneBarrageWrapper", 1, 1, 15, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
            });
        });
        NextBuffVars.SpellCooldown = this.VALUE_BY_LEVEL;
        NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        NextBuffVars.Distance = Distance;
        SpellEffectCreate(a, default, "Xerath_E_cas.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "chest", default, Attacker, default, default, true, false, false, false, false, default, default);
        Other3 = SpawnMinion("HiddenMinion", "XerathArcaneBarrageLauncher", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Owner, default);
        NextBuffVars.SlowAmount = this.VALUE_BY_LEVEL;
        NextBuffVars.DamageAmount = this.VALUE_BY_LEVEL;
        NextBuffVars.Level = Level;
        SpellBuffAdd(Attacker, Other3, "XerathArcaneBarrage", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.Bubble = AddPosPerceptionBubble(TeamOfOwner, 600, TargetPos, 4, Nothing, false);
        SpellBuffAdd(Owner, Owner, "XerathArcaneBarrageVision", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Other3, Owner, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, false, default);
        TargetPos = GetCastSpellTargetPos();
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + (Level ?? 0), true, false, false, false, false, default);
        IfHasBuff(Owner, Owner, "XerathArcaneBarrageBarrage", () => {
            SpellBuffRemove(Owner, "XerathArcaneBarrageBarrage", Owner, 0);
            IfHasBuff(Owner, Owner, "XerathArcaneBarrageBarrage", () => {
                SetSlotSpellCooldownTimeVer2(0.6, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
            });
        });
        Else(() => {
            IfNotHasBuff(Owner, Owner, "XerathArcaneBarrageWrapper", () => {
                SetSlotSpellCooldownTimeVer2(0.6, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                SpellBuffAdd(Owner, Owner, "XerathArcaneBarrageBarrage", 3, 2, 12, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
                SpellBuffAdd(Owner, Owner, "XerathArcaneBarrageWrapper", 1, 1, 15, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
            });
        });
        NextBuffVars.AttackRangeIncrease = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "KayleRighteousFuryAnim", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonParticle", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonSpeed", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonIcon", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = TargetPos;
        SpellBuffAdd(Attacker, Attacker, "HextechSweeperArea", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(particle, default, "Haste_proc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        NextBuffVars.MoveSpeedMod = 0.3;
        SpellBuffAdd(Owner, Owner, "Haste", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        If(name, default, CO_EQUAL, default, "prilisasblessing", () => {
            SetSlotSpellCooldownTimeVer2(60, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name1, default, CO_EQUAL, default, "prilisasblessing", () => {
            SetSlotSpellCooldownTimeVer2(60, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name2, default, CO_EQUAL, default, "prilisasblessing", () => {
            SetSlotSpellCooldownTimeVer2(60, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name3, default, CO_EQUAL, default, "prilisasblessing", () => {
            SetSlotSpellCooldownTimeVer2(60, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name4, default, CO_EQUAL, default, "prilisasblessing", () => {
            SetSlotSpellCooldownTimeVer2(60, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name5, default, CO_EQUAL, default, "prilisasblessing", () => {
            SetSlotSpellCooldownTimeVer2(60, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        SpellBuffAdd(Owner, Owner, "LightstrikerBuff", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "LightstrikerBuff", () => {
            SetSlotSpellCooldownTimeVer2(40, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name1, default, CO_EQUAL, default, "LightstrikerBuff", () => {
            SetSlotSpellCooldownTimeVer2(40, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name2, default, CO_EQUAL, default, "LightstrikerBuff", () => {
            SetSlotSpellCooldownTimeVer2(40, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name3, default, CO_EQUAL, default, "LightstrikerBuff", () => {
            SetSlotSpellCooldownTimeVer2(40, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name4, default, CO_EQUAL, default, "LightstrikerBuff", () => {
            SetSlotSpellCooldownTimeVer2(40, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name5, default, CO_EQUAL, default, "LightstrikerBuff", () => {
            SetSlotSpellCooldownTimeVer2(40, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        SpellBuffAdd(Target, Target, "FlaskOfCrystalWater", 5, 1, 15, NextBuffVars, BUFF_STACKS_AND_CONTINUE, BUFF_Heal, 0, false, false, false, default);
        SpellBuffAdd(Target, Target, "Potion_Internal", 1, 1, 15, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.countManaPotion = GetBuffCountFromAll(Owner, "FlaskOfCrystalWater");
        SpellEffectCreate(a, default, "RanduinsOmen_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        NextBuffVars.MoveSpeedMod = -0.35;
        NextBuffVars.AttackSpeedMod = -0.35;
        CastArmor = GetArmor(Owner);
        CastMR = GetSpellBlock(Owner);
        DefTotal = Math(0 + (CastArmor ?? 0), MO_ADD, 0 + (CastMR ?? 0));
        DefTotal = Math(0 + (DefTotal ?? 0), MO_DIVIDE, 100);
        DefTotal = Math(0 + (DefTotal ?? 0), MO_MULTIPLY, 0.5);
        FinalSlow = Math(0 + (DefTotal ?? 0), MO_ADD, 1);
        ForEachUnitInTargetArea(Owner, Owner, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 0 + (FinalSlow ?? 0), NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Unit, "BlackOmen", 1, 1, 0 + (FinalSlow ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyAssistMarker(Attacker, Unit, 10);
        });
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "randuinsomen", () => {
            SetSlotSpellCooldownTimeVer2(60, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name1, default, CO_EQUAL, default, "randuinsomen", () => {
            SetSlotSpellCooldownTimeVer2(60, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name2, default, CO_EQUAL, default, "randuinsomen", () => {
            SetSlotSpellCooldownTimeVer2(60, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name3, default, CO_EQUAL, default, "randuinsomen", () => {
            SetSlotSpellCooldownTimeVer2(60, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name4, default, CO_EQUAL, default, "randuinsomen", () => {
            SetSlotSpellCooldownTimeVer2(60, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name5, default, CO_EQUAL, default, "randuinsomen", () => {
            SetSlotSpellCooldownTimeVer2(60, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        SpellEffectCreate(ar, default, "spectral_fury_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Attacker, Attacker, "SpectralFury", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        CharVars.SpectralCount = 0;
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "YoumusBlade", () => {
            SetSlotSpellCooldownTimeVer2(60, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name1, default, CO_EQUAL, default, "YoumusBlade", () => {
            SetSlotSpellCooldownTimeVer2(60, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name2, default, CO_EQUAL, default, "YoumusBlade", () => {
            SetSlotSpellCooldownTimeVer2(60, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name3, default, CO_EQUAL, default, "YoumusBlade", () => {
            SetSlotSpellCooldownTimeVer2(60, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name4, default, CO_EQUAL, default, "YoumusBlade", () => {
            SetSlotSpellCooldownTimeVer2(60, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        If(name5, default, CO_EQUAL, default, "YoumusBlade", () => {
            SetSlotSpellCooldownTimeVer2(60, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, default);
        });
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other3 = SpawnMinion("SightWard", "SightWard", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, true, true, false, false, false, false, 0, true, false, Owner, default);
        SpellBuffAdd(Attacker, Other3, "SharedWardBuff", 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ItemPlacementMissile", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(AvatarVars.Scout, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Attacker, Other3, "MasteryScoutBuff", 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "ItemPlacementMissile");
        FaceDirection(Owner, TargetPos);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 7, ExtraSlots, 1, true, true, false, false, false, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other3 = SpawnMinion("VisionWard", "VisionWard", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, true, true, false, false, false, false, 0, true, false, Owner, default);
        SpellBuffAdd(Attacker, Other3, "SharedWardBuff", 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ItemPlacementMissile", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "ItemPlacementMissile");
        FaceDirection(Owner, TargetPos);
        If(AvatarVars.Scout, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Attacker, Other3, "MasteryScoutBuff", 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 7, ExtraSlots, 1, true, true, false, false, false, default);
        SpellEffectCreate(CasterVFX, default, "hexTech_Gunblade_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Caster, default, default, false, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other3 = SpawnMinion("WriggleLantern", "WriggleLantern", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, true, true, false, false, false, false, 0, true, false, Owner, default);
        SpellBuffAdd(Attacker, Other3, "SharedWardBuff", 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other3, "WriggleLanternWard", 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ItemPlacementMissile", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(AvatarVars.Scout, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Attacker, Other3, "MasteryScoutBuff", 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "ItemPlacementMissile");
        FaceDirection(Owner, TargetPos);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 7, ExtraSlots, 1, true, true, false, false, false, default);
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        NewCooldown = 180;
        If(name, default, CO_EQUAL, default, "wrigglelantern", () => {
            SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name1, default, CO_EQUAL, default, "wrigglelantern", () => {
            SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name2, default, CO_EQUAL, default, "wrigglelantern", () => {
            SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name3, default, CO_EQUAL, default, "wrigglelantern", () => {
            SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name4, default, CO_EQUAL, default, "wrigglelantern", () => {
            SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name5, default, CO_EQUAL, default, "wrigglelantern", () => {
            SetSlotSpellCooldownTimeVer2(0 + (NewCooldown ?? 0), 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "ShurelyasSpell");
        NextBuffVars.MoveSpeedMod = 0.4;
        SpellEffectCreate(a, default, "ShurelyasCrest_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 700, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (Unit) => {
            SpellCast(Owner, Unit, Unit, Unit, false, 7, ExtraSlots, 1, true, true, false, false, false, default);
        });
        ForEachUnitInTargetArea(Owner, Owner, 700, "AffectFriends AffectHeroes ", default, true, (Unit) => {
            ApplyAssistMarker(Attacker, Unit, 10);
            SpellBuffAdd(Owner, Unit, "Haste", 100, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
        });
        name = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name1 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name2 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name3 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name4 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        name5 = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, InventorySlots, Owner, GetSlotSpellName);
        If(name, default, CO_EQUAL, default, "shurelyascrest", () => {
            SetSlotSpellCooldownTimeVer2(60, 0, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name1, default, CO_EQUAL, default, "shurelyascrest", () => {
            SetSlotSpellCooldownTimeVer2(60, 1, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name2, default, CO_EQUAL, default, "shurelyascrest", () => {
            SetSlotSpellCooldownTimeVer2(60, 2, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name3, default, CO_EQUAL, default, "shurelyascrest", () => {
            SetSlotSpellCooldownTimeVer2(60, 3, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name4, default, CO_EQUAL, default, "shurelyascrest", () => {
            SetSlotSpellCooldownTimeVer2(60, 4, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
        If(name5, default, CO_EQUAL, default, "shurelyascrest", () => {
            SetSlotSpellCooldownTimeVer2(60, 5, InventorySlots, SPELLBOOK_CHAMPION, Owner, false);
        });
    }
    public void ChannelingCancelStop()
    {
        #region VarDecl
        long? CooldownToSet = null;
        Object? Level = null;
        Object? ManaRefund = null;
        TeamId? TeamID = null;
        int? FiddlesticksSkinID = null;
        Object? SecondDamage = null;
        float? TotalTime = null;
        #endregion
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Owner, "RecallImproved", Owner, 0);
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Owner, "Recall", Owner, default);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Owner, "OdinRecall", Owner, 0);
        SpellEffectCreate(default, default, "OdinCaptureCancel.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, "spine", default, false, false, false, false, false, default, default);
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemoveStacks(Target, Owner, "OdinGuardianSuppressionChaos", 1);
        SpellBuffRemoveStacks(Target, Owner, "OdinGuardianSuppressionOrder", 1);
        SpellEffectRemove(this.ParticleID2);
        SpellBuffClear(Owner, "OdinScoreNinja");
        If(Target, default, CO_IS_DEAD, default, default, () => {
            CooldownToSet = 0;
        });
        Else(() => {
            SetUseSlotSpellCooldownTime(3, Owner, false);
            CooldownToSet = 3;
            SpellBuffAdd(Owner, Owner, "OdinCaptureChannelCooldownBuff", 1, 1, 0 + (CooldownToSet ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        If(this.HasPrilisasBlessing, default, CO_EQUAL, default, 1, () => {
            SpellBuffRemoveStacks(Target, Owner, "PrilisasBlessing", 1);
        });
        SpellBuffClear(Owner, "OdinCaptureChannel");
        IfHasBuff(Owner, Owner, "OdinBombSuccessParticle", () => {
            SpellBuffRemove(Owner, "OdinCaptureChannelBomb", Owner, 0);
            SpellEffectRemove(this.ParticleID);
            SpellBuffRemoveStacks(Target, Owner, "OdinBombSuppressionChaos", 1);
            SpellBuffRemoveStacks(Target, Owner, "OdinBombSuppressionOrder", 1);
            SpellEffectRemove(this.ParticleID2);
            SpellBuffRemove(Attacker, "OdinChannelVision", Attacker, 0);
            If(Target, default, CO_IS_DEAD, default, default, () => {
                CooldownToSet = 0;
                SetUseSlotSpellCooldownTime(0, Owner, false);
            });
            Else(() => {
                CooldownToSet = 4;
                SetUseSlotSpellCooldownTime(4, Owner, false);
            });
            SpellBuffRemoveStacks(Target, Owner, "OdinBombSuppression", 1);
        });
        Else(() => {
            SpellBuffRemove(Owner, "OdinCaptureChannelBomb", Owner, 0);
            SpellEffectCreate(default, default, "OdinCaptureCancel.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, "spine", default, false, false, false, false, false, default, default);
            SpellEffectRemove(this.ParticleID);
            SpellBuffRemoveStacks(Target, Owner, "OdinBombSuppressionChaos", 1);
            SpellBuffRemoveStacks(Target, Owner, "OdinBombSuppressionOrder", 1);
            SpellEffectRemove(this.ParticleID2);
            SpellBuffRemove(Attacker, "OdinChannelVision", Attacker, 0);
            If(Target, default, CO_IS_DEAD, default, default, () => {
                CooldownToSet = 0;
                SetUseSlotSpellCooldownTime(0, Owner, false);
            });
            Else(() => {
                CooldownToSet = 4;
                SetUseSlotSpellCooldownTime(4, Owner, false);
            });
            SpellBuffRemoveStacks(Target, Owner, "OdinBombSuppression", 1);
        });
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Owner, "OdinRecallImproved", Owner, 0);
        SpellBuffRemove(Attacker, "InfiniteDuressChannel", Attacker, 0);
        SpellBuffRemove(Attacker, "InfiniteDuressSound", Attacker, 0);
        SpellBuffRemove(Target, "Suppression", Attacker, 0);
        SetSlotSpellCooldownTimeVer2(10, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ManaRefund = this.VALUE_BY_LEVEL;
        IncPAR(Owner, 0 + (ManaRefund ?? 0));
        SpellBuffRemove(Owner, "Pantheon_GrandSkyfall_Jump", Owner, 0);
        SpellBuffRemove(Owner, "Pantheon_GS_Particle", Owner, 0);
        SpellBuffRemove(Owner, "Pantheon_GS_ParticleRed", Owner, 0);
        SpellBuffClear(Owner, "Pantheon_HeartseekerChannel");
        SpellBuffRemove(Owner, "Pantheon_Heartseeker", Owner, 0);
        SpellBuffRemove(Owner, "Pantheon_HeartseekerSound", Owner, 0);
        SpellBuffRemove(Owner, "Pantheon_HeartseekerChannel", Owner, 0);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Attacker);
        If(FiddlesticksSkinID, default, CO_EQUAL, default, 6, () => {
            SpellEffectRemove(this.Confetti);
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            
        });
        Else(() => {
            SpellBuffRemove(Target, "Drain", Owner, 0);
        });
        SpellBuffRemove(Owner, "Fearmonger_marker", Owner, 0);
        SpellEffectRemove(this.ParticleID);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Owner);
        If(FiddlesticksSkinID, default, CO_EQUAL, default, 6, () => {
            SpellEffectRemove(this.Glow);
            SpellEffectRemove(this.Confetti);
        });
        SpellBuffRemove(Owner, "ReapTheWhirlwind", Owner, 0);
        SpellBuffRemove(Target, "Suppression", Owner, 0);
        SpellBuffRemove(Target, "AlZaharNetherGrasp", Attacker, 0);
        SpellBuffRemove(Owner, "AlZaharNetherGraspSound", Owner, 0);
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Owner, "GalioIdolOfDurand", Owner, 0);
        ForEachUnitInTargetArea(Owner, Owner, 575, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyDamage(Owner, Unit, 1, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Owner);
        });
        SpellBuffRemove(Owner, "Gate", Owner, default);
        SpellBuffRemove(Owner, "Instagate", Owner, default);
        SpellBuffRemove(Owner, "DeathLotusSound", Owner, default);
        SpellBuffRemove(Owner, "DeathLotus", Owner, default);
        SpellBuffRemove(Owner, "Meditate", Owner, default);
        SpellBuffRemove(Owner, "InnateSpellHeal", Owner, default);
        SpellBuffRemove(Owner, "GragasDrunkenRage", Owner, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
            SpellBuffRemove(Unit, "FallenOneTarget", Attacker, default);
        });
        TeamID = GetTeamID(default);
        SecondDamage = this.VALUE_BY_LEVEL;
        TotalTime = Math(0.25, MO_MULTIPLY, 0 + (CharVars.LifeTime ?? 0));
        SpellEffectCreate(asdf, default, "AbsoluteZero_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, true, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 650, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellEffectCreate(asdf, default, "AbsoluteZero_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            BreakSpellShields(Unit);
            ApplyDamage(Owner, Unit, 0 + (SecondDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + (TotalTime ?? 0), 2.5, 1, false, false, Attacker);
        });
        SpellBuffRemove(Owner, "AbsoluteZero", Owner, 0);
        SpellBuffRemove(Owner, "MissFortuneBulletSound", Owner, default);
        SpellBuffClear(Owner, "MissFortuneWaves");
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 5);
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Target, "CaitlynAceintheHole", Owner, 0);
    }
    public void ChannelingStart()
    {
        #region VarDecl
        int? PrilisasBlessingCount = null;
        TeamId? TeamOfOwner = null;
        float? Mana = null;
        float? MaxMana = null;
        float? PAR_Percent = null;
        int? Count = null;
        Vector3? sourcePosition = null;
        Vector3? CastPos = null;
        TeamId? TeamID = null;
        int? FiddlesticksSkinID = null;
        Object? Level = null;
        float? AbilityPower = null;
        Object? BaseDamage = null;
        float? BonusDamage = null;
        float? DamageToDeal = null;
        Object? BaseTickAmount = null;
        float? APAmount = null;
        float? APTickBonus = null;
        float? TickAmount = null;
        Object? baseShieldHealth = null;
        float? abilityPower = null;
        float? bonusShieldHealth = null;
        float? shieldHealth = null;
        float? HealthTick = null;
        float? MaxHP = null;
        float? MaxMP = null;
        float? TickWorth = null;
        float? TickWorthMana = null;
        #endregion
        NextBuffVars.WillRemove = false;
        SpellEffectCreate(this.ParticleID, default, "TeleportHomeImproved.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 7.9, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        NextBuffVars.WillRemove = false;
        SpellEffectCreate(this.ParticleID, default, "TeleportHome.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 7.9, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, default, default, default, default);
        NextBuffVars.WillRemove = false;
        SpellEffectCreate(this.ParticleID, default, "TeleportHome.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 7.9, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        NextBuffVars.WillRemove = false;
        SpellEffectCreate(this.ParticleID, default, "TeleportHome.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 4.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "OdinCaptureImmobile", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "OdinGuardianSuppression", 1, 1, 30, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, true, default);
        this.HasPrilisasBlessing = 0;
        PrilisasBlessingCount = GetBuffCountFromAll(Owner, "PrilisasBlessing");
        If(PrilisasBlessingCount, default, CO_GREATER_THAN, default, 0, () => {
            this.HasPrilisasBlessing = 1;
            SpellBuffAdd(Owner, Target, "PrilisasBlessing", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        TeamOfOwner = GetTeamID(default);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellBuffAdd(Attacker, Target, "OdinGuardianSuppressionOrder", 10, 1, 30, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
            SpellEffectCreate(this.ParticleID, this.ParticleID2, "OdinCaptureBeam.troy", "OdinCaptureBeam.troy", TEAM_ORDER, 10, 0, TEAM_CHAOS, Owner, false, Owner, "BUFFBONE_GLB_CHANNEL_LOC", default, Target, "crystal", default, false, false, false, false, false, default, default);
        });
        Else(() => {
            SpellBuffAdd(Attacker, Target, "OdinGuardianSuppressionChaos", 10, 1, 30, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
            SpellEffectCreate(this.ParticleID, this.ParticleID2, "OdinCaptureBeam.troy", "OdinCaptureBeam.troy", TEAM_CHAOS, 10, 0, TEAM_ORDER, Owner, false, Owner, "BUFFBONE_GLB_CHANNEL_LOC", default, Target, "crystal", default, false, false, false, false, false, default, default);
        });
        this.ChargeTimePassed = 0;
        Mana = GetPAROrHealth(Target, GetPAR, PAR_MANA);
        MaxMana = GetPAROrHealth(Target, GetMaxPAR, PAR_MANA);
        PAR_Percent = Math(0 + (Mana ?? 0), MO_DIVIDE, 0 + (MaxMana ?? 0));
        If(PAR_Percent, default, CO_GREATER_THAN, default, 0.8, () => {
            If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
                SpellBuffAdd(Owner, Owner, "OdinScoreNinja", 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        PlayAnimation("Channel_WNDUP", 0, Owner, true, true, false);
        this.RemoveAnim = true;
        SpellEffectCreate(this.ParticleID, default, "OdinCaptureBeam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_CHANNEL_LOC", default, Target, "spine", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID2, default, "OdinCaptureBeam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_CHANNEL_LOC", default, Target, "spine", default, false, false, false, false, false, default, default);
        Count = GetBuffCountFromAll(Target, "OdinBombSuppression");
        SpellBuffAdd(Owner, Owner, default, 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, true, default);
        TeamOfOwner = GetTeamID(default);
        this.ChargeTimePassed = 0;
        SpellBuffAdd(Attacker, Attacker, "OdinChannelVision", 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.WillRemove = false;
        SpellEffectCreate(this.ParticleID, default, "TeleportHome_shortImproved.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 4.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        NextBuffVars.CastPosition = CastPosition;
        FaceDirection(Owner, CastPosition);
        sourcePosition = GetPointByUnitFacingOffset(Owner, -25, 0);
        NextBuffVars.sourcePosition = sourcePosition;
        SpellBuffAdd(Owner, Owner, "Pantheon_Heartseeker", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Pantheon_HeartseekerSound", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Pantheon_HeartseekerChannel", 1, 1, 15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IfNotHasBuff(Owner, Owner, "Pantheon_AegisShield2", () => {
            IfNotHasBuff(Owner, Owner, "Pantheon_AegisShield", () => {
                SpellBuffAdd(Owner, Owner, "Pantheon_Aegis_Counter", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Aura, 0, false, false, false, default);
                Count = GetBuffCountFromAll(Owner, "Pantheon_Aegis_Counter");
                If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 4, () => {
                    SpellBuffAdd(Owner, Owner, "Pantheon_AegisShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                    SpellBuffClear(Owner, "Pantheon_Aegis_Counter");
                });
            });
        });
        CastPos = GetCastSpellTargetPos();
        FaceDirection(Owner, CastPos);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Attacker);
        If(FiddlesticksSkinID, default, CO_EQUAL, default, 6, () => {
            SpellEffectCreate(this.Confetti, default, "Party_HornConfetti.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "BUFFBONE_CSTM_HORN", default, Attacker, default, default, false, false, false, false, false, default, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        SpellBuffAdd(Owner, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Fearmonger_marker", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Heal, 0, true, false, false, default);
        SpellEffectCreate(this.ParticleID, default, "Drain.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Target, "spine", default, false, false, false, false, false, default, default);
        this.DrainExecuted = GetTime();
        NextBuffVars.DrainPercent = this.VALUE_BY_LEVEL;
        NextBuffVars.DrainedBool = false;
        SpellBuffAdd(Owner, Owner, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        BaseDamage = this.VALUE_BY_LEVEL;
        BonusDamage = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.225);
        DamageToDeal = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
        ApplyDamage(Owner, Target, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0, 1, false, false, Owner);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Owner);
        If(FiddlesticksSkinID, default, CO_EQUAL, default, 6, () => {
            SpellEffectCreate(this.Glow, default, "Party_DrainGlow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, "spine", default, false, false, false, false, false, default, default);
            SpellEffectCreate(this.Confetti, default, "Party_HornConfetti.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "BUFFBONE_CSTM_HORN", default, Attacker, default, default, false, false, false, false, false, default, default);
        });
        BaseTickAmount = this.VALUE_BY_LEVEL;
        APAmount = GetStat(GetFlatMagicDamageMod, Owner);
        APTickBonus = Math(0 + (APAmount ?? 0), MO_MULTIPLY, 0.175);
        TickAmount = Math(0 + (BaseTickAmount ?? 0), MO_ADD, 0 + (APTickBonus ?? 0));
        NextBuffVars.TickAmount = TickAmount;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0.25, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        baseShieldHealth = this.VALUE_BY_LEVEL;
        abilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        bonusShieldHealth = Math(1.5, MO_MULTIPLY, 0 + (abilityPower ?? 0));
        shieldHealth = Math(0 + (baseShieldHealth ?? 0), MO_ADD, 0 + (bonusShieldHealth ?? 0));
        NextBuffVars.shieldHealth = shieldHealth;
        SpellBuffAdd(Owner, Target, "ShenStandUnitedShield", 1, 1, 7.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "ShenStandUnitedTarget", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        IfNotHasBuff(Attacker, Attacker, "IfHasBuffCheck", () => {
            SpellBuffAdd(Owner, Owner, "AlZaharVoidlingCount", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        BreakSpellShields(Target);
        SpellBuffAdd(Owner, Owner, "AlZaharNetherGraspSound", 4, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.DamageToDeal = this.VALUE_BY_LEVEL;
        SpellEffectCreate(this.ParticleID, default, "AlzaharNetherGrasp_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Target, "root", default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Target, "AlZaharNetherGrasp", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "Suppression", 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Suppression, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        HealthTick = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
        AbilityPower = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.33);
        HealthTick = Math(0 + (HealthTick ?? 0), MO_ADD, 0 + (AbilityPower ?? 0));
        NextBuffVars.HealthTick = HealthTick;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 4.9, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Heal, 0, true, false, default, default);
        MaxHP = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        MaxMP = GetPAROrHealth(Owner, GetMaxPAR, PAR_MANA);
        TickWorth = Math(0 + (MaxHP ?? 0), MO_DIVIDE, 21);
        TickWorthMana = Math(0 + (MaxMP ?? 0), MO_DIVIDE, 6);
        NextBuffVars.TickWorth = TickWorth;
        NextBuffVars.TickWorthMana = TickWorthMana;
        SpellBuffAdd(Owner, Owner, "InnateSpellHealCooldown", 1, 1, 20, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 13, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Heal, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "GragasBodySlamSelfSlow", () => {
            SpellBuffRemove(Owner, "GragasBodySlamSelfSlow", Owner, default);
        });
        NextBuffVars.ManaTick = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Heal, 0, true, false, false, default);
        NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "AbsoluteZero", 10, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        FaceDirection(Owner, CastPosition);
        FaceDirection(Owner, Target);
        SpellBuffAdd(Attacker, Target, "CaitlynAceintheHole", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellEffectCreate(this.ParticleID, default, "caitlyn_laser_beam_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_5", default, Target, "spine", default, false, false, false, false, false, default, default);
    }
    public void ChannelingSuccessStop()
    {
        #region VarDecl
        TeamId? TeamID = null;
        Vector3? CamPos = null;
        long? CooldownToSet = null;
        Object? TargetPos = null;
        Object? Level = null;
        Object? SmnCooldown0 = null;
        Object? SmnCooldown1 = null;
        Vector3? CastPos = null;
        int? FiddlesticksSkinID = null;
        bool? IsStealthed = null;
        TeamId? Team = null;
        #endregion
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            TeleportToKeyLocation(Attacker, SPAWN_LOCATION, TEAM_ORDER);
        });
        ElseIf(default, default, CO_EQUAL, default, default, () => {
            TeleportToKeyLocation(Attacker, SPAWN_LOCATION, TEAM_CHAOS);
        });
        CamPos = GetUnitPosition(Owner);
        SetCameraPosition("Owner", CamPos);
        SpellEffectCreate(default, default, "teleportarrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            TeleportToKeyLocation(Attacker, SPAWN_LOCATION, TEAM_ORDER);
        });
        ElseIf(default, default, CO_EQUAL, default, default, () => {
            TeleportToKeyLocation(Attacker, SPAWN_LOCATION, TEAM_CHAOS);
        });
        CamPos = GetUnitPosition(Owner);
        SetCameraPosition("Owner", CamPos);
        SpellEffectCreate(default, default, "teleportarrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            TeleportToKeyLocation(Attacker, SPAWN_LOCATION, TEAM_ORDER);
        });
        ElseIf(default, default, CO_EQUAL, default, default, () => {
            TeleportToKeyLocation(Attacker, SPAWN_LOCATION, TEAM_CHAOS);
        });
        CamPos = GetUnitPosition(Owner);
        SetCameraPosition("Owner", CamPos);
        SpellEffectCreate(default, default, "teleportarrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        SpellEffectRemove(this.ParticleID);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            TeleportToKeyLocation(Attacker, SPAWN_LOCATION, TEAM_ORDER);
        });
        ElseIf(default, default, CO_EQUAL, default, default, () => {
            TeleportToKeyLocation(Attacker, SPAWN_LOCATION, TEAM_CHAOS);
        });
        CamPos = GetUnitPosition(Owner);
        SetCameraPosition("Owner", CamPos);
        SpellEffectCreate(default, default, "teleportarrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.ParticleID2);
        SpellBuffRemoveStacks(Target, Owner, "OdinGuardianSuppressionChaos", 1);
        SpellBuffRemoveStacks(Target, Owner, "OdinGuardianSuppressionOrder", 1);
        If(Target, default, CO_IS_DEAD, default, default, () => {
            CooldownToSet = 0;
        });
        Else(() => {
            SetUseSlotSpellCooldownTime(3, Owner, false);
            CooldownToSet = 3;
            SpellBuffAdd(Owner, Owner, "OdinCaptureChannelCooldownBuff", 1, 1, 0 + (CooldownToSet ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        SpellBuffClear(Owner, "OdinScoreNinja");
        UnlockAnimation(Owner, true);
        If(this.HasPrilisasBlessing, default, CO_EQUAL, default, 1, () => {
            SpellBuffRemoveStacks(Target, Owner, "PrilisasBlessing", 1);
        });
        SpellBuffClear(Owner, "OdinCaptureChannel");
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Target, "OdinGuardianSuppressionBomb", Attacker, 0);
        SpellEffectRemove(this.ParticleID2);
        SpellBuffRemove(Attacker, "OdinChannelVision", Attacker, 0);
        If(Target, default, CO_IS_DEAD, default, default, () => {
            CooldownToSet = 0;
            SetUseSlotSpellCooldownTime(0, Owner, false);
        });
        Else(() => {
            CooldownToSet = 4;
            SetUseSlotSpellCooldownTime(4, Owner, false);
        });
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            TeleportToKeyLocation(Attacker, SPAWN_LOCATION, TEAM_ORDER);
        });
        ElseIf(default, default, CO_EQUAL, default, default, () => {
            TeleportToKeyLocation(Attacker, SPAWN_LOCATION, TEAM_CHAOS);
        });
        CamPos = GetUnitPosition(Owner);
        SetCameraPosition("Owner", CamPos);
        SpellEffectCreate(default, default, "teleportarrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffRemove(Attacker, "InfiniteDuressSound", Attacker, 0);
        SpellBuffRemove(Owner, "Pantheon_GrandSkyfall_Fall", Owner, 0);
        TeamID = GetTeamID(default);
        SpellBuffRemove(Owner, "Pantheon_GrandSkyfall_Jump", Owner, 0);
        TargetPos = CharVars.TargetPos;
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.TargetPos = this.TargetPos;
        SetStatus(Owner, default, SetCanCast);
        SpellCast(Owner, Nothing, this.TargetPos, this.TargetPos, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, false, default);
        SpellEffectCreate(this.Part, b, "pantheon_grandskyfall_up.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
        NextBuffVars.Particle = CharVars.Particle;
        SpellBuffAdd(Owner, Owner, "Pantheon_GrandSkyfall", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SmnCooldown0 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SmnCooldown1 = GetSlotSpellInfo(default, SPELLBOOK_SUMMONER, SpellSlots, Owner, GetSlotSpellCooldownTime);
        SpellBuffAdd(Owner, Owner, "Pantheon_GS_ParticleRed", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(SmnCooldown0, default, CO_LESS_THAN, default, 2.75, () => {
            SetSlotSpellCooldownTimeVer2(2, 0, SpellSlots, SPELLBOOK_SUMMONER, Owner, false);
        });
        If(SmnCooldown1, default, CO_LESS_THAN, default, 2.75, () => {
            SetSlotSpellCooldownTimeVer2(2, 1, SpellSlots, SPELLBOOK_SUMMONER, Owner, false);
        });
        TeamID = GetTeamID(default);
        CastPos = GetCastSpellTargetPos();
        SpellEffectCreate(p3, default, "summoner_flashback.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, CastPos, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(ar, default, "summoner_cast.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(ar1, default, "summoner_flash.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        ForEachUnitInTargetArea(Owner, CastPos, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellBuffAdd(Owner, Unit, "ParanoiaMissChance", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        TeleportToPosition(Owner, CastPos);
        NextBuffVars.DamageAmount = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Attacker);
        If(FiddlesticksSkinID, default, CO_EQUAL, default, 6, () => {
            SpellEffectRemove(this.Confetti);
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            
        });
        Else(() => {
            SpellBuffRemove(Target, "Drain", Owner, 0);
        });
        SpellBuffRemove(Owner, "Fearmonger_marker", Owner, 0);
        SpellEffectRemove(this.ParticleID);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Owner);
        If(FiddlesticksSkinID, default, CO_EQUAL, default, 6, () => {
            SpellEffectRemove(this.Glow);
            SpellEffectRemove(this.Confetti);
        });
        SpellBuffRemove(Owner, "ReapTheWhirlwind", Owner, 0);
        DestroyMissileForTarget(Owner);
        CastPos = GetPointByUnitFacingOffset(Target, 150, 180);
        TeleportToPosition(Owner, CastPos);
        SpellBuffRemove(Target, "AlZaharNetherGrasp", Attacker, 0);
        SpellBuffRemove(Owner, "AlZaharNetherGraspSound", Owner, 0);
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Owner, "GalioIdolOfDurand", Owner, 0);
        ForEachUnitInTargetArea(Owner, Owner, 575, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            ApplyDamage(Owner, Unit, 1, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Owner);
        });
        TeleportToPosition(Owner, CastPosition);
        SpellEffectCreate(default, default, "CardmasterTeleportArrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffRemove(Owner, "Gate", Owner, default);
        SpellBuffRemove(Owner, "DeathLotusSound", Owner, default);
        SpellBuffRemove(Owner, "DeathLotus", Owner, default);
        IncHealth(Owner, 0 + (this.VALUE_BY_LEVEL ?? 0), Owner);
        SpellBuffRemove(Owner, "Meditate", Owner, default);
        SpellBuffRemove(Owner, "Meditate", Owner, default);
        NextBuffVars.DamageIncrease = this.VALUE_BY_LEVEL;
        NextBuffVars.DamageReduction = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "GragasDrunkenRageSelf", 1, 1, 20, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemove(Owner, "GragasDrunkenRage", Owner, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 0, false, false, Attacker);
            SpellEffectCreate(Particle, default, "FallenOne_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, false, default, default, default);
        });
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, default, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, default, false, false, default);
            SpellEffectCreate(Particle, default, "FallenOne_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        TeamID = GetTeamID(default);
        SpellBuffRemove(Owner, "AbsoluteZero", Owner, 0);
        SpellEffectCreate(asdf, default, "AbsoluteZero_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, true, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 650, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellEffectCreate(asdf, default, "AbsoluteZero_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 2.5, 1, false, false, Attacker);
        });
        SpellBuffRemove(Owner, "MissFortuneBulletSound", Owner, default);
        SpellBuffClear(Owner, "MissFortuneWaves");
        IsStealthed = GetStatus(Target, GetStealthed);
        FaceDirection(Owner, Target);
        Team = GetTeamID(default);
        SpellCast(Owner, Target, Target, Target, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "IfHasBuffCheck", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectRemove(this.ParticleID);
    }
    public void AdjustCooldown()
    {
        #region VarDecl
        float? CooldownMultiplier = null;
        float? BaseCooldown = null;
        #endregion
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(210, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(300, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(210, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        If(AvatarVars.utilityMastery, default, CO_EQUAL, default, 1, () => {
            BaseCooldown = 250;
        });
        Else(() => {
            BaseCooldown = 265;
        });
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(300, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(180, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(270, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        BaseCooldown = 220;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        BaseCooldown = 210;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(180, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        If(AvatarVars.PromoteCooldownBonus, default, CO_EQUAL, default, 30, () => {
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_SUBTRACT, 0 + (AvatarVars.PromoteCooldownBonus ?? 0));
        });
        SetReturnValue(BaseCooldown);
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(270, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(300, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        If(AvatarVars.PromoteCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_SUBTRACT, 0 + (AvatarVars.PromoteCooldownBonus ?? 0));
        });
        SetReturnValue(BaseCooldown);
        BaseCooldown = 180;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        If(AvatarVars.PromoteCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_SUBTRACT, 0 + (AvatarVars.PromoteCooldownBonus ?? 0));
        });
        SetReturnValue(BaseCooldown);
        If(SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(70, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(210, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(540, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(70, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(180, MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetReturnValue(BaseCooldown);
        IfHasBuff(Owner, Owner, "SwainMetamorphism", () => {
            
        });
        Else(() => {
            SetReturnValue(default);
        });
        IfHasBuff(Owner, Owner, "BurningAgony", () => {
            
        });
        Else(() => {
            SetReturnValue(default);
        });
        IfHasBuff(Owner, Owner, "GlacialStorm", () => {
            
        });
        Else(() => {
            SetReturnValue(default);
        });
    }
    public void SpellUpdateTooltip()
    {
        #region VarDecl
        float? MoveSpeedMod = null;
        float? BaseCooldown = null;
        float? CooldownMultiplier = null;
        float? Duration = null;
        float? OwnerLevel = null;
        float? BonusMana = null;
        float? TotalMana = null;
        float? SecondaryMana = null;
        float? BonusHeal = null;
        float? TotalHeal = null;
        float? SecondaryHeal = null;
        float? Level = null;
        float? APMod = null;
        float? AttackSpeedMod = null;
        Object? HealthMod = null;
        float? BonusDamage = null;
        float? TotalDamage = null;
        Object? igniteDamage = null;
        float? totalDamage = null;
        float? baseDamage = null;
        float? bonusDamage = null;
        float? Spell3Display = null;
        #endregion
        If(AvatarVars.offensiveMastery, default, CO_EQUAL, default, 1, () => {
            MoveSpeedMod = 0.35;
        });
        Else(() => {
            MoveSpeedMod = 0.27;
        });
        MoveSpeedMod = Math(0 + (MoveSpeedMod ?? 0), MO_MULTIPLY, 100);
        SetSpellToolTipVar(0 + (MoveSpeedMod ?? 0), 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = 210;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetSpellToolTipVar(0 + (BaseCooldown ?? 0), 2, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = 210;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetSpellToolTipVar(0 + (BaseCooldown ?? 0), 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        If(AvatarVars.utilityMastery, default, CO_EQUAL, default, 1, () => {
            BaseCooldown = 250;
        });
        Else(() => {
            BaseCooldown = 265;
        });
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetSpellToolTipVar(0 + (BaseCooldown ?? 0), 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        Duration = 4;
        If(AvatarVars.utilityMastery, default, CO_EQUAL, default, 1, () => {
            Duration = 3.5;
        });
        SetSpellToolTipVar(0 + (Duration ?? 0), 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = 300;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetSpellToolTipVar(0 + (BaseCooldown ?? 0), 2, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        OwnerLevel = GetLevel(Owner);
        BonusMana = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 30);
        TotalMana = Math(0 + (BonusMana ?? 0), MO_ADD, 160);
        If(AvatarVars.utilityMastery, default, CO_EQUAL, default, 1, () => {
            TotalMana = Math(0 + (TotalMana ?? 0), MO_MULTIPLY, 1.2);
        });
        SecondaryMana = Math(0 + (TotalMana ?? 0), MO_MULTIPLY, 0.5);
        SetSpellToolTipVar(0 + (TotalMana ?? 0), 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        SetSpellToolTipVar(0 + (SecondaryMana ?? 0), 2, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = 180;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetSpellToolTipVar(0 + (BaseCooldown ?? 0), 3, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        OwnerLevel = GetLevel(Owner);
        BonusHeal = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 25);
        TotalHeal = Math(0 + (BonusHeal ?? 0), MO_ADD, 140);
        If(AvatarVars.defensiveMastery, default, CO_EQUAL, default, 1, () => {
            TotalHeal = Math(0 + (TotalHeal ?? 0), MO_MULTIPLY, 1.1);
        });
        SecondaryHeal = Math(0 + (TotalHeal ?? 0), MO_MULTIPLY, 0.5);
        SetSpellToolTipVar(0 + (TotalHeal ?? 0), 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        SetSpellToolTipVar(0 + (SecondaryHeal ?? 0), 2, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = 270;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetSpellToolTipVar(0 + (BaseCooldown ?? 0), 3, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        Level = GetLevel(Owner);
        APMod = this.VALUE_BY_LEVEL;
        AttackSpeedMod = this.VALUE_BY_LEVEL;
        If(AvatarVars.offensiveMastery, default, CO_EQUAL, default, 1, () => {
            APMod = Math(0 + (APMod ?? 0), MO_MULTIPLY, 1.1);
            AttackSpeedMod = Math(0 + (AttackSpeedMod ?? 0), MO_ADD, 0.05);
        });
        AttackSpeedMod = Math(0 + (AttackSpeedMod ?? 0), MO_MULTIPLY, 100);
        SetSpellToolTipVar(0 + (AttackSpeedMod ?? 0), 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        SetSpellToolTipVar(0 + (APMod ?? 0), 2, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = 220;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetSpellToolTipVar(0 + (BaseCooldown ?? 0), 3, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = 210;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetSpellToolTipVar(0 + (BaseCooldown ?? 0), 2, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        If(AvatarVars.defensiveMastery, default, CO_EQUAL, default, 1, () => {
            SetSpellToolTipVar(4, 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        });
        Else(() => {
            SetSpellToolTipVar(3, 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        });
        BaseCooldown = 180;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetSpellToolTipVar(0 + (BaseCooldown ?? 0), 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = 70;
        If(SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetSpellToolTipVar(0 + (BaseCooldown ?? 0), 2, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        Duration = 4;
        If(AvatarVars.utilityMastery, default, CO_EQUAL, default, 1, () => {
            Duration = Math(2, MO_ADD, 0 + (Duration ?? 0));
        });
        SetSpellToolTipVar(0 + (Duration ?? 0), 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = 210;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetSpellToolTipVar(0 + (BaseCooldown ?? 0), 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        Level = GetLevel(Owner);
        HealthMod = this.VALUE_BY_LEVEL;
        SetSpellToolTipVar(0 + (HealthMod ?? 0), 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = 540;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetSpellToolTipVar(0 + (BaseCooldown ?? 0), 2, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        OwnerLevel = GetLevel(Owner);
        BonusDamage = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 25);
        TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 420);
        SetSpellToolTipVar(0 + (TotalDamage ?? 0), 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = 70;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetSpellToolTipVar(0 + (BaseCooldown ?? 0), 2, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        Level = GetLevel(Owner);
        igniteDamage = this.VALUE_BY_LEVEL;
        SetSpellToolTipVar(0 + (igniteDamage ?? 0), 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = 180;
        If(AvatarVars.SummonerCooldownBonus, default, CO_NOT_EQUAL, default, 0, () => {
            CooldownMultiplier = Math(1, MO_SUBTRACT, 0 + (AvatarVars.SummonerCooldownBonus ?? 0));
            BaseCooldown = Math(0 + (BaseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMultiplier ?? 0));
        });
        SetSpellToolTipVar(0 + (BaseCooldown ?? 0), 2, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        totalDamage = GetTotalAttackDamage(Owner);
        baseDamage = GetStat(GetBaseAttackDamage, Owner);
        bonusDamage = Math(0 + (totalDamage ?? 0), MO_SUBTRACT, 0 + (baseDamage ?? 0));
        Spell3Display = Math(0 + (bonusDamage ?? 0), MO_MULTIPLY, 1);
        SetSpellToolTipVar(0 + (Spell3Display ?? 0), 1, 0 + (SpellSlot ?? 0), SpellSlots, SPELLBOOK_CHAMPION, Owner);
    }
    public void CanCast()
    {
        #region VarDecl
        bool? CanMove = null;
        bool? CanCast = null;
        float? CurHealth = null;
        float? MaxHealth = null;
        float? PercentHealth = null;
        TeamId? TeamID = null;
        bool? temp = null;
        bool? Result = null;
        int? Count = null;
        Object? Level = null;
        Object? HealthCost = null;
        float? Health = null;
        float? Temp1 = null;
        float? Health1 = null;
        float? CurrentPAR = null;
        Object? SelfDamage = null;
        float? CurrentHealth = null;
        #endregion
        ExecutePeriodically(0.25, AvatarVars.LastTimeExecutedGarrison, true, () => {
            AvatarVars.CanCastGarrison = false;
            ForEachUnitInTargetArea(Owner, Owner, 1250, "AffectEnemies AffectFriends AffectMinions NotAffectSelf AffectUseable AffectWards ", "OdinGuardianBuff", true, (Unit) => {
                AvatarVars.CanCastGarrison = true;
            });
        });
        SetReturnValue(AvatarVars.CanCastGarrison);
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        ExecutePeriodically(0.25, AvatarVars.LastTimeExecutedPromote, true, () => {
            AvatarVars.CanCastPromote = false;
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions NotAffectSelf ", default, true, (Unit) => {
                IfNotHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                    IfHasBuff(Unit, Nothing, "OdinSuperMinion", () => {
                        AvatarVars.CanCastPromote = true;
                    });
                });
            });
        });
        SetReturnValue(AvatarVars.CanCastPromote);
        IfHasBuff(Owner, Owner, "OdinPlayerBuff", () => {
            ExecutePeriodically(0.25, AvatarVars.LastTimeExecutedPromote, true, () => {
                AvatarVars.CanCastPromote = false;
                ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions NotAffectSelf ", "OdinSuperMinion", true, (Unit) => {
                    IfNotHasBuff(Unit, Nothing, "SummonerOdinPromote", () => {
                        IfHasBuff(Unit, Nothing, "OdinSuperMinion", () => {
                            AvatarVars.CanCastPromote = true;
                        });
                    });
                });
            });
        });
        SetReturnValue(AvatarVars.CanCastPromote);
        Else(() => {
            ExecutePeriodically(0.25, AvatarVars.LastTimeExecutedPromote, true, () => {
                AvatarVars.CanCastPromote = false;
                ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions NotAffectSelf ", "PromoteMeBuff", true, (Unit) => {
                    IfNotHasBuff(Unit, Nothing, "SummonerPromoteSR", () => {
                        IfHasBuff(Unit, Nothing, "PromoteMeBuff", () => {
                            AvatarVars.CanCastPromote = true;
                        });
                    });
                });
            });
        });
        SetReturnValue(AvatarVars.CanCastPromote);
        If(Owner, default, CO_IS_DEAD, default, default, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        CurHealth = GetPAROrHealth(Target, GetHealth, PAR_MANA);
        MaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
        PercentHealth = Math(0 + (CurHealth ?? 0), MO_DIVIDE, 0 + (MaxHealth ?? 0));
        If(PercentHealth, default, CO_GREATER_THAN, default, 0.99, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        ElseIf(CanCast, default, CO_EQUAL, default, false, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        ElseIf(CanCast, default, CO_EQUAL, default, false, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        ElseIf(CanCast, default, CO_EQUAL, default, false, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        ElseIf(CanCast, default, CO_EQUAL, default, false, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        SetReturnValue(default);
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            ForEachUnitInTargetArea(Owner, Owner, 1250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "BlindMonkQOne", true, (Unit) => {
                IfHasBuff(Unit, Owner, "BlindMonkQOne", () => {
                    SetReturnValue(default);
                });
            });
        });
        Else(() => {
            ForEachUnitInTargetArea(Owner, Owner, 1250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "BlindMonkQOneChaos", true, (Unit) => {
                IfHasBuff(Unit, Owner, "BlindMonkQOneChaos", () => {
                    SetReturnValue(default);
                });
            });
        });
        SetReturnValue(default);
        ForNClosestUnitsInTargetArea(Owner, Owner, 400, "AffectEnemies AffectHeroes ", 1, true, "BlindMonkRMarker", (Unit) => {
            SetReturnValue(default);
        });
        SetReturnValue(default);
        ForNClosestUnitsInTargetArea(Owner, Owner, 750, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, true, "BlindMonkEOne", (Unit) => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        If(CanMove, default, CO_EQUAL, default, false, () => {
            SetReturnValue(default);
        });
        IfHasBuff(Owner, Owner, "HeimerdingerTurretReady", () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        temp = false;
        ForEachUnitInTargetAreaRandom(Owner, Owner, 1000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, 3, (Unit) => {
            Result = CanSeeTarget(Owner, Unit);
            If(Result, default, CO_EQUAL, default, true, () => {
                temp = true;
            });
        });
        If(temp, default, CO_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        Count = GetBuffCountFromAll(Owner, "TeemoMushrooms");
        If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 1, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        IfHasBuff(Owner, Owner, "DefensiveBallCurl", () => {
            SetReturnValue(default);
        });
        Else(() => {
            IfHasBuff(Owner, Owner, "PowerBall", () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        ElseIf(CanCast, default, CO_EQUAL, default, false, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        HealthCost = this.VALUE_BY_LEVEL;
        Health = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        If(Health, default, CO_LESS_THAN_OR_EQUAL, HealthCost, default, () => {
            SetReturnValue(default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            HealthCost = this.VALUE_BY_LEVEL;
            Temp1 = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
            If(Temp1, default, CO_GREATER_THAN_OR_EQUAL, HealthCost, default, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        Health1 = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            HealthCost = this.VALUE_BY_LEVEL;
            If(HealthCost, default, CO_GREATER_THAN_OR_EQUAL, Health1, default, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        SetReturnValue(default);
        ForEachUnitInTargetAreaRandom(Owner, Owner, 550, "AffectEnemies AffectHeroes ", default, true, 1, (Unit) => {
            SetReturnValue(default);
        });
        temp = false;
        ForEachUnitInTargetArea(Owner, Owner, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "KennenMarkofStorm", true, (Unit) => {
            temp = true;
        });
        If(temp, default, CO_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        Count = GetBuffCountFromAll(Owner, "AkaliShadowDance");
        If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 1, () => {
            SetReturnValue(default);
        });
        Else(() => {
            If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
                SetReturnValue(default);
            });
            ElseIf(CanCast, default, CO_EQUAL, default, false, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        CurrentPAR = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
        If(CurrentPAR, default, CO_NOT_EQUAL, default, 100, () => {
            SetReturnValue(default);
        });
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        IfHasBuff(Owner, Owner, "ShyvanaTransform", () => {
            SetReturnValue(default);
        });
        temp = false;
        ForEachUnitInTargetAreaRandom(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, 1, (Unit) => {
            temp = true;
        });
        If(temp, default, CO_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        If(CanMove, default, CO_EQUAL, default, false, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        SetReturnValue(default);
        ForEachUnitInTargetAreaRandom(Owner, Owner, 600, "AffectEnemies AffectHeroes ", default, true, 1, (Unit) => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        ElseIf(CanCast, default, CO_EQUAL, default, false, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        temp = false;
        ForEachUnitInTargetAreaRandom(Owner, Owner, 610, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, 1, (Unit) => {
            temp = true;
        });
        If(temp, default, CO_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        SetReturnValue(default);
        Count = GetBuffCountFromAll(Owner, "VolibearWStats");
        If(Count, default, CO_EQUAL, default, 3, () => {
            SetReturnValue(default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            CanMove = GetStatus(Owner, GetCanMove);
            If(CanMove, default, CO_EQUAL, default, false, () => {
                SetReturnValue(default);
            });
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            temp = false;
            ForEachUnitInTargetAreaRandom(Owner, Owner, 800, "AffectEnemies AffectHeroes ", default, true, 1, (Unit) => {
                temp = true;
            });
            If(temp, default, CO_EQUAL, default, true, () => {
                SetReturnValue(default);
            });
            Else(() => {
                SetReturnValue(default);
            });
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            CanMove = GetStatus(Owner, GetCanMove);
            CanCast = GetStatus(Owner, GetCanCast);
            If(CanMove, default, CO_EQUAL, default, false, () => {
                SetReturnValue(default);
            });
            If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
                SetReturnValue(default);
            });
        });
        Count = GetBuffCountFromAll(Owner, "MissileBarrage");
        If(Count, default, CO_LESS_THAN_OR_EQUAL, default, 1, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        Count = GetBuffCountFromAll(Owner, "KarmaChakraCharge");
        If(Count, default, CO_GREATER_THAN, default, 1, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        If(CanMove, default, CO_EQUAL, default, false, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SelfDamage = this.VALUE_BY_LEVEL;
        CurrentHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        If(CurrentHealth, default, CO_LESS_THAN_OR_EQUAL, SelfDamage, default, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_EQUAL, default, false, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        CanMove = GetStatus(Owner, GetCanMove);
        CanCast = GetStatus(Owner, GetCanCast);
        If(CanMove, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        If(CanCast, default, CO_NOT_EQUAL, default, true, () => {
            SetReturnValue(default);
        });
        PercentHealth = GetPAROrHealth(Target, GetHealthPercent, PAR_MANA);
        If(PercentHealth, default, CO_GREATER_THAN, default, 0.99, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
        TempTable1.manaPercent = GetPAROrHealth(Owner, GetPARPercent, PAR_MANA);
        If(TempTable1.manaPercent, default, CO_GREATER_THAN, default, 0.99, () => {
            SetReturnValue(default);
        });
        Else(() => {
            SetReturnValue(default);
        });
    }
    public void BuffOnBeingSpellHit()
    {
        #region VarDecl
        AttackableUnit? Owner = null;
        Object? IsAttack = null;
        #endregion
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, false, () => {
            If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
                this.WillRemove = true;
                SpellEffectCreate(ar, default, "SpellEffect_proc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, default, default, default, default);
            });
        });
        SetTriggerUnit(Attacker);
        Owner = SetBuffCasterUnit();
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            IsAttack = GetCastInfo(GetIsAttackOverride);
            If(IsAttack, default, CO_EQUAL, default, false, () => {
                If(SpellVars.DoesntBreakShields, default, CO_EQUAL, default, false, () => {
                    this.WillRemove = true;
                    SpellEffectCreate(ar, default, "SpellEffect_proc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
                });
                ElseIf(SpellVars.DoesntBreakShields, default, CO_EQUAL, default, true, () => {
                    
                });
                ElseIf(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
                    this.WillRemove = true;
                    SpellEffectCreate(ar, default, "SpellEffect_proc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
                });
            });
        });
        SetTriggerUnit(Attacker);
        Owner = SetBuffCasterUnit();
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            IsAttack = GetCastInfo(GetIsAttackOverride);
            If(IsAttack, default, CO_EQUAL, default, false, () => {
                If(SpellVars.DoesntBreakShields, default, CO_EQUAL, default, false, () => {
                    this.WillRemove = true;
                    SpellEffectCreate(ar, default, "SpellEffect_proc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
                });
                ElseIf(SpellVars.DoesntBreakShields, default, CO_EQUAL, default, true, () => {
                    
                });
                ElseIf(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
                    this.WillRemove = true;
                    SpellEffectCreate(ar, default, "SpellEffect_proc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
                });
            });
        });
        SetTriggerUnit(Attacker);
        Owner = SetBuffCasterUnit();
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            IsAttack = GetCastInfo(GetIsAttackOverride);
            If(IsAttack, default, CO_EQUAL, default, false, () => {
                If(SpellVars.DoesntBreakShields, default, CO_EQUAL, default, false, () => {
                    this.WillRemove = true;
                    SpellEffectCreate(ar, default, "nocturne_shroud_deactivateTrigger.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
                });
                ElseIf(SpellVars.DoesntBreakShields, default, CO_EQUAL, default, true, () => {
                    
                });
                ElseIf(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
                    this.WillRemove = true;
                    SpellEffectCreate(ar, default, "nocturne_shroud_deactivateTrigger.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
                });
            });
        });
        SetTriggerUnit(Attacker);
        Owner = SetBuffCasterUnit();
        If(Owner, default, CO_DIFFERENT_TEAM, Attacker, default, () => {
            IsAttack = GetCastInfo(GetIsAttackOverride);
            If(IsAttack, default, CO_EQUAL, default, false, () => {
                If(SpellVars.DoesntBreakShields, default, CO_EQUAL, default, false, () => {
                    this.WillRemove = true;
                    SpellEffectCreate(ar, default, "SpellEffect_proc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
                });
                ElseIf(SpellVars.DoesntBreakShields, default, CO_EQUAL, default, true, () => {
                    
                });
                ElseIf(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
                    this.WillRemove = true;
                    SpellEffectCreate(ar, default, "SpellEffect_proc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
                });
            });
        });
    }
    public void BuffOnReconnect()
    {
        SpellBuffRemoveCurrent(Owner);
    }
    public void BuffOnBeingHit()
    {
        #region VarDecl
        float? MyMaxHealth = null;
        TeamId? MyTeamID = null;
        float? HealthToDecreaseBy = null;
        float? HealthPercent = null;
        float? AttackerMaxHealth = null;
        float? DamageReturn = null;
        float? DamageAmount = null;
        float? CurTime = null;
        float? TimeSinceLastHit = null;
        AttackableUnit? Caster = null;
        float? BaseArmor = null;
        float? ArmorMod = null;
        int? Count = null;
        TeamId? TeamID = null;
        Object? Level = null;
        Object? ProcDamage = null;
        TeamId? AttackerID = null;
        float? Distance = null;
        Region? Pineapple = null;
        Object? Cooldown = null;
        float? NewCooldown = null;
        float? PercentDamageTaken = null;
        #endregion
        SpellBuffAdd(Owner, Owner, "OdinCombatActive", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        If(Attacker, default, CO_IS_NOT_HERO, default, default, () => {
            MyMaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            MyTeamID = GetTeamID(default);
            If(MyTeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                HealthToDecreaseBy = Math(0.015, MO_MULTIPLY, 0 + (MyMaxHealth ?? 0));
            });
            Else(() => {
                HealthToDecreaseBy = Math(0.02, MO_MULTIPLY, 0 + (MyMaxHealth ?? 0));
            });
            ApplyDamage(Attacker, Owner, 0 + (HealthToDecreaseBy ?? 0), TRUE_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Owner);
        });
        If(Attacker, default, CO_IS_NOT_HERO, default, default, () => {
            MyTeamID = GetTeamID(default);
            If(MyTeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                HealthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
                If(HealthPercent, default, CO_GREATER_THAN, default, 0.99, () => {
                    ApplyDamage(Attacker, Owner, 10000000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Attacker);
                });
                AttackerMaxHealth = GetPAROrHealth(Attacker, GetMaxHealth, PAR_MANA);
                DamageReturn = Math(0.151, MO_MULTIPLY, 0 + (AttackerMaxHealth ?? 0));
                ApplyDamage(Owner, Attacker, 0 + (DamageReturn ?? 0), TRUE_DAMAGE, DAMAGESOURCE_RAW, 1, 0, 0, false, false, Owner);
            });
        });
        If(Attacker, default, CO_IS_NOT_HERO, default, default, () => {
            MyMaxHealth = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
            MyTeamID = GetTeamID(default);
            If(MyTeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                HealthToDecreaseBy = Math(0.015, MO_MULTIPLY, 0 + (MyMaxHealth ?? 0));
            });
            Else(() => {
                HealthToDecreaseBy = Math(0.02, MO_MULTIPLY, 0 + (MyMaxHealth ?? 0));
            });
            ApplyDamage(Attacker, Owner, 0 + (HealthToDecreaseBy ?? 0), TRUE_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Owner);
        });
        If(Attacker, default, CO_IS_NOT_HERO, default, default, () => {
            MyTeamID = GetTeamID(default);
            If(MyTeamID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
                HealthPercent = GetPAROrHealth(Owner, GetHealthPercent, PAR_MANA);
                If(HealthPercent, default, CO_GREATER_THAN, default, 0.99, () => {
                    ApplyDamage(Attacker, Owner, 10000000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Attacker);
                });
                AttackerMaxHealth = GetPAROrHealth(Attacker, GetMaxHealth, PAR_MANA);
                DamageReturn = Math(0.151, MO_MULTIPLY, 0 + (AttackerMaxHealth ?? 0));
                ApplyDamage(Owner, Attacker, 0 + (DamageReturn ?? 0), TRUE_DAMAGE, DAMAGESOURCE_RAW, 1, 0, 0, false, false, Owner);
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(this.damageThreshold, default, CO_LESS_THAN_OR_EQUAL, DamageAmount, default, () => {
                    DamageAmount = 0;
                    Say(Attacker, "game_lua_Aegis_Block", default);
                    Say(Owner, "game_lua_Aegis_Block", default);
                    SpellBuffRemove(Owner, "Pantheon_AegisShield", Owner, default);
                });
            });
        });
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                    this.LastHit = Math(0 + (this.LastHit ?? 0), MO_SUBTRACT, 2);
                    CurTime = GetGameTime();
                    TimeSinceLastHit = Math(0 + (CurTime ?? 0), MO_SUBTRACT, 0 + (this.LastHit ?? 0));
                    If(TimeSinceLastHit, default, CO_GREATER_THAN_OR_EQUAL, default, 8, () => {
                        IfNotHasBuff(Owner, Owner, "ShenWayOfTheNinjaAura", () => {
                            SpellBuffAdd(Owner, Owner, "ShenWayOfTheNinjaAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            Caster = SetBuffCasterUnit();
            NextBuffVars.LifeTapMod = this.LifeTapMod;
            SpellBuffAdd(Caster, Attacker, "ShenVorpalStarHeal", 1, 1, 2.9, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Heal, 0, true, false, false, default);
        });
        If(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
            
        });
        Else(() => {
            BaseArmor = GetArmor(Owner);
            ArmorMod = Math(0 + (BaseArmor ?? 0), MO_MULTIPLY, 0.1);
            DamageReturn = Math(0 + (ArmorMod ?? 0), MO_ADD, 0 + (this.DamageReturn ?? 0));
            ApplyDamage(Owner, Attacker, 0 + (DamageReturn ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Owner);
            SpellEffectCreate(default, default, "Thornmail_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, false, false, false, false, default, default);
        });
        IfHasBuff(Attacker, Attacker, "DeadlyVenom_marker", () => {
            Count = GetBuffCountFromAll(Owner, "DeadlyVenom");
            If(Count, default, CO_EQUAL, default, 2, () => {
                SpellEffectRemove(this.Particle);
                SpellEffectCreate(this.Particle, default, "twitch_poison_counter_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, false, false, false, false, default, default);
            });
            If(Count, default, CO_EQUAL, default, 3, () => {
                SpellEffectRemove(this.Particle);
                SpellEffectCreate(this.Particle, default, "twitch_poison_counter_03.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, false, false, false, false, default, default);
            });
            If(Count, default, CO_EQUAL, default, 4, () => {
                SpellEffectRemove(this.Particle);
                SpellEffectCreate(this.Particle, default, "twitch_poison_counter_04.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, false, false, false, false, default, default);
            });
            If(Count, default, CO_EQUAL, default, 5, () => {
                SpellEffectRemove(this.Particle);
                SpellEffectCreate(this.Particle, default, "twitch_poison_counter_05.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, false, false, false, false, default, default);
            });
            If(Count, default, CO_EQUAL, default, 6, () => {
                If(this.LastCount, default, CO_NOT_EQUAL, default, 6, () => {
                    SpellEffectRemove(this.Particle);
                    SpellEffectCreate(this.Particle, default, "twitch_poison_counter_06.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, false, false, false, false, default, default);
                });
            });
            this.LastCount = Count;
        });
        Caster = SetBuffCasterUnit();
        If(Caster, default, CO_EQUAL, Attacker, default, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                    If(this.DoOnce, default, CO_EQUAL, default, true, () => {
                        TeamID = GetTeamID(default);
                        this.DoOnce = false;
                        ApplyDamage(Attacker, Owner, 0 + (this.MotaDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.4, 1, false, false, Attacker);
                        IncPAR(Attacker, 0 + (this.EnergyReturn ?? 0));
                        SpellEffectCreate(MotaExplosion, default, "akali_mark_impact_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
                        IfHasBuff(Attacker, Attacker, "AkaliTwinAP", () => {
                            SpellBuffAdd(Attacker, Attacker, "AkaliShadowSwipeHealingParticle", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        Caster = SetBuffCasterUnit();
        If(Caster, default, CO_EQUAL, Attacker, default, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Caster, GetSlotSpellLevel);
            ProcDamage = this.VALUE_BY_LEVEL;
            ApplyDamage(Caster, Target, 0 + (ProcDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.09, 0, false, false, Caster);
            TeamID = GetTeamID(default);
            SpellEffectCreate(a, default, "shyvana_flameBreath_reignite.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        });
        Caster = SetBuffCasterUnit();
        If(Caster, default, CO_EQUAL, Attacker, default, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Caster, GetSlotSpellLevel);
            ProcDamage = this.VALUE_BY_LEVEL;
            ApplyDamage(Caster, Target, 0 + (ProcDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.09, 0, false, false, Caster);
            TeamID = GetTeamID(default);
            SpellEffectCreate(a, default, "shyvana_flameBreath_reignite.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        });
        AttackerID = GetTeamID(default);
        If(AttackerID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
            
        });
        ElseIf(Attacker, default, CO_IS_TYPE_AI, default, default, () => {
            If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
                
            });
            ElseIf(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.5);
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                
            });
        });
        If(DamageType, default, CO_EQUAL, default, PHYSICAL_DAMAGE, () => {
            DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (this.Defense ?? 0));
        });
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            Distance = DistanceBetweenObjects("Attacker", "Owner");
            If(Distance, default, CO_LESS_THAN, default, 800, () => {
                TeamID = GetTeamID(default);
                Pineapple = AddUnitPerceptionBubble(TeamID, 75, Attacker, 1, Nothing, Nothing, false);
            });
        });
        Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
            NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 0.5);
            SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
        });
        NextBuffVars.ArmorCount = CharVars.ArmorCount;
        SpellBuffAdd(Owner, Owner, "PoppyDefenseOfDemacia", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        CharVars.ArmorCount = Math(0 + (CharVars.ArmorCount ?? 0), MO_ADD, 1);
        CharVars.ArmorCount = Math(0 + (CharVars.ArmorCount ?? 0), MO_MIN, 20);
        SpellEffectCreate(A, default, "poppydef_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_finger", default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonIcon", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        Count = GetBuffCountFromAll(Owner, "PoppyParagonStats");
        If(Count, default, CO_EQUAL, default, 10, () => {
            SpellBuffAdd(Owner, Owner, "PoppyParagonParticle", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        Else(() => {
            SpellEffectCreate(A, default, "poppydam_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "hammer_b", default, Target, default, default, false, default, default, default, default, default, default);
            SpellEffectCreate(b, default, "poppydef_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_finger", default, Target, default, default, false, default, default, default, default, default, default);
        });
        If(Attacker, default, CO_IS_NOT_TURRET, default, default, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
                If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                    SpellEffectCreate(NoEstada, default, "Thornmail_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, default, default, default, default);
                    PercentDamageTaken = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.3);
                    ApplyDamage(Owner, Attacker, 0 + (PercentDamageTaken ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_REACTIVE, 1, 0, 1, false, false, default);
                });
            });
        });
        If(default, 0.2, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
            If(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                NextBuffVars.MoveSpeedMod = -0.35;
                SpellBuffAdd(Owner, Attacker, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
                NextBuffVars.AttackSpeedMod = -0.35;
                SpellBuffAdd(Owner, Attacker, "Cripple", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
        If(AvatarVars.MasteryBladedArmor, default, CO_EQUAL, default, true, () => {
            If(Attacker, default, CO_IS_TYPE_AI, default, default, () => {
                If(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
                    
                });
                Else(() => {
                    If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
                        
                    });
                    Else(() => {
                        ApplyDamage(Owner, Attacker, 0 + (AvatarVars.MasteryBladedArmorAmt ?? 0), TRUE_DAMAGE, DAMAGESOURCE_REACTIVE, 1, 0, 0, false, false, Owner);
                    });
                });
            });
        });
    }
    public void BuffOnKill()
    {
        #region VarDecl
        float? Level = null;
        float? BonusAdd = null;
        float? Passthrough = null;
        float? HPGain = null;
        Object? Cooldown = null;
        float? DLCooldown = null;
        int? Count = null;
        Object? ManaAmount = null;
        Object? HealAmount = null;
        float? tempMana = null;
        float? MasteryBountyAmt = null;
        #endregion
        SpellBuffAdd(Owner, Owner, "OdinCombatActive", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Owner, Owner, "OdinScoreAvengerTarget", 1, 1, 15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Target, "OdinScoreKiller", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Owner, Owner, "OdinScoreAvengerTarget", 1, 1, 15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Target, "OdinScoreKiller", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(CharVars.TotalBonus, default, CO_LESS_THAN, CharVars.MaxBonus, default, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            BonusAdd = Math(1, MO_ADD, 0 + (CharVars.TotalBonus ?? 0));
            CharVars.TotalBonus = BonusAdd;
            IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, 1);
        });
        If(CharVars.TotalBonus, default, CO_LESS_THAN, CharVars.MaxBonus, default, () => {
            BonusAdd = Math(0.5, MO_ADD, 0 + (CharVars.TotalBonus ?? 0));
            CharVars.TotalBonus = BonusAdd;
            IncPermanentStat(IncPermanentFlatSpellBlockMod, Owner, 0.5);
            IncPermanentStat(IncPermanentFlatArmorMod, Owner, 0.5);
            SpellBuffAdd(Owner, Owner, "GarenKillBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        IncGold(Owner, 0 + (this.VALUE_BY_LEVEL ?? 0));
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        Passthrough = Math(0 + (Level ?? 0), MO_MULTIPLY, 0.5);
        HPGain = Math(0 + (Passthrough ?? 0), MO_ADD, 0.5);
        NextBuffVars.HPGain = HPGain;
        SpellBuffAdd(Owner, Owner, "EnrageMaxHP", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IncGold(Owner, 2);
        Level = GetLevel(Owner);
        NextBuffVars.BaseManaRegen = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "SwainDampeningFieldMana", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellEffectCreate(Particle, default, "NeutralMonster_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        IncPAR(Owner, 0 + (this.manaRegen ?? 0));
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                    SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0);
                });
            });
        });
        IfHasBuff(Target, Owner, "DetonatingShot_Target", () => {
            SpellEffectCreate(e, default, "DetonatingShot_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            ForEachUnitInTargetArea(Owner, Target, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                SpellEffectCreate(b, default, "tristana_explosiveShot_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
                ApplyDamage(Owner, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.25, 1, false, false, Attacker);
            });
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellEffectCreate(Placeholder, default, "katarina_spell_refresh_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            IncGold(Owner, 25);
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0);
            SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0);
            DLCooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            DLCooldown = Math(0 + (DLCooldown ?? 0), MO_SUBTRACT, 15);
            SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + (DLCooldown ?? 0));
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
            Count = GetBuffCountFromCaster(Owner, Owner, "AkaliShadowDance");
            If(Count, default, CO_EQUAL, default, 3, () => {
                SpellBuffClear(Owner, "AkaliShadowDanceTimer");
            });
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                IncHealth(Owner, 0 + (CharVars.MaliceHeal ?? 0), Owner);
                SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0);
            });
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0);
            SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0);
            SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0);
            SpellEffectCreate(default, default, "DeathsCaress_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        });
        IfHasBuff(Target, Target, "VolibearHatred", () => {
            IncGold(Attacker, 10);
        });
        IfHasBuff(Target, Attacker, "VolibearHatredZilean", () => {
            SpellBuffAdd(Attacker, Attacker, "VolibearKillsZilean", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
            IncGold(Attacker, 11);
        });
        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                IncPAR(Owner, 0 + (this.furyPerKill ?? 0));
            });
        });
        If(default, 1, CO_EQUAL, default, 0, () => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                    Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                    If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0);
                    });
                });
            });
        });
        Level = GetLevel(Owner);
        ManaAmount = this.VALUE_BY_LEVEL;
        IncPAR(Owner, 0 + (ManaAmount ?? 0));
        HealAmount = this.VALUE_BY_LEVEL;
        IncHealth(Owner, 0 + (HealAmount ?? 0), Owner);
        SpellEffectCreate(Particle, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Attacker, Attacker, "LeviathanStats", 20, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
            SpellBuffAdd(Attacker, Attacker, "LeviathanStats", 20, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Attacker, Attacker, "MejaisStats", 20, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, default, default, default, default);
            SpellBuffAdd(Attacker, Attacker, "MejaisStats", 20, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, default, default, default, default);
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            CharVars.MagicDamageMod = Math(0 + (CharVars.MagicDamageMod ?? 0), MO_ADD, 10);
            CharVars.MagicDamageMod = Math(0 + (CharVars.MagicDamageMod ?? 0), MO_MIN, 70);
            SpellEffectCreate(ar, default, "MejaisSoulstealer_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            tempMana = GetPAROrHealth(Target, GetPAR, PAR_MANA);
            IncPAR(Owner, 0 + (tempMana ?? 0));
        });
        If(AvatarVars.MasteryScholar, default, CO_EQUAL, default, true, () => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                IfHasBuff(Owner, Owner, "OdinPlayerBuff", () => {
                    IncExp(Owner, 20);
                });
                Else(() => {
                    IncExp(Owner, 40);
                });
            });
        });
        If(AvatarVars.MasteryBounty, default, CO_EQUAL, default, true, () => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                IfHasBuff(Owner, Owner, "OdinPlayerBuff", () => {
                    MasteryBountyAmt = Math(0 + (AvatarVars.MasteryBountyAmt ?? 0), MO_DIVIDE, 2);
                    IncGold(Owner, 0 + (MasteryBountyAmt ?? 0));
                });
                Else(() => {
                    IncGold(Owner, 0 + (AvatarVars.MasteryBountyAmt ?? 0));
                });
            });
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Attacker, Attacker, "MuramasaStats", 20, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, default, default, default, default);
            SpellBuffAdd(Attacker, Attacker, "MuramasaStats", 20, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, default, default, default, default);
        });
    }
    public void BuffOnMiss()
    {
        SpellBuffAdd(Owner, Owner, "OdinCombatActive", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
    }
    public void ChannelingUpdateActions()
    {
        #region VarDecl
        TeamId? TeamOfOwner = null;
        float? Distance = null;
        Object? Level = null;
        float? AbilityPower = null;
        Object? BaseDamage = null;
        float? BonusDamage = null;
        float? DamageToDeal = null;
        Object? CastPosition = null;
        Vector3? Point1 = null;
        Vector3? Point2 = null;
        Vector3? Point3 = null;
        Vector3? Point4 = null;
        Vector3? Point5 = null;
        Vector3? Point6 = null;
        Vector3? Point7 = null;
        Vector3? Point8 = null;
        Vector3? Point9 = null;
        Vector3? Point0 = null;
        float? Count = null;
        float? ModValue = null;
        #endregion
        If(AccumTime, default, CO_GREATER_THAN_OR_EQUAL, default, 1.5, () => {
            IfHasBuff(Owner, Owner, "OdinShrineBombBuff", () => {
                TeamOfOwner = GetTeamID(default);
                If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
                    SpellBuffAdd(Owner, Target, "OdinBombTickOrder", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                Else(() => {
                    SpellBuffAdd(Owner, Target, "OdinBombTickChaos", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                SpellBuffClear(Owner, "OdinShrineBombBuff");
            });
            If(this.RemoveAnim, default, CO_NOT_EQUAL, default, false, () => {
                UnlockAnimation(Owner, true);
                PlayAnimation("Channel", 0, Owner, true, true, false);
                this.RemoveAnim = false;
            });
        });
        Distance = DistanceBetweenObjects("Owner", "Target");
        If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 525, () => {
            SpellBuffClear(Owner, "OdinShrineBombBuff");
            SpellBuffClear(Owner, "OdinCaptureChannel");
        });
        ExecutePeriodically(0.5, this.DrainExecuted, false, () => {
            Distance = DistanceBetweenObjects("Target", "Owner");
            If(Distance, default, CO_GREATER_THAN_OR_EQUAL, default, 650, () => {
                StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_LostTarget);
            });
            If(Target, default, CO_IS_DEAD, default, default, () => {
                StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_LostTarget);
            });
            Else(() => {
                If(Owner, default, CO_IS_DEAD, default, default, () => {
                    SpellEffectRemove(this.ParticleID);
                });
                Else(() => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    NextBuffVars.DrainPercent = this.VALUE_BY_LEVEL;
                    NextBuffVars.DrainedBool = false;
                    SpellBuffAdd(Owner, Owner, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
                    BaseDamage = this.VALUE_BY_LEVEL;
                    BonusDamage = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.225);
                    DamageToDeal = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
                    ApplyDamage(Owner, Target, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0, 1, false, false, Attacker);
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CastPosition = this.CastPosition;
        this.counter = Math(0 + (this.counter ?? 0), MO_ADD, 1);
        SpellEffectCreate(goodluck, default, "missFortune_ult_cas_muzzle_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_3", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(goodluck, default, "missFortune_ult_cas_muzzle_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(goodluck, default, "missFortune_left_ult_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_weapon", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(goodluck, default, "missFortune_ult_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_weapon", default, Owner, default, default, false, default, default, default, default, default, default);
        Point1 = GetPointByUnitFacingOffset(Owner, 500, 15);
        Point2 = GetPointByUnitFacingOffset(Owner, 500, 9);
        Point3 = GetPointByUnitFacingOffset(Owner, 500, 3);
        Point4 = GetPointByUnitFacingOffset(Owner, 500, 357);
        Point5 = GetPointByUnitFacingOffset(Owner, 500, 351);
        Point6 = GetPointByUnitFacingOffset(Owner, 500, 345);
        Point7 = GetPointByUnitFacingOffset(Owner, 500, 350);
        Point8 = GetPointByUnitFacingOffset(Owner, 500, 345);
        Point9 = GetPointByUnitFacingOffset(Owner, 500, 340);
        Point0 = GetPointByUnitFacingOffset(Owner, 500, 0);
        Count = GetBuffCountFromAll(Owner, "MissFortuneWaves");
        ModValue = Math(0 + (Count ?? 0), MO_MODULO, 2);
        If(ModValue, default, CO_EQUAL, default, 0, () => {
            SpellCast(Owner, Nothing, Point1, Point1, false, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
            SpellCast(Owner, Nothing, Point2, Point2, false, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
            SpellCast(Owner, Nothing, Point3, Point3, false, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
            SpellCast(Owner, Nothing, Point4, Point4, false, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
            SpellCast(Owner, Nothing, Point5, Point5, false, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
            SpellCast(Owner, Nothing, Point6, Point6, false, 2, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
            SpellCast(Owner, Nothing, Point0, Point8, false, 3, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        });
        If(ModValue, default, CO_GREATER_THAN, default, 0, () => {
            SpellCast(Owner, Nothing, Point1, Point1, false, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
            SpellCast(Owner, Nothing, Point2, Point2, false, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
            SpellCast(Owner, Nothing, Point3, Point3, false, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
            SpellCast(Owner, Nothing, Point4, Point4, false, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
            SpellCast(Owner, Nothing, Point5, Point5, false, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
            SpellCast(Owner, Nothing, Point6, Point6, false, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
            SpellCast(Owner, Nothing, Point0, Point8, false, 3, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        });
        SpellBuffAdd(Owner, Owner, "MissFortuneWaves", 8, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        Count = Math(0 + (Count ?? 0), MO_ADD, 1);
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 8, () => {
            StopChanneling(Owner, ChannelingStopCondition_Success, ChannelingStopSource_TimeCompleted);
        });
    }
    public void ChannelingUpdateStats()
    {
        #region VarDecl
        TeamId? TeamOfOwner = null;
        TeamId? TargetTeam = null;
        TeamId? MyTeam = null;
        int? Count = null;
        #endregion
        If(this.ChargeTimePassed, default, CO_EQUAL, default, 0, () => {
            If(AccumTime, default, CO_GREATER_THAN, default, 1.5, () => {
                this.ChargeTimePassed = 1;
                SpellEffectRemove(this.ParticleID);
                SpellEffectRemove(this.ParticleID2);
                TeamOfOwner = GetTeamID(default);
                If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
                    SpellEffectCreate(this.ParticleID, this.ParticleID2, "OdinCaptureBeamEngaged_red.troy", "OdinCaptureBeamEngaged_green.troy", TEAM_CHAOS, 10, 0, TEAM_CHAOS, Owner, false, Owner, "BUFFBONE_GLB_CHANNEL_LOC", default, Target, "crystal", default, false, false, false, false, false, default, default);
                });
                Else(() => {
                    SpellEffectCreate(this.ParticleID, this.ParticleID2, "OdinCaptureBeamEngaged_green.troy", "OdinCaptureBeamEngaged_red.troy", TEAM_CHAOS, 10, 0, TEAM_CHAOS, Owner, false, Owner, "BUFFBONE_GLB_CHANNEL_LOC", default, Target, "crystal", default, false, false, false, false, false, default, default);
                });
            });
        });
        IfNotHasBuff(Owner, Owner, "OdinCaptureChannel", () => {
            StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_Move);
        });
        TeamOfOwner = GetTeamID(default);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            IfNotHasBuff(Target, Owner, "OdinGuardianSuppressionOrder", () => {
                StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_Move);
            });
        });
        Else(() => {
            IfNotHasBuff(Target, Owner, "OdinGuardianSuppressionChaos", () => {
                StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_Move);
            });
        });
        TargetTeam = GetTeamID(default);
        MyTeam = GetTeamID(default);
        If(MyTeam, default, CO_EQUAL, TargetTeam, default, () => {
            StopChanneling(Owner, ChannelingStopCondition_Success, ChannelingStopSource_Move);
        });
        If(this.ChargeTimePassed, default, CO_EQUAL, default, 0, () => {
            If(AccumTime, default, CO_GREATER_THAN, default, 1.5, () => {
                this.ChargeTimePassed = 1;
                SpellEffectRemove(this.ParticleID);
                SpellEffectRemove(this.ParticleID2);
                SpellEffectCreate(this.ParticleID, default, "OdinCaptureBeamEngaged.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_CHANNEL_LOC", default, Target, "spine", default, false, false, false, false, false, default, default);
                SpellEffectCreate(this.ParticleID2, default, "OdinCaptureBeamEngaged.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_CHANNEL_LOC", default, Target, "spine", default, false, false, false, false, false, default, default);
                UnlockAnimation(Owner, true);
                PlayAnimation("Channel", 0, Owner, true, true, false);
            });
        });
        IfNotHasBuff(Owner, Owner, "OdinCaptureChannelBomb", () => {
            StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_Move);
        });
        If(this.ChargeTimePassed, default, CO_EQUAL, default, 1, () => {
            IfHasBuff(Owner, Owner, "OdinCaptureChannelBomb", () => {
                Count = GetBuffCountFromAll(Target, "OdinBombSuppression");
                If(Count, default, CO_EQUAL, default, 0, () => {
                    TeamOfOwner = GetTeamID(default);
                    If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
                        SpellBuffAdd(Owner, Target, "OdinBombSuppressionOrder", 10, 1, 30, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                    });
                    Else(() => {
                        SpellBuffAdd(Owner, Target, "OdinBombSuppressionChaos", 10, 1, 30, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                    });
                    SpellBuffAdd(Owner, Target, "OdinBombSuppression", 1, 1, 10, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Aura, 0, true, false, false, default);
                });
            });
        });
    }
    public void CharOnKillUnit()
    {
        #region VarDecl
        Object? Level = null;
        Object? ManaToInc = null;
        Object? ChampionAPGain = null;
        int? Count = null;
        #endregion
        IfHasBuff(Owner, Owner, "Defile", () => {
            
        });
        Else(() => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                ManaToInc = this.VALUE_BY_LEVEL;
                IncPAR(Owner, 0 + (ManaToInc ?? 0));
                SpellEffectCreate(Particle, default, "NeutralMonster_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                NextBuffVars.IsChampion = true;
            });
            Else(() => {
                NextBuffVars.IsChampion = false;
            });
            IfHasBuff(Owner, Owner, "ScavengeArmor", () => {
                CharVars.NumMinionsKilled = Math(1, MO_ADD, 0 + (CharVars.NumMinionsKilled ?? 0));
            });
            Else(() => {
                CharVars.NumMinionsKilled = 1;
                CharVars.ScavengeArmorTotal = 0;
            });
            SpellBuffAdd(Attacker, Owner, "ScavengeArmor", 1, 1, 20000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                NextBuffVars.IsChampion = true;
            });
            Else(() => {
                NextBuffVars.IsChampion = false;
            });
            IfHasBuff(Owner, Owner, "ScavengeArmor", () => {
                CharVars.NumMinionsKilled = Math(1, MO_ADD, 0 + (CharVars.NumMinionsKilled ?? 0));
            });
            Else(() => {
                CharVars.NumMinionsKilled = 1;
                CharVars.ScavengeArmorTotal = 0;
            });
            SpellBuffAdd(Attacker, Owner, "ScavengeArmor", 1, 1, 20000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                ChampionAPGain = this.VALUE_BY_LEVEL;
                CharVars.APGain = Math(0 + (CharVars.APGain ?? 0), MO_ADD, 0 + (ChampionAPGain ?? 0));
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                NextBuffVars.IsChampion = true;
            });
            Else(() => {
                NextBuffVars.IsChampion = false;
            });
            IfHasBuff(Owner, Owner, "ScavengeArmor", () => {
                CharVars.NumMinionsKilled = Math(1, MO_ADD, 0 + (CharVars.NumMinionsKilled ?? 0));
            });
            Else(() => {
                CharVars.NumMinionsKilled = 1;
                CharVars.ScavengeArmorTotal = 0;
            });
            SpellBuffAdd(Attacker, Owner, "ScavengeArmor", 1, 1, 20000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        IfHasBuff(Owner, Owner, "AkaliShadowDance", () => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                Count = GetBuffCountFromAll(Owner, "AkaliShadowDance");
                If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 4, () => {
                    
                });
                ElseIf(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
                    SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 4, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 4, 1, 0, NextBuffVars, BUFF_STACKS_AND_CONTINUE, BUFF_AmmoStack, 0, true, false, false, default);
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                NextBuffVars.IsChampion = true;
            });
            Else(() => {
                NextBuffVars.IsChampion = false;
            });
            IfHasBuff(Owner, Owner, "ScavengeArmor", () => {
                CharVars.NumMinionsKilled = Math(1, MO_ADD, 0 + (CharVars.NumMinionsKilled ?? 0));
            });
            Else(() => {
                CharVars.NumMinionsKilled = 1;
                CharVars.ScavengeArmorTotal = 0;
            });
            SpellBuffAdd(Attacker, Owner, "ScavengeArmor", 1, 1, 20000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        IncHealth(Owner, 0 + (CharVars.HealAmount ?? 0), Owner);
        SpellEffectCreate(Particle, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        IfHasBuff(Owner, Owner, "Defile", () => {
            
        });
        Else(() => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                ManaToInc = this.VALUE_BY_LEVEL;
                IncPAR(Owner, 0 + (ManaToInc ?? 0));
                SpellEffectCreate(Particle, default, "NeutralMonster_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
            });
        });
    }
    public void CharOnResurrect()
    {
        #region VarDecl
        Object? Level = null;
        float? Temp1 = null;
        int? SkinID = null;
        int? Count = null;
        #endregion
        SpellBuffAdd(Owner, Owner, "DeathDefied", 1, 1, 30000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "LuxDeathParticle", Owner, 0);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "HeimerdingerTurretReady", 2, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
        });
        Temp1 = GetPAROrHealth(Owner, GetPAR, PAR_SHIELD);
        Temp1 = Math(0 + (Temp1 ?? 0), MO_MULTIPLY, -1);
        IncPAR(Owner, 0 + (Temp1 ?? 0));
        SpellBuffAdd(Owner, Owner, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.GhostAlive = false;
        DestroyMissile(CharVars.MissileID);
        SpellBuffAdd(Owner, Owner, "MonkeyKingDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "XenZhaoPuncture", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "XenZhaoBattleCryPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        SpellBuffAdd(Owner, Target, "XenZhaoPuncture", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "XenZhaoBattleCryPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        });
        SpellBuffAdd(Owner, Owner, "YomuGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.GhostAlive = false;
        DestroyMissile(CharVars.MissileID);
        SpellBuffAdd(Owner, Owner, "ViktorPassiveAPPerLev", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "BrandPassiveSound", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, true, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            NextBuffVars.CounterVar = this.VALUE_BY_LEVEL;
            CharVars.Count = 0;
            SpellBuffAdd(Owner, Owner, "KennenDoubleStrikeProc", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        this.TickTock = this.VALUE_BY_LEVEL;
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 4, 4, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        });
        SkinID = GetSkinID(Owner);
        If(SkinID, default, CO_EQUAL, default, 4, () => {
            PlayAnimation("gangplank_key", 0, Owner, true, false, false);
        });
        IncPAR(Owner, -100);
        IncPAR(Owner, -99);
        IncPAR(Owner, -100);
        IncPAR(Owner, 0 + (this.CurrentPar ?? 0));
        IfHasBuff(Owner, Owner, "ShyvanaTransformDeath", () => {
            SpellBuffRemove(Owner, "ShyvanaTransformDeath", Owner, 0);
        });
        SpellBuffAdd(Owner, Owner, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.GhostAlive = false;
        DestroyMissile(CharVars.MissileID);
        SpellBuffRemove(Owner, "CassiopeiaDeathParticle", Owner, default);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        IncPAR(Owner, -99);
        UnlockAnimation(Owner, true);
        IncPAR(Owner, -99);
        PopAllCharacterData(Owner);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PopAllCharacterData(Owner);
        SpellBuffRemove(Owner, "CassiopeiaDeathParticle", Owner, default);
        SpellBuffAdd(Owner, Owner, "DeathDefied", 1, 1, 30000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            SpellBuffClear(Owner, "MissileBarrage");
            SpellBuffAdd(Owner, Owner, "MissileBarrage", 8, 8, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        });
        SpellBuffAdd(Owner, Owner, "MonkeyKingDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "YomuGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.GhostAlive = false;
        DestroyMissile(CharVars.MissileID);
        SpellBuffAdd(Owner, Owner, "KarmaChakraCharge", 3, 3, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        IfHasBuff(Owner, Owner, "KarmaOneMantraParticle", () => {
            SpellBuffRemove(Owner, "KarmaOneMantraParticle", Owner, 0);
        });
        SpellBuffAdd(Owner, Owner, "KarmaTwoMantraParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Temp1 = GetPAROrHealth(Owner, GetPAR, PAR_OTHER);
        Temp1 = Math(0 + (Temp1 ?? 0), MO_MULTIPLY, -1);
        IncPAR(Owner, 0 + (Temp1 ?? 0));
        Count = GetBuffCountFromCaster(Owner, Owner, "Feast");
        If(Count, default, CO_EQUAL, default, 1, () => {
            OverrideAnimation("Run", "Run1", Owner);
        });
        ElseIf(Count, default, CO_EQUAL, default, 2, () => {
            OverrideAnimation("Run", "Run2", Owner);
        });
        ElseIf(Count, default, CO_EQUAL, default, 3, () => {
            OverrideAnimation("Run", "Run3", Owner);
        });
        ElseIf(Count, default, CO_EQUAL, default, 4, () => {
            OverrideAnimation("Run", "Run4", Owner);
        });
        ElseIf(Count, default, CO_EQUAL, default, 5, () => {
            OverrideAnimation("Run", "Run5", Owner);
        });
        ElseIf(Count, default, CO_EQUAL, default, 6, () => {
            OverrideAnimation("Run", "Run6", Owner);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN, default, 0, () => {
            SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        });
        CharVars.SpectralCounter = 0;
        SpellBuffAdd(Owner, Owner, "YorickRavenousLifesteal", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "XerathParticleBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
    }
    public void CharOnLevelUpSpell()
    {
        #region VarDecl
        Object? Level = null;
        Object? ArmorBoost = null;
        Object? AttackSpeedBoost = null;
        float? TotalAttackDamage = null;
        double? DamagePercent = null;
        float? DamageToDisplay = null;
        #endregion
        If(Slot, default, CO_EQUAL, default, 2, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "Bloodscent_internal", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 2, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
            NextBuffVars.CooldownBonus = this.VALUE_BY_LEVEL;
            NextBuffVars.AttackSpeedBonus = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Owner, "CardmasterStack", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Slot, default, CO_EQUAL, default, 2, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "VorpalSpikes", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 0, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "BloodlustMarker", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 3, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                If(CharVars.lastCast, default, CO_EQUAL, default, 0, () => {
                    SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "LeblancChaosOrbM");
                    SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
                });
                ElseIf(default, default, CO_EQUAL, default, default, () => {
                    SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "leblancslidem");
                    SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
                });
                Else(() => {
                    SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "LeblancSoulShackleM");
                    SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
                });
            });
        });
        If(Slot, default, CO_EQUAL, default, 0, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.BonusAP = this.VALUE_BY_LEVEL;
            CharVars.MaxBonus = this.VALUE_BY_LEVEL;
        });
        If(Slot, default, CO_EQUAL, default, 2, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "Bloodscent_internal", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                CharVars.TotalBonus = 0;
                CharVars.CommandReady = 0;
                NextBuffVars.BonusArmor = this.VALUE_BY_LEVEL;
                CharVars.MaxBonus = this.VALUE_BY_LEVEL;
                NextBuffVars.BonusMR = this.VALUE_BY_LEVEL;
                SpellBuffAdd(Owner, Owner, "GarenCommandKill", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 3, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "TeemoMushrooms", 4, 2, 0 + (CharVars.MushroomCooldown ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "TeemoMoveQuickPassive", 1, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 0, () => {
            SpellBuffAdd(Owner, Owner, "Overload", 1, 1, 20000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Slot, default, CO_EQUAL, default, 3, () => {
            IncPermanentFlatPARPoolMod(Owner, 75);
        });
        IfHasBuff(Owner, Owner, "SonaHymnofValor", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            NextBuffVars.APADBoost = this.VALUE_BY_LEVEL;
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                SpellBuffAdd(Owner, Unit, "SonaHymnofValorAuraB", 1, 1, 1.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        IfHasBuff(Owner, Owner, "SonaAriaofPerseverance", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            NextBuffVars.ARMRBoost = this.VALUE_BY_LEVEL;
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                SpellBuffAdd(Owner, Unit, "SonaAriaofPerseveranceAuraB", 1, 1, 1.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        IfHasBuff(Owner, Owner, "SonaSongofDiscord", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            NextBuffVars.MSBoost = this.VALUE_BY_LEVEL;
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, true, (Unit) => {
                SpellBuffAdd(Owner, Unit, "SonaSongofDiscordAuraB", 1, 1, 1.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            IfHasBuff(Owner, Owner, "IreliaHitenStyleCharged", () => {
                
            });
            Else(() => {
                SpellBuffAdd(Owner, Owner, "IreliaHitenStyle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            IfNotHasBuff(Owner, Owner, "XenZhaoBattleCryPH", () => {
                SpellBuffAdd(Owner, Owner, "XenZhaoBattleCryPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            IfNotHasBuff(Owner, Owner, "XenZhaoBattleCryPH", () => {
                SpellBuffAdd(Owner, Owner, "XenZhaoBattleCryPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "YomuShockOrb", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ArmorBoost = this.VALUE_BY_LEVEL;
        AttackSpeedBoost = this.VALUE_BY_LEVEL;
        If(Slot, default, CO_EQUAL, default, 2, () => {
            IncPermanentStat(IncPermanentFlatArmorMod, Owner, 0 + (ArmorBoost ?? 0));
            IncPermanentStat(IncPermanentPercentAttackSpeedMod, Owner, 0 + (AttackSpeedBoost ?? 0));
        });
        If(Slot, default, CO_EQUAL, default, 2, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.BonusDamage = this.VALUE_BY_LEVEL;
            NextBuffVars.CooldownBonus = this.VALUE_BY_LEVEL;
            NextBuffVars.AttackSpeedBonus = this.VALUE_BY_LEVEL;
            SpellBuffAdd(Owner, Owner, "CardmasterStack", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SpellBuffAdd(Owner, Owner, "KennenDoubleStrikeProc", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "KillerInstinctBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Slot, default, CO_EQUAL, default, 3, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 4, 2, 25, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            this.AttackPercentage = this.VALUE_BY_LEVEL;
            this.BonusAttackPercentage = this.VALUE_BY_LEVEL;
            this.BonusDamage = this.VALUE_BY_LEVEL;
            this.RageBonusDamage = this.VALUE_BY_LEVEL;
        });
        If(Slot, default, CO_EQUAL, default, 3, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            CharVars.MaliceHeal = this.VALUE_BY_LEVEL;
        });
        If(Slot, default, CO_EQUAL, default, 3, () => {
            SpellBuffAdd(Owner, Owner, "ShyvanaDragonScales", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                IncPAR(Owner, 100);
            });
        });
        If(Slot, default, CO_EQUAL, default, 0, () => {
            TotalAttackDamage = GetTotalAttackDamage(Owner);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN, default, 0, () => {
                DamagePercent = this.VALUE_BY_LEVEL;
            });
            Else(() => {
                DamagePercent = 0.8;
            });
            DamageToDisplay = Math(0 + (TotalAttackDamage ?? 0), MO_MULTIPLY, 0 + (DamagePercent ?? 0));
            SetSpellToolTipVar(0 + (DamageToDisplay ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        If(Slot, default, CO_EQUAL, default, 3, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            CharVars.TakedownDamage = this.VALUE_BY_LEVEL;
            CharVars.PounceDamage = this.VALUE_BY_LEVEL;
            CharVars.SwipeDamage = this.VALUE_BY_LEVEL;
            SetSpellToolTipVar(0 + (CharVars.TakedownDamage ?? 0), 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            SetSpellToolTipVar(0 + (CharVars.PounceDamage ?? 0), 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            SetSpellToolTipVar(0 + (CharVars.SwipeDamage ?? 0), 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "FizzPassiveDisplayIcon", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        AttackSpeedBoost = this.VALUE_BY_LEVEL;
        If(Slot, default, CO_EQUAL, default, 1, () => {
            IncPermanentStat(IncPermanentPercentAttackSpeedMod, Owner, 0 + (AttackSpeedBoost ?? 0));
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "VolibearW", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, true, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 0, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "BloodlustMarker", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 3, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "MissileBarrage", 8, 2, 0 + (CharVars.ChargeCooldown ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
                SpellBuffAdd(Owner, Owner, "CorkiMissileBarrageNC", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "YomuShockOrb", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "MissFortunePassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        If(Slot, default, CO_EQUAL, default, 2, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "VorpalSpikes", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 3, () => {
            IncPermanentStat(IncPermanentFlatArmorPenetrationMod, Owner, 10);
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_EQUAL, default, 1, () => {
                SpellBuffAdd(Owner, Owner, "VayneSilveredBolts", 1, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_EQUAL, default, 1, () => {
            SpellBuffAdd(Owner, Owner, "PoppyParagonManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
    }
    public void CharOnMiss()
    {
        #region VarDecl
        Vector3? castPosition = null;
        Object? Level = null;
        #endregion
        IfHasBuff(Owner, Owner, "VorpalSpikes", () => {
            castPosition = GetPointByUnitFacingOffset(Owner, 550, 0);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SpellCast(Owner, Target, castPosition, default, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        });
        IfHasBuff(Owner, Owner, "VorpalSpikes", () => {
            castPosition = GetPointByUnitFacingOffset(Owner, 550, 0);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SpellCast(Owner, Target, castPosition, default, false, 0, ExtraSlots, 0 + (Level ?? 0), true, true, false, false, false, default);
        });
    }
    public void CharOnNearbyDeath()
    {
        #region VarDecl
        Object? Level = null;
        Object? Cooldown = null;
        bool? noRender = null;
        float? NewCooldown = null;
        float? HPPre = null;
        float? HealVar = null;
        #endregion
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                noRender = GetStatus(Target, GetNoRender);
                If(noRender, default, CO_EQUAL, default, false, () => {
                    NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 2);
                    SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
                });
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    noRender = GetStatus(Target, GetNoRender);
                    If(noRender, default, CO_EQUAL, default, false, () => {
                        HPPre = GetPAROrHealth(Target, GetMaxHealth, PAR_MANA);
                        HealVar = Math(0 + (HPPre ?? 0), MO_MULTIPLY, 0 + (CharVars.RegenValue ?? 0));
                        IncHealth(Owner, 0 + (HealVar ?? 0), Owner);
                    });
                });
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
            Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                noRender = GetStatus(Target, GetNoRender);
                If(noRender, default, CO_EQUAL, default, false, () => {
                    NewCooldown = Math(0 + (Cooldown ?? 0), MO_SUBTRACT, 2);
                    SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (NewCooldown ?? 0));
                });
            });
        });
    }
    public void OnActivate()
    {
        #region VarDecl
        ObjAIBase? Caster = null;
        #endregion
        IfHasBuff(Owner, Owner, "NashorsToothCD", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "NashorsToothCD", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        IfHasBuff(Owner, Owner, "Thornmail", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "Thornmail", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        this.OwnerLevel = GetLevel(Owner);
        If(Owner, default, CO_IS_NOT_HERO, default, default, () => {
            Caster = GetPetOwner(Owner);
            IfHasBuff(Caster, Caster, "BansheesVeil", () => {
                NextBuffVars.WillRemove = false;
                SpellBuffAdd(Owner, Owner, "BansheesVeil", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
            });
        });
        Else(() => {
            IfNotHasBuff(Owner, Owner, "BansheesVeil", () => {
                IfNotHasBuff(Owner, Owner, "BansheesVeilTimer", () => {
                    NextBuffVars.WillRemove = false;
                    SpellBuffAdd(Owner, Owner, "BansheesVeil", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
                });
            });
        });
        SpellEffectCreate(default, default, "Fervor", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        IfHasBuff(Owner, Owner, "FiendishCodex", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "FiendishCodex", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        IfHasBuff(Owner, Owner, "TearOfTheGoddessTrack", () => {
            
        });
        Else(() => {
            CharVars.TearBonusMana = 0;
        });
        SetSpellToolTipVar(0 + (CharVars.TearBonusMana ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        IfHasBuff(Owner, Owner, "AtmasImpaler", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "AtmasImpaler", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        IfHasBuff(Owner, Owner, "Brutalizer", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "Brutalizer", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        IfHasBuff(Owner, Owner, "Kindlegem", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "Kindlegem", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        IfHasBuff(Owner, Owner, "TearOfTheGoddessTrack", () => {
            
        });
        Else(() => {
            CharVars.TearBonusMana = 0;
        });
        SetSpellToolTipVar(0 + (CharVars.TearBonusMana ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        If(Owner, default, CO_IS_NOT_HERO, default, default, () => {
            Caster = GetPetOwner(Owner);
            IfHasBuff(Caster, Caster, "WillRevive", () => {
                SpellBuffAdd(Owner, Owner, "WillRevive", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
            Else(() => {
                SpellBuffAdd(Owner, Owner, "HasBeenRevived", 1, 1, 300, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        Else(() => {
            IfNotHasBuff(Owner, Owner, "WillRevive", () => {
                IfNotHasBuff(Owner, Owner, "HasBeenRevived", () => {
                    SpellBuffAdd(Owner, Owner, "WillRevive", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
                });
            });
        });
        this.PhysicalDamageBonus = 0;
        this.PercentLifeSteal = 0;
        IfHasBuff(Owner, Owner, "IonianBootsofLucidity", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "IonianBootsofLucidity", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        IfHasBuff(Owner, Owner, "MercuryTreads", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "MercuryTreads", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "TearOfTheGoddessTrack", () => {
            
        });
        Else(() => {
            CharVars.TearBonusMana = 0;
        });
        SetSpellToolTipVar(0 + (CharVars.TearBonusMana ?? 0), 1, 0 + (Slot ?? 0), InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        IfHasBuff(Owner, Owner, "WitsEnd", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "WitsEnd", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "SpiritVisage", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "SpiritVisage", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        this.CooldownResevoir = 0;
        this.ExtraHP = 0;
        this.ExtraRegen = 0;
        this.CooldownResevoir = 0;
        this.BonusHealth = 0;
        this.BonusMana = 0;
        this.BonusAbilityPower = 0;
        this.OwnerLevel = GetLevel(Owner);
        this.CooldownResevoir = 0;
        IfHasBuff(Owner, Owner, "ChaliceOfHarmony", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "ChaliceOfHarmony", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "Sting", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "Sting", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        IfHasBuff(Owner, Owner, "HextechRevolver", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "HextechRevolver", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "ForceofNature", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "ForceofNature", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, default, default, default, default);
        });
        this.CooldownResevoir = 1;
        IfHasBuff(Owner, Owner, "FrozenHeart", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "FrozenHeart", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        this.CooldownResevoir = 2;
        IfHasBuff(Owner, Owner, "Malady", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "Malady", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        IfHasBuff(Owner, Owner, "InfinityEdge", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "InfinityEdge", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        IfHasBuff(Owner, Owner, "HextechGunblade", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "HextechGunblade", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        IfHasBuff(Owner, Owner, "LastWhisper", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "LastWhisper", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        IfHasBuff(Owner, Owner, "GlacialShroud", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "GlacialShroud", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        IfHasBuff(Owner, Owner, "FiendishCodex", () => {
            
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "FiendishCodex", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
    }
    public void ItemOnPreDamage()
    {
        #region VarDecl
        float? StatBoost = null;
        TeamId? TeamID = null;
        float? HP = null;
        float? ProjectedHP = null;
        float? MaxHP = null;
        float? NewPercentHP = null;
        float? ShieldHealth = null;
        float? DamageAmount = null;
        #endregion
        SpellBuffAdd(Owner, Owner, "BootsOfMobilityDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        IfNotHasBuff(Owner, Owner, "RunegorgedBattleaxe", () => {
            If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
                If(DamageAmount, default, CO_GREATER_THAN, default, 0, () => {
                    StatBoost = Math(0 + (DamageAmount ?? 0), MO_MULTIPLY, 0.0625);
                    StatBoost = Math(0 + (StatBoost ?? 0), MO_MIN, 50);
                    NextBuffVars.StatBoost = StatBoost;
                    SpellBuffAdd(Owner, Owner, "RunegorgedBattleaxe", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                });
            });
        });
        TeamID = GetTeamID(default);
        IfNotHasBuff(Owner, Owner, "HexdrinkerTimer", () => {
            IfNotHasBuff(Owner, Owner, "Hexdrinker", () => {
                If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
                    If(DamageAmount, default, CO_GREATER_THAN, default, 0, () => {
                        HP = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
                        ProjectedHP = Math(0 + (HP ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
                        MaxHP = GetPAROrHealth(Owner, GetMaxHealth, PAR_MANA);
                        NewPercentHP = Math(0 + (ProjectedHP ?? 0), MO_DIVIDE, 0 + (MaxHP ?? 0));
                        If(NewPercentHP, default, CO_LESS_THAN, default, 0.3, () => {
                            SpellEffectCreate(c, default, "hexTech_dmg_shield_birth.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
                            SpellEffectCreate(a, default, "hexTech_dmg_shield_onHit_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
                            SpellEffectCreate(b, default, "hexTech_dmg_shield_onHit_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
                            ShieldHealth = 300;
                            If(ShieldHealth, default, CO_GREATER_THAN_OR_EQUAL, DamageAmount, default, () => {
                                ShieldHealth = Math(0 + (ShieldHealth ?? 0), MO_SUBTRACT, 0 + (DamageAmount ?? 0));
                                NextBuffVars.ShieldHealth = ShieldHealth ?? 0;
                                DamageAmount = 0;
                                SpellBuffAdd(Owner, Owner, "Hexdrinker", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                                SpellBuffAdd(Owner, Owner, "HexdrinkerTimer", 1, 1, 60, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
                            });
                            Else(() => {
                                DamageAmount = Math(0 + (DamageAmount ?? 0), MO_SUBTRACT, 0 + (ShieldHealth ?? 0));
                                NextBuffVars.ShieldHealth = 0;
                                SpellBuffAdd(Owner, Owner, "Hexdrinker", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
                                SpellBuffAdd(Owner, Owner, "HexdrinkerTimer", 1, 1, 60, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
                            });
                        });
                    });
                });
            });
        });
    }
    public void ItemOnPreDealDamage()
    {
        SpellBuffAdd(Owner, Owner, "BootsOfMobilityDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
                    If(default, default, CO_DAMAGE_SOURCETYPE_IS, default, DAMAGESOURCE_SPELL, () => {
                        SpellBuffAdd(Target, Target, "Internal_35Slow", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        SpellBuffAdd(Attacker, Target, "ItemSlow", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
                    });
                    ElseIf(default, default, CO_DAMAGE_SOURCETYPE_IS, default, DAMAGESOURCE_SPELLAOE, () => {
                        SpellBuffAdd(Target, Target, "Internal_15Slow", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        SpellBuffAdd(Attacker, Target, "ItemSlow", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
                    });
                    ElseIf(default, default, CO_DAMAGE_SOURCETYPE_IS, default, DAMAGESOURCE_SPELLPERSIST, () => {
                        SpellBuffAdd(Target, Target, "Internal_15Slow", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        SpellBuffAdd(Attacker, Target, "ItemSlow", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
                    });
                });
            });
        });
    }
    public void OnDeactivate()
    {
        IfHasBuff(Owner, Owner, "BootsOfMobilityDebuff", () => {
            SpellBuffRemove(Owner, "BootsOfMobilityDebuff", Owner, default);
        });
        IncPermanentStat(IncPermanentPercentAttackSpeedMod, Owner, -0.04);
        IncPermanentStat(IncPermanentFlatMagicDamageMod, Owner, -7);
    }
    public void ItemOnHitUnit()
    {
        #region VarDecl
        ObjAIBase? Attacker = null;
        #endregion
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                SpellEffectCreate(default, default, "TiamatMelee_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
                If(Owner, default, CO_IS_RANGED, default, default, () => {
                    TempTable1.ThirdDA = Math(0.35, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                });
                Else(() => {
                    IfHasBuff(Owner, Nothing, "JudicatorRighteousFury", () => {
                        TempTable1.ThirdDA = Math(0.35, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                    });
                    Else(() => {
                        TempTable1.ThirdDA = Math(0.5, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                    });
                });
                ForEachUnitInTargetArea(Owner, Target, 210, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                    If(Target, default, CO_NOT_EQUAL, Unit, default, () => {
                        If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
                            ApplyDamage(Owner, Unit, 0 + (TempTable1.ThirdDA ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, true, true, Attacker);
                        });
                        ElseIf(DamageType, default, CO_EQUAL, default, PHYSICAL_DAMAGE, () => {
                            ApplyDamage(Owner, Unit, 0 + (TempTable1.ThirdDA ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, true, true, Attacker);
                        });
                        Else(() => {
                            ApplyDamage(Owner, Unit, 0 + (TempTable1.ThirdDA ?? 0), TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, true, true, Attacker);
                        });
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(default, 0.25, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                            SpellBuffAdd(Target, Target, "Internal_30Slow", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                            SpellBuffAdd(Owner, Target, "ItemSlow", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(default, 0.25, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                            SpellBuffAdd(Target, Target, "Internal_35Slow", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
                            SpellBuffAdd(Owner, Target, "ItemSlow", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, default, default);
                        });
                    });
                });
            });
        });
        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Owner, default, CO_IS_NOT_HERO, default, default, () => {
                    Attacker = GetPetOwner(Owner);
                });
                SpellBuffAdd(Attacker, Target, "Mourning", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, default, default);
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                        
                    });
                    Else(() => {
                        If(Owner, default, CO_IS_RANGED, default, default, () => {
                            SpellBuffAdd(Target, Target, "Internal_30Slow", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
                        });
                        Else(() => {
                            IfHasBuff(Owner, Nothing, "JudicatorRighteousFury", () => {
                                SpellBuffAdd(Target, Target, "Internal_30Slow", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
                            });
                            Else(() => {
                                SpellBuffAdd(Target, Target, "Internal_40Slow", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
                            });
                        });
                        SpellBuffAdd(Owner, Target, "ItemSlow", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, default, default);
                    });
                });
            });
        });
        If(Target, default, CO_IS_TYPE_HERO, default, true, () => {
            SpellBuffAdd(Attacker, Target, "OdinLightbringer", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        SpellBuffAdd(Owner, Owner, "Rageblade", 8, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, default, default, default, default);
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Dodge, () => {
            If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
                If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                    If(default, 0.25, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                            SpellBuffAdd(Target, Target, "Internal_30Slow", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
                            SpellBuffAdd(Owner, Target, "ItemSlow", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, default, default, default, default);
                        });
                    });
                });
            });
        });
        If(HitResult, default, CO_NOT_EQUAL, default, HIT_Miss, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                    
                });
                Else(() => {
                    NextBuffVars.ArmorReduction = -15;
                    SpellBuffAdd(Attacker, Target, "BlackCleaver", 3, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
                });
            });
        });
    }
    public void ItemOnKill()
    {
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            SpellBuffAdd(Owner, Owner, "BagOfTeaMarker", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        this.PhysicalDamageBonus = Math(0 + (this.PhysicalDamageBonus ?? 0), MO_ADD, 1);
        this.PercentLifeSteal = Math(0 + (this.PercentLifeSteal ?? 0), MO_ADD, 0.0025);
        this.PhysicalDamageBonus = Math(0 + (this.PhysicalDamageBonus ?? 0), MO_MIN, 40);
        this.PercentLifeSteal = Math(0 + (this.PercentLifeSteal ?? 0), MO_MIN, 0.1);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            this.ExtraHP = Math(0 + (this.ExtraHP ?? 0), MO_ADD, 35);
            this.ExtraRegen = Math(0 + (this.ExtraRegen ?? 0), MO_ADD, 0.2);
            this.ExtraHP = Math(0 + (this.ExtraHP ?? 0), MO_MIN, 350);
            this.ExtraRegen = Math(0 + (this.ExtraRegen ?? 0), MO_MIN, 2);
        });
        Else(() => {
            this.ExtraHP = Math(0 + (this.ExtraHP ?? 0), MO_ADD, 3.5);
            this.ExtraRegen = Math(0 + (this.ExtraRegen ?? 0), MO_ADD, 0.02);
            this.ExtraHP = Math(0 + (this.ExtraHP ?? 0), MO_MIN, 350);
            this.ExtraRegen = Math(0 + (this.ExtraRegen ?? 0), MO_MIN, 2);
        });
    }
    public void ItemOnDeath()
    {
        #region VarDecl
        float? Count = null;
        #endregion
        SpellBuffRemove(Owner, "SunfireCloakParticle", Owner, default);
        Count = GetBuffCountFromAll(Owner, "MejaisStats");
        If(Count, default, CO_GREATER_THAN, default, 0, () => {
            Count = Math(0.33, MO_MULTIPLY, 0 + (Count ?? 0));
            If(Count, default, CO_LESS_THAN, default, 1.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "MejaisStats", 1);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 2.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "MejaisStats", 2);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 3.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "MejaisStats", 3);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 4.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "MejaisStats", 4);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 5.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "MejaisStats", 5);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 7, () => {
                SpellBuffRemoveStacks(Owner, Owner, "MejaisStats", 6);
            });
        });
        this.PhysicalDamageBonus = 0;
        this.PercentLifeSteal = 0;
        Count = GetBuffCountFromAll(Owner, "LeviathanStats");
        If(Count, default, CO_GREATER_THAN, default, 0, () => {
            Count = Math(0.33, MO_MULTIPLY, 0 + (Count ?? 0));
            If(Count, default, CO_LESS_THAN, default, 1.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "LeviathanStats", 1);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 2.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "LeviathanStats", 2);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 3.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "LeviathanStats", 3);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 4.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "LeviathanStats", 4);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 5.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "LeviathanStats", 5);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 7, () => {
                SpellBuffRemoveStacks(Owner, Owner, "LeviathanStats", 6);
            });
        });
        Count = GetBuffCountFromAll(Owner, "MuramasaStats");
        If(Count, default, CO_GREATER_THAN, default, 0, () => {
            Count = Math(0.33, MO_MULTIPLY, 0 + (Count ?? 0));
            If(Count, default, CO_LESS_THAN, default, 1.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "MuramasaStats", 1);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 2.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "MuramasaStats", 2);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 3.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "MuramasaStats", 3);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 4.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "MuramasaStats", 4);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 5.5, () => {
                SpellBuffRemoveStacks(Owner, Owner, "MuramasaStats", 5);
            });
            ElseIf(Count, default, CO_LESS_THAN, default, 7, () => {
                SpellBuffRemoveStacks(Owner, Owner, "MuramasaStats", 6);
            });
        });
    }
    public void UpdateAura()
    {
        DefUpdateAura(Owner, 200, UNITSCAN_Friends, "Fervor");
    }
    public void ItemOnDealDamage()
    {
        #region VarDecl
        float? CritChance = null;
        float? Dmg = null;
        #endregion
        If(DamageType, default, CO_EQUAL, default, MAGIC_DAMAGE, () => {
            CritChance = GetStat(GetFlatCritChanceMod, Owner);
            If(CritChance, default, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                Dmg = Math(0.25, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
                ApplyDamage(Attacker, Target, 0 + (Dmg ?? 0), TRUE_DAMAGE, DAMAGESOURCE_PROC, 1, 1, default, default, default, default);
            });
        });
        If(Target, default, CO_IS_TYPE_HERO, default, true, () => {
            If(DamageType, default, CO_DAMAGE_SOURCETYPE_IS, default, DAMAGESOURCE_SPELL, () => {
                SpellBuffAdd(Attacker, Target, "OdinLightbringer", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
            If(DamageType, default, CO_DAMAGE_SOURCETYPE_IS, default, DAMAGESOURCE_SPELLAOE, () => {
                SpellBuffAdd(Attacker, Target, "OdinLightbringer", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
            If(DamageType, default, CO_DAMAGE_SOURCETYPE_IS, default, DAMAGESOURCE_SPELLPERSIST, () => {
                SpellBuffAdd(Attacker, Target, "OdinLightbringer", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
    }
    public void ItemOnBeingHit()
    {
        If(default, DAMAGESOURCE_ATTACK, CO_DAMAGE_SOURCETYPE_IS, default, DAMAGESOURCE_ATTACK, () => {
            SpellBuffAdd(Owner, Owner, "RenewalTunic", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Heal, 0, default, default, default, default);
        });
        IfNotHasBuff(Owner, Owner, "RanduinsOmen", () => {
            If(default, 0.2, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                If(Attacker, default, CO_IS_TYPE_TURRET, default, default, () => {
                    
                });
                Else(() => {
                    NextBuffVars.MoveSpeedMod = -0.35;
                    SpellBuffAdd(Owner, Attacker, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
                    NextBuffVars.AttackSpeedMod = -0.35;
                    SpellBuffAdd(Owner, Attacker, "Cripple", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_CombatDehancer, 0, true, false, default, default);
                });
            });
        });
    }
    public void BuffOnMoveEnd()
    {
        #region VarDecl
        TeamId? TeamID = null;
        AttackableUnit? Caster = null;
        int? Count = null;
        bool? IsStealthed = null;
        bool? CanSee = null;
        TeamId? TeamOfOwner = null;
        Object? Level = null;
        float? NumUnits = null;
        float? AttackDamage = null;
        float? AttackDamageMod = null;
        float? TotalDamage = null;
        float? DamageToDeal = null;
        #endregion
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        this.WillRemove = true;
        SpellBuffRemove(Owner, "BlindMonkWOneDash", Owner, default);
        this.WillRemove = true;
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemove(Owner, "LeapStrike", Attacker, 0);
        SpellBuffClear(Owner, "AhriTumbleKick");
        SpellBuffRemove(Owner, "UnstoppableForceMarker", Owner, default);
        SpellBuffRemoveCurrent(Owner);
        TeamID = GetTeamID(default);
        ForEachUnitInTargetArea(Owner, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            IfNotHasBuff(Unit, Owner, "ShenShadowDashCooldown", () => {
                SpellBuffAdd(Owner, Unit, "ShenShadowDashCooldown", 1, 1, 0 + (this.tauntDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                BreakSpellShields(Unit);
                NextBuffVars.playParticle = true;
                ApplyTaunt(Attacker, Unit, 0 + (this.tauntDuration ?? 0));
                SpellEffectCreate(TargetParticle, default, "shen_shadowDash_unit_impact.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, false, default, default, false, false, default, default);
                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                    If(this.EnergyRefunds, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                        IncPAR(Owner, 40);
                        this.EnergyRefunds = Math(0 + (this.EnergyRefunds ?? 0), MO_SUBTRACT, 1);
                    });
                });
            });
        });
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemove(Owner, "IreliaGatotsuDash", Owner, 0);
        SpellBuffClear(Owner, "MonkeyKingNimbusKickClone");
        SpellBuffClear(Owner, "MonkeyKingNimbusKick");
        Caster = SetBuffCasterUnit();
        SpellBuffRemove(Owner, "XenZhaoSweep", Caster, 0);
        SpellBuffRemoveCurrent(Owner);
        SetStatus(Owner, default, SetNoRender);
        this.willRemove = true;
        ForEachUnitInTargetArea(Owner, Owner, 260, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            Count = GetBuffCountFromAll(Unit, "SlashBeenHit");
            If(Count, default, CO_LESS_THAN, default, 1, () => {
                IsStealthed = GetStatus(Unit, GetStealthed);
                If(IsStealthed, default, CO_EQUAL, default, false, () => {
                    SpellBuffAdd(Owner, Unit, "SlashBeenHit", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Unit);
                    SpellEffectCreate(particle, default, "BloodSlash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, false, default, default, default);
                    SpellBuffAdd(Owner, Unit, "JarvanIVDragonStrikePH2", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
                });
                Else(() => {
                    If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                        SpellBuffAdd(Owner, Unit, "SlashBeenHit", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                        BreakSpellShields(Unit);
                        SpellEffectCreate(particle, default, "BloodSlash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, false, default, default, default);
                        SpellBuffAdd(Owner, Unit, "JarvanIVDragonStrikePH2", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
                    });
                    Else(() => {
                        CanSee = CanSeeTarget(Owner, Unit);
                        If(CanSee, default, CO_EQUAL, default, true, () => {
                            SpellBuffAdd(Owner, Unit, "SlashBeenHit", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                            BreakSpellShields(Unit);
                            SpellEffectCreate(particle, default, "BloodSlash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, false, default, default, default);
                            SpellBuffAdd(Owner, Unit, "JarvanIVDragonStrikePH2", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
                        });
                    });
                });
            });
        });
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffClear(Owner, "AkaliShadowDanceKick");
        IfNotHasBuff(Owner, Owner, "RivenTriCleave", () => {
            UnlockAnimation(Owner, true);
        });
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellBuffClear(Owner, "RivenSword");
        SpellBuffClear(Owner, "RivenTriCleaveDamage");
        SpellBuffClear(Owner, "RivenTriCleaveDamage");
        CancelAutoAttack(Owner, true);
        SpellBuffRemoveCurrent(Owner);
        SpellEffectRemove(this.ShinyParticle);
        StopMove(Owner);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetCanAttack);
        SpellBuffAdd(Owner, Owner, "RenektonUnlockAnimationAttack", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "RenektonSliceAndDice", Owner, 0);
        SpellBuffRemoveCurrent(Owner);
        SetStatus(Owner, default, SetCanCast);
        SpellBuffRemove(Owner, "ShyvanaTransformLeap", Owner, 0);
        SpellEffectRemove(this.ShinyParticle);
        StopMove(Owner);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetCanAttack);
        SpellBuffAdd(Owner, Owner, "RenektonUnlockAnimationAttack", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "RenektonSliceAndDice", Owner, 0);
        SpellBuffRemoveCurrent(Owner);
        SetStatus(Owner, default, SetCanAttack);
        this.WillRemove = true;
        SpellBuffRemove(Owner, "NocturneParanoiaDash", Owner, 0);
        TeamOfOwner = GetTeamID(default);
        If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
            ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectNeutral AffectHeroes AlwaysSelf ", default, true, (Unit) => {
                SpellBuffClear(Unit, "NocturneParanoiaDashSound");
            });
        });
        Else(() => {
            ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectNeutral AffectHeroes AlwaysSelf ", default, true, (Unit) => {
                SpellBuffClear(Unit, "NocturneParanoiaDashSound");
            });
        });
        SpellBuffClear(Owner, "FizzJump");
        SpellBuffClear(Owner, "FizzJumpBuffer");
        SpellBuffClear(Owner, "FizzJumpBuffered");
        SpellEffectCreate(temp, default, "Leona_ZenithBlade_arrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        Caster = SetBuffCasterUnit();
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        UnlockAnimation(Owner, true);
        SpellBuffClear(Owner, "FizzPiercingStrike");
        TeamID = GetTeamID(default);
        SpellBuffRemove(Owner, "GragasBodySlam", Owner, 0);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SpellEffectCreate(hi, default, "gragas_bodySlam_cas_03.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        NumUnits = 0;
        AttackDamage = GetTotalAttackDamage(Owner);
        AttackDamageMod = Math(0 + (AttackDamage ?? 0), MO_MULTIPLY, 0.66);
        TotalDamage = Math(0 + (AttackDamageMod ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
        ForEachUnitInTargetArea(Attacker, Attacker, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            NumUnits = Math(1, MO_ADD, 0 + (NumUnits ?? 0));
        });
        ForEachUnitInTargetArea(Attacker, Attacker, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            DamageToDeal = Math(0 + (TotalDamage ?? 0), MO_DIVIDE, 0 + (NumUnits ?? 0));
            If(this.MinimumDamage, default, CO_GREATER_THAN_OR_EQUAL, DamageToDeal, default, () => {
                BreakSpellShields(Unit);
                SpellEffectCreate(asdf1, default, "gragas_bodySlam_unit_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 10, TEAM_UNKNOWN, Owner, false, Unit, "C_BUFFBONE_GLB_CHEST_LOC", default, Unit, default, default, true, default, default, false, false, default, default);
                SpellEffectCreate(asdf2, default, "gragas_bodySlam_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 10, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                ApplyDamage(Attacker, Unit, 0 + (this.MinimumDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 1, false, false, Attacker);
                SpellBuffAdd(Attacker, Unit, "GragasBodySlamTargetSlow", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
            });
            Else(() => {
                BreakSpellShields(Unit);
                SpellEffectCreate(asdf1, default, "gragas_bodySlam_unit_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 10, TEAM_UNKNOWN, Owner, false, Unit, "C_BUFFBONE_GLB_CHEST_LOC", default, Unit, default, default, true, default, default, false, false, default, default);
                SpellEffectCreate(asdf2, default, "gragas_bodySlam_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 10, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
                ApplyDamage(Attacker, Unit, 0 + (DamageToDeal ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 1, false, false, Attacker);
                SpellBuffAdd(Attacker, Unit, "GragasBodySlamTargetSlow", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
            });
        });
        SpellBuffRemove(Owner, "Headbutt", Attacker, 0);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemove(Owner, "VayneTumble", Owner, 0);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
    }
    public void BuffOnMoveSuccess()
    {
        #region VarDecl
        Vector3? CurrentPosition = null;
        TeamId? CasterID = null;
        Object? Level = null;
        AttackableUnit? Caster = null;
        Object? BaseDamage = null;
        float? CasterHealth = null;
        float? HealthPercent = null;
        float? MissingHealthPerc = null;
        float? MissingHealth = null;
        float? BonusDamage = null;
        float? DistanceTar = null;
        AttackableUnit? Attacker = null;
        float? Count = null;
        Vector3? OwnerPos = null;
        TeamId? TeamID = null;
        Vector3? CenterPos = null;
        TeamId? teamID = null;
        Minion? Other2 = null;
        long? PushDistance = null;
        Vector3? TargetPos = null;
        Vector3? unitPos = null;
        Vector3? ownerPos = null;
        float? distance = null;
        int? OwnerSkinID = null;
        Vector3? FocalPoint = null;
        float? Range = null;
        float? Dist = null;
        float? TotalAD = null;
        float? DistanceVar = null;
        Vector3? NewTargetPos = null;
        #endregion
        SpellEffectCreate(this.partname, default, "leBlanc_slide_impact_self.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        CurrentPosition = GetUnitPosition(Owner);
        CasterID = GetTeamID(default);
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellEffectCreate(aoehit, default, "leBlanc_slide_impact_unit_tar.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            ApplyDamage(Owner, Unit, 0 + (this.AEDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Owner);
            IfHasBuff(Unit, Owner, "LeblancChaosOrb", () => {
                ApplySilence(Attacker, Unit, 2);
                SpellBuffRemove(Unit, "LeblancChaosOrb", Owner, 0);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.3, 1, false, false, Attacker);
            });
            IfHasBuff(Unit, Owner, "LeblancChaosOrbM", () => {
                ApplySilence(Attacker, Unit, 2);
                SpellBuffRemove(Unit, "LeblancChaosOrbM", Owner, 0);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                If(Level, default, CO_EQUAL, default, 1, () => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.33, 1, false, false, Attacker);
                });
                ElseIf(Level, default, CO_EQUAL, default, 2, () => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.375, 1, false, false, Attacker);
                });
                Else(() => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.42, 1, false, false, Attacker);
                });
            });
        });
        CurrentPosition = GetUnitPosition(Owner);
        SpellEffectCreate(this.partname, default, "leBlanc_slide_impact_self_ult.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        CasterID = GetTeamID(default);
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellEffectCreate(aoehit, default, "leBlanc_slide_impact_unit_tar.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            If(Level, default, CO_EQUAL, default, 1, () => {
                ApplyDamage(Owner, Unit, 0 + (this.AEDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.66, 1, false, false, Owner);
            });
            ElseIf(Level, default, CO_EQUAL, default, 2, () => {
                ApplyDamage(Owner, Unit, 0 + (this.AEDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Owner);
            });
            Else(() => {
                ApplyDamage(Owner, Unit, 0 + (this.AEDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.84, 1, false, false, Owner);
            });
            IfHasBuff(Unit, Owner, "LeblancChaosOrbM", () => {
                ApplySilence(Attacker, Unit, 2);
                SpellBuffRemove(Unit, "LeblancChaosOrbM", Owner, 0);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                If(Level, default, CO_EQUAL, default, 1, () => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.33, 1, false, false, Attacker);
                });
                ElseIf(Level, default, CO_EQUAL, default, 2, () => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.375, 1, false, false, Attacker);
                });
                Else(() => {
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.42, 1, false, false, Attacker);
                });
            });
            IfHasBuff(Unit, Owner, "LeblancChaosOrb", () => {
                ApplySilence(Attacker, Unit, 2);
                SpellBuffRemove(Unit, "LeblancChaosOrb", Owner, 0);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.3, 1, false, false, Attacker);
            });
        });
        Caster = SetBuffCasterUnit();
        BaseDamage = this.BaseDamage;
        BreakSpellShields(Caster);
        ApplyDamage(Owner, Caster, 0 + (BaseDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.8, 0, false, false, Owner);
        SpellBuffAdd(Owner, Caster, "MaokaiUnstableGrowthRoot", 1, 1, 0 + (this.RootDuration ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, true, false, default);
        SpellBuffRemoveCurrent(Owner);
        If(Caster, default, CO_IS_TYPE_HERO, default, default, () => {
            If(Caster, default, CO_DIFFERENT_TEAM, Owner, default, () => {
                IssueOrder(Owner, AI_ATTACKTO, default, Caster);
            });
        });
        Caster = SetBuffCasterUnit();
        CasterHealth = GetPAROrHealth(Caster, GetMaxHealth, PAR_MANA);
        HealthPercent = GetPAROrHealth(Caster, GetHealthPercent, PAR_MANA);
        MissingHealthPerc = Math(1, MO_SUBTRACT, 0 + (HealthPercent ?? 0));
        MissingHealth = Math(0 + (CasterHealth ?? 0), MO_MULTIPLY, 0 + (MissingHealthPerc ?? 0));
        BonusDamage = Math(0.1, MO_MULTIPLY, 0 + (MissingHealth ?? 0));
        CasterID = GetTeamID(default);
        If(CasterID, default, CO_EQUAL, default, TEAM_NEUTRAL, () => {
            BonusDamage = Math(0 + (BonusDamage ?? 0), MO_MIN, 400);
        });
        BreakSpellShields(Caster);
        this.DamageVar = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (this.DamageVar ?? 0));
        SpellBuffAdd(Owner, Caster, "BlindMonkQTwoDashParticle", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Owner, Caster, 0 + (this.DamageVar ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, true, Owner);
        SpellBuffRemoveCurrent(Owner);
        If(Owner, default, CO_DIFFERENT_TEAM, Caster, default, () => {
            If(Caster, default, CO_IS_TYPE_HERO, default, default, () => {
                IssueOrder(Owner, AI_ATTACKTO, default, Caster);
            });
        });
        Caster = SetBuffCasterUnit();
        NextBuffVars.ShieldAbsorb = this.ShieldAbsorb;
        SpellBuffAdd(Owner, Owner, "BlindMonkWOneShield", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Caster, "BlindMonkWOneShield", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        Caster = SetBuffCasterUnit();
        DistanceTar = DistanceBetweenObjects("Caster", "Owner");
        If(DistanceTar, default, CO_LESS_THAN_OR_EQUAL, default, 800, () => {
            BreakSpellShields(Caster);
            ApplyDamage(Owner, Caster, 0 + (this.DamageLvl ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, 1, false, false, Owner);
            ApplyStun(Owner, Caster, 0 + (this.stunLength ?? 0));
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            IssueOrder(Owner, AI_ATTACKTO, default, Caster);
        });
        Attacker = SetBuffCasterUnit();
        If(Attacker, default, CO_DIFFERENT_TEAM, Owner, default, () => {
            SpellCast(Owner, Attacker, Attacker, Attacker, false, 0, ExtraSlots, 1, true, true, false, false, false, default);
        });
        Count = 3;
        OwnerPos = GetUnitPosition(Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        ForNClosestVisibleUnitsInTargetArea(Owner, Owner, 700, "AffectEnemies AffectHeroes ", 3, true, default, (Unit) => {
            SpellCast(Owner, Unit, default, default, true, 5, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, OwnerPos);
            Count = Math(0 + (Count ?? 0), MO_ADD, -1);
        });
        If(Count, default, CO_EQUAL, default, 1, () => {
            ForNClosestVisibleUnitsInTargetArea(Owner, Owner, 700, "AffectEnemies AffectNeutral AffectMinions ", 1, true, default, (Unit) => {
                SpellCast(Owner, Unit, default, default, true, 5, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, OwnerPos);
            });
        });
        ElseIf(Count, default, CO_EQUAL, default, 2, () => {
            ForNClosestVisibleUnitsInTargetArea(Owner, Owner, 700, "AffectEnemies AffectNeutral AffectMinions ", 2, true, default, (Unit) => {
                SpellCast(Owner, Unit, default, default, true, 5, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, OwnerPos);
            });
        });
        ElseIf(Count, default, CO_EQUAL, default, 3, () => {
            ForNClosestVisibleUnitsInTargetArea(Owner, Owner, 700, "AffectEnemies AffectNeutral AffectMinions ", 3, true, default, (Unit) => {
                SpellCast(Owner, Unit, default, default, true, 5, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, OwnerPos);
            });
        });
        TeamID = GetTeamID(default);
        NextBuffVars.StunDuration = this.StunDuration;
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            SpellEffectCreate(TargetParticle, default, "UnstoppableForce_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, default, default, default, default);
            BreakSpellShields(Unit);
            ApplyDamage(Owner, Unit, 0 + (this.Damage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
            SpellBuffAdd(Owner, Unit, "UnstoppableForceStun", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, default, default);
        });
        Caster = SetBuffCasterUnit();
        If(Caster, default, CO_IS_NOT_DEAD, default, default, () => {
            SpellBuffAdd(Caster, Owner, "IreliaGatotsu", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Caster = SetBuffCasterUnit();
        BreakSpellShields(Caster);
        SpellBuffAdd(Owner, Caster, "IreliaGatotsuDashParticle", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Owner, Caster, 0 + (this.DamageVar ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        this.WillRemove = true;
        If(Caster, default, CO_IS_TYPE_HERO, default, default, () => {
            IssueOrder(Owner, AI_ATTACKTO, default, Caster);
        });
        Caster = SetBuffCasterUnit();
        BreakSpellShields(Caster);
        SpellBuffAdd(Owner, Caster, "MonkeyKingNimbusKickFX", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Owner, Caster, 0 + (this.DamageVar ?? 0), TRUE_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
        Caster = SetBuffCasterUnit();
        BreakSpellShields(Caster);
        SpellBuffAdd(Owner, Caster, "MonkeyKingNimbusKickFX", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Owner, Caster, 0 + (this.DamageVar ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Owner);
        NextBuffVars.AttackSpeedVar = this.AttackSpeedVar;
        SpellBuffAdd(Owner, Owner, "MonkeyKingNimbusAS", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        If(Caster, default, CO_IS_TYPE_HERO, default, default, () => {
            IssueOrder(Owner, AI_ATTACKTO, default, Caster);
        });
        Caster = SetBuffCasterUnit();
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Owner, Caster, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Owner, Unit, 0 + (this.DamageDealt ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Owner);
            SpellBuffAdd(Owner, Unit, "Slow", 100, 1, 1.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        If(Caster, default, CO_IS_TYPE_HERO, default, default, () => {
            IssueOrder(Owner, AI_ATTACKTO, default, Caster);
        });
        If(this.HasCreatedRing, default, CO_EQUAL, default, false, () => {
            CenterPos = GetUnitPosition(Owner);
            teamID = GetTeamID(default);
            SpellEffectCreate(groundhit, default, "JarvanCataclysm_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "weapon_C", default, Target, default, default, false, false, false, false, false, default, default);
            ForEachPointAroundCircle(CenterPos, 350, 12, (Pos) => {
                Other2 = SpawnMinion("JarvanIVWall", "JarvanIVWall", "idle.lua", Pos, teamID ?? TEAM_UNKNOWN, true, true, true, true, true, true, 0, false, false, Owner, default);
                FaceDirection(Other2, CenterPos);
                SpellBuffAdd(Other2, Owner, "JarvanIVCataclysmAttack", 50, 1, 3.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, false, false, false, default);
                ForEachUnitInTargetArea(Owner, Other2, 100, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", default, false, (Unit) => {
                    If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                        PushDistance = 110;
                    });
                    Else(() => {
                        PushDistance = 125;
                    });
                    If(Other2, default, CO_IS_TARGET_IN_FRONT_OF_ME, Unit, default, () => {
                        TargetPos = GetPointByUnitFacingOffset(Other2, 0 + (PushDistance ?? 0), 0);
                    });
                    Else(() => {
                        unitPos = GetUnitPosition(Unit);
                        ownerPos = GetUnitPosition(Other2);
                        distance = DistanceBetweenPoints(unitPos, ownerPos);
                        If(distance, default, CO_LESS_THAN_OR_EQUAL, default, 60, () => {
                            TargetPos = GetPointByUnitFacingOffset(Other2, 0 + (PushDistance ?? 0), 0);
                        });
                        Else(() => {
                            TargetPos = GetPointByUnitFacingOffset(Other2, 0 + (PushDistance ?? 0), 180);
                        });
                    });
                    NextBuffVars.TargetPos = TargetPos;
                    SpellBuffAdd(Other2, Unit, "GlobalWallPush", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    If(Attacker, default, CO_DIFFERENT_TEAM, Unit, default, () => {
                        ApplyDamage(Attacker, Unit, 0, TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 0, 0, 1, false, false, Attacker);
                    });
                });
            });
            ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectEnemies AffectFriends AffectHeroes ", default, true, (Unit) => {
                If(Unit, default, CO_IS_TYPE_HERO, default, default, () => {
                    ForceRefreshPath(Unit);
                });
            });
            this.HasCreatedRing = true;
            SpellBuffClear(Owner, "UnstoppableForceMarker");
        });
        TeamID = GetTeamID(default);
        OwnerSkinID = GetSkinID(Owner);
        If(OwnerSkinID, default, CO_EQUAL, default, 6, () => {
            SpellEffectCreate(asdf, default, "tristana_rocket_rocketJump_land.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(asdf, default, "tristana_rocketJump_land.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        });
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Owner, Unit, 0 + (this.Damage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.8, 1, false, false, Attacker);
            SpellEffectCreate(b, default, "tristana_rocketJump_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            SpellBuffAdd(Owner, Unit, "RocketJumpSlow", 1, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        Caster = SetBuffCasterUnit();
        BreakSpellShields(Caster);
        SpellBuffAdd(Owner, Caster, "AkaliShadowDanceKickParticle", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Owner, Caster, 0 + (this.DamageVar ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 1, false, false, Attacker);
        If(Caster, default, CO_IS_TYPE_HERO, default, default, () => {
            IssueOrder(Owner, AI_ATTACKTO, default, Caster);
        });
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        TeamID = GetTeamID(default);
        FocalPoint = GetPointByUnitFacingOffset(Owner, 100, 0);
        If(this.Count, default, CO_NOT_EQUAL, default, 2, () => {
            Range = 200;
            IfHasBuff(Owner, Owner, "RivenFengShuiEngine", () => {
                Range = Math(1.25, MO_MULTIPLY, 0 + (Range ?? 0));
                If(this.Count, default, CO_EQUAL, default, 1, () => {
                    SpellEffectCreate(Temp, default, "exile_Q_02_detonate_ult.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, FocalPoint, Nothing, default, FocalPoint, true, false, false, false, true, Owner, default);
                });
                Else(() => {
                    SpellEffectCreate(Temp, default, "exile_Q_02_detonate_ult.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, FocalPoint, Nothing, default, FocalPoint, true, false, false, false, true, Owner, default);
                });
            });
            Else(() => {
                If(this.Count, default, CO_EQUAL, default, 1, () => {
                    SpellEffectCreate(Temp, default, "exile_Q_02_detonate.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, FocalPoint, Nothing, default, FocalPoint, true, false, false, false, true, Owner, default);
                });
                Else(() => {
                    SpellEffectCreate(Temp, default, "exile_Q_01_detonate.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, FocalPoint, Nothing, default, FocalPoint, true, false, false, false, true, Owner, default);
                });
            });
            ForEachUnitInTargetArea(Owner, FocalPoint, 0 + (Range ?? 0), "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RivenTriCleaveDamageDebuff", false, (Unit) => {
                SpellBuffAdd(Owner, Unit, "RivenTriCleaveDamageDebuff", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                ApplyDamage(Owner, Unit, 0 + (this.TotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Owner);
            });
        });
        If(this.Count, default, CO_EQUAL, default, 2, () => {
            Range = 265;
            IfHasBuff(Owner, Owner, "RivenFengShuiEngine", () => {
                SpellEffectCreate(Temp, default, "exile_Q_03_detonate_ult.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, FocalPoint, Nothing, default, FocalPoint, true, false, false, false, false, default, default);
                Range = Math(1.25, MO_MULTIPLY, 0 + (Range ?? 0));
            });
            Else(() => {
                SpellEffectCreate(Temp, default, "exile_Q_03_detonate.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, FocalPoint, Nothing, default, FocalPoint, true, false, false, false, false, default, default);
            });
            ForEachUnitInTargetArea(Owner, FocalPoint, 0 + (Range ?? 0), "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RivenTriCleaveDamageDebuff", false, (Unit) => {
                SpellBuffAdd(Owner, Unit, "RivenTriCleaveDamageDebuff2", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                Dist = DistanceBetweenObjects("Unit", "Owner");
                ApplyDamage(Owner, Unit, 0 + (this.TotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Owner);
                BreakSpellShields(Unit);
                If(Unit, default, CO_IS_NOT_DEAD, default, default, () => {
                    SpellBuffAdd(Owner, Unit, "RivenKnockback", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                });
            });
        });
        ForNClosestUnitsInTargetArea(Owner, Owner, 250, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
            IssueOrder(Owner, AI_ATTACKTO, default, Unit);
        });
        CenterPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        SpellEffectCreate(groundhit, default, "shyvana_ult_impact_01.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "weapon_C", default, Target, default, default, true, false, false, false, false, default, default);
        ForNClosestUnitsInTargetArea(Owner, Owner, 125, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
            FaceDirection(Owner, Unit);
        });
        TeamID = GetTeamID(default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SpellEffectCreate(hi, default, "nidalee_cougarPounce_land.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellEffectCreate(bye, default, "nidalee_cougar_pounce_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            ApplyDamage(Attacker, Unit, 0 + (CharVars.PounceDamage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
        });
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            IssueOrder(Owner, AI_ATTACKTO, default, Attacker);
        });
        TeamID = GetTeamID(default);
        DestroyMissileForTarget(Owner);
        SpellEffectCreate(Temp, default, "fizz_playfultrickster_idle_sound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", Owner, Owner, default, default, true, false, false, false, false, default, default);
        IfHasBuff(Owner, Owner, "FizzJumpBuffered", () => {
            UnlockAnimation(Owner, true);
            SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
            StopMove(Owner);
            StopMoveBlock(Owner);
            SpellBuffClear(Owner, "FizzJumpBuffer");
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            TargetPos = CharVars.JumpBuffer;
            SpellBuffAdd(Owner, Owner, "FizzJumpBuffered", 1, 1, 0.01, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 3, ExtraSlots, 0 + (Level ?? 0), false, true, false, false, false, default);
        });
        TeamID = GetTeamID(default);
        IfNotHasBuff(Owner, Owner, "FizzJumpBuffered", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            TeamID = GetTeamID(default);
            SpellEffectCreate(asdf, default, "Fizz_TrickSlamTwo.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
            SetStatus(Owner, default, SetTargetable);
            ForEachUnitInTargetArea(Owner, Owner, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Owner, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Owner);
                SpellEffectCreate(b, default, "Fizz_TrickSlam_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            });
            SpellBuffClear(Owner, "FizzJumpTwo");
        });
        ElseIf(this.FailCount, default, CO_EQUAL, default, 1, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            TeamID = GetTeamID(default);
            SpellEffectCreate(asdf, default, "Fizz_TrickSlamTwo.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
            SetStatus(Owner, default, SetTargetable);
            ForEachUnitInTargetArea(Owner, Owner, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Owner, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Owner);
                SpellEffectCreate(b, default, "Fizz_TrickSlam_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            });
            SpellBuffClear(Owner, "FizzJumpTwo");
        });
        Else(() => {
            this.FailCount = 1;
        });
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            If(Attacker, default, CO_DIFFERENT_TEAM, Owner, default, () => {
                IssueOrder(Owner, AI_ATTACKTO, default, Attacker);
            });
        });
        Caster = SetBuffCasterUnit();
        TargetPos = GetPointByUnitFacingOffset(Owner, 275, 0);
        SpellBuffClear(Owner, "FizzPiercingStrike");
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        If(this.HitTarget, default, CO_EQUAL, default, false, () => {
            BreakSpellShields(Caster);
            ApplyDamage(Owner, Caster, 0 + (this.DamageDealt ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 1, false, false, Owner);
            TotalAD = GetTotalAttackDamage(Owner);
            SetDodgePiercing(Owner, true);
            ApplyDamage(Owner, Caster, 0 + (TotalAD ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Owner);
            TeamID = GetTeamID(default);
            SpellEffectCreate(this.targetParticle, default, "Fizz_PiercingStrike_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, true, false, false, false, false, default, default);
            SetDodgePiercing(Owner, false);
        });
        CancelAutoAttack(Owner, false);
        UnlockAnimation(Owner, false);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        Attacker = SetBuffCasterUnit();
        ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "AlistarHeadbuttMarker", true, (Unit) => {
            IfHasBuff(Unit, Owner, "AlistarHeadbuttMarker", () => {
                BreakSpellShields(Unit);
                ApplyDamage(Owner, Unit, 0 + (this.Damage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.7, 1, false, false, Owner);
                ApplyAssistMarker(Owner, Unit, 10);
                SpellBuffAdd(Attacker, Unit, "HeadbuttTarget", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                SpellBuffRemove(Owner, "Headbutt", Attacker, 0);
            });
        });
        If(Attacker, default, CO_IS_TYPE_HERO, default, default, () => {
            IssueOrder(Owner, AI_ATTACKTO, default, Attacker);
        });
        Caster = SetBuffCasterUnit();
        TeamID = GetTeamID(default);
        DistanceVar = DistanceBetweenObjectAndPoint(Owner, this.NewTargetPos);
        If(DistanceVar, default, CO_GREATER_THAN_OR_EQUAL, default, 75, () => {
            IfNotHasBuff(Owner, Owner, "PoppyHeroicChargePart2Check", () => {
                If(Owner, default, CO_NOT_EQUAL, Caster, default, () => {
                    BreakSpellShields(Owner);
                    SpellEffectCreate(TargetParticle, default, "HeroicCharge_tar2.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
                    ApplyDamage(Caster, Owner, 0 + (this.DamageTwo ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.4, 1, false, false, Attacker);
                    ApplyStun(Caster, Owner, 1.5);
                    If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                        IssueOrder(Caster, AI_ATTACKTO, default, Owner);
                    });
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "PoppyHeroicChargePart2Check", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
            });
        });
        TeamID = GetTeamID(default);
        Caster = SetBuffCasterUnit();
        IfHasBuff(Caster, Caster, "PoppyHeroicChargePoppyFix", () => {
            this.DamageTwo = Math(0 + (this.DamageTwo ?? 0), MO_ADD, 0 + (this.Damage ?? 0));
            BreakSpellShields(Caster);
            ApplyDamage(Owner, Caster, 0 + (this.DamageTwo ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.8, 1, false, false, Attacker);
            ApplyStun(Owner, Caster, 1.5);
            SpellBuffRemoveCurrent(Owner);
        });
        Else(() => {
            SpellEffectCreate(TargetParticle, default, "HeroicCharge_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
            BreakSpellShields(Caster);
            ApplyDamage(Owner, Caster, 0 + (this.Damage ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.4, 1, false, false, Owner);
            NewTargetPos = GetPointByUnitFacingOffset(Owner, 400, 0);
            NextBuffVars.SlashSpeed = this.SlashSpeed;
            NextBuffVars.NewTargetPos = NewTargetPos;
            NextBuffVars.DamageTwo = this.DamageTwo;
            SpellBuffAdd(Owner, Caster, "PoppyHeroicChargePart2", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, true, default);
            UnlockAnimation(Owner, false);
            IssueOrder(Owner, AI_ATTACKTO, default, Caster);
            IfHasBuff(Caster, Nothing, "PoppyHeroicChargePart2", () => {
                SpellBuffAdd(Owner, Owner, "PoppyHeroicChargePart2", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
            SpellBuffRemoveCurrent(Owner);
        });
    }
    public void BuffOnLevelUpSpell()
    {
        #region VarDecl
        Object? Level = null;
        long? baseHealth = null;
        float? healthByLevel = null;
        float? totalHealth = null;
        Object? slotLevel = null;
        long? baseCooldown = null;
        float? CooldownMod = null;
        float? newCooldown = null;
        Object? SpittleAttackSpeed = null;
        float? costInc = null;
        int? Count = null;
        Object? HealthPerStack = null;
        float? BonusHealth = null;
        #endregion
        If(Slot, default, CO_EQUAL, default, 0, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.BonusAP = this.BonusAP;
            CharVars.MaxBonus = this.VALUE_BY_LEVEL;
            NextBuffVars.MaxBonus = CharVars.MaxBonus;
        });
        If(Slot, default, CO_EQUAL, default, 2, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            this.MoveSpeedBuff = this.VALUE_BY_LEVEL;
        });
        If(Slot, default, CO_EQUAL, default, 1, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.BonusArmor = this.BonusArmor;
            NextBuffVars.BonusMR = this.BonusMR;
            CharVars.MaxBonus = this.VALUE_BY_LEVEL;
            NextBuffVars.MaxBonus = CharVars.MaxBonus;
            SpellBuffAdd(Owner, Owner, "GarenCommandKill", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Slot, default, CO_EQUAL, default, 3, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            this.CooldownBonus = this.VALUE_BY_LEVEL;
        });
        If(Slot, default, CO_EQUAL, default, 0, () => {
            Level = GetLevel(Owner);
            baseHealth = 260;
            healthByLevel = Math(15, MO_MULTIPLY, 0 + (Level ?? 0));
            totalHealth = Math(0 + (baseHealth ?? 0), MO_ADD, 0 + (healthByLevel ?? 0));
            slotLevel = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(slotLevel, default, CO_GREATER_THAN_OR_EQUAL, default, 4, () => {
                totalHealth = Math(125, MO_ADD, 0 + (totalHealth ?? 0));
            });
            SetSpellToolTipVar(0 + (totalHealth ?? 0), 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            If(slotLevel, default, CO_EQUAL, default, 1, () => {
                baseCooldown = 25;
                CooldownMod = GetStat(GetPercentCooldownMod, Owner);
                CooldownMod = Math(1, MO_ADD, 0 + (CooldownMod ?? 0));
                newCooldown = Math(0 + (baseCooldown ?? 0), MO_MULTIPLY, 0 + (CooldownMod ?? 0));
                SpellBuffAdd(Owner, Owner, "HeimerdingerTurretCounter", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SpellBuffAdd(Owner, Owner, "HeimerdingerTurretReady", 2, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, false, default);
            });
        });
        If(Slot, default, CO_EQUAL, default, 3, () => {
            SpellBuffAdd(Owner, Owner, "UPGRADE!!!", 1, 1, 20000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(Slot, default, CO_EQUAL, default, 2, () => {
            IncPermanentStat(IncPermanentFlatPhysicalDamageMod, Owner, 0 + (this.BonusDamageIncrement ?? 0));
            this.BonusDamage = Math(0 + (this.BonusDamage ?? 0), MO_ADD, 0 + (this.BonusDamageIncrement ?? 0));
        });
        If(Slot, default, CO_EQUAL, default, 2, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            this.ManaRegenBonus = this.VALUE_BY_LEVEL;
        });
        If(Slot, default, CO_EQUAL, default, 0, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            this.passiveAttackSpeed = this.VALUE_BY_LEVEL;
        });
        If(Slot, default, CO_EQUAL, default, 3, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            this.armorMod = this.VALUE_BY_LEVEL;
        });
        If(Slot, default, CO_EQUAL, default, 3, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            this.armorMod = this.VALUE_BY_LEVEL;
        });
        If(Slot, default, CO_EQUAL, default, 0, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SpittleAttackSpeed = this.VALUE_BY_LEVEL;
            SetBuffToolTipVar(1, 0 + (SpittleAttackSpeed ?? 0));
        });
        If(Slot, default, CO_EQUAL, default, 0, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            this.cost0 = this.VALUE_BY_LEVEL;
            costInc = Math(0 + (this.cost0 ?? 0), MO_MULTIPLY, -1);
            SetPARCostInc(Owner, 0, SpellSlots, 0 + (costInc ?? 0), PAR_MANA);
        });
        ElseIf(Slot, default, CO_EQUAL, default, 2, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            this.cost2 = this.VALUE_BY_LEVEL;
            costInc = Math(0 + (this.cost2 ?? 0), MO_MULTIPLY, -1);
            SetPARCostInc(Owner, 2, SpellSlots, 0 + (costInc ?? 0), PAR_MANA);
        });
        ElseIf(Slot, default, CO_EQUAL, default, 3, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            this.cost3 = this.VALUE_BY_LEVEL;
            costInc = Math(0 + (this.cost3 ?? 0), MO_MULTIPLY, -1);
            SetPARCostInc(Owner, 3, SpellSlots, 0 + (costInc ?? 0), PAR_MANA);
        });
        Count = GetBuffCountFromCaster(Owner, Owner, "Feast");
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        HealthPerStack = this.VALUE_BY_LEVEL;
        BonusHealth = Math(0 + (HealthPerStack ?? 0), MO_MULTIPLY, 0 + (Count ?? 0));
        SetBuffToolTipVar(1, 0 + (BonusHealth ?? 0));
    }
    public void CharOnLevelUp()
    {
        #region VarDecl
        float? Level = null;
        #endregion
        Level = GetLevel(Owner);
        CharVars.IlluminateDamage = this.VALUE_BY_LEVEL;
        IncPermanentFlatPARPoolMod(Owner, 30);
        IncPAR(Owner, -30);
        Level = GetLevel(Owner);
        CharVars.AutoattackRage = this.VALUE_BY_LEVEL;
        Level = GetLevel(Owner);
        CharVars.RegenValue = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Owner, Owner, "TrundleDiseaseOverseer", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
    }
    public void ChannelingStop()
    {
        SpellBuffRemove(Owner, "Pantheon_HeartseekerChannel", Owner, 0);
    }
    public void BuffOnLevelUp()
    {
        #region VarDecl
        float? Level = null;
        long? baseHealth = null;
        float? healthByLevel = null;
        float? totalHealth = null;
        Object? slotLevel = null;
        float? OwnerLevel = null;
        Object? HealthPerc = null;
        Object? DamageAmp = null;
        Object? RebirthArmorMod = null;
        Object? newVampPercent = null;
        float? TooltipAmount = null;
        #endregion
        Level = GetLevel(Owner);
        this.damageThreshold = this.VALUE_BY_LEVEL;
        Level = GetLevel(Owner);
        If(Level, default, CO_EQUAL, default, 6, () => {
            NextBuffVars.healthRegen = this.VALUE_BY_LEVEL;
            SetBuffToolTipVar(1, 15);
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions AffectHeroes AffectTurrets AlwaysSelf ", default, true, (Unit) => {
                SpellBuffAdd(Owner, Unit, "TechmaturgicalRepairBots", 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        If(Level, default, CO_EQUAL, default, 11, () => {
            NextBuffVars.healthRegen = this.VALUE_BY_LEVEL;
            SetBuffToolTipVar(1, 20);
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions AffectHeroes AffectTurrets AlwaysSelf ", default, true, (Unit) => {
                SpellBuffAdd(Owner, Unit, "TechmaturgicalRepairBots", 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        If(Level, default, CO_EQUAL, default, 15, () => {
            NextBuffVars.healthRegen = this.VALUE_BY_LEVEL;
            SetBuffToolTipVar(1, 25);
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions AffectHeroes AffectTurrets AlwaysSelf ", default, true, (Unit) => {
                SpellBuffAdd(Owner, Unit, "TechmaturgicalRepairBots", 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        baseHealth = 260;
        healthByLevel = Math(15, MO_MULTIPLY, 0 + (Level ?? 0));
        totalHealth = Math(0 + (baseHealth ?? 0), MO_ADD, 0 + (healthByLevel ?? 0));
        slotLevel = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        If(slotLevel, default, CO_GREATER_THAN_OR_EQUAL, default, 4, () => {
            totalHealth = Math(125, MO_ADD, 0 + (totalHealth ?? 0));
        });
        SetSpellToolTipVar(0 + (totalHealth ?? 0), 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        OwnerLevel = GetLevel(Owner);
        CharVars.BonusForItem = Math(0 + (OwnerLevel ?? 0), MO_MULTIPLY, 3);
        Level = GetLevel(Owner);
        HealthPerc = this.VALUE_BY_LEVEL;
        SetBuffToolTipVar(1, 0 + (HealthPerc ?? 0));
        Level = GetLevel(Owner);
        this.manaRegen = this.VALUE_BY_LEVEL;
        SetBuffToolTipVar(1, 0 + (this.manaRegen ?? 0));
        Level = GetLevel(Owner);
        DamageAmp = this.VALUE_BY_LEVEL;
        SetBuffToolTipVar(1, 0 + (DamageAmp ?? 0));
        Level = GetLevel(Owner);
        RebirthArmorMod = this.VALUE_BY_LEVEL;
        SetBuffToolTipVar(1, 0 + (RebirthArmorMod ?? 0));
        Level = GetLevel(Owner);
        RebirthArmorMod = this.VALUE_BY_LEVEL;
        SetBuffToolTipVar(1, 0 + (RebirthArmorMod ?? 0));
        Level = GetLevel(Owner);
        newVampPercent = this.VALUE_BY_LEVEL;
        If(newVampPercent, default, CO_NOT_EQUAL, this.VampPercent, default, () => {
            this.VampPercent = newVampPercent;
            TooltipAmount = Math(100, MO_MULTIPLY, 0 + (this.VampPercent ?? 0));
            SetBuffToolTipVar(1, 0 + (TooltipAmount ?? 0));
        });
        Level = GetLevel(Owner);
        this.Defense = this.VALUE_BY_LEVEL;
        SetBuffToolTipVar(1, 0 + (this.Defense ?? 0));
        Level = GetLevel(Owner);
        If(Level, default, CO_EQUAL, default, 3, () => {
            SetBuffToolTipVar(1, 50);
        });
        ElseIf(Level, default, CO_EQUAL, default, 6, () => {
            SetBuffToolTipVar(1, 70);
        });
        ElseIf(Level, default, CO_EQUAL, default, 9, () => {
            SetBuffToolTipVar(1, 90);
        });
        ElseIf(Level, default, CO_EQUAL, default, 12, () => {
            SetBuffToolTipVar(1, 110);
        });
        ElseIf(Level, default, CO_EQUAL, default, 15, () => {
            SetBuffToolTipVar(1, 130);
        });
    }
    public void SpellOnMissileEnd()
    {
        #region VarDecl
        Object? Level = null;
        Object? baseDamageBlock = null;
        float? AbilityPower = null;
        float? BonusHealth = null;
        float? DamageBlock = null;
        Vector3? MissileEndPosition = null;
        TeamId? TeamID = null;
        bool? CorrectSpell = null;
        float? Duration = null;
        Vector3? TargetPos = null;
        Minion? Other3 = null;
        Object? BaseDamage = null;
        float? AP = null;
        float? BonusDamage = null;
        float? TotalDamage = null;
        bool? Found = null;
        Vector3? OwnerPos = null;
        float? Distance = null;
        float? finalDistance = null;
        TeamId? TeamIDAttacker = null;
        TeamId? TeamIDTarget = null;
        Minion? Other1 = null;
        Vector3? SpawnPos = null;
        Vector3? Point1 = null;
        Vector3? Point2 = null;
        Vector3? Point3 = null;
        Minion? Other2 = null;
        Vector3? ShockwaveTarget = null;
        #endregion
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.LSCooldown = this.VALUE_BY_LEVEL;
        NextBuffVars.Position = MissileEndPosition;
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        Level = GetCastInfo(GetCastSpellLevelPlusOne);
        baseDamageBlock = this.VALUE_BY_LEVEL;
        AbilityPower = GetStat(GetFlatMagicDamageMod, Attacker);
        BonusHealth = Math(0 + (AbilityPower ?? 0), MO_MULTIPLY, 0.35);
        DamageBlock = Math(0 + (baseDamageBlock ?? 0), MO_ADD, 0 + (BonusHealth ?? 0));
        NextBuffVars.DamageBlock = DamageBlock;
        SpellBuffAdd(Attacker, Attacker, "LuxPrismaticWaveShieldSelf", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        MissileEndPosition = ModifyPosition(default, default, default);
        ForEachUnitInTargetArea(Attacker, MissileEndPosition, 100, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            NextBuffVars.OrbofDeceptionIsActive = CharVars.OrbofDeceptionIsActive;
            SpellBuffAdd(Attacker, Unit, "AhriOrbDamage", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        ForEachUnitInTargetArea(Owner, MissileEndPosition, 100, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            NextBuffVars.OrbofDeceptionIsActive = CharVars.OrbofDeceptionIsActive;
            SpellBuffAdd(Attacker, Unit, "AhriOrbDamageSilence", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SpellCast(Owner, Owner, default, default, true, 1, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, MissileEndPosition);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            SpellEffectCreate(ImpactVFX, default, "galio_concussiveBlast_mis_tar.troy", default, TEAM_ORDER, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, MissileEndPosition, Target, default, default, true, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(ImpactVFX, default, "galio_concussiveBlast_mis_tar.troy", default, TEAM_CHAOS, 250, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, MissileEndPosition, Target, default, default, true, default, default, false, false, default, default);
        });
        ForEachUnitInTargetArea(Owner, MissileEndPosition, 230, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Unit) => {
            BreakSpellShields(Unit);
            ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
            SpellEffectCreate(TargetVFX1, default, "galio_concussiveBlast_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "head", Unit, Unit, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(TargetVFX2, default, "galio_concussiveBlast_unit_tar_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, Unit, Unit, default, default, false, default, default, false, false, default, default);
            SpellBuffAdd(Attacker, Unit, default, 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, true, false, default);
        });
        NextBuffVars.TargetPos = MissileEndPosition;
        SpellBuffAdd(Owner, Owner, "AsheSpiritOfTheHawkBubble", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        CorrectSpell = false;
        Duration = GetBuffRemainingDuration(Owner, "OrianaIzuna");
        If(SpellName, default, CO_EQUAL, default, "yomuizuna", () => {
            CorrectSpell = true;
        });
        ElseIf(SpellName, default, CO_EQUAL, default, "OrianaIzuna", () => {
            CorrectSpell = true;
        });
        ElseIf(SpellName, default, CO_EQUAL, default, "OrianaFastIzuna", () => {
            CorrectSpell = true;
        });
        ElseIf(SpellName, default, CO_EQUAL, default, "yomufastizuna", () => {
            CorrectSpell = true;
        });
        If(Duration, default, CO_GREATER_THAN_OR_EQUAL, default, 0.001, () => {
            If(CorrectSpell, default, CO_EQUAL, default, true, () => {
                TeamID = GetTeamID(default);
                TargetPos = this.TargetPos;
                Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", MissileEndPosition, TeamID ?? TEAM_ORDER, false, true, false, true, true, true, 0, default, true, Owner, default);
                SpellBuffAdd(Owner, Other3, "OrianaGhost", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                SpellBuffAdd(Owner, Other3, "OrianaGhostMinion", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
                NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
                ForEachUnitInTargetArea(Attacker, Other3, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "OrianaIzunaDamage", false, (Unit) => {
                    BreakSpellShields(Unit);
                    BaseDamage = this.VALUE_BY_LEVEL;
                    AP = GetStat(GetFlatMagicDamageMod, Owner);
                    BonusDamage = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.5);
                    TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
                    NextBuffVars.TotalDamage = TotalDamage;
                    SpellBuffAdd(Attacker, Unit, "OrianaIzunaDamage", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                });
                CharVars.GhostAlive = false;
                DestroyMissile(CharVars.MissileID);
                SpellBuffClear(Owner, "OrianaIzuna");
                this.Landed = true;
            });
            Else(() => {
                Say(Owner, "SpellName: ", CorrectSpell);
            });
        });
        CorrectSpell = false;
        Duration = GetBuffRemainingDuration(Owner, "OrianaIzuna");
        If(SpellName, default, CO_EQUAL, default, "orianaizuna", () => {
            CorrectSpell = true;
        });
        ElseIf(SpellName, default, CO_EQUAL, default, "OrianaIzuna", () => {
            CorrectSpell = true;
        });
        If(default, default, CO_EQUAL, default, default, () => {
            CharVars.GhostAlive = false;
            SpellBuffClear(Owner, "OrianaIzuna");
            this.Landed = true;
        });
        If(Duration, default, CO_GREATER_THAN_OR_EQUAL, default, 0.001, () => {
            If(CorrectSpell, default, CO_EQUAL, default, true, () => {
                TeamID = GetTeamID(default);
                TargetPos = this.TargetPos;
                Other3 = SpawnMinion("TheDoomBall", "OriannaBall", "idle.lua", MissileEndPosition, TeamID ?? TEAM_ORDER, false, true, false, true, true, true, 0, false, true, Owner, default);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                SpellEffectCreate(Temp, default, "Oriana_Izuna_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, MissileEndPosition, Nothing, default, MissileEndPosition, true, default, default, false, false, default, default);
                ForEachUnitInTargetArea(Attacker, Other3, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Unit) => {
                    BaseDamage = this.VALUE_BY_LEVEL;
                    AP = GetStat(GetFlatMagicDamageMod, Owner);
                    BonusDamage = Math(0 + (AP ?? 0), MO_MULTIPLY, 0.6);
                    TotalDamage = Math(0 + (BonusDamage ?? 0), MO_ADD, 0 + (BaseDamage ?? 0));
                    TotalDamage = Math(0 + (TotalDamage ?? 0), MO_MULTIPLY, 0 + (CharVars.IzunaPercent ?? 0));
                    CharVars.IzunaPercent = Math(0.9, MO_MULTIPLY, 0 + (CharVars.IzunaPercent ?? 0));
                    CharVars.IzunaPercent = Math(0.4, MO_MAX, 0 + (CharVars.IzunaPercent ?? 0));
                    NextBuffVars.TotalDamage = TotalDamage;
                    IfNotHasBuff(Unit, Nothing, "OrianaIzunaDamage", () => {
                        BreakSpellShields(Unit);
                        SpellBuffAdd(Attacker, Unit, "OrianaIzunaDamage", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
        });
        DestroyMissile(CharVars.MissileID);
        CorrectSpell = false;
        Duration = GetBuffRemainingDuration(Owner, "OrianaRedact");
        If(SpellName, default, CO_EQUAL, default, "orianaredact", () => {
            CorrectSpell = true;
        });
        ElseIf(SpellName, default, CO_EQUAL, default, "OrianaRedact", () => {
            CorrectSpell = true;
        });
        If(CorrectSpell, default, CO_EQUAL, default, true, () => {
            this.Hit = true;
            CharVars.GhostAlive = false;
            SpellBuffClear(Owner, "OrianaRedact");
        });
        If(Duration, default, CO_GREATER_THAN_OR_EQUAL, default, 0.01, () => {
            Found = false;
            ForNClosestUnitsInTargetArea(Owner, MissileEndPosition, 25000, "AffectFriends AffectMinions AffectHeroes AffectUntargetable ", 1, true, "OrianaGhost", (Unit) => {
                Found = true;
            });
            ForNClosestUnitsInTargetArea(Owner, MissileEndPosition, 25000, "AffectFriends AffectMinions AffectHeroes AffectUntargetable ", 1, true, "OrianaGhostSelf", (Unit) => {
                Found = true;
            });
            If(Found, default, CO_EQUAL, default, false, () => {
                TeamID = GetTeamID(default);
                SpellEffectCreate(Temp, default, "Orianna_Ball_Flash.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, "root", MissileEndPosition, Owner, default, default, false, false, false, false, false, default, default);
                SpellBuffAdd(Owner, Owner, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                SpellEffectCreate(Temp, default, "Orianna_Ball_Flash_Reverse.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Caster, false, Owner, "SpinnigBottomRidge", default, Owner, default, default, false, false, false, false, false, default, default);
            });
        });
        DestroyMissile(CharVars.MissileID);
        CorrectSpell = false;
        Duration = GetBuffRemainingDuration(Owner, "OrianaReturn");
        If(SpellName, default, CO_EQUAL, default, "yomureturn", () => {
            CorrectSpell = true;
        });
        ElseIf(SpellName, default, CO_EQUAL, default, "OrianaReturn", () => {
            CorrectSpell = true;
        });
        If(Duration, default, CO_GREATER_THAN_OR_EQUAL, default, 0.01, () => {
            If(CorrectSpell, default, CO_EQUAL, default, true, () => {
                this.Hit = true;
                CharVars.GhostAlive = false;
                DestroyMissile(CharVars.MissileID);
                SpellBuffClear(Owner, "OrianaReturn");
            });
        });
        CorrectSpell = false;
        Duration = GetBuffRemainingDuration(Owner, "OrianaDissonance");
        If(SpellName, default, CO_EQUAL, default, "yomudissonance", () => {
            CorrectSpell = true;
        });
        ElseIf(SpellName, default, CO_EQUAL, default, "OrianaDissonance", () => {
            CorrectSpell = true;
        });
        If(Duration, default, CO_GREATER_THAN_OR_EQUAL, default, 0.01, () => {
            If(CorrectSpell, default, CO_EQUAL, default, true, () => {
                this.Hit = true;
                CharVars.GhostAlive = false;
                DestroyMissile(CharVars.MissileID);
                SpellBuffClear(Owner, "OrianaDissonance");
            });
        });
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        TeamID = GetTeamID(default);
        OwnerPos = GetUnitPosition(Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        ForNClosestUnitsInTargetArea(Owner, Owner, 3000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectDead ", 1, true, "LeonaZenithBladeBuffOrder", (Unit) => {
            FaceDirection(Owner, Unit);
            Distance = DistanceBetweenObjects("Owner", "Unit");
            finalDistance = Math(0 + (Distance ?? 0), MO_ADD, 225);
            TargetPos = GetPointByUnitFacingOffset(Owner, 0 + (finalDistance ?? 0), 0);
            SpellBuffAdd(Owner, Unit, "LeonaZenithBladeRoot", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, false, default);
            NextBuffVars.Destination = TargetPos;
            NextBuffVars.Distance = Distance;
            SpellBuffAdd(Unit, Owner, default, 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellEffectCreate(ar1, default, "Leona_ZenithBlade_trail.troy", default, TeamID ?? TEAM_UNKNOWN, 225, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        If(this.UltFired, default, CO_EQUAL, default, true, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            NextBuffVars.MissilePosition = MissileEndPosition;
            SpellBuffAdd(Owner, Owner, "FizzMarinerDoomMissile", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            CharVars.UltFired = false;
            this.UltFired = false;
        });
        TeamIDAttacker = GetTeamID(default);
        TeamIDTarget = GetTeamID(default);
        Other1 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", CharVars.BriggsCastPos, TeamIDAttacker ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Owner, default);
        FaceDirection(Other1, MissileEndPosition);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Distance = DistanceBetweenObjectAndPoint(Other1, MissileEndPosition);
        Distance = Math(0 + (Distance ?? 0), MO_SUBTRACT, 150);
        SpawnPos = GetPointByUnitFacingOffset(Other1, 0 + (Distance ?? 0), 0);
        Other3 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", SpawnPos, TeamIDAttacker ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Owner, default);
        FaceDirection(Other3, MissileEndPosition);
        Point1 = GetPointByUnitFacingOffset(Other3, 400, 30);
        Point2 = GetPointByUnitFacingOffset(Other3, 400, -30);
        Point3 = GetPointByUnitFacingOffset(Other3, 400, 0);
        Other2 = SpawnMinion("ParticleTarget", "SpellBook1", "idle.lua", Point3, TeamIDAttacker ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Owner, default);
        FaceDirection(Other2, Other1);
        ShockwaveTarget = GetPointByUnitFacingOffset(Other3, 700, 0);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Attacker, Nothing, Point1, Point1, true, 5, ExtraSlots, 1, true, true, false, false, false, SpawnPos);
        SpellCast(Attacker, Nothing, Point2, Point2, true, 5, ExtraSlots, 1, true, true, false, false, false, SpawnPos);
        SpellCast(Attacker, Nothing, Point3, Point3, true, 6, ExtraSlots, 1, true, true, false, false, false, SpawnPos);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Attacker, Target, MissileEndPosition, MissileEndPosition, true, 2, ExtraSlots, 0 + (_1 ?? 0), false, true, false, true, false, Other3);
        TeamID = GetTeamID(default);
        Other3 = SpawnMinion("Test", "TestCubeRender", "idle.lua", MissileEndPosition, TeamID ?? TEAM_UNKNOWN, false, true, false, true, true, true, 0, false, true, Nothing, default);
        SetStatus(Other3, default, SetGhosted);
        Level = GetCastInfo(GetCastSpellLevelPlusOne);
        NextBuffVars.DamagePerTick = this.VALUE_BY_LEVEL;
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 9, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
    }
    public void BuffOnPreAttack()
    {
        #region VarDecl
        Object? Level = null;
        float? RagePercent = null;
        Vector3? TargetPos = null;
        float? Offset = null;
        #endregion
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SkipNextAutoAttack(Owner);
        SpellCast(Owner, Target, default, default, false, 0, ExtraSlots, 0 + (Level ?? 0), false, false, false, false, false, default);
        SpellBuffRemove(Owner, "GarenSlash3", Owner, 0);
        If(Target, default, CO_IS_NOT_AI, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        this.lastAttackTime = GetGameTime();
        this.lastAttackTime = GetGameTime();
        this.lastAttackTime = GetGameTime();
        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                SkipNextAutoAttack(Owner);
                SpellCast(Owner, Target, Target, Target, false, 0, ExtraSlots, 0 + (Level ?? 0), false, false, false, false, true, default);
            });
        });
        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                SkipNextAutoAttack(Owner);
                SpellCast(Owner, Target, Target, Target, false, 2, ExtraSlots, 0 + (Level ?? 0), false, false, false, false, true, default);
            });
        });
        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                SkipNextAutoAttack(Owner);
                SpellCast(Owner, Target, Target, Target, false, 1, ExtraSlots, 0 + (Level ?? 0), false, false, false, false, true, default);
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(this.Frozen, default, CO_EQUAL, default, 1, () => {
                SkipNextAutoAttack(Owner);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                If(this.Counter, default, CO_LESS_THAN_OR_EQUAL, default, 1, () => {
                    SpellCast(Owner, Target, Target, Target, false, 5, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, true, default);
                });
                ElseIf(this.Counter, default, CO_LESS_THAN_OR_EQUAL, default, 3, () => {
                    SpellCast(Owner, Target, Target, Target, false, 6, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, true, default);
                });
                Else(() => {
                    SpellCast(Owner, Target, Target, Target, false, 1, ExtraSlots, 0 + (Level ?? 0), true, false, false, true, true, default);
                });
            });
        });
        RemoveOverrideAutoAttack(Owner, false);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                OverrideAutoAttack(3, ExtraSlots, Owner, 1, true);
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                SetDodgePiercing(Owner, true);
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                SkipNextAutoAttack(Owner);
                RagePercent = GetPAROrHealth(Owner, GetPARPercent, PAR_OTHER);
                If(RagePercent, default, CO_GREATER_THAN_OR_EQUAL, default, 0.5, () => {
                    SpellCast(Owner, Target, default, default, false, 1, ExtraSlots, 0 + (Level ?? 0), false, false, false, false, true, default);
                    SpellBuffAdd(Owner, Owner, "RenektonUnlockAnimation", 1, 1, 0.76, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    this.Swung = true;
                });
                Else(() => {
                    SpellCast(Owner, Target, default, default, false, 0, ExtraSlots, 0 + (Level ?? 0), false, false, false, false, true, default);
                    SpellBuffAdd(Owner, Owner, "RenektonUnlockAnimation", 1, 1, 0.51, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    this.Swung = true;
                });
                SpellBuffRemove(Owner, default, Owner, 0);
            });
        });
        NextBuffVars.MoveSpeedMod = this.MoveSpeedMod;
        NextBuffVars.TeamID = this.TeamID;
        NextBuffVars.BreakDamage = 0;
        SpellBuffAdd(Attacker, Owner, "WasStealthed", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                TargetPos = GetUnitPosition(Target);
                FaceDirection(Owner, TargetPos);
                SkipNextAutoAttack(Owner);
                SpellCast(Owner, Target, default, default, false, 0, ExtraSlots, 0 + (Level ?? 0), false, false, false, false, false, default);
                SpellBuffRemove(Owner, "TrundleTrollSmash", Owner, default);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        SkipNextAutoAttack(Owner);
        SpellCast(Owner, Target, default, default, false, 0, ExtraSlots, 0 + (Level ?? 0), false, false, false, false, false, default);
        SpellBuffRemove(Owner, "LeonaShieldOfDaybreak", Owner, 0);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                RemoveOverrideAutoAttack(Owner, true);
            });
            Else(() => {
                OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
            });
        });
        Else(() => {
            RemoveOverrideAutoAttack(Owner, true);
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                Offset = GetOffsetAngle(Target, Attacker);
                CharVars.BouncePos = GetPointByUnitFacingOffset(Target, 400, 0 + (Offset ?? 0));
            });
        });
        RemoveOverrideAutoAttack(Owner, false);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                OverrideAutoAttack(2, ExtraSlots, Owner, 1, true);
            });
        });
        this.TimeLastHit = GetTime();
        this.ID = PushCharacterFade(Owner, 1, default, this.ID);
        this.WillFade = true;
        this.BuffAdded = false;
        SpellBuffRemoveCurrent(Owner);
        NextBuffVars.CritDmgBonus = this.CritDmgBonus;
        SpellBuffAdd(Owner, Owner, "DeceiveCritBonus", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                If(Owner, default, CO_IS_TARGET_IN_FRONT_OF_ME, Target, default, () => {
                    If(Target, default, CO_IS_TARGET_BEHIND_ME, Owner, default, () => {
                        SpellBuffAdd(Owner, Owner, "FromBehind", 1, 1, 0.75, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
        });
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(default, 0.15, CO_RANDOM_CHANCE_LESS_THAN, default, default, () => {
                If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                    
                });
                Else(() => {
                    If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                        
                    });
                    Else(() => {
                        SpellBuffAdd(Attacker, Target, "MadredsRazors", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, default, default, default, default);
                    });
                });
            });
        });
    }
    public void BuffOnLaunchAttack()
    {
        SpellBuffRemoveCurrent(Owner);
        SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemove(Owner, "Ricochet", Owner, 0);
        SpellBuffRemoveCurrent(Owner);
    }
    public void BuffOnMoveFailure()
    {
        #region VarDecl
        float? Count = null;
        Vector3? OwnerPos = null;
        Object? Level = null;
        Vector3? FocalPoint = null;
        TeamId? TeamID = null;
        float? Range = null;
        float? CDReduction = null;
        Object? BaseCD = null;
        float? LowerCD = null;
        float? NewCD = null;
        #endregion
        Count = 3;
        OwnerPos = GetUnitPosition(Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        ForNClosestVisibleUnitsInTargetArea(Owner, Owner, 700, "AffectEnemies AffectHeroes ", 3, true, default, (Unit) => {
            SpellCast(Owner, Unit, default, default, true, 5, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, OwnerPos);
            Count = Math(0 + (Count ?? 0), MO_ADD, -1);
        });
        If(Count, default, CO_EQUAL, default, 1, () => {
            ForNClosestVisibleUnitsInTargetArea(Owner, Owner, 700, "AffectEnemies AffectNeutral AffectMinions ", 1, true, default, (Unit) => {
                SpellCast(Owner, Unit, default, default, true, 5, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, OwnerPos);
            });
        });
        ElseIf(Count, default, CO_EQUAL, default, 2, () => {
            ForNClosestVisibleUnitsInTargetArea(Owner, Owner, 700, "AffectEnemies AffectNeutral AffectMinions ", 2, true, default, (Unit) => {
                SpellCast(Owner, Unit, default, default, true, 5, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, OwnerPos);
            });
        });
        ElseIf(Count, default, CO_EQUAL, default, 3, () => {
            ForNClosestVisibleUnitsInTargetArea(Owner, Owner, 700, "AffectEnemies AffectNeutral AffectMinions ", 3, true, default, (Unit) => {
                SpellCast(Owner, Unit, default, default, true, 5, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, OwnerPos);
            });
        });
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        FocalPoint = GetPointByUnitFacingOffset(Owner, 100, 0);
        TeamID = GetTeamID(default);
        If(this.Count, default, CO_EQUAL, default, 2, () => {
            Range = 265;
            IfHasBuff(Owner, Owner, "RivenFengShuiEngine", () => {
                SpellEffectCreate(Temp, default, "exile_Q_03_detonate_ult.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, FocalPoint, Nothing, default, FocalPoint, true, false, false, false, false, default, default);
                Range = Math(1.25, MO_MULTIPLY, 0 + (Range ?? 0));
            });
            Else(() => {
                SpellEffectCreate(Temp, default, "exile_Q_03_detonate.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, FocalPoint, Nothing, default, FocalPoint, true, false, false, false, false, default, default);
            });
            ForEachUnitInTargetArea(Owner, FocalPoint, 0 + (Range ?? 0), "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RivenTriCleaveDamageDebuff", false, (Unit) => {
                SpellBuffAdd(Owner, Unit, "RivenTriCleaveDamageDebuff2", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                ApplyDamage(Owner, Unit, 0 + (this.TotalDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Owner);
                BreakSpellShields(Unit);
                If(Unit, default, CO_IS_NOT_DEAD, default, default, () => {
                    SpellBuffAdd(Owner, Unit, "RivenKnockback", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
                });
            });
        });
        SpellBuffClear(Owner, "FizzJumpBuffer");
        SpellBuffClear(Owner, "FizzJumpBuffered");
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "FizzJump");
        CDReduction = GetStat(GetPercentCooldownMod, Owner);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        BaseCD = this.VALUE_BY_LEVEL;
        LowerCD = Math(0 + (BaseCD ?? 0), MO_MULTIPLY, 0 + (CDReduction ?? 0));
        NewCD = Math(0 + (BaseCD ?? 0), MO_ADD, 0 + (LowerCD ?? 0));
        SetSlotSpellCooldownTimeVer2(0 + (NewCD ?? 0), 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetStatus(Owner, default, SetTargetable);
        SetStatus(Owner, default, SetGhosted);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        SetStatus(Owner, default, SetSilenced);
        SetStatus(Owner, default, SetForceRenderParticles);
        SetStatus(Owner, default, SetCallForHelpSuppresser);
        SetStatus(Owner, default, SetInvulnerable);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        UnlockAnimation(Owner, true);
        SpellBuffRemoveCurrent(Owner);
        SetStatus(Owner, default, SetCanAttack);
        SetStatus(Owner, default, SetCanMove);
        UnlockAnimation(Owner, true);
        SpellBuffClear(Owner, "FizzPiercingStrike");
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
    }
    public void SpellOnMissileUpdate()
    {
        #region VarDecl
        int? Count = null;
        Object? Level = null;
        Object? BaseDamage = null;
        float? MyAP = null;
        float? MyAPBonus = null;
        float? TotalDamage = null;
        float? TheirSpellBlock = null;
        float? TheirSpellBlockPercent = null;
        float? TheirSpellBlockRatio = null;
        float? ProjectedDamage = null;
        float? TheirHealth = null;
        TeamId? TeamID = null;
        Vector3? TargetPos = null;
        Minion? Other3 = null;
        Vector3? GroundHeight = null;
        TeamId? TeamOfOwner = null;
        Minion? Other1 = null;
        int? RumbleSkinID = null;
        #endregion
        SpellVars.Ready = Math(0 + (SpellVars.Ready ?? 0), MO_ADD, 1);
        If(SpellVars.Ready, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
            Count = 0;
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            ForNClosestVisibleUnitsInTargetArea(Owner, MissilePosition, 650, "AffectEnemies AffectHeroes ", 1, true, default, (Unit) => {
                SpellCast(Owner, Unit, default, default, true, 3, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, MissilePosition);
                Count = 1;
                DestroyMissile(MissileNetworkID);
                SpellBuffRemoveStacks(Owner, Owner, "AhriFoxFireMissile", 1);
            });
            If(Count, default, CO_EQUAL, default, 0, () => {
                ForNClosestVisibleUnitsInTargetArea(Owner, MissilePosition, 650, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, true, default, (Unit) => {
                    SpellCast(Owner, Unit, default, default, true, 3, ExtraSlots, 0 + (Level ?? 0), true, true, false, true, false, MissilePosition);
                    DestroyMissile(MissileNetworkID);
                    SpellBuffRemoveStacks(Owner, Owner, "AhriFoxFireMissile", 1);
                    Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                    BaseDamage = this.VALUE_BY_LEVEL;
                    MyAP = GetStat(GetFlatMagicDamageMod, Owner);
                    MyAPBonus = Math(0 + (MyAP ?? 0), MO_MULTIPLY, 0.3);
                    TotalDamage = Math(0 + (BaseDamage ?? 0), MO_ADD, 0 + (MyAPBonus ?? 0));
                    TheirSpellBlock = GetSpellBlock(Unit);
                    TheirSpellBlockPercent = Math(0 + (TheirSpellBlock ?? 0), MO_DIVIDE, 100);
                    TheirSpellBlockRatio = Math(0 + (TheirSpellBlockPercent ?? 0), MO_ADD, 1);
                    IfHasBuff(Unit, Owner, "AhriFoxFireMissileTwo", () => {
                        TotalDamage = Math(0 + (TotalDamage ?? 0), MO_DIVIDE, 2);
                    });
                    Else(() => {
                        IfHasBuff(Unit, Owner, "AhriFoxFireMissileTagTwo", () => {
                            TotalDamage = Math(0 + (TotalDamage ?? 0), MO_MULTIPLY, 1.5);
                        });
                    });
                    ProjectedDamage = Math(0 + (TotalDamage ?? 0), MO_DIVIDE, 0 + (TheirSpellBlockRatio ?? 0));
                    TheirHealth = GetPAROrHealth(Unit, GetHealth, PAR_MANA);
                    If(TheirHealth, default, CO_LESS_THAN, ProjectedDamage, default, () => {
                        SpellBuffAdd(Owner, Unit, "AhriFoxFireMissileTag", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                    Else(() => {
                        SpellBuffAdd(Owner, Unit, "AhriFoxFireMissileTagTwo", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    });
                });
            });
        });
        TeamID = GetTeamID(default);
        Level = GetCastInfo(GetCastSpellLevelPlusOne);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.MoveSpeedMod = this.VALUE_BY_LEVEL;
        Other3 = SpawnMinion("RighteousGust", "TestCube", "idle.lua", MissilePosition, TeamID ?? TEAM_UNKNOWN, false, false, false, false, false, true, 100, false, true, Nothing, default);
        FaceDirection(Other3, TargetPos);
        SpellBuffAdd(Owner, Other3, default, 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, MissilePosition, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            IfNotHasBuff(Unit, Owner, "OrianaShock", () => {
                SpellBuffAdd(Owner, Unit, "OrianaShock", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.HastePercent = this.VALUE_BY_LEVEL;
        NextBuffVars.BonusAD = this.VALUE_BY_LEVEL;
        TeamID = GetTeamID(default);
        GetGroundHeight(MissilePosition, GroundHeight);
        GroundHeight = ModifyPosition(default, default, default);
        Other3 = SpawnMinion("DarkPath", "testcube", "idle.lua", GroundHeight, TeamID ?? TEAM_CASTER, true, true, true, true, false, true, 0, false, true, Nothing, default);
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Other3, TargetPos);
        SpellBuffAdd(Owner, Other3, default, 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
        NextBuffVars.SlowPercent = this.VALUE_BY_LEVEL;
        GetGroundHeight(MissilePosition, GroundHeight);
        GroundHeight = ModifyPosition(default, default, default);
        NextBuffVars.targetPos = GroundHeight;
        SpellBuffAdd(Owner, Owner, "KogMawVoidOozeMissile", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, false, false, false, default);
        TeamOfOwner = GetTeamID(default);
        GetGroundHeight(MissilePosition, GroundHeight);
        GroundHeight = ModifyPosition(default, default, default);
        NextBuffVars.MissilePosition = GroundHeight;
        SpellBuffAdd(Attacker, Attacker, "RumbleCarpetBombMissile", 5, 1, 0.25, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, false, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "RumbleCarpetBomb", 1, 1, 4.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, false, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "RumbleCarpetBombCounter", 6, 1, 4.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        Count = GetBuffCountFromAll(Attacker, "RumbleCarpetBombCounter");
        If(Count, default, CO_EQUAL, default, 1, () => {
            Other1 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", MissilePosition, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Owner, default);
            SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Other1, "RumbleCarpetBombSound1", 1, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        });
        If(Count, default, CO_EQUAL, default, 6, () => {
            Other1 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", MissilePosition, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Owner, default);
            SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Other1, "RumbleCarpetBombSound2", 1, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        });
        RumbleSkinID = GetSkinID(Attacker);
        SpellEffectCreate(this.Particle, default, "rumble_ult_placeholder_01.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, MissilePosition, Target, default, default, true, default, default, false, false, default, default);
        If(RumbleSkinID, default, CO_EQUAL, default, 2, () => {
            SpellEffectCreate(this.Particle1, default, "rumble_incoming_mis_cannon_ball.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, MissilePosition, Target, default, default, true, default, default, false, false, default, default);
        });
        ElseIf(RumbleSkinID, default, CO_EQUAL, default, 1, () => {
            SpellEffectCreate(this.Particle1, default, "rumble_incoming_mis_pineapple.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, MissilePosition, Target, default, default, true, default, default, false, false, default, default);
        });
        Else(() => {
            SpellEffectCreate(this.Particle1, default, "rumble_incoming_mis.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, MissilePosition, Target, default, default, true, default, default, false, false, default, default);
        });
        ForEachUnitInTargetArea(Attacker, MissilePosition, 205, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Attacker, GetSlotSpellLevel);
            If(TeamOfOwner, default, CO_EQUAL, default, TEAM_ORDER, () => {
                IfNotHasBuff(Unit, Attacker, "RumbleCarpetBombBuffOrder", () => {
                    SpellBuffAdd(Attacker, Unit, "RumbleCarpetBombBuffOrder", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Unit);
                    ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 0, false, false, Attacker);
                });
            });
            Else(() => {
                IfNotHasBuff(Unit, Attacker, "RumbleCarpetBombBuffDest", () => {
                    SpellBuffAdd(Attacker, Unit, "RumbleCarpetBombBuffDest", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Unit);
                    ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 0, false, false, Attacker);
                });
            });
        });
    }
    public void BuffOnResurrect()
    {
        If(ParticleAlive, default, CO_EQUAL, default, true, () => {
            SpellEffectRemove(this.Particle1);
            this.ParticleAlive = false;
        });
        SpellEffectCreate(this.Particle1, default, "Ahri_Passive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, default, default, false, false, false, false, false, default, default);
        SetStatus(Owner, default, SetNoRender);
        SpellBuffClear(Owner, "FizzSharkDissappear");
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
    }
    public void BuffOnUpdateAmmo()
    {
        #region VarDecl
        int? Count = null;
        #endregion
        Count = GetBuffCountFromAll(Owner, "TeemoMushrooms");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
            SpellBuffAdd(Attacker, Owner, "TeemoMushrooms", 4, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        });
        Else(() => {
            SpellBuffAdd(Attacker, Owner, "TeemoMushrooms", 4, 1, 0 + (CharVars.MushroomCooldown ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        });
        Count = GetBuffCountFromAll(Owner, "AkaliShadowDance");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
            SpellBuffAdd(Attacker, Owner, "AkaliShadowDance", 4, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        });
        Else(() => {
            SpellBuffAdd(Attacker, Owner, "AkaliShadowDance", 4, 1, 0 + (CharVars.DanceTimerCooldown ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        });
        IfNotHasBuff(Owner, Owner, "GravesPassiveCounter", () => {
            SpellBuffClear(Owner, "GravesPassiveGrit");
        });
        Count = GetBuffCountFromAll(Owner, "MissileBarrage");
        If(Count, default, CO_EQUAL, default, 7, () => {
            SpellBuffAdd(Attacker, Owner, "MissileBarrage", 8, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        });
        Else(() => {
            SpellBuffAdd(Attacker, Owner, "MissileBarrage", 8, 1, 0 + (CharVars.ChargeCooldown ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        });
        Count = GetBuffCountFromAll(Owner, "KarmaChakraCharge");
        If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 2, () => {
            SpellBuffAdd(Attacker, Owner, "KarmaChakraCharge", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
            SpellBuffRemove(Owner, "KarmaOneMantraParticle", Owner, 0);
            SpellBuffAdd(Attacker, Owner, "KarmaTwoMantraParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            SpellBuffAdd(Attacker, Owner, "KarmaChakraCharge", 3, 1, 0 + (CharVars.MantraTimerCooldown ?? 0), NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Owner, "KarmaOneMantraParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
    }
    public void BuffOnLaunchMissile()
    {
        #region VarDecl
        float? Temp = null;
        float? ManaToInc = null;
        Vector3? MissilePosition = null;
        #endregion
        If(this.SowCast, default, CO_EQUAL, default, 1, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        Temp = GetPAROrHealth(Owner, GetPAR, PAR_MANA);
        If(Target, default, CO_IS_TYPE_AI, default, default, () => {
            If(Target, default, CO_IS_TYPE_TURRET, default, default, () => {
                
            });
            Else(() => {
                If(Temp, default, CO_GREATER_THAN_OR_EQUAL, this.ManaCostPerAttack, default, () => {
                    ManaToInc = Math(0 + (this.ManaCostPerAttack ?? 0), MO_MULTIPLY, -1);
                    IncPAR(Owner, 0 + (ManaToInc ?? 0));
                });
                Else(() => {
                    SpellBuffRemoveCurrent(Owner);
                });
            });
        });
        this.numAttacks = Math(0 + (this.numAttacks ?? 0), MO_SUBTRACT, 1);
        SpellBuffRemove(Owner, "TwitchSprayAndPray", Owner, default);
        If(this.numAttacks, default, CO_LESS_THAN_OR_EQUAL, default, 0, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        If(this.FlashMissileId, default, CO_EQUAL, default, 0, () => {
            this.FlashMissileId = missileId;
            this.MissileAlive = 1;
        });
        this.AlphaStrikeLaunched = true;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetStatus(Owner, default, SetCanMove);
        CharVars.MissileID = missileId;
        CharVars.GhostAlive = true;
        MissilePosition = GetMissilePosFromID(missileId ?? 0);
        this.MissilePosition = MissilePosition ?? 0;
        CharVars.MissileID = missileId;
        CharVars.GhostAlive = true;
        MissilePosition = GetMissilePosFromID(missileId ?? 0);
        this.MissilePosition = MissilePosition ?? 0;
        CharVars.MissileID = missileId;
        CharVars.GhostAlive = true;
        CharVars.MissileID = missileId;
        CharVars.GhostAlive = true;
        CharVars.MissileID = missileId;
        CharVars.GhostAlive = true;
        CharVars.UltMissileID = missileId;
        SpellBuffClear(Owner, "FizzMarinerDoom");
        CharVars.MISSILEID = missileId;
        CharVars.MISSILEID2 = missileId;
    }
    public void BuffOnCollision()
    {
        #region VarDecl
        TeamId? TeamID = null;
        bool? ShouldHit = null;
        bool? Visible = null;
        float? BaseAttack = null;
        float? HitDamage = null;
        TeamId? OwnerVar = null;
        #endregion
        If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    IfNotHasBuff(Target, Nothing, "SharedWardBuff", () => {
                        IfNotHasBuff(Target, Owner, "ShenShadowDashCooldown", () => {
                            TeamID = GetTeamID(default);
                            SpellBuffAdd(Owner, Target, "ShenShadowDashCooldown", 1, 1, 0 + (this.tauntDuration ?? 0), NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                            BreakSpellShields(Target);
                            NextBuffVars.playParticle = true;
                            ApplyTaunt(Attacker, Target, 0 + (this.tauntDuration ?? 0));
                            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                                If(this.EnergyRefunds, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                                    IncPAR(Owner, 50);
                                    this.EnergyRefunds = Math(0 + (this.EnergyRefunds ?? 0), MO_SUBTRACT, 1);
                                });
                            });
                        });
                    });
                });
            });
        });
        StartTrackingCollisions(Owner, true);
        If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", false, (Unit) => {
                    ShouldHit = true;
                    Visible = CanSeeTarget(Owner, Unit);
                    If(Visible, default, CO_EQUAL, default, false, () => {
                        If(Unit, default, CO_IS_NOT_HERO, default, default, () => {
                            ShouldHit = false;
                        });
                    });
                    this.HitUnit = true;
                    BaseAttack = GetStat(GetBaseAttackDamage, Owner);
                    HitDamage = Math(0, MO_MULTIPLY, 0 + (BaseAttack ?? 0));
                    HitDamage = Math(0 + (HitDamage ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
                    SpellBuffAdd(Owner, Unit, "RenektonTargetSliced", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    IfHasBuff(Owner, Owner, "RenektonSliceAndDiceDelay", () => {
                        
                    });
                    ElseIf(this.DiceVersion, default, CO_EQUAL, default, true, () => {
                        
                    });
                    ElseIf(ShouldHit, default, CO_EQUAL, default, false, () => {
                        
                    });
                    Else(() => {
                        SpellBuffAdd(Owner, Owner, "RenektonSliceAndDiceDelay", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                        SetSlotSpellCooldownTimeVer2(0, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                    });
                    If(ShouldHit, default, CO_EQUAL, default, true, () => {
                        OwnerVar = GetTeamID(default);
                        BreakSpellShields(Unit);
                        SpellBuffAdd(Owner, Unit, "RenektonBloodSplatterTarget", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        If(this.RageBonus, default, CO_EQUAL, default, true, () => {
                            NextBuffVars.ArmorShred = this.ArmorShred;
                            SpellBuffAdd(Owner, Unit, "RenektonSliceAndDiceDebuff", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, false, false, default);
                            ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1.5, 0, 0.9, false, false, Owner);
                        });
                        Else(() => {
                            ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0.9, false, false, Owner);
                        });
                    });
                });
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                ForEachUnitInTargetArea(Owner, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", false, (Unit) => {
                    ShouldHit = true;
                    Visible = CanSeeTarget(Owner, Unit);
                    If(Visible, default, CO_EQUAL, default, false, () => {
                        If(Unit, default, CO_IS_NOT_HERO, default, default, () => {
                            ShouldHit = false;
                        });
                    });
                    this.HitUnit = true;
                    BaseAttack = GetStat(GetBaseAttackDamage, Owner);
                    HitDamage = Math(0, MO_MULTIPLY, 0 + (BaseAttack ?? 0));
                    HitDamage = Math(0 + (HitDamage ?? 0), MO_ADD, 0 + (this.BonusDamage ?? 0));
                    SpellBuffAdd(Owner, Unit, "RenektonTargetSliced", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                    IfHasBuff(Owner, Owner, "RenektonSliceAndDiceDelay", () => {
                        
                    });
                    ElseIf(this.DiceVersion, default, CO_EQUAL, default, true, () => {
                        
                    });
                    ElseIf(ShouldHit, default, CO_EQUAL, default, false, () => {
                        
                    });
                    Else(() => {
                        SpellBuffAdd(Owner, Owner, "RenektonSliceAndDiceDelay", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
                        SetSlotSpellCooldownTimeVer2(0, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
                    });
                    If(ShouldHit, default, CO_EQUAL, default, true, () => {
                        OwnerVar = GetTeamID(default);
                        BreakSpellShields(Unit);
                        SpellBuffAdd(Owner, Unit, "RenektonBloodSplatterTarget", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
                        If(this.RageBonus, default, CO_EQUAL, default, true, () => {
                            NextBuffVars.ArmorShred = this.ArmorShred;
                            SpellBuffAdd(Owner, Unit, "RenektonSliceAndDiceDebuff", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
                            ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1.5, 0, 0.9, false, false, Owner);
                        });
                        Else(() => {
                            ApplyDamage(Owner, Unit, 0 + (HitDamage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0.9, false, false, Owner);
                        });
                    });
                });
            });
        });
        If(Owner, default, CO_DIFFERENT_TEAM, Target, default, () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_NOT_DEAD, default, default, () => {
                    IfNotHasBuff(Target, Nothing, "SharedWardBuff", () => {
                        SpellBuffRemove(Owner, "GragasBodySlamHolder", Owner, 0);
                        StopMoveBlock(Owner);
                    });
                });
            });
        });
        IfNotHasBuff(Target, Owner, "SlashBeenHit", () => {
            If(Target, default, CO_IS_TYPE_AI, default, default, () => {
                If(Target, default, CO_IS_NOT_TURRET, default, default, () => {
                    SpellBuffAdd(Owner, Target, "SlashBeenHit", 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                    BreakSpellShields(Target);
                    ApplyDamage(Attacker, Target, 0 + (this.Damage ?? 0), PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 0, false, true, Attacker);
                    SpellEffectCreate(particle, default, "BloodSlash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, false, false, default, default);
                    StartTrackingCollisions(Owner, true);
                    If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                        IncPAR(Owner, 5);
                    });
                    Else(() => {
                        IncPAR(Owner, 2);
                    });
                });
            });
        });
    }
    public void BuffOnAssist()
    {
        #region VarDecl
        Object? Level = null;
        Object? Cooldown = null;
        float? DLCooldown = null;
        int? Count = null;
        Object? AlphaStrikeCD = null;
        double? WujuStyleCD = null;
        double? HighlanderCD = null;
        double? MeditateCD = null;
        Object? ASCDLeft = null;
        Object? MedCDLeft = null;
        Object? WujuCDLeft = null;
        Object? HighCDLeft = null;
        float? ASCDFinal = null;
        float? MedCDFinal = null;
        float? WujuCDFinal = null;
        float? HighCDFinal = null;
        float? MasteryBountyAmt = null;
        #endregion
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                    SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0);
                });
            });
        });
        SpellEffectCreate(Placeholder, default, "katarina_spell_refresh_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        IncGold(Owner, 25);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0);
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0);
        DLCooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
        DLCooldown = Math(0 + (DLCooldown ?? 0), MO_SUBTRACT, 15);
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + (DLCooldown ?? 0));
        SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        Count = GetBuffCountFromCaster(Owner, Owner, "AkaliShadowDance");
        If(Count, default, CO_NOT_EQUAL, default, 3, () => {
            SpellBuffClear(Owner, "AkaliShadowDanceTimer");
        });
        SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                IncHealth(Owner, 0 + (CharVars.MaliceHeal ?? 0), Owner);
                SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0);
            });
        });
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            AlphaStrikeCD = this.VALUE_BY_LEVEL;
            WujuStyleCD = 12.5;
            HighlanderCD = 37.5;
            MeditateCD = 22.5;
            ASCDLeft = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            MedCDLeft = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            WujuCDLeft = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            HighCDLeft = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
            ASCDFinal = Math(0 + (ASCDLeft ?? 0), MO_SUBTRACT, 0 + (AlphaStrikeCD ?? 0));
            MedCDFinal = Math(0 + (MedCDLeft ?? 0), MO_SUBTRACT, 0 + (MeditateCD ?? 0));
            WujuCDFinal = Math(0 + (WujuCDLeft ?? 0), MO_SUBTRACT, 0 + (WujuStyleCD ?? 0));
            HighCDFinal = Math(0 + (HighCDLeft ?? 0), MO_SUBTRACT, 0 + (HighlanderCD ?? 0));
            SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + (ASCDFinal ?? 0));
            SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + (MedCDFinal ?? 0));
            SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + (WujuCDFinal ?? 0));
            SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + (HighCDFinal ?? 0));
            SpellEffectCreate(default, default, "DeathsCaress_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        });
        If(default, 1, CO_EQUAL, default, 0, () => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
                If(Level, default, CO_GREATER_THAN_OR_EQUAL, default, 1, () => {
                    Cooldown = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellCooldownTime);
                    If(Cooldown, default, CO_GREATER_THAN, default, 0, () => {
                        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0);
                    });
                });
            });
        });
        SpellBuffAdd(Owner, Owner, "LeviathanStats", 20, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "MejaisStats", 20, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, default, default, default, default);
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            CharVars.MagicDamageMod = Math(0 + (CharVars.MagicDamageMod ?? 0), MO_ADD, 5);
            CharVars.MagicDamageMod = Math(0 + (CharVars.MagicDamageMod ?? 0), MO_MIN, 70);
            SpellEffectCreate(ar, default, "MejaisSoulstealer_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        If(AvatarVars.MasteryScholar, default, CO_EQUAL, default, true, () => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                IfHasBuff(Owner, Owner, "OdinPlayerBuff", () => {
                    IncExp(Owner, 20);
                });
                Else(() => {
                    IncExp(Owner, 40);
                });
            });
        });
        If(AvatarVars.MasteryBounty, default, CO_EQUAL, default, true, () => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                IfHasBuff(Owner, Owner, "OdinPlayerBuff", () => {
                    MasteryBountyAmt = Math(0 + (AvatarVars.MasteryBountyAmt ?? 0), MO_DIVIDE, 2);
                    IncGold(Owner, 0 + (MasteryBountyAmt ?? 0));
                });
                Else(() => {
                    IncGold(Owner, 0 + (AvatarVars.MasteryBountyAmt ?? 0));
                });
            });
        });
        SpellBuffAdd(Owner, Owner, "MuramasaStats", 20, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, default, default, default, default);
    }
    public void AdjustCastInfo()
    {
        #region VarDecl
        Object? Level = null;
        float? BonusCastRange = null;
        float? NewCastRange = null;
        #endregion
        IfHasBuff(Owner, Owner, "DrawABead", () => {
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            BonusCastRange = Math(0 + (Level ?? 0), MO_MULTIPLY, 90);
            NewCastRange = Math(0 + (BonusCastRange ?? 0), MO_ADD, 600);
            SetSpellCastRange(0 + (NewCastRange ?? 0));
        });
    }
    public void CharOnAssistUnit()
    {
        #region VarDecl
        int? Count = null;
        #endregion
        IfHasBuff(Owner, Owner, "AkaliShadowDance", () => {
            If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
                Count = GetBuffCountFromAll(Owner, "AkaliShadowDance");
                If(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 4, () => {
                    
                });
                ElseIf(Count, default, CO_GREATER_THAN_OR_EQUAL, default, 3, () => {
                    SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 4, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
                });
                Else(() => {
                    SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 4, 1, 0, NextBuffVars, BUFF_STACKS_AND_CONTINUE, BUFF_AmmoStack, 0, true, false, false, default);
                });
            });
        });
    }
    public void BuffOnMissileEnd()
    {
        #region VarDecl
        TeamId? TeamOfOwner = null;
        Object? Level = null;
        TeamId? TeamID = null;
        int? GragasSkinID = null;
        Vector3? TargetPos = null;
        Minion? Other1 = null;
        Vector3? OwnerPos = null;
        Minion? Other3 = null;
        Vector3? UnitPos = null;
        Object? FacingPos = null;
        float? CooldownPerc = null;
        float? CooldownMult = null;
        float? DurationVar = null;
        #endregion
        If(SpellName, default, CO_EQUAL, default, "FlashFrostSpell", () => {
            TeamOfOwner = GetTeamID(default);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            SpellEffectCreate(arr, default, "cryo_FlashFrost_tar.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, MissileEndPosition, Target, default, default, true, default, default, default, default, default, default);
            ForEachUnitInTargetArea(Owner, MissileEndPosition, 230, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
                BreakSpellShields(Unit);
                ApplyDamage(Attacker, Unit, 0 + (this.VALUE_BY_LEVEL ?? 0), MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Attacker);
                ApplyStun(Attacker, Unit, 1);
                NextBuffVars.MovementSpeedMod = -0.2;
                NextBuffVars.AttackSpeedMod = 0;
                SpellBuffAdd(Attacker, Unit, "Chilled", 1, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
            this.MissileAlive = 0;
            SpellBuffRemove(Owner, "FlashFrost", Owner, default);
        });
        If(SpellName, default, CO_EQUAL, default, "AlphaStrike", () => {
            SpellBuffRemoveCurrent(Owner);
        });
        If(SpellName, default, CO_EQUAL, default, "GragasBarrelRollMissile", () => {
            TeamID = GetTeamID(default);
            GragasSkinID = GetSkinID(Owner);
            TargetPos = this.TargetPos;
            Other1 = SpawnMinion("DoABarrelRoll", "TestCube", "idle.lua", TargetPos, TeamID ?? TEAM_CASTER, false, true, false, true, true, true, 0, default, true, Owner, default);
            NextBuffVars.SkinID = GragasSkinID;
            SpellBuffAdd(Other1, Owner, "GragasBarrelRollBoom", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            NextBuffVars.SkinID = GragasSkinID;
            SpellBuffAdd(Other1, Other1, "GragasBarrelRollRender", 1, 1, 20, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        If(SpellName, default, CO_EQUAL, default, "TalonShadowAssaultMisOne", () => {
            OwnerPos = GetUnitPosition(Owner);
            TeamOfOwner = GetTeamID(default);
            Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", MissileEndPosition, TeamOfOwner ?? TEAM_CASTER, false, true, false, false, false, true, 0, false, true, Owner, default);
            FaceDirection(Other3, OwnerPos);
            SetStatus(Other3, default, SetInvulnerable);
            SetStatus(Other3, default, SetTargetable);
            CharVars.SAMissileNumber = Math(0 + (CharVars.SAMissileNumber ?? 0), MO_ADD, 1);
            If(CharVars.SAMissileNumber, default, CO_GREATER_THAN, default, 8, () => {
                CharVars.SAMissileNumber = 1;
            });
            SpellBuffAdd(Owner, Other3, "TalonShadowAssaultMarker", 1, 1, 100000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            DestroyMissile(CharVars.MISSILEID);
            SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
            SetStatus(Owner, default, SetCanCast);
        });
        If(SpellName, default, CO_EQUAL, default, "TalonRakeMissileOne", () => {
            OwnerPos = GetUnitPosition(Owner);
            TeamOfOwner = GetTeamID(default);
            Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", MissileEndPosition, TeamOfOwner ?? TEAM_CASTER, false, true, false, false, false, true, 0, false, true, Owner, default);
            FaceDirection(Other3, OwnerPos);
            SetStatus(Other3, default, SetInvulnerable);
            SetStatus(Other3, default, SetTargetable);
            CharVars.MissileNumber = Math(0 + (CharVars.MissileNumber ?? 0), MO_ADD, 1);
            UnitPos = GetUnitPosition(Other3);
            Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
            If(CharVars.MissileNumber, default, CO_GREATER_THAN, default, 2, () => {
                CharVars.MissileNumber = 0;
                SpellBuffRemove(Owner, "TalonRakeMissileOne", Owner, 0);
            });
            SpellBuffAdd(Owner, Other3, "TalonRakeMarker", 1, 1, 100000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            DestroyMissile(CharVars.MISSILEID2);
        });
        TeamID = GetTeamID(default);
        TargetPos = this.TargetPos;
        Other3 = SpawnMinion("HiddenMinion", "OlafAxe", "idle.lua", TargetPos, TeamID ?? TEAM_ORDER, false, true, false, true, true, true, 0, default, false, Owner, default);
        FacingPos = this.FacingPos;
        FaceDirection(Other3, FacingPos);
        CooldownPerc = GetStat(GetPercentCooldownMod, Owner);
        CooldownMult = Math(1, MO_ADD, 0 + (CooldownPerc ?? 0));
        DurationVar = Math(10, MO_MULTIPLY, 0 + (CooldownMult ?? 0));
        DurationVar = Math(0 + (DurationVar ?? 0), MO_SUBTRACT, 0.5);
        SpellBuffAdd(Attacker, Other3, "OlafAxeExpirationTimer", 1, 1, 0 + (DurationVar ?? 0), NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Level = GetSlotSpellInfo(default, SPELLBOOK_CHAMPION, SpellSlots, Owner, GetSlotSpellLevel);
        NextBuffVars.MovementSpeedMod = this.VALUE_BY_LEVEL;
        NextBuffVars.AttackSpeedMod = this.VALUE_BY_LEVEL;
        ForEachUnitInTargetArea(Attacker, Other3, 100, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Unit) => {
            BreakSpellShields(Unit);
            SpellBuffAdd(Attacker, Unit, "olafSlow", 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Unit, "OlafAxeThrowDamage", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
    }
    public void CharOnReconnect()
    {
        #region VarDecl
        TeamId? teamID = null;
        #endregion
        teamID = GetTeamID(default);
        If(teamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            ForEachChampion(TEAM_ORDER, default, default, (Unit) => {
                If(Owner, default, CO_NOT_EQUAL, Unit, default, () => {
                    IncPermanentStat(IncPermanentFlatGoldPer10Mod, Unit, -4);
                    IncPermanentStat(IncPermanentPercentEXPBonus, Unit, -0.04);
                });
            });
        });
        Else(() => {
            ForEachChampion(TEAM_CHAOS, default, default, (Unit) => {
                If(Owner, default, CO_NOT_EQUAL, Unit, default, () => {
                    IncPermanentStat(IncPermanentFlatGoldPer10Mod, Unit, -4);
                    IncPermanentStat(IncPermanentPercentEXPBonus, Unit, -0.04);
                });
            });
        });
        SetStatus(Owner, default, SetDisableAmbientGold);
    }
    public void BuffOnZombie()
    {
        #region VarDecl
        int? KogMawSkinID = null;
        TeamId? TeamID = null;
        #endregion
        KogMawSkinID = GetSkinID(Owner);
        If(KogMawSkinID, default, CO_EQUAL, default, 4, () => {
            SpellEffectRemove(this.a);
        });
        ElseIf(KogMawSkinID, default, CO_EQUAL, default, 6, () => {
            SpellEffectRemove(this.a);
        });
        IfNotHasBuff(Owner, Owner, "KogMawIcathianSurprise", () => {
            SpellBuffAdd(Owner, Owner, "KogMawIcathianSurprise", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        IfNotHasBuff(Owner, Owner, "DeathDefiedBuff", () => {
            SpellBuffAdd(Owner, Owner, "DeathDefiedBuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        StopChanneling(Attacker, ChannelingStopCondition_Cancel, ChannelingStopSource_Die);
        SpellBuffAdd(Owner, Attacker, "YorickUltPetActive", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_CombatEnchancer);
        If(this.IsKarthus, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Owner, Owner, "YorickRADelayLich", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ElseIf(this.IsKogMaw, default, CO_EQUAL, default, true, () => {
            SpellBuffAdd(Owner, Owner, "YorickRADelayKogMaw", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Else(() => {
            SpellBuffAdd(Owner, Owner, "YorickRADelay", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        TeamID = GetTeamID(default);
        If(TeamID, default, CO_EQUAL, default, TEAM_ORDER, () => {
            ForEachChampion(TEAM_ORDER, "YorickRARemovePet", true, (Unit) => {
                SpellBuffClear(Unit, "YorickRARemovePet");
            });
        });
        Else(() => {
            ForEachChampion(TEAM_CHAOS, "YorickRARemovePet", true, (Unit) => {
                SpellBuffClear(Unit, "YorickRARemovePet");
            });
        });
    }
    public void ItemOnSpellCast()
    {
        #region VarDecl
        float? BaseDamage = null;
        float? AbilityPower = null;
        #endregion
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, true, () => {
            
        });
        Else(() => {
            IfNotHasBuff(Owner, Owner, "SheenDelay", () => {
                BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                NextBuffVars.BaseDamage = BaseDamage;
                NextBuffVars.IsSheen = false;
                SpellBuffAdd(Owner, Owner, "Sheen", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
            });
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, true, () => {
            
        });
        Else(() => {
            IfNotHasBuff(Owner, Owner, "SheenDelay", () => {
                BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                NextBuffVars.BaseDamage = BaseDamage;
                NextBuffVars.IsSheen = true;
                SpellBuffAdd(Owner, Owner, "Sheen", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
            });
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_EQUAL, default, true, () => {
            
        });
        Else(() => {
            IfNotHasBuff(Owner, Owner, "SheenDelay", () => {
                AbilityPower = GetStat(GetFlatMagicDamageMod, Owner);
                BaseDamage = GetStat(GetBaseAttackDamage, Owner);
                NextBuffVars.BaseDamage = BaseDamage;
                NextBuffVars.AbilityPower = AbilityPower;
                SpellBuffAdd(Owner, Owner, "LichBane", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
            });
        });
        If(this.CooldownResevoir, default, CO_GREATER_THAN, default, 0, () => {
            If(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
                this.CooldownResevoir = Math(-1, MO_ADD, 0 + (this.CooldownResevoir ?? 0));
                If(Owner, default, CO_IS_TYPE_HERO, default, default, () => {
                    SpellEffectCreate(Particle, default, "InnervatingLocket_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
                    SpellBuffAdd(Owner, Owner, "InnervatingLocketBuff", 1, 1, 2.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Heal, 0, true, false, default, default);
                });
            });
        });
        If(SpellVars.DoesntTriggerSpellCasts, default, CO_NOT_EQUAL, default, true, () => {
            If(this.CooldownResevoir, default, CO_GREATER_THAN, default, 0, () => {
                If(this.CooldownResevoir, default, CO_EQUAL, default, 2, () => {
                    this.LastTimeExecuted = GetTime();
                });
                SpellBuffAdd(Owner, Owner, "Rageblade", 8, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, default, default, default, default);
            });
        });
    }
    public void ItemOnAssist()
    {
        If(Target, default, CO_IS_TYPE_HERO, default, default, () => {
            this.ExtraHP = Math(0 + (this.ExtraHP ?? 0), MO_ADD, 35);
            this.ExtraRegen = Math(0 + (this.ExtraRegen ?? 0), MO_ADD, 0.2);
            this.ExtraHP = Math(0 + (this.ExtraHP ?? 0), MO_MIN, 350);
            this.ExtraRegen = Math(0 + (this.ExtraRegen ?? 0), MO_MIN, 2);
        });
    }
    public void BuffOnCollisionTerrain()
    {
        this.Collide = true;
        SpellBuffRemoveCurrent(Owner);
    }
    public void BuffOnPreMitigationDamage()
    {
        #region VarDecl
        bool? canSee = null;
        float? DamageAmount = null;
        float? CurrentHealth = null;
        #endregion
        If(Attacker, default, CO_IS_NOT_TURRET, default, default, () => {
            IfHasBuff(Owner, Owner, "Stealth", () => {
                canSee = CanSeeTarget(Attacker, Owner);
                If(canSee, default, CO_EQUAL, default, false, () => {
                    DamageAmount = 0;
                });
            });
        });
        If(default, DAMAGESOURCE_SPELLAOE, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
            DamageAmount = Math(0.5, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        });
        If(default, DAMAGESOURCE_SPELLAOE, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
            DamageAmount = Math(0.5, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        });
        If(default, DAMAGESOURCE_SPELLAOE, CO_DAMAGE_SOURCETYPE_IS, default, default, () => {
            DamageAmount = Math(0.5, MO_MULTIPLY, 0 + (DamageAmount ?? 0));
        });
        IfHasBuff(Owner, Owner, "UndyingRage", () => {
            
        });
        Else(() => {
            CurrentHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
            If(DamageAmount, default, CO_GREATER_THAN_OR_EQUAL, CurrentHealth, default, () => {
                SpellBuffRemoveCurrent(Owner);
            });
        });
        CurrentHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        If(DamageAmount, default, CO_GREATER_THAN_OR_EQUAL, CurrentHealth, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
        CurrentHealth = GetPAROrHealth(Owner, GetHealth, PAR_MANA);
        If(DamageAmount, default, CO_GREATER_THAN_OR_EQUAL, CurrentHealth, default, () => {
            SpellBuffRemoveCurrent(Owner);
        });
    }
    public void ItemOnBeingDodged()
    {
        SpellBuffAdd(Owner, Owner, "Rageblade", 8, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, default, default, default, default);
        If(Attacker, default, CO_IS_TYPE_AI, default, default, () => {
            If(Attacker, default, CO_IS_NOT_TURRET, default, default, () => {
                NextBuffVars.ArmorReduction = -15;
                SpellBuffAdd(Owner, Attacker, "BlackCleaver", 3, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
            });
        });
    }
    public void ItemOnMiss()
    {
        SpellBuffAdd(Owner, Owner, "Rageblade", 8, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, default, default, default, default);
    }
    public void BuffBeingDodged()
    {
        If(Attacker, default, CO_IS_TYPE_AI, default, default, () => {
            If(Attacker, default, CO_IS_NOT_TURRET, default, default, () => {
                SpellBuffAdd(Owner, Attacker, "MaladyCounter", 4, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
                SpellBuffAdd(Owner, Attacker, "MaladySpell", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                ApplyDamage(Owner, Attacker, 20, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Owner);
            });
        });
        DebugSay(Owner, "Gasp?", default);
    }
    public void CharOnLaunchAttack()
    {
        IfNotHasBuff(Owner, Owner, "SheenDelay", () => {
            SpellBuffAdd(Owner, Owner, "SheenDelay", 1, 1, 1.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        });
        IfNotHasBuff(Owner, Owner, "SheenDelay", () => {
            SpellBuffAdd(Owner, Owner, "SheenDelay", 1, 1, 1.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        });
    }
    public void BuffOnDisconnect()
    {
        SpellBuffAdd(Owner, Owner, "DisconnectTimer", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
    }
}
