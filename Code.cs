using static Functions;

public class Code
{
    public void BuffOnUpdateActions()
    {
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ApplyDamage(Attacker, Owner, 4, MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0, 1, false, false, Attacker);
        });
        NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
        ForEachUnitInTargetArea(Attacker, Owner, 150, "AffectFriends AffectHeroes NotAffectSelf ", default, default, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "TrailblazerTarget", 1, 1, 2.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, default, default, default, default);
        });
        CurPos = GetPointByUnitFacingOffset(Owner, 30, 180);
        TeamID = GetTeamID(default);
        Other3 = SpawnMinion("AcidTrail", "TestCube", "idle.lua", CurPos, TeamID ?? TEAM_CASTER, true, false, false, true, false, true, 0, default, default, Attacker, default);
        ;
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(MoveSpeedMod);
        SpellBuffAdd(Owner, Other3, "TrailblazerApplicator", 1, 1, 0 + CharVars.TrailDuration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            tooltipAmount = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            CurrentDamage = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.TickDamage, TRUE_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        });
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.TickDamage, TRUE_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () =>
        {
            NextBuffVars.ArmorBonus = SetVarInTable(30);
            NextBuffVars.DamageBonus = SetVarInTable(13);
            ForEachUnitInTargetArea(Owner, Owner, 800, "AffectFriends AffectMinions AffectHeroes ", default, default, (Iterator) =>
            {
                SpellBuffAdd(Attacker, Unit, "PromoteAura", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
            });
        });
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ApplyDamage(Attacker, Target, 30, MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 1, default, default, default, default);
        });
        Level = SetVarInTable(this.Level);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, false, false, Attacker);
            ;
        });
        SpellBuffRemove(Owner, "WillRevive", Owner, 0);
        NextBuffVars.DamagePerTick = SetVarInTable(this.DamagePerTick);
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Attacker, Owner, 150, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                SpellEffectCreate(hi1, default, "corki_fire_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "pelvis", default, Unit, default, default, false, false, false, false, false, default, default);
                ;
                ;
            });
        });
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 1);
        ;
        teamID = GetTeamID(default);
        ;
        ;
        IssueOrder(Attacker, AI_MOVETO, default, Owner);
        SpellBuffRemoveCurrent(Owner);
        ExecutePeriodically(20, this.LastTimeExecuted, true, () =>
        {
            teamID = GetTeamID(default);
            numOtherNinjas = SetVarInTable(-1);
            ;
            ;
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            CurrentTime = GetGameTime();
            ;
            ;
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ForNClosestUnitsInTargetArea(Owner, Owner, 175, "AffectHeroes ", 1, true, default, (Iterator) =>
            {
                ;
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 400, "AffectHeroes ", default, true, (Iterator) =>
            {
                ;
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
            ;
        });
        ;
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ForNClosestUnitsInTargetArea(Owner, Owner, 150, "AffectHeroes ", 1, true, default, (Iterator) =>
            {
                ;
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ForNClosestUnitsInTargetArea(Owner, Owner, 175, "AffectHeroes ", 1, true, default, (Iterator) =>
            {
                ;
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            CurrentTime = GetGameTime();
            ;
            ;
            ;
        });
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            IncHealth(Owner, 10, Owner);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetAreaAddBuff(Owner, Owner, 850, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", Attacker, "OdinVanguardAuraBuff", BUFF_RENEW_EXISTING, BUFF_Aura, 1, 1, 0.5, "NextBuffVars", 0, false, true);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ;
            CurrentGameTime = GetGameTime();
            ;
            this.PreviousGameTime = SetVarInTable(CurrentGameTime);
        });
        ExecutePeriodically(1, this.LastTimeExecuted2, true, () =>
        {
            ;
            ;
            ;
            ;
        });
        TeamID = GetTeamID(default);
        ExecutePeriodically(4, this.LastTimeExecuted, true, () =>
        {
            ;
        });
        ExecutePeriodically(0, this.LastTimeExecuted, false, () =>
        {
            Distance = DistanceBetweenObjectAndPoint(Owner, this.StartPosition);
            ;
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            Run = SetVarInTable(false);
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
            ;
            SetSlotSpellCooldownTimeVer2(0 + NewSSCD1, 0, SpellSlots, SPELLBOOK_SUMMONER, Owner, false);
            SetSlotSpellCooldownTimeVer2(0 + NewSSCD2, 1, SpellSlots, SPELLBOOK_SUMMONER, Owner, false);
        });
        ForEachUnitInTargetAreaRandom(Owner, Owner, 1000, "AffectEnemies AffectMinions AffectBarrackOnly ", default, true, 1, (Iterator) =>
        {
            SpellBuffAdd(Owner, Owner, "TurretBackdoorBonus", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(0, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 400, "AffectHeroes ", default, true, (Iterator) =>
            {
                SpellBuffAdd(Owner, Unit, "OdinShrineBuff", 1, 1, 45, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ForNClosestUnitsInTargetArea(Owner, Owner, 150, "AffectHeroes ", 1, true, default, (Iterator) =>
            {
                ;
            });
        });
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 400, "AffectHeroes ", default, true, (Iterator) =>
            {
                ;
            });
        });
        ExecutePeriodically(0, this.LastTimeExecuted, false, () =>
        {
            Distance = DistanceBetweenObjectAndPoint(Owner, this.StartPosition);
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            CurrentTime = GetGameTime();
            ;
            ;
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            CurrentTime = GetGameTime();
            ;
            ;
        });
        ExecutePeriodically(0, this.LastTimeExecuted, false, () =>
        {
            Distance = DistanceBetweenObjectAndPoint(Owner, this.StartPosition);
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            IncHealth(Owner, 0 + this.HealPerTick, Owner);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ForNClosestUnitsInTargetArea(Owner, Owner, 175, "AffectHeroes ", 1, true, default, (Iterator) =>
            {
                ;
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 365, "AffectHeroes ", default, true, (Iterator) =>
            {
                ;
                ;
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            CurrentTime = GetGameTime();
            FoundTarget = SetVarInTable(false);
            ;
            ;
            ;
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ForNClosestUnitsInTargetArea(Owner, Owner, 175, "AffectHeroes ", 1, true, default, (Iterator) =>
            {
                ;
            });
        });
        ExecutePeriodically(2, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(0, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 250, "AffectHeroes ", default, true, (Iterator) =>
            {
                ;
                ;
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            ForNClosestUnitsInTargetArea(Attacker, Owner, 500, "AffectEnemies AffectNeutral AffectBuildings AffectMinions AffectHeroes AffectTurrets ", 1, true, default, (Iterator) =>
            {
                ApplyTaunt(Unit, Owner, 0.5);
            });
        });
        ExecutePeriodically(30, this.LastTimeExecuted, false, () =>
        {
            gameTime = GetGameTime();
            ;
            ;
            ;
            ;
            SetBuffToolTipVar(1, 0 + aoeReduction);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            TeamID = GetTeamID(default);
            ;
            ;
        });
        ExecutePeriodically(0.5, this.DamageManaTimer, false, () =>
        {
            ;
            ;
            ;
        });
        ExecutePeriodically(0.25, this.SlowTimer, false, () =>
        {
            TargetPos = SetVarInTable(this.TargetPos);
            OwnerPos = GetUnitPosition(Owner);
            Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
            ;
            ForEachUnitInTargetArea(Attacker, TargetPos, 550, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
            {
                NextBuffVars.TargetPos = SetVarInTable(this.TargetPos);
                NextBuffVars.DefenseBonus = SetVarInTable(this.DefenseBonus);
                NextBuffVars.CCReduction = SetVarInTable(this.CCReduction);
                SpellBuffAdd(Attacker, Unit, "MaokaiDrain3Defense", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                ApplyAssistMarker(Owner, Unit, 10);
            });
        });
        ForEachUnitInTargetArea(Attacker, Owner, 180, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, default, false, false, default);
        });
        CurPos = GetPointByUnitFacingOffset(Owner, 25, 180);
        Distance = DistanceBetweenPoints(CurPos, this.LastPosition);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        ;
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Attacker, Owner, 265, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                NextBuffVars.SlowPercent = SetVarInTable(this.SlowPercent);
                SpellBuffAdd(Attacker, Unit, "MegaAdhesiveTarget", 1, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.HealAmount);
        ;
        SpellBuffRemoveCurrent(Owner);
        TargetPos = SetVarInTable(this.TargetPos);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        ;
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        ForEachUnitInTargetArea(Attacker, TargetPos, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        MonkTotalDamage = GetTotalAttackDamage(Owner);
        ;
        ExecutePeriodically(0.15, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetAreaRandom(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectBuildings AffectMinions AffectHeroes AffectTurrets ", default, default, 1, (Iterator) =>
            {
                ;
                ApplyDamage(Attacker, Unit, 0 + MonkTotalDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, default, default, default, default);
            });
        });
        ForEachUnitInTargetArea(Attacker, Owner, 160, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        ;
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            tooltipAmount = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
        });
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + CharVars.IlluminateDamage);
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            NextBuffVars.DamageIncrease = SetVarInTable(DamageIncrease);
            ;
            NextBuffVars.AbilityPower = SetVarInTable(AbilityPower);
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", default, true, (Iterator) =>
            {
                SpellBuffAdd(Attacker, Unit, "RadianceAura", 1, 1, 1.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
                ApplyAssistMarker(Attacker, Unit, 10);
            });
        });
        ;
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        Position = SetVarInTable(this.Position);
        ForEachUnitInTargetArea(Owner, Position, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Owner, Unit, "Slow", 1, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
            PlayAnimation("Spell3", 0, Owner, true, false, true);
            ;
            totalDamage = GetTotalAttackDamage(Owner);
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            TeamID = GetTeamID(default);
            ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ;
                ;
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "EmpowerCleave", 3, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        ;
        ;
        ;
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ApplyDamage(Owner, Unit, 0 + this.DamageAmount, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.225, 1, false, false, Attacker);
            });
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        PauseAnimation(Owner, true);
        Pos = GetPointByUnitFacingOffset(Attacker, -75, 0);
        Distance = DistanceBetweenObjectAndPoint(Owner, Pos);
        ;
        Move(Owner, Pos, 0 + MS, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, KEEP_CURRENT_FACING);
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            TeamID = GetTeamID(default);
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
        });
        ;
        ;
        ;
        ;
        ;
        curTime = GetGameTime();
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            NextBuffVars.DamageToDeal = SetVarInTable(this.DamageToDeal);
            SpellBuffAdd(Owner, Attacker, "MordekaiserCOTGDot", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ;
        ;
        ;
        ;
        ;
        curTime = GetGameTime();
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        curTime = GetGameTime();
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Iterator) =>
            {
                NextBuffVars.DamagePerTick = SetVarInTable(this.DamagePerTick);
                SpellBuffAdd(Owner, Unit, "MordekaiserCreepingDeathDebuff", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, default, default, default, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Attacker, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                NextBuffVars.DamagePerTick = SetVarInTable(this.DamagePerTick);
                SpellBuffAdd(Unit, Attacker, "MordekaiserCreepingDeathDebuff", 100, 1, 0.001, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, true, false, false, default);
            });
        });
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            Level = GetLevel(Owner);
            ;
            ;
            SetBuffToolTipVar(1, 0 + ShieldMax);
            shieldPercent = SetVarInTable(VALUE_BY_LEVEL);
            SetBuffToolTipVar(2, 0 + shieldPercent);
            ;
            ;
            IncPAR(Owner, 0 + ShieldDecay);
            ;
            totalDamage = GetTotalAttackDamage(Owner);
            ;
            SetSpellToolTipVar(0 + bonusDamage, 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            ;
            SetSpellToolTipVar(0 + tooltipNumber, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(1, CharVars.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            NextBuffVars.healthRegen = SetVarInTable(VALUE_BY_LEVEL);
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions AffectHeroes AffectTurrets NotAffectSelf ", default, true, (Iterator) =>
            {
                SpellBuffAdd(Owner, Unit, "TechmaturgicalRepairBots", 1, 1, 1.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
            baseCooldown = SetVarInTable(25);
            ;
            ;
            ;
            SetSpellToolTipVar(0 + newCooldown, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ExecutePeriodically(3, this.LastTimeExecuted, false, () =>
        {
            BrushCheck = IsInBrush(Owner);
            ;
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.16, 1, false, false, Attacker);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
        });
        CurPosition = GetUnitPosition(Owner);
        LastPosition = SetVarInTable(this.LastPosition);
        Distance = DistanceBetweenPoints(CurPosition, LastPosition);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffRemoveCurrent(Owner);
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectBuildings AffectMinions AffectHeroes AffectTurrets ", default, true, (Iterator) =>
            {
                ApplyDamage(Attacker, Unit, 0 + this.TremDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 0, false, false, Attacker);
            });
        });
        Level = GetLevel(Owner);
        ShurikenDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + ShurikenDamage);
        SetBuffToolTipVar(2, 0 + FinalDamage);
        SetBuffToolTipVar(3, 0 + BonusDmgFromHP);
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            SpellEffectCreate(num, default, "shen_vorpalStar_lifetap_tar_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
            ;
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, default, (Iterator) =>
            {
                SpellBuffAdd(Owner, Unit, "ShenShadowDashPassive", 1, 1, 1.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            });
        });
        this.ArmorAmount = GetArmor(Owner);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0.14, 1, false, false, Attacker);
        });
        ;
        SpellBuffRemoveCurrent(Owner);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            TeamOfOwner = GetTeamID(default);
            TargetPos = SetVarInTable(this.TargetPos);
            ForEachUnitInTargetArea(Attacker, TargetPos, 280, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
            {
                ;
                ;
                ApplyDamage(Attacker, Unit, 0 + DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            });
            ForEachUnitInTargetArea(Attacker, TargetPos, 280, "AffectEnemies AffectNeutral AffectMinions ", default, true, (Iterator) =>
            {
                ;
                ;
                ;
                ApplyDamage(Attacker, Unit, 0 + DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            });
        });
        ;
        DamagePerTick = SetVarInTable(VALUE_BY_LEVEL);
        ExecutePeriodically(0.45, this.LastTimeExecuted, false, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.1, 1, false, false, Attacker);
            ;
        });
        ;
        NextBuffVars.APADBoost = SetVarInTable(VALUE_BY_LEVEL);
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
            {
                SpellBuffAdd(Owner, Unit, "SonaHymnofValorAuraB", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.75, this.LastTimeExecuted, true, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.DamageAmount, MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0.266, 1, false, false, Attacker);
        });
        ;
        NextBuffVars.MSBoost = SetVarInTable(VALUE_BY_LEVEL);
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
            {
                SpellBuffAdd(Owner, Unit, "SonaSongofDiscordAuraB", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
            });
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            tooltipAmount = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.DamageAura, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.1, 1, false, false, Attacker);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.ARMRBoost = SetVarInTable(VALUE_BY_LEVEL);
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
            {
                SpellBuffAdd(Owner, Unit, "SonaAriaofPerseveranceAuraB", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            TeamID = GetTeamID(default);
            TotalAttackDamage = GetTotalAttackDamage(Owner);
            ;
            ;
            ;
            ;
            ForEachUnitInTargetArea(Owner, Owner, 315, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ;
                ;
                ;
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            Count = SetVarInTable(0);
            ForEachUnitInTargetArea(Owner, Owner, 1400, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
            {
                CanSee = CanSeeTarget(Owner, Unit);
                ;
            });
            OwnerLevel = GetLevel(Owner);
            ;
            ;
            ;
        });
        NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
        TeamID = GetTeamID(default);
        Other1 = GetChampionBySkinName("Galio", TeamID ?? TEAM_UNKNOWN);
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Attacker, Owner, 175, "AffectFriends AffectMinions AffectHeroes ", "GalioRighteousGustMissile", false, (Iterator) =>
            {
                ;
            });
        });
        Level = GetLevel(Owner);
        this.HealAmount = SetVarInTable(VALUE_BY_LEVEL);
        SetBuffToolTipVar(1, 0 + this.HealAmount);
        Caster = SetBuffCasterUnit();
        ;
        DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        OwnerTeamID = GetTeamID(default);
        ;
        ;
        ;
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ;
                ApplyDamage(Attacker, Unit, 0 + FinalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
                SpellEffectCreate(this.ParticleID, default, "Viktor_ChaosStorm_beam.troy", default, TEAM_NEUTRAL, 10, 0, TEAM_UNKNOWN, Unit, false, Owner, "head", default, Unit, "spine", default, true, false, false, false, false, default, default);
                SpellEffectCreate(hi, default, "Viktor_ChaosStorm_hit.troy", default, TEAM_NEUTRAL, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, "root", default, Unit, default, default, true, false, false, false, false, default, default);
                ;
            });
        });
        ;
        ForNClosestUnitsInTargetArea(Owner, Owner, 2500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, true, default, (Iterator) =>
        {
            ;
            ;
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            OwnerPos = GetUnitPosition(Owner);
            ForEachUnitInTargetArea(Owner, OwnerPos, 25000, "AffectEnemies AffectFriends AffectMinions AffectUntargetable ", "ViktorChaosStormAOE", true, (Iterator) =>
            {
                ;
                ;
                ;
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 550, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "GalioIdolOfDurandMarker", false, (Iterator) =>
            {
                ApplyAssistMarker(Owner, Unit, 10);
                SpellBuffAdd(Owner, Unit, "GalioIdolOfDurandMarker", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
                ;
                ApplyTaunt(Owner, Unit, 1.5);
            });
        });
        this.TotalMR = GetSpellBlock(Owner);
        Caster = SetBuffCasterUnit();
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ApplyDamage(Caster, Owner, 0 + this.DamageForDot, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        Caster = SetBuffCasterUnit();
        OwnerTeam = GetTeamID(default);
        LaserPos = GetUnitPosition(Owner);
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Owner, LaserPos, 135, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ;
            });
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            tooltipAmount = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        ;
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            CurrentCrit = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 260, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ;
                ;
            });
        });
        ForEachUnitInTargetArea(Owner, Owner, 250, "AffectEnemies AffectFriends AffectNeutral AffectHeroes ", "OlafBerzerkerRage", true, (Iterator) =>
        {
            ;
        });
        NextBuffVars.AttackSpeedMod = SetVarInTable(this.AttackSpeedMod);
        NextBuffVars.ArmorMod = SetVarInTable(this.ArmorMod);
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Attacker, Owner, 1000, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
            {
                SpellBuffAdd(Attacker, Unit, "JarvanIVDemacianStandardBuff", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            });
        });
        OwnerLevel = GetLevel(Owner);
        ;
        Count = SetVarInTable(0);
        MaxMissiles = SetVarInTable(3);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
            ;
            ;
            ForEachUnitInTargetAreaRandom(Owner, Owner, 625, "AffectEnemies AffectHeroes ", default, true, 3, (Iterator) =>
            {
                Result = CanSeeTarget(Owner, Unit);
                ;
            });
            ForEachUnitInTargetAreaRandom(Owner, Owner, 625, "AffectEnemies AffectNeutral AffectMinions ", default, true, 3, (Iterator) =>
            {
                Result = CanSeeTarget(Owner, Unit);
                ;
            });
        });
        Caster = SetBuffCasterUnit();
        ;
        ExecutePeriodically(0.5, this.DamageManaTimer, false, () =>
        {
            ;
            TargetPos = SetVarInTable(this.TargetPos);
            ForEachUnitInTargetArea(Attacker, TargetPos, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                NextBuffVars.MovementSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
                ;
                ;
            });
        });
        ExecutePeriodically(0.75, this.SlowTimer, false, () =>
        {
            ;
            ;
            TargetPos = SetVarInTable(this.TargetPos);
            ;
            OwnerPos = GetUnitPosition(Owner);
            Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
            ;
        });
        FaceDirection(Owner, Attacker);
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.DamagePerHalfSecond, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.3, 1, false, false, Attacker);
        });
        DamageCap = SetVarInTable(this.DamageCap);
        DamagePerc = SetVarInTable(this.DamagePerc);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ;
                ;
                ;
                ;
                ;
                ;
                ApplyDamage(Attacker, Unit, 0 + HToDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                ;
                ;
            });
            ;
            SetBuffToolTipVar(1, 0 + this.CurrentDamageTotal);
        });
        FaceDirection(Owner, Attacker);
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        Caster = SetBuffCasterUnit();
        ;
        ExecutePeriodically(0.5, this.DamageManaTimer, false, () =>
        {
            ;
            TargetPos = SetVarInTable(this.TargetPos);
            ForEachUnitInTargetArea(Attacker, TargetPos, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                NextBuffVars.MovementSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
                ;
                ;
            });
        });
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ApplyDamage(Owner, Attacker, 0 + this.DamagePerHalfSecond, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.3, 1, false, false, Owner);
        });
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.DamagePerHalfSecond, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.3, 1, false, false, Attacker);
        });
        ExecutePeriodically(0.4, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        ExecutePeriodically(3, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "GateFix", 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        });
        ExecutePeriodically(2.675, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "GateFix", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.DoTDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.2, 1, false, false, Attacker);
        });
        ;
        SpellBuffRemoveCurrent(Owner);
        TargetPos = SetVarInTable(this.TargetPos);
        ;
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            CurrentLifesteal = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            tooltipAmount = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            tooltipAmount = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            tooltipAmount = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        ApplyDamage(Attacker, Owner, 0 + this.dotdmg, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.2, 1, false, false, Attacker);
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            Duration = GetBuffRemainingDuration(Owner, "OnTheHunt");
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", default, true, (Iterator) =>
            {
                ;
            });
        });
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            HealthCost = SetVarInTable(VALUE_BY_LEVEL);
            ;
            DamageToDeal = SetVarInTable(VALUE_BY_LEVEL);
            ;
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Level = SetVarInTable(this.Level);
        ForNClosestUnitsInTargetArea(Owner, Owner, 550, "AffectEnemies AffectHeroes ", 3, true, default, (Iterator) =>
        {
            SpellCast(Owner, Unit, Owner, Owner, false, 0, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        });
        ExecutePeriodically(1.05, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            TeamID = GetTeamID(default);
            ;
            ApplyDamage(Attacker, Owner, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        ExecutePeriodically(0.95, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Attacker, Owner, 150, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                SpellBuffAdd(Attacker, Unit, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ForEachUnitInTargetArea(Owner, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        ;
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
        ExecutePeriodically(0.5, this.DamagePulse, true, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ApplyDamage(Attacker, Unit, 0 + this.DamageTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                ;
                IncHealth(Owner, 0 + HealAmount, Owner);
            });
        });
        ExecutePeriodically(0.25, this.SlowPulse, true, () =>
        {
            Duration = GetBuffRemainingDuration(Owner, "VladimirSanguinePool");
            SkinID = GetSkinID(Owner);
            ;
            ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        ;
        ;
        ;
        ;
        ExecutePeriodically(2, this.LastTimeExecuted, false, () =>
        {
            ;
            SetBuffToolTipVar(1, 0 + DmgMultTooltip);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 425, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ;
                ;
            });
        });
        ;
        ;
        ;
        ExecutePeriodically(15, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ExecutePeriodically(2, this.LastTimeExecuted, false, () =>
        {
            ;
            SetBuffToolTipVar(1, 0 + this.VampPercentTooltip);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ApplyDamage(Attacker, Owner, 0 + damageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        });
        SpellBuffRemoveCurrent(Owner);
        Attacker = SetBuffCasterUnit();
        CenterPosition = SetVarInTable(this.CastPosition);
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpell(Owner, 0, ExtraSlots, SPELLBOOK_CHAMPION, "CannonBarrageBall");
        SpellCast(Owner, Nothing, CannonPosition, CannonPosition, false, 0, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
        NextBuffVars.AttackSpeedMod = SetVarInTable(this.AttackSpeedMod);
        ForEachUnitInTargetArea(Attacker, CenterPosition, 580, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Attacker, Owner, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Iterator) =>
            {
                ApplyDamage(Attacker, Unit, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0.1, default, default, default, default);
                DebugSay(Unit, "YO!", default);
                ApplyStun(Attacker, Unit, 10);
                SpellEffectCreate(hi1, default, default, default, default, default, 0, TEAM_UNKNOWN, Owner, false, Unit, "L_foot", default, Unit, default, default, default, default, default, default, default, default, default);
                SpellEffectCreate(hi2, default, default, default, default, default, 0, TEAM_UNKNOWN, Owner, false, Unit, "R_foot", default, Unit, default, default, default, default, default, default, default, default, default);
            });
        });
        ExecutePeriodically(20, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ExecutePeriodically(0.5, this.DamageManaTimer, false, () =>
        {
            ;
            TargetPos = SetVarInTable(this.TargetPos);
            ;
            ;
            ForEachUnitInTargetArea(Attacker, TargetPos, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ApplyDamage(Attacker, Unit, 0 + this.DamagePerLevel, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.125, 1, false, false, Attacker);
                NextBuffVars.AttackSpeedMod = SetVarInTable(-0.2);
                NextBuffVars.MovementSpeedMod = SetVarInTable(-0.2);
                SpellBuffAdd(Attacker, Unit, "Chilled", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.25, this.SlowTimer, false, () =>
        {
            ;
            ;
            TargetPos = SetVarInTable(this.TargetPos);
            ;
            OwnerPos = GetUnitPosition(Owner);
            Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
            ;
            ForEachUnitInTargetArea(Attacker, TargetPos, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                NextBuffVars.AttackSpeedMod = SetVarInTable(-0.2);
                NextBuffVars.MovementSpeedMod = SetVarInTable(-0.2);
                SpellBuffAdd(Attacker, Unit, "Chilled", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            SpellEffectCreate(this.AmbientParticle, default, "cryo_storm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
            ;
            ;
        });
        ;
        TeamID = GetTeamID(default);
        ;
        ExecutePeriodically(2.5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
        });
        ;
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            tooltipAmount = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        ExecutePeriodically(10, this.LastTimeExecuted, false, () =>
        {
            AttackDamage = GetTotalAttackDamage(Owner);
            ;
            ;
            ;
            SetBuffToolTipVar(2, 0 + PassiveAD);
        });
        ReduceShield(Owner, 0 + this.amountToSubtract, true, true);
        ;
        this.amountToSubtract = SetVarInTable(0);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        ForEachUnitInTargetArea(Owner, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", false, (Iterator) =>
        {
            ShouldHit = SetVarInTable(true);
            Visible = CanSeeTarget(Owner, Unit);
            ;
            this.HitUnit = SetVarInTable(true);
            ;
            ;
            ;
            SpellBuffAdd(Owner, Unit, "RenektonTargetSliced", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ;
            ;
            ;
            ;
            ;
        });
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        TargetPos = SetVarInTable(this.TargetPos);
        ForEachUnitInTargetArea(Owner, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            Distance = DistanceBetweenObjectAndPoint(Unit, TargetPos);
            ;
            FaceDirection(Unit, TargetPos);
            Position = GetPointByUnitFacingOffset(Unit, 0 + Distance, 0);
            NextBuffVars.Gravity = SetVarInTable(10);
            NextBuffVars.Speed = SetVarInTable(1000);
            NextBuffVars.Position = SetVarInTable(Position);
            NextBuffVars.IdealDistance = SetVarInTable(Distance);
            ;
        });
        Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        ForEachUnitInTargetArea(Owner, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", false, (Iterator) =>
        {
            ShouldHit = SetVarInTable(true);
            Visible = CanSeeTarget(Owner, Unit);
            ;
            this.HitUnit = SetVarInTable(true);
            ;
            ;
            ;
            SpellBuffAdd(Owner, Unit, "RenektonTargetSliced", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ;
            ;
            ;
            ;
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            IncPAR(Owner, -3);
            ;
            ;
        });
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            Level = SetVarInTable(this.Level);
            ;
            IncPAR(Owner, 0 + VALUE_BY_LEVEL);
            ;
            ForEachUnitInTargetArea(Owner, Owner, 375, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
            {
                ApplyDamage(Owner, Unit, 0 + this.BurnDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Owner);
            });
            ForEachUnitInTargetArea(Owner, Owner, 375, "AffectEnemies AffectNeutral AffectMinions ", default, true, (Iterator) =>
            {
                ApplyDamage(Owner, Unit, 0 + this.BurnDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Owner);
            });
            SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ;
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        CurPos = GetPointByUnitFacingOffset(Owner, 25, 180);
        Distance = DistanceBetweenPoints(CurPos, this.LastPosition);
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ;
            });
            ;
        });
        ForEachUnitInTargetArea(Attacker, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ApplyDamage(Attacker, Unit, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
                TeamID = GetTeamID(default);
                SpellEffectCreate(a, default, "shyvana_scorchedEarth_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            });
            ;
        });
        ;
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            SpellEffectCreate(a, default, "Udyr_Phoenix_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
            ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ;
                ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.25, 0, false, false, Attacker);
            });
        });
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.DotDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0, 0, false, false, Attacker);
        });
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            IncHealth(Owner, 0 + this.HealthTick, Owner);
            SpellEffectCreate(arr, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        ;
        ExecutePeriodically(2, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        TargetPos = SetVarInTable(this.TargetPos);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.MRminus = SetVarInTable(this.MRminus);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Attacker, TargetPos, 280, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Iterator) =>
            {
                ApplyDamage(Attacker, Unit, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
                SpellBuffAdd(Attacker, Unit, "TormentedSoilDebuff", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
                SpellEffectCreate(hi1, default, "FireFeet_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "L_foot", default, Unit, default, default, false, false, false, false, false, default, default);
                SpellEffectCreate(hi2, default, "FireFeet_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "R_foot", default, Unit, default, default, false, false, false, false, false, default, default);
            });
        });
        ExecutePeriodically(5, this.LastTimeExecuted, true, () =>
        {
            TotalAttackDamage = GetTotalAttackDamage(Owner);
            ;
            ;
            ;
            ;
            SetSpellToolTipVar(0 + DamageToDisplay, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            ;
            ;
            SetSpellToolTipVar(0 + BonusAD20, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ;
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
            ;
        });
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Attacker, Owner, 360, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
            SetBuffToolTipVar(2, 0 + BaseDamage);
            BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
            ;
            ;
            ;
            SetBuffToolTipVar(3, 0 + Damage);
        });
        Caster = SetBuffCasterUnit();
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.TickDamage, MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0, 0, false, false, Attacker);
            SpellBuffAdd(Attacker, Attacker, "OrianaPowerDagger", 3, 1, 6, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Attacker, Owner, 120, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                NextBuffVars.TickDamage = SetVarInTable(this.TickDamage);
                SpellBuffAdd(Attacker, Unit, "OrianaDoT", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        TeamID = GetTeamID(default);
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.DamageSecond, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0, 1, false, false, Attacker);
            IncHealth(Attacker, 0 + this.DamageSecond, Attacker);
        });
        targetPos = SetVarInTable(this.targetPos);
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Attacker, targetPos, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "OrianaShock", false, (Iterator) =>
            {
                ;
                SpellBuffAdd(Attacker, Unit, "OrianaSlow", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
            });
            ForEachUnitInTargetArea(Attacker, targetPos, 225, "AffectFriends AffectMinions AffectHeroes ", "OrianaShock", false, (Iterator) =>
            {
                ;
                SpellBuffAdd(Attacker, Unit, "OrianaHaste", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(0.1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        CasterID = GetTeamID(default);
        ;
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            CurPos = GetPointByUnitFacingOffset(Owner, 0, 0);
            Distance = DistanceBetweenPoints(this.LastPosition, CurPos);
            ;
        });
        TeamID = GetTeamID(default);
        ExecutePeriodically(0.75, this.LastTimeExecuted, true, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.BaseDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.25, 0, false, false, Attacker);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted3, true, () =>
        {
            ;
            ;
            ;
        });
        ExecutePeriodically(2, this.LastTimeExecuted4, false, () =>
        {
            this.Feared = SetVarInTable(true);
            ApplyFear(Attacker, Owner, 0 + this.FearDuration);
            SpellEffectCreate(asdf, default, "NocturneUnspeakableHorror_fear.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, true, false, false, false, false, default, default);
            SpellBuffRemove(Owner, "NocturneUnspeakableHorror", Attacker, 0);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ;
            BaseMagic = SetVarInTable(VALUE_BY_LEVEL);
            ;
            ;
            ;
            BasePercent = SetVarInTable(VALUE_BY_LEVEL);
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ApplyDamage(Attacker, Owner, 0 + TotalDamage, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        });
        TeamID1 = GetTeamID(default);
        ;
        ;
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            SunlightDamage = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        ;
        Attacker = SetBuffCasterUnit();
        ;
        ;
        ;
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            DamageByRank = SetVarInTable(VALUE_BY_LEVEL);
            totalAttackDamage = GetTotalAttackDamage(Owner);
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectBuildings AffectMinions AffectHeroes AffectTurrets ", default, true, (Iterator) =>
            {
                ;
                ;
                ;
                ;
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.TickDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        ExecutePeriodically(0.1, this.LastTimeExecuted, true, () =>
        {
            OwnerPos = GetUnitPosition(Owner);
            TargetPos = GetUnitPosition(Attacker);
            TeamID = GetTeamID(default);
            Other2 = SpawnMinion("enemy", "TestCubeRender", "idle.lua", TargetPos, TeamID ?? TEAM_NEUTRAL, true, true, false, true, true, true, 0, default, true, Nothing, default);
            SpellBuffAdd(Owner, Other2, "UrgotSwapMarker", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            FaceDirection(Other2, OwnerPos);
            TargetOffsetPos = GetPointByUnitFacingOffset(Other2, 80, 90);
            Other3 = SpawnMinion("ownerMinion", "TestCubeRender", "idle.lua", OwnerPos, TeamID ?? TEAM_NEUTRAL, true, true, false, true, true, true, 0, default, true, Nothing, default);
            SpellBuffAdd(Owner, Other3, "UrgotSwapMarker", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            FaceDirection(Other3, TargetPos);
            OwnerOffset = GetPointByUnitFacingOffset(Other3, 80, 90);
            SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "UrgotSwapMissile");
            SpellCast(Owner, Attacker, TargetPos, TargetPos, true, 7, ExtraSlots, 1, true, true, false, false, false, OwnerOffset);
            SetSpell(Attacker, 7, ExtraSlots, SPELLBOOK_CHAMPION, "UrgotSwapMissile2");
            SpellCast(Attacker, Owner, OwnerPos, OwnerPos, true, 7, ExtraSlots, 1, true, true, false, false, false, TargetOffsetPos);
            SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        ExecutePeriodically(0, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ;
        ExecutePeriodically(1.9, this.LastTimeExecuted, false, () =>
        {
            IncHealth(Owner, 0 + this.HealAmount, Owner);
        });
        ForNClosestUnitsInTargetArea(Owner, this.MissilePosition, 150, "AffectEnemies AffectHeroes ", 1, true, default, (Iterator) =>
        {
            Duration = GetBuffRemainingDuration(Owner, "FizzMarinerDoomMissile");
            SpellEffectRemove(this.Temp);
            SpellEffectRemove(this.Temp2);
            SpellEffectRemove(this.Temp3);
            SpellEffectRemove(this.Temp4);
            SpellBuffAdd(Owner, Unit, "FizzMarinerDoomBomb", 1, 1, 0 + Duration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
            this.Exploded = SetVarInTable(true);
            SpellBuffRemoveCurrent(Owner);
        });
        ExecutePeriodically(5, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            DamageByRank = SetVarInTable(VALUE_BY_LEVEL);
            totalAttackDamage = GetTotalAttackDamage(Owner);
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            SetBuffToolTipVar(1, 0 + CurrentDamage);
            SetBuffToolTipVar(2, 0 + DamageByRank);
            SetBuffToolTipVar(3, 0 + abilityPowerToAdd);
        });
        ReadyNew = SetVarInTable(false);
        CriticalNew = SetVarInTable(false);
        ;
        ;
        ;
        ;
        ReadyNew = SetVarInTable(false);
        CriticalNew = SetVarInTable(false);
        ;
        ;
        ;
        ;
        ExecutePeriodically(2, this.LastTimeExecuted, true, () =>
        {
            totalAD = GetTotalAttackDamage(Owner);
            ;
            ;
            ;
            ;
            SetBuffToolTipVar(1, 0 + critDisplay);
            SetSpellToolTipVar(0 + bonusDamage, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        targetPos = SetVarInTable(this.targetPos);
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Attacker, targetPos, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                NextBuffVars.SlowPercent = SetVarInTable(this.SlowPercent);
                SpellBuffAdd(Attacker, Unit, "KogMawVoidOozeSlow", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ;
            ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectHeroes ", default, true, (Iterator) =>
            {
                NextBuffVars.MovementSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
                SpellBuffAdd(Attacker, Unit, "GravesSmokeGrenadeBoomSlow", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, true, false, default);
                ;
                ;
            });
        });
        ExecutePeriodically(0.1, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "SlashBeenHit", false, (Iterator) =>
            {
                ;
                SpellBuffAdd(Owner, Unit, "SlashBeenHit", 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
                ;
                ApplyDamage(Attacker, Unit, 0 + this.Damage, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 0, false, true, Attacker);
                SpellEffectCreate(particle, default, "BloodSlash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, false, false, default, default);
                ;
                ;
            });
        });
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        SetBuffToolTipVar(1, 0 + CharVars.ArmorAmount);
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
            SetBuffToolTipVar(1, 0 + Total);
        });
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            Pos = GetPointByUnitFacingOffset(Owner, 300, -15);
            SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 1, true, true, false, default, default, default);
            Pos = GetPointByUnitFacingOffset(Owner, 300, 0);
            SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 1, true, true, false, default, default, default);
            Pos = GetPointByUnitFacingOffset(Owner, 300, 5);
            SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 1, true, true, false, default, default, default);
            Pos = GetPointByUnitFacingOffset(Owner, 300, -5);
            SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 1, true, true, false, default, default, default);
            Pos = GetPointByUnitFacingOffset(Owner, 300, 10);
            SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 1, true, true, false, default, default, default);
            Pos = GetPointByUnitFacingOffset(Owner, 300, -10);
            SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 1, true, true, false, default, default, default);
            Pos = GetPointByUnitFacingOffset(Owner, 300, 15);
            SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 1, true, true, false, default, default, default);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            SpellEffectCreate(this.GatlingEffect, default, "corki_gatlin_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
            Pos = GetPointByUnitFacingOffset(Owner, 300, 0);
            SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, false, default);
        });
        CurrentPos = GetUnitPosition(Owner);
        ExecutePeriodically(3.25, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ;
        ;
        ExecutePeriodically(0.1, this.LastTimeExecuted, false, () =>
        {
            Pos = SetVarInTable(this.Pos);
            NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
            NextBuffVars.ArmorMod = SetVarInTable(this.ArmorMod);
            ForEachUnitInTargetArea(Attacker, Pos, 75, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "WallofPainTarget", false, (Iterator) =>
            {
                ;
                ;
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Attacker, Owner, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Iterator) =>
            {
                ApplyDamage(Attacker, Unit, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0.1, default, default, default, default);
                SpellEffectCreate(hi1, default, default, default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "L_foot", default, Unit, default, default, false, default, default, default, default, default, default);
                SpellEffectCreate(hi2, default, default, default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "R_foot", default, Unit, default, default, false, default, default, default, default, default, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            DamageToDeal = SetVarInTable(VALUE_BY_LEVEL);
            ForEachUnitInTargetArea(Owner, Owner, 550, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ApplyDamage(Attacker, Unit, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.25, 1, false, false, Attacker);
            });
        });
        ;
        ForEachUnitInTargetArea(Attacker, Owner, 0 + this.AreaRadius, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            NextBuffVars.DamagePerTick = SetVarInTable(this.DamagePerTick);
            SpellBuffAdd(Attacker, Unit, "CassiopeiaMiasmaPoison", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Poison, 1, true, false, false, default);
            NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
            SpellBuffAdd(Attacker, Unit, "Slow", 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, true, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ApplyDamage(Attacker, Target, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.15, 1, false, false, Attacker);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ApplyDamage(Attacker, Target, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 1, false, false, Attacker);
        });
        ;
        ;
        TickDuration = SetVarInTable(this.TickDuration);
        ExecutePeriodically(0, this.LastTimeExecuted, true, () =>
        {
            DamagePerTick = SetVarInTable(VALUE_BY_LEVEL);
            ;
            ;
            NextBuffVars.DamagePerTick = SetVarInTable(DamagePerTick);
            BombPos = GetUnitPosition(Owner);
            TeamOfOwner = GetTeamID(default);
            Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", BombPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, false, 0, default, true, Owner, default);
            SpellBuffAdd(Attacker, Other3, "DangerZone", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        });
        ;
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 575, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                NextBuffVars.MovementSpeedMod = SetVarInTable(this.MovementSpeedMod);
                NextBuffVars.AttackSpeedMod = SetVarInTable(this.AttackSpeedMod);
                SpellBuffAdd(Owner, Unit, "AbsoluteZeroSlow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            });
        });
        CharVars.LifeTime = SetVarInTable(LifeTime);
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            ;
            this.BurnDmg = SetVarInTable(VALUE_BY_LEVEL);
            ApplyDamage(Attacker, Owner, 0 + this.BurnDmg, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.1, 0, false, false, Attacker);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            Pos = GetPointByUnitFacingOffset(Owner, 300, 0);
            NextBuffVars.DangerZone = SetVarInTable(this.DangerZone);
            ;
            ;
            ;
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            MissilePosition = SetVarInTable(this.MissilePosition);
            ForEachUnitInTargetArea(Attacker, MissilePosition, 205, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                SpellBuffAdd(Attacker, Unit, "RumbleCarpetBombSlow", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
                TeamOfOwner = GetTeamID(default);
                ;
                ;
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            ;
            this.BurnDmg = SetVarInTable(VALUE_BY_LEVEL);
            ApplyDamage(Attacker, Owner, 0 + this.BurnDmg, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.1, 0, false, false, Attacker);
        });
        ;
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Attacker, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
                NextBuffVars.AttackSpeedMod = SetVarInTable(this.AttackSpeedMod);
                SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
                ApplyDamage(Attacker, Unit, 0 + this.TotalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.114, 1, false, false, Attacker);
                SpellEffectCreate(asdf, default, "missFortune_makeItRain_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, default, default, default, default);
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
            ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ApplyDamage(Attacker, Unit, 0 + BurnDmg, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            });
        });
        ExecutePeriodically(5, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            this.punchdmg = SetVarInTable(VALUE_BY_LEVEL);
            SetBuffToolTipVar(1, 0 + this.punchdmg);
        });
        ExecutePeriodically(5, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            this.punchdmg = SetVarInTable(VALUE_BY_LEVEL);
            SetBuffToolTipVar(1, 0 + this.punchdmg);
        });
        ;
        OffsetAngle = GetOffsetAngle(Owner, Attacker);
        ;
        CenterPoint = GetPointByUnitFacingOffset(Owner, 0 + HalfDistance, 0 + OffsetAngle);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            ;
            HeatDecay = SetVarInTable(-5);
            BonusHeatDecay = SetVarInTable(-5);
            ;
            ;
            ;
            ;
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            IncPAR(Owner, -10);
            ;
            ;
            SpellBuffAdd(Attacker, Target, "RumbleHeatingUp", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            Level = GetLevel(Owner);
            this.punchdmg = SetVarInTable(VALUE_BY_LEVEL);
            SetBuffToolTipVar(1, 0 + this.punchdmg);
        });
        ;
        OffsetAngle = GetOffsetAngle(Attacker, Owner);
        ;
        CenterPoint = GetPointByUnitFacingOffset(Attacker, 0 + HalfDistance, 0 + OffsetAngle);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            CharVars.tooltipAmount = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ApplyDamage(Attacker, Unit, 0 + this.FinalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
            });
        });
        ;
        ForEachUnitInTargetArea(Owner, Owner, 250, "AffectEnemies AffectFriends AffectNeutral AffectHeroes ", "OlafBerzerkerRage", true, (Iterator) =>
        {
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ApplyDamage(Attacker, Owner, 0 + PercentDamage, MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0, default, false, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
            ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ;
                ;
                ;
                ;
                ApplyDamage(Attacker, Unit, 0 + PercentDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            NextBuffVars.LifeLossPercent = SetVarInTable(CharVars.LifeLossPercent);
            ;
            ;
            CharVars.LastLifeLossPercent = SetVarInTable(CharVars.LifeLossPercent);
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            tooltipAmount = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            Level = GetLevel(Owner);
            CurrentHeal = SetVarInTable(VALUE_BY_LEVEL);
            ManaAmount = SetVarInTable(VALUE_BY_LEVEL);
            ;
        });
        SpellBuffRemoveCurrent(Owner);
        Zombie = GetIsZombie(Owner);
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ;
        });
        ;
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        TeamID = GetTeamID(default);
        ;
        ;
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ApplyDamage(Owner, Owner, 0 + MaxHealth, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        });
        ExecutePeriodically(2, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
            SetBuffToolTipVar(1, 0 + ADFromAP);
            SetBuffToolTipVar(2, 0 + HealthFromAP);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
            ForEachUnitInTargetArea(Attacker, Owner, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                SpellBuffAdd(Attacker, Unit, "YorickDecayedAuraSlow", 100, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            NearbyChampion = SetVarInTable(false);
            CheckBuilding = SetVarInTable(true);
            ForNClosestUnitsInTargetArea(Owner, Attacker, 850, "AffectEnemies AffectHeroes ", 1, true, default, (Iterator) =>
            {
                ApplyTaunt(Unit, Attacker, 1.5);
                NearbyChampion = SetVarInTable(true);
                CheckBuilding = SetVarInTable(false);
            });
            ;
            ;
        });
        ;
        ExecutePeriodically(0.1, this.LastTimeExecuted, false, () =>
        {
            Pos = SetVarInTable(this.Pos);
            ForEachUnitInTargetArea(Attacker, Pos, 75, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ;
                ;
            });
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ForNClosestUnitsInTargetArea(Owner, Attacker, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, true, "YorickRavenousPrimaryTarget", (Iterator) =>
            {
                ApplyTaunt(Unit, Attacker, 1.5);
            });
            ;
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ForNClosestUnitsInTargetArea(Owner, Attacker, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, true, "YorickSpectralPrimaryTarget", (Iterator) =>
            {
                ApplyTaunt(Unit, Attacker, 1.5);
            });
            ;
            ;
        });
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ApplyDamage(Owner, Owner, 0 + MaxHealth, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        });
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ApplyDamage(Owner, Owner, 0 + MaxHealth, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        });
        ExecutePeriodically(0.95, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
            ;
            ;
            ;
        });
        ExecutePeriodically(0.95, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
            ;
            ;
            ;
        });
        ;
        ExecutePeriodically(0.95, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
            ;
            ;
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetAreaAddBuff(Owner, Owner, 850, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", Attacker, "BeaconAuraNoParticle", BUFF_RENEW_EXISTING, BUFF_Aura, 1, 1, 1.1, "NextBuffVars", 0, false, true);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetAreaAddBuff(Owner, Owner, 850, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", Attacker, "BeaconAuraNoParticleAP", BUFF_RENEW_EXISTING, BUFF_Aura, 1, 1, 1.1, "NextBuffVars", 0, false, true);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ApplyDamage(Attacker, Owner, 0 + this.TickDamage, TRUE_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            IncPAR(Owner, -1);
        });
        ;
        ExecutePeriodically(0.3, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        ;
        ExecutePeriodically(3, this.LastTimeExecuted, true, () =>
        {
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(2, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            IncPAR(Owner, -1);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ;
        ;
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        ExecutePeriodically(0.4, this.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetAreaRandom(Owner, Owner, 800, "AffectEnemies AffectHeroes ", "Stealth", false, 1, (Iterator) =>
            {
                SpellBuffAdd(Attacker, Unit, "WrathDamage", 1, 1, 0.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, true, () =>
        {
            ForEachUnitInTargetArea(Attacker, this.TargetPos, 550, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
            {
                SpellBuffAdd(Attacker, Unit, "OdinLightbringer", 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
            ;
            ;
        });
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            IncPAR(Owner, -1);
        });
        ExecutePeriodically(3, this.LastTimeExecuted, true, () =>
        {
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
            ;
            IncHealth(Owner, 0 + healthToRestore, Owner);
        });
        ;
        ExecutePeriodically(5, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ;
        ;
        ;
        ExecutePeriodically(0.3, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
    }
    public void PreLoad()
    {
        PreloadParticle("executionerscalling_cas.troy");
        PreloadSpell("root");
        PreloadParticle("executionerscalling_tar.troy");
        PreloadSpell("internal_50ms");
        PreloadSpell("grievouswound");
        PreloadSpell("exaltedwithbaronnashor");
        PreloadSpell("cannonballstun");
        PreloadSpell("slow");
        PreloadSpell("trailblazertarget");
        PreloadSpell("callforhelp");
        PreloadParticle("teleportarrive.troy");
        PreloadCharacter("testcube");
        PreloadSpell("trailblazerapplicator");
        PreloadSpell("masterybutcherbuff");
        PreloadSpell("stun");
        PreloadSpell("zhonyasring");
        PreloadSpell("zhonyasring");
        PreloadSpell("recallimproved");
        PreloadSpell("odinrecallimproved");
        PreloadSpell("nimbleness");
        PreloadSpell("masteryhoardbuff");
        PreloadSpell("burningembers");
        PreloadSpell("monsterbuffs2");
        PreloadSpell("monsterbuffs");
        PreloadSpell("burningembers");
        PreloadSpell("monsterbuffs");
        PreloadSpell("masteryinitiatebuff");
        PreloadSpell("masteryimprovedrecallbuff");
        PreloadSpell("ardor");
        PreloadSpell("masteryblastbuff");
        PreloadSpell("masterysiegecommanderbuff");
        PreloadSpell("masterybountyhunterbuff");
        PreloadSpell("masteryscholarbuff");
        PreloadSpell("offensivemasterybuff");
        PreloadSpell("strengthofspirit");
        PreloadSpell("masteryjuggernautbuff");
        PreloadParticle("regen_rune_buf.troy");
        PreloadSpell("crestofnaturesfury");
        PreloadSpell("hpbyplayerlevel");
        PreloadSpell("hpbyplayerlevel");
        PreloadSpell("burning");
        PreloadParticle("invis_runes_01.troy");
        PreloadSpell("crestofflowingwater");
        PreloadSpell("hpbyplayerlevel");
        PreloadSpell("lifestealattack");
        PreloadParticle("eternalthirst_buf.troy");
        PreloadParticle("eternalthirst_buf.troy");
        PreloadSpell("dragonapplicator");
        PreloadSpell("hpbyplayerlevel");
        PreloadSpell("resistantskindragon");
        PreloadParticle("speed_runes_01.troy");
        PreloadSpell("globalmonsterbuff");
        PreloadSpell("regenerationruneaura");
        PreloadSpell("crestoftheancientgolem");
        PreloadParticle("neutralmonster_buf.troy");
        PreloadParticle("neutralmonster_buf_blue_defense.troy");
        PreloadSpell("globalmonsterbuff");
        PreloadSpell("lifestealattack");
        PreloadParticle("eternalthirst_buf.troy");
        PreloadSpell("blessingofthelizardelder");
        PreloadSpell("hpbyplayerlevel");
        PreloadSpell("staticfield");
        PreloadSpell("manabarriercooldown");
        PreloadSpell("manabarrier");
        PreloadSpell("root");
        PreloadSpell("manabarriericon");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("odindisintegrate");
        PreloadParticle("nashor_rune_buf.troy");
        PreloadParticle("innervatinglocket_itm.troy");
        PreloadSpell("wormrecouperateon");
        PreloadSpell("wormrecoupdebuff");
        PreloadSpell("resistantskin");
        PreloadSpell("wormrecouperateon");
        PreloadSpell("wrathtimer");
        PreloadSpell("sweeptimer");
        PreloadSpell("propeltimer");
        PreloadSpell("actiontimer2");
        PreloadSpell("actiontimer");
        PreloadSpell("wrathcooldown");
        PreloadSpell("wormrecouperate1");
        PreloadSpell("wormrecoupdebuff");
        PreloadParticle("neutralmonster_buf_red_offense.troy");
        PreloadSpell("burning");
        PreloadSpell("slow");
        PreloadSpell("globalmonsterbuff");
        PreloadSpell("blessingofthelizardelder");
        PreloadSpell("wormrecoupdebuff");
        PreloadSpell("wormrecouperate1");
        PreloadParticle("neutralmonster_buf_red_offense.troy");
        PreloadParticle("clairvoyanceeyelong.troy");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("monsterbuffs");
        PreloadSpell("monsterbuffs2");
        PreloadSpell("blessingofthelizardelder_twisted");
        PreloadSpell("burning");
        PreloadSpell("judicatorrighteousfury");
        PreloadSpell("slow");
        PreloadSpell("blessingofthelizardelder");
        PreloadParticle("neutralmonster_buf.troy");
        PreloadSpell("lifestealattack");
        PreloadSpell("globalmonsterbuff");
        PreloadSpell("regenerationruneaura");
        PreloadSpell("globalmonsterbuff");
        PreloadSpell("crestoftheancientgolem");
        PreloadSpell("globalmonsterbuff");
        PreloadSpell("fireofthegreatdragon");
        PreloadSpell("monsterbuffs");
        PreloadSpell("monsterbuffs2");
        PreloadSpell("crestofcrushingwrath");
        PreloadSpell("hpbyplayerlevel");
        PreloadSpell("dragonburning");
        PreloadSpell("resistantskindragon");
        PreloadParticle("twistedtreelineclairvoyance.troy");
        PreloadSpell("dragonvisionbuff");
        PreloadSpell("burning");
        PreloadSpell("globalmonsterbuff");
        PreloadSpell("regenerationruneaura");
        PreloadSpell("globalmonsterbuff");
        PreloadParticle("vampheal.troy");
        PreloadParticle("meditate_eff.troy");
        PreloadSpell("globalmonsterbuff");
        PreloadSpell("globalmonsterbuff");
        PreloadSpell("odinsuperminion");
        PreloadSpell("odinshieldrelic");
        PreloadSpell("odinshieldrelicaura");
        PreloadSpell("odinshieldrelicbuff");
        PreloadSpell("odinshieldrelicbuffheal");
        PreloadSpell("odinquestbuff");
        PreloadCharacter("odinquestbuff");
        PreloadSpell("odinquestbuffparticle");
        PreloadSpell("OdinOpeningBarrierBasicAttack");
        PreloadSpell("OdinOpeningBarrierBasicAttack2");
        PreloadSpell("OdinOpeningBarrierBasicAttack3");
        PreloadSpell("OdinOpeningBarrier");
        PreloadSpell("OdinOpeningBarrierParticle");
        PreloadSpell("odinminion");
        PreloadSpell("odinminion");
        PreloadSpell("odinturretdamage");
        PreloadSpell("turretbonus");
        PreloadSpell("turretbonushealth");
        PreloadSpell("callforhelpmanager");
        PreloadSpell("odinguardianbuff");
        PreloadSpell("odinguardianui");
        PreloadSpell("turretdamagemanager");
        PreloadSpell("odinplayerbuff");
        PreloadSpell("odinguardianstatsbylevel");
        PreloadSpell("odinminionportal");
        PreloadSpell("odinturretdamage");
        PreloadSpell("turretbonus");
        PreloadSpell("turretbonushealth");
        PreloadSpell("callforhelpmanager");
        PreloadSpell("odinbombbuff");
        PreloadSpell("odinguardianbuff");
        PreloadSpell("odinquestindicator");
        PreloadCharacter("odinquestindicator");
        PreloadSpell("odinquestparticleremover");
        PreloadSpell("odinsuperminion");
        PreloadSpell("odinspeedshrineaura");
        PreloadSpell("odinparticlephbuff");
        PreloadSpell("odinminionportal");
        PreloadSpell("galioidolofdurandmarker");
        PreloadParticle("galio_taunt_unit_indicator.troy");
        PreloadSpell("shenshadowdashcooldown");
        PreloadParticle("global_taunt_multi_unit.troy");
        PreloadParticle("shen_shadowdash_unit_impact.troy");
        PreloadSpell("puncturingtauntarmordebuff");
        PreloadParticle("global_taunt.troy");
        PreloadSpell("slow");
        PreloadParticle("globalfear_surprise.troy");
        PreloadParticle("party_hornconfetti_instant.troy");
        PreloadParticle("global_fear.troy");
        PreloadSpell("stealth");
        PreloadParticle("fallenone_nova.troy");
        PreloadSpell("internal_50ms");
        PreloadParticle("teleporthomeimproved.troy");
        PreloadParticle("teleportarrive.troy");
        PreloadParticle("teleporthome.troy");
        PreloadParticle("teleportarrive.troy");
        PreloadSpell("recall");
        PreloadParticle("summoner_enemy_capture_buf_01.troy");
        PreloadParticle("summoner_enemy_capture_buf_02.troy ");
        PreloadParticle("summoner_flash.troy");
        PreloadParticle("summoner_cast.troy");
        PreloadParticle("summoner_cast.troy");
        PreloadSpell("fortifybuff");
        PreloadSpell("fortifybuff");
        PreloadParticle("summoner_ally_capture_buf_01.troy");
        PreloadParticle("summoner_ally_capture_buf_02.troy");
        PreloadParticle("summoner_capture_pulse.troy");
        PreloadParticle("ezreal_essenceflux_tar.troy");
        PreloadSpell("root");
        PreloadParticle("summoner_cast.troy");
        PreloadSpell("summonerodingarrisondebuff");
        PreloadParticle("summoner_flashback.troy");
        PreloadParticle("summoner_cast.troy");
        PreloadParticle("summoner_flash.troy");
        PreloadSpell("summonerteleport");
        PreloadParticle("teleport_target.troy");
        PreloadSpell("teleport_turret");
        PreloadSpell("teleport_target");
        PreloadParticle("summoner_cast.troy");
        PreloadParticle("summoner_teleport.troy");
        PreloadSpell("teleportcancel");
        PreloadParticle("summoner_teleportarrive.troy");
        PreloadSpell("summonerteleport");
        PreloadSpell("teleport_turret");
        PreloadSpell("teleport_target");
        PreloadSpell("teleport_deathremoval");
        PreloadSpell("destealth");
        PreloadParticle("summoner_cast.troy");
        PreloadParticle("summoner_mana.troy");
        PreloadParticle("summoner_cast.troy");
        PreloadSpell("summonerhealcheck");
        PreloadParticle("summoner_battlecry_obd.troy");
        PreloadSpell("root");
        PreloadParticle("summoner_cast.troy");
        PreloadSpell("summonerbattlecry");
        PreloadParticle("summoner_cast.troy");
        PreloadParticle("summoner_boost.troy");
        PreloadParticle("summoner_flash.troy");
        PreloadSpell("summonerodinpromote");
        PreloadSpell("odinsuperminion");
        PreloadParticle("summoner_cast.troy");
        PreloadParticle("summoner_cast.troy");
        PreloadParticle("summoner_flash.troy");
        PreloadCharacter("summonerbeacon");
        PreloadSpell("beaconauraap");
        PreloadSpell("beaconaura");
        PreloadParticle("summoner_flash.troy");
        PreloadCharacter("summoner_rider_order");
        PreloadCharacter("summoner_rider_chaos");
        PreloadSpell("promoteaura");
        PreloadSpell("promotebuff");
        PreloadParticle("summoner_cast.troy");
        PreloadSpell("turretbait");
        PreloadSpell("stun");
        PreloadParticle("summoner_flash.troy");
        PreloadParticle("summoner_cast.troy");
        PreloadParticle("gemknightbasicattack_tar.troy");
        PreloadSpell("summonerpromotesr");
        PreloadParticle("summoner_cast.troy");
        PreloadParticle("clairvoyanceeyelong_green.troy");
        PreloadParticle("clairvoyanceeyelong_red.troy");
        PreloadParticle("summoner_cast.troy");
        PreloadSpell("exhaustslow");
        PreloadSpell("summonerexhaust");
        PreloadSpell("exhaustdebuff");
        PreloadParticle("summoner_cast.troy");
        PreloadSpell("summonerrevivespeedboost");
        PreloadSpell("revivemarker");
        PreloadParticle("summoner_cast.troy");
        PreloadParticle("summoner_dot.troy");
        PreloadParticle("summoner_cast.troy");
        PreloadSpell("internal_50ms");
        PreloadSpell("grievouswound");
        PreloadParticle("spelleffect_proc.troy");
        PreloadSpell("stealth");
        PreloadSpell("actiontimer");
        PreloadParticle("tutorial_waypoint_yellow.troy");
        PreloadSpell("willrevive");
        PreloadParticle("corki_valkrie_impact_cas.troy");
        PreloadParticle("corki_fire_buf.troy");
        PreloadSpell("dangerzonetarget");
        PreloadSpell("positivechampiondelta");
        PreloadSpell("negativechampiondelta");
        PreloadSpell("stealth");
        PreloadSpell("actiontimer2");
        PreloadCharacter("testcube");
        PreloadSpell("disconnecttarget");
        PreloadParticle("teleporthome.troy");
        PreloadParticle("teleportarrive.troy");
        PreloadSpell("halloweenurfcd");
        PreloadParticle("ghosturf.troy");
        PreloadSpell("halloweenurfcd");
        PreloadParticle("ghosturf.troy");
        PreloadSpell("isninja");
        PreloadSpell("OdinDebacleCloak");
        PreloadSpell("odinbombsuccessparticle");
        PreloadSpell("odinbombsuppressionorder");
        PreloadSpell("odinbombsuppressionchaos");
        PreloadSpell("odinbombsuppression");
        PreloadSpell("monsterbuffs");
        PreloadSpell("monsterbuffs2");
        PreloadSpell("odincenterrelicbuff");
        PreloadSpell("odinscorebigrelic");
        PreloadSpell("odincenterrelicbuffdamage");
        PreloadParticle("odin_heal_rune.troy");
        PreloadSpell("odinshieldrelicaura");
        PreloadSpell("odinshieldrelicbuffheal");
        PreloadSpell("odinscoresmallrelic");
        PreloadSpell("odingrdobelisksuppression");
        PreloadParticle("odynsveil_cas.troy");
        PreloadSpell("internal_50ms");
        PreloadSpell("odingrievouswound");
        PreloadParticle("odindontshipthis_green.troy");
        PreloadParticle("odindontshipthis_red.troy");
        PreloadSpell("odinbloodbursterbuff");
        PreloadSpell("odinguardianbuff");
        PreloadParticle("neutralmonster_buf_blue_defense.troy");
        PreloadParticle("odinneutralinvulnerable.troy");
        PreloadParticle("odin_relic_buf_red.troy");
        PreloadParticle("odin_relic_buf_green.troy");
        PreloadParticle("odin_prism_red.troy");
        PreloadParticle("odin_prism_green.troy");
        PreloadSpell("odinbombsuppression");
        PreloadParticle("nashor_rune_buf.troy");
        PreloadParticle("odin_shrine_time.troy");
        PreloadSpell("odinshrinetimebuff");
        PreloadParticle("odinneutralguardian_green.troy");
        PreloadParticle("odinneutralguardian_red.troy");
        PreloadParticle("blank.troy");
        PreloadParticle("odinneutralguardian_stone.troy");
        PreloadSpell("odinsuperminion");
        PreloadSpell("odinminiontaunt");
        PreloadSpell("odinminion");
        PreloadParticle("goldaquisition_glb.troy");
        PreloadSpell("root");
        PreloadSpell("odinguardiansuppression");
        PreloadSpell("odinminionspellattack");
        PreloadSpell("odinplayerbuff");
        PreloadParticle("odin_healthpackheal.troy");
        PreloadSpell("root");
        PreloadParticle("summoner_mana.troy");
        PreloadSpell("odinshieldrelicbuffheal");
        PreloadParticle("odin_point_active.troy");
        PreloadParticle("teleporthome.troy");
        PreloadParticle("teleportarrive.troy");
        PreloadSpell("odinrecall");
        PreloadSpell("odingolembombbuff");
        PreloadSpell("odinsuperminion");
        PreloadParticle("thornmail_tar.troy");
        PreloadSpell("summonerodinpromote");
        PreloadSpell("odinminionspellattack");
        PreloadSpell("odincombatactive");
        PreloadParticle("odinhealthrelic.troy");
        PreloadSpell("odinhealthrelicaura");
        PreloadSpell("odinhealthrelicbuff");
        PreloadParticle("odinsigil.troy");
        PreloadParticle("neutralmonster_buf_red_offense.troy");
        PreloadSpell("odinsigilaura");
        PreloadSpell("odinsigilbuff");
        PreloadParticle("odin_center_relic.troy");
        PreloadSpell("odincenterrelicshieldcheck2");
        PreloadSpell("odincenterrelicshieldcheck");
        PreloadParticle("sonasongofdiscord_aura.troy");
        PreloadSpell("judicatorreckoning");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("judicatorholyfervor");
        PreloadSpell("turretshield");
        PreloadParticle("feelnopain_eff.troy");
        PreloadSpell("turretshield");
        PreloadParticle("feelnopain_eff.troy");
        PreloadParticle("feelnopain_eff.troy");
        PreloadSpell("turretshield");
        PreloadSpell("structuredamagereduction");
        PreloadSpell("rebirthready");
        PreloadSpell("rebirthmarker");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("hallucinatepoof.troy");
        PreloadParticle("feelnopain_eff.troy");
        PreloadSpell("turretshield");
        PreloadSpell("structuredamagereduction");
        PreloadSpell("turretshield");
        PreloadParticle("feelnopain_eff.troy");
        PreloadSpell("promotemebuff");
        PreloadSpell("odinguardianregen");
        PreloadSpell("turretshield");
        PreloadParticle("feelnopain_eff.troy");
        PreloadSpell("promotemebuff");
        PreloadSpell("odindisintegrate");
        PreloadSpell("odinscorelowhpattacker");
        PreloadSpell("odinscorelowhp");
        PreloadSpell("callforhelp");
        PreloadSpell("odinscoreavengertarget");
        PreloadSpell("odinscorekiller");
        PreloadSpell("odinscorearchangel");
        PreloadSpell("odinscoreangel");
        PreloadParticle("summoner_flash.troy");
        PreloadSpell("odinvanguardaurabuff");
        PreloadSpell("halloweenurfcd");
        PreloadSpell("eternalthirsticon");
        PreloadSpell("halloweenurfwarwick");
        PreloadSpell("halloweenurfappear");
        PreloadSpell("odinguardiansuppression");
        PreloadSpell("odinguardianbuff");
        PreloadParticle("crashboom.troy");
        PreloadSpell("root");
        PreloadSpell("odincapturechannel");
        PreloadParticle("ezreal_essenceflux_tar.troy");
        PreloadSpell("root");
        PreloadSpell("odincaptureinterrupt");
        PreloadSpell("odincaptureimmobile");
        PreloadSpell("odinguardiansuppression");
        PreloadSpell("prilisasblessing");
        PreloadSpell("odinguardiansuppressionorder");
        PreloadParticle("odincapturebeam.troy");
        PreloadSpell("odinguardiansuppressionchaos");
        PreloadSpell("odinscoreninja");
        PreloadSpell("odinshrinebombbuff");
        PreloadSpell("odinbombtickorder");
        PreloadSpell("odinbombtickchaos");
        PreloadParticle("odincapturebeamengaged_red.troy");
        PreloadParticle("odincapturebeamengaged_green.troy");
        PreloadSpell("odincapturechannelcooldownbuff");
        PreloadParticle("odincapturecancel.troy");
        PreloadSpell("visionary");
        PreloadSpell("visionary_counter");
        PreloadSpell("visionary_marker");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("kennen_btl_beam.troy");
        PreloadSpell("root");
        PreloadParticle("kennen_btl_tar.troy");
        PreloadParticle("odin-capture-emptying.troy");
        PreloadSpell("empoweredbulwark");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("backstab");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("odin_relic_buf_light_blue.troy");
        PreloadParticle("odin_centerbuffbeam.troy");
        PreloadSpell("root");
        PreloadSpell("empathizeaura");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("invis_runes_01.troy");
        PreloadParticle("odin_speed_shrine_buf.troy");
        PreloadSpell("root");
        PreloadSpell("spikedshell");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("netherblade");
        PreloadSpell("forcepulse");
        PreloadSpell("forcepulsechaos");
        PreloadSpell("voidstone");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("heightenedlearning");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("odin-capture-filling.troy");
        PreloadSpell("defile");
        PreloadParticle("neutralmonster_buf.troy");
        PreloadSpell("deathdefied");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadParticle("regen_rune_buf.troy");
        PreloadParticle("eternalthirst_buf.troy");
        PreloadSpell("hpbyplayerlevel");
        PreloadSpell("odinguardianbuff");
        PreloadParticle("neutralmonster_buf_red_offense.troy");
        PreloadParticle("tiamatmelee_itm.troy");
        PreloadSpell("judicatorrighteousfury");
        PreloadParticle("odin_quest_complete.troy");
        PreloadSpell("stun");
        PreloadSpell("equipmentmastery");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("counterstrikedodgeup");
        PreloadSpell("relentlessassault");
        PreloadSpell("counterstrikecancast");
        PreloadSpell("championchampiondelta");
        PreloadSpell("negativeturretdelta");
        PreloadSpell("positivechampiondelta");
        PreloadSpell("positiveturretdelta");
        PreloadSpell("negativechampiondelta");
        PreloadSpell("eternalthirst");
        PreloadParticle("eternalthirst_buf.troy");
        PreloadSpell("eternalthirsticon");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("bloodscent_internal");
        PreloadSpell("secondsight");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("cardmasterstack");
        PreloadSpell("personalturretassistbonus");
        PreloadSpell("turretbackdoorbonus");
        PreloadSpell("turretbonus");
        PreloadSpell("turretbonushealth");
        PreloadSpell("turretchampiondelta");
        PreloadSpell("turretassistmanager");
        PreloadSpell("turretdamagemanager");
        PreloadSpell("turretprebonus");
        PreloadSpell("turretbonushealth");
        PreloadSpell("turretchampiondelta");
        PreloadSpell("turretassistmanager");
        PreloadSpell("turretdamagemanager");
        PreloadSpell("turretdamagemanager");
        PreloadSpell("turretbonus");
        PreloadSpell("turretbonushealth");
        PreloadSpell("turretprebonus");
        PreloadSpell("turretbonushealth");
        PreloadSpell("turretchampiondelta");
        PreloadSpell("turretassistmanager");
        PreloadSpell("turretdamagemanager");
        PreloadSpell("turretbonus");
        PreloadSpell("turretbonushealth");
        PreloadSpell("turretchampiondelta");
        PreloadSpell("turretassistmanager");
        PreloadSpell("turretdamagemanager");
        PreloadSpell("turretbonus");
        PreloadSpell("turretbonushealth");
        PreloadSpell("archersmark");
        PreloadSpell("focus");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("bowmasterfocusdisplay");
        PreloadSpell("shatteraura");
        PreloadSpell("gemcraft");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("turretprebonus");
        PreloadSpell("turretbonushealth");
        PreloadSpell("turretchampiondelta");
        PreloadSpell("turretassistmanager");
        PreloadSpell("turretdamagemanager");
        PreloadSpell("odincapturechannelbomb");
        PreloadParticle("ezreal_essenceflux_tar.troy");
        PreloadSpell("root");
        PreloadSpell("odinchannelvision");
        PreloadParticle("odincapturebeam.troy");
        PreloadSpell("odinbombsuppression");
        PreloadParticle("odincapturebeamengaged.troy");
        PreloadSpell("odinbombsuppressionorder");
        PreloadSpell("odinbombsuppressionchaos");
        PreloadSpell("odinbombsuccessparticle");
        PreloadParticle("odincapturecancel.troy");
        PreloadParticle("odingolemplaceholder.troy");
        PreloadParticle("odingolemplaceholder2.troy");
        PreloadParticle("odin_shrine_aura.troy");
        PreloadSpell("odinshrinebuff");
        PreloadParticle("regen_rune_buf.troy");
        PreloadSpell("odinvamprelicaura");
        PreloadSpell("odinvamprelicbuff");
        PreloadSpell("turretdamagemanager");
        PreloadParticle("teleporthome_shortimproved.troy");
        PreloadParticle("teleportarrive.troy");
        PreloadParticle("odin_shrine_heal.troy");
        PreloadParticle("garen_heal.troy");
        PreloadSpell("turretbonus");
        PreloadSpell("turretbonushealth");
        PreloadSpell("odinguardianuidamage");
        PreloadSpell("odinguardianuidamagechaos");
        PreloadSpell("odinguardianuidamageorder");
        PreloadParticle("teleporthome.troy");
        PreloadSpell("odinportalteleport");
        PreloadSpell("odincenterrelicbuff");
        PreloadSpell("odinscorebigrelic");
        PreloadSpell("odincenterrelicbuffdamage");
        PreloadSpell("odinbombsuccessparticle");
        PreloadSpell("feast");
        PreloadSpell("feastmarker");
        PreloadSpell("vorpalspikes");
        PreloadSpell("carnivore");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("blindmonkrroot");
        PreloadSpell("blindmonkpassive");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("spelleffect_proc.troy");
        PreloadParticle("odin_suppression.troy");
        PreloadSpell("odinguardiansuppressionorder");
        PreloadSpell("odinguardiansuppressionchaos");
        PreloadSpell("odinguardiansuppression");
        PreloadSpell("prilisasblessing");
        PreloadSpell("odincapturesoundemptying");
        PreloadSpell("odincapturesoundfilling");
        PreloadSpell("facingme");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("battlefury");
        PreloadSpell("bloodlustmarker");
        PreloadParticle("odin_forcefield_red.troy");
        PreloadParticle("odin_forcefield_green.troy");
        PreloadSpell("odinportalchannel");
        PreloadParticle("neutralmonster_buf_blue_defense.troy");
        PreloadParticle("potionofgiantstrength_itm.troy");
        PreloadParticle("placeholdershield.troy");
        PreloadParticle("potionofelusiveness_itm.troy");
        PreloadSpell("odincenterrelicaura");
        PreloadSpell("monsterbuffs");
        PreloadSpell("monsterbuffs2");
        PreloadSpell("odincenterrelicbuff");
        PreloadSpell("odinscorebigrelic");
        PreloadParticle("regen_rune_buf.troy");
        PreloadParticle("neutralmonster_buf_blue_defense.troy");
        PreloadSpell("colossalstrength");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("odinscorelowhpattacker");
        PreloadSpell("odinscoreavengertarget");
        PreloadSpell("odinscorekiller");
        PreloadParticle("neutralmonster_buf_red_offense.troy");
        PreloadSpell("entropyburning");
        PreloadSpell("internal_30slow");
        PreloadSpell("itemslow");
        PreloadParticle("spectral_fury_cas.troy");
        PreloadSpell("tantrum");
        PreloadSpell("cursedtouch");
        PreloadSpell("cursedtouchmarker");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("odinguardianbuff");
        PreloadSpell("odinquestindicator");
        PreloadCharacter("odinquestindicator");
        PreloadSpell("raisemoraleteambuff");
        PreloadSpell("raisemorale");
        PreloadSpell("piratescurvy");
        PreloadSpell("scurvy");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("ispirate");
        PreloadParticle("odin_shrine_time.troy");
        PreloadSpell("odinspeedshrinebuff");
        PreloadSpell("odinbloodbursterinternal");
        PreloadSpell("odinbloodbursterbuff");
        PreloadParticle("neutralmonster_buf_red_offense.troy");
        PreloadSpell("odinguardiansuppression");
        PreloadSpell("odinguardianbuff");
        PreloadParticle("neutralmonster_buf_blue_defense.troy");
        PreloadParticle("potionofelusiveness_itm.troy");
        PreloadParticle("potionofgiantstrength_itm.troy");
        PreloadParticle("placeholdershield.troy");
        PreloadSpell("odincenterrelicaura2");
        PreloadSpell("monsterbuffs");
        PreloadSpell("monsterbuffs2");
        PreloadSpell("odincenterrelicbuff");
        PreloadSpell("odinscorebigrelic");
        PreloadParticle("odin_quest_buf.troy");
        PreloadParticle("meditate_eff.troy");
        PreloadSpell("odinportalmovecheck");
        PreloadSpell("odinportalchannel");
        PreloadSpell("odinportalteleport");
        PreloadSpell("nashorstoothcd");
        PreloadSpell("bootsofmobilitydebuff");
        PreloadParticle("tiamatmelee_itm.troy");
        PreloadSpell("judicatorrighteousfury");
        PreloadSpell("internal_35slow");
        PreloadSpell("itemslow");
        PreloadSpell("internal_15slow");
        PreloadSpell("turretbonus");
        PreloadSpell("turretbonushealth");
        PreloadSpell("turretchampiondelta");
        PreloadSpell("turretassistmanager");
        PreloadSpell("turretdamagemanager");
        PreloadSpell("sunfirecloakparticle");
        PreloadSpell("emblemofvalorparticle");
        PreloadSpell("emblemofvalor");
        PreloadParticle("rallyingbanner_itm.troy");
        PreloadParticle("jackintheboxpoof.troy");
        PreloadSpell("chilled");
        PreloadSpell("heartofgold");
        PreloadSpell("thornmail");
        PreloadSpell("turretbonus");
        PreloadSpell("turretbonushealth");
        PreloadSpell("turretchampiondelta");
        PreloadSpell("turretassistmanager");
        PreloadSpell("turretdamagemanager");
        PreloadSpell("catalystheal");
        PreloadSpell("bansheesveiltimer");
        PreloadSpell("bansheesveil");
        PreloadSpell("turretprebonus");
        PreloadSpell("turretbonushealth");
        PreloadSpell("turretchampiondelta");
        PreloadSpell("turretassistmanager");
        PreloadSpell("turretdamagemanager");
        PreloadSpell("fiendishcodex");
        PreloadSpell("tearofthegoddesstrack");
        PreloadSpell("hauntingguise");
        PreloadSpell("pendantofzephirisauraself");
        PreloadSpell("pendantofzephirisaurafriend");
        PreloadParticle("zettasmanamanipulator_itm.troy");
        PreloadSpell("mejaischeck");
        PreloadSpell("mejaisstats");
        PreloadSpell("mejaiscap");
        PreloadSpell("atmasimpaler");
        PreloadSpell("brutalizer");
        PreloadSpell("kindlegem");
        PreloadSpell("tearofthegoddesstrack");
        PreloadSpell("prilisasblessing");
        PreloadSpell("wrigglelantern");
        PreloadSpell("madredsrazors");
        PreloadSpell("hextechsweeper");
        PreloadSpell("odinlightbringer");
        PreloadSpell("dorant2health");
        PreloadSpell("internal_30slow");
        PreloadSpell("itemslow");
        PreloadSpell("abyssalscepterauraself");
        PreloadSpell("abyssalscepteraura");
        PreloadSpell("renewaltunic");
        PreloadSpell("turretdamagemarker");
        PreloadSpell("OdinBloodrazor");
        PreloadParticle("global_invulnerability.troy");
        PreloadSpell("turretbonus");
        PreloadSpell("hasbeenrevived");
        PreloadSpell("guardianangel");
        PreloadSpell("willrevive");
        PreloadParticle("leblanc_displace_aoe_tar.troy");
        PreloadSpell("leblancchaosorb");
        PreloadSpell("leblancchaosorbm");
        PreloadParticle("leblanc_displace_aoe_tar_ult.troy");
        PreloadSpell("leblancchaosorbm");
        PreloadSpell("leblancchaosorb");
        PreloadParticle("leblanc_mirrorimagepoof.troy");
        PreloadSpell("leblancmi");
        PreloadSpell("leblancpassivecooldown");
        PreloadSpell("leblancmifull");
        PreloadSpell("leblancpassive");
        PreloadParticle("leblancimage.troy");
        PreloadSpell("root");
        PreloadParticle("leblanc_mirrorimage_death.troy");
        PreloadSpell("leblancslidereturnm");
        PreloadParticle("leblanc_displacement_blink_indicator_ult.troy");
        PreloadParticle("leblanc_displacement_cas.troy");
        PreloadParticle("leblanc_displacement_blink_return_trigger.troy");
        PreloadSpell("leblancslide");
        PreloadSpell("leblancslidewallfixm");
        PreloadParticle("leblanc_displacement_cas_ult.troy");
        PreloadSpell("leblancslidemovem");
        PreloadSpell("leblancslidem");
        PreloadParticle("leblanc_shackle_chain_beam_ult.troy");
        PreloadSpell("root");
        PreloadParticle("leblanc_shackle_self_idle_ult.troy");
        PreloadParticle("leblanc_shackle_target_idle_ult.troy");
        PreloadParticle("leblanc_shackle_tar_blood.troy");
        PreloadSpell("leblancsoulshacklenetm");
        PreloadSpell("leblancsoulshacklem");
        PreloadSpell("slow");
        PreloadParticle("leblanc_displacement_blink_target.troy");
        PreloadParticle("leblanc_displacement_yellow_mis.troy");
        PreloadParticle("leblanc_slide_impact_self.troy");
        PreloadParticle("leblanc_slide_impact_unit_tar.troy");
        PreloadSpell("leblancslidereturn");
        PreloadParticle("leblanc_displacement_blink_indicator.troy");
        PreloadParticle("leblanc_displacement_cas.troy");
        PreloadParticle("leblanc_displacement_blink_return_trigger.troy");
        PreloadSpell("leblancslidewallfix");
        PreloadSpell("leblancslidem");
        PreloadSpell("leblancslidemove");
        PreloadSpell("leblancslide");
        PreloadParticle("leblanc_shackle_chain_beam.troy");
        PreloadSpell("root");
        PreloadParticle("leblanc_shackle_self_idle.troy");
        PreloadParticle("leblanc_shackle_target_idle.troy");
        PreloadParticle("leblanc_shackle_tar_blood.troy");
        PreloadSpell("leblancsoulshacklenet");
        PreloadSpell("leblancsoulshackle");
        PreloadSpell("slow");
        PreloadParticle("leblanc_displacement_blink_target_ult.troy");
        PreloadParticle("leblanc_displacement_mis.troy");
        PreloadParticle("leblanc_slide_impact_self_ult.troy");
        PreloadParticle("leblanc_slide_impact_unit_tar.troy");
        PreloadParticle("maoki_sapling_unit_tar.troy");
        PreloadCharacter("maokaisproutling");
        PreloadSpell("maokaisaplingmine");
        PreloadCharacter("testcuberender10vision");
        PreloadSpell("maokaisapling2");
        PreloadSpell("expirationtimer");
        PreloadSpell("maokaisapling2boom");
        PreloadSpell("maokaisaplingmine");
        PreloadParticle("maoki_sapling_unit_tar.troy");
        PreloadParticle("maoki_sapling_detonate.troy");
        PreloadParticle("maokai_sapling_rdy_indicator_green.troy");
        PreloadParticle("maokai_sapling_rdy_indicator_red.troy");
        PreloadParticle("maokai_sapling_team_id_green.troy");
        PreloadParticle("maokai_sapling_team_id_red.troy");
        PreloadParticle("maoki_sapling_detonate.troy");
        PreloadSpell("maokaisapling2");
        PreloadParticle("maokai_sapling_rdy_indicator_green.troy");
        PreloadParticle("maokai_sapling_rdy_indicator_red.troy");
        PreloadParticle("maokai_sapling_team_id_green.troy");
        PreloadParticle("maokai_sapling_team_id_red.troy");
        PreloadSpell("maokaidrain3tally");
        PreloadSpell("maokaidrain3toggle");
        PreloadParticle("maoki_torrent_damage_pulse.troy");
        PreloadSpell("maokaidrain3");
        PreloadSpell("maokaidrain3toggle");
        PreloadParticle("maoki_torrent_cas_01.troy");
        PreloadParticle("maoki_torrent_01_teamid_christmas_green.troy");
        PreloadParticle("maoki_torrent_01_teamid_christmas_red.troy");
        PreloadParticle("maoki_torrent_01_teamid_green.troy");
        PreloadParticle("maoki_torrent_01_teamid_red.troy");
        PreloadSpell("maokaidrain3defense");
        PreloadSpell("maokaidrain3");
        PreloadParticle("maoki_torrent_deflect_self_cas.troy");
        PreloadParticle("maoki_torrent_deflect_cas_02.troy");
        PreloadParticle("maoki_torrent_unit_tar.troy");
        PreloadParticle("maokai_elementaladvance_mis.troy");
        PreloadSpell("maokaiunstablegrowth");
        PreloadSpell("maokaiunstablegrowthroot");
        PreloadParticle("maoki_trunksmash_cas.troy");
        PreloadSpell("maokaitrunkline");
        PreloadParticle("powerballhit.troy");
        PreloadSpell("slow");
        PreloadSpell("maokaitrunklinestun");
        PreloadSpell("maokaitrunkline");
        PreloadParticle("maoki_trunksmash_unit_tar_02.troy");
        PreloadParticle("maoki_trunksmash_unit_tar.troy");
        PreloadSpell("slow");
        PreloadParticle("maokai_elementaladvance_root_01.troy");
        PreloadParticle("maokai_elementaladvance_root_02.troy");
        PreloadParticle("maokai_elementaladvance_armor.troy");
        PreloadSpell("leblancslidem");
        PreloadSpell("leblancchaosorbm");
        PreloadSpell("leblancsoulshacklem");
        PreloadSpell("leblancpassive");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("leblancpassivecooldown");
        PreloadSpell("leblancmiapplicator");
        PreloadParticle("insanitypotion_buf.troy");
        PreloadParticle("insanitypotion_steam.troy");
        PreloadParticle("maokai_heal.troy");
        PreloadSpell("poisontrailmarker");
        PreloadSpell("poisontrailtarget");
        PreloadCharacter("testcube");
        PreloadSpell("poisontrailapplicator");
        PreloadSpell("poisontrail");
        PreloadSpell("maokaisapmagichot");
        PreloadParticle("fling_land.troy");
        PreloadSpell("root");
        PreloadSpell("maokaisapmagic");
        PreloadSpell("maokaisapmagicchaos");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("maokaisapmagicpass");
        PreloadParticle("megaadhesive_green_pool.troy");
        PreloadParticle("megaadhesive_red_pool.troy");
        PreloadSpell("megaadhesivetarget");
        PreloadSpell("megaadhesiveapplicator");
        PreloadCharacter("spellbook1");
        PreloadSpell("expirationtimer");
        PreloadSpell("maokaisapmagicmelee");
        PreloadSpell("maokaisapmagichot");
        PreloadSpell("maokaisapmagicmelee");
        PreloadSpell("empoweredbulwark");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("udyrmonkeyagility");
        PreloadSpell("veigareventhorizonprevent");
        PreloadSpell("veigareventhorizonmarker");
        PreloadSpell("veigareventhorizonmarker");
        PreloadParticle("permission_desecrate_green_cas_leprechaun.troy");
        PreloadParticle("permission_desecrate_red_cas_leprechaun.troy");
        PreloadParticle("permission_desecrate_green_cas_daper.troy");
        PreloadParticle("permission_desecrate_red_cas_daper.troy");
        PreloadParticle("permission_desecrate_green_cas.troy");
        PreloadParticle("permission_desecrate_red_cas.troy");
        PreloadCharacter("testcube");
        PreloadParticle("permission_dark_matter_cas.troy");
        PreloadParticle("permission_dark_matter_tar_leprechaun.troy");
        PreloadParticle("permission_dark_matter_tar.troy");
        PreloadCharacter("testcube");
        PreloadSpell("veigarequilibrium");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("globalhit_tar.troy");
        PreloadParticle("blindmonk_q_resonatingstrike_tar.troy");
        PreloadParticle("blindmonk_q_resonatingstrike_tar_blood.troy");
        PreloadParticle("blindmonk_q_tar_indicator.troy");
        PreloadSpell("blindmonkqmanager");
        PreloadSpell("blindmonkrmarker");
        PreloadParticle("blind_monk_ult_unit_impact.troy");
        PreloadSpell("blindmonkrdamage");
        PreloadParticle("blindmonk_q_resonatingstrike_02.troy");
        PreloadSpell("blindmonkqtwodash");
        PreloadSpell("blindmonkrmarker");
        PreloadCharacter("testcuberender");
        PreloadSpell("blindmonkrnewminion");
        PreloadParticle("blindmonk_q_resonatingstrike_tar.troy");
        PreloadParticle("blindmonk_q_resonatingstrike_tar_blood.troy");
        PreloadParticle("blindmonk_resonatingstrike_tar_sound.troy");
        PreloadParticle("blindmonk_q_resonatingstrike_mis.troy");
        PreloadSpell("blindmonkqtwodashparticle");
        PreloadParticle("blindmonk_q_resonatingstrike_tar.troy");
        PreloadParticle("blindmonk_q_resonatingstrike_tar_blood.troy");
        PreloadParticle("blindmonk_q_tar_indicator.troy");
        PreloadSpell("blindmonkqonechaos");
        PreloadParticle("blindmonk_q_tar.troy");
        PreloadSpell("blindmonkqmanager");
        PreloadSpell("blindmonkqtwo");
        PreloadSpell("blindmonkqone");
        PreloadSpell("blindmonkqonechaos");
        PreloadSpell("blindmonketwo");
        PreloadSpell("blindmonkeone");
        PreloadSpell("kogmawicathiansurpriseready");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("blindmonk_w_ironwill_armor.troy");
        PreloadSpell("blindmonkwmanager");
        PreloadParticle("blindmonk_w_shield_self_deactivate.troy");
        PreloadParticle("blindmonk_w_shield_block.troy");
        PreloadParticle("blindmonk_w_cas_01.troy");
        PreloadSpell("blindmonkwonedash");
        PreloadSpell("blindmonkwmanager");
        PreloadSpell("sharedwardbuff");
        PreloadSpell("blindmonkwoneshield");
        PreloadParticle("blindmonk_thundercrash_impact_cas.troy");
        PreloadParticle("blindmonk_thundercrash_impact_02.troy");
        PreloadParticle("blindmonk_e_cas.troy");
        PreloadSpell("sharedwardbuff");
        PreloadParticle("blindmonk_thundercrash_impact_unit_tar.troy");
        PreloadParticle("blindmonk_e_thundercrash_tar.troy");
        PreloadParticle("blindmonk_e_thundercrash_unit_tar_blood.troy");
        PreloadSpell("blindmonkemanager");
        PreloadSpell("blindmonkwtwo");
        PreloadSpell("blindmonkwone");
        PreloadParticle("blindmonk_w_self_mis.troy");
        PreloadSpell("blindmonkwonedash");
        PreloadSpell("blindmonkwoneshield");
        PreloadSpell("blindmonkeone");
        PreloadSpell("blindmonkemanager");
        PreloadSpell("blindmonkrroot");
        PreloadSpell("blindmonkpassive");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("monkeykingclonecd");
        PreloadSpell("monkeykingclonespellcast");
        PreloadSpell("monkeykingcloneapplicator");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("monkeykingdeathparticle");
        PreloadSpell("eternalthirst");
        PreloadParticle("eternalthirst_buf.troy");
        PreloadSpell("eternalthirsticon");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("bloodscent_internal");
        PreloadSpell("eternalthirst");
        PreloadParticle("eternalthirst_buf.troy");
        PreloadParticle("infiniteduress_tar.troy");
        PreloadSpell("suppression");
        PreloadSpell("infiniteduresssound");
        PreloadSpell("infiniteduresschannel");
        PreloadSpell("suppression");
        PreloadSpell("infiniteduresschannel");
        PreloadSpell("infiniteduresssound");
        PreloadParticle("wolfman_bloodscent_activate_speed.troy");
        PreloadParticle("wolfman_bloodscent_activate_blood_buff.troy");
        PreloadParticle("wolfman_bloodscent_activate_blood_buff_02.troy");
        PreloadSpell("bloodscent_internal");
        PreloadParticle("hungeringstrikefire_tar.troy");
        PreloadParticle("hungeringstrike_tar.troy");
        PreloadSpell("globaldrain");
        PreloadParticle("meditate_eff.troy");
        PreloadSpell("bloodscent_target");
        PreloadSpell("bloodscent");
        PreloadParticle("wolfman_bloodscent_marker.troy");
        PreloadSpell("adrenalinerushdebuff");
        PreloadParticle("garen_damacianjustice_cas.troy");
        PreloadParticle("garen_damacianjustice_tar_indicator.troy");
        PreloadParticle("garen_damacianjustice_tar.troy");
        PreloadCharacter("testcube");
        PreloadSpell("expirationtimer");
        PreloadParticle("luxmalicecannon_beam.troy");
        PreloadParticle("lux_death.troy");
        PreloadParticle("luxmalicecannon_cas.troy");
        PreloadSpell("luxilluminatingfraulein");
        PreloadParticle("luxpassive_tar.troy");
        PreloadParticle("luxmalicecannon_tar.troy");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("luxdeath");
        PreloadSpell("championchampiondelta");
        PreloadSpell("luxilluminationpassive");
        PreloadSpell("luxdeathparticle");
        PreloadCharacter("testcuberender");
        PreloadCharacter("testcube");
        PreloadSpell("luxmalicecannondeathfix");
        PreloadSpell("expirationtimer");
        PreloadSpell("luxmalicecannonpartfix");
        PreloadSpell("luxmalicecannonpartfix2");
        PreloadSpell("luxmalicecannonbeam");
        PreloadSpell("luxmalicecannonball");
        PreloadParticle("luxmalicecannon_beammiddle.troy");
        PreloadCharacter("testcube");
        PreloadSpell("expirationtimer");
        PreloadSpell("luxilluminatingfraulein");
        PreloadParticle("luxpassive_tar.troy");
        PreloadSpell("luxdeathparticletimer");
        PreloadParticle("luxdeathparticle.troy");
        PreloadSpell("root");
        PreloadSpell("luxdeathparticle");
        PreloadSpell("pantheon_gs_particlered");
        PreloadSpell("pantheon_gs_particle");
        PreloadParticle("pantheon_grandskyfall_land.troy");
        PreloadSpell("pantheon_grandskyfall_falld");
        PreloadSpell("pantheon_grandskyfall_fall");
        PreloadSpell("slow");
        PreloadParticle("globalhit_physical.troy");
        PreloadSpell("pantheon_aegisshield2");
        PreloadSpell("pantheon_aegisshield");
        PreloadSpell("pantheon_aegis_counter");
        PreloadSpell("pantheon_certaindeath");
        PreloadParticle("pantheon_grandskyfall_tar_red.troy");
        PreloadParticle("pantheon_grandskyfall_cas.troy");
        PreloadSpell("pantheon_gs_particle");
        PreloadSpell("pantheon_aegisshield2");
        PreloadSpell("pantheon_aegisshield");
        PreloadSpell("pantheon_aegis_counter");
        PreloadSpell("pantheon_grandskyfall_jump");
        PreloadParticle("pantheon_grandskyfall_up.troy");
        PreloadSpell("pantheon_grandskyfall");
        PreloadSpell("pantheon_gs_particlered");
        PreloadParticle("pantheon_grandskyfall_tar_green.troy");
        PreloadParticle("pantheon_heartseeker_cas2.troy");
        PreloadSpell("pantheon_heartseekerchannel");
        PreloadParticle("garen_damacianjustice_cas_instant.troy");
        PreloadParticle("garen_damacianjustice_cas_sword.troy");
        PreloadSpell("garenbladestorm");
        PreloadSpell("pantheon_heartseekersound");
        PreloadSpell("pantheon_heartseeker");
        PreloadSpell("pantheon_heartseekerchannel");
        PreloadSpell("pantheon_aegisshield2");
        PreloadSpell("pantheon_aegisshield");
        PreloadSpell("pantheon_aegis_counter");
        PreloadSpell("pantheon_aegisshield");
        PreloadSpell("pantheon_aegisshield2");
        PreloadSpell("pantheon_aegis_counter");
        PreloadSpell("pantheon_certaindeath");
        PreloadParticle("taric_gemstorm_aura.troy");
        PreloadParticle("tarichammersmash_shatter.troy");
        PreloadParticle("tarichammersmash_nova.troy");
        PreloadParticle("taric_gemstorm_tar.troy");
        PreloadSpell("radiance");
        PreloadParticle("taric_hammerinternal.troy");
        PreloadParticle("taricgemstorm.troy");
        PreloadSpell("radianceaura");
        PreloadSpell("pantheon_certaindeath");
        PreloadSpell("pantheon_aegisshield");
        PreloadSpell("luxprismaticwaveshieldself");
        PreloadSpell("luxlightstriketoggle");
        PreloadParticle("luxlightstrike_mis.troy");
        PreloadParticle("luxlightstrike_tar_green.troy");
        PreloadParticle("luxlightstrike_tar_red.troy");
        PreloadParticle("globalhit_mana.troy");
        PreloadSpell("luxilluminatingfraulein");
        PreloadSpell("luxlightstrikekugel");
        PreloadParticle("luxblitz_nova.troy");
        PreloadSpell("slow");
        PreloadSpell("pantheon_aegisshield");
        PreloadParticle("garen_descisivestrike_indicator.troy");
        PreloadParticle("garen_descisivestrike_indicator_02.troy");
        PreloadSpell("garenslash3");
        PreloadSpell("garenfastmove");
        PreloadSpell("luxlightstriketoggle");
        PreloadSpell("luxlightstrikekugel");
        PreloadParticle("shen_feint_self_deactivate.troy");
        PreloadParticle("spelleffect_proc.troy");
        PreloadSpell("pantheon_certaindeath");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("pantheon_aegis");
        PreloadSpell("luxlightstrikekugel");
        PreloadSpell("garenbladestorm");
        PreloadParticle("akali_twilight_buf.troy");
        PreloadSpell("recall");
        PreloadSpell("luxprismaticwaveshieldself");
        PreloadSpell("luxprismaticwaveshield");
        PreloadSpell("pantheon_aegisshield2");
        PreloadSpell("pantheon_aegisshield");
        PreloadSpell("pantheon_aegis_counter");
        PreloadParticle("garen_bladestorm_cas_02.troy");
        PreloadParticle("garen_weapon_glow_01.troy");
        PreloadSpell("garenbladestorm");
        PreloadParticle("garen_bladestormcrit_tar.troy");
        PreloadParticle("garen_keeper0fpeace_tar_01.troy");
        PreloadSpell("garenbladestormleave");
        PreloadParticle("shen_feint_self_deactivate.troy");
        PreloadParticle("spelleffect_proc.troy");
        PreloadSpell("garenrecoupdebuff");
        PreloadSpell("garenrecouperate1");
        PreloadSpell("garenrecoupdebuff");
        PreloadParticle("garen_heal.troy");
        PreloadParticle("global_heal.troy");
        PreloadParticle("garen_commandingpresence_unit_buf_self.troy");
        PreloadParticle("garen_command_cas.troy");
        PreloadSpell("garenkillbuff");
        PreloadSpell("garencommandkill");
        PreloadParticle("garen_commandingpresence_unit_buf.troy");
        PreloadSpell("garenrecoupdebuff");
        PreloadSpell("garenrecouperate1");
        PreloadSpell("garenrecoupdebuff");
        PreloadParticle("garen_heal.troy");
        PreloadSpell("garenrecouperateon");
        PreloadSpell("garenjusticeprecast");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("garenrecouperateon");
        PreloadSpell("garencommandkill");
        PreloadParticle("shatter_tar.troy");
        PreloadParticle("bloodslash.troy");
        PreloadParticle("shatter_nova.troy");
        PreloadSpell("shatter");
        PreloadSpell("equipmentmastery");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("counterstrikedodgeup");
        PreloadSpell("relentlessassault");
        PreloadSpell("counterstrikecancast");
        PreloadSpell("championchampiondelta");
        PreloadParticle("shatterready_buf.troy");
        PreloadParticle("armsmaster_empower_self_01.troy");
        PreloadParticle("armsmaster_empower_buf.troy");
        PreloadParticle("empowertwohit_tar.troy");
        PreloadSpell("empowertwo");
        PreloadSpell("relentlessassaultmarker");
        PreloadParticle("empower_buf.troy");
        PreloadSpell("empowercleave");
        PreloadParticle("tiamatmelee_itm.troy");
        PreloadSpell("empower");
        PreloadSpell("rebirthready");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("swaintorment");
        PreloadSpell("armsmasterrelentlesscounter");
        PreloadSpell("relentlessassaultdebuff");
        PreloadSpell("relentlessassaultmarker");
        PreloadSpell("armsmasterrelentlessmr");
        PreloadParticle("counterstrike_cas.troy");
        PreloadSpell("counterstrikecancast");
        PreloadSpell("counterstrikecancast");
        PreloadSpell("leapstrikespeed");
        PreloadSpell("empowertwo");
        PreloadSpell("relentlessassaultmarker");
        PreloadParticle("counterstrike_ready.troy");
        PreloadParticle("counterstrike_dodged.troy");
        PreloadSpell("sharedwardbuff");
        PreloadSpell("leapstrike");
        PreloadSpell("shatteraura");
        PreloadSpell("shatterselfbonus");
        PreloadSpell("tarichammerinternal");
        PreloadSpell("gemcraft");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("empower");
        PreloadSpell("relentlessassaultmarker");
        PreloadSpell("relentlessassaultdebuff");
        PreloadParticle("crowstorm_green_cas.troy");
        PreloadParticle("crowstorm_red_cas.troy");
        PreloadParticle("party_hornconfetti.troy");
        PreloadParticle("summoner_flashback.troy");
        PreloadParticle("summoner_cast.troy");
        PreloadParticle("summoner_flash.troy");
        PreloadSpell("paranoiamisschance");
        PreloadSpell("paranoiamisschance");
        PreloadSpell("paranoia");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("consecrationaura_tar.troy");
        PreloadParticle("ahri_passiveheal.troy");
        PreloadParticle("ahri_passive_tar.troy");
        PreloadSpell("ahrisoulcrusher2");
        PreloadSpell("globaldrain");
        PreloadSpell("ahrisoulcrushercounter");
        PreloadParticle("lifeaura.troy");
        PreloadParticle("guardianangel_tar.troy");
        PreloadSpell("ahritumble");
        PreloadParticle("ahri_spiritrush_cas.troy");
        PreloadParticle("ahri_orb_cas.troy");
        PreloadSpell("ahritumblekick");
        PreloadParticle("akali_shadowdance_tar.troy");
        PreloadParticle("irelia_gotasu_tar.troy");
        PreloadParticle("nickoftime_tar.troy");
        PreloadSpell("chronorevive");
        PreloadParticle("timebomb_green.troy");
        PreloadParticle("timebomb_red.troy");
        PreloadParticle("timebombexplo.troy");
        PreloadSpell("timebombcountdown");
        PreloadSpell("timebomb");
        PreloadCharacter("zilean");
        PreloadParticle("ahri_spiritrush_mis.troy");
        PreloadParticle("ahri_foxfire_obd-sound.troy");
        PreloadSpell("unlockanimation");
        PreloadParticle("ahri_foxfire_cas.troy");
        PreloadParticle("ahri_foxfire_weapon_cas.troy");
        PreloadSpell("ahrifoxfire");
        PreloadSpell("ahrifoxfiremissile");
        PreloadSpell("timebombcountdown");
        PreloadParticle("ahri_passiveheal.troy");
        PreloadSpell("globaldrain");
        PreloadParticle("ahri_orb_tar.troy");
        PreloadParticle("ahri_passive_tar.troy");
        PreloadSpell("ahrisoulcrusher5");
        PreloadSpell("ahrisoulcrushercounter");
        PreloadSpell("ahriorbdamage");
        PreloadSpell("ahriorbdamagesilence");
        PreloadSpell("timewarpslow");
        PreloadParticle("ahri_passiveheal.troy");
        PreloadParticle("ahri_passive_tar.troy");
        PreloadSpell("globaldrain");
        PreloadSpell("ahrisoulcrushercounter");
        PreloadParticle("ahri_charm_tar.troy");
        PreloadSpell("ahriseduce");
        PreloadParticle("ahri_passiveheal.troy");
        PreloadParticle("ahri_passive_tar.troy");
        PreloadSpell("globaldrain");
        PreloadSpell("ahrisoulcrushercounter");
        PreloadSpell("ahrifoxfiremissiletwo");
        PreloadSpell("ahrisoulcrusher3");
        PreloadParticle("ahri_charm_buf.troy");
        PreloadSpell("Ahriorbdamagesilence");
        PreloadParticle("ahri_passiveheal.troy");
        PreloadSpell("globaldrain");
        PreloadParticle("ahri_orb_tar.troy");
        PreloadParticle("ahri_passive_tar.troy");
        PreloadSpell("ahrisoulcrusher5");
        PreloadSpell("ahrisoulcrushercounter");
        PreloadSpell("ahrifoxfiremissiletag");
        PreloadSpell("ahrifoxfiremissiletagtwo");
        PreloadSpell("ahrisoulcrusher");
        PreloadParticle("jaxrelentlessassaultshield_hit.troy");
        PreloadSpell("heightenedlearning");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("chronorefresh_tar.troy");
        PreloadSpell("empowertwo");
        PreloadSpell("relentlessassaultdebuff");
        PreloadParticle("relentlessassault_tar.troy");
        PreloadSpell("ahriidleparticle");
        PreloadSpell("ahripassiveparticle");
        PreloadSpell("Ahrisoulcrusher4");
        PreloadSpell("fiddlesticksdarkwindmissile");
        PreloadSpell("darkwind");
        PreloadParticle("party_darkwind_tar.troy");
        PreloadParticle("darkwind_tar.troy");
        PreloadSpell("fearmonger_marker");
        PreloadParticle("drain.troy");
        PreloadSpell("globaldrain");
        PreloadParticle("party_drainglow.troy");
        PreloadParticle("party_hornconfetti.troy");
        PreloadParticle("ahri_orb.troy");
        PreloadSpell("ahripassiveparticle");
        PreloadSpell("ahriidleparticle");
        PreloadParticle("ahri_passive.troy");
        PreloadSpell("draincheck");
        PreloadSpell("fiddlesticksdarkwindmissile");
        PreloadSpell("darkwind");
        PreloadParticle("party_darkwind_tar.troy");
        PreloadParticle("darkwind_tar.troy");
        PreloadSpell("ahriidleparticle");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("skarner_exoskeleon_shatter.troy");
        PreloadSpell("unlockanimation");
        PreloadSpell("skarnerexoskeleton");
        PreloadParticle("skarner_ult_beam.troy");
        PreloadParticle("skarner_ult_tail_tip.troy");
        PreloadParticle("skarner_ult_tar_01.troy");
        PreloadParticle("skarner_ult_tar_04.troy");
        PreloadParticle("skarner_ult_tar_03.troy");
        PreloadSpell("suppression");
        PreloadSpell("skarnerimpale");
        PreloadSpell("skarnerimpalebuff");
        PreloadParticle("rallyingbanner_itm.troy");
        PreloadSpell("unstoppableforcestun");
        PreloadParticle("unstoppableforce_cas.troy");
        PreloadSpell("unstoppableforcemarker");
        PreloadParticle("unstoppableforce_tar.troy");
        PreloadSpell("unstoppableforcestun");
        PreloadParticle("unstoppableforce_stun.troy");
        PreloadParticle("heimerdinger_ch1_grenade_tar.troy");
        PreloadParticle("heimerdinger_ch1_grenade_unit_tar.troy");
        PreloadSpell("blindingdart");
        PreloadSpell("skarnerimpale");
        PreloadCharacter("testcuberender");
        PreloadSpell("expirationtimer");
        PreloadSpell("uraniumroundshit");
        PreloadParticle("absolutezero_tar.troy");
        PreloadParticle("heimerdinger_ch1_grenade_tar.troy");
        PreloadParticle("heimerdinger_ch1_grenade_unit_tar.troy");
        PreloadSpell("blindingdart");
        PreloadParticle("heimerdinger_slowaura_self.troy");
        PreloadSpell("h28gevolutionturret");
        PreloadCharacter("heimertblue");
        PreloadSpell("h28gevolutionturretspell1");
        PreloadSpell("h28gevolutionturretspell2");
        PreloadSpell("h28gevolutionturretspell3");
        PreloadSpell("explosivecartridges");
        PreloadCharacter("heimertred");
        PreloadSpell("uraniumrounds");
        PreloadCharacter("heimertgreen");
        PreloadCharacter("heimertyellow");
        PreloadSpell("h28gevolutionturret");
        PreloadSpell("upgradeslow");
        PreloadSpell("upgradebuff");
        PreloadParticle("heimerdinger_turret_birth.troy");
        PreloadSpell("h28gevolutionturretspell2");
        PreloadSpell("h28gevolutionturretspell3");
        PreloadCharacter("heimertblue");
        PreloadSpell("upgradeslow");
        PreloadCharacter("heimertred");
        PreloadSpell("explosivecartridges");
        PreloadCharacter("heimertgreen");
        PreloadSpell("uraniumrounds");
        PreloadCharacter("heimertyellow");
        PreloadSpell("upgrade!!!proof");
        PreloadSpell("seismicshardbuff");
        PreloadSpell("mordekaisercotgpetslow");
        PreloadSpell("mordekaisercotgpetbuff2");
        PreloadSpell("mordekaisercotgrevive");
        PreloadSpell("mordekaisercotgpetbuff");
        PreloadParticle("global_slow.troy");
        PreloadCharacter("heimerdinger");
        PreloadSpell("uraniumroundshit");
        PreloadCharacter("heimerdinger");
        PreloadCharacter("heimerdinger");
        PreloadCharacter("heimerdinger");
        PreloadCharacter("heimerdinger");
        PreloadCharacter("heimerdinger");
        PreloadSpell("chilled");
        PreloadParticle("mordakaiser_maceofspades_tar2.troy");
        PreloadSpell("mordekaisernukeofthebeastdmg");
        PreloadParticle("mordekeiser_cotg_skin.troy");
        PreloadParticle("mordekaiser_cotg_ring.troy");
        PreloadSpell("mordekaisercotgself");
        PreloadSpell("mordekaisercotgpetbuff");
        PreloadSpell("mordekaisercotgpetdmg");
        PreloadSpell("taunt");
        PreloadParticle("mordekeiser_cotg_tar.troy");
        PreloadSpell("mordekaisercotgdot");
        PreloadSpell("mordekaisercotgrevive");
        PreloadSpell("uraniumroundshit");
        PreloadParticle("tiamatmelee_itm.troy");
        PreloadCharacter("heimerdinger");
        PreloadSpell("taunt");
        PreloadSpell("taunt");
        PreloadSpell("mordekaisercotgpetbuff2");
        PreloadCharacter("heimerdinger");
        PreloadSpell("upgradeslow");
        PreloadParticle("absolutezero_tar.troy");
        PreloadCharacter("heimerdinger");
        PreloadSpell("chilled");
        PreloadSpell("yorickreviveallyself");
        PreloadSpell("yorickradelay");
        PreloadSpell("h28gevolutionturret");
        PreloadCharacter("heimerdinger");
        PreloadSpell("upgradeslow");
        PreloadParticle("absolutezero_tar.troy");
        PreloadSpell("heimerdingerturrettimer");
        PreloadSpell("heimerdingerturretready");
        PreloadSpell("h28gevolutionturret");
        PreloadSpell("mordekaisercreepingdeathdebuff");
        PreloadParticle("mordekaiser_creepingdeath_auragold.troy");
        PreloadParticle("mordekaiser_creepingdeath_aurared.troy");
        PreloadParticle("mordekaiser_creepingdeath_aura.troy");
        PreloadParticle("mordekaiser_creepingdeath_tar.troy");
        PreloadSpell("mordekaisercreepingdeathcheck");
        PreloadSpell("mordekaisercreepingdeathdebuff");
        PreloadParticle("landslide_buf.troy");
        PreloadSpell("mordekaisersyphonparticle");
        PreloadParticle("mordakaiser_maceofspades_tar.troy");
        PreloadSpell("mordekaisermaceofspadesdmg");
        PreloadParticle("landslide_blue_nova.troy");
        PreloadParticle("landslide_nova.troy");
        PreloadSpell("landslidedebuff");
        PreloadParticle("malphite_enrage_glow.troy");
        PreloadSpell("root");
        PreloadParticle("malphite_enrage_buf.troy");
        PreloadSpell("obduracybuff");
        PreloadSpell("mordekaisercreepingdeathcheck");
        PreloadSpell("mordekaisercreepingdeath");
        PreloadSpell("mordekaisersyphondmg");
        PreloadSpell("mordekaisersyphonparticle");
        PreloadParticle("mordakaiser_siphonofdestruction_tar_02.troy");
        PreloadParticle("mordakaiser_siphonofdestruction_tar.troy");
        PreloadParticle("obduracy_off.troy");
        PreloadSpell("root");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("heimerdingerturretdetonation");
        PreloadSpell("techmaturgicalicon");
        PreloadSpell("heimerdingerturretready");
        PreloadParticle("skarner_crystal_slash_activate_l.troy");
        PreloadParticle("skarner_crystal_slash_activate_r.troy");
        PreloadParticle("malphitecleaveenragedhit.troy");
        PreloadParticle("malphitecleavehit.troy");
        PreloadParticle("globalhit_physical.troy");
        PreloadSpell("skarnervirulentslashenergy1");
        PreloadSpell("unlockanimation");
        PreloadSpell("skarnervirulentslash");
        PreloadParticle("skarner_crystal_slash_mini_nova.troy");
        PreloadParticle("skarner_crystal_slash_buf.troy");
        PreloadParticle("chogath_basic_attack_01.troy");
        PreloadParticle("skarner_crystal_slash_tar.troy");
        PreloadSpell("skarnervirulentslashslow");
        PreloadParticle("mordakaiser_death_01.troy");
        PreloadSpell("malphiteshieldbeenhit");
        PreloadSpell("malphiteshieldeffect");
        PreloadSpell("malphitecleave");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("malphiteshield");
        PreloadSpell("championchampiondelta");
        PreloadSpell("mordekaiserdeathparticle");
        PreloadSpell("championchampiondelta");
        PreloadSpell("mordekaiserironman");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("techmaturgicalrepairbots");
        PreloadSpell("ifhasbuffcheck");
        PreloadSpell("h28gevolutionturret");
        PreloadSpell("h28gevolutionturretspell1");
        PreloadSpell("h28gevolutionturretspell2");
        PreloadSpell("h28gevolutionturretspell3");
        PreloadSpell("heimerdingerturretcounter");
        PreloadSpell("heimerdingerturretready");
        PreloadSpell("upgrade!!!");
        PreloadSpell("orianaspellsword");
        PreloadSpell("orianaghostself");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("malphiteshieldremoval");
        PreloadSpell("malphiteshieldbeenhit");
        PreloadSpell("skarnerbrushsound");
        PreloadSpell("skarnerbrushcheck");
        PreloadParticle("skarner_fracture_cas.troy");
        PreloadParticle("skarner_fracture_tar.troy");
        PreloadParticle("skarner_fracture_tar_consume.troy");
        PreloadParticle("galio_bulwark_heal.troy");
        PreloadSpell("skarnerfracture");
        PreloadSpell("skarnerfracturemissile");
        PreloadSpell("skarnerbrushcheck");
        PreloadSpell("skarnerimpaleflashlock");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("camouflagecheck");
        PreloadSpell("camouflagebuff");
        PreloadParticle("mordakaiser_siphonofdestruction_self.troy");
        PreloadParticle("mordakeiser_hallowedstrike_self_skin.troy");
        PreloadSpell("toxicshot");
        PreloadSpell("camouflage");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("teemomushrooms");
        PreloadSpell("teemomushroommanager");
        PreloadSpell("teemomovequickpassive");
        PreloadSpell("teemomushrooms");
        PreloadSpell("sowthewind");
        PreloadSpell("tailwind");
        PreloadSpell("tailwindself");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("move");
        PreloadParticle("shroommine.troy");
        PreloadSpell("slow");
        PreloadParticle("reapthewhirlwind_green_cas.troy");
        PreloadParticle("reapthewhirlwind_red_cas.troy");
        PreloadSpell("moveaway");
        PreloadSpell("reapthewhirlwind");
        PreloadSpell("move");
        PreloadSpell("camouflagecheck");
        PreloadSpell("recall");
        PreloadSpell("odincapturechannel");
        PreloadSpell("summonerteleport");
        PreloadSpell("camouflagestealth");
        PreloadParticle("teemoeaster2.troy");
        PreloadParticle("teemoeaster3.troy");
        PreloadSpell("stealth");
        PreloadSpell("bantamarmor");
        PreloadParticle("shroommine.troy");
        PreloadSpell("bantamtraptarget");
        PreloadSpell("slow");
        PreloadCharacter("teemomushroom");
        PreloadSpell("sharedwardbuff");
        PreloadParticle("eyeofthestorm_frost_ally_buf.troy");
        PreloadParticle("eyeofthestorm_buf.troy");
        PreloadSpell("jannaeotsbuff");
        PreloadSpell("teemomushrooms");
        PreloadSpell("teemomushroomcounter");
        PreloadSpell("teemomushrooms");
        PreloadSpell("move");
        PreloadParticle("sowthewind_tar.troy");
        PreloadParticle("sowthewind_buf.troy");
        PreloadSpell("slow");
        PreloadSpell("move");
        PreloadParticle("howlinggale_frost_cas.troy");
        PreloadParticle("howlinggale_cas.troy");
        PreloadCharacter("testcube");
        PreloadCharacter("testcuberender");
        PreloadSpell("howlinggalespell");
        PreloadSpell("howlinggalespell1");
        PreloadSpell("howlinggalespell2");
        PreloadSpell("howlinggalespell3");
        PreloadSpell("expirationtimer");
        PreloadSpell("sowthewind");
        PreloadSpell("sowthewindcastmarker");
        PreloadSpell("move");
        PreloadParticle("movequick_buf2.troy");
        PreloadSpell("teemomovequickspeed");
        PreloadSpell("toxicshotparticle");
        PreloadSpell("ireliaidleparticle");
        PreloadParticle("irelia_ult_magic_resist.troy");
        PreloadParticle("irelia_ult_dagger_active_04.troy");
        PreloadSpell("ireliatranscendentbladesspell");
        PreloadSpell("ireliatranscendentblades");
        PreloadSpell("unlockanimation");
        PreloadParticle("shen_feint_self_deactivate.troy");
        PreloadParticle("shen_feint_block.troy");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("shenwayoftheninjamarker");
        PreloadSpell("isninja");
        PreloadParticle("irelia_ult_tar.troy");
        PreloadSpell("root");
        PreloadSpell("globaldrain");
        PreloadParticle("tremors_cas.troy");
        PreloadCharacter("shen");
        PreloadSpell("luxlightbinding");
        PreloadSpell("shenwayoftheninjaaura");
        PreloadParticle("shen_teleport_target_v2.troy");
        PreloadSpell("luxilluminatingfraulein");
        PreloadSpell("luxlightbinding");
        PreloadParticle("shen_standunited_shield_v2.troy");
        PreloadSpell("defensiveballcurl");
        PreloadCharacter("rammuspb");
        PreloadParticle("powerballstop.troy");
        PreloadParticle("powerballhit.troy");
        PreloadSpell("powerballslow");
        PreloadSpell("powerballstun");
        PreloadSpell("powerball");
        PreloadParticle("shen_vorpalstar_lifetap_tar_02.troy");
        PreloadParticle("shen_life_tap_tar_02.troy");
        PreloadSpell("shenvorpalstarheal");
        PreloadParticle("shen_vorpalstar_tar.troy");
        PreloadParticle("shen_kistrike_ready_indicator.troy");
        PreloadParticle("shenteleport_v2.troy");
        PreloadSpell("shenstandunitedshield");
        PreloadSpell("shenstandunitedtarget");
        PreloadParticle("globalhit_red.troy");
        PreloadSpell("shenwayoftheninjaaura");
        PreloadSpell("isninja");
        PreloadParticle("eternalthirst_buf.troy");
        PreloadSpell("toxicshotapplicator");
        PreloadParticle("movequick_buf.troy");
        PreloadSpell("puncturingtauntarmordebuff");
        PreloadSpell("taunt");
        PreloadSpell("toxicshotattack");
        PreloadSpell("teemomovequickdebuff");
        PreloadSpell("teemomovequickspeed");
        PreloadSpell("movequick");
        PreloadSpell("defensiveballcurl");
        PreloadSpell("shenshadowdashpassive");
        PreloadSpell("shenshadowdashcooldown");
        PreloadSpell("defensiveballcurl");
        PreloadSpell("powerball");
        PreloadSpell("spikedshell");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadParticle("irelia_equilibriumstrike_tar_01.troy");
        PreloadSpell("slow");
        PreloadParticle("irelia_equilibriumstrike_tar_02.troy");
        PreloadSpell("sharedwardbuff");
        PreloadSpell("shenshadowdashcooldown");
        PreloadParticle("shen_shadowdash_mis.troy");
        PreloadParticle("shen_shadowdash_unit_impact.troy");
        PreloadParticle("global_taunt_multi_unit.troy");
        PreloadSpell("taunt");
        PreloadCharacter("rammusdbc");
        PreloadSpell("defensiveballcurlcancel");
        PreloadParticle("dbc_out.troy");
        PreloadSpell("defensiveballcurl");
        PreloadParticle("thornmail_tar.troy");
        PreloadParticle("irelia_gotasu_dash_02.troy");
        PreloadSpell("root");
        PreloadSpell("ireliagatotsu");
        PreloadSpell("ireliagatotsudashparticle");
        PreloadParticle("irelia_gotasu_tar.troy");
        PreloadParticle("irelia_hitenstyle_passive.troy");
        PreloadParticle("irelia_hitenstlye_passive_glow.troy");
        PreloadSpell("ireliahitenstyle");
        PreloadSpell("ireliahitenstylecharged");
        PreloadParticle("irelia_gotasu_ability_indicator.troy");
        PreloadParticle("irelia_gotasu_mana_refresh.troy");
        PreloadParticle("irelia_gotasu_cas.troy");
        PreloadParticle("irelia_gotasu_cast_01.troy");
        PreloadParticle("irelia_gotasu_cast_02.troy");
        PreloadSpell("ireliagatotsudash");
        PreloadSpell("ireliahitenstyle");
        PreloadCharacter("monkeyking");
        PreloadSpell("monkeykingdecoydummy");
        PreloadSpell("monkeykingdecoyclone");
        PreloadSpell("monkeykingdecoystealth");
        PreloadParticle("alzaharnullzoneflash.troy");
        PreloadParticle("alzaharvoidportal_flat_green.troy");
        PreloadParticle("alzaharvoidportal_flat_red.troy");
        PreloadSpell("ifhasbuffcheck");
        PreloadSpell("alzaharvoidlingcount");
        PreloadSpell("alzaharnullzone");
        PreloadSpell("alzaharvoidling");
        PreloadSpell("alzaharrecentvis");
        PreloadCharacter("malzahar");
        PreloadSpell("alzaharmaleficvisions");
        PreloadSpell("ifhasbuffcheck");
        PreloadSpell("alzaharvoidlingcount");
        PreloadSpell("monkeykingspintowin");
        PreloadSpell("monkeykingnimbuskick");
        PreloadSpell("monkeykingdecoystealth");
        PreloadParticle("monkeyking_copy.troy");
        PreloadSpell("root");
        PreloadSpell("monkeykingkillclonew");
        PreloadSpell("sonahymnpcdeathrecapfix");
        PreloadSpell("ifhasbuffcheck");
        PreloadParticle("sonahymnofvalor_aura.troy");
        PreloadSpell("sonahymnofvaloraurab");
        PreloadSpell("sonaariaofperseverance");
        PreloadSpell("sonasongofdiscord");
        PreloadSpell("sonapowerchord");
        PreloadSpell("sonahymnofvalor");
        PreloadSpell("sonahymnofvalorcheck");
        PreloadSpell("sonahymnofvaloraura");
        PreloadSpell("unlockanimation");
        PreloadParticle("sonapowerchordready_violet.troy");
        PreloadSpell("sonahymnofvalorcheck");
        PreloadSpell("sonaariaofperseverancecheck");
        PreloadSpell("sonasongofdiscordattackupgrade");
        PreloadParticle("sonasongofdiscord_aura.troy");
        PreloadSpell("sonasongofdiscordaurab");
        PreloadParticle("spellflux_tar2.troy");
        PreloadParticle("desperatepower_aoe.troy");
        PreloadParticle("manaleach_tar.troy");
        PreloadParticle("overload_tar.troy");
        PreloadSpell("root");
        PreloadSpell("desperatepower");
        PreloadParticle("desperatepower_aoe.troy");
        PreloadParticle("manaleach_tar.troy");
        PreloadSpell("sonasongofdiscordhaste");
        PreloadSpell("desperatepower");
        PreloadSpell("sonasoundoff");
        PreloadParticle("sonahymnofvalorsound.troy");
        PreloadParticle("manaleach_tar2.troy");
        PreloadSpell("ifhasbuffcheck");
        PreloadSpell("slow");
        PreloadSpell("sonasongpcdeathrecapfix");
        PreloadSpell("sonahymnofvalor");
        PreloadSpell("sonaariaofperseverance");
        PreloadSpell("sonapowerchord");
        PreloadSpell("sonasongofdiscord");
        PreloadSpell("sonasongofdiscordcheck");
        PreloadSpell("sonasongofdiscordhaste");
        PreloadSpell("sonasongofdiscordaura");
        PreloadSpell("unlockanimation");
        PreloadParticle("sonapowerchordready_blue.troy");
        PreloadSpell("sonaariaofperseverancecheck");
        PreloadSpell("sonasongofdiscordcheck");
        PreloadSpell("sonahymnofvalorattackupgrade");
        PreloadSpell("suppression");
        PreloadSpell("ifhasbuffcheck");
        PreloadSpell("alzaharvoidlingcount");
        PreloadSpell("alzaharnethergraspsound");
        PreloadParticle("alzaharnethergrasp_beam.troy");
        PreloadSpell("root");
        PreloadSpell("alzaharnethergrasp");
        PreloadSpell("sonasoundoff");
        PreloadSpell("ifhasbuffcheck");
        PreloadSpell("slow");
        PreloadParticle("runeprison_tar.troy");
        PreloadSpell("desperatepower");
        PreloadParticle("desperatepower_aoe.troy");
        PreloadParticle("manaleach_tar.troy");
        PreloadSpell("sonasoundoff");
        PreloadParticle("sonaariaofperserverancesound.troy");
        PreloadSpell("silence");
        PreloadParticle("voidflash.troy");
        PreloadParticle("voidportal_green.troy");
        PreloadParticle("voidportal_red.troy");
        PreloadSpell("alzaharcallr");
        PreloadSpell("ifhasbuffcheck");
        PreloadSpell("alzaharvoidlingcount");
        PreloadCharacter("testcuberender");
        PreloadCharacter("malzahar");
        PreloadParticle("sonaariaofper_aura.troy");
        PreloadSpell("sonaariaofperseveranceaurab");
        PreloadSpell("sonaariaofperseverance");
        PreloadSpell("sonaariaofperseverancecheck");
        PreloadParticle("global_heal.troy");
        PreloadSpell("sonaariaofperseveranceaura");
        PreloadSpell("unlockanimation");
        PreloadSpell("sonaariashield");
        PreloadCharacter("malzahar");
        PreloadSpell("arcanemastery");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("overload");
        PreloadParticle("sonapowerchordready_green.troy");
        PreloadSpell("sonaariaofperseveranceupgrade");
        PreloadCharacter("malzahar");
        PreloadParticle("global_heal.troy");
        PreloadSpell("sonaariashield");
        PreloadParticle("irelia_ult_energy_ready.troy");
        PreloadSpell("ifhasbuffcheck");
        PreloadSpell("sonapowerchorddebuff");
        PreloadSpell("sonaariapcdeathrecapfix");
        PreloadSpell("sonasoundoff");
        PreloadSpell("sonaariaofperseverancesound");
        PreloadSpell("sonahymnofvalorsound");
        PreloadSpell("sonasongofdiscordsound");
        PreloadSpell("sonahymnofvaloraura");
        PreloadSpell("sonaariaofperseveranceaura");
        PreloadSpell("sonasongofdiscordaura");
        PreloadSpell("sonahymnofvalorsound");
        PreloadSpell("sonaariaofperseverancesound");
        PreloadSpell("sonasongofdiscordsound");
        PreloadSpell("sonapowerchordcount");
        PreloadSpell("sonaariaofperseverancecheck");
        PreloadSpell("sonahymnofvalorcheck");
        PreloadSpell("sonasongofdiscordcheck");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("sonasoundoff");
        PreloadSpell("sonahymnofvaloraurab");
        PreloadSpell("sonaariaofperseveranceaurab");
        PreloadSpell("sonasongofdiscordaurab");
        PreloadSpell("sonapowerchordcount");
        PreloadSpell("sonapowerchord");
        PreloadParticle("sonapowerchord_buf.troy");
        PreloadSpell("ireliaionianduelist");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("ireliaidleparticle");
        PreloadSpell("ireliahitenstyle");
        PreloadSpell("ireliaionianduelist");
        PreloadParticle("irelia_new_passive_01.troy");
        PreloadParticle("irelia_new_passive_02.troy");
        PreloadParticle("irelia_new_passive_03.troy");
        PreloadSpell("monkeykingspintowin");
        PreloadParticle("xenziou_battle_cry_weapon_01.troy");
        PreloadParticle("monkey_king_crushingblow_tar.troy");
        PreloadSpell("monkeykingdoubleattack");
        PreloadSpell("monkeykingdoubleattackdebuff");
        PreloadParticle("monkeykingclone.troy");
        PreloadSpell("root");
        PreloadParticle("meditate_eff.troy");
        PreloadSpell("resistantskin");
        PreloadParticle("voidlingflash.troy");
        PreloadSpell("alzaharvoidlingphase2");
        PreloadSpell("alzaharvoidlingphase3");
        PreloadParticle("monkeyking_w_cas_team_id_green.troy");
        PreloadParticle("monkeyking_w_cas_team_id_red.troy");
        PreloadParticle("monkeyking_w_death_team_id_green.troy");
        PreloadParticle("monkeyking_w_death_team_id_red.troy");
        PreloadSpell("monkeykingpassive");
        PreloadSpell("alzahardeathparticle");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("alzaharvoidlingdetonation");
        PreloadSpell("alzaharcallr");
        PreloadSpell("monkeykingkillclonee");
        PreloadParticle("cassiopeiadeath.troy");
        PreloadParticle("monkeykingphremoverocks.troy");
        PreloadParticle("monkey_king_crushingblow_armor_debuff.troy");
        PreloadSpell("monkeykingclonesweep");
        PreloadParticle("monkey_king_ult_spin.troy");
        PreloadParticle("garen_weapon_glow_01.troy");
        PreloadSpell("monkeykingdecoystealth");
        PreloadSpell("monkeykingspintowin");
        PreloadParticle("monkey_king_ult_unit_tar.troy");
        PreloadSpell("monkeykingspinmarkerorder");
        PreloadSpell("monkeykingspinmarkerchaos");
        PreloadParticle("monkey_king_ult_unit_tar_02.troy");
        PreloadSpell("monkeykingspinknockup");
        PreloadSpell("monkeykingspintowinleave");
        PreloadSpell("alzaharvoidlingcount");
        PreloadSpell("alzaharsummonvoidling");
        PreloadSpell("monkeykingclonefull");
        PreloadSpell("monkeykingclone");
        PreloadCharacter("monkeykingclone");
        PreloadSpell("monkeykingclonespellcast");
        PreloadParticle("leblanc_mirrorimagepoof.troy");
        PreloadParticle("olaf_viciousstrikes_weapon_glow.troy");
        PreloadParticle("olaf_viciousstrikes_heal.troy");
        PreloadParticle("monkeyking_q_self_mis.troy");
        PreloadSpell("monkeykingkillclone");
        PreloadSpell("monkeykingnimbuskickfx");
        PreloadParticle("voidlingtransform.prt");
        PreloadSpell("alzaharvoidling");
        PreloadCharacter("Malzaharvoidling");
        PreloadCharacter("malzaharvoidling");
        PreloadSpell("alzaharvoidling");
        PreloadSpell("ifhasbuffcheck");
        PreloadSpell("alzaharsummonvoidling");
        PreloadParticle("alzaharvoidling_evo.troy");
        PreloadParticle("monkeyking_q_cas.troy");
        PreloadSpell("monkeykingnimbuskick");
        PreloadSpell("monkeykingclone");
        PreloadCharacter("monkeykingclone");
        PreloadCharacter("monkeykingflying");
        PreloadSpell("monkeykingnimbuskickclone");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("monkeykingpassive");
        PreloadSpell("monkeykingdeathparticle");
        PreloadParticle("alzahar_death.troy");
        PreloadSpell("root");
        PreloadParticle("monkeyking_q_unit_tar.troy");
        PreloadParticle("monkeyking_q_self_mis.troy");
        PreloadSpell("monkeykingnimbuskickfx");
        PreloadSpell("monkeykingnimbusas");
        PreloadParticle("galio_bulwark_heal.troy");
        PreloadParticle("galio_windtunnel_rune.troy");
        PreloadParticle("galio_windtunnel_rune_team_red.troy");
        PreloadCharacter("galio");
        PreloadSpell("galiorighteousgustmissile");
        PreloadSpell("galiorighteousgusthaste");
        PreloadCharacter("testcube");
        PreloadParticle("galio_bullwark_target_shield_01.troy");
        PreloadParticle("galio_bullwark_target_shield_01_self.troy");
        PreloadSpell("galiobulwarkheal");
        PreloadParticle("galio_bullwark_shield_activate_self.troy");
        PreloadParticle("galio_bullwark_shield_activate.troy");
        PreloadSpell("galiorighteousgustmissile");
        PreloadCharacter("galio");
        PreloadParticle("galio_windtunnel_unit_tar.troy");
        PreloadCharacter("testcuberender");
        PreloadSpell("galiorighteousgusthaste");
        PreloadParticle("xenziou_heal_passive.troy");
        PreloadParticle("galio_windtunnel_speed_buf.troy");
        PreloadSpell("root");
        PreloadParticle("viktor_chaosstorm_green.troy");
        PreloadParticle("viktor_chaosstorm_red.troy");
        PreloadSpell("viktorchaosstorm");
        PreloadParticle("viktor_chaosstorm_beam.troy");
        PreloadParticle("viktor_chaosstorm_hit.troy");
        PreloadSpell("root");
        PreloadParticle("viktor_chaosstorm_damage_sound.troy");
        PreloadSpell("xenzhaobattlecrypassive");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("xenzhaopuncture");
        PreloadSpell("xenzhaobattlecrypassive");
        PreloadSpell("xenzhaobattlecryph");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("xenzhaopuncture");
        PreloadSpell("xenzhaobattlecrypassive");
        PreloadSpell("xenzhaobattlecryph");
        PreloadParticle("xen_ziou_battlecry_passive.troy");
        PreloadCharacter("tempmovablechar");
        PreloadSpell("infernalguardian");
        PreloadSpell("viktorchaosstormguide");
        PreloadSpell("viktorchaosstormaoe");
        PreloadSpell("viktorchaosstormtimer");
        PreloadSpell("viktorexpirationtimer");
        PreloadParticle("viktor_chaosstorm_beam.troy");
        PreloadParticle("viktor_chaosstorm_hit.troy");
        PreloadSpell("xenzhaobattlecryph");
        PreloadParticle("xen_ziou_battlecry_cas_05.troy");
        PreloadParticle("xen_ziou_battlecry_cas_03.troy");
        PreloadParticle("xen_ziou_battlecry_cas_02.troy");
        PreloadParticle("xenzhiou_battlecry_active.troy");
        PreloadParticle("xenziou_battle_cry_weapon_01.troy");
        PreloadParticle("viktor_chaosstorm_indicator.troy");
        PreloadParticle("viktor_chaosstorm_indicator_02.troy");
        PreloadSpell("viktorchaosstormguide");
        PreloadCharacter("testcube");
        PreloadSpell("viktorexpirationtimer");
        PreloadParticle("xenziou_chainattack_indicator.troy");
        PreloadParticle("xenziou_chainattack_03.troy");
        PreloadSpell("xenzhaocomboautofinish");
        PreloadSpell("xenzhaoknockup");
        PreloadParticle("xenziou_selfshield_01_magic.troy");
        PreloadParticle("xenziou_ult_cas.troy");
        PreloadParticle("xenziou_utl_tar_02.troy");
        PreloadParticle("xenziou_utl_tar.troy");
        PreloadParticle("xenziou_utl_tar_03.troy");
        PreloadSpell("xenzhaosweeparmor");
        PreloadParticle("xenziou_chainattack_02.troy");
        PreloadSpell("xenzhaocomboauto");
        PreloadSpell("xenzhaocomboautofinish");
        PreloadParticle("xenziou_chainattack_cas_01.troy");
        PreloadParticle("xenziou_chainattack_01.troy");
        PreloadSpell("xenzhaocombotarget");
        PreloadSpell("xenzhaocomboauto");
        PreloadParticle("xenziou_chainattack_indicator.troy");
        PreloadParticle("xenziou_chainattack_indicator.troy");
        PreloadParticle("xenziou_audaciouscharge_self_trail_01.troy");
        PreloadParticle("xenziou_audaciouscharge_tar_unit_instant.troy");
        PreloadSpell("xenzhaosweep");
        PreloadSpell("slow");
        PreloadParticle("xenziou_selfshield_01.troy");
        PreloadSpell("root");
        PreloadParticle("galio_beguilingstatue_taunt_indicator_team_green.troy");
        PreloadParticle("galio_beguilingstatue_taunt_indicator_team_red.troy");
        PreloadParticle("galio_talion_channel.troy");
        PreloadParticle("galio_talion_breakout.troy");
        PreloadParticle("galio_builingstatue_impact_01.troy");
        PreloadSpell("taunt");
        PreloadSpell("galioidolofdurandtaunt");
        PreloadParticle("galio_builingstatue_unit_impact_01.troy");
        PreloadSpell("galioidolofdurandmarker");
        PreloadSpell("galioidolofdurand");
        PreloadParticle("galio_taunt_unit_indicator.troy");
        PreloadParticle("galio_concussiveblast_mis_tar.troy");
        PreloadParticle("galio_concussiveblast_unit_tar.troy");
        PreloadParticle("galio_concussiveblast_unit_tar_02.troy");
        PreloadSpell("yomuspellsword");
        PreloadSpell("yomughostself");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("yomushockorb");
        PreloadSpell("scoutsbounty");
        PreloadSpell("volleyattack");
        PreloadParticle("bowmaster_basicattack_tar.troy");
        PreloadSpell("frostarrow");
        PreloadSpell("jarvanivmartialcadencecheck");
        PreloadParticle("jarvincritattack_tar.troy");
        PreloadParticle("viktorb_red.troy");
        PreloadParticle("jarvancataclysm_sound.troy");
        PreloadSpell("jarvanivcataclysm");
        PreloadSpell("unstoppableforcemarker");
        PreloadSpell("jarvanivcataclysmvisibility");
        PreloadSpell("jarvanivcataclysmsound");
        PreloadParticle("jarvancataclysm_tar.troy");
        PreloadCharacter("jarvanivwall");
        PreloadSpell("jarvanivcataclysmattack");
        PreloadSpell("globalwallpush");
        PreloadParticle("jarvanwallcrumble.troy");
        PreloadSpell("root");
        PreloadSpell("jarvanivcataclysmcheck");
        PreloadSpell("unstoppableforcemarker");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("jarvanivcataclysm");
        PreloadSpell("deathscaress");
        PreloadParticle("deathscaress_nova.prt");
        PreloadSpell("deathscaressfull");
        PreloadParticle("viktorentropicbeam_beam.troy");
        PreloadParticle("viktorentropicbeam_tar_beam.troy");
        PreloadParticle("viktorentropicbeam_tar.troy");
        PreloadParticle("viktorentropicbeam_hit.troy");
        PreloadSpell("viktordeathraybuff");
        PreloadSpell("viktordeathraydot");
        PreloadCharacter("maokaisproutling");
        PreloadSpell("viktorexpirationtimer");
        PreloadSpell("viktordeathray");
        PreloadSpell("deathscaress");
        PreloadParticle("eternalthirst_buf.troy");
        PreloadSpell("cannibalism");
        PreloadSpell("enragemaxhp");
        PreloadSpell("enrage");
        PreloadSpell("viktorpowertransfer");
        PreloadParticle("feelnopain_eff.troy");
        PreloadSpell("feelnopain");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("frostarrowapplicator");
        PreloadSpell("frostarrow");
        PreloadSpell("ashespiritofthehawkbubble");
        PreloadSpell("frostarrow");
        PreloadParticle("bowmaster_frosthawk_terminate.troy");
        PreloadParticle("bowmaster_frosthawk_terminate_02.troy");
        PreloadSpell("viktorpowertransferreturn");
        PreloadSpell("frostshot");
        PreloadSpell("haste");
        PreloadParticle("bowmaster_frosthawk_terminate.troy");
        PreloadParticle("bowmaster_frosthawk_terminate_02.troy");
        PreloadSpell("galiorunicskin");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("jarvanivdragonstrikebehindme");
        PreloadSpell("slashbeenhit");
        PreloadParticle("bloodslash.troy");
        PreloadSpell("jarvanivdragonstrikeph2");
        PreloadSpell("archersmark");
        PreloadSpell("focus");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("bowmasterfocusdisplay");
        PreloadParticle("jarvandemacianstandard_flag_hit.troy");
        PreloadSpell("jarvanivdragonstrikedebuff");
        PreloadSpell("jarvanivdragonstrikeph");
        PreloadSpell("jarvanivdragonstrikesound");
        PreloadParticle("caitlyn_peacemaker_tar_02.troy");
        PreloadParticle("jarvandragonstrike_debuff.troy");
        PreloadParticle("jarvandragonstrike_hit.troy");
        PreloadParticle("jarvandemacianstandard_shield.troy");
        PreloadParticle("olaf_axe_trigger.troy");
        PreloadParticle("olaf_axe_totem_team_id_green.troy");
        PreloadParticle("olaf_axe_totem_team_id_red.troy");
        PreloadSpell("olafaxeexpirationtimer2");
        PreloadSpell("olafberzerkerrage");
        PreloadParticle("olaf_axe_refresh_indicator.troy");
        PreloadParticle("olaf_axe_trigger_02.troy");
        PreloadParticle("jarvandemacianstandard_tar_green.troy");
        PreloadParticle("jarvandemacianstandard_tar_red.troy");
        PreloadParticle("jarvandemacianstandard_hit.troy");
        PreloadCharacter("jarvanivstandard");
        PreloadSpell("jarvanivdemacianstandard");
        PreloadParticle("jarvandemacianstandard_buf_green.troy");
        PreloadParticle("jarvandemacianstandard_buf_red.troy");
        PreloadSpell("norenderexpirationbuff");
        PreloadSpell("jarvanivdemacianstandardbuff");
        PreloadParticle("jarvandemacianstandard_mis.troy");
        PreloadCharacter("testcube");
        PreloadSpell("jarvanivdemacianstandarddelay");
        PreloadParticle("jarvangoldenaegis_buf.troy");
        PreloadParticle("jarvangoldenaegis_nova.troy");
        PreloadSpell("slow");
        PreloadParticle("jarvangoldenaegis_tar.troy");
        PreloadParticle("viktorb_yellow.troy");
        PreloadParticle("viktorb_blue.troy");
        PreloadParticle("viktorb_red.troy");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("viktorpassiveapperlev");
        PreloadSpell("championchampiondelta");
        PreloadParticle("viktor_idle.troy");
        PreloadParticle("summoner_flashback.troy");
        PreloadParticle("summoner_flash.troy");
        PreloadCharacter("swainraven");
        PreloadParticle("swain_metamorph.troy");
        PreloadParticle("swain_metamorph_02.troy");
        PreloadParticle("swain_demonform_idle.troy");
        PreloadSpell("swainbeamself");
        PreloadSpell("swainbeamtransition");
        PreloadSpell("swainmetamorphism");
        PreloadParticle("viktor_catalyst_green.troy");
        PreloadSpell("viktorgravitonfield");
        PreloadParticle("swain_disintegrationbeam_beam.troy");
        PreloadParticle("swain_disintegrationbeam_tar.troy");
        PreloadParticle("swain_disintegrationbeam_beam_idle.troy");
        PreloadSpell("swainbeamdamage");
        PreloadParticle("swain_disintegrationbeam_cas_end.troy");
        PreloadSpell("swainbeamexpirationtimer");
        PreloadSpell("slow");
        PreloadSpell("swainbeamdamageminion");
        PreloadSpell("swainbeam");
        PreloadCharacter("swainbeam");
        PreloadSpell("swainbeamself");
        PreloadSpell("resistantskin");
        PreloadSpell("swainbeamdamageminionnashor");
        PreloadSpell("swainbeamminion");
        PreloadSpell("swainmetamorphism");
        PreloadCharacter("swainnobird");
        PreloadSpell("swainbeamtransition");
        PreloadSpell("swainbeamself");
        PreloadParticle("swain_heal.troy");
        PreloadSpell("viktorgravitonfieldnostun");
        PreloadSpell("viktorgravitonfieldstun");
        PreloadParticle("nassus_godofdeath_aura.troy");
        PreloadParticle("nassus_godofdeath_transform.troy");
        PreloadCharacter("swainnobird");
        PreloadParticle("swain_disintegrationbeam_beam.troy");
        PreloadParticle("swain_disintegrationbeam_tar.troy");
        PreloadParticle("swain_disintegrationbeam_beam_idle.troy");
        PreloadParticle("swain_disintegrationbeam_cas_end.troy");
        PreloadSpell("swainbeamexpirationtimer");
        PreloadSpell("swainbeamdamage");
        PreloadSpell("swainbeamdamageminion");
        PreloadSpell("slow");
        PreloadParticle("swain_heal.troy");
        PreloadParticle("viktor_catalyst_fullmachine_green.troy");
        PreloadParticle("viktor_catalyst_fullmachine_red.troy");
        PreloadParticle("viktor_catalyst_prototype_green.troy");
        PreloadParticle("viktor_catalyst_prototype_red.troy");
        PreloadParticle("viktor_catalyst_green.troy");
        PreloadParticle("viktor_catalyst_red.troy");
        PreloadParticle("viktor_gravitonfield_deactivate_sound.troy");
        PreloadSpell("viktorgravitonfieldnostun");
        PreloadSpell("viktorgravitonfielddebuff");
        PreloadSpell("viktorgravitonfield");
        PreloadSpell("swainmetamorphism");
        PreloadCharacter("swainnobird");
        PreloadSpell("swainbeamtransition");
        PreloadSpell("swainbeamself");
        PreloadParticle("swain_heal.troy");
        PreloadSpell("globaldrain");
        PreloadSpell("viktorgravitonfieldaugment");
        PreloadSpell("swainmetamorphism");
        PreloadCharacter("swainnobird");
        PreloadSpell("swainbeamtransition");
        PreloadSpell("swainbeamself");
        PreloadSpell("destiny_marker");
        PreloadSpell("gate");
        PreloadSpell("sealfatemissile");
        PreloadCharacter("testcube");
        PreloadCharacter("testcuberender");
        PreloadSpell("expirationtimer");
        PreloadParticle("chronorefresh_tar.troy");
        PreloadParticle("cardmasterteleport_green.troy");
        PreloadParticle("cardmasterteleport_red.troy");
        PreloadSpell("destiny_marker");
        PreloadParticle("gatemarker_green.troy");
        PreloadParticle("gatemarker_red.troy");
        PreloadParticle("riftwalk_flashback.troy");
        PreloadSpell("riftwalk");
        PreloadParticle("riftwalk_flash.troy");
        PreloadParticle("gatemarker.troy");
        PreloadSpell("gatefix");
        PreloadSpell("destiny");
        PreloadSpell("gatefix");
        PreloadParticle("cardmasterteleport_red.troy");
        PreloadParticle("gatemarker_red.troy");
        PreloadParticle("gatemarker_green.troy");
        PreloadParticle("cardmasterteleport_green.troy");
        PreloadParticle("cardmasterteleportarrive.troy");
        PreloadSpell("gate");
        PreloadSpell("instagate");
        PreloadSpell("pickacard");
        PreloadSpell("pickacard");
        PreloadSpell("pickacard");
        PreloadSpell("cardmasterstackholder");
        PreloadSpell("cardmasterstackparticle");
        PreloadParticle("anniesparks.troy");
        PreloadParticle("card_blue.troy");
        PreloadParticle("card_red.troy");
        PreloadParticle("card_yellow.troy");
        PreloadSpell("pickacard");
        PreloadSpell("redcardlock");
        PreloadSpell("goldcardlock");
        PreloadSpell("bluecardlock");
        PreloadSpell("redcardpreattack");
        PreloadSpell("goldcardpreattack");
        PreloadSpell("bluecardpreattack");
        PreloadSpell("pickacard_tracker");
        PreloadSpell("forcepulsecancast");
        PreloadSpell("forcepulsecounter");
        PreloadSpell("slow");
        PreloadParticle("cardmaster_stackready.troy");
        PreloadParticle("card_yellow_tag.troy");
        PreloadParticle("deathscaress_nova.troy");
        PreloadSpell("forcepulsecancast");
        PreloadSpell("forcepulsecounter");
        PreloadSpell("slow");
        PreloadSpell("forcepulsecounter");
        PreloadSpell("forcepulsecancast");
        PreloadSpell("pickacard");
        PreloadParticle("kassadin_netherblade.troy");
        PreloadSpell("cardmasterslow");
        PreloadSpell("voidstoneattackspeedboost");
        PreloadSpell("pickacard");
        PreloadSpell("bluecardpreattack");
        PreloadParticle("pickacard_blue_tar.troy");
        PreloadSpell("cardmasterbluecardmana");
        PreloadParticle("soraka_infuse_ally_tar.troy");
        PreloadSpell("netherblade");
        PreloadSpell("forcepulse");
        PreloadSpell("forcepulsechaos");
        PreloadSpell("voidstone");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("soraka_infuse_ally_tar.troy");
        PreloadParticle("netherblade_cas.troy");
        PreloadSpell("netherbladebuff");
        PreloadSpell("secondsight");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("cardmasterstack");
        PreloadSpell("cardmasterstackparticle");
        PreloadParticle("cardmasterstackattack_tar.troy");
        PreloadSpell("cardmasterstackholder");
        PreloadSpell("pickacard");
        PreloadSpell("redcardpreattack");
        PreloadParticle("pickacard_red_tar.troy");
        PreloadSpell("cardmasterslow");
        PreloadSpell("goldcardpreattack");
        PreloadSpell("pickacard");
        PreloadParticle("pickacard_yellow_tar.troy");
        PreloadParticle("swain_torment_tar.troy");
        PreloadParticle("swain_torment_marker.troy");
        PreloadParticle("swain_torment_dot.troy");
        PreloadParticle("card_red_tag.troy");
        PreloadParticle("pulverize_cas.troy");
        PreloadSpell("slow");
        PreloadParticle("nassus_siphonstrike_beam_buf.troy");
        PreloadParticle("nassus_siphonstrike_tar.troy");
        PreloadSpell("siphoningstrike");
        PreloadParticle("deathscaress_nova.prt");
        PreloadSpell("siphoningstrikedamagebonus");
        PreloadSpell("swaintorment");
        PreloadSpell("swainmetamorphism");
        PreloadParticle("swain_disintegrationbeam_cas.troy");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("swaindampeningfieldmana");
        PreloadSpell("swaindampeningfieldmana");
        PreloadParticle("nassus_spiritfire_afterburn.troy");
        PreloadParticle("nassus_spiritfire_tar_green.troy");
        PreloadParticle("nassus_spiritfire_tar_red.troy");
        PreloadSpell("spiritfirearmorreduction");
        PreloadSpell("swainmetamorphism");
        PreloadParticle("swainshadowgrasproottemp.troy");
        PreloadParticle("swain_shadowgrasp_magic.troy");
        PreloadParticle("nassus_spiritfire_warning.troy");
        PreloadSpell("spiritfireaoe");
        PreloadParticle("swain_shadowgrasp_warning_green.troy");
        PreloadParticle("swain_shadowgrasp_warning_red.troy");
        PreloadParticle("swain_shadowgrasp_transform.troy");
        PreloadSpell("swainshadowgrasproot");
        PreloadCharacter("testcube");
        PreloadParticle("neutralmonster_buf.troy");
        PreloadSpell("wither");
        PreloadParticle("eternalthirst_buf.troy");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("souleater");
        PreloadParticle("twitch_poison_counter_01.troy");
        PreloadSpell("root");
        PreloadParticle("twitch_poison_counter_02.troy");
        PreloadParticle("twitch_poison_counter_03.troy");
        PreloadParticle("twitch_poison_counter_04.troy");
        PreloadParticle("twitch_poison_counter_05.troy");
        PreloadParticle("twitch_poison_counter_06.troy");
        PreloadSpell("twitchsprayandpray");
        PreloadSpell("detonatingshot");
        PreloadSpell("drawabead");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("deadlyvenom");
        PreloadSpell("deadlyvenom_internal");
        PreloadSpell("deadlyvenom_marker");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("sadismheal");
        PreloadParticle("dr_mundo_sadism_cas.troy");
        PreloadParticle("dr_mundo_sadism_cas_02.troy");
        PreloadParticle("tristana_bustershot_unit_impact.troy");
        PreloadParticle("global_slow.troy");
        PreloadParticle("dr_mundo_infected_cleaver_tar.troy");
        PreloadParticle("detonatingshot_buf.troy");
        PreloadParticle("tristana_explosiveshot_unit_tar.troy");
        PreloadSpell("detonatingshot_target");
        PreloadSpell("explosiveshotdebuff");
        PreloadSpell("internal_50ms");
        PreloadSpell("grievouswound");
        PreloadSpell("onthehuntaurabuff");
        PreloadSpell("onthehunt");
        PreloadParticle("spiralblade_tar.troy");
        PreloadParticle("tristana_rocketjump_cas.troy");
        PreloadSpell("root");
        PreloadParticle("tristana_rocket_rocketjump_land.troy");
        PreloadParticle("tristana_rocketjump_land.troy");
        PreloadParticle("tristana_rocketjump_unit_tar.troy");
        PreloadSpell("rocketjumpslow");
        PreloadParticle("spelleffect_proc.troy");
        PreloadParticle("twitch_gangster_sprayandpray_tar.troy");
        PreloadParticle("twitch_punk_sprayandpray_tar.troy");
        PreloadParticle("twitch_sprayandpray_tar.troy");
        PreloadSpell("sivirpassivespeed");
        PreloadSpell("sivirpassive");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("nevershade");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("halloweenurfcd");
        PreloadSpell("eternalthirsticon");
        PreloadSpell("halloweenurfwarwick");
        PreloadSpell("halloweenurfappear");
        PreloadSpell("ricochet");
        PreloadSpell("hideinshadowsbuff");
        PreloadSpell("hideinshadows");
        PreloadSpell("hideinshadows_internal");
        PreloadParticle("twitch_invis_cas.troy");
        PreloadSpell("deadlyvenom");
        PreloadParticle("expunge_tar_02.troy");
        PreloadSpell("hideinshadows");
        PreloadSpell("hideinshadows");
        PreloadSpell("killerinstinct");
        PreloadSpell("killerinstinctbuff2");
        PreloadSpell("internal_50ms");
        PreloadSpell("grievouswound");
        PreloadSpell("vladimirtidesofbloodcost");
        PreloadSpell("vladimirtidesofbloodnuke");
        PreloadParticle("katarinadeathlotus_indicator_cas.troy");
        PreloadSpell("deathlotussound");
        PreloadSpell("deathlotus");
        PreloadSpell("kennenmarkofstorm");
        PreloadParticle("kennen_ts_tar.troy");
        PreloadSpell("brandwildfire");
        PreloadParticle("brandconflagration_tar_frost.troy");
        PreloadParticle("brandconflagration_tar.troy");
        PreloadSpell("brandablaze");
        PreloadParticle("briefheal.troy");
        PreloadParticle("brandbasicattack_frost_tar.troy");
        PreloadParticle("brandbasicattack_tar.troy");
        PreloadParticle("brandblaze_hotfoot_frost.troy");
        PreloadParticle("brandfiremark_frost.troy");
        PreloadParticle("brandblaze_hotfoot.troy");
        PreloadParticle("brandfiremark.troy");
        PreloadSpell("brandwildfire");
        PreloadParticle("brandconflagration_tar_frost.troy");
        PreloadParticle("brandconflagration_tar.troy");
        PreloadSpell("brandablaze");
        PreloadParticle("brandbasicattack_frost_tar.troy");
        PreloadParticle("brandbasicattack_tar.troy");
        PreloadParticle("brandcritattack_frost_tar.troy");
        PreloadParticle("brandcritattack_tar.troy");
        PreloadSpell("brandsearparticle");
        PreloadSpell("brandablaze");
        PreloadSpell("brandwildfire");
        PreloadParticle("brandconflagration_tar_frost.troy");
        PreloadParticle("brandconflagration_tar.troy");
        PreloadSpell("brandablaze");
        PreloadSpell("brandwildfire");
        PreloadParticle("brandconflagration_tar_frost.troy");
        PreloadParticle("brandconflagration_tar.troy");
        PreloadSpell("brandablaze");
        PreloadParticle("brandconflagration_tar_frost.troy");
        PreloadParticle("brandconflagration_tar.troy");
        PreloadSpell("brandablaze");
        PreloadSpell("kennenmarkofstorm");
        PreloadSpell("swainmetamorphism");
        PreloadParticle("swainshadowgrasproottemp.troy");
        PreloadParticle("swain_shadowgrasp_magic.troy");
        PreloadParticle("brandblazefrost_tar.troy");
        PreloadParticle("brandblaze_tar.troy");
        PreloadSpell("brandwildfire");
        PreloadParticle("brandconflagration_tar_frost.troy");
        PreloadParticle("brandconflagration_tar.troy");
        PreloadSpell("brandablaze");
        PreloadCharacter("spellbook1");
        PreloadSpell("brandscorchground");
        PreloadSpell("brandscorch");
        PreloadSpell("brandscorchcount");
        PreloadSpell("brandscorch");
        PreloadSpell("brandwildfire");
        PreloadParticle("brandconflagration_tar_frost.troy");
        PreloadParticle("brandconflagration_tar.troy");
        PreloadSpell("brandablaze");
        PreloadParticle("brandphscorchground.troy");
        PreloadSpell("brandablaze");
        PreloadSpell("kennenmarkofstorm");
        PreloadParticle("brandconflagration_buf_frost.troy");
        PreloadParticle("brandconflagration_buf.troy");
        PreloadSpell("brandablaze");
        PreloadParticle("brandpof_tar_green.troy");
        PreloadParticle("brandpof_tar_red.troy");
        PreloadParticle("brandpof_frost_charge.troy");
        PreloadParticle("brandpof_charge.troy");
        PreloadParticle("brandpof_frost_tar.troy");
        PreloadParticle("brandpof_tar.troy");
        PreloadSpell("brandablaze");
        PreloadParticle("brandcritattack_frost_tar.troy");
        PreloadParticle("brandcritattack_tar.troy");
        PreloadCharacter("testcube");
        PreloadParticle("vladtidesofblood_bloodking_tar.troy");
        PreloadParticle("vladtidesofblood_tar.troy");
        PreloadSpell("vladdeathparticle");
        PreloadSpell("vladimirbloodgorged");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("kennendoublestrikeproc");
        PreloadSpell("kennendoublestrikeindicator");
        PreloadSpell("kennendoublestrikeindicator");
        PreloadSpell("kennendoublestrikelive");
        PreloadParticle("kennen_ds_proc.troy");
        PreloadParticle("kennen_mos1.troy");
        PreloadParticle("vladdeath.troy");
        PreloadSpell("root");
        PreloadSpell("kennenlightningrush");
        PreloadSpell("kennenlightningrushdamage");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("brandpassive");
        PreloadSpell("brandpassivesound");
        PreloadSpell("kennenmarkofstorm");
        PreloadParticle("kennen_btl_beam.troy");
        PreloadSpell("root");
        PreloadParticle("kennen_btl_tar.troy");
        PreloadSpell("kennenlightningrushmarker");
        PreloadSpell("kennenmarkofstorm");
        PreloadParticle("kennen_lr_tar.troy");
        PreloadSpell("kennenlrenergy");
        PreloadParticle("kennen_ss_aoe_green.troy");
        PreloadParticle("kennen_ss_aoe_red.troy");
        PreloadSpell("kennenshurikennocast");
        PreloadSpell("kennenshurikenstormholder");
        PreloadSpell("kennenmarkofstorm");
        PreloadSpell("kennenshurikenstormmos");
        PreloadParticle("kennen_ss_tar.troy");
        PreloadParticle("kennen_lr_buf.troy");
        PreloadSpell("kennenlightningrushbuff");
        PreloadSpell("kennenlightningrush");
        PreloadParticle("kennen_lr_off.troy");
        PreloadSpell("kennenlightningrushdamage");
        PreloadSpell("kennenlrcancel");
        PreloadSpell("kennenmarkofstorm");
        PreloadSpell("kennenparticleholder");
        PreloadParticle("kennen_mos2.troy");
        PreloadSpell("kennenmosdiminish");
        PreloadParticle("kennen_mos_tar.troy");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("isninja");
        PreloadSpell("kennendoublestrikeproc");
        PreloadSpell("kennendoublestrikelive");
        PreloadSpell("kennenmarkofstorm");
        PreloadParticle("vladhemoplague_bloodking_tar.troy");
        PreloadParticle("vladhemoplague_tar.troy");
        PreloadParticle("vladhemoplague_bloodking_proc.troy");
        PreloadParticle("vladhemoplague_proc.troy");
        PreloadCharacter("testcuberender");
        PreloadSpell("expirationtimer");
        PreloadSpell("deadlyvenom");
        PreloadSpell("unlockanimation");
        PreloadParticle("vladhemoplague_bloodking_nova.troy");
        PreloadParticle("vladhemoplague_nova.troy");
        PreloadSpell("vladimirhemoplaguedebuff");
        PreloadParticle("vampheal.troy");
        PreloadParticle("katarina_shadowstep_cas.troy");
        PreloadParticle("katarina_shadowstep_sand_return.troy");
        PreloadParticle("katarina_shadowstep_return.troy");
        PreloadSpell("shadowstepdodge");
        PreloadParticle("katarina_shadowstep_tar.troy");
        PreloadSpell("destealth");
        PreloadSpell("voracity");
        PreloadParticle("katarina_spell_refresh_indicator.troy");
        PreloadParticle("VladDeath.troy");
        PreloadSpell("C_Waist");
        PreloadParticle("katarina_spell_refresh_indicator.troy");
        PreloadSpell("voracity");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("killerinstinctbuff");
        PreloadParticle("katarina_killerinstinct_buf.troy");
        PreloadSpell("killerinstinct");
        PreloadParticle("vladsanguinepool_buf.troy");
        PreloadSpell("unlockanimation");
        PreloadParticle("vlad_bloodking_blood_skin.troy");
        PreloadSpell("vladimirsanguinepoolparticle");
        PreloadSpell("slow");
        PreloadParticle("vlad_saguinepool_skin_swap.troy");
        PreloadSpell("raisemoraleteambuff");
        PreloadSpell("piratescurvy");
        PreloadSpell("raisemorale");
        PreloadParticle("exile_w_tar_02.troy");
        PreloadParticle("exile_ult_mis_tar.troy ");
        PreloadParticle("exile_ult_mis_tar_minion.troy ");
        PreloadParticle("exile_w_cast_ult_01.troy");
        PreloadParticle("exile_w_cast_02.troy");
        PreloadParticle("exile_w_weapon_cas.troy");
        PreloadParticle("exile_w_cast_ult_02.troy");
        PreloadParticle("exile_w_cast_01.troy");
        PreloadSpell("akalishadowdance");
        PreloadSpell("akalitwindisciplines");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("isninja");
        PreloadParticle("akali_smoke_bomb_tar_team_green.troy");
        PreloadParticle("akali_smoke_bomb_tar_team_red.troy");
        PreloadSpell("recall");
        PreloadSpell("akaliholdstealth");
        PreloadSpell("akalisbstealth");
        PreloadSpell("akalismokebombinternal");
        PreloadSpell("akalisbbuff");
        PreloadSpell("akalisbdebuff");
        PreloadCharacter("testcube");
        PreloadSpell("akalitwinap");
        PreloadSpell("akalitwindmg");
        PreloadSpell("marthcounterdash");
        PreloadSpell("marthcounterready");
        PreloadSpell("marthcounter");
        PreloadParticle("akali_twilight_buf.troy");
        PreloadSpell("akaliholdstealth");
        PreloadSpell("recall");
        PreloadParticle("akali_markoftheassasin_marker_tar.troy");
        PreloadParticle("akali_markoftheassasin_marker_tar_02.troy");
        PreloadParticle("akali_mark_impact_tar.troy");
        PreloadSpell("akalishadowswipehealingparticle");
        PreloadParticle("marthswordblue.troy");
        PreloadParticle("exile_ult_blade_swap_base.troy");
        PreloadParticle("exile_ult_attack_buf.troy");
        PreloadSpell("rivenwindslashready");
        PreloadSpell("rivenizunablade");
        PreloadSpell("rivenfengshuiengine");
        PreloadSpell("akalishadowdance");
        PreloadParticle("akali_shadowdance_mis.troy");
        PreloadSpell("akalishadowdancekickparticle");
        PreloadSpell("rivenwindslashready");
        PreloadSpell("rivenfengshuiengine");
        PreloadSpell("rivenlightsabermissiledebuff");
        PreloadSpell("rivenlightsabermissiledebuff");
        PreloadSpell("akalishadowdance");
        PreloadParticle("akali_shadowdance_cas.troy");
        PreloadParticle("akali_shadowdance_return_02.troy");
        PreloadParticle("akali_shadowdance_return.troy");
        PreloadSpell("akalishadowdancekick");
        PreloadSpell("recall");
        PreloadParticle("akali_invis_cas.troy");
        PreloadSpell("akalisbstealth");
        PreloadSpell("scurvystrikeparticle");
        PreloadSpell("akalishadowdance");
        PreloadParticle("pirate_cannonbarrage_point.troy");
        PreloadCharacter("gangplank");
        PreloadParticle("pirate_cannonbarrage_tar.troy");
        PreloadCharacter("testcube");
        PreloadSpell("expirationtimer");
        PreloadParticle("pirate_cannonbarrage_aoe_indicator_green.troy");
        PreloadParticle("pirate_cannonbarrage_aoe_indicator_red.troy");
        PreloadSpell("cannonbarrageball");
        PreloadSpell("slow");
        PreloadCharacter("testcube");
        PreloadSpell("cannonbarrage");
        PreloadParticle("akali_shadowdance_tar.troy");
        PreloadSpell("akalishadowdancetimer");
        PreloadSpell("akalishadowdance");
        PreloadSpell("akalishadowdance");
        PreloadSpell("akalishadowdancecounter3");
        PreloadSpell("akalishadowdancecounter2");
        PreloadParticle("akali_shadowswipe_heal.troy");
        PreloadParticle("exile_e_interupt.troy");
        PreloadParticle("exile_e_mis.troy  ");
        PreloadSpell("riventricleave");
        PreloadSpell("unlockanimation");
        PreloadSpell("marthtricleaveunlock");
        PreloadParticle("exile_q_tar_03.troy");
        PreloadParticle("exile_q_tar_04.troy");
        PreloadParticle("cryo_storm_green_team.troy");
        PreloadParticle("cryo_storm_red_team.troy");
        PreloadSpell("chilled");
        PreloadSpell("glacialstorm");
        PreloadSpell("chilled");
        PreloadParticle("cryo_frostbite_chilled_tar.troy");
        PreloadParticle("cryo_storm.troy");
        PreloadSpell("glacialstorm");
        PreloadSpell("chilled");
        PreloadSpell("marthtricleavebuffer");
        PreloadSpell("marthtricleave");
        PreloadSpell("marthtricleavebuffered");
        PreloadSpell("marthtricleavebufferb");
        PreloadSpell("marthtricleavebufferlock");
        PreloadSpell("cantattack");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("riventricleavedamagedebuff");
        PreloadParticle("exile_q_01_trail_02_ult.troy");
        PreloadParticle("exile_q_03_trail.troy");
        PreloadParticle("exile_q_01_trail_02.troy");
        PreloadParticle("exile_q_02_trail_02_ult.troy");
        PreloadParticle("exile_q_02_trail_02.troy");
        PreloadParticle("exile_q_03_trail_02_ult.troy");
        PreloadParticle("exile_q_03_trail_02.troy");
        PreloadSpell("riventricleaveunlock");
        PreloadSpell("riventricleaveghost");
        PreloadParticle("exile_q_02_detonate_ult.troy");
        PreloadParticle("exile_q_02_detonate.troy");
        PreloadParticle("exile_q_01_detonate.troy");
        PreloadParticle("exile_q_03_detonate_ult.troy");
        PreloadParticle("exile_q_03_detonate.troy");
        PreloadSpell("riventricleavedamagedebuff2");
        PreloadSpell("rivenknockback");
        PreloadParticle("ezreal_trueshot_tar.troy");
        PreloadSpell("ezrealrisingspellforce");
        PreloadSpell("marthtricleavebufferlock");
        PreloadParticle("staticfield_tar.troy");
        PreloadSpell("staticfield");
        PreloadParticle("staticfield_nova.prt");
        PreloadParticle("ezreal_mysticshot_tar.troy");
        PreloadSpell("ezrealrisingspellforce");
        PreloadSpell("marthtricleavebuffer");
        PreloadSpell("marthtricleave");
        PreloadSpell("marthtricleavebuffered");
        PreloadSpell("marthtricleavebufferlock");
        PreloadParticle("fistreturn_mis.troy");
        PreloadSpell("rocketgrab2");
        PreloadParticle("powerfist_tar.troy");
        PreloadSpell("powerfistslow");
        PreloadParticle("exile_q_tar_01.troy");
        PreloadParticle("exile_q_tar_02.troy");
        PreloadSpell("ezrealrisingspellforce");
        PreloadParticle("ezreal_glow1.troy");
        PreloadParticle("ezreal_glow2.troy");
        PreloadParticle("ezreal_glow3.troy");
        PreloadParticle("ezreal_glow4.troy");
        PreloadParticle("ezreal_glow5.troy");
        PreloadSpell("riventricleave");
        PreloadSpell("riventricleavecooldown");
        PreloadSpell("scurvystrikeparticle");
        PreloadSpell("scurvystrike");
        PreloadSpell("raisemorale");
        PreloadSpell("piratescurvy");
        PreloadSpell("scurvy");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("ispirate");
        PreloadSpell("ezrealrisingspellforce");
        PreloadParticle("steamgolem_piltover_overdrive.troy");
        PreloadParticle("overdrive_buf.troy");
        PreloadParticle("steamgolem_piltover_overdrive_tires.troy");
        PreloadParticle("ezreal_arcaneshift_cas.troy");
        PreloadParticle("ezreal_arcaneshift_flash.troy");
        PreloadSpell("riventricleave");
        PreloadSpell("riventricleavecooldown");
        PreloadSpell("riventricleavesoundone");
        PreloadSpell("riventricleavebuffer");
        PreloadSpell("riventricleavedamage");
        PreloadSpell("unlockanimation");
        PreloadSpell("riventricleavesoundtwo");
        PreloadSpell("riventricleavebufferb");
        PreloadSpell("riventricleavesoundthree");
        PreloadSpell("rivensword");
        PreloadSpell("rivenmartyr");
        PreloadSpell("rivenpassiveaaboost");
        PreloadSpell("manabarrier");
        PreloadSpell("manabarriercooldown");
        PreloadParticle("steamgolemshield_hit.troy");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("rivenpassive");
        PreloadParticle("steamgolemshield.troy");
        PreloadParticle("steamgolemshield_hit.troy");
        PreloadSpell("ezrealrisingspellforce");
        PreloadParticle("ezreal_essenceflux_tar.troy");
        PreloadSpell("root");
        PreloadSpell("ezrealessenceflux");
        PreloadSpell("ezrealessencefluxmissile");
        PreloadSpell("chilled");
        PreloadSpell("globalwallpush");
        PreloadSpell("iceblock");
        PreloadCharacter("aniviaiceblock");
        PreloadSpell("staticfield");
        PreloadSpell("root");
        PreloadSpell("manabarriericon");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadParticle("cryo_flashfrost_tar.troy");
        PreloadSpell("chilled");
        PreloadSpell("flashfrost");
        PreloadCharacter("udyr");
        PreloadSpell("udyrphoenixstance");
        PreloadSpell("udyrturtlestance");
        PreloadSpell("udyrtigerstance");
        PreloadSpell("udyrbearactivation");
        PreloadSpell("udyrbearstuncheck");
        PreloadParticle("udyr_bear_slam.troy");
        PreloadParticle("primalcharge.troy");
        PreloadParticle("incinerate_buf.troy");
        PreloadSpell("shyvanafireballparticle");
        PreloadSpell("shyvanafireballmissile");
        PreloadCharacter("testcuberender10vision");
        PreloadSpell("renektontargetsliced");
        PreloadSpell("renektonsliceanddicedelay");
        PreloadSpell("renektonbloodsplattertarget");
        PreloadSpell("renektonsliceanddicedebuff");
        PreloadParticle("renektonslicedice_buf_rage.troy");
        PreloadParticle("renektonslicedice_buf.troy");
        PreloadSpell("renektonsliceanddicetimer");
        PreloadSpell("renektonsliceanddice");
        PreloadSpell("renektonunlockanimationattack");
        PreloadSpell("renektondice");
        PreloadSpell("renektonsliceanddicetimer");
        PreloadSpell("renektonsliceanddice");
        PreloadSpell("shyvanafireballparticle");
        PreloadSpell("shyvanafireballmissile");
        PreloadSpell("shyvanafireballmissileminion");
        PreloadParticle("shyvana_flamebreath_dragon_burn.troy");
        PreloadParticle("shyvana_flamebreath_tar_02.troy");
        PreloadParticle("shyvana_flamebreath_indicator.troy");
        PreloadParticle("shyvana_flamebreath_reignite.troy");
        PreloadParticle("shyvana_ult_tar.troy");
        PreloadParticle("shyvana_r_fire_skin.troy");
        PreloadParticle("shyvana_ult_cast_02.troy");
        PreloadParticle("shyvana_ult_cast_02_firefill.troy");
        PreloadParticle("shyvana_ult_cast_02_arm.troy");
        PreloadParticle("shyvana_ult_cast_02_tail.troy");
        PreloadParticle("shyvana_ult_cast_02_hand.troy");
        PreloadSpell("shyvanatransformcheck");
        PreloadSpell("shyvanatransformdamage");
        PreloadSpell("shyvanatransform");
        PreloadSpell("shyvanatransformleap");
        PreloadParticle("shyvana_ult_impact_01.troy");
        PreloadSpell("renektonuppercutblow");
        PreloadParticle("incinerate_cas.troy");
        PreloadSpell("renektontargetsliced");
        PreloadSpell("renektonsliceanddicedelay");
        PreloadSpell("renektonbloodsplattertarget");
        PreloadSpell("renektonsliceanddicedebuff");
        PreloadParticle("renektonslicedice_buf_rage.troy");
        PreloadParticle("renektonslicedice_buf.troy");
        PreloadSpell("renektonsliceanddicetimer");
        PreloadSpell("renektonsliceanddice");
        PreloadSpell("renektonunlockanimationattack");
        PreloadCharacter("shyvanadragon");
        PreloadSpell("shyvanaimmolatedragon");
        PreloadSpell("shyvanadoubleattackdragon");
        PreloadSpell("shyvanafireballdragon2");
        PreloadSpell("shyvanadragonscales");
        PreloadSpell("shyvanatransformdeath");
        PreloadSpell("shyvanaimmolationaura");
        PreloadSpell("shyvanadoubleattack");
        PreloadSpell("shyvanafireball");
        PreloadParticle("shyvana_ult_transform_end.troy");
        PreloadParticle("shyvana_flamebreath_dragon_burn.troy");
        PreloadParticle("shyvana_flamebreath_tar_02.troy");
        PreloadParticle("shyvana_flamebreath_indicator.troy");
        PreloadParticle("shyvana_flamebreath_reignite.troy");
        PreloadSpell("shyvanafireballparticle");
        PreloadSpell("shyvanafireballmissile");
        PreloadSpell("renektonuppercut");
        PreloadParticle("globalhit_yellow_tar.troy");
        PreloadParticle("shyvana_flamebreath_dragon_burn.troy");
        PreloadSpell("shyvanafireballparticle");
        PreloadSpell("shyvanafireballmissile");
        PreloadSpell("renektonincombat");
        PreloadParticle("renektonslicedice_tar.troy");
        PreloadParticle("renekton_weapon_cooloff.troy");
        PreloadSpell("renektonunlockanimation");
        PreloadSpell("renektonrageready");
        PreloadSpell("renektonweaponglowfade");
        PreloadSpell("renektonunlockanimationcleave");
        PreloadSpell("renektonreignofthetyrant");
        PreloadParticle("renektoncleave_trail_rage.troy ");
        PreloadSpell("renektoncleavedrain");
        PreloadSpell("renektonbloodsplattertarget");
        PreloadSpell("renektonrageready");
        PreloadParticle("renektoncleave_trail.troy ");
        PreloadSpell("evelynnsouleater");
        PreloadSpell("evelynnunlockanimation");
        PreloadSpell("maliceandspite");
        PreloadSpell("malice_marker");
        PreloadSpell("renektonunlockanimation");
        PreloadSpell("renektonrageready");
        PreloadSpell("renektonweaponglowfade");
        PreloadParticle("renekton_ruthlesspredator_obd-sound.troy");
        PreloadSpell("renektonunlockanimation");
        PreloadSpell("silentkiller");
        PreloadSpell("renektonpreexecute");
        PreloadParticle("udyrbuff.troy");
        PreloadSpell("udyrmonkeyagilitybuff");
        PreloadCharacter("testcube");
        PreloadSpell("shyvanaidapplicator");
        PreloadSpell("shyvanaiddamage");
        PreloadSpell("shyvanaimmolatedragon");
        PreloadParticle("globalhit_yellow_tar.troy");
        PreloadParticle("phoenixbreath_cas.troy");
        PreloadParticle("shyvana_scorchedearth_dragon_01_trail.troy");
        PreloadSpell("shyvanaiddamage");
        PreloadSpell("shyvanadoubleattackhit");
        PreloadParticle("shyvana_doubleattack_tar.troy");
        PreloadParticle("shyvana_scorchedearth_unit_tar.troy");
        PreloadSpell("shyvanaimmolationaura");
        PreloadSpell("shadowwalk");
        PreloadCharacter("udyrphoenix");
        PreloadParticle("phoenixpelt.troy");
        PreloadSpell("udyrbearstance");
        PreloadSpell("udyrtigerstance");
        PreloadSpell("udyrturtlestance");
        PreloadParticle("phoenixstance.troy");
        PreloadSpell("udyrphoenixactivation");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("renektonpredator");
        PreloadParticle("udyr_phoenix_nova.troy");
        PreloadParticle("shyvana_flamebreath_reignite.troy");
        PreloadParticle("shyvana_doubleattack_tar.troy");
        PreloadSpell("wasstealthed");
        PreloadSpell("shadowwalk");
        PreloadSpell("shadowwalk_internal");
        PreloadParticle("evelyn_invis_cas.troy");
        PreloadParticle("renekton_rage_state.troy");
        PreloadSpell("shadowwalkspeedholder");
        PreloadSpell("shadowwalkspeed");
        PreloadSpell("renektonincombat");
        PreloadSpell("renektonrageready");
        PreloadSpell("shyvanadoubleattackhitdragon");
        PreloadParticle("shyvana_doubleattack_tar.troy");
        PreloadSpell("willrevive");
        PreloadSpell("rebirth");
        PreloadSpell("rebirthready");
        PreloadSpell("rebirthmarker");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadCharacter("aniviaegg");
        PreloadParticle("eggtimer.troy");
        PreloadSpell("rebirthcooldown");
        PreloadParticle("rebirth_cas.troy");
        PreloadSpell("rebirthready");
        PreloadSpell("silentkiller");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadCharacter("udyrturtle");
        PreloadParticle("turtlepelt.troy");
        PreloadParticle("turtlestance.troy");
        PreloadSpell("udyrbearstance");
        PreloadSpell("udyrtigerstance");
        PreloadSpell("udyrphoenixstance");
        PreloadSpell("udyrturtleactivation");
        PreloadParticle("udyr_tiger_claw_tar.troy");
        PreloadParticle("udyr_tiger_tar.troy");
        PreloadCharacter("udyrtiger");
        PreloadParticle("tigerpelt.troy");
        PreloadSpell("udyrtigerpunch");
        PreloadSpell("udyrtigershred");
        PreloadSpell("udyrtigerpunchbleed");
        PreloadSpell("udyrbearstance");
        PreloadSpell("udyrphoenixstance");
        PreloadSpell("udyrturtlestance");
        PreloadParticle("tigerstance.troy");
        PreloadSpell("shyvanapassive");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("shyvanadragonscales");
        PreloadParticle("itemlifesteal.troy");
        PreloadParticle("globalhit_physical.troy");
        PreloadSpell("globaldrainmana");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("udyrmonkeyagility");
        PreloadParticle("turtlestance.troy");
        PreloadParticle("turtlestance_buf.troy");
        PreloadParticle("udyr_tiger_buf.troy");
        PreloadParticle("udyr_tiger_buf_r.troy");
        PreloadSpell("udyrtigerpunchbleed");
        PreloadSpell("udyrtigershred");
        PreloadParticle("meditate_eff.troy");
        PreloadSpell("meditate");
        PreloadSpell("empathizeaura");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("meditate_eff.troy");
        PreloadSpell("meditate");
        PreloadSpell("innatespellheal");
        PreloadParticle("deathscaress_nova.troy");
        PreloadParticle("tormentedsoil_green_tar.troy");
        PreloadParticle("tormentedsoil_red_tar.troy");
        PreloadSpell("tormentedsoildebuff");
        PreloadParticle("firefeet_buf.troy");
        PreloadSpell("udyrtigerstance");
        PreloadSpell("itemplacementmissile");
        PreloadParticle("itemplacement_tar.troy");
        PreloadSpell("alphastrike");
        PreloadParticle("alphastrike_slash.troy");
        PreloadSpell("alphastrikemarker");
        PreloadSpell("alphastrikemarker");
        PreloadSpell("alphastriketarget");
        PreloadParticle("globalhit_yellow_tar.troy");
        PreloadSpell("doublestrikeicon");
        PreloadParticle("yiglowblade.troy");
        PreloadSpell("wujustyle");
        PreloadSpell("doublestrikeicon");
        PreloadSpell("doublestrike");
        PreloadSpell("alphastrike");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("masteryiwujudeactivated");
        PreloadSpell("masteryiwujudeactivated");
        PreloadSpell("wujustyle");
        PreloadSpell("wujustylesupercharged");
        PreloadParticle("soulshackle_beam.troy");
        PreloadSpell("soulshacklesowner");
        PreloadSpell("soulshackleslow");
        PreloadSpell("soulshackles");
        PreloadSpell("slow");
        PreloadSpell("masteryiwujudeactivated");
        PreloadParticle("globalhit_yellow_tar.troy");
        PreloadParticle("trundle_plagueblock_green.troy");
        PreloadParticle("trundle_plagueblock_red.troy");
        PreloadSpell("globalwallpush");
        PreloadSpell("slow");
        PreloadCharacter("trundlewall");
        PreloadSpell("trundlecircle");
        PreloadParticle("nidalee_javelintoss_tar.troy");
        PreloadSpell("orianaspellsword");
        PreloadSpell("orianaghostself");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("orianaizuna_tar.troy");
        PreloadSpell("yomuizuna");
        PreloadCharacter("testcube");
        PreloadSpell("yomughost");
        PreloadSpell("yomughostminion");
        PreloadSpell("yomuizunadamage");
        PreloadCharacter("nidalee_cougar");
        PreloadParticle("nidalee_transform.troy");
        PreloadSpell("takedown");
        PreloadSpell("aspectofthecougar");
        PreloadSpell("orianaghostself");
        PreloadSpell("orianablenddelay");
        PreloadSpell("orianaghost");
        PreloadSpell("orianaizuna");
        PreloadSpell("oriannaballtracker");
        PreloadCharacter("OriannaBall");
        PreloadParticle("oriana_izuna_nova.troy");
        PreloadSpell("orianaizunadamage");
        PreloadSpell("orianaglobalcooldown");
        PreloadSpell("unlockanimation");
        PreloadSpell("orianaizuna");
        PreloadCharacter("oriannaball");
        PreloadParticle("oriana_izuna_nova.troy");
        PreloadSpell("orianaizunadamage");
        PreloadSpell("orianaizunadamaged");
        PreloadParticle("orianavacuumindicator_ally.troy");
        PreloadParticle("orianavacuumindicatorselfnoring.troy");
        PreloadSpell("root");
        PreloadParticle("orianavacuumindicatorselfring.troy");
        PreloadParticle("orianavacuumindicator.troy");
        PreloadSpell("orianapowerdagger");
        PreloadSpell("orianapowerdaggerdisplay");
        PreloadCharacter("nidalee_cougar");
        PreloadParticle("nidalee_transform.troy");
        PreloadSpell("takedown");
        PreloadSpell("aspectofthecougar");
        PreloadSpell("yomughostself");
        PreloadSpell("yomughost");
        PreloadSpell("yomuizuna");
        PreloadSpell("yomudesperatepower");
        PreloadSpell("unlockanimation");
        PreloadSpell("yomuglobalcooldown");
        PreloadSpell("orianaglobalcooldown");
        PreloadSpell("orianaghost");
        PreloadSpell("oriannaballtracker");
        PreloadParticle("oriana_shockwave_nova_ally.troy");
        PreloadParticle("oriana_shockwave_nova.troy");
        PreloadParticle("orianadetonate_tar.troy");
        PreloadSpell("orianastun");
        PreloadSpell("moveawaycollision");
        PreloadSpell("orianaghost");
        PreloadParticle("oriana_ts_tar.troy");
        PreloadSpell("orianashred");
        PreloadSpell("cassiopeiadeathparticle");
        PreloadSpell("cassiopeiadeadlycadence");
        PreloadParticle("cassdeadlycadence_buf.troy");
        PreloadSpell("root");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("nidalee_cougar_takedown_tar.troy");
        PreloadSpell("takedown");
        PreloadParticle("oriana_ghost_bind_goth.troy");
        PreloadParticle("oriana_ghost_bind_doll.troy");
        PreloadParticle("oriana_ghost_bind.troy");
        PreloadParticle("orianaballindicatorfar.troy");
        PreloadParticle("orianaballindicatormedium.troy");
        PreloadParticle("orianaballindicatornear.troy");
        PreloadSpell("orianaghostminion");
        PreloadSpell("oriannaballtracker");
        PreloadSpell("orianaghost");
        PreloadParticle("orianna_ball_flash.troy");
        PreloadSpell("root");
        PreloadSpell("orianaghostself");
        PreloadParticle("orianna_ball_flash_reverse.troy");
        PreloadSpell("orianadissonancecountdown");
        PreloadCharacter("oriannaball");
        PreloadParticle("nidalee_cougar_swipe_tar.troy");
        PreloadParticle("yomu_ghost_bind.troy");
        PreloadCharacter("testcube");
        PreloadSpell("yomughost");
        PreloadSpell("yomughostminion");
        PreloadSpell("yomughostenemy");
        PreloadSpell("yomureturn");
        PreloadSpell("yomupowerdagger");
        PreloadSpell("orianaredact");
        PreloadSpell("orianaghost");
        PreloadSpell("orianaghostself");
        PreloadParticle("orianna_ball_flash.troy");
        PreloadSpell("root");
        PreloadParticle("orianna_ball_flash_reverse.troy");
        PreloadSpell("orianaredacttarget");
        PreloadSpell("orianaredactshield");
        PreloadSpell("orianaredactdamage");
        PreloadSpell("orianaghostself");
        PreloadSpell("orianareturn");
        PreloadSpell("unlockanimation");
        PreloadSpell("yomuglobalcooldown");
        PreloadSpell("yomuredacttarget");
        PreloadSpell("yomughost");
        PreloadSpell("yomughostself");
        PreloadSpell("yomuredactshield");
        PreloadSpell("yomuredact");
        PreloadSpell("yomudesperatepower");
        PreloadParticle("manaleach_tar2.troy");
        PreloadSpell("orianadot");
        PreloadSpell("oriannaballtracker");
        PreloadCharacter("oriannanoball");
        PreloadParticle("orianaprotectshield.troy");
        PreloadSpell("orianaglobalcooldown");
        PreloadParticle("yomu_ring_green.troy");
        PreloadParticle("yomu_ring_red.troy");
        PreloadParticle("oriana_ball_glow_green.troy");
        PreloadParticle("oriana_ball_glow_red.troy");
        PreloadSpell("expirationtimer");
        PreloadSpell("orianaredacttarget");
        PreloadSpell("orianaglobalcooldown");
        PreloadSpell("unlockanimation");
        PreloadSpell("orianaghost");
        PreloadSpell("orianaghostself");
        PreloadSpell("orianablenddelay");
        PreloadSpell("orianaredactshield");
        PreloadSpell("orianaredact");
        PreloadSpell("oriannaballtracker");
        PreloadParticle("orianaredact_tar.troy");
        PreloadSpell("orianaglobalcooldown");
        PreloadSpell("unlockanimation");
        PreloadParticle("orianadissonance_ally_green.troy");
        PreloadParticle("orianadissonance_ally_red.troy");
        PreloadParticle("orianadissonance_ball_green.troy");
        PreloadParticle("orianadissonance_ball_red.troy");
        PreloadParticle("orianadissonance_cas_green.troy");
        PreloadParticle("orianadissonance_cas_red.troy");
        PreloadParticle("orianadissonance_tar.troy");
        PreloadSpell("orianaslow");
        PreloadSpell("orianahaste");
        PreloadSpell("orianadissonancewave");
        PreloadParticle("nidalee_cougarpounce_cas.troy");
        PreloadParticle("nidalee_cougarpounce_land.troy");
        PreloadParticle("nidalee_cougar_pounce_tar.troy");
        PreloadParticle("nidalee_bushwhack_set_02.troy");
        PreloadParticle("nidalee_bushwhack_trigger_01.troy");
        PreloadParticle("nidalee_bushwhack_trigger_02.troy");
        PreloadSpell("bushwhackdebuff");
        PreloadSpell("bushwhackdamage");
        PreloadParticle("nidalee_trap_team_id_green.troy");
        PreloadParticle("empty.troy");
        PreloadCharacter("nidalee_spear");
        PreloadSpell("vorpalspikes");
        PreloadSpell("feast");
        PreloadSpell("feastmarker");
        PreloadParticle("eternalthirst_buf.troy");
        PreloadSpell("carnivore");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("orianadissonance");
        PreloadSpell("orianashock");
        PreloadSpell("orianaghostenemy");
        PreloadCharacter("testcube");
        PreloadSpell("yomughost");
        PreloadSpell("yomughostminion");
        PreloadParticle("urgotheatseekingindicator.troy");
        PreloadSpell("yomudissonance");
        PreloadParticle("trundleult_self_buf.troy");
        PreloadSpell("prowl");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("yomughost");
        PreloadSpell("unlockanimation");
        PreloadSpell("yomuglobalcooldown");
        PreloadParticle("trundleultparticle.troy");
        PreloadSpell("trundlepain");
        PreloadSpell("orianashock");
        PreloadSpell("orianaslow");
        PreloadSpell("orianahaste");
        PreloadSpell("kogmawicathiansurpriseready");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("trundlepainbuff");
        PreloadParticle("trundleqdebuff_buf.troy");
        PreloadSpell("trundleq");
        PreloadParticle("trundle_trollsmash_buf.troy");
        PreloadSpell("trundletrollsmash");
        PreloadParticle("trundleq_buf.troy");
        PreloadParticle("globalhit_physical.troy");
        PreloadSpell("trundleqdebuff");
        PreloadSpell("unlockanimation");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("trundlediseaseoverseer");
        PreloadParticle("consecrationaura_tar.troy");
        PreloadSpell("nocturneparanoiatargetorder");
        PreloadParticle("nocturneparanoiafriend.troy");
        PreloadSpell("root");
        PreloadParticle("nocturneparanoiafoe.troy");
        PreloadParticle("nocturneparanoiadash_trail.troy");
        PreloadSpell("root");
        PreloadParticle("nocturneparanoiadash_tar.troy");
        PreloadSpell("unstoppableforcemarker");
        PreloadSpell("nocturneparanoiadash");
        PreloadSpell("nocturneparanoiadashsound");
        PreloadParticle("infuse_tar.troy");
        PreloadParticle("nocturneparanoiatargeting.troy");
        PreloadSpell("nocturneparanoiatargetchaos");
        PreloadParticle("nocturneparanoiafriend.troy");
        PreloadSpell("root");
        PreloadParticle("nocturneparanoiafoe.troy");
        PreloadSpell("nocturneparanoia");
        PreloadSpell("nocturneparanoiatargeting");
        PreloadSpell("unstoppableforcemarker");
        PreloadParticle("nocturneparanoiateamtarget.troy");
        PreloadSpell("nocturneparanoiadash");
        PreloadSpell("nocturneparanoia");
        PreloadSpell("nocturneparanoiavo");
        PreloadSpell("nocturneparanoiatargetordervo");
        PreloadSpell("nocturneparanoiatargetchaosvo");
        PreloadSpell("unlockanimation");
        PreloadSpell("nocturneparanoiaparticle");
        PreloadParticle("nocturneparanoiastartorderfriend.troy");
        PreloadSpell("root");
        PreloadParticle("nocturneparanoiastartorderfoe.troy");
        PreloadSpell("nocturneparanoiatargeting");
        PreloadSpell("nocturneparanoiatarget");
        PreloadSpell("nocturneparanoiatargetorder");
        PreloadParticle("nocturneparanoiastartchaosfriend.troy");
        PreloadParticle("nocturneparanoiastartchaosfoe.troy");
        PreloadSpell("nocturneparanoiatargetchaos");
        PreloadParticle("nocturneparanoiadashsound.troy");
        PreloadSpell("root");
        PreloadParticle("soraka_infuse_ally_tar.troy");
        PreloadParticle("soraka_infuse_enemy_tar.troy");
        PreloadSpell("nocturneparanoiaparticle");
        PreloadSpell("consecrationauranoparticle");
        PreloadSpell("consecrationaura");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadParticle("wish_tar.troy");
        PreloadParticle("trundledesecrate_green.troy");
        PreloadParticle("trundledesecrate_red.troy");
        PreloadSpell("trundlediseaseoverseer");
        PreloadSpell("trundledesecratebuffs");
        PreloadCharacter("testcube");
        PreloadSpell("trundledesecrate");
        PreloadSpell("unlockanimation");
        PreloadCharacter("testcube");
        PreloadSpell("nocturneduskbringer");
        PreloadSpell("starcalldamage");
        PreloadParticle("nocturneunspeakablehorror_tar_frost.troy");
        PreloadParticle("nocturneunspeakablehorror_counter_frost.troy");
        PreloadParticle("nocturneunspeakablehorror_tar_ghost.troy");
        PreloadParticle("nocturneunspeakablehorror_counter_ghost.troy");
        PreloadParticle("nocturneunspeakablehorror_tar.troy");
        PreloadParticle("nocturneunspeakablehorror_counter.troy");
        PreloadParticle("nocturneunspeakablehorror_beam.troy");
        PreloadParticle("nocturneunspeakablehorror_break.troy");
        PreloadSpell("root");
        PreloadParticle("nocturneunspeakablehorror_fear.troy");
        PreloadSpell("unlockanimation");
        PreloadParticle("nocturne_shroud_deactivatetrigger.troy");
        PreloadSpell("nocturneshroudofdarknessbuff");
        PreloadSpell("nocturneshroudofdarkness");
        PreloadSpell("unlockanimation");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadParticle("nocturneduskbringer_path_frost_green.troy");
        PreloadParticle("nocturneduskbringer_path_frost_red.troy");
        PreloadParticle("nocturneduskbringer_path_ghost_green.troy");
        PreloadParticle("nocturneduskbringer_path_ghost_red.troy");
        PreloadParticle("nocturneduskbringer_path_green.troy");
        PreloadParticle("nocturneduskbringer_path_red.troy");
        PreloadSpell("nocturneduskbringerhaste");
        PreloadCharacter("testcube");
        PreloadSpell("nocturneduskbringertrail");
        PreloadParticle("nocturneduskbringer_tar.troy");
        PreloadParticle("nocturneduskbringer_frost_buf.troy");
        PreloadParticle("nocturneduskbringer_buf.troy");
        PreloadSpell("starcall");
        PreloadParticle("fizz_jump_cas.troy");
        PreloadSpell("root");
        PreloadParticle("fizz_jump_weaponglow.troy");
        PreloadSpell("fizzjumpdelay");
        PreloadSpell("fizzjumpbuffer");
        PreloadParticle("fizz_playfultrickster_idle_sound.troy");
        PreloadSpell("fizzjumpbuffered");
        PreloadSpell("fizzjump");
        PreloadSpell("internal_50ms");
        PreloadSpell("grievouswound");
        PreloadSpell("fizzseastonetridentactive");
        PreloadParticle("fizz_jump_cas.troy");
        PreloadSpell("root");
        PreloadParticle("fizz_jump_weaponglow.troy");
        PreloadSpell("fizzjump");
        PreloadParticle("fizz_trickslamtwo.troy");
        PreloadParticle("fizz_trickslam_tar.troy");
        PreloadSpell("internal_50ms");
        PreloadSpell("grievouswound");
        PreloadParticle("fizz_seastoneactive_hit_sound.troy");
        PreloadParticle("caitlyn_yordletrap_idle_red.troy");
        PreloadParticle("caitlyn_yordletrap_idle_green.troy");
        PreloadParticle("caitlyn_yordletrap_trigger_02.troy");
        PreloadParticle("caitlyn_yordletrap_trigger_sound.troy");
        PreloadCharacter("caitlyntrap");
        PreloadSpell("fizztempesttrapcount");
        PreloadSpell("fizztempesttrap");
        PreloadParticle("fizz_playfultrickster_flip_sound.troy");
        PreloadSpell("root");
        PreloadParticle("fizz_trickslam.troy");
        PreloadParticle("fizz_trickslam_tar.troy");
        PreloadSpell("fizzwslow");
        PreloadSpell("unlockanimation");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("udyrmonkeyagility");
        PreloadSpell("leonasolarbarriertracker");
        PreloadSpell("leonasunlight");
        PreloadSpell("fizzjumptwo");
        PreloadSpell("fizztrickslam");
        PreloadSpell("fizzjump");
        PreloadSpell("leonasolarbarriertracker");
        PreloadSpell("leonasunlight");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("leonasunlightpassive");
        PreloadSpell("fizzjumpbuffer");
        PreloadSpell("fizzjumpbuffered");
        PreloadSpell("fizzseastonetrident");
        PreloadParticle("leona_sunlight_champion.troy");
        PreloadParticle("leona_sunlight.troy");
        PreloadParticle("leonapassive_tar.troy");
        PreloadSpell("leonasunlight");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("fizzpassive");
        PreloadSpell("fizzpassivedisplayicon");
        PreloadParticle("leona_solarbarrier_buf.troy");
        PreloadParticle("leonasolarbarrier3.troy");
        PreloadParticle("leonasolarbarrier2.troy");
        PreloadParticle("leonasolarbarrier1.troy");
        PreloadSpell("leonasunlight");
        PreloadParticle("leona_solarbarrier_tar.troy");
        PreloadSpell("leonasolarbarrier");
        PreloadParticle("leona_solarbarrier_nova.troy");
        PreloadSpell("leonasolarbarrier2");
        PreloadSpell("leonasolarbarriertracker");
        PreloadParticle("leona_solarbarrier_nova_whiff.troy");
        PreloadParticle("leona_solarbarrier2_buf.troy");
        PreloadParticle("leonasolarbarrier3.troy");
        PreloadParticle("leonasolarbarrier2.troy");
        PreloadParticle("leonasolarbarrier1.troy");
        PreloadParticle("Leona_ZenithBlade_tar.troy");
        PreloadParticle("leona_shieldofdaybreak_nova.troy");
        PreloadParticle("leona_shieldofdaybreak_tar.troy");
        PreloadSpell("leonasunlight");
        PreloadParticle("Leona_ZenithBlade_tar.troy");
        PreloadParticle("global_slow.troy");
        PreloadParticle("leona_shieldofdaybreak_cas.troy");
        PreloadSpell("leonashieldofdaybreak");
        PreloadParticle("leona_solarflare_cas_green.troy");
        PreloadParticle("leona_solarflare_cas_red.troy");
        PreloadParticle("leona_solarflare_tar.troy");
        PreloadParticle("leona_solarbarrier_tar.troy");
        PreloadSpell("leonasunlight");
        PreloadSpell("leonasolarflareslow");
        PreloadParticle("leona_solarflare_cas.troy");
        PreloadSpell("root");
        PreloadCharacter("testcube");
        PreloadSpell("leonasolarflare");
        PreloadSpell("leonasolarflarevision");
        PreloadSpell("fizzsharkdissappear");
        PreloadSpell("renektonbloodsplattertarget");
        PreloadSpell("fizzunlockanimation");
        PreloadCharacter("testcube");
        PreloadSpell("expirationtimer");
        PreloadParticle("kennen_btl_beam.troy");
        PreloadParticle("nocturnedeath.troy");
        PreloadSpell("root");
        PreloadSpell("expirationtimer");
        PreloadSpell("fizzmarinerdoom");
        PreloadSpell("leonazenithblade");
        PreloadSpell("leonazenithbladebufforder");
        PreloadSpell("leonazenithbladeroot");
        PreloadParticle("leona_zenithblade_trail.troy");
        PreloadSpell("leonasunlight");
        PreloadParticle("leona_zenithblade_sound.troy");
        PreloadParticle("leona_zenithblade_arrive.troy");
        PreloadSpell("nocturneumbrablades");
        PreloadParticle("globalhit_red.troy");
        PreloadSpell("nocturneparanoia2");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadParticle("fizz_piercingstrike.troy");
        PreloadSpell("root");
        PreloadParticle("fizz_piercingstrike_tar.troy");
        PreloadSpell("renektonbloodsplattertarget");
        PreloadSpell("fizzunlockanimation");
        PreloadParticle("nocturneumbrablades_tar.troy");
        PreloadSpell("ifhasbuffcheck");
        PreloadSpell("nocturneumbrabladesattack");
        PreloadSpell("nocturneumbrablades");
        PreloadParticle("fizz_ring_green.troy");
        PreloadParticle("fizz_ring_red.troy");
        PreloadSpell("fizzmarinerdoomslow");
        PreloadSpell("fizzknockup");
        PreloadSpell("fizzmoveback");
        PreloadSpell("fizzshark");
        PreloadCharacter("fizzshark");
        PreloadParticle("fizz_sharksplash.troy");
        PreloadParticle("fizz_sharksplash_ground.troy ");
        PreloadSpell("fizzmarinerdoomboom");
        PreloadSpell("fizzmarinerdoom");
        PreloadSpell("fizzmarinerdoommissile");
        PreloadSpell("fizzmarinerdoombomb");
        PreloadParticle("alistar_trample_01.troy");
        PreloadParticle("alistar_nose_puffs.troy");
        PreloadParticle("alistar_trample_head.troy");
        PreloadParticle("alistar_trample_hand.troy");
        PreloadParticle("urgotdeath.troy");
        PreloadParticle("urgotcorrosivedebuff_buf.troy");
        PreloadSpell("alistartrample");
        PreloadParticle("meditate_eff.troy");
        PreloadSpell("alistartrample");
        PreloadParticle("urgotterrorcapacitor_buf.troy");
        PreloadSpell("urgotslow");
        PreloadParticle("urgotswapdef.troy");
        PreloadParticle("urgotidle.troy");
        PreloadSpell("urgotterrorcapacitoractive2");
        PreloadSpell("urgotslow");
        PreloadSpell("urgotentropypassive");
        PreloadParticle("urgotheatseekingmissile_tar.troy");
        PreloadSpell("urgotswapmarker");
        PreloadSpell("urgotswapmissile");
        PreloadSpell("urgotswapmissile2");
        PreloadSpell("slow");
        PreloadCharacter("testcube");
        PreloadSpell("gragasbarrelrollboom");
        PreloadSpell("gragasbarrelrollrender");
        PreloadSpell("gragasbarrelroll");
        PreloadSpell("urgotcorrosivedebuff");
        PreloadParticle("urgotheatseekingindicator.troy");
        PreloadParticle("urgottargetindicator.troy");
        PreloadSpell("gragasbarrelroll");
        PreloadCharacter("testcuberender");
        PreloadSpell("urgotswapmarker");
        PreloadSpell("urgotswapmissile");
        PreloadSpell("urgotswapmissile2");
        PreloadSpell("expirationtimer");
        PreloadSpell("urgotterrorcapacitoractive2");
        PreloadSpell("urgotslow");
        PreloadParticle("bloodslash.troy");
        PreloadParticle("urgotheatseekingmissile_tar.troy");
        PreloadSpell("urgotentropypassive");
        PreloadSpell("slow");
        PreloadParticle("gragas_caskboom_classy.troy");
        PreloadParticle("gragas_caskboom.troy");
        PreloadSpell("moveawaycollision");
        PreloadParticle("gragas_caskwine_tar.troy");
        PreloadParticle("gragas_buff_01.troy");
        PreloadSpell("gragasbarrelrolltoggle");
        PreloadParticle("gragas_giftbarrelfoam.troy");
        PreloadParticle("gragas_barrelfoam_classy.troy");
        PreloadParticle("gragas_barrelfoam.troy");
        PreloadSpell("gragasexplosivecaskdebuff");
        PreloadParticle("gragas_barrelboom_classy.troy");
        PreloadParticle("gragas_barrelboom.troy");
        PreloadSpell("gragasbarrelroll");
        PreloadSpell("sharedwardbuff");
        PreloadSpell("gragasbodyslamholder");
        PreloadParticle("gragas_bodyslam_cas.troy");
        PreloadSpell("gragasbodyslam");
        PreloadParticle("gragas_bodyslam_cas_02.troy");
        PreloadParticle("gragas_bodyslam_cas_03.troy");
        PreloadParticle("gragas_bodyslam_unit_tar_02.troy");
        PreloadParticle("gragas_bodyslam_unit_tar.troy");
        PreloadSpell("gragasbodyslamtargetslow");
        PreloadSpell("urgotheatseekingammo");
        PreloadCharacter("testcuberender");
        PreloadSpell("expirationtimer");
        PreloadParticle("urgotswapdrip.troy");
        PreloadSpell("urgotswapmissile");
        PreloadSpell("suppression");
        PreloadSpell("urgotswaptarget");
        PreloadSpell("urgotswapexecute");
        PreloadSpell("unlockanimation");
        PreloadSpell("urgotswap2");
        PreloadParticle("urgotswaptarget.troy");
        PreloadSpell("root");
        PreloadSpell("urgotswapmarker");
        PreloadSpell("urgotswapdef");
        PreloadSpell("gragasdrunkenrage");
        PreloadSpell("gragasbodyslamselfslow");
        PreloadSpell("gragasdrunkenrageself");
        PreloadParticle("urgotentropy_buf.troy");
        PreloadParticle("urgotplasmagrenade_tar.troy");
        PreloadSpell("urgotcorrosivedebuff");
        PreloadParticle("urgotplasmagrenade_hit.troy");
        PreloadCharacter("orianna");
        PreloadSpell("orianaghost");
        PreloadSpell("orianaghostminion");
        PreloadSpell("oriannaballtracker");
        PreloadSpell("gragaspassiveheal");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("urgotdeathparticle");
        PreloadSpell("urgotentropypassive");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("propel");
        PreloadParticle("volibear_r_cas_03.troy");
        PreloadParticle("volibear_r_cas_04.troy");
        PreloadParticle("volibear_r_lightning_arms.troy");
        PreloadParticle("volibear_r_chain_lighting_01.troy");
        PreloadSpell("root");
        PreloadSpell("volibearrchain");
        PreloadSpell("volibearrlimit");
        PreloadParticle("volibear_r_tar.troy");
        PreloadParticle("volibear_r_tar_02.troy");
        PreloadCharacter("testcuberender");
        PreloadSpell("expirationtimer");
        PreloadSpell("volibearrapplicator");
        PreloadSpell("volibearrchargetracker");
        PreloadSpell("volibearpassiveheal");
        PreloadCharacter("spellbook1");
        PreloadSpell("propelspellcaster");
        PreloadParticle("propelbubbles.troy");
        PreloadSpell("alistartrample");
        PreloadSpell("pulverize");
        PreloadParticle("volibear_r_tar.troy");
        PreloadParticle("volibear_r_chain_lighting_01.troy");
        PreloadSpell("root");
        PreloadSpell("volibearrchain");
        PreloadParticle("volibear_r_lasthit_sound.troy");
        PreloadParticle("fizz_ring_green.troy");
        PreloadParticle("fizz_ring_red.troy");
        PreloadParticle("fizz_ultimatemissile_orbit.troy");
        PreloadSpell("fizzmoveback");
        PreloadSpell("fizzmarinerdoomslow");
        PreloadSpell("fizzshark");
        PreloadCharacter("fizzshark");
        PreloadParticle("fizz_sharksplash.troy");
        PreloadParticle("fizz_sharksplash_ground.troy ");
        PreloadSpell("fizzmarinerdoombomb");
        PreloadSpell("fizzmarinerdoommissile");
        PreloadParticle("volibear_q_speed_buf.troy");
        PreloadSpell("volibearqextra");
        PreloadCharacter("testcube");
        PreloadSpell("alistarheadbuttmarker");
        PreloadSpell("expirationtimer");
        PreloadSpell("alistartrample");
        PreloadSpell("headbutt");
        PreloadSpell("headbutttarget");
        PreloadParticle("volibear_e_aoe_indicator.troy");
        PreloadParticle("volibear_e_aoe_indicator_02.troy");
        PreloadParticle("volibear_e_cas_blast.troy");
        PreloadParticle("volibear_e_cas.troy");
        PreloadParticle("volibear_e_tar.troy");
        PreloadParticle("volibear_q_speed_buf.troy");
        PreloadParticle("volibear_q_cas_02.troy");
        PreloadParticle("volibear_q_attack_buf.troy");
        PreloadParticle("volibear_q_lightning_cast.troy");
        PreloadParticle("volibear_q_lightning_cast_02.troy");
        PreloadParticle("kennen_lr_tar.troy");
        PreloadSpell("volibearqextra");
        PreloadSpell("volibearqspeed");
        PreloadSpell("volibearqhunted");
        PreloadSpell("volibearqspeedpart");
        PreloadSpell("volibearpassivehealcheck");
        PreloadParticle("volibear_q_tar.troy");
        PreloadSpell("volibearqextra");
        PreloadSpell("colossalstrength");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadParticle("volibear_tar_indicator.troy");
        PreloadParticle("volibear_tar_indicator_crit.troy");
        PreloadParticle("volibear_tar_indicator.troy");
        PreloadParticle("volibear_tar_indicator_crit.troy");
        PreloadSpell("volibearpassiveheal");
        PreloadSpell("volibearpassivecd");
        PreloadParticle("steamgolemshield_hit.troy");
        PreloadSpell("manabarrier");
        PreloadSpell("volibearwstats");
        PreloadSpell("volibearwparticle");
        PreloadSpell("volibearwdebuff");
        PreloadSpell("volibearwdebuffchaos");
        PreloadParticle("volibearw_tar.troy");
        PreloadSpell("volibearwdrain");
        PreloadSpell("volibearpassivebuff");
        PreloadSpell("volibearpassivehealcheck");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("volibearhatred");
        PreloadSpell("volibearhatredzilean");
        PreloadSpell("volibearw");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("swaintacticalsupremacy");
        PreloadSpell("swaintorment");
        PreloadSpell("facingme");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("battlefury");
        PreloadSpell("bloodlustmarker");
        PreloadParticle("kogmawlivingartillery_cas_chinese_green.troy");
        PreloadParticle("kogmawlivingartillery_cas_chinese_red.troy");
        PreloadParticle("kogmawlivingartillery_cas_green.troy");
        PreloadParticle("kogmawlivingartillery_cas_red.troy");
        PreloadParticle("kogmawlivingartillery_tar_green.troy");
        PreloadSpell("kogmawlivingartillerysight");
        PreloadParticle("kogmawlivingartillery_mis.troy");
        PreloadCharacter("testcube");
        PreloadSpell("kogmawlivingartillerycost");
        PreloadSpell("renektonincombat");
        PreloadSpell("bloodlustparticle");
        PreloadSpell("kogmawcausticspittlecharged");
        PreloadCharacter("spellbook1");
        PreloadSpell("expirationtimer");
        PreloadSpell("root");
        PreloadSpell("graveschargeshotshot");
        PreloadParticle("graves_clustershot_tar.troy");
        PreloadSpell("gravesclustershotattack");
        PreloadParticle("kogmawchinesebasicattack_tar.troy");
        PreloadParticle("kogmawspatter.troy");
        PreloadParticle("kogmawchinesebasicattack_tar.troy");
        PreloadParticle("kogmawspatter.troy");
        PreloadParticle("kogmawchinesebasicattack_tar.troy");
        PreloadParticle("kogmawspatter.troy");
        PreloadParticle("undyingrage_glow.troy");
        PreloadSpell("talonshadowassaultbuff");
        PreloadSpell("talonshadowassaultmisone");
        PreloadParticle("tryndamere_heal.troy");
        PreloadParticle("graves_move_onbuffactivate.troy");
        PreloadSpell("gravesmovesteroid");
        PreloadParticle("bloodlust_flame.troy");
        PreloadSpell("talonshadowassault");
        PreloadCharacter("testcube");
        PreloadSpell("talonshadowassaultmarker");
        PreloadParticle("talon_ult_tar.troy");
        PreloadSpell("talonshadowassaultmisbuff");
        PreloadParticle("bowmaster_basicattack_tar.troy");
        PreloadParticle("kogmawvoidooze_green.troy");
        PreloadParticle("kogmawvoidooze_red.troy");
        PreloadSpell("kogmawvoidoozeslow");
        PreloadSpell("kogmawvoidoozemissile");
        PreloadParticle("kogmawvoidooze_tar.troy");
        PreloadSpell("talonbleeddebuff");
        PreloadSpell("talonnoxiandiplomacybuff");
        PreloadSpell("talonnoxiandiplomacy");
        PreloadParticle("talon_ult_cas.troy");
        PreloadSpell("root");
        PreloadParticle("talon_invis_cas.troy");
        PreloadSpell("talonshadowassaultanimbuff");
        PreloadSpell("talonshadowassaultbuff");
        PreloadSpell("talonshadowassaultmisone");
        PreloadSpell("talonshadowassaulttoggle");
        PreloadParticle("talon_ult_blade_hold.troy");
        PreloadParticle("talon_ult_blade_hold_team_id_red.troy");
        PreloadSpell("root");
        PreloadSpell("gravessmokegrenadedelay");
        PreloadSpell("talonshadowassaultmistwo");
        PreloadParticle("talon_ult_tar.troy");
        PreloadParticle("bowmaster_basicattack_tar.troy");
        PreloadParticle("graves_smokegrenade_boom.troy");
        PreloadCharacter("testcube");
        PreloadSpell("gravessmokegrenade");
        PreloadSpell("gravessmokegrenadesecretpassive");
        PreloadSpell("talonhaste");
        PreloadParticle("talon_ult_sound.troy");
        PreloadSpell("talonshadowassaultmisone");
        PreloadSpell("talonshadowassaultbuff");
        PreloadParticle("graves_smokegrenade_cloud_team_green.troy");
        PreloadParticle("graves_smokegrenade_cloud_team_red.troy");
        PreloadSpell("gravessmokegrenadeboomslow");
        PreloadSpell("gravessmokegrenadeboom");
        PreloadSpell("gravessmokegrenadenocturneult");
        PreloadCharacter("testcuberender10vision");
        PreloadSpell("expirationtimer");
        PreloadSpell("slashbeenhit");
        PreloadParticle("bloodslash.troy");
        PreloadParticle("slash.troy");
        PreloadSpell("gravespassivegrit");
        PreloadParticle("kogmawchinesebasicattack_tar.troy");
        PreloadParticle("kogmawspatter.troy");
        PreloadSpell("gravespassiveshotattack");
        PreloadSpell("gravespassivestack");
        PreloadSpell("kogmawicathiansurprisesound");
        PreloadParticle("kogmawdeathproc.troy");
        PreloadParticle("kogmawdeathbackbeam.troy");
        PreloadSpell("unlockanimation");
        PreloadSpell("untargetable");
        PreloadCharacter("kogmawdead");
        PreloadParticle("kogmawdeath_nova.troy");
        PreloadParticle("kogmawdead_idle.troy");
        PreloadSpell("kogmawicathiansurprise");
        PreloadParticle("kognoseglow.troy");
        PreloadParticle("kogmaw_deepsea_glow.troy");
        PreloadSpell("kogmawicathiansurprise");
        PreloadSpell("facingme");
        PreloadSpell("mockingshoutslow");
        PreloadSpell("gravespassivecounter");
        PreloadSpell("gravespassivegrit");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("gravespassive");
        PreloadSpell("yorickrazombie");
        PreloadSpell("yorickreviveallyself");
        PreloadSpell("kogmawicathiansurpriseready");
        PreloadSpell("kogmawcausticspittle");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("kogmawicathiandisplay");
        PreloadParticle("talon_e_cast.troy");
        PreloadParticle("talon_e_tar.troy");
        PreloadSpell("talondamageamp");
        PreloadCharacter("testcube");
        PreloadSpell("talonrakemarker");
        PreloadParticle("talon_w_tar.troy");
        PreloadSpell("talonrakemissileonemarker");
        PreloadSpell("talonslow");
        PreloadSpell("talonrakemissileone");
        PreloadParticle("bladergoue_bladeaoe_temp.troy");
        PreloadSpell("root");
        PreloadSpell("talonrakemissiletwo");
        PreloadParticle("talon_w_tar.troy");
        PreloadSpell("talonslow");
        PreloadParticle("talon_q_bleed_indicator.troy");
        PreloadParticle("talon_q_bleed.troy");
        PreloadCharacter("testcube");
        PreloadSpell("expirationtimer");
        PreloadSpell("IonianBootsofLucidity");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("talonmercy");
        PreloadSpell("hardening");
        PreloadSpell("mercurytreads");
        PreloadParticle("corki_gatlin_cas.troy");
        PreloadParticle("cassiopeiadeath.troy");
        PreloadParticle("cassdeathdust.troy");
        PreloadCharacter("cassiopeia_death");
        PreloadSpell("cassiopeiadeathparticle");
        PreloadSpell("cassiopeiadeadlycadence");
        PreloadParticle("cassdeadlycadence_buf.troy");
        PreloadSpell("root");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("gatlingdebuff");
        PreloadSpell("gatlingdebuffcheck");
        PreloadSpell("gatlingdebuff");
        PreloadParticle("wallofpain_new_post_green.troy");
        PreloadParticle("wallofpain_new_post_red.troy");
        PreloadParticle("wallofpain__new_beam.troy");
        PreloadSpell("wallofpaintarget");
        PreloadSpell("wallofpainextra");
        PreloadSpell("wallofpainmarker");
        PreloadCharacter("testcuberender");
        PreloadSpell("expirationtimer");
        PreloadSpell("wallofpainbeam");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("swaintacticalsupremacy");
        PreloadSpell("swaintorment");
        PreloadSpell("fallenonetarget");
        PreloadParticle("fallenone_nova.troy");
        PreloadParticle("defile_green_cas.troy");
        PreloadParticle("defile_red_cas.troy");
        PreloadSpell("deathdefiedbuff");
        PreloadSpell("defile");
        PreloadParticle("laywaste_point.troy");
        PreloadParticle("laywaste_tar.troy");
        PreloadCharacter("spellbook1");
        PreloadParticle("fallenone_nova.troy");
        PreloadSpell("defile");
        PreloadParticle("neutralmonster_buf.troy");
        PreloadSpell("deathdefied");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadParticle("mordekeiser_cotg_skin.troy");
        PreloadSpell("defile");
        PreloadSpell("cassiopeiapetrifyinggaze");
        PreloadSpell("slow");
        PreloadParticle("casspetrifymiss_tar.troy");
        PreloadSpell("root");
        PreloadSpell("expirationtimer");
        PreloadSpell("deathdefiedbuff");
        PreloadParticle("turntostone.troy");
        PreloadParticle("turnback.troy");
        PreloadParticle("cassmiasma_tar_green.troy");
        PreloadParticle("cassmiasma_tar_red.troy");
        PreloadSpell("cassiopeiamiasmapoison");
        PreloadSpell("slow");
        PreloadCharacter("testcuberender");
        PreloadSpell("expirationtimer");
        PreloadParticle("cassnoxioussnakeplane_green.troy");
        PreloadParticle("cassnoxioussnakeplane_red.troy");
        PreloadParticle("cassnoxious_tar.troy");
        PreloadSpell("cassiopeianoxiousblastpoison");
        PreloadSpell("cassiopeianoxiousblasthaste");
        PreloadCharacter("testcube");
        PreloadSpell("expirationtimer");
        PreloadParticle("cassiotwinfang_refreshsound.troy");
        PreloadSpell("missilebarrage");
        PreloadParticle("corki_phosphorous_bomb_tar.troy");
        PreloadSpell("phosphorusbombblind");
        PreloadSpell("corkimissilebarragetimer");
        PreloadSpell("missilebarrage");
        PreloadSpell("corkideathparticle");
        PreloadSpell("rapidreload");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("missilebarrage");
        PreloadSpell("corkimissilebarragenc");
        PreloadParticle("corki_misslebarrage_dd_tar.troy");
        PreloadParticle("corki_valkrie_speed.troy");
        PreloadSpell("root");
        PreloadCharacter("testcube");
        PreloadSpell("dangerzone");
        PreloadSpell("valkyriesound");
        PreloadParticle("crashboom.troy");
        PreloadSpell("root");
        PreloadParticle("corki_misslebarrage_std_tar.troy");
        PreloadSpell("missilebarrage");
        PreloadSpell("mbcheck2");
        PreloadSpell("corkimissilebarragenc");
        PreloadSpell("willoftheancientsself");
        PreloadSpell("willoftheancientsfriendly");
        PreloadParticle("rallyingbanner_itm.troy");
        PreloadSpell("tearofthegoddesstrack");
        PreloadSpell("manamuneattacktrack");
        PreloadSpell("manamuneattackconversion");
        PreloadSpell("witsend");
        PreloadSpell("spiritvisage");
        PreloadSpell("odinbloodburster");
        PreloadSpell("monkeykingclonecd");
        PreloadSpell("monkeykingclonespellcast");
        PreloadSpell("monkeykingcloneapplicator");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("monkeykingdeathparticle");
        PreloadSpell("avariceblade");
        PreloadSpell("sheendelay");
        PreloadSpell("sheen");
        PreloadSpell("internal_35slow");
        PreloadSpell("itemslow");
        PreloadParticle("karmatwomantrasound.troy");
        PreloadParticle("karma_mantracharge_indicator_02.troy");
        PreloadSpell("yomuspellsword");
        PreloadSpell("yomughostself");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("yomushockorb");
        PreloadSpell("karmachakra");
        PreloadSpell("karmachakracharge");
        PreloadSpell("karmaonemantraparticle");
        PreloadSpell("karmatranscendence");
        PreloadSpell("karmachakracounter");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("karmatwomantraparticle");
        PreloadParticle("karma_mantracharge_indicator_01.troy");
        PreloadParticle("absolutezero2_green_cas.troy");
        PreloadParticle("absolutezero2_red_cas.troy");
        PreloadSpell("absolutezeroslow");
        PreloadSpell("absolutezero");
        PreloadParticle("absolutezero_nova.troy");
        PreloadParticle("absolutezero_tar.troy");
        PreloadSpell("absolutezerobonusdamage2");
        PreloadParticle("absolutezero_nova.troy");
        PreloadSpell("absolutezerobonusdamage");
        PreloadSpell("missfortuneplaceholder");
        PreloadSpell("missfortunebulletholder");
        PreloadParticle("missfortune_bullettime_tar.troy");
        PreloadSpell("rumbleflamethrowerbuff");
        PreloadSpell("rumbleflamethrowereffect");
        PreloadSpell("rumbleflamethrower");
        PreloadSpell("rumbleoverheat");
        PreloadSpell("rumbledangerzone");
        PreloadSpell("rumbleheatdelay");
        PreloadParticle("rumble_ult_impact.troy");
        PreloadParticle("rumble_ult_impact_burn_cannon_ball_team_id_green.troy");
        PreloadParticle("rumble_ult_impact_burn_cannon_ball_team_id_red.troy");
        PreloadParticle("rumble_ult_impact_burn_pineapple_team_id_green.troy");
        PreloadParticle("rumble_ult_impact_burn_pineapple_team_id_red.troy");
        PreloadParticle("rumble_ult_impact_burn_teamid_green.troy");
        PreloadParticle("rumble_ult_impact_burn_teamid_red.troy");
        PreloadSpell("rumblecarpetbombslow");
        PreloadSpell("rumblecarpetbombburnorder");
        PreloadSpell("rumblecarpetbombburndest");
        PreloadParticle("missfortune_richochet_tar_first.troy");
        PreloadCharacter("testcube");
        PreloadSpell("expirationtimer");
        PreloadSpell("missfortunershotholder");
        PreloadSpell("missfortunericochetshot");
        PreloadParticle("rumblecarpetbombsoundstart.troy");
        PreloadSpell("rumbleflamethrowerbuff");
        PreloadParticle("rumble_gun_cas_02.troy");
        PreloadParticle("rumble_gun_lite.troy");
        PreloadParticle("rumble_gun_cas.troy");
        PreloadParticle("missfortune_richochet_tar_second_02.troy");
        PreloadParticle("missfortune_richochet_tar_second.troy");
        PreloadSpell("rumblecarpetbombeffect");
        PreloadSpell("rumblecarpetbombmissile");
        PreloadSpell("rumblecarpetbomb");
        PreloadSpell("rumblecarpetbombcounter");
        PreloadCharacter("testcube");
        PreloadSpell("expirationtimer");
        PreloadSpell("rumblecarpetbombsound1");
        PreloadSpell("rumblecarpetbombsound2");
        PreloadParticle("rumble_ult_placeholder_01.troy");
        PreloadParticle("rumble_incoming_mis_cannon_ball.troy");
        PreloadParticle("rumble_incoming_mis_pineapple.troy");
        PreloadParticle("rumble_incoming_mis.troy");
        PreloadSpell("rumblecarpetbombbufforder");
        PreloadSpell("rumblecarpetbombbuffdest");
        PreloadParticle("missfortune_ult_cas_muzzle_flash.troy");
        PreloadParticle("missfortune_left_ult_cas.troy");
        PreloadParticle("missfortune_ult_cas.troy");
        PreloadSpell("missfortunewaves");
        PreloadSpell("missfortunebulletsound");
        PreloadSpell("missfortunewavehold");
        PreloadSpell("missfortunebulletholder");
        PreloadParticle("missfortune_bullettime_tar.troy");
        PreloadParticle("rumblecarpetbombsoundend.troy");
        PreloadParticle("missfortune_makeitrain_tar_green.troy");
        PreloadParticle("missfortune_makeitrain_tar_red.troy");
        PreloadParticle("missfortune_makeitrain_incoming.troy");
        PreloadParticle("missfortune_makeitrain_incoming_02.troy");
        PreloadParticle("missfortune_makeitrain_incoming_03.troy");
        PreloadParticle("missfortune_makeitrain_incoming_04.troy");
        PreloadSpell("rumblecarpetbombeffect");
        PreloadCharacter("testcube");
        PreloadSpell("expirationtimer");
        PreloadSpell("rumbleheatdelay");
        PreloadSpell("rumblecarpetbomb");
        PreloadSpell("missfortunescatteraoe");
        PreloadCharacter("spellbook1");
        PreloadSpell("missfortunescatterparticle");
        PreloadSpell("rumblegrenadedz");
        PreloadSpell("rumblegrenadedebuff");
        PreloadSpell("rumblegrenadezapeffect");
        PreloadSpell("rumblegrenadeslow");
        PreloadParticle("rumble_taze_tar.troy");
        PreloadSpell("rumblegrenadecd");
        PreloadSpell("rumblegrenadecounter");
        PreloadSpell("rumbleoverheat");
        PreloadSpell("rumbleheatdelay");
        PreloadSpell("rumbledangerzone");
        PreloadSpell("rumblegrenadedz");
        PreloadSpell("slow");
        PreloadParticle("missfortune_makeitrain_unit_tar.troy");
        PreloadSpell("rumblegrenadedz");
        PreloadParticle("rumble_taze_tar_dangerzone_02.troy");
        PreloadParticle("rumble_taze_tar_dangerzone.troy");
        PreloadParticle("rumble_taze_beam.troy");
        PreloadParticle("rumble_taze_beam_tar.troy");
        PreloadParticle("missfortune_viciousshots_attack_buf.troy");
        PreloadSpell("internal_50ms");
        PreloadSpell("grievouswound");
        PreloadSpell("karmaonemantraparticle");
        PreloadSpell("karmatwomantraparticle");
        PreloadSpell("karmachakra");
        PreloadSpell("karmachakracharge");
        PreloadSpell("karmaonemantraparticle");
        PreloadSpell("karmatwomantraparticle");
        PreloadSpell("karmaheavenlywavec");
        PreloadSpell("karmaspiritbondc");
        PreloadSpell("karmasoulshieldc");
        PreloadSpell("karmachakra");
        PreloadSpell("karmaheavenlywave");
        PreloadSpell("karmaspiritbond");
        PreloadSpell("karmasoulshield");
        PreloadSpell("karmachakracharge");
        PreloadSpell("karmatwomantraparticle");
        PreloadSpell("karmaonemantraparticle");
        PreloadSpell("karmachakratimer");
        PreloadParticle("meditate_eff.troy");
        PreloadSpell("resistantskin");
        PreloadSpell("karmachakracharge");
        PreloadSpell("karmaonemantraparticle");
        PreloadSpell("karmatwomantraparticle");
        PreloadSpell("karmachakratimer");
        PreloadParticle("shen_feint_self_deactivate.troy");
        PreloadSpell("rumbleoverheat");
        PreloadSpell("rumbleshield");
        PreloadSpell("rumbledangerzone");
        PreloadSpell("rumbleheatdelay");
        PreloadSpell("rumbleshieldbuff");
        PreloadSpell("iceblast");
        PreloadSpell("karmachakra");
        PreloadParticle("karma_heavenlywave_unit_tar.troy");
        PreloadParticle("karma_heavenlywave_self_heal.troy");
        PreloadParticle("karma_heavenlywave_ally_heal.troy");
        PreloadParticle("karma_heavenlywave_unit_tar.troy");
        PreloadSpell("missfortunepassivestack");
        PreloadParticle("missfortune_passive_tar_indicator.troy");
        PreloadSpell("rumbleheatingup");
        PreloadSpell("rumbleheatingup2");
        PreloadParticle("karma_soulshield_buf.troy");
        PreloadParticle("karmasoulshieldsound.troy");
        PreloadSpell("karmasoulshieldanim");
        PreloadParticle("karma_soulshield_buf_mantra.troy");
        PreloadParticle("karma_souldshiled_ult_unit_tar.troy");
        PreloadSpell("missfortunebulletsound");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("missfortunestrut");
        PreloadSpell("ispiratehunter");
        PreloadSpell("missfortunepassive");
        PreloadParticle("karma_soulshield_buf.troy");
        PreloadParticle("karmasoulshieldsound.troy");
        PreloadSpell("karmasoulshieldanim");
        PreloadSpell("visionary_counter");
        PreloadSpell("visionary");
        PreloadSpell("missfortunestrutdebuff");
        PreloadSpell("missfortunewaves");
        PreloadParticle("missfortune_passive_buf.troy");
        PreloadSpell("root");
        PreloadParticle("karma_spiritbond_speed_buf.troy");
        PreloadSpell("root");
        PreloadSpell("rumbleoverheat");
        PreloadSpell("missfortunestrutdebuff");
        PreloadSpell("missfortunestrut");
        PreloadSpell("visionary");
        PreloadSpell("visionary_counter");
        PreloadSpell("visionary_marker");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("karma_spiritbond_slow_trigger.troy");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("rumbleheatsystem");
        PreloadSpell("rumbleheatpunchtt");
        PreloadSpell("sheendelay");
        PreloadSpell("sheen");
        PreloadParticle("leblanc_shackle_self_idle.troy");
        PreloadParticle("karma_spiritbond_indicator_target_blank.troy");
        PreloadParticle("karma_spiritbond_indicator_impact.troy");
        PreloadParticle("karma_spiritbond_speed_buf.troy");
        PreloadSpell("root");
        PreloadParticle("karma_spiritbond_indicator_target.troy");
        PreloadParticle("karma_spiritbond_dmg_indicator.troy");
        PreloadParticle("karma_spiritbond_ult_beam_teamid_ally_green.troy");
        PreloadParticle("karma_spiritbond_ult_beam_teamid_enemy_red.troy");
        PreloadParticle("karmaspiritbondsoundgreen.troy");
        PreloadParticle("karmaspiritbondsoundred.troy");
        PreloadSpell("karmalinkdmgcdorder");
        PreloadSpell("karmamantrasbhaste");
        PreloadParticle("karma_spiritbond_damage_tar.troy");
        PreloadSpell("karmamantrasbslow");
        PreloadSpell("karmalinkdmgcdchaos");
        PreloadSpell("karmaspiritbondallyselftooltip");
        PreloadParticle("karma_spiritbond_break_overhead.troy");
        PreloadSpell("karmasbstealthbreak");
        PreloadSpell("karmaspiritbond");
        PreloadSpell("karmaspiritbondc");
        PreloadSpell("karmaspiritbondenemytooltip");
        PreloadSpell("rumbleheatingup");
        PreloadSpell("rumbleheatingup2");
        PreloadSpell("rumbleoverheat");
        PreloadSpell("rumbledangerzone");
        PreloadSpell("rumblegrenadecounter");
        PreloadSpell("rumbleoverheat");
        PreloadSpell("rumbleoverheatsound");
        PreloadSpell("rumbleheatdelay");
        PreloadSpell("infuse");
        PreloadSpell("rumbleheatingup");
        PreloadParticle("karma_spiritbond_speed_buf.troy");
        PreloadSpell("root");
        PreloadParticle("leblanc_shackle_self_idle.troy");
        PreloadParticle("karma_spiritbond_indicator_target_blank.troy");
        PreloadParticle("karma_spiritbond_indicator_target_enemy.troy");
        PreloadParticle("karma_spiritbond_indicator_impact_01.troy");
        PreloadParticle("karma_spiritbond_ult_beam_teamid_ally_green.troy");
        PreloadParticle("karma_spiritbond_ult_beam_teamid_enemy_red.troy");
        PreloadParticle("karmaspiritbondsoundgreen.troy");
        PreloadParticle("karmaspiritbondsoundred.troy");
        PreloadParticle("karma_spiritbond_indicator_impact.troy");
        PreloadSpell("karmalinkdmgcdorder");
        PreloadSpell("karmamantrasbhaste");
        PreloadParticle("karma_spiritbond_damage_tar.troy");
        PreloadSpell("karmamantrasbslow");
        PreloadSpell("karmalinkdmgcdchaos");
        PreloadSpell("karmaspiritbondenemytooltip");
        PreloadParticle("karma_spiritbond_break_overhead.troy");
        PreloadSpell("karmasbstealthbreak");
        PreloadSpell("karmaspiritbond");
        PreloadSpell("karmaspiritbondallyselftooltip");
        PreloadSpell("karmaspiritbondc");
        PreloadSpell("karmaspiritbondc");
        PreloadSpell("lightningrodapplicator");
        PreloadSpell("lightningrodchain");
        PreloadParticle("rodofages_itm.troy");
        PreloadSpell("catalystheal");
        PreloadSpell("caitlynheadshotcount");
        PreloadSpell("caitlynheadshot");
        PreloadSpell("ifhasbuffcheck");
        PreloadSpell("caitlynheadshot");
        PreloadSpell("caitlynheadshotcount");
        PreloadSpell("cantattack");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("caitlynheadshotpassive");
        PreloadParticle("caitlyn_headshot_tar.troy");
        PreloadSpell("caitlynheadshot");
        PreloadParticle("infernalguardian_tar_frost.troy");
        PreloadParticle("infernalguardian_tar.troy");
        PreloadCharacter("annietibbers");
        PreloadSpell("infernalguardian");
        PreloadSpell("infernalguardiantimer");
        PreloadSpell("infernalguardianburning");
        PreloadSpell("pyromania_particle");
        PreloadSpell("pyromania");
        PreloadParticle("sunfirecape_aura_frost.troy");
        PreloadParticle("sunfirecapeaura_tar.troy");
        PreloadSpell("infernalguardiantimer");
        PreloadParticle("olaf_axethrow_tar.troy");
        PreloadParticle("olaf_axethrow_tar_02.troy");
        PreloadParticle("olaf_axethrow_tar_03.troy");
        PreloadSpell("feast");
        PreloadParticle("feast_tar_indicator.troy");
        PreloadSpell("feast");
        PreloadParticle("olaf_axe_trigger.troy");
        PreloadParticle("olaf_axe_totem_team_id_green.troy");
        PreloadParticle("olaf_axe_totem_team_id_red.troy");
        PreloadSpell("olafaxeexpirationtimer2");
        PreloadSpell("olafberzerkerrage");
        PreloadParticle("olaf_axe_refresh_indicator.troy");
        PreloadParticle("olaf_axe_trigger_02.troy");
        PreloadSpell("feast");
        PreloadParticle("chogath_feast_sign.troy");
        PreloadSpell("feast_internal");
        PreloadCharacter("olafaxe");
        PreloadSpell("olafaxeexpirationtimer");
        PreloadSpell("olafslow");
        PreloadSpell("olafaxethrowdamage");
        PreloadParticle("rupture_cas_01.troy");
        PreloadParticle("rupture_dino_cas_02.troy");
        PreloadParticle("rupture_cas_02.troy");
        PreloadSpell("rupturelaunch");
        PreloadCharacter("testcube");
        PreloadSpell("rupturetarget");
        PreloadSpell("tantrumcounter");
        PreloadSpell("tantrumcancast");
        PreloadParticle("bandage_beam.troy");
        PreloadParticle("bandagetoss_tar.troy");
        PreloadSpell("bandagetossflingcaster");
        PreloadSpell("vorpalspikesmisslebuff");
        PreloadParticle("tantrum_cas.troy");
        PreloadSpell("vorpalspikes");
        PreloadSpell("auraofdespair");
        PreloadSpell("auraofdespairdrainlife");
        PreloadSpell("feast");
        PreloadSpell("feastmarker");
        PreloadSpell("vorpalspikes");
        PreloadSpell("carnivore");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadParticle("eternalthirst_buf.troy");
        PreloadSpell("feast");
        PreloadParticle("olaf_recklessswing_tar_02.troy");
        PreloadParticle("olaf_recklessstrike_axe_charge.troy");
        PreloadParticle("olaf_recklessswing_tar_04.troy");
        PreloadParticle("olaf_recklessswing_tar_05.troy");
        PreloadParticle("olaf_recklessswing_tar_03.troy");
        PreloadSpell("pyromania_particle");
        PreloadSpell("pyromania");
        PreloadParticle("disintegratehit_tar_frost.troy");
        PreloadParticle("disintegrate_hit_frost.troy");
        PreloadParticle("disintegratehit_tar.troy");
        PreloadParticle("disintegrate_hit.troy");
        PreloadParticle("akali_mark_impact_tar.troy");
        PreloadSpell("tantrum");
        PreloadSpell("cursedtouch");
        PreloadSpell("cursedtouchmarker");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("olaf_viciousstrikes_weapon_glow.troy");
        PreloadParticle("olaf_viciousstrikes_heal.troy");
        PreloadSpell("caitlynaceintheholevisibility");
        PreloadSpell("caitlynaceinthehole");
        PreloadParticle("caitlyn_laser_beam_01.troy");
        PreloadSpell("ifhasbuffcheck");
        PreloadParticle("anniebasicattack_tar_frost.troy");
        PreloadParticle("anniebasicattack_tar.troy");
        PreloadParticle("anniesparks.troy");
        PreloadSpell("pyromania_particle");
        PreloadSpell("pyromania");
        PreloadParticle("caitlyn_peacemaker_tar_02.troy");
        PreloadCharacter("annie");
        PreloadCharacter("annie");
        PreloadParticle("anniebasicattack_tar_frost.troy");
        PreloadParticle("anniebasicattack_tar.troy");
        PreloadParticle("caitlyn_ace_tar.troy");
        PreloadSpell("ifhasbuffcheck");
        PreloadSpell("caitlynaceinthehole");
        PreloadParticle("anniebasicattack_tar_frost.troy");
        PreloadParticle("anniebasicattack_tar.troy");
        PreloadSpell("hardening");
        PreloadSpell("olafaxethrow");
        PreloadSpell("olafberzerkerrage");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("pyromania_particle");
        PreloadSpell("pyromania");
        PreloadParticle("incinerate_buf_frost.troy");
        PreloadParticle("incinerate_buf.troy");
        PreloadSpell("sheendelay");
        PreloadSpell("lichbane");
        PreloadSpell("caitlynyordletrap");
        PreloadSpell("slow");
        PreloadParticle("caitlyn_entrapment_tar.troy");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("udyrmonkeyagility");
        PreloadSpell("pyromania");
        PreloadSpell("pyromania_particle");
        PreloadSpell("pyromania_marker");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("vaynehunted");
        PreloadSpell("vayneinquisition");
        PreloadSpell("vayneinquisitionspeedpart");
        PreloadSpell("vayneinquisitionspeedpartnormal");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("vaynesilveredbolts");
        PreloadSpell("castfrombehind");
        PreloadSpell("twoshivpoison");
        PreloadCharacter("jester");
        PreloadParticle("vayne_e_tar.troy");
        PreloadParticle("vayne_e_terrain_tar.troy");
        PreloadParticle("vayne_w_tar.troy");
        PreloadSpell("vaynesilvereddebuff");
        PreloadSpell("vaynecondemnmissile");
        PreloadParticle("jackintheboxpoof.troy");
        PreloadSpell("stealth");
        PreloadSpell("jackintheboxdamagesensor");
        PreloadSpell("endkill");
        PreloadSpell("jackintheboxsoftlock");
        PreloadSpell("jackintheboxinternal");
        PreloadSpell("jackintheboxhardlock");
        PreloadCharacter("shacobox");
        PreloadSpell("jackinthebox");
        PreloadCharacter("shaco");
        PreloadParticle("jackintheboxpoof2.troy");
        PreloadSpell("deceivefade");
        PreloadParticle("hallucinatepoof.troy");
        PreloadSpell("hallucinate");
        PreloadSpell("hallucinatefull");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("championchampiondelta");
        PreloadSpell("backstab");
        PreloadSpell("hallucinate");
        PreloadSpell("hallucinatefull");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("backstab");
        PreloadSpell("deceive");
        PreloadSpell("deceivecritbonus");
        PreloadParticle("jester_copy.troy");
        PreloadSpell("root");
        PreloadParticle("hallucinate_nova.troy");
        PreloadSpell("hallucinateapplicator");
        PreloadParticle("caitlyn_yordletrap_idle_green.troy");
        PreloadParticle("caitlyn_yordletrap_idle_red.troy");
        PreloadParticle("caitlyn_yordletrap_trigger_sound.troy");
        PreloadParticle("caitlyn_yordletrap_trigger_02.troy");
        PreloadSpell("caitlynyordletrapdebuff");
        PreloadSpell("caitlynyordletrapsight");
        PreloadSpell("caitlynyordletrap");
        PreloadCharacter("caitlyntrap");
        PreloadParticle("vayne_ult_speed_buf.troy");
        PreloadSpell("vayneinquisition");
        PreloadSpell("chaliceofharmony");
        PreloadParticle("vayne_q_tar.troy");
        PreloadSpell("vaynetumblebonus");
        PreloadSpell("vaynetumblefade");
        PreloadParticle("vayne_passive_speed_buf.troy");
        PreloadSpell("vaynetumblebonus");
        PreloadSpell("vayneinquisition");
        PreloadSpell("youmusblade");
        PreloadParticle("vayne_w_tar.troy");
        PreloadSpell("vaynesilvereddebuff");
        PreloadSpell("vaynetumble");
        PreloadSpell("vaynetumblebonus");
        PreloadSpell("vayneinquisition");
        PreloadParticle("vayne_ult_invis_cas.troy");
        PreloadParticle("vayne_q_cas.troy");
        PreloadParticle("vayne_ult_invis_cas_02.troy");
        PreloadSpell("vaynetumble");
        PreloadSpell("vaynetumblefade");
        PreloadSpell("vaynetumblefailsafe");
        PreloadSpell("vaynetumblebonus");
        PreloadSpell("sting");
        PreloadSpell("championchampiondelta");
        PreloadSpell("backstab");
        PreloadSpell("apbonusdamagetotowers");
        PreloadParticle("vayne_w_tar.troy");
        PreloadSpell("vaynesilvereddebuff");
        PreloadParticle("vayne_w_ring1.troy");
        PreloadSpell("castfrombehind");
        PreloadParticle("absolutezero_tar.troy");
        PreloadSpell("twoshivpoison");
        PreloadSpell("frombehind");
        PreloadParticle("vayne_q_tar.troy");
        PreloadSpell("vaynetumblebonus");
        PreloadSpell("vaynetumblefade");
        PreloadSpell("vaynesilverparticle1");
        PreloadParticle("vayne_w_ring2.troy");
        PreloadSpell("odynsveil");
        PreloadSpell("zhonyasring");
        PreloadSpell("aegisofthelegionauraself");
        PreloadSpell("aegisofthelegionaurafriend");
        PreloadParticle("zettasmanamanipulator_itm.troy");
        PreloadCharacter("testcuberender10vision");
        PreloadSpell("xeratharcanopulsepartfix");
        PreloadSpell("xeratharcanopulsepartfix2");
        PreloadSpell("xeratharcanopulsedeath");
        PreloadSpell("expirationtimer");
        PreloadParticle("xerathr_beam.troy");
        PreloadParticle("xerath_beam_hit.troy");
        PreloadParticle("xerath_magechains_consume.troy");
        PreloadSpell("xerathmagechainsroot");
        PreloadSpell("yoricksummonspectral");
        PreloadSpell("yoricksummonravenous");
        PreloadSpell("yoricksummondecayed");
        PreloadSpell("yorickraremovepet");
        PreloadSpell("yorickultpetactive");
        PreloadCharacter("testcuberender10vision");
        PreloadSpell("xeratharcanopulsepartfix");
        PreloadSpell("xeratharcanopulsepartfix2");
        PreloadSpell("xeratharcanopulsedeath");
        PreloadSpell("expirationtimer");
        PreloadParticle("xerathr_beam.troy");
        PreloadParticle("xerath_beam_hit.troy");
        PreloadParticle("xerath_magechains_consume.troy");
        PreloadSpell("xerathmagechainsroot");
        PreloadCharacter("testcuberender10vision");
        PreloadSpell("expirationtimer");
        PreloadParticle("yorick_necrocloud.troy");
        PreloadSpell("yorickdecayedauraslow");
        PreloadCharacter("oriana");
        PreloadSpell("orianaghost");
        PreloadSpell("orianaghostminion");
        PreloadSpell("oriannaballtracker");
        PreloadSpell("xerathmagechainsroot");
        PreloadParticle("xerath_bolt_hit_tar.troy");
        PreloadParticle("xerath_bolt_hit.troy");
        PreloadSpell("xerathmagechains");
        PreloadParticle("yorick_necroexplosion_deactivate.troy");
        PreloadCharacter("yorickdecayedghoul");
        PreloadSpell("yorickdecayeddiseasecloud");
        PreloadSpell("yorickdecayedlogic");
        PreloadParticle("yorick_necroexplosion.troy");
        PreloadParticle("yorick_necroexplosion_unit_tar.troy");
        PreloadSpell("yorickdecayedslow");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("yorickunholysymbiosis");
        PreloadSpell("yorickravenouslifesteal");
        PreloadCharacter("testcuberender10vision");
        PreloadSpell("xeratharcanopulsedeath");
        PreloadSpell("expirationtimer");
        PreloadSpell("xeratharcanopulsewpartfix");
        PreloadSpell("xeratharcanopulsewpartfix2");
        PreloadSpell("xeratharcanopulsebeam");
        PreloadSpell("xeratharcanopulseball");
        PreloadCharacter("testcuberender10vision");
        PreloadSpell("expirationtimer");
        PreloadCharacter("testcuberender10vision");
        PreloadSpell("expirationtimer");
        PreloadSpell("yoricksummondecayed");
        PreloadParticle("xerath_magechains_buf.troy");
        PreloadSpell("xerathmagechainsroot");
        PreloadParticle("xerath_bolt_hit_tar.troy");
        PreloadSpell("xerathmagechains");
        PreloadParticle("xerath_beam_cas.troy");
        PreloadSpell("yorickdecayedslow");
        PreloadCharacter("testcuberender10vision");
        PreloadSpell("xeratharcanopulsedeath");
        PreloadSpell("expirationtimer");
        PreloadSpell("xeratharcanopulsepartfix");
        PreloadSpell("xeratharcanopulsepartfix2");
        PreloadSpell("xeratharcanopulsebeam");
        PreloadSpell("xeratharcanopulseball");
        PreloadParticle("xerathr_beam_warning_green.troy");
        PreloadParticle("xerathr_beam_warning_red.troy");
        PreloadCharacter("testcuberender10vision");
        PreloadSpell("expirationtimer");
        PreloadSpell("yoricksummonspectral");
        PreloadParticle("yorick_spectralghoul_attack_buf_tar.troy");
        PreloadSpell("yorickspectralprimarytarget");
        PreloadSpell("yorickspectral");
        PreloadSpell("yorickspectralunlock");
        PreloadSpell("yoricksummonravenous");
        PreloadSpell("yorickravenousprimarytarget");
        PreloadSpell("globaldrain");
        PreloadParticle("yorick_ravenousghoul_activeheal.troy");
        PreloadParticle("yorick_ravenousghoul_cas_tar.troy");
        PreloadParticle("wallofpain_new_post_red.troy");
        PreloadParticle("wallofpain_new_post_green.troy");
        PreloadParticle("yorickphwallblue.troy");
        PreloadSpell("yorickdeathgripbeam");
        PreloadSpell("yorickdeathgripextra");
        PreloadSpell("yorickdeathgriptarget");
        PreloadSpell("yorickdeathgripdelay");
        PreloadCharacter("testcuberender");
        PreloadSpell("expirationtimer");
        PreloadSpell("yorickdeathgripbeamdelay");
        PreloadSpell("yorickactiveravenous");
        PreloadParticle("yorick_ravenousghoul_death.troy");
        PreloadSpell("yorickravenousprimarytarget");
        PreloadCharacter("yorickravenousghoul");
        PreloadSpell("yorickravenouslogic");
        PreloadSpell("rebirthready");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("swaintorment");
        PreloadSpell("yorickrazombiekogmaw");
        PreloadParticle("yorickphspectral.troy");
        PreloadSpell("yorickactivespectral");
        PreloadParticle("yorick_spectralghoul_death.troy");
        PreloadSpell("yorickspectralprimarytarget");
        PreloadCharacter("yorickspectralghoul");
        PreloadSpell("yorickspectrallogic");
        PreloadParticle("yorick_ravenousghoul_lifesteal_self.troy");
        PreloadSpell("yorickraremovepet");
        PreloadSpell("yorickrapetbuff2");
        PreloadSpell("yorickdeathgrip");
        PreloadParticle("swainshadowgrasproottemp.troy");
        PreloadParticle("swain_shadowgrasp_magic.troy");
        PreloadParticle("wallofpain_new_post_red.troy");
        PreloadParticle("wallofpain_new_post_green.troy");
        PreloadParticle("yorickphwallorange.troy");
        PreloadParticle("yorick_ult_03_teamid_green.troy");
        PreloadParticle("yorick_ult_03_teamid_red.troy");
        PreloadSpell("yorickultstun");
        PreloadParticle("yorickphdecayedexplosion.troy");
        PreloadParticle("tristana_explosiveshot_unit_tar.troy");
        PreloadSpell("yorickdecayedslow");
        PreloadParticle("yorick_ult_revive_tar.troy");
        PreloadParticle("yorick_ult_02.troy");
        PreloadParticle("yorick_revive_skin_teamid_green.troy");
        PreloadParticle("yorick_revive_skin_teamid_red.troy");
        PreloadSpell("leblancpassive");
        PreloadSpell("yorickreviveallyself");
        PreloadParticle("yorickrevenantdeathsound.troy");
        PreloadSpell("yorickraself");
        PreloadSpell("kogmawicathiansurprise");
        PreloadSpell("kogmawicathiansurpriseready");
        PreloadSpell("yorickrazombielich");
        PreloadParticle("yorick_ult_03_teamid_green.troy");
        PreloadParticle("yorick_ult_03_teamid_red.troy");
        PreloadSpell("xerathlocusofpowertoggle");
        PreloadSpell("xeratharcanopulseextended");
        PreloadSpell("xerathmagechainsextended");
        PreloadSpell("xeratharcanebarragewrapperext");
        PreloadParticle("xerath_locusofpower_buf.troy");
        PreloadParticle("xerath_locusofpower_beam.troy");
        PreloadSpell("xerathlocusofpower");
        PreloadSpell("xeratharcanopulse");
        PreloadSpell("xerathmagechains");
        PreloadSpell("xeratharcanebarragewrapper");
        PreloadSpell("xerathenergize");
        PreloadSpell("yorickrazombie");
        PreloadSpell("yorickrapetbuff");
        PreloadParticle("yorick_ult_03_teamid_green.troy");
        PreloadParticle("yorick_ult_03_teamid_red.troy");
        PreloadSpell("xerathlocusofpower");
        PreloadSpell("poppydefenseparticle");
        PreloadSpell("poppymightparticle");
        PreloadSpell("yorickreviveallyself");
        PreloadSpell("mordekaisercotgpetbuff2");
        PreloadSpell("poppymightofdemacia");
        PreloadParticle("poppydam_buf.troy");
        PreloadSpell("yorickrarevive");
        PreloadSpell("yorickrapetbuff2");
        PreloadSpell("yorickraremovepet");
        PreloadParticle("yorick_ult_01_teamid_green.troy");
        PreloadParticle("yorick_ult_01_teamid_red.troy");
        PreloadParticle("yorick_ult_02.troy");
        PreloadSpell("yorickultpetactive");
        PreloadSpell("yorickradelaylich");
        PreloadSpell("yorickradelaykogmaw");
        PreloadSpell("yorickradelay");
        PreloadSpell("poppydefenseofdemacia");
        PreloadParticle("poppydef_buf.troy");
        PreloadSpell("poppyditarget");
        PreloadSpell("xeratharcanebarragebarrage");
        PreloadSpell("xeratharcanebarragewrapper");
        PreloadSpell("xeratharcanebarrageminion");
        PreloadCharacter("xeratharcanebarragelauncher");
        PreloadSpell("poppyditarget");
        PreloadParticle("diplomaticimmunity_buf.troy");
        PreloadParticle("diplomaticimmunity_tar.troy");
        PreloadSpell("poppyditargetdmg");
        PreloadParticle("eyeforaneye_self.troy");
        PreloadParticle("eyeforaneye_cas.troy");
        PreloadSpell("kayleinterventionanim");
        PreloadSpell("poppydiplomaticimmunity");
        PreloadParticle("xerath_e_tar.troy");
        PreloadParticle("xerath_barrage_tar.troy");
        PreloadParticle("xerath_magechains_consume.troy");
        PreloadSpell("xerathmagechainsroot");
        PreloadParticle("xerathidle.troy");
        PreloadParticle("xerathidle-thin.troy");
        PreloadParticle("poppy_devastatingblow_tar.troy");
        PreloadSpell("poppydevastatingblow");
        PreloadSpell("xerathlocusofpower");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("xerathascended");
        PreloadSpell("xerathparticlebuff");
        PreloadParticle("xerath_e_cas_green.troy");
        PreloadParticle("xerath_e_cas_red.troy");
        PreloadParticle("xerath_e_tar.troy");
        PreloadParticle("xerath_barrage_tar.troy");
        PreloadSpell("xerathmagechainsroot");
        PreloadParticle("xerath_e_cas.troy");
        PreloadCharacter("xeratharcanebarragelauncher");
        PreloadSpell("xeratharcanebarrage");
        PreloadSpell("xeratharcanebarragevision");
        PreloadSpell("xeratharcanebarragebarrage");
        PreloadSpell("xeratharcanebarragewrapper");
        PreloadSpell("kayledivineblessinganim");
        PreloadSpell("judicatorrighteousfury");
        PreloadSpell("spectralfury");
        PreloadParticle("heroiccharge_cas.troy");
        PreloadSpell("poppyheroicchargepart2check");
        PreloadParticle("heroiccharge_tar2.troy");
        PreloadParticle("heroiccharge_cas.troy");
        PreloadSpell("poppyheroicchargepart2");
        PreloadSpell("poppyheroicchargepoppyfix");
        PreloadParticle("heroiccharge_tar.troy");
        PreloadSpell("kaylerighteousfuryanim");
        PreloadParticle("summoner_flash.troy");
        PreloadSpell("beaconauranoparticle");
        PreloadParticle("summoner_flash.troy");
        PreloadSpell("beaconauranoparticleap");
        PreloadSpell("bloodrazor");
        PreloadSpell("judicatorholyfervordebuff");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("judicatorholyfervor");
        PreloadParticle("global_haste.troy");
        PreloadSpell("soulsphere");
        PreloadSpell("hextechrevolver");
        PreloadSpell("leviathancheck");
        PreloadSpell("leviathanstats");
        PreloadSpell("leviathancap");
        PreloadSpell("poppyparagonstats");
        PreloadSpell("poppyparagonicon");
        PreloadSpell("poppyparagonparticle");
        PreloadParticle("poppydam_buf.troy");
        PreloadParticle("poppydef_buf.troy");
        PreloadSpell("muramasacheck");
        PreloadSpell("muramasastats");
        PreloadSpell("muramasacap");
        PreloadParticle("poppydemacia_max.troy");
        PreloadSpell("lightstrikerapplicator");
        PreloadSpell("mourning");
        PreloadSpell("championchampiondelta");
        PreloadSpell("apbonusdamagetotowers");
        PreloadSpell("poppyvaliantfighter");
        PreloadSpell("poppyparagonmanager");
        PreloadSpell("poppyparagonstats");
        PreloadSpell("forceofnature");
        PreloadSpell("randuinsomen");
        PreloadSpell("slow");
        PreloadSpell("cripple");
        PreloadSpell("philosophersstone");
        PreloadSpell("internal_30slow");
        PreloadSpell("judicatorrighteousfury");
        PreloadSpell("internal_40slow");
        PreloadSpell("itemslow");
        PreloadSpell("voidstaff");
        PreloadSpell("innervatinglocketauraself");
        PreloadSpell("innervatinglocketaurafriend");
        PreloadParticle("innervatinglocket_itm.troy");
        PreloadSpell("innervatinglocketbuff");
        PreloadSpell("kagesluckypick");
        PreloadSpell("frozenheart");
        PreloadSpell("frozenheartaura");
        PreloadSpell("odinlightbringer");
        PreloadSpell("deathfiregrasp");
        PreloadSpell("rageblade");
        PreloadSpell("runegorgedbattleaxe");
        PreloadSpell("internal_30slow");
        PreloadSpell("itemslow");
        PreloadSpell("dorant2health");
        PreloadSpell("malady");
        PreloadSpell("infinityedge");
        PreloadSpell("rallyingbannerauraself");
        PreloadSpell("rallyingbanneraurafriend");
        PreloadSpell("rallyingbanner");
        PreloadParticle("rallyingbanner_itm.troy");
        PreloadSpell("soulshroudauraself");
        PreloadSpell("soulshroudaurafriend");
        PreloadParticle("zettasmanamanipulator_itm.troy");
        PreloadSpell("HextechGunblade");
        PreloadSpell("randuinsomen");
        PreloadSpell("hardening");
        PreloadSpell("hexdrinkertimer");
        PreloadSpell("hexdrinker");
        PreloadParticle("hextech_dmg_shield_birth.troy");
        PreloadParticle("hextech_dmg_shield_onhit_01.troy");
        PreloadParticle("hextech_dmg_shield_onhit_02.troy");
        PreloadSpell("poppyparagonstats");
        PreloadSpell("poppyparagonparticle");
        PreloadSpell("poppyparagonspeed");
        PreloadSpell("poppyparagonicon");
        PreloadSpell("lastwhisper");
        PreloadSpell("glacialshroud");
        PreloadSpell("manamanipulatorauraself");
        PreloadSpell("manamanipulatoraurafriend");
        PreloadParticle("zettasmanamanipulator_itm.troy");
        PreloadSpell("hardening");
        PreloadParticle("rallyingbanner_itm.troy");
        PreloadSpell("wrigglelantern");
        PreloadSpell("madredsrazors");
        PreloadSpell("blackcleaver");
        PreloadSpell("ritualstaff");
        PreloadSpell("fiendishcodex");
        PreloadSpell("hextechsweeperarea");
        PreloadSpell("internal_50ms");
        PreloadSpell("grievouswound");
        PreloadSpell("chilled");
        PreloadParticle("spelleffect_proc.troy");
        PreloadParticle("bansheesveil_buf_tempxerath.troy");
        PreloadParticle("bansheesveil_buf.troy");
        PreloadSpell("bansheesveiltimer");
        PreloadSpell("leviathancheck");
        PreloadSpell("leviathanstats");
        PreloadSpell("internal_50slow");
        PreloadSpell("internal_40slow");
        PreloadSpell("internal_35slow");
        PreloadSpell("internal_30slow");
        PreloadSpell("internal_20slow");
        PreloadSpell("internal_15slow");
        PreloadParticle("slimecall_tar.troy");
        PreloadSpell("wrathdebuff");
        PreloadParticle("lifeaura.troy");
        PreloadParticle("guardianangel_tar.troy");
        PreloadSpell("hasbeenrevived");
        PreloadSpell("regenerationpotion");
        PreloadSpell("potion_internal");
        PreloadSpell("willrevive");
        PreloadSpell("hasbeenrevived");
        PreloadSpell("guardianangel");
        PreloadSpell("leviathanstats");
        PreloadParticle("zettasmanamanipulator_itm.troy");
        PreloadParticle("env_manaheal.troy");
        PreloadSpell("maladycounter");
        PreloadSpell("maladyspell");
        PreloadSpell("gate");
        PreloadSpell("zhonyasringshield");
        PreloadParticle("haste_proc.troy");
        PreloadSpell("haste");
        PreloadSpell("lightstrikerbuff");
        PreloadParticle("sword_of_the_divine_tar.troy");
        PreloadSpell("stealth");
        PreloadParticle("rallyingbanner_itm.troy");
        PreloadSpell("mejaischeck");
        PreloadSpell("mejaisstats");
        PreloadSpell("sheen");
        PreloadSpell("sheendelay");
        PreloadSpell("lichbane");
        PreloadParticle("summoner_cast.troy");
        PreloadSpell("purplecapote");
        PreloadParticle("kennen_btl_beam.troy");
        PreloadSpell("root");
        PreloadSpell("lightningrodchain");
        PreloadParticle("kennen_btl_tar.troy");
        PreloadParticle("thornmail_tar.troy");
        PreloadParticle("aura_defense.troy");
        PreloadSpell("flaskofcrystalwater");
        PreloadSpell("potion_internal");
        PreloadParticle("summoner_cast.troy");
        PreloadParticle("summoner_teleport.troy");
        PreloadParticle("summoner_teleportarrive.troy");
        PreloadSpell("summonerteleport");
        PreloadSpell("teleport_turret");
        PreloadSpell("teleport_target");
        PreloadSpell("teleport_deathremoval");
        PreloadSpell("mejaisstats");
        PreloadParticle("mejaissoulstealer_itm.troy");
        PreloadParticle("tearofthegoddess_itm.troy");
        PreloadParticle("blackcleave_itm.troy");
        PreloadParticle("sunfirecape_aura.troy");
        PreloadSpell("sunfirecapeaura");
        PreloadSpell("slow");
        PreloadSpell("cripple");
        PreloadParticle("randuinsomen_cas.troy");
        PreloadSpell("blackomen");
        PreloadSpell("maladycounter");
        PreloadParticle("spectral_fury_cas.troy");
        PreloadSpell("spectralfury");
        PreloadSpell("deathfiregraspspell");
        PreloadSpell("disconnecttimer");
        PreloadSpell("fortifycheck");
        PreloadSpell("masterysiegecommanderdebuff");
        PreloadParticle("razzlespride_100.troy");
        PreloadParticle("razzlespride_66.troy");
        PreloadParticle("razzlespride_33.troy");
        PreloadSpell("prideshield");
        PreloadSpell("stealth");
        PreloadSpell("sightward");
        PreloadCharacter("sightward");
        PreloadSpell("sharedwardbuff");
        PreloadSpell("itemplacementmissile");
        PreloadSpell("masteryscoutbuff");
        PreloadSpell("tearofthegoddesstrack");
        PreloadSpell("blackshield");
        PreloadParticle("global_slow.troy");
        PreloadParticle("piratecutlass_cas.troy");
        PreloadSpell("witsendbuff");
        PreloadSpell("witsendcounter");
        PreloadSpell("hexdrinkertimercd");
        PreloadParticle("hextech_dmg_shield_onhit_01.troy");
        PreloadParticle("hextech_dmg_shield_onhit_02.troy");
        PreloadSpell("prideshield");
        PreloadSpell("leviathanstats");
        PreloadSpell("leviathancheck");
        PreloadParticle("global_slow.troy");
        PreloadSpell("bilgewatercutlass");
        PreloadParticle("haste_proc.troy");
        PreloadSpell("wrathdamage");
        PreloadParticle("odin_hextechsweeper_tar_green.troy");
        PreloadSpell("odinlightbringer");
        PreloadSpell("runegorgedbattleaxe");
        PreloadSpell("maladycounter");
        PreloadSpell("muramasacheck");
        PreloadSpell("muramasastats");
        PreloadSpell("witsendcounter");
        PreloadSpell("stealth");
        PreloadSpell("visionward");
        PreloadCharacter("visionward");
        PreloadSpell("sharedwardbuff");
        PreloadSpell("itemplacementmissile");
        PreloadSpell("masteryscoutbuff");
        PreloadParticle("tearofthegoddess_itm.troy");
        PreloadSpell("sheendelay");
        PreloadSpell("sheen");
        PreloadParticle("meditate_eff.troy");
        PreloadParticle("regen_rune_new_buf.troy");
        PreloadSpell("regenerationrune");
        PreloadCharacter("testcuberender");
        PreloadSpell("expirationtimer");
        PreloadSpell("monsterregenspell");
        PreloadParticle("hextech_gunblade_cas.troy");
        PreloadSpell("root");
        PreloadSpell("hextechgunbladespell");
        PreloadSpell("masteryblastbuff");
        PreloadSpell("bansheesveil");
        PreloadSpell("muramasastats");
        PreloadParticle("kennen_btl_beam.troy");
        PreloadSpell("root");
        PreloadSpell("witsendbuff");
        PreloadSpell("witsendcounter");
        PreloadSpell("breathstealerspell");
        PreloadParticle("zettasmanamanipulator_itm.troy");
        PreloadParticle("rallyingbanner_itm.troy");
        PreloadSpell("odingolembombbuff");
        PreloadSpell("wrigglelantern");
        PreloadCharacter("wrigglelantern");
        PreloadSpell("sharedwardbuff");
        PreloadSpell("wrigglelanternward");
        PreloadSpell("itemplacementmissile");
        PreloadSpell("masteryscoutbuff");
        PreloadSpell("madredsrazors");
        PreloadSpell("shurelyasspell");
        PreloadParticle("shurelyascrest_cas.troy");
        PreloadSpell("haste");
        PreloadParticle("rallyingbanner_itm.troy");
        PreloadSpell("muramasacheck");
        PreloadSpell("muramasastats");
        PreloadSpell("mejaischeck");
        PreloadSpell("mejaisstats");
    }
    public void TargetExecute()
    {
        SpellEffectCreate(part1, default, "executionersCalling_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(part1, default, "executionersCalling_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, "head", default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Target, Target, "Internal_50MS", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Target, "GrievousWound", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, default, default);
        ApplyDamage(Attacker, Target, 200, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Owner, Target, 0 + BaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0.7, 0, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        teamID = GetTeamID(default);
        SpellEffectCreate(ar, default, "VampHeal.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(arr, default, "Meditate_eff.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        IncHealth(Target, 0 + healthToRestore, Target);
        SpellBuffAdd(Target, Target, default, 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellEffectCreate(ar, default, "summoner_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(0.27);
        ;
        SpellBuffAdd(Owner, Target, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Haste, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        CharVars.TeleportCancelled = SetVarInTable(false);
        ;
        ;
        OwnerLevel = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.ScaleCoef = SetVarInTable(0.04);
        NextBuffVars.ScaleCap = SetVarInTable(0);
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        Level = GetLevel(Owner);
        NextBuffVars.APMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SpellBuffAdd(Attacker, Attacker, "SummonerBattleCry", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(BoostParticle, default, "Summoner_Boost.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffClear(Target, "SummonerExhaust");
        SpellBuffClear(Target, "ExhaustSlow");
        SpellBuffClear(Target, "ExhaustDebuff");
        SpellBuffClear(Target, "SummonerDot");
        ;
        ;
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        MinionPos = GetPointByUnitFacingOffset(Owner, 200, 0);
        SpellEffectCreate(ba, default, "summoner_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, MinionPos, Target, default, default, false, default, default, false, default, default, default);
        OwnerID = GetTeamID(default);
        Duration = SetVarInTable(15);
        ;
        ;
        Other3 = SpawnMinion("Beacon", "SummonerBeacon", "idle.lua", MinionPos, OwnerID ?? TEAM_ORDER, true, true, false, false, true, false, 0, true, false, Nothing, default);
        OwnerLevel = GetLevel(Owner);
        ;
        ;
        ;
        NextBuffVars.BonusHealth = SetVarInTable(BonusHealth);
        ;
        ;
        SkinName = GetUnitSkinName(Target);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(-0.4);
        SpellBuffAdd(Attacker, Target, "ExhaustSlow", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "SummonerExhaust", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        ;
        SpellEffectCreate(ar, default, "summoner_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, false, false, false, default, default);
        ReincarnateHero(Owner);
        ;
        Level = GetLevel(Owner);
        NextBuffVars.HealthMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "ReviveMarker", 1, 1, 120, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        OwnerLevel = GetLevel(Owner);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + TotalDamage, TRUE_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Attacker);
        ;
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        Level = GetLevel(Owner);
        NextBuffVars.Level = SetVarInTable(Level);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        SpellBuffAdd(Target, Target, "Internal_50MS", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "GrievousWound", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        ReincarnateHero(Owner);
        SpellBuffAdd(Attacker, Target, "OdinGrdObeliskSuppression", 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        DamagePercent = SetVarInTable(0.15);
        TargetTeam = GetTeamID(default);
        ;
        ;
        ;
        MyTeam = GetTeamID(default);
        ;
        ;
        ;
        TargetTeamID = GetTeamID(default);
        SkinName = GetUnitSkinName(Owner);
        ;
        ;
        MyTeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Target, "OdinMinionSpellAttack", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Jester", teamID ?? TEAM_UNKNOWN);
        ;
        Dmg = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + TotalDmg, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, default, default, default, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Jester", teamID ?? TEAM_UNKNOWN);
        ;
        Dmg = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + TotalDmg, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, default, default, default, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Jester", teamID ?? TEAM_UNKNOWN);
        ;
        Dmg = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + TotalDmg, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 20, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Heal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + AttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Owner);
        CooldownTotal = SetVarInTable(1);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + CooldownTotal);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + Damage, TRUE_DAMAGE, DAMAGESOURCE_RAW, 1, 0, 0, true, true, Attacker);
        ;
        ;
        Distance = DistanceBetweenObjectAndPoint(Target, CharVars.CastPoint);
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Target, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ;
        });
        DestroyMissile(MissileNetworkID);
        ;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 1, false, false, Attacker);
        ;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.BreakStun = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        NextBuffVars.Broken = SetVarInTable(false);
        SpellBuffAdd(Attacker, Target, "LeblancSoulShackleM", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        DestroyMissile(MissileNetworkID);
        ;
        ;
        NextBuffVars.BreakDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BreakStun = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        NextBuffVars.Broken = SetVarInTable(false);
        SpellBuffAdd(Attacker, Target, "LeblancSoulShackle", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + NextBuffVars.BreakDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.5, 1, false, false, Attacker);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        DestroyMissile(MissileNetworkID);
        ;
        ;
        TargetPos = GetUnitPosition(Target);
        ;
        TeamID = GetTeamID(default);
        buffDuration = SetVarInTable(VALUE_BY_LEVEL);
        SpellEffectCreate(Particle, default, "maoki_sapling_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Nothing, default, TargetPos, true, default, default, false, false, default, default);
        DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        MineDamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Attacker, TargetPos, 240, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + DamageAmount, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
        });
        Other1 = SpawnMinion("DoABarrelRoll", "MaokaiSproutling", "idle.lua", TargetPos, TeamID ?? TEAM_CASTER, false, false, false, false, false, false, 0, false, false, Attacker, default);
        ;
        ;
        NextBuffVars.MineDamageAmount = SetVarInTable(MineDamageAmount);
        NextBuffVars.Sprung = SetVarInTable(false);
        SpellBuffAdd(Attacker, Other1, "MaokaiSaplingMine", 1, 1, 35, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.RootDuration = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Target, Owner, "MaokaiUnstableGrowth", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        NextBuffVars.Stats = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellEffectCreate(default, default, "insanitypotion_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(default, default, "insanitypotion_steam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "bottletip", default, Target, default, default, false, false, false, false, false, default, default);
        TargetPos = GetUnitPosition(Target);
        LandPos = GetPointByUnitFacingOffset(Owner, 420, 180);
        Distance = DistanceBetweenPoints(TargetPos, LandPos);
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + DelayTimer, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, default, default);
        ;
        ;
        TotalDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ApplyDamage(Attacker, Target, 0 + TotalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1.2, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 1, false, false, Attacker);
        ApplyAssistMarker(Attacker, Target, 10);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        NextBuffVars.SecondaryDamage = SetVarInTable(SecondaryDamage);
        ;
        ;
        FaceDirection(Owner, Target);
        TarPos = GetPointByUnitFacingOffset(Owner, 0 + DistanceToKick, 0);
        NextBuffVars.TarPos = SetVarInTable(TarPos);
        SpellBuffAdd(Owner, Target, default, 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + PrimaryDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, true, Attacker);
        ;
        ;
        ;
        ShieldAbsorb = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.ShieldAbsorb = SetVarInTable(ShieldAbsorb);
        ;
        ;
        ;
        NextBuffVars.PercentReduction = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "Suppression", 100, 1, 1.8, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Suppression, 0, true, false, false, default);
        Pos = GetRandomPointInAreaUnit(Target, 150, 150);
        TeleportToPosition(Owner, Pos);
        FaceDirection(Attacker, Target);
        ;
        ;
        ;
        WarwickSkinID = GetSkinID(Attacker);
        ;
        ;
        NextBuffVars.DrainPercent = SetVarInTable(0.8);
        NextBuffVars.DrainedBool = SetVarInTable(false);
        SpellBuffAdd(Attacker, Attacker, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        NextBuffVars.AttackSpeedVar = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AttackSpeedOther = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Owner, Unit, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, default, default, default);
        });
        DamageScale = SetVarInTable(VALUE_BY_LEVEL);
        Damage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SpellEffectCreate(this.Particle, default, "garen_damacianJustice_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "C_BUFFBONE_GLB_CHEST_LOC", default, Attacker, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + FinalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        SpellEffectCreate(this.Particle2, default, "garen_damacianJustice_tar_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Target, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle3, default, "garen_damacianJustice_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Target, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        DamagePoint = GetPointByUnitFacingOffset(Owner, 1650, 0);
        AtkDmg = GetTotalAttackDamage(Owner);
        ;
        ThrowDmg = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + FinalDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, true, Attacker);
        TotalDamage = GetTotalAttackDamage(Owner);
        ;
        DmgPerLvl = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Owner, Target, default, default, false, 1, ExtraSlots, 0 + Level, false, false, false, false, false, default);
        NextBuffVars.DamageLvl = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.stunLength = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Target, Owner, default, 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        PlayAnimation("Spell2", 0 + factor, Attacker, false, false, true);
        targetPos = GetUnitPosition(Target);
        Move(Attacker, targetPos, 0 + SpeedVar, 0 + GravityVar, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + Distance, FACE_MOVEMENT_DIRECTION);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 1, 1, false, false, Attacker);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 1, 1, false, false, Attacker);
        SealSpellSlot(2, SpellSlots, Attacker, true, SPELLBOOK_CHAMPION);
        SetSlotSpellCooldownTimeVer2(0, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SilenceDuration = SetVarInTable(VALUE_BY_LEVEL);
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        SupremeDmg = GetTotalAttackDamage(Owner);
        ;
        ;
        HitResult = SetVarInTable(false);
        ;
        ;
        ;
        BaseHealAmount = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        OwnerPos = GetUnitPosition(Owner);
        TargetPos = GetUnitPosition(Target);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        MaxMultiplier = SetVarInTable(2);
        ;
        ;
        CastRange = GetCastRange(Owner, 2, SpellSlots);
        FullDamageRange = SetVarInTable(250);
        ;
        ;
        ApplyStun(Attacker, Target, 1.5);
        ApplyDamage(Attacker, Target, 0 + DazzleDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
        NextBuffVars.ArmorReduction = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, "Shatter", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, false, false, default);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, default, default, default, default);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
        ApplyStun(Attacker, Target, 1);
        ;
        ;
        AttackDamage = GetTotalAttackDamage(Owner);
        ;
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ApplyDamage(Attacker, Target, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.7, 0, false, false, Attacker);
        ;
        ;
        SpellBuffAdd(Target, Attacker, default, 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        targetPos = GetUnitPosition(Target);
        Move(Attacker, targetPos, 0 + SpeedVar, 0 + GravityVar, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + Distance, FACE_MOVEMENT_DIRECTION);
        ;
        ;
        ;
        PlayAnimation("Spell2", 0 + factor, Attacker, false, false, false);
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        ApplyFear(Attacker, Target, 0 + VALUE_BY_LEVEL);
        ;
        ;
        ;
        BaseHealthBoost = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.HealthPlusAbility = SetVarInTable(HealthPlusAbility);
        NextBuffVars.WillRemove = SetVarInTable(false);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.DamageLevel = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.OrbofDeceptionIsActive = SetVarInTable(CharVars.OrbofDeceptionIsActive);
        SpellBuffAdd(Owner, Target, "AhriOrbDamage", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        TauntLength = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        ;
        ;
        ;
        ;
        GetPointByUnitFacingOffset(Owner, 0, 0);
        ;
        ;
        DestroyMissile(MissileNetworkID);
        ;
        ;
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + SpellCD1b, 0, SpellSlots, SPELLBOOK_CHAMPION, Target, false);
        SpellEffectCreate(default, default, "ChronoRefresh_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, false, default, default, default);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + SpellCD3b, 2, SpellSlots, SPELLBOOK_CHAMPION, Target, false);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + SpellCD4b, 3, SpellSlots, SPELLBOOK_CHAMPION, Target, true);
        ;
        SpellBuffClear(Owner, "FiddleSticksDarkWindMissile");
        TeamID = GetTeamID(default);
        ;
        DoOnce = SetVarInTable(false);
        DamageToDeal = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetAreaRandom(Attacker, Target, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", default, false, 10, (Iterator) =>
        {
            ;
        });
        SpellBuffAdd(Attacker, Attacker, "FiddleSticksDarkWindMissile", 5, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "DarkWind", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Silence, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.45, 0, false, false, Attacker);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Attacker, Target, "DrainCheck", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        ;
        ;
        DoOnce = SetVarInTable(false);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "FiddleSticksDarkWindMissile", 4, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "DarkWind", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Silence, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL + BaseDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.45, 0, false, false, Attacker);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Attacker);
        ;
        ;
        baseDamageBlock = SetVarInTable(VALUE_BY_LEVEL);
        PlayAnimation("Spell2", 0, Owner, false, false, false);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, InstanceVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        NextBuffVars.DamageBlock = SetVarInTable(DamageBlock);
        NextBuffVars.MSBonus = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.ASBonus = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "SkarnerExoskeleton", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SuppressionDuration = SetVarInTable(1.75);
        NextBuffVars.Victim = SetVarInTable(Target);
        SpellBuffAdd(Attacker, Target, "SkarnerImpale", 1, 1, 0 + SuppressionDuration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Suppression, 0, true, false, false, default);
        SpellBuffAdd(Target, Owner, "SkarnerImpaleBuff", 1, 1, 0 + SuppressionDuration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        DamagePerTick = SetVarInTable(VALUE_BY_LEVEL);
        ApplyDamage(Attacker, Target, 0 + DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 0, false, false, Attacker);
        ;
        ;
        ;
        teamID = GetTeamID(default);
        ;
        ;
        ForEachUnitInTargetArea(Owner, Target, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectTurrets ", default, true, (Iterator) =>
        {
            ;
            ;
            ;
            SpellEffectCreate(arr, default, "heimerdinger_CH1_grenade_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, Unit, Unit, default, default, false, default, default, default, default, default, default);
        });
        ForEachUnitInTargetArea(Owner, Target, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "BlindingDart", 100, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Blind, 0, true, false, default, default);
        });
        ForEachUnitInTargetArea(Owner, Target, 125, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyStun(Attacker, Unit, 1.5);
        });
        ;
        teamID = GetTeamID(default);
        ;
        ;
        ForEachUnitInTargetArea(Owner, Target, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectTurrets ", default, true, (Iterator) =>
        {
            ;
            ;
            ;
            SpellEffectCreate(arr, default, "heimerdinger_CH1_grenade_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, Unit, Unit, default, default, false, default, default, default, default, default, default);
        });
        ForEachUnitInTargetArea(Owner, Target, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "BlindingDart", 100, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Blind, 0, true, false, default, default);
        });
        ForEachUnitInTargetArea(Owner, Target, 125, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyStun(Attacker, Unit, 1.5);
        });
        TargetPos = GetCastSpellTargetPos();
        ForEachUnitInTargetArea(Attacker, TargetPos, 400, "", default, default, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, default, default, default, default);
        });
        ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, default, false, false, default);
        ;
        NextBuffVars.Level = SetVarInTable(Level);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0.6, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "SeismicShardBuff", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, default, default);
        ApplyDamage(Owner, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.55, 1, false, false, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ;
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0.35, 1, false, false, default);
        SpellBuffAdd(Attacker, Target, "UrAniumRoundsHit", 30, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, default, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ;
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ;
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0.35, 1, false, false, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ;
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ;
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ;
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(aasdf, default, "mordakaiser_maceOfSpades_tar2.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        totalDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.BaseDamage = SetVarInTable(BaseDamage);
        SpellBuffAdd(Target, Owner, "MordekaiserNukeOfTheBeastDmg", 5, 1, 0.001, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, true, false, false, default);
        ;
        DamageToDeal = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.LifestealPercent = SetVarInTable(tickDamage);
        SpellBuffAdd(Owner, Target, default, 1, 1, 10.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        NextBuffVars.DamageToDeal = SetVarInTable(initialDamageToDeal);
        SpellBuffAdd(Target, Attacker, "MordekaiserCOTGDot", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ;
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ;
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        ;
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ;
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        ;
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Heimerdinger", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ;
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Owner);
        ;
        ;
        NextBuffVars.DamagePerTick = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DefenseStats = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SpellBuffAdd(Owner, Target, "MordekaiserCreepingDeathCheck", 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        TeamID = GetTeamID(default);
        SpellBuffAdd(Target, Owner, "MordekaiserSyphonDmg", 100, 1, 0.001, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MordekaiserSyphonParticle", 1, 1, 0.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(asdf, default, "mordakaiser_siphonOfDestruction_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(asdf1, default, "mordakaiser_siphonOfDestruction_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
        ;
        ;
        SpellBuffAdd(Attacker, Target, default, 100, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Blind, 0, true, false, default, default);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.8, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        HitResult = SetVarInTable(HIT_Critical);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        Attacker = SetBuffCasterUnit();
        ;
        NextBuffVars.Speed = SetVarInTable(150);
        NextBuffVars.Gravity = SetVarInTable(45);
        NextBuffVars.IdealDistance = SetVarInTable(100);
        ;
        ;
        ;
        PlayAnimation("Spell3", 0, Owner, false, false, false);
        ;
        ArmorAmount = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        NextBuffVars.TotalArmorAmount = SetVarInTable(TotalArmorAmount);
        NextBuffVars.DamageBonus = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "JannaEoTSBuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.Speed = SetVarInTable(150);
        NextBuffVars.Gravity = SetVarInTable(45);
        NextBuffVars.IdealDistance = SetVarInTable(100);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        NextBuffVars.AttackSpeedMod = SetVarInTable(0);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.8, 1, false, false, Attacker);
        SpellEffectCreate(asdf, default, "SowTheWind_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 4, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
        NextBuffVars.Speed = SetVarInTable(150);
        NextBuffVars.Gravity = SetVarInTable(45);
        NextBuffVars.IdealDistance = SetVarInTable(100);
        ;
        ;
        ;
        NextBuffVars.Speed = SetVarInTable(150);
        NextBuffVars.Gravity = SetVarInTable(45);
        NextBuffVars.IdealDistance = SetVarInTable(100);
        ;
        ;
        ;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
        baseDamageBlock = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.DamageBlock = SetVarInTable(DamageBlock);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        IreliaTeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "irelia_ult_tar.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Target, "root", default, Target, default, default, true, default, default, false, false, default, default);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + DamageToDeal2, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        SpellBuffAdd(Target, Attacker, default, 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Move(Attacker, Target, 0 + SpeedVar, 0 + GravityVar, 100, FURTHEST_WITHIN_RANGE, default, default, default);
        ;
        NextBuffVars.TremDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        Attacker = GetChampionBySkinName("Shen", TeamOfOwner ?? TEAM_UNKNOWN);
        Level = GetLevel(Attacker);
        DamageToDeal = SetVarInTable(VALUE_BY_LEVEL);
        ApplyDamage(Attacker, Target, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.25, 0, false, false, default);
        ;
        ;
        ;
        ;
        DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        StunLength = SetVarInTable(2);
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.75, 0, false, false, Attacker);
        NextBuffVars.LifeTapMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        SpellEffectCreate(hit, default, "shen_vorpalStar_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + baseDmg, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ;
        Level = GetLevel(Owner);
        ShurikenDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ApplyDamage(Attacker, Target, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        SpellBuffRemove(Attacker, "ShenWayOfTheNinjaAura", Attacker, 0);
        DestroyMissile(MissileNetworkID);
        NextBuffVars.ArmorMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.LifeReturn = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.NinjaBonus = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, default, default, default, default);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + AttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        NextBuffVars.ArmorDebuff = SetVarInTable(VALUE_BY_LEVEL);
        tauntDuration = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, "PuncturingTauntArmorDebuff", 1, 1, 0 + tauntDuration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, false, false, default);
        ApplyTaunt(Attacker, Target, 0 + tauntDuration);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 1, default, default, default, default);
        ApplyStun(Attacker, Target, 0 + VALUE_BY_LEVEL);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 0, false, false, Attacker);
        ;
        ;
        SpellBuffAdd(Attacker, Owner, "IreliaHitenStyleCharged", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellEffectCreate(SmokeBomb, default, "irelia_gotasu_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(p3, default, "irelia_gotasu_cast_01.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(p3, default, "irelia_gotasu_cast_02.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        ;
        ;
        ;
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.Distance = SetVarInTable(Distance);
        NextBuffVars.dashSpeed = SetVarInTable(dashSpeed);
        DamageVar = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SpellBuffAdd(Target, Owner, "IreliaGatotsuDash", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        teamID = GetTeamID(default);
        Caster = GetChampionBySkinName("MonkeyKing", teamID ?? TEAM_UNKNOWN);
        ;
        ;
        ;
        ApplyDamage(Caster, Target, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, true, false, Caster);
        ;
        ;
        SpellBuffAdd(Attacker, Target, "AlZaharRecentVis", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Target, "AlZaharMaleficVisions", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, default, default);
        LevelDamage = GetLevel(Owner);
        ;
        ;
        ;
        NextBuffVars.TotalDamage = SetVarInTable(TotalDamage);
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + AttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "SonaHymnPCDeathRecapFix", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "IfHasBuffCheck", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "SonaPowerChord", Owner, 0);
        NextBuffVars.DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        NextBuffVars.ResistanceMod = SetVarInTable(VALUE_BY_LEVEL);
        Damage = SetVarInTable(VALUE_BY_LEVEL);
        AoEDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SpellEffectCreate(asdf, default, "SpellFlux_tar2.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        ;
        SpellEffectCreate(default, default, "overload_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, "root", default, Target, "root", default, false, default, default, false, false, default, default);
        TeamID = GetTeamID(default);
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        AoEDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + TotalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.2, 1, false, false, Attacker);
        ;
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + AttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ApplyAssistMarker(Attacker, Target, 10);
        SpellBuffAdd(Attacker, Target, "SonaSongofDiscordHaste", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Haste, 0, true, false, default, default);
        NextBuffVars.Vamp = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.Level = SetVarInTable(Level);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ApplyDamage(Owner, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
        LevelDamage = GetLevel(Owner);
        ;
        ;
        NextBuffVars.TotalDamage = SetVarInTable(TotalDamage);
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + AttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Attacker, "IfHasBuffCheck", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        SpellBuffAdd(Attacker, Target, "SonaSongPCDeathRecapFix", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "SonaPowerChord", Owner, 0);
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + AttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        LevelDamage = GetLevel(Owner);
        ;
        ;
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + AttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Attacker, "IfHasBuffCheck", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ApplyDamage(Owner, Target, 0 + TotalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        SpellBuffRemove(Owner, "SonaPowerChord", Owner, 0);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Net, 0, true, false, false, default);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        TeamID = GetTeamID(default);
        ;
        ;
        AoEDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + TotalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 1, false, false, Attacker);
        ;
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        ;
        ;
        ;
        SilenceDuration = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        ApplyDamage(Attacker, Target, 0 + TotalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, default);
        ;
        teamID = GetTeamID(default);
        Other1 = GetChampionBySkinName("Malzahar", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ApplyDamage(Other1, Target, 0 + Dmg, PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        teamID = GetTeamID(default);
        Other1 = GetChampionBySkinName("Malzahar", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ApplyDamage(Other1, Target, 0 + Dmg, PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + AttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        Dmg = GetTotalAttackDamage(Owner);
        ApplyDamage(Attacker, Target, 0 + Dmg, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        teamID = GetTeamID(default);
        Other1 = GetChampionBySkinName("Malzahar", teamID ?? TEAM_UNKNOWN);
        Dmg = GetTotalAttackDamage(Owner);
        ApplyDamage(Other1, Target, 0 + Dmg, PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        ;
        ;
        IncHealth(Target, 0 + VALUE_BY_LEVEL + APMod, Attacker);
        SpellEffectCreate(self, default, "Global_Heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Target, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
        ApplyAssistMarker(Attacker, Target, 10);
        NextBuffVars.DefenseBonus = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, "SonaAriaShield", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        LevelDamage = GetLevel(Owner);
        ;
        ;
        NextBuffVars.TotalDamage = SetVarInTable(TotalDamage);
        AttackDamage = GetTotalAttackDamage(Owner);
        ApplyDamage(Owner, Target, 0 + AttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Attacker, "IfHasBuffCheck", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        SpellBuffAdd(Attacker, Target, "SonaAriaPCDeathRecapFix", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "SonaPowerChord", Owner, 0);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        AkaliDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(p3, default, "monkeyKing_Q_cas.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(p3, default, "monkeyKing_Q_cas.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        ;
        ;
        ;
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.Distance = SetVarInTable(Distance);
        NextBuffVars.dashSpeed = SetVarInTable(dashSpeed);
        NextBuffVars.AttackSpeedVar = SetVarInTable(VALUE_BY_LEVEL);
        DamageVar = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SpellBuffAdd(Target, Owner, "MonkeyKingNimbusKick", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0.25, true, false, true, default);
        ;
        UnitsHit = SetVarInTable(0);
        ForNClosestUnitsInTargetArea(Owner, Target, 320, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 10, true, default, (Iterator) =>
        {
            ;
        });
        NextBuffVars.BonusDefense = SetVarInTable(VALUE_BY_LEVEL);
        BaseHeal = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.HealAmount = SetVarInTable(HealAmount);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellTargetPos = GetCastSpellTargetPos();
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + FinalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        ApplySilence(Owner, Target, 0.5);
        ForEachUnitInTargetArea(Owner, Owner, 2000, "AffectFriends AffectMinions AffectHeroes AffectUntargetable ", "ViktorChaosStormAOE", true, (Iterator) =>
        {
            SpellEffectCreate(hi, default, "Viktor_ChaosStorm_hit.troy", default, TEAM_NEUTRAL, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, "Head", default, Target, "Spine", default, true, false, false, false, false, default, default);
        });
        ;
        ;
        AttackDmg = GetTotalAttackDamage(Owner);
        Combo1DamageLeet = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SpellEffectCreate(bye, default, "xenZiou_ChainAttack_03.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ApplyDamage(Attacker, Target, 0 + Combo1Damage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        SpellBuffRemove(Attacker, "XenZhaoComboAutoFinish", Attacker, default);
        ;
        SpellBuffAdd(Owner, Target, "XenZhaoKnockup", 1, 1, 0.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Stun, 0, true, false, default, default);
        ;
        ;
        AttackDmg = GetTotalAttackDamage(Owner);
        Combo1DamageLeet = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SpellEffectCreate(bye, default, "xenZiou_ChainAttack_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ApplyDamage(Attacker, Target, 0 + Combo1Damage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        SpellBuffRemove(Attacker, "XenZhaoComboAuto", Attacker, default);
        SpellBuffAdd(Attacker, Attacker, "XenZhaoComboAutoFinish", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        IssueOrder(Attacker, AI_ATTACKTO, default, Target);
        ;
        ;
        AttackDmg = GetTotalAttackDamage(Owner);
        Combo1DamageLeet = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SpellEffectCreate(bye, default, "xenZiou_ChainAttack_cas_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(bye, default, "xenZiou_ChainAttack_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffRemove(Owner, "XenZhaoComboTarget", Owner, default);
        SpellBuffAdd(Attacker, Attacker, "XenZhaoComboAuto", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        ;
        ApplyDamage(Attacker, Target, 0 + Combo1Damage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        IssueOrder(Attacker, AI_ATTACKTO, default, Target);
        SpellEffectCreate(this.targetParticle, default, "xenZiou_AudaciousCharge_tar_unit_instant.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, false, false, false, false, default, default);
        TargetPos = GetUnitPosition(Target);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        NextBuffVars.DamageDealt = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.Distance = SetVarInTable(Distance);
        NextBuffVars.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Target, Attacker, "XenZhaoSweep", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyAssistMarker(Owner, Target, 10);
        SpellBuffAdd(Owner, Target, "GalioIdolOfDurandMarker", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ApplyTaunt(Owner, Target, 2);
        NextBuffVars.BonusGold = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.ArmorReduction = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, default, default, default, default);
        ;
        ;
        TeamID = GetTeamID(default);
        Level = GetLevel(Owner);
        HealthPerc = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + HealthDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "JarvanIVMartialCadenceCheck", 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellEffectCreate(c, default, "jarvincritattack_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        RemoveOverrideAutoAttack(Owner, false);
        ;
        ;
        ;
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + DamageToDeal, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, true, true, Attacker);
        SpellBuffAdd(Attacker, Attacker, "JarvanIVCataclysmCheck", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "UnstoppableForceMarker", Owner, 0);
        ;
        ;
        ;
        ArmorAmount = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        NextBuffVars.TotalArmorAmount = SetVarInTable(TotalArmorAmount);
        NextBuffVars.FinalArmorAmount = SetVarInTable(TotalArmorAmount);
        NextBuffVars.Ticktimer = SetVarInTable(10);
        SpellBuffAdd(Attacker, Target, "DeathsCaress", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0.9, 0, false, false, Attacker);
        ApplyStun(Attacker, Target, 1.5);
        NextBuffVars.LifestealPercent = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.HealPercent = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, "Cannibalism", 1, 1, 20, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        TeamID = GetTeamID(default);
        SpellBuffAdd(Attacker, Owner, "ViktorPowerTransfer", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        TargetPos = GetUnitPosition(Target);
        SpellCast(Owner, Owner, default, default, true, 2, ExtraSlots, 1, true, true, false, false, false, TargetPos);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        DebugSay(Owner, "execute", default);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, default);
        TeamID = GetTeamID(default);
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        AoEDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        OwnerTeam = GetTeamID(default);
        TargetTeam = GetTeamID(default);
        ;
        ;
        ;
        ;
        RavenPosition = GetPointByUnitFacingOffset(Owner, 100, 0);
        TeamID = GetTeamID(default);
        Other3 = SpawnMinion("HiddenMinion", "SwainBeam", "idle.lua", RavenPosition, TeamID ?? TEAM_ORDER, false, true, false, true, true, true, 0, default, false, Owner, default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AttackSpeedMod = SetVarInTable(0);
        NextBuffVars.DamagePerHalfSecond = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SpellEffectCreate(ar, default, "swain_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(ar, default, "swain_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
        ;
        NextBuffVars.DrainedBool = SetVarInTable(false);
        SpellEffectCreate(ar, default, "swain_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        SpellCast(Attacker, Owner, Attacker, Owner, true, 2, ExtraSlots, 0 + Level, true, true, false, false, false, TargetPos);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.7, 1, false, false, Attacker);
        ApplySilence(Attacker, Target, 0 + VALUE_BY_LEVEL);
        SealSpellSlot(1, SpellSlots, Owner, true, default);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellCast(Owner, Target, Target, Target, false, 3, ExtraSlots, 0 + Level, true, true, false, false, true, default);
        SpellBuffRemove(Owner, "PickACard", Owner, default);
        SpellCast(Owner, Target, Target, Target, false, 2, ExtraSlots, 0 + Level, true, true, false, false, true, default);
        SpellBuffRemove(Owner, "PickACard", Owner, default);
        ;
        ;
        ;
        NextBuffVars.WillRemove = SetVarInTable(false);
        SpellBuffAdd(Owner, Target, "PickACard_tracker", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "PickACard", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        NextBuffVars.AttackSpeedMod = SetVarInTable(0);
        SpellBuffAdd(Attacker, Target, "Slow", 1, 100, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, default, default, default);
        SealSpellSlot(1, SpellSlots, Owner, true, default);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        NextBuffVars.AttackSpeedMod = SetVarInTable(0);
        SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        ;
        ApplyDamage(Attacker, Target, 0 + baseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, default);
        SpellCast(Owner, Target, Target, Target, false, 0, ExtraSlots, 0 + Level, true, true, false, false, true, default);
        SpellBuffRemove(Owner, "PickACard", Owner, default);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        SealSpellSlot(1, SpellSlots, Owner, true, default);
        TeamID = GetTeamID(default);
        ;
        AttackDamage = GetTotalAttackDamage(Owner);
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Attacker, Target, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + RedCardDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, "CardmasterSlow", 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        TeamID = GetTeamID(default);
        ;
        ;
        NextBuffVars.DoTDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.SwainMultiplier = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, default, default);
        NextBuffVars.SpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        NextBuffVars.BonusSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        NextBuffVars.numAttacks = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.bonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        OverrideAutoAttack(0, ExtraSlots, Owner, 0 + Level, false);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 12, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "TwitchSprayAndPray", 10, 0 + NextBuffVars.numAttacks, 12, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        NextBuffVars.KnockBackDistance = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Attacker, Target, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellEffectCreate(b, default, "tristana_bustershot_unit_impact.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            SpellBuffAdd(Attacker, Unit, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
        });
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1.5, 1, false, false, Attacker);
        HitResult = SetVarInTable(HIT_Critical);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        MundoID = GetSkinID(Owner);
        ;
        ;
        ;
        IssueOrder(Owner, AI_ATTACKTO, default, Target);
        SpellBuffRemove(Owner, "DetonatingShot", Owner, 0);
        NextBuffVars.dotdmg = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, "ExplosiveShotDebuff", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 1, true, false, false, default);
        SpellBuffAdd(Target, Target, "Internal_50MS", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "GrievousWound", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AllyAttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Attacker, "OnTheHunt", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        percentOfAttack = SetVarInTable(CharVars.percentOfAttack);
        totalDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL + DamageToDeal, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + percentOfAttack, 0, 0, false, false, Attacker);
        ;
        ;
        SpellEffectCreate(afa, default, "SpiralBlade_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, false, false, false, false, default, default);
        TwitchTeamId = GetTeamID(default);
        ;
        TwitchSkinID = GetSkinID(Attacker);
        ;
        ;
        ApplyDamage(Owner, Target, 0 + BaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Owner);
        ;
        ;
        ;
        ;
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SpellBuffRemove(Attacker, "Ricochet", Attacker, 0);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        HitResult = SetVarInTable(HIT_Critical);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        BBBaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        totalDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ;
        KIDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        DaggerBase = SetVarInTable(VALUE_BY_LEVEL);
        ;
        KIDamage = SetVarInTable(VALUE_BY_LEVEL);
        totalDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Owner, Target, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.25, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        ProperDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "BrandWildfire", 5, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        DoOnce = SetVarInTable(false);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        IncHealth(Target, 0 + VALUE_BY_LEVEL + APMod, Attacker);
        SpellEffectCreate(self, default, "BriefHeal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Target, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        ApplyAssistMarker(Attacker, Target, 10);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        SpellBuffAdd(Owner, Owner, "BrandWildfire", 5, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        DoOnce = SetVarInTable(false);
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        TeamID = GetTeamID(default);
        SpellBaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SpellBuffClear(Owner, "BrandWildfire");
        SpellBuffAdd(Target, Owner, "BrandWildfire", 5, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        DoOnce = SetVarInTable(false);
        DamageToDeal = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetAreaRandom(Attacker, Target, 600, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", default, false, 10, (Iterator) =>
        {
            ;
        });
        ;
        ;
        SpellBuffAdd(Owner, Owner, "BrandWildfire", 5, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        DoOnce = SetVarInTable(false);
        ;
        ;
        ;
        ;
        BrandSkinID = GetSkinID(Attacker);
        TeamID = GetTeamID(default);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.55, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        ProperDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SpellBuffAdd(Attacker, Target, "KennenMarkofStorm", 5, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + ProperDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 1, false, false, Attacker);
        SpellBuffAdd(Owner, Owner, "BrandWildfire", 5, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        DoOnce = SetVarInTable(false);
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetUnitPosition(Target);
        Other3 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, default, true, Attacker, default);
        SpellBuffAdd(Attacker, Other3, "BrandScorchGround", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        DamageAmount = GetTotalAttackDamage(Owner);
        ApplyDamage(Attacker, Target, 0 + DamageAmount, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        RemoveOverrideAutoAttack(Owner, false);
        SpellBuffRemove(Owner, "BrandScorch", Owner, default);
        SpellBuffAdd(Owner, Owner, "BrandWildfire", 5, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        DoOnce = SetVarInTable(false);
        ;
        ;
        ;
        ;
        BrandSkinID = GetSkinID(Attacker);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.55, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        ;
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ApplyDamage(Owner, Target, 0 + FinalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.45, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        VladimirSkinID = GetSkinID(Owner);
        ;
        ;
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(-0.3);
        ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectEnemies AffectNeutral AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellBuffAdd(Attacker, Unit, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
        });
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell4", 0.5, Owner, false, true, true);
        TeamofOwner = GetTeamID(default);
        ;
        VladSkinID = GetSkinID(Owner);
        ;
        ;
        NextBuffVars.DamagePerLevel = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DamageIncrease = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        ForEachUnitInTargetArea(Owner, Target, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellBuffAdd(Attacker, Unit, "VladimirHemoplagueDebuff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
        });
        TargetPos = GetCastSpellTargetPos();
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.6, 1, false, false, Attacker);
        SpellCast(Attacker, Owner, Attacker, Owner, true, 1, ExtraSlots, 0 + Level, true, true, false, false, false, TargetPos);
        ;
        BaseHeal = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        ;
        ;
        ;
        IncHealth(Target, 0 + TotalHeal, Attacker);
        SpellEffectCreate(ar, default, "VampHeal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        FaceDirection(Owner, Target);
        ;
        ;
        ;
        TargetPos = GetPointByUnitFacingOffset(Owner, 0 + finalDistance, 0);
        Temp = IsPathable(TargetPos);
        ;
        TargetPos = GetPointByUnitFacingOffset(Owner, 0 + finalDistance, 0);
        TeleportToPosition(Owner, TargetPos);
        DamageVar = SetVarInTable(VALUE_BY_LEVEL);
        ;
        KIDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        HitResult = SetVarInTable(HIT_Critical);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        NextBuffVars.MotaDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.EnergyReturn = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + NextBuffVars.MotaDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.4, 1, false, false, Attacker);
        NextBuffVars.VampPercent = SetVarInTable(CharVars.VampPercent);
        ;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(SmokeBomb, default, "akali_shadowDance_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(p3, default, "akali_shadowDance_return_02.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(p3, default, "akali_shadowDance_return.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        ;
        ;
        ;
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.Distance = SetVarInTable(Distance);
        NextBuffVars.dashSpeed = SetVarInTable(dashSpeed);
        NextBuffVars.DamageVar = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Target, Owner, "AkaliShadowDanceKick", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.GoldGain = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ParBaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + DamageVar, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        AkaliDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        percentOfAttack = SetVarInTable(CharVars.percentOfAttack);
        totalDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        SpellEffectCreate(asdf, default, "Ezreal_TrueShot_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "spine", default, Target, default, default, true, false, false, false, false, default, default);
        SpellBuffAdd(Attacker, Attacker, "EzrealRisingSpellForce", 5, 1, 6 + VALUE_BY_LEVEL, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ApplyDamage(Owner, Target, 0 + VALUE_BY_LEVEL + BonusDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + percentOfAttack, 0.9, 1, false, false, Attacker);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
        ApplySilence(Attacker, Target, 0.5);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        SpellBaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        BaseDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ;
        ;
        HitResult = SetVarInTable(HIT_Critical);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ApplyDamage(Owner, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.75, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Attacker, "EzrealRisingSpellForce", 5, 1, 6 + VALUE_BY_LEVEL, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, default, default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Haste, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "EzrealRisingSpellForce", 5, 1, 6 + VALUE_BY_LEVEL, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        CasterID = GetTeamID(default);
        CasterID2 = GetTeamID(default);
        SpellEffectCreate(asdf, default, "Ezreal_essenceflux_tar.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "root", default, Target, default, default, true, false, false, false, false, default, default);
        ;
        AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Attacker);
        NextBuffVars.MovementSpeedMod = SetVarInTable(-0.2);
        NextBuffVars.AttackSpeedMod = SetVarInTable(0);
        SpellBuffAdd(Attacker, Target, "Chilled", 1, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
        ;
        ApplyDamage(Attacker, Target, 0 + baseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 1, 1, false, false, default);
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "Incinerate_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellBaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, "ShyvanaFireballParticle", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + SpellBaseDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "ShyvanaFireballMissile", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        SpellBaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, "ShyvanaFireballParticle", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + SpellBaseDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 0, false, false, Attacker);
        ;
        ;
        TeamID = GetTeamID(default);
        SpellBaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "shyvana_flameBreath_dragon_burn.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellBaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, "ShyvanaFireballParticle", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + SpellBaseDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "ShyvanaFireballMissile", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        ;
        ;
        ;
        FuryBonus = SetVarInTable(false);
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        BonusPercent = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0 + VALUE_BY_LEVEL, 0, 0 + BonusPercent, false, true, Attacker);
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "RenektonWeaponGlowFade", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetDodgePiercing(Owner, false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        FuryBonus = SetVarInTable(false);
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        BonusPercent = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0 + VALUE_BY_LEVEL, 0, 0 + BonusPercent, false, true, Attacker);
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "RenektonWeaponGlowFade", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetDodgePiercing(Owner, false);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, 1, false, false, Attacker);
        NextBuffVars.ArmorMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Shred, 0, true, false, default, default);
        ApplyDamage(Owner, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.14, default, default, default, default);
        ;
        NextBuffVars.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffRemove(Owner, "RenektonPreExecute", Owner, default);
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0.33, 0, default, false, false, default);
        TeamID = GetTeamID(default);
        ;
        ApplyDamage(Attacker, Target, 0 + baseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 1, 1, false, false, Attacker);
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.25, 0, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "ShyvanaDoubleAttackHit", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "ShyvanaDoubleAttackHitDragon", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + baseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 1, 1, false, false, Attacker);
        ;
        BaseHealth = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        NextBuffVars.ShieldHealth = SetVarInTable(ShieldHealth);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_SpellImmunity, 0, true, false, false, default);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        NextBuffVars.MoveSpeedMod = SetVarInTable(0.4);
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Haste, 0, true, false, default, default);
        ;
        SpellEffectCreate(default, default, "ItemPlacement_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        NextBuffVars.BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.ChanceToKill = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Target, "AlphaStrikeTarget", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, default);
        RemoveOverrideAutoAttack(Owner, false);
        SpellBuffRemove(Owner, "DoubleStrikeIcon", Owner, default);
        SpellBuffAdd(Attacker, Owner, "WujuStyleSuperCharged", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        NextBuffVars.BreakDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BreakStun = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        NextBuffVars.Broken = SetVarInTable(false);
        SpellBuffAdd(Attacker, Target, "SoulShackles", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + NextBuffVars.BreakDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.8, 1, false, false, Attacker);
        NextBuffVars.MoveSpeedMod = SetVarInTable(-0.2);
        NextBuffVars.AttackSpeedMod = SetVarInTable(0);
        SpellBuffAdd(Attacker, Target, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffRemove(Owner, "Takedown", Owner, default);
        ;
        BaseDamageBlock = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Attacker, Attacker, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffClear(Owner, "OrianaReturn");
        PlayAnimation("Spell2", 1.25, Owner, false, false, true);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OrianaGlobalCooldown", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "OrianaRedactTarget", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Deployed = SetVarInTable(false);
        BaseDamageBlock = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes ", 1, true, "OrianaGhost", (Iterator) =>
        {
            SpellBuffClear(Owner, "OrianaGhostSelf");
            Deployed = SetVarInTable(true);
            ;
            ;
        });
        ;
        NextBuffVars.ASMod = SetVarInTable(VALUE_BY_LEVEL);
        ;
        HealthToRestore = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IncHealth(Target, 0 + HealthToRestore, Owner);
        SetSpellOffsetTarget(1, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        SetSpellOffsetTarget(3, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffClear(Unit, "OrianaRedactTarget");
        });
        SpellBuffAdd(Owner, Owner, "OrianaGlobalCooldown", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "OrianaRedactTarget", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Deployed = SetVarInTable(false);
        BaseDamageBlock = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf AffectUntargetable ", 1, true, "OrianaGhost", (Iterator) =>
        {
            SpellBuffClear(Owner, "OrianaGhostSelf");
            SpellBuffClear(Owner, "OrianaBlendDelay");
            Deployed = SetVarInTable(true);
            ;
            ;
        });
        ;
        PlayAnimation("Spell3", 0, Owner, false, true, false);
        TeamID = GetTeamID(default);
        Pos = GetPointByUnitFacingOffset(Owner, 375, 0);
        NextBuffVars.Pos = SetVarInTable(Pos);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(default, default, "nidalee_cougarPounce_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellBuffAdd(Attacker, Target, "OrianaGhostEnemy", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        DestroyMissile(MissileNetworkID);
        ;
        NextBuffVars.DamageDealt = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.Survivability = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, "TrundlePain", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "TrundlePainShred", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, false, false, default);
        ;
        ;
        Scaling = SetVarInTable(VALUE_BY_LEVEL);
        AttackerPos = GetUnitPosition(Attacker);
        TargetPos = GetUnitPosition(Target);
        ;
        TargetPos = GetPointByUnitFacingOffset(Attacker, 50, 0);
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        TotalDamage = GetTotalAttackDamage(Attacker);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + DtD, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        NextBuffVars.SapVar = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.NegSapVar = SetVarInTable(VALUE_BY_LEVEL);
        SpellEffectCreate(asdf, default, "globalhit_physical.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellBuffAdd(Attacker, Target, "TrundleQDebuff", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "UnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Move(Attacker, TargetPos, 100, 0, 25, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 50, FACE_MOVEMENT_DIRECTION);
        ;
        ;
        ;
        HealthToRestore = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AstralArmor = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IncHealth(Target, 0 + HealthToRestore, Owner);
        TeamOfOwner = GetTeamID(default);
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        BaseHealthToHeal = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        IncHealth(Target, 0 + HealthToHeal, Owner);
        ;
        ;
        NextBuffVars.DamageToDeal = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.StarcallShred = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, "StarcallDamage", 1, 1, 0.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell3", 1, Owner, false, false, true);
        ;
        NextBuffVars.FearDuration = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        NocturneSkinID = GetSkinID(Owner);
        TeamID = GetTeamID(default);
        ;
        ;
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        AkaliDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SlowPercent = SetVarInTable(VALUE_BY_LEVEL);
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        SupremeDmg = GetTotalAttackDamage(Owner);
        ;
        HitResult = SetVarInTable(false);
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        SpellBuffAdd(Attacker, Target, "LeonaSunlight", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        DamageToDeal = SetVarInTable(VALUE_BY_LEVEL);
        ApplyDamage(Attacker, Target, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
        ;
        TargetPos = GetUnitPosition(Target);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        OkayCheckDistance = SetVarInTable(0);
        CheckDistance = SetVarInTable(0);
        ;
        FaceDirection(Owner, Target);
        ;
        ;
        TargetPos = GetPointByUnitFacingOffset(Owner, 0 + Distance, 0);
        NextBuffVars.DamageDealt = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.OwnerPos = SetVarInTable(OwnerPos);
        Move(Owner, TargetPos, 1450, 0, 25, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + Distance, FACE_MOVEMENT_DIRECTION);
        PlayAnimation("Spell1", 0, Owner, false, false, false);
        SpellBuffAdd(Target, Attacker, default, 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        TeamID = GetTeamID(default);
        Level = GetLevel(Owner);
        Heal = SetVarInTable(VALUE_BY_LEVEL);
        Dmg = GetTotalAttackDamage(Owner);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + MainDmg, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        IncHealth(Owner, 0 + Heal, Owner);
        ;
        SpellEffectCreate(FadeParticle, default, "NocturneUmbraBlades_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Unit, Target, default, default, true, default, default, false, default, default, default);
        SpellBuffAdd(Attacker, Target, "IfHasBuffCheck", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Attacker, Attacker, 360, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        TeamID = GetTeamID(default);
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        AttackDamage = GetTotalAttackDamage(Owner);
        scaling = SetVarInTable(0.85);
        ;
        ;
        HitResult = SetVarInTable(false);
        ;
        ApplyDamage(Owner, Target, 0 + TotalDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, true, Attacker);
        ;
        SpellBuffAdd(Owner, Target, "UrgotEntropyPassive", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        SpellEffectCreate(asdf, default, "UrgotHeatSeekingMissile_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        DestroyMissile(MissileNetworkID);
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        AttackDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ;
        TeamofOwner = GetTeamID(default);
        ;
        GragasSkinID = GetSkinID(Attacker);
        ;
        ;
        ForEachUnitInTargetArea(Owner, Target, 430, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            Center = GetCastSpellTargetPos();
            NextBuffVars.Speed = SetVarInTable(900);
            NextBuffVars.Gravity = SetVarInTable(5);
            NextBuffVars.Center = SetVarInTable(Center);
            NextBuffVars.Distance = SetVarInTable(900);
            NextBuffVars.IdealDistance = SetVarInTable(900);
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, "MoveAwayCollision", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
            ;
            ;
        });
        ;
        ;
        SpellBuffAdd(Owner, Target, default, 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, default, default, default, default);
        TargetPos = GetUnitPosition(Target);
        ;
        TeamID = GetTeamID(default);
        buffDuration = SetVarInTable(VALUE_BY_LEVEL);
        SpellEffectCreate(Particle, default, "UrgotPlasmaGrenade_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
        ;
        dmg = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.ArmorReduced = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Owner, TargetPos, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Iterator) =>
        {
            ;
            ;
            ;
        });
        DestroyMissile(MissileNetworkID);
        ;
        ;
        MissilePosition = GetMissilePosFromID(MissileNetworkID ?? 0);
        NextBuffVars.MissilePosition = SetVarInTable(MissilePosition);
        SpellBuffAdd(Attacker, Target, "FizzMarinerDoomBomb", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        CharVars.UltFired = SetVarInTable(false);
        FaceDirection(Owner, Target);
        NextBuffVars.Damage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        PlayAnimation("Spell2", 0 + factor, Owner, false, false, false);
        targetPos = GetUnitPosition(Target);
        Move(Owner, targetPos, 1500, 2, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + Distance, FACE_MOVEMENT_DIRECTION);
        teamID = GetTeamID(default);
        Other1 = SpawnMinion("placeholder", "TestCube", "idle.lua", Owner, teamID ?? TEAM_UNKNOWN, false, true, false, true, false, true, 0, false, false, Owner, default);
        FaceDirection(Other1, Target);
        SpellBuffAdd(Owner, Target, "AlistarHeadbuttMarker", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other1, Owner, default, 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "AlistarTrample", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        ;
        ;
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        BaseAttackDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + DamageVar, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        SpellBuffRemove(Owner, "VolibearQ", Owner, 0);
        ;
        DebuffFound = SetVarInTable(false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(Part1, Part2, "VolibearW_tar.troy", "VolibearW_tar.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        ;
        Damage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + Damage, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0.7, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "KogMawCausticSpittleCharged", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, false, false, default);
        ;
        SpellBaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, "GravesChargeShotShot", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        TotalAD = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + SpellBaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        TeamOfCaster = GetTeamID(default);
        SpellEffectCreate(part, default, "Graves_ClusterShot_Tar.troy", default, TeamOfCaster ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, Target, Target, default, default, true, false, false, false, false, default, default);
        ;
        TotalDamage = GetTotalAttackDamage(Attacker);
        ;
        ;
        ;
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Target, Target, "GravesClusterShotAttack", 1, 1, 0.25, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + BonusDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        ;
        KMSkinID = GetSkinID(Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        KMSkinID = GetSkinID(Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        HitResult = SetVarInTable(HIT_Critical);
        ;
        KMSkinID = GetSkinID(Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IncPAR(Owner, 0 + VALUE_BY_LEVEL);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        OwnerTeam = GetTeamID(default);
        ;
        ;
        ;
        OwnerTeam = GetTeamID(default);
        TargetTeam = GetTeamID(default);
        ;
        ;
        TargetPos = GetUnitPosition(Target);
        ;
        TeamID = GetTeamID(default);
        buffDuration = SetVarInTable(VALUE_BY_LEVEL);
        SpellEffectCreate(Particle, default, "Graves_SmokeGrenade_Boom.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Nothing, default, TargetPos, true, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamID ?? TEAM_CASTER, false, true, false, true, true, true, 50, false, true, Owner, default);
        SpellBuffAdd(Attacker, Other3, "GravesSmokeGrenade", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Attacker, TargetPos, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 0, false, false, Attacker);
            ;
        });
        ;
        ;
        KMSkinID = GetSkinID(Attacker);
        ;
        ApplyDamage(Owner, Target, 0 + BaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        Level = GetLevel(Attacker);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        FaceDirection(Owner, Target);
        ;
        ;
        TargetPos = GetPointByUnitFacingOffset(Owner, 0 + finalDistance, 0);
        TeleportToPosition(Owner, TargetPos);
        DamageVar = SetVarInTable(VALUE_BY_LEVEL);
        SilenceDur = SetVarInTable(VALUE_BY_LEVEL);
        ;
        KIDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        KIDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        OwnerTeamID = GetTeamID(default);
        ;
        ;
        OwnerTeam = GetTeamID(default);
        TargetTeam = GetTeamID(default);
        ;
        ;
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        NextBuffVars.SpellLevel = SetVarInTable(Level);
        ;
        ;
        SpellBuffAdd(Attacker, Target, "GatlingDebuff", 10, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, default, default, default, default);
        ;
        ;
        ;
        NextBuffVars.ArmorMod = SetVarInTable(VALUE_BY_LEVEL);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        totalDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.55, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        ;
        baseDamage = SetVarInTable(VALUE_BY_LEVEL);
        totalAttackDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        baseDamage = SetVarInTable(VALUE_BY_LEVEL);
        totalAttackDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        HitResult = SetVarInTable(HIT_Critical);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        HitResult = SetVarInTable(HIT_Critical);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        NextBuffVars.Level = SetVarInTable(Level);
        Damage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ApplyDamage(Owner, Target, 0 + Damage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        ;
        ;
        BaseDmg = GetTotalAttackDamage(Owner);
        DmgPerLvl = SetVarInTable(VALUE_BY_LEVEL);
        PerLevel = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        AttackDamage = GetTotalAttackDamage(Attacker);
        ;
        AbilityDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ApplyDamage(Attacker, Target, 0 + DamageToDeal, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        SpellEffectCreate(asdf, default, "missFortune_richochet_tar_first.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        Other1 = SpawnMinion("LocationFinder", "TestCube", "idle.lua", Target, TeamID ?? TEAM_UNKNOWN, true, true, true, true, true, true, 0, default, true, Nothing, default);
        FaceDirection(Other1, Attacker);
        LeftPos = GetPointByUnitFacingOffset(Other1, 500, 90);
        RightPos = GetPointByUnitFacingOffset(Other1, 500, 270);
        Other2 = SpawnMinion("LocationFinder", "TestCube", "idle.lua", LeftPos, TeamID ?? TEAM_UNKNOWN, true, true, true, true, true, true, 0, default, true, Nothing, default);
        Other3 = SpawnMinion("LocationFinder", "TestCube", "idle.lua", RightPos, TeamID ?? TEAM_UNKNOWN, true, true, true, true, true, true, 0, default, true, Nothing, default);
        FaceDirection(Other2, Attacker);
        FaceDirection(Other3, Attacker);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        TargetPos = GetUnitPosition(Other1);
        EatHydra = SetVarInTable(0);
        ForEachUnitInTargetArea(Attacker, Other1, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ForEachUnitInTargetArea(Attacker, Other2, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "MissFortuneRShotHolder", true, (Iterator) =>
        {
            ;
            ;
        });
        ForEachUnitInTargetArea(Attacker, Other3, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "MissFortuneRShotHolder", true, (Iterator) =>
        {
            ;
            ;
        });
        ForEachUnitInTargetAreaRandom(Attacker, Other1, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "MissFortuneRShotHolder", true, 1, (Iterator) =>
        {
            SpellCast(Attacker, Unit, Unit, Unit, true, 0, ExtraSlots, 0 + Level, false, true, false, false, false, TargetPos);
            EatHydra = SetVarInTable(1);
        });
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        AttackDamage = GetTotalAttackDamage(Attacker);
        ;
        AbilityDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + RicochetDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0.65, 0, false, true, Attacker);
        SpellEffectCreate(asdf, default, "missFortune_richochet_tar_second_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(asdf, default, "missFortune_richochet_tar_second.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        ;
        ;
        TargetPos = GetUnitPosition(Target);
        CharVars.Counter = SetVarInTable(0);
        ;
        NextBuffVars.Level = SetVarInTable(Level);
        Damage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Owner, Target, 0 + Damage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        Dmg = SetVarInTable(VALUE_BY_LEVEL);
        Disable = SetVarInTable(VALUE_BY_LEVEL);
        AP = SetVarInTable(0.5);
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.ASMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        baseDamageBlock = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        NextBuffVars.DamageBlock = SetVarInTable(DamageBlock);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "RumbleHeatDelay", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.SpeedBoost = SetVarInTable(VALUE_BY_LEVEL);
        ;
        BaseHeatCost = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, "RumbleShieldBuff", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        IncPAR(Owner, 0 + BaseHeatCost);
        NextBuffVars.MovementSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        NextBuffVars.AttackSpeedMod = SetVarInTable(-0.25);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "IceBlast", 100, 1, 4, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
        SpellEffectCreate(HitEffet, default, "karma_heavenlyWave_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        ;
        ;
        NextBuffVars.AttackSpeedBonusPercent = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.MovementSpeedBonusPercent = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, default, default, default);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, default, default, default);
        TeamID = GetTeamID(default);
        SpellBuffAdd(Owner, Owner, "KarmaSoulShieldAnim", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ArmorAmount = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        NextBuffVars.TotalArmorAmount = SetVarInTable(TotalArmorAmount);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellEffectCreate(a, default, "karma_soulShield_buf_mantra.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, default, default, default);
        ForEachUnitInTargetArea(Owner, Target, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellEffectCreate(aoehit, default, "karma_souldShiled_ult_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, default, default, default);
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL + ArmorAmount, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.8, 0, false, false, Attacker);
        });
        SpellBuffAdd(Owner, Owner, "KarmaSoulShieldAnim", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ArmorAmount = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        NextBuffVars.TotalArmorAmount = SetVarInTable(TotalArmorAmount);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        DamageAmount = GetTotalAttackDamage(Owner);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + DamageAmount, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        RemoveOverrideAutoAttack(Owner, false);
        SpellBuffRemove(Owner, "CaitlynHeadshot", Owner, default);
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 0, false, false, Attacker);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, default, default);
        NextBuffVars.DamageAbsorption = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        HealthPerStack = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.MovementSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SpellBuffAdd(Owner, Target, "olafSlow", 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "OlafAxeThrowDamage", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Attacker);
        HitResult = SetVarInTable(HIT_Critical);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
        ;
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SpellEffectCreate(b, default, "olaf_recklessSwing_tar_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(this.ParticleID, default, "olaf_recklessStrike_axe_charge.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_WEAPON_L_2", default, Owner, "BUFFBONE_WEAPON_L_4", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ParticleID, default, "olaf_recklessStrike_axe_charge.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_WEAPON_R_2", default, Owner, "BUFFBONE_WEAPON_R_4", default, false, default, default, default, default, default, default);
        SpellEffectCreate(a, default, "olaf_recklessSwing_tar_04.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(c, default, "olaf_recklessSwing_tar_05.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(c, default, "olaf_recklessSwing_tar_03.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, default, default, default, default);
        ApplyDamage(Attacker, Target, 0 + BonusDamage, TRUE_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Attacker);
        ApplyDamage(Attacker, Attacker, 0 + SelfDamage, TRUE_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        ;
        ;
        ;
        NextBuffVars.ManaCost = SetVarInTable(tempManaCost);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.7, 0, false, false, Attacker);
        SpellBuffAdd(Owner, Owner, "Pyromania", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        AnnieSkinID = GetSkinID(Owner);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        NextBuffVars.DamageReturn = SetVarInTable(VALUE_BY_LEVEL ?? 1);
        NextBuffVars.ArmorAmount = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 15, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        ;
        TeamID = GetTeamID(default);
        ;
        HitResult = SetVarInTable(HIT_Normal);
        percentOfAttack = SetVarInTable(CharVars.percentOfAttack);
        BaseDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Annie", teamID ?? TEAM_UNKNOWN);
        ;
        Dmg = SetVarInTable(VALUE_BY_LEVEL);
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, default, false, false, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Annie", teamID ?? TEAM_UNKNOWN);
        ;
        Dmg = SetVarInTable(VALUE_BY_LEVEL);
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, default, false, false, default);
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        TeamID = GetTeamID(default);
        TargetPos = GetUnitPosition(Target);
        ;
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        totalDmg = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + DamageToDeal, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, true, true, Attacker);
        SpellEffectCreate(particle, default, "caitlyn_ace_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Owner, default, default, true, default, default, default, default, default, default);
        SpellBuffRemove(Attacker, "IfHasBuffCheck", Attacker, default);
        DestroyMissile(MissileNetworkID);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 0, false, false, Attacker);
        ;
        TeamID = GetTeamID(default);
        AnnieSkinID = GetSkinID(Owner);
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(-0.5);
        ;
        ;
        ;
        CharVars.CastPoint = GetUnitPosition(Owner);
        SpellCast(Owner, Target, Target, Target, false, 1, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        AttackDamage = GetTotalAttackDamage(Owner);
        ;
        BackstabBonus = SetVarInTable(0);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL + AttackDamageMod, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1 + BackstabBonus, 1, 1, false, false, Attacker);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.MissChance = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Target, "TwoShivPoison", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Jester", teamID ?? TEAM_UNKNOWN);
        ;
        Dmg = SetVarInTable(VALUE_BY_LEVEL);
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0.25, 1, false, false, Owner);
        NextBuffVars.CastPoint = SetVarInTable(CharVars.CastPoint);
        Damage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.Damage = SetVarInTable(Damage);
        SpellEffectCreate(hi, default, "vayne_E_tar.troy", default, TEAM_NEUTRAL, 200, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Target, Target, default, default, true, false, false, false, false, default, default);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 0.5, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "VayneCondemnMissile", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, false, default);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Shaco", teamID ?? TEAM_UNKNOWN);
        ;
        Dmg = SetVarInTable(VALUE_BY_LEVEL);
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0.2, 1, false, false, Owner);
        teamID = GetTeamID(default);
        Attacker = GetChampionBySkinName("Shaco", TEAM_ORDER);
        ;
        Dmg = SetVarInTable(VALUE_BY_LEVEL);
        ApplyDamage(Attacker, Target, 0 + Dmg, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0.25, 1, false, false, Owner);
        SpellBuffRemoveType(Owner, BUFF_CombatEnchancer);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Shred);
        ;
        DestroyMissileForTarget(Owner);
        ;
        ;
        DestroyMissileForTarget(Owner);
        NextBuffVars.DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DamageDealt = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DamageTaken = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.shacoDamageTaken = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "HallucinateApplicator", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        scalingDamage = SetVarInTable(VALUE_BY_LEVEL);
        BaseAttackDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + DamageVar, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        ;
        NextBuffVars.ADMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        SpellBuffAdd(Attacker, Target, "VayneInquisition", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        scalingDamage = SetVarInTable(VALUE_BY_LEVEL);
        BaseAttackDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + DamageVar, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, false, Attacker);
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "Xerath_Bolt_hit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(b, default, "Xerath_Bolt_hit.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        Debuff = SetVarInTable(true);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.7, 0, false, false, Attacker);
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "Xerath_Bolt_hit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        Debuff = SetVarInTable(true);
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.7, 0, false, false, Attacker);
        ;
        SpellBuffAdd(Owner, Target, "YorickRavenousPrimaryTarget", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        TargetPos = GetPointByUnitFacingOffset(Owner, 0 + Distance, 0);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + Level, true, false, false, true, false, default);
        NextBuffVars.DrainPercent = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DrainedBool = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        TeamID = GetTeamID(default);
        SpellEffectCreate(LifestealEffect, default, "yorick_ravenousGhoul_activeHeal.troy", default, TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        SpellEffectCreate(HitEffect, default, "yorick_ravenousGhoul_cas_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        SpellEffectCreate(e, default, "YorickPHDecayedExplosion.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, false, false, default, default);
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(-0.5);
        ForEachUnitInTargetArea(Owner, Target, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellEffectCreate(b, default, "tristana_explosiveShot_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, "YorickDecayedSlow", 100, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
        });
        SpellBuffAdd(Owner, Target, "YorickReviveAllySelf", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        zombie = GetIsZombie(Owner);
        ;
        Pos = GetUnitPosition(Target);
        Other1 = CloneUnitPet(Target, "YorickRARevive", 0, Pos, 0, 0, false);
        ;
        IncHealth(Other1, 0 + Temp1, Other1);
        SpellBuffAdd(Owner, Other1, "YorickRAPetBuff2", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Other1, Owner, "YorickRARemovePet", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        TotalAD = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + VALUE_BY_LEVEL + FinalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, default, 100, 1, 4, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "PoppyDITarget", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyDITargetDmg", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "KayleInterventionAnim", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Invulnerability, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        ;
        DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(this.a, default, "Xerath_E_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Nothing, default, OwnerPos, true, false, false, false, false, default, default);
        ForEachUnitInTargetArea(Target, Owner, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellEffectCreate(asdf, default, "Xerath_Barrage_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            ;
            ApplyDamage(Target, Unit, 0 + DamageAmount, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 0, false, false, Target);
            ;
        });
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Attacker);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        HealLevel = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        IncHealth(Target, 0 + HealAmount, Owner);
        ApplyAssistMarker(Attacker, Target, 10);
        SpellBuffAdd(Owner, Owner, "KayleDivineBlessingAnim", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        TAD = GetTotalAttackDamage(Owner);
        DamagePercent = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ApplyDamage(Owner, Target, 0 + BaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        ForEachUnitInTargetArea(Owner, Target, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectTurrets ", default, true, (Iterator) =>
        {
            ;
        });
        TargetPos = GetUnitPosition(Target);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.Damage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DamageTwo = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.WillMove = SetVarInTable(true);
        NextBuffVars.WillRemove = SetVarInTable(false);
        OwnerPos = GetUnitPosition(Owner);
        ;
        ;
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        NextBuffVars.SlashSpeed = SetVarInTable(SlashSpeed);
        SpellBuffAdd(Target, Owner, default, 1, 1, 0.25 + Duration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "PoppyHeroicChargePoppyFix", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 240, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellBuffAdd(Target, Target, "RegenerationPotion", 5, 1, 15, NextBuffVars, BUFF_STACKS_AND_CONTINUE, BUFF_Heal, 0, false, false, false, default);
        SpellBuffAdd(Target, Target, "Potion_Internal", 1, 1, 15, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        SpellBuffAdd(Target, Target, default, 1, 1, 300, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 240, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellBuffRemove(Owner, "Gate", Owner, 0);
        StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_StunnedOrSilencedOrTaunted);
        SpellBuffAdd(Owner, Owner, "ZhonyasRingShield", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invulnerability, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 0 + damageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, default, false, false, default);
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        DispellNegativeBuffs(Owner);
        slotCheck = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.ShieldHealth = SetVarInTable(400);
        SpellBuffAdd(Owner, Owner, "PurpleCapote", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 240, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        DebuffMod = SetVarInTable(-0.7);
        ;
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.AbilityPowerMod = SetVarInTable(AbilityPowerMod);
        NextBuffVars.BonusDamageMod = SetVarInTable(BonusDamageMod);
        NextBuffVars.BaseDamageMod = SetVarInTable(BaseDamageMod);
        SpellBuffAdd(Owner, Target, default, 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, default, default);
        SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "DeathfireGraspSpell");
        SpellCast(Owner, Target, Target, Target, default, 7, ExtraSlots, 1, true, true, false, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.ShieldHealth = SetVarInTable(ShieldHealth);
        SpellBuffAdd(Owner, Owner, "PrideShield", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 1, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TargetPos = GetUnitPosition(Target);
        FaceDirection(Owner, TargetPos);
        SpellEffectCreate(CasterParticle, default, "PirateCutlass_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ApplyDamage(Attacker, Target, 150, MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, true, true, Attacker);
        NextBuffVars.MoveSpeedMod = SetVarInTable(-0.5);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Slow, 0, true, false, default, default);
        ApplyDamage(Attacker, Target, 300, MAGIC_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, true, true, Attacker);
        NextBuffVars.MoveSpeedMod = SetVarInTable(-0.5);
        SpellBuffAdd(Attacker, Target, "BilgewaterCutlass", 1, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Slow, 0, true, false, default, default);
        SpellEffectCreate(particle, default, "Haste_proc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "HextechGunbladeSpell");
        TargetPos = GetUnitPosition(Target);
        FaceDirection(Owner, TargetPos);
        SpellCast(Owner, Target, Target, Target, false, 7, ExtraSlots, 1, true, true, false, false, false, default);
        SpellBuffAdd(Target, Target, default, 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "BreathstealerSpell");
        TargetPos = GetUnitPosition(Target);
        FaceDirection(Owner, TargetPos);
        SpellCast(Owner, Target, Target, Target, false, 7, ExtraSlots, 1, true, true, false, false, false, default);
    }
    public void BuffOnUpdateStats()
    {
        ;
        ;
        ;
        ExecutePeriodically(60, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Level = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ExecutePeriodically(5, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            IncHealth(Owner, 0 + HealthInc, Owner);
            SpellEffectCreate(Particle, default, "InnervatingLocket_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(10, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncScaleSkinCoef(0 + this.ScaleCoef, Owner);
        ;
        IncScaleSkinCoef(0.7, Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncScaleSkinCoef(0.1, Owner);
        ;
        ;
        ;
        CurrentTime = GetGameTime();
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        CurrentTime = GetGameTime();
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        CurrentTime = GetGameTime();
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(10, this.LastTimeExecuted, false, () =>
        {
            TeamID = GetTeamID(default);
            ;
            ;
            ;
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        CurrentTime = GetGameTime();
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 900, "AffectEnemies AffectMinions AffectNotPet NotAffectSelf ", default, true, (Iterator) =>
        {
            ;
            ;
        });
        CurrentTeam = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Level = GetLevel(Owner);
        ;
        ;
        ;
        IncPercentPARRegenMod(Owner, 0 + PercentMissing);
        ;
        ;
        IncScaleSkinCoef(0.3, Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(10, this.LastTimeExecuted, false, () =>
        {
            TeamID = GetTeamID(default);
            ;
            ;
            ;
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(60, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        ;
        ;
        ;
        Level = GetLevel(Owner);
        HPRegen = SetVarInTable(VALUE_BY_LEVEL);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetScaleSkinCoef(1.15, Owner);
        ;
        ;
        ExecutePeriodically(10, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ;
        ;
        ;
        ;
        Level = GetLevel(Owner);
        ;
        ;
        ;
        IncPercentPARRegenMod(Owner, 0 + PercentMissing);
        ;
        ;
        IncScaleSkinCoef(0.25, Owner);
        ;
        ;
        ExecutePeriodically(60, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        this.ThisBubble = AddUnitPerceptionBubble(TeamID, 0 + this.BubbleSize, Owner, 25000, Nothing, Nothing, true);
        ;
        ;
        ;
        ;
        ;
        SpellBuffRemoveCurrent(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncFlatPARRegenMod(Owner, 0 + StatsPer5);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + HealthMod);
        SetBuffToolTipVar(2, 0 + HealthIncRate);
        SetBuffToolTipVar(3, 10);
        ;
        ;
        ;
        ;
        IncPercentPARRegenMod(Owner, 0 + PercentMissing);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(8, this.LastTimeExecuted, false, () =>
        {
            ;
            this.movementSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Level = GetLevel(Owner);
        HPRegen = SetVarInTable(VALUE_BY_LEVEL);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ;
        ;
        this.ArmorBonus = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        this.ArmorBonus = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        IncMaxHealth(Owner, 0 + this.APHealthAdded, false);
        IncMaxHealth(Owner, 0 + this.AttackHealthAdded, false);
        SetBuffToolTipVar(1, 0 + this.AttackHealthAdded);
        SetBuffToolTipVar(2, 0 + this.APHealthAdded);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        this.IsActive = SetVarInTable(true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Level = SetVarInTable(this.Level);
        Modifier = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.DoOnce = SetVarInTable(true);
        Level = SetVarInTable(this.Level);
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + ShieldHealth);
        ;
        Level = GetLevel(Owner);
        NextBuffVars.healthRegen = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        CurPosition = GetUnitPosition(Owner);
        LastPosition = SetVarInTable(this.LastPosition);
        Distance = DistanceBetweenPoints(CurPosition, LastPosition);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(0.5, this.FriendlyTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 700, "AffectFriends AffectMinions AffectHeroes ", default, true, (Iterator) =>
            {
                ;
                ;
            });
        });
        ;
        ;
        ;
        MovementSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        this.LifeTime = SetVarInTable(LifeTime);
        ;
        MoveSpeedBonus = SetVarInTable(VALUE_BY_LEVEL);
        ;
        TeemoSkinID = GetSkinID(Owner);
        ;
        ;
        ;
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        MoveSpeedBonus = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        StartTrackingCollisions(Owner, true);
        ;
        ;
        SetBuffToolTipVar(1, 0 + DamageAmount);
        SetBuffToolTipVar(2, 25);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncScaleSkinCoef(0.5, Owner);
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
        MinDistanceCheck = SetVarInTable(350);
        MaxDistanceCheck = SetVarInTable(950);
        ;
        MaxSpeed = SetVarInTable(450);
        MinSpeed = SetVarInTable(175);
        ;
        ;
        ;
        ;
        ;
        ASAura = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        BaseDamage = SetVarInTable(20);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + APMod);
        SetBuffToolTipVar(1, 0 + this.TotalArmorAmount);
        ;
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
        PercMaxHealthMod = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        IncMaxHealth(Owner, 0 + HealthtoAdd, false);
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + CritToTooltip);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncScaleSkinCoef(0.3, Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + TooltipAttackSpeed);
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(0, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Factor = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            IncHealth(Owner, 0 + Heal, Owner);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        MoveMod = SetVarInTable(this.MoveMod);
        ;
        ;
        ;
        BaseIncrease = SetVarInTable(this.BaseIncrease);
        DamageMod = SetVarInTable(this.DamageMod);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncFlatPARRegenMod(Owner, 0 + this.ManaRegenBonus);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncMaxHealth(Owner, 0 + this.HPMod, false);
        SetBuffToolTipVar(2, 0 + this.HPMod);
        SetBuffToolTipVar(1, 0 + this.APMod);
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.DefenseBonus);
        ;
        ;
        ;
        ;
        ;
        ;
        Level = SetVarInTable(this.Level);
        AttackDamageBoon = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted2, false, () =>
        {
            this.HasteBoost = SetVarInTable(0);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Level = SetVarInTable(this.Level);
        IncMaxHealth(Owner, 0 + this.BonusHealth, true);
        IncScaleSkinCoef(0.2, Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        CharVars.DoOnce = SetVarInTable(true);
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + AttackSpeedMod);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            Level = GetLevel(Owner);
            OffensiveGain = SetVarInTable(VALUE_BY_LEVEL);
            SetBuffToolTipVar(1, 0 + OffensiveGain);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.OneFrame = SetVarInTable(false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        BaseDamage = SetVarInTable(10);
        ;
        ;
        ;
        ;
        BaseDamage = SetVarInTable(20);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Level = SetVarInTable(this.Level);
        ;
        Level = SetVarInTable(this.Level);
        SpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        this.TicksLeft = SetVarInTable(TicksLeft);
        Level = SetVarInTable(this.Level);
        SpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        this.TicksLeft = SetVarInTable(TicksLeft);
        Caster = SetBuffCasterUnit();
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
        ;
        ;
        ;
        ;
        this.PreviousState = SetVarInTable(this.CurrentState);
        ;
        ;
        ;
        Level = SetVarInTable(this.Level);
        SpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        CurrentTime = GetGameTime();
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Attacker, Owner, 1000, "AffectFriends AffectHeroes AlwaysSelf ", "TrundleDiseaseOverseer", true, (Iterator) =>
        {
            ;
            NextBuffVars.SelfASMod = SetVarInTable(VALUE_BY_LEVEL);
            NextBuffVars.SelfMSMod = SetVarInTable(VALUE_BY_LEVEL);
            NextBuffVars.CCReduc = SetVarInTable(VALUE_BY_LEVEL);
            SpellBuffAdd(Unit, Unit, "TrundleDesecrateBuffs", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.DamageIncrease);
        SetBuffToolTipVar(2, 0 + DamageReductionMod);
        ;
        this.LifeTime = SetVarInTable(LifeTime);
        StartTrackingCollisions(Owner, true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.HealAmount);
        ;
        ;
        ;
        IncScaleSkinCoef(0.08, Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 2000, "AffectEnemies AffectNeutral AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        ;
        SetBuffToolTipVar(1, 0 + CharVars.RegenTooltip);
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            IncHealth(Owner, 0 + Heal, Owner);
        });
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted2, false, () =>
        {
            ;
        });
        ;
        ;
        ;
        AttackSpeed = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        ;
        ;
        ArmorReduction = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        MagicReduction = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        ;
        ;
        ;
        ;
        ;
        StartTrackingCollisions(Owner, true);
        NextBuffVars.MoveSpeedMod = SetVarInTable(0);
        ;
        baseDmg = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        dmgPerMissingHealth = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ApplyNearSight(Attacker, Owner, 0.25);
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(0.25, this.LastTimeExecuted2, false, () =>
        {
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        LevelDamage = GetLevel(Owner);
        ;
        ;
        SetBuffToolTipVar(1, 0 + TotalDamage);
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpellToolTipVar(0 + CharVars.TearBonusMana, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        ;
        CharLevel = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncMaxHealth(Owner, 0 + this.HealthAmount, true);
        ;
        ;
        IncScaleSkinCoef(0.1, Owner);
        ;
        ;
        ;
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            HealthPerStack = SetVarInTable(VALUE_BY_LEVEL);
            FeastBase = SetVarInTable(VALUE_BY_LEVEL);
            ;
            ;
            ;
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        PushCharacterFade(Owner, 0.2, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + ArmorBonus);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ArmorDamageValue = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + HealthDisplay);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        GuardianAngelCount = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncFlatPARRegenMod(Owner, 0 + this.ManaRegenMod);
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            IncHealth(Owner, 15.625, Owner);
            IncPAR(Owner, 12.5);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.LifeTime = SetVarInTable(LifeTime);
        ;
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        ;
        AbilityPowerMod = SetVarInTable(this.AbilityPowerMod);
        BaseDamageMod = SetVarInTable(this.BaseDamageMod);
        BonusDamageMod = SetVarInTable(this.BonusDamageMod);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.StatBoost);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + ValueDisplay);
        ;
        ;
        IncFlatPARPoolMod(Owner, 0 + CharVars.TearBonusMana);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncFlatPARRegenMod(Owner, 0 + this.ManaRegenMod);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncPercentPARRegenMod(Owner, 0 + PercentMissing);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + APDisplay);
        ;
        ;
    }
    public void OnBuffActivate()
    {
        ;
        ;
        ;
        MoveAway(Owner, Attacker, 1200, 20, 600, 550, FIRST_COLLISION_HIT, CANCEL_ORDER, 0, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        GameTime = GetGameTime();
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectMinions AffectWards ", "SharedWardBuff", true, (Iterator) =>
        {
            MoveAway(Unit, Owner, 1000, 50, 300, 300, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 300, FACE_MOVEMENT_DIRECTION);
        });
        ;
        ;
        ApplyStun(Owner, Owner, 0.75);
        ApplyStun(Owner, Owner, 1.5);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.ThisBubble = AddPosPerceptionBubble(Attacker, 300, Owner, 5000, Nothing, false);
        this.lastTooltip = SetVarInTable(0);
        ;
        this.AP = SetVarInTable(0);
        this.AS = SetVarInTable(0);
        this.hpRegen = SetVarInTable(0);
        ;
        ;
        this.AP = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        IncGold(Owner, 0 + this.GoldAmount);
        ;
        ;
        SpellEffectCreate(this.buffParticle, default, "regen_rune_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        SpellEffectCreate(this.buffParticle, default, "invis_runes_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        SpellEffectCreate(this.buffParticle, default, "Speed_runes_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        this.DamageVar = SetVarInTable(0);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_blue_defense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.CooldownVar = SetVarInTable(0);
        SetBuffToolTipVar(1, 20);
        IncPermanentFlatPARRegenMod(Owner, 3);
        GameTime = GetGameTime();
        ;
        ;
        ;
        ;
        this.BonusAttack = SetVarInTable(BonusAttack);
        ;
        ;
        SpellEffectCreate(this.buffParticle, default, "nashor_rune_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        SpellBuffRemove(Owner, "WormRecouperateOn", Owner, default);
        CharDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        SpellBuffRemove(Owner, "WormRecouperate1", Owner, default);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_red_offense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_red_offense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        ParticlePosition = SetVarInTable(this.ParticlePosition);
        teamID = GetTeamID(default);
        ;
        ;
        this.numberUpgrades = SetVarInTable(14);
        IncPermanentExpReward(Owner, 12.5);
        IncPermanentGoldReward(Owner, 2);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_StunnedOrSilencedOrTaunted);
        ;
        ;
        attackerName = GetUnitSkinName(Attacker);
        TeamID = GetTeamID(default);
        this.removePart = SetVarInTable(false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        gameTime = GetGameTime();
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        ;
        ;
        TeamID = GetTeamID(default);
        this.ThisBubble = AddUnitPerceptionBubble(TeamID, 700, Owner, 25000, Nothing, Nothing, true);
        ;
        CancelAutoAttack(Owner, false);
        SpellBuffClear(Owner, "Stealth");
        ;
        ;
        ;
        ;
        ;
        ;
        this.MaxPlayerLevel = SetVarInTable(0);
        ForEachUnitInTargetArea(Owner, Owner, 9999, "AffectEnemies AffectFriends AffectHeroes ", default, default, (Iterator) =>
        {
            PlayerLevel = GetLevel(Unit);
            ;
        });
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
        ;
        ;
        ;
        ;
        ;
        ;
        RedirectGold(Owner, Attacker);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        SpellEffectCreate(this.Particle1, default, "Summoner_enemy_capture_buf_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "Summoner_enemy_capture_buf_02.troy ", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        SpellEffectCreate(aras, default, "Summoner_Flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, default, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(this.AuraParticle, default, "Summoner_ally_capture_buf_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle, default, "Summoner_ally_capture_buf_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "Summoner_capture_Pulse.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectEnemies AffectNeutral AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffClear(Unit, "OdinCaptureChannel");
            SpellEffectCreate(asdf, default, "Ezreal_essenceflux_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Unit, false, Unit, "root", default, Unit, default, default, true, false, false, false, false, default, default);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.part, default, "Teleport_target.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ak, default, "Summoner_Teleport.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        this.ActivateTime = GetGameTime();
        ;
        ;
        ;
        ;
        ;
        ;
        this.Interrupted = SetVarInTable(false);
        ;
        ;
        IncScaleSkinCoef(0 + this.ScaleCoef, Owner);
        ;
        ;
        ;
        ;
        ;
        Duration = GetBuffRemainingDuration(Owner, "SummonerBattleCry");
        RedirectGold(Owner, Attacker);
        SpellEffectCreate(aras, default, "Summoner_Flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, false, false, false, default, default);
        ;
        OwnerTeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        IncScaleSkinCoef(0.7, Owner);
        RedirectGold(Owner, Attacker);
        SpellEffectCreate(aras, default, "Summoner_Flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, default, default, default, default, default, default);
        ;
        OwnerTeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        Level = GetLevel(Owner);
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        SpellEffectCreate(this.DotPart, default, "Summoner_Dot.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.PercentBonus = SetVarInTable(0);
        this.StartTime = GetGameTime();
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.waypoint, default, "tutorial_waypoint_yellow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        this.PercentBonus = SetVarInTable(0);
        this.StartTime = GetGameTime();
        CasterTeamID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(CasterTeamID, 0, Owner, 20000, Nothing, Nothing, false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "corki_valkrie_impact_cas.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 900, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ForNClosestUnitsInTargetArea(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectMinions ", 1, true, "ResistantSkin", (Iterator) =>
        {
            MoveAway(Owner, Unit, 1000, 50, 300, 300, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 300, FACE_MOVEMENT_DIRECTION);
        });
        ;
        ;
        ApplyDamage(Attacker, Owner, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, default, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Center = SetVarInTable(this.Center);
        MoveAway(Owner, Center, 0 + this.Speed, 0 + this.Gravity, 0 + this.Distance, 0, FIRST_COLLISION_HIT, CANCEL_ORDER, 0 + IdealDistance, default);
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        Move(Owner, TargetPos, 600, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, KEEP_CURRENT_FACING);
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        this.PercentBonus = SetVarInTable(0);
        this.StartTime = GetGameTime();
        ;
        ;
        ;
        ;
        ;
        ;
        Center = SetVarInTable(this.Center);
        MoveAway(Owner, Center, 0 + this.Speed, 0 + this.Gravity, 0 + this.Distance, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + IdealDistance, default);
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Position = SetVarInTable(this.Position);
        Move(Owner, Position, 0 + this.Speed, 0 + this.Gravity, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + IdealDistance, default);
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        gameTime = GetGameTime();
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncPermanentExpReward(Owner, 0 + bonusExp);
        IncPermanentGoldReward(Owner, 0 + bonusGold);
        ;
        ;
        this.DrainedBool = SetVarInTable(false);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        ;
        myTeamID = GetTeamID(default);
        ;
        ;
        this.bubbleID = AddUnitPerceptionBubble(bubbleTeamID, 5, Owner, 5, Nothing, Nothing, true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.PercentBonus = SetVarInTable(0);
        this.StartTime = GetGameTime();
        SpellBuffAdd(Owner, Owner, "HalloweenUrfCD", 1, 1, 9, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellEffectCreate(this.a, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.b, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "fish_main", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.c, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_tail", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.d, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_tail_3", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.e, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_uparm", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.f, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_uparm", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.g, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_flipper", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.h, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_flipper", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "HalloweenUrfCD", 1, 1, 9, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        ;
        PlayAnimation("Idle1", 0, Owner, false, false, default);
        SpellEffectCreate(this.a, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.b, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "fish_main", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.c, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_tail", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.d, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_tail_3", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.e, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_uparm", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.f, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_uparm", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.g, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_flipper", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.h, default, "ghostUrf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_flipper", default, Owner, default, default, false, default, default, default, default, default, default);
        this.damageMod = SetVarInTable(0);
        this.StartTime = GetGameTime();
        SpellEffectCreate(default, default, "OdinBombSuccessParticle", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.buffParticle, default, "odin_heal_rune.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, true, default, false, false, default, default);
        this.KillMe = SetVarInTable(false);
        CharVars.StoredDamage = SetVarInTable(0);
        SetBuffToolTipVar(1, 0 + CharVars.StoredDamage);
        SpellBuffRemove(Owner, "Internal_50MS", Owner, 0);
        SpellBuffRemove(Owner, "OdinGrievousWound", Owner, 0);
        OwnerPos = GetUnitPosition(Owner);
        CastPos = GetPointByUnitFacingOffset(Owner, 150, 0);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        this.DamageTakenFromGuardian = SetVarInTable(0.8);
        this.MoveSpeedBuff = SetVarInTable(0.25);
        ApplyTaunt(Attacker, Owner, 1);
        ;
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewUltCD, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewSS0CD, 0, SpellSlots, SPELLBOOK_SUMMONER, Owner, default);
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewSS1CD, 1, SpellSlots, SPELLBOOK_SUMMONER, Owner, default);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_blue_defense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        SpellEffectCreate(this.Particle1, default, "OdinNeutralInvulnerable.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        orderTeam = SetVarInTable(TEAM_ORDER);
        chaosTeam = SetVarInTable(TEAM_CHAOS);
        this.BubbleID = AddUnitPerceptionBubble(orderTeam, 350, Owner, 25000, Nothing, Nothing, true);
        this.BubbleID2 = AddUnitPerceptionBubble(chaosTeam, 350, Owner, 25000, Nothing, Nothing, true);
        ;
        ;
        OrderTeam = SetVarInTable(TEAM_ORDER);
        ChaosTeam = SetVarInTable(TEAM_CHAOS);
        this.ChaosTeam = SetVarInTable(ChaosTeam);
        this.OrderTeam = SetVarInTable(OrderTeam);
        this.OrderBubble = AddUnitPerceptionBubble(this.OrderTeam, 400, Owner, 70, Nothing, Nothing, false);
        this.ChaosBubble = AddUnitPerceptionBubble(this.ChaosTeam, 400, Owner, 70, Nothing, Nothing, false);
        this.DamageIncMod = SetVarInTable(40);
        SpellEffectCreate(this.buffParticle, default, "nashor_rune_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        this.APIncMod = SetVarInTable(40);
        ;
        ;
        SpellEffectCreate(this.ParticleOrder, default, "odin_shrine_time.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_ORDER, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ParticleChaos, default, "odin_shrine_time.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_CHAOS, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, default, default, default, default);
        ;
        TeamID = GetTeamID(default);
        this.MyTeam = GetTeamID(default);
        this.orderTeam = SetVarInTable(TEAM_ORDER);
        this.chaosTeam = SetVarInTable(TEAM_CHAOS);
        this.BubbleID = AddUnitPerceptionBubble(this.orderTeam, 800, Owner, 25000, Nothing, Nothing, true);
        this.BubbleID2 = AddUnitPerceptionBubble(this.chaosTeam, 800, Owner, 25000, Nothing, Nothing, true);
        ;
        ;
        ;
        ;
        Level = GetLevel(Owner);
        HealAmount = SetVarInTable(VALUE_BY_LEVEL);
        ;
        IncPAR(Owner, 0 + ManaAmount);
        IncPAR(Owner, 20);
        ;
        IncHealth(Owner, 0 + HealAmount, Owner);
        TeamID = GetTeamID(default);
        SpellEffectCreate(asdf, default, "Odin_HealthPackHeal.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(asdf, default, "Summoner_Mana.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffClear(Owner, "OdinShieldRelicBuffHeal");
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "odin_point_active.troy", default, TEAM_ORDER, 10, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "odin_point_active.troy", default, TEAM_CHAOS, 10, 0, TEAM_CHAOS, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        SpellEffectCreate(this.ParticleOrder, default, "OdinHealthRelic.troy", default, TEAM_NEUTRAL, 3000, 0, TEAM_ORDER, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.ParticleChaos, default, "OdinHealthRelic.troy", default, TEAM_NEUTRAL, 3000, 0, TEAM_CHAOS, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, false, default, default, default);
        this.KillMe = SetVarInTable(false);
        SpellEffectCreate(this.ParticleOrder, default, "OdinSigil.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_ORDER, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.ParticleChaos, default, "OdinSigil.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_CHAOS, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_red_offense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        this.KillMe = SetVarInTable(false);
        Level = GetLevel(Owner);
        ;
        ;
        IncreaseShield(Owner, 0 + this.TotalArmorAmount, true, true);
        SetBuffToolTipVar(1, 0 + this.TotalArmorAmount);
        SpellEffectCreate(this.buffParticle2, default, "odin_center_relic.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "OdinCenterRelicShieldCheck2", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(this.ShamanAuraParticle, default, "SonaSongofDiscord_aura.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        this.PreviousTakeDamageTime = GetGameTime();
        this.DealtDamage = SetVarInTable(0);
        this.CooldownVar = SetVarInTable(0);
        this.TotalDamageOT = SetVarInTable(0);
        ;
        SpellEffectCreate(ar, default, "summoner_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        ;
        ;
        ;
        this.TimePassed = SetVarInTable(0);
        this.PreviousGameTime = GetGameTime();
        this.ChannelStartTime = GetBuffStartTime(Owner, "OdinCaptureChannel");
        OrderTeam = SetVarInTable(TEAM_ORDER);
        ChaosTeam = SetVarInTable(TEAM_CHAOS);
        this.BubbleID = AddUnitPerceptionBubble(OrderTeam, 400, Owner, 20, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(OrderTeam, 50, Owner, 20, Nothing, Nothing, true);
        this.BubbleID3 = AddUnitPerceptionBubble(ChaosTeam, 400, Owner, 20, Nothing, Nothing, false);
        this.BubbleID4 = AddUnitPerceptionBubble(ChaosTeam, 50, Owner, 20, Nothing, Nothing, true);
        ;
        TeamID = GetTeamID(default);
        ;
        ApplyDamage(Attacker, Owner, 80, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        SpellEffectCreate(hi, default, "kennen_btl_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(this.Particle, default, "Odin-Capture-Emptying.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Crystal", Owner, Owner, default, default, false, false, false, false, false, default, default);
        Level = GetLevel(Owner);
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.TotalDamage);
        SpellEffectCreate(this.buffParticle, default, "odin_relic_buf_light_blue.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.PrevSpellTrigger = SetVarInTable(0);
        IncScaleSkinCoef(0.3, Owner);
        ;
        this.MassiveBoostOverseer = SetVarInTable(1);
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.buffParticle, default, "invis_runes_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.buffParticle2, default, "Odin_Speed_Shrine_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, false, false, false, false, default, default);
        this.StartPosition = GetUnitPosition(Owner);
        SpellEffectCreate(this.Particle, default, "Odin-Capture-Filling.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Crystal", Owner, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.buffParticle, default, "regen_rune_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        this.VampVar = SetVarInTable(0.3);
        this.SpellVampVar = SetVarInTable(0.5);
        ;
        ;
        ;
        NextBuffVars.HPPerLevel = SetVarInTable(315);
        SpellBuffAdd(Owner, Owner, "HPByPlayerLevel", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        orderTeam = SetVarInTable(TEAM_ORDER);
        chaosTeam = SetVarInTable(TEAM_CHAOS);
        this.BubbleID = AddUnitPerceptionBubble(orderTeam, 650, Owner, 25000, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(chaosTeam, 650, Owner, 25000, Nothing, Nothing, false);
        ;
        OwnerLevel = GetLevel(Attacker);
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        SetBuffToolTipVar(1, 0 + this.DefenseMod);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_red_offense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        this.VampVar = SetVarInTable(0.3);
        ;
        ;
        SpellEffectCreate(default, default, "odin_quest_complete.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "PersonalTurretAssistBonus", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        this.ThisBubble = AddUnitPerceptionBubble(TeamID, 800, Owner, 25000, Nothing, Nothing, true);
        ;
        ;
        ;
        ;
        this.Looper = SetVarInTable(0);
        this.ChannelStartTime = GetBuffStartTime(Owner, "OdinCaptureChannelBomb");
        SpellEffectCreate(this.SCP, default, "OdinGolemPlaceHolder.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.Agony, default, "OdinGolemPlaceholder2.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.ParticleOrder, default, "odin_shrine_aura.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_ORDER, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.ParticleChaos, default, "odin_shrine_aura.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_CHAOS, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, false, default, default, default);
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.buffParticle, default, "regen_rune_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        this.KillMe = SetVarInTable(false);
        ;
        SpellEffectCreate(this.ParticleOrder, default, "odin_shrine_heal.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_ORDER, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ParticleChaos, default, "odin_shrine_heal.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_CHAOS, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, default, default, default, default);
        ;
        SpellEffectCreate(this.Part, default, "garen_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        this.TowerHP = SetVarInTable(TowerHP);
        this.StartPosition = GetUnitPosition(Owner);
        SpellEffectCreate(this.ParticleID, default, "TeleportHome.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        this.IsCancelled = SetVarInTable(0);
        this.StartTime = GetGameTime();
        ;
        SpellEffectCreate(this.Particle, default, "odin_suppression.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Crystal", Owner, Owner, default, default, false, false, false, false, false, default, default);
        this.StartTime = GetGameTime();
        ApplyStun(Owner, Owner, 0.5);
        this.MyTeamID = GetTeamID(default);
        this.OldMyTeamID = SetVarInTable(this.MyTeamID);
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        ApplyDamage(Attacker, Owner, 100000000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Attacker);
        this.StartPosition = GetUnitPosition(Owner);
        this.IsCancelled = SetVarInTable(0);
        BaseHeal = SetVarInTable(80);
        Level = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_blue_defense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        this.KillMe = SetVarInTable(false);
        SpellEffectCreate(this.Particle, default, "PotionofGiantStrength_itm.troy", default, TEAM_ORDER, 10, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Target, default, default, false, false, default, false, false, default, default);
        SpellEffectCreate(this.Particle, default, "PlaceholderShield.troy", default, TEAM_ORDER, 10, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Target, default, default, false, false, default, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "PotionofElusiveness_itm.troy", default, TEAM_ORDER, 10, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Target, default, default, false, false, default, false, false, default, default);
        SetScaleSkinCoef(1.15, Owner);
        SpellEffectCreate(this.Particle1, default, "regen_rune_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        SpellEffectCreate(this.buffParticle, default, "regen_rune_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, default, false, false, default, default);
        ;
        ;
        Level = GetLevel(Owner);
        BaseShield = SetVarInTable(140);
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.TotalShield);
        IncreaseShield(Owner, 0 + this.TotalShield, true, true);
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewUltCD, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewSS0CD, 0, SpellSlots, SPELLBOOK_SUMMONER, Owner, default);
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewSS1CD, 1, SpellSlots, SPELLBOOK_SUMMONER, Owner, default);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_blue_defense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        this.TotalArmorAmount = SetVarInTable(1000);
        IncreaseShield(Owner, 0 + this.TotalArmorAmount, true, true);
        this.TotalDamageOT = SetVarInTable(0);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_red_offense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        this.MaxPlayerLevel = SetVarInTable(0);
        ForEachUnitInTargetArea(Owner, Owner, 9999, "AffectEnemies AffectFriends AffectHeroes ", default, true, (Iterator) =>
        {
            PlayerLevel = GetLevel(Unit);
            ;
        });
        this.ADBuff = SetVarInTable(5);
        this.LSBuff = SetVarInTable(0.01);
        this.CooldownVar = SetVarInTable(0);
        OrderTeam = SetVarInTable(TEAM_ORDER);
        ChaosTeam = SetVarInTable(TEAM_CHAOS);
        SpellEffectCreate(this.ParticleOrder, default, "odin_shrine_time.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_ORDER, Owner, false, Nothing, default, Owner, Owner, default, default, false, true, false, false, false, default, default);
        SpellEffectCreate(this.ParticleChaos, default, "odin_shrine_time.troy", default, TEAM_NEUTRAL, 250, 0, TEAM_CHAOS, Owner, false, Nothing, default, Owner, Owner, default, default, false, true, false, false, false, default, default);
        MyBubble = AddPosPerceptionBubble(OrderTeam, 250, Owner, 1, Nothing, false);
        MyBubble2 = AddPosPerceptionBubble(ChaosTeam, 250, Owner, 1, Nothing, false);
        ;
        ;
        IncScaleSkinCoef(0.25, Owner);
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_red_offense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.NextAttackTime = GetGameTime();
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.buffParticle, default, "NeutralMonster_buf_blue_defense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        this.KillMe = SetVarInTable(false);
        SpellEffectCreate(this.Particle, default, "PotionofElusiveness_itm.troy", default, TEAM_ORDER, 10, 0, TEAM_CHAOS, Nothing, true, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.Particle2, default, "PotionofGiantStrength_itm.troy", default, TEAM_ORDER, 10, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.Particle2, default, "PlaceholderShield.troy", default, TEAM_ORDER, 10, 0, TEAM_ORDER, Nothing, true, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.buffParticle, default, "odin_quest_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 400, Owner, 20, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(Team, 50, Owner, 20, Nothing, Nothing, true);
        ;
        ;
        ;
        ;
        this.WillRemove = SetVarInTable(false);
        this.TickWorth = SetVarInTable(TickWorth);
        this.TickWorthMana = SetVarInTable(TickWorthMana);
        this.TickNumber = SetVarInTable(1);
        SpellEffectCreate(arr, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.EmblemParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CASTER, Nothing, true, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        SpellEffectCreate(poofin, default, "jackintheboxpoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        SpellEffectCreate(default, default, "Fervor", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ZephrisPendant, default, "ZettasManaManipulator_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CASTER, Nothing, true, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ;
        gameTime = GetGameTime();
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + aoeReduction);
        SpellEffectCreate(this.buffParticle, default, "Global_Invulnerability.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        GameTimeSec = GetGameTime();
        ;
        ;
        ;
        ;
        ;
        ;
        this.BonusDamage = SetVarInTable(DamageCapped);
        this.BonusResist = SetVarInTable(ResistCapped);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectTurrets ", default, default, (Iterator) =>
        {
            ;
            ;
            ;
        });
        ;
        SetBuffToolTipVar(1, 0 + TTDmg);
        SetBuffToolTipVar(2, 0 + this.BonusResist);
        ;
        SpellEffectCreate(this.b, default, "leBlanc_displace_AOE_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.b, default, "leBlanc_displace_AOE_tar_ult.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
        ;
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(FadeParticle, default, "LeBlanc_MirrorImagePoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Nothing, default, default, true, false, false, false, false, default, default);
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        this.doNotTeleport = SetVarInTable(false);
        OwnerPos = SetVarInTable(this.OwnerPos);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "LeblancSlideReturnM");
        CasterID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.SoulShackleTarget, default, "leBlanc_shackle_chain_beam_ult.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "root", default, Owner, "spine", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID, default, "leBlanc_shackle_self_idle_ult.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "C_BUFFBONE_GLB_CENTER_LOC", default, Attacker, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.SoulShackleIdleM, default, "leBlanc_shackle_target_idle_ult.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.SoulShackleTarget_blood, default, "leBlanc_shackle_tar_blood.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.LeblancVisionBubble = SetVarInTable(0);
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        OwnerPos = SetVarInTable(this.OwnerPos);
        Distance = DistanceBetweenObjectAndPoint(Owner, this.CastPosition);
        ;
        Move(Owner, this.CastPosition, 1600, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + this.Distance, FACE_MOVEMENT_DIRECTION);
        PlayAnimation("Spell2", 0, Owner, true, false, true);
        SpellEffectCreate(this.b, default, "Leblanc_displacement_blink_target.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.DistortionFx, default, "LeBlanc_Displacement_Yellow_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        ;
        ;
        this.doNotTeleport = SetVarInTable(false);
        OwnerPos = SetVarInTable(this.OwnerPos);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "leblancslidereturn");
        CasterID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.ParticleID, default, "leBlanc_shackle_chain_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "root", default, Owner, "spine", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.SoulShackleIdle, default, "leBlanc_shackle_self_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "C_BUFFBONE_GLB_CENTER_LOC", default, Attacker, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.SoulShackleTarget, default, "leBlanc_shackle_target_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.SoulShackleTarget_blood, default, "leBlanc_shackle_tar_blood.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.LeblancVisionBubble = SetVarInTable(0);
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        OwnerPos = SetVarInTable(this.OwnerPos);
        Distance = DistanceBetweenObjectAndPoint(Owner, this.CastPosition);
        ;
        Move(Owner, this.CastPosition, 1600, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + this.Distance, FACE_MOVEMENT_DIRECTION);
        PlayAnimation("Spell2", 0, Owner, true, false, true);
        SpellEffectCreate(this.b, default, "Leblanc_displacement_blink_target_ult.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.DistortionFx, default, "LeBlanc_Displacement_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        Pos = GetPointByUnitFacingOffset(Owner, 10, 180);
        FaceDirection(Owner, Pos);
        ;
        ;
        ;
        ;
        ;
        MoveAway(Owner, Attacker, 200, 10, 0 + Dist, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, FACE_MOVEMENT_DIRECTION);
        ;
        ;
        ;
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "MaokaiDrain3Toggle");
        SetSlotSpellCooldownTimeVer2(1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ;
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        TeamOfOwner = GetTeamID(default);
        OwnerSkinID = GetSkinID(Owner);
        SpellEffectCreate(this.Particle, default, "maoki_torrent_cas_01.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
        ;
        ;
        ForEachUnitInTargetArea(Attacker, TargetPos, 550, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
        {
            NextBuffVars.DefenseBonus = SetVarInTable(this.DefenseBonus);
            NextBuffVars.CCReduction = SetVarInTable(this.CCReduction);
            NextBuffVars.TargetPos = SetVarInTable(this.TargetPos);
            SpellBuffAdd(Attacker, Unit, "MaokaiDrain3Defense", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            ApplyAssistMarker(Owner, Unit, 10);
        });
        Caster = SetBuffCasterUnit();
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        PlayAnimation("Spell2c", 0, Owner, true, true, true);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "maokai_elementalAdvance_mis.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        this.UnitPerceptionBubble = AddUnitPerceptionBubble(TeamOfOwner, 10, Caster, 5, Nothing, Caster, false);
        MoveToUnit(Owner, Caster, 1300, 0, POSTPONE_CURRENT_ORDER, 0, 2000, 0, 0);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.RootParticleEffect2, default, "maokai_elementalAdvance_root_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.RootParticleEffect, default, "maokai_elementalAdvance_root_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ;
        SpellEffectCreate(this.taric, default, "maokai_elementalAdvance_armor.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CENTER_LOC", default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        OverrideAnimation("Attack", "Passive", Owner);
        OverrideAnimation("Attack2", "Passive", Owner);
        OverrideAnimation("Crit", "Passive", Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        CurPos = GetPointByUnitFacingOffset(Owner, 25, 180);
        NextBuffVars.DamagePerTick = SetVarInTable(this.DamagePerTick);
        Other3 = SpawnMinion("AcidTrail", "TestCube", "idle.lua", CurPos, TeamID ?? TEAM_CASTER, true, false, false, true, false, true, 0, false, true, Owner, default);
        SpellBuffAdd(Owner, Other3, "PoisonTrailApplicator", 1, 1, 3.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
        this.LastPosition = SetVarInTable(CurPos);
        this.HasHitGround = SetVarInTable(false);
        ;
        ;
        ;
        LandPos = GetPointByUnitFacingOffset(Attacker, 420, 180);
        Move(Owner, LandPos, 1000, 60, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 420, default);
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle2, this.Particle, "MegaAdhesive_green_pool.troy", "MegaAdhesive_red_pool.troy", TeamOfOwner ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        this.HealAmount = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        TargetPos = SetVarInTable(this.TargetPos);
        NextBuffVars.StunDuration = SetVarInTable(this.StunDuration);
        NextBuffVars.TargetPos = SetVarInTable(this.TargetPos);
        ForEachUnitInTargetArea(Attacker, TargetPos, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "VeigarEventHorizonMarker", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        });
        VeigarSkinID = GetSkinID(Attacker);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        MonkTotalDamage = GetTotalAttackDamage(Owner);
        ;
        ForEachUnitInTargetAreaRandom(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectBuildings AffectMinions AffectHeroes AffectTurrets ", default, default, 1, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + MonkTotalDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, default, default, default, default);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        this.ThisBubble = AddUnitPerceptionBubble(TeamID, 0 + CharVars.BubbleRadius, Owner, 9999, Owner, Nothing, true);
        TeamID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(TeamID, 400, Owner, 20, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(TeamID, 50, Owner, 20, Nothing, Nothing, true);
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(hit1, default, "blindMonk_Q_resonatingStrike_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(blood, default, "blindMonk_Q_resonatingStrike_tar_blood.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(this.slow, default, "blindMonk_Q_tar_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        ;
        ;
        OwnerPos = GetUnitPosition(Owner);
        TargetPos = SetVarInTable(this.TargetPos);
        SpellCast(Owner, Attacker, TargetPos, TargetPos, true, 1, ExtraSlots, 0 + Level, true, false, false, true, false, OwnerPos);
        ;
        ;
        ;
        ;
        ;
        TarPos = SetVarInTable(this.TarPos);
        Move(Target, TarPos, 1000, 5, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 800, FACE_MOVEMENT_DIRECTION);
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(PH, default, "blindMonk_Q_resonatingStrike_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(PH, default, "blindMonk_Q_resonatingStrike_tar_blood.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(PH, default, "blindmonk_resonatingstrike_tar_sound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, default, default, false, default, default, default);
        ;
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        ;
        MoveToUnit(Owner, Attacker, 0 + this.dashSpeed, 0, CANCEL_ORDER, 0, 2000, 0 + Distance, 0);
        SpellEffectCreate(this.SelfParticle, default, "blindMonk_Q_resonatingStrike_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        PlayAnimation("Spell1b", 0, Owner, true, false, true);
        this.WillRemove = SetVarInTable(false);
        ;
        BouncePos = GetRandomPointInAreaUnit(Owner, 100, 100);
        Move(Owner, BouncePos, 100, 10, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, FACE_MOVEMENT_DIRECTION);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(TeamID, 400, Owner, 20, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(TeamID, 50, Owner, 20, Nothing, Nothing, true);
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(hit1, default, "blindMonk_Q_resonatingStrike_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(blood, default, "blindMonk_Q_resonatingStrike_tar_blood.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.slow, default, "blindMonk_Q_tar_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "BlindMonkQTwo");
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ;
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "BlindMonkETwo");
        SetSlotSpellCooldownTimeVer2(0.1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ;
        SpellEffectCreate(this.turntostone, default, "blindMonk_W_ironWill_armor.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.ShieldAbsorb);
        ApplyAssistMarker(Attacker, Owner, 10);
        IncreaseShield(Owner, 0 + this.ShieldAbsorb, true, true);
        ;
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 400, Owner, 20, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(Team, 50, Owner, 20, Nothing, Nothing, true);
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "BlindMonkWTwo");
        SetSlotSpellCooldownTimeVer2(0, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
        ;
        this.InitialPercentReduction = SetVarInTable(this.PercentReduction);
        ApplyAssistMarker(Attacker, Owner, 10);
        this.Count = SetVarInTable(0);
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        Move(Owner, TargetPos, 0 + this.dashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + this.Distance, FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.SelfParticle, default, "blindMonk_W_self_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        PlayAnimation("Spell2", 0, Owner, true, false, true);
        this.WillRemove = SetVarInTable(false);
        ;
        PlayAnimation("Spell2b", 0, Owner, false, false, false);
        ;
        this.TotalHits = SetVarInTable(2);
        this.lastTooltip = SetVarInTable(0);
        ;
        ;
        ;
        IncHealth(Attacker, 0 + LifeStealToHeal, Attacker);
        SpellEffectCreate(default, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        SpellEffectCreate(arr, default, "InfiniteDuress_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        SpellEffectCreate(this.Part1, default, "wolfman_bloodscent_activate_speed.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Part3, default, "wolfman_bloodscent_activate_blood_buff.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Part2, default, "wolfman_bloodscent_activate_blood_buff.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Part4, default, "wolfman_bloodscent_activate_blood_buff_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, false, false, false, false, default, default);
        OwnerSkinID = GetSkinID(Owner);
        ;
        CasterID = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "wolfman_bloodscent_marker.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, default, default, default, default);
        this.BubbleStuff = AddUnitPerceptionBubble(CasterID, 1000, Owner, 120, Nothing, Nothing, false);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        SetBuffToolTipVar(1, 0 + TooltipBonus);
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, 471, 0);
        Beam2 = GetPointByUnitFacingOffset(Owner, 942, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 1413, 0);
        Other1 = SpawnMinion("hiu", "TestCube", "idle.lua", Beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, false, Owner, default);
        Other2 = SpawnMinion("hiu", "TestCube", "idle.lua", Beam2, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, false, Owner, default);
        Other3 = SpawnMinion("hiu", "TestCube", "idle.lua", Beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, false, Owner, default);
        LinkVisibility(Other1, Attacker);
        LinkVisibility(Other2, Attacker);
        LinkVisibility(Other3, Attacker);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        Beam1 = GetPointByUnitFacingOffset(Owner, 550, 0);
        Beam2 = GetPointByUnitFacingOffset(Owner, 1650, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 2750, 0);
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.particle2, default, "Lux_death.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, "C_BUFFBONE_GLB_CENTER_LOC", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle, default, "LuxMaliceCannon_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "top", default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, 1884, 0);
        Beam2 = GetPointByUnitFacingOffset(Owner, 2826, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 2475, 0);
        Other1 = SpawnMinion("hiu", "TestCube", "idle.lua", Beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, false, Owner, default);
        Other2 = SpawnMinion("hiu", "TestCube", "idle.lua", Beam2, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, false, Owner, default);
        Other3 = SpawnMinion("hiu", "TestCube", "idle.lua", Beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, false, Owner, default);
        LinkVisibility(Other1, Attacker);
        LinkVisibility(Other2, Attacker);
        LinkVisibility(Other3, Attacker);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellEffectCreate(this.particle1, default, "Luxdeathparticle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", Owner, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        this.1ce = SetVarInTable(0);
        TargetPos = SetVarInTable(CharVars.TargetPos);
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        TeamOfOwner = GetTeamID(default);
        this.BubbleID = AddPosPerceptionBubble(TeamOfOwner, 700, TargetPos, 6, Nothing, false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Part, a, "pantheon_grandskyfall_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, default, default, false, false, default, default);
        TargetPos = SetVarInTable(CharVars.TargetPos);
        SpellBuffAdd(Owner, Owner, "Pantheon_GS_Particle", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        TeamOfOwner = GetTeamID(default);
        TargetPos = SetVarInTable(CharVars.TargetPos);
        SpellEffectCreate(this.NewName, default, "pantheon_grandskyfall_tar_green.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle1, default, "pantheon_heartseeker_cas2.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_BUFFBONE_GLB_HAND_LOC", default, Target, default, default, false, default, default, false, true, default, default);
        SpellEffectCreate(this.KIRHand, default, "garen_damacianJustice_cas_instant.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.KIRHand, default, "garen_damacianJustice_cas_sword.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Target, default, default, false, default, default, false, false, default, default);
        ;
        ;
        this.ticksRemaining = SetVarInTable(2);
        ;
        CastPosition = SetVarInTable(this.CastPosition);
        sourcePosition = SetVarInTable(this.sourcePosition);
        SpellCast(Owner, Nothing, CastPosition, CastPosition, false, 0, ExtraSlots, 0 + Level, true, true, false, false, false, sourcePosition);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.Particle, default, "Taric_HammerInternal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "weapon", default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "taricgemstorm.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        NextBuffVars.DamageIncrease = SetVarInTable(DamageIncrease);
        ;
        NextBuffVars.AbilityPower = SetVarInTable(AbilityPower);
        ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "RadianceAura", 1, 1, 1.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
            ApplyAssistMarker(Attacker, Unit, 10);
        });
        this.damageThreshold = SetVarInTable(40);
        OverrideAnimation("Run", "Run2", Owner);
        ;
        ;
        ;
        ;
        ;
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "LuxLightstrikeToggle");
        TeamOfOwner = GetTeamID(default);
        Position = SetVarInTable(this.Position);
        SpellEffectCreate(this.Particle, default, "LuxLightstrike_mis.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 400, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, Position, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle1, this.Particle2, "LuxLightstrike_tar_green.troy", "LuxLightstrike_tar_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 400, 0, TEAM_UNKNOWN, Nothing, false, Nothing, "top", Position, Target, default, default, false, false, false, false, false, default, default);
        SealSpellSlot(2, SpellSlots, Attacker, false, SPELLBOOK_CHAMPION);
        this.BubbleID = AddPosPerceptionBubble(TeamOfOwner, 650, Position, 6, Nothing, false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Geeves1, default, "garen_descisiveStrike_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_2", default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.Geeves2, default, "garen_descisiveStrike_indicator_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_2", default, Owner, default, default, true, false, false, false, false, default, default);
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CancelAutoAttack(Owner, true);
        ;
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "LuxLightstrikeToggle");
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        IncreaseShield(Owner, 0 + this.DamageBlock, true, true);
        DebugSay(Owner, "Slash Buff On", default);
        ;
        TeamID = GetTeamID(default);
        ;
        SpellEffectCreate(this.AkaliStealth, default, "akali_twilight_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        ID = PushCharacterFade(Owner, 0.2, default, ID);
        ;
        ;
        this.WillRemove = SetVarInTable(false);
        ApplyAssistMarker(Attacker, Owner, 10);
        this.AegisCounter = SetVarInTable(0);
        ;
        this.CooldownBonus = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        OverrideAnimation("Run", "Spell3", Owner);
        SpellEffectCreate(this.Particle2, default, "garen_bladeStorm_cas_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID, default, "garen_weapon_glow_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, "BUFFBONE_WEAPON_3", default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        IncreaseShield(Owner, 0 + this.DamageBlock, true, true);
        SpellEffectCreate(this.Part, default, "garen_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        SpellEffectCreate(this.Particle, default, "garen_commandingPresence_unit_buf_self.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", default, Owner, default, default, true, default, default, false, false, default, default);
        SetBuffToolTipVar(1, 0 + this.TotalArmorAmount);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.Particle, default, "garen_commandingPresence_unit_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SetBuffToolTipVar(1, 0 + this.TotalArmorAmount);
        SpellBuffRemove(Owner, "GarenRecouperate1", Owner, 0);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Part, default, "garen_heal.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        SpellBuffRemove(Owner, "GarenRecouperateOn", Owner, 0);
        TeamID = GetTeamID(default);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(shatterz, default, "Shatter_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(shatterz, default, "BloodSlash.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.taric, default, "ShatterReady_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "armsmaster_empower_self_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Owner, "weapon", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle, default, "armsmaster_empower_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        SealSpellSlot(1, SpellSlots, Owner, true, default);
        ;
        ;
        SpellEffectCreate(this.Particle, default, "Empower_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "weaponstreak", default, Owner, default, default, false, default, default, false, default, default, default);
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        ;
        ;
        ;
        OverrideAutoAttack(2, ExtraSlots, Owner, 0 + Level, false);
        this.IsActive = SetVarInTable(false);
        ;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "Crowstorm_green_cas.troy", "Crowstorm_red_cas.troy", TeamOfOwner ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        SpellEffectCreate(default, default, "ConsecrationAura_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(default, default, "LifeAura.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        PlayAnimation("Death", 4, Owner, false, false, true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_CombatEnchancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Shred);
        TeamID = GetTeamID(default);
        SpellEffectCreate(PH, default, "akali_shadowDance_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(PH2, default, "irelia_gotasu_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        ;
        ;
        SpellEffectCreate(this.asdf, default, "nickoftime_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        ;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.ParticleID2, this.ParticleID, "TimeBomb_green.troy", "TimeBomb_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        this.TickDamage = SetVarInTable(3);
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        PlayAnimation("Spell4", 0, Owner, true, false, true);
        Move(Owner, TargetPos, 0 + this.dashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + this.Distance, FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.SelfParticle, default, "Ahri_SpiritRush_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_GROUND_LOC", default, Target, "BUFFBONE_GLB_GROUND_LOC", default, false, false, false, false, false, default, default);
        this.WillRemove = SetVarInTable(false);
        ;
        SetSlotSpellCooldownTimeVer2(0, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.activations = SetVarInTable(1);
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(this.Particle1, default, "Ahri_Charm_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, "head", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "Ahri_Charm_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, "l_hand", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle3, default, "Ahri_Charm_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, "r_hand", default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "AhriPassiveParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(this.Particle1, default, "Ahri_Orb.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        this.ParticleAlive = SetVarInTable(false);
        ;
        ;
        ;
        ;
        IncreaseShield(Owner, 0 + this.DamageBlock, true, true);
        ;
        ;
        OwnerTeamID = GetTeamID(default);
        ;
        ;
        ;
        PauseAnimation(Owner, true);
        ;
        ;
        ;
        ;
        ;
        ;
        OverrideAnimation("Run", "Spell4_Backstep", Attacker);
        OverrideAnimation("Idle1", "Spell4_Idleback", Attacker);
        OverrideAnimation("Idle2", "Spell4_Idleback", Attacker);
        OverrideAnimation("Idle3", "Spell4_Idleback", Attacker);
        OverrideAnimation("Idle4", "Spell4_Idleback", Attacker);
        OverrideAnimation("Spell2", "spell4_W", Attacker);
        OverrideAnimation("Spell1", "spell4_Q", Attacker);
        this.NumHitsRemaining = SetVarInTable(4);
        SpellEffectCreate(this.ChainPartID, default, "skarner_ult_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, false, Owner, "spine", default, Attacker, "tail_t", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ZParticle, default, "skarner_ult_tail_tip.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "tail_t", default, Attacker, "Bird_head", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.CParticle, default, "skarner_ult_tar_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, false, Owner, "spine", default, Attacker, "Bird_head", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.crystalineParticle, default, "skarner_ult_tar_04.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, false, Owner, "spine", default, Attacker, "Bird_head", default, false, false, false, false, false, default, default);
        this.VictimBubble = AddUnitPerceptionBubble(OwnerTeamID, 10, Owner, 2, Nothing, Owner, true);
        ;
        SpellEffectCreate(this.SandSwirl, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        Move(Owner, TargetPos, 0 + this.SlashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, default);
        PlayAnimation("Spell4", 0, Owner, true, false, default);
        SpellEffectCreate(this.SelfParticle, default, "UnstoppableForce_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        Attacker = SetBuffCasterUnit();
        TeamID = GetTeamID(default);
        SpellEffectCreate(TargetParticle, default, "UnstoppableForce_stun.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        Position = GetRandomPointInAreaUnit(Owner, 125, 75);
        Move(Owner, Position, 100, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, default);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.FrostTurrets, default, "heimerdinger_slowAura_self.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        this.willPop = SetVarInTable(false);
        ;
        ;
        ;
        this.CooldownBonus = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        CancelAutoAttack(Owner, true);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(poofin, default, "heimerdinger_turret_birth.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        ForNClosestUnitsInTargetArea(Attacker, Owner, 425, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectTurrets ", 1, true, default, (Iterator) =>
        {
            ;
            ;
        });
        ;
        Pos = GetRandomPointInAreaUnit(Owner, 400, 200);
        Other1 = CloneUnitPet(Attacker, "MordekaiserCOTGPetBuff", 0, Pos, 0, 0, false);
        ;
        SpellEffectCreate(this.SSSlow, default, "Global_Slow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ApplyDamage(Owner, Attacker, 0 + this.BaseDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.PetDamage);
        SetBuffToolTipVar(2, 0 + this.PetAP);
        this.Count = SetVarInTable(0);
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "mordekeiser_cotg_skin.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "mordekaiser_cotg_ring.troy", default, TeamID ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellBuffRemoveType(Owner, BUFF_CombatEnchancer);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Shred);
        ;
        ;
        ;
        PetDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        NextBuffVars.PetDamage = SetVarInTable(PetDamage);
        NextBuffVars.PetAP = SetVarInTable(PetAP);
        SpellBuffAdd(Attacker, Attacker, "MordekaiserCOTGSelf", 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "MordekaiserCOTGPetBuff", 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        this.lastAttackTime = GetGameTime();
        ApplyTaunt(Attacker, Owner, 250);
        this.retaunts = SetVarInTable(0);
        ;
        ;
        ;
        SpellEffectCreate(this.MordekaiserParticle, default, "mordekeiser_cotg_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        this.removeParticle = SetVarInTable(true);
        ;
        this.DoOnce = SetVarInTable(false);
        ApplyDamage(Owner, Attacker, 0 + this.DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0, 1, false, false, Attacker);
        this.lastAttackTime = GetGameTime();
        ApplyTaunt(Attacker, Owner, 25);
        this.retaunts = SetVarInTable(0);
        ApplyTaunt(Attacker, Owner, 25000);
        ApplyDamage(Owner, Attacker, 0, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Owner);
        this.lastAttackTime = GetGameTime();
        this.retaunts = SetVarInTable(0);
        ;
        StatMultiplier = SetVarInTable(VALUE_BY_LEVEL);
        MordDmg = GetTotalAttackDamage(Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.LandslideLHand, default, "Landslide_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.LandslideRHand, default, "Landslide_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Target, default, default, false, default, default, default, default, default, default);
        ;
        this.Count = SetVarInTable(0);
        ApplyDamage(Owner, Attacker, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Owner);
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.WillRemove = SetVarInTable(false);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        ;
        DamageVar = GetTotalAttackDamage(Owner);
        ;
        ;
        ArmorVar = GetArmor(Owner);
        ;
        ;
        MalphiteSkinID = GetSkinID(Owner);
        SpellEffectCreate(this.Sandroot, default, "Malphite_Enrage_glow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, false, false, false, false, default, default);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
        ;
        ;
        this.Count = SetVarInTable(0);
        ;
        ;
        SpellEffectCreate(this.SEPar, default, "Obduracy_off.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, "root", default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle1, default, "Skarner_Crystal_Slash_Activate_L.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Nothing, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "Skarner_Crystal_Slash_Activate_R.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Nothing, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(default, default, "mordakaiser_death_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, "chest", default, false, default, default, default, default, default, default);
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        SetBuffToolTipVar(1, 10);
        SetSpellToolTipVar(260, 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        ;
        SpellBuffRemove(Owner, "MalphiteShieldRemoval", Owner, default);
        IncreaseShield(Owner, 0 + this.ShieldHealth, true, true);
        ;
        this.BrushChecks = SetVarInTable(0);
        Caster = SetBuffCasterUnit();
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle1, default, "Skarner_Fracture_Tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        TeemoSkinID = GetSkinID(Owner);
        ;
        ;
        this.LastPosition = GetUnitPosition(Owner);
        ;
        ;
        this.Count = SetVarInTable(0);
        ApplyDamage(Owner, Attacker, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Owner);
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "mordakaiser_siphonOfDestruction_self.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(a, default, "mordakeiser_hallowedStrike_self_skin.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Owner, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.16, 1, false, false, Attacker);
        teamID = GetTeamID(default);
        this.bubbleID = AddPosPerceptionBubble(teamID, 400, Owner, 5, Nothing, false);
        PlayAnimation("Spell1", 0, Owner, false, true, false);
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        CharVars.Ticks = SetVarInTable(0);
        SpellEffectCreate(this.Particle2, this.Particle, "ReapTheWhirlwind_green_cas.troy", "ReapTheWhirlwind_red_cas.troy", TeamOfOwner ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 700, "AffectEnemies AffectFriends AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ;
        });
        ;
        ApplyDamage(Attacker, Owner, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
        teamID = GetTeamID(default);
        this.bubbleID = AddPosPerceptionBubble(teamID, 300, Owner, 3, Nothing, false);
        SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.LastPosition = GetUnitPosition(Owner);
        ;
        ;
        ;
        ;
        this.Activated = SetVarInTable(false);
        this.TeemoSkinID = GetSkinID(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.TotalArmorAmount);
        ApplyAssistMarker(Attacker, Owner, 10);
        IncreaseShield(Owner, 0 + this.TotalArmorAmount, true, true);
        AttackerSkinID = GetSkinID(Attacker);
        ;
        ;
        ;
        BouncePos = SetVarInTable(this.BouncePos);
        Move(Owner, BouncePos, 100, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, default);
        PlayAnimation("Spell3", 0, Owner, false, true, false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(part, default, "SowTheWind_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle, default, "SowTheWind_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, "head", default, false, default, default, default, default, default, default);
        ;
        this.SowCast = SetVarInTable(0);
        ;
        ;
        ;
        CastPos = GetUnitPosition(Owner);
        this.CastPos = SetVarInTable(CastPos);
        OwnerSkinID = GetSkinID(Owner);
        ;
        ;
        SetTargetingType(1, SpellSlots, default, TTYPE_Self, Owner);
        SpellBuffClear(Owner, "TeemoMoveQuickSpeed");
        TeemoSkinID = GetSkinID(Owner);
        this.CustomRun = SetVarInTable(false);
        ;
        ;
        ;
        ;
        ;
        ;
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Location, Owner);
        SetPARCostInc(Owner, 3, SpellSlots, -100, PAR_MANA);
        SpellBuffRemove(Owner, "IreliaIdleParticle", Owner, default);
        IreliaTeamID = GetTeamID(default);
        SpellEffectCreate(this.UltMagicParticle, default, "irelia_ult_magic_resist.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.Particle1, default, "Irelia_ult_dagger_active_04.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_DAGGER1", default, Target, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.Particle2, default, "Irelia_ult_dagger_active_04.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_DAGGER2", default, Target, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.Particle3, default, "Irelia_ult_dagger_active_04.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_DAGGER4", default, Target, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.Particle4, default, "Irelia_ult_dagger_active_04.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_DAGGER5", default, Target, default, default, false, default, default, false, default, default, default);
        ;
        IncreaseShield(Owner, 0 + this.DamageBlock, true, true);
        this.HasDealtDamage = SetVarInTable(false);
        ;
        SpellEffectCreate(this.TremorsFx, default, "Tremors_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectBuildings AffectMinions AffectHeroes AffectTurrets ", default, true, (Iterator) =>
        {
            ApplyDamage(Attacker, Unit, 0 + this.TremDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 0, false, false, Attacker);
        });
        this.ShurikenDamage = SetVarInTable(10);
        SetBuffToolTipVar(1, 0 + this.ShurikenDamage);
        this.LastHit = SetVarInTable(0);
        SpellEffectCreate(this.Particle, default, "shen_Teleport_target_v2.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, default, default, default, default, default, default);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        SetBuffToolTipVar(1, 0 + this.shieldHealth);
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Shieldz, default, "Shen_StandUnited_shield_v2.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        IncreaseShield(Owner, 0 + this.shieldHealth, true, true);
        ;
        ;
        ;
        ;
        ;
        this.CasterID = PushCharacterData("RammusPB", Owner, false);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.WillRemove = SetVarInTable(false);
        ;
        TeamID = GetTeamID(default);
        ;
        SpellEffectCreate(this.slow, default, "shen_life_tap_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        TeamID = GetTeamID(default);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, false);
        SpellEffectCreate(this.LeftHand, default, "shen_kiStrike_ready_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_hand", default, Owner, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(this.RightHand, default, "shen_kiStrike_ready_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_hand", default, Target, default, default, true, default, default, false, default, default, default);
        SetDodgePiercing(Owner, true);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.particleID, default, "ShenTeleport_v2.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, false, default, default, false, false, default, default);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        MoveAway(Owner, Attacker, 200, 10, 0 + Dist, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, default);
        ApplyRoot(Attacker, Owner, 0.5);
        ;
        ;
        ;
        ;
        ;
        ;
        TeemoSkinID = GetSkinID(Owner);
        ;
        ;
        ;
        ;
        ;
        this.DebuffDuration = SetVarInTable(5);
        SpellBuffAdd(Attacker, Owner, "TeemoMoveQuickDebuff", 1, 1, 0 + this.DebuffDuration, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        Move(Owner, TargetPos, 0 + this.dashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, POSTPONE_CURRENT_ORDER, 0 + this.Distance, FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.SelfParticle, default, "Shen_shadowdash_mis.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        StartTrackingCollisions(Owner, true);
        PlayAnimation("Dash", 0, Owner, true, false, true);
        this.ArmorAmount = GetArmor(Owner);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.asdf1, default, "Global_Taunt_multi_unit.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_HEAD_LOC", default, Owner, default, default, true, default, default, default, default, default, default);
        ;
        ;
        ;
        this.CasterID = PushCharacterData("RammusDBC", Owner, false);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "DefensiveBallCurlCancel");
        SpellEffectCreate(this.particle, default, "DefensiveBallCurl_buf", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SetSlotSpellCooldownTimeVer2(1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
        ;
        ;
        ApplyDamage(Attacker, Owner, 0 + this.DamagePerTickFirst, MAGIC_DAMAGE, DAMAGESOURCE_PERIODIC, 1, 0.14, 1, false, false, Attacker);
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        Move(Owner, TargetPos, 0 + this.dashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + this.Distance, FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.SelfParticle, default, "irelia_gotasu_dash_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, false, false, false, false, default, default);
        PlayAnimation("spell1", 0.5, Owner, false, true, true);
        this.WillRemove = SetVarInTable(false);
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(PH, default, "irelia_gotasu_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, default, default, default, default, default, default);
        OverrideAnimation("Attack1", "Attack1b", Owner);
        OverrideAnimation("Attack2", "Attack2b", Owner);
        OverrideAnimation("Crit", "Critb", Owner);
        OverrideAnimation("Idle1", "Idle1b", Owner);
        OverrideAnimation("Run", "Runb", Owner);
        IreliaTeamID = GetTeamID(default);
        SpellEffectCreate(this.IreliaHitenStyle1, default, "irelia_hitenStyle_passive.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.IreliaHitenStyle2, default, "irelia_hitenStlye_passive_glow.troy", default, IreliaTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, default, default, false, default, default, default, default, default, default);
        OverrideAnimation("Attack1", "Attack1c", Owner);
        OverrideAnimation("Attack2", "Attack2c", Owner);
        OverrideAnimation("Crit", "Critc", Owner);
        OverrideAnimation("Idle1", "Idle1c", Owner);
        OverrideAnimation("Run", "Runc", Owner);
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        TargetPos = SetVarInTable(this.TargetPos);
        SpellEffectCreate(varrr, default, "AlzaharNullZoneFlash.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Owner, default, default, true, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle1, this.Particle2, "AlzaharVoidPortal_flat_green.troy", "AlzaharVoidPortal_flat_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, default, default, false, false, default, default);
        ID = PushCharacterFade(Owner, 0.2, default, ID);
        ;
        ;
        this.teamID = GetTeamID(default);
        ForEachUnitInTargetArea(Owner, Owner, 1500, "AffectEnemies AffectMinions AffectHeroes ", "AlZaharVoidling", true, (Iterator) =>
        {
            ;
        });
        ID = PushCharacterFade(Owner, 0.2, default, ID);
        ;
        SetNotTargetableToTeam(Owner, true, false);
        ShowHealthBar(Owner, true);
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        IssueOrder(Owner, AI_HOLD, default, Owner);
        SpellEffectCreate(this.HymnAura, default, "SonaHymnofValor_aura.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        ;
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        OverrideAnimation("Idle1", "Dance", Owner);
        SpellBuffRemove(Owner, "SonaAriaOfPerseverance", Owner, 0);
        SpellBuffRemove(Owner, "SonaSongOfDiscord", Owner, 0);
        ;
        teamID = GetTeamID(default);
        SpellEffectCreate(this.particleID, default, "SonaPowerChordReady_violet.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        SpellBuffRemove(Owner, "SonaHymnofValorCheck", Owner, default);
        SpellBuffRemove(Owner, "SonaAriaofPerseveranceCheck", Owner, default);
        SetSpell(Owner, 2, ExtraSlots, SPELLBOOK_CHAMPION, "SonaSongofDiscordAttackUpgrade");
        OverrideAutoAttack(2, ExtraSlots, Owner, 1, false);
        SpellEffectCreate(this.SongAura, default, "SonaSongofDiscord_aura.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        this.CooldownBonus = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        ;
        ApplyDamage(Attacker, Owner, 0 + this.TotalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        this.lastTooltip = SetVarInTable(0);
        SpellEffectCreate(this.Part2, default, "SonaHymnofValorSound.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ;
        Level = SetVarInTable(this.Level);
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.asdf, default, "ManaLeach_tar2.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        ;
        ;
        SpellBuffRemove(Owner, "SonaHymnOfValor", Owner, 0);
        SpellBuffRemove(Owner, "SonaAriaOfPerseverance", Owner, 0);
        ;
        teamID = GetTeamID(default);
        SpellEffectCreate(this.particleID, default, "SonaPowerChordReady_blue.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        SpellBuffRemove(Owner, "SonaAriaofPerseveranceCheck", Owner, default);
        SpellBuffRemove(Owner, "SonaSongofDiscordCheck", Owner, default);
        SetSpell(Owner, 2, ExtraSlots, SPELLBOOK_CHAMPION, "SonaHymnofValorAttackUpgrade");
        OverrideAutoAttack(2, ExtraSlots, Owner, 1, false);
        ;
        ApplyDamage(Attacker, Target, 0 + this.DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.26, 0, false, false, Attacker);
        this.TicksRemaining = SetVarInTable(4);
        ;
        SpellEffectCreate(this.Part, default, "SonaSoundofDiscordSound", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ApplyDamage(Attacker, Owner, 0 + this.TotalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        TeamID = GetTeamID(default);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(this.asdf1, default, "RunePrison_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Part, default, "SonaAriaofPerserveranceSound.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(Particle, default, "voidflash.troy", default, TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle3, this.Particle2, "voidportal_green.troy", "voidportal_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        ;
        ;
        ;
        SpellEffectCreate(this.AriaAura, default, "SonaAriaofPer_aura.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffRemove(Owner, "SonaHymnOfValor", Owner, 0);
        SpellBuffRemove(Owner, "SonaSongOfDiscord", Owner, 0);
        ;
        teamID = GetTeamID(default);
        SpellEffectCreate(this.particleID, default, "SonaPowerChordReady_green.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellBuffRemove(Owner, "SonaHymnofValorCheck", Owner, 0);
        SpellBuffRemove(Owner, "SonaSongofDiscordCheck", Owner, 0);
        SetSpell(Owner, 2, ExtraSlots, SPELLBOOK_CHAMPION, "SonaAriaofPerseveranceUpgrade");
        OverrideAutoAttack(2, ExtraSlots, Owner, 1, false);
        ;
        ApplyDamage(Attacker, Owner, 0 + this.TotalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, false, Attacker);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, false);
        SetAutoAcquireTargets(Owner, false);
        SpellEffectCreate(this.Particle4, default, "irelia_ult_energy_ready.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_BACK_2", default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffRemove(Owner, "SonaAriaofPerseveranceSound", Owner, default);
        SpellBuffRemove(Owner, "SonaHymnofValorSound", Owner, default);
        SpellBuffRemove(Owner, "SonaSongofDiscordSound", Owner, default);
        ;
        ;
        SpellEffectCreate(this.b, default, "SonaPowerChord_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, false, default, default, default);
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + TotalBonus);
        ;
        BouncePos = GetRandomPointInAreaUnit(Owner, 100, 100);
        Move(Owner, BouncePos, 100, 10, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, FACE_MOVEMENT_DIRECTION);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        OverrideAutoAttack(2, ExtraSlots, Owner, 1, true);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        this.Timer = SetVarInTable(0);
        TeamID = GetTeamID(default);
        ;
        ;
        this.DoOnce = SetVarInTable(false);
        TeamID = GetTeamID(default);
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        SpellEffectCreate(this.Particle1, default, "monkey_king_crushingBlow_armor_debuff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        PlayAnimation("Spell4", 0, Owner, true, true, true);
        SpellEffectCreate(this.Particle2, default, "monkey_king_ult_spin.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID, default, "garen_weapon_glow_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, "BUFFBONE_WEAPON_3", default, false, false, false, false, false, default, default);
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        ;
        ;
        SpellEffectCreate(this.ParticleID, default, "olaf_viciousStrikes_weapon_glow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_3", default, Owner, "BUFFBONE_CSTM_WEAPON_2", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ParticleID, default, "olaf_viciousStrikes_weapon_glow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Target, false, Owner, "BUFFBONE_CSTM_WEAPON_7", default, Owner, "BUFFBONE_CSTM_WEAPON_4", default, false, default, default, default, default, default, default);
        ;
        ;
        SpellCast(Owner, Owner, default, default, false, 2, SpellSlots, 0 + 1, false, false, false, true, false, default);
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        PlayAnimation("Spell1", 0, Owner, true, true, true);
        Move(Owner, TargetPos, 0 + this.dashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + Distance, FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.SelfParticle, default, "monkeyKing_Q_self_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        this.WillRemove = SetVarInTable(false);
        ;
        ;
        ;
        ;
        SpellEffectCreate(varrr, default, "voidlingtransform.prt", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        BaseArmor = GetArmor(Owner);
        BaseDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        IncScaleSkinCoef(0.5, Owner);
        ;
        ;
        this.DefenseToAdd = SetVarInTable(0);
        SetBuffToolTipVar(1, 4);
        SpellEffectCreate(varrr, default, "alzaharvoidling_evo.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(default, default, "Alzahar_death.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(PH, default, "monkeyKing_Q_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, default, default, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.SelfParticle, default, "monkeyKing_Q_self_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        TargetPos = SetVarInTable(this.TargetPos);
        PlayAnimation("Spell1", 0, Owner, true, true, true);
        Move(Owner, TargetPos, 0 + this.dashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + Distance, FACE_MOVEMENT_DIRECTION);
        this.WillRemove = SetVarInTable(false);
        ;
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncHealth(Owner, 0 + this.HealAmount, Owner);
        SpellEffectCreate(HealVFX, default, "galio_bulwark_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
        TeamID = GetTeamID(default);
        OrientationPoint = GetPointByUnitFacingOffset(Owner, 10000, 0);
        SpellEffectCreate(this.WindVFXAlly, this.WindVFXEnemy, "galio_windTunnel_rune.troy", "galio_windTunnel_rune_team_red.troy", TeamID ?? TEAM_UNKNOWN, 240, 0, TEAM_UNKNOWN, Nothing, false, Nothing, "head", Owner, Owner, default, default, false, default, default, false, false, OrientationPoint, default);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        ;
        ;
        SetSpell(Owner, 0, ExtraSlots, SPELLBOOK_CHAMPION, "GalioRighteousGustMissile");
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + this.Level, true, true, false, false, false, default);
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        Caster = SetBuffCasterUnit();
        OwnerTeam = GetTeamID(default);
        SpellEffectCreate(this.b, this.c, "Viktor_ChaosStorm_green.troy", "Viktor_ChaosStorm_red.troy", OwnerTeam ?? TEAM_NEUTRAL, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        this.SoundClear = SetVarInTable(true);
        SpellEffectCreate(this.PassivePart, default, "xen_ziou_battleCry_passive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, default, default, false, default, default, false, default, default, default);
        ;
        SpellBuffAdd(Attacker, Target, "XenZhaoBattleCryPH", 1, 1, 0 + CDTimer, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.BattleCryPH, default, "xen_ziou_battleCry_cas_05.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.BattleCryPH, default, "xen_ziou_battleCry_cas_03.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.BattleCryPH, default, "xen_ziou_battleCry_cas_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_BUFFBONE_GLB_HAND_LOC", default, Owner, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(this.BattleCryPH, default, "xenZhiou_battleCry_active.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_BUFFBONE_GLB_HAND_LOC", default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.BattleCryPH, default, "xenZhiou_battleCry_active.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_BUFFBONE_GLB_HAND_LOC", default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.BattleCries, default, "xenZiou_battle_cry_weapon_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, "BUFFBONE_CSTM_WEAPON_4", default, false, default, default, false, default, default, default);
        Caster = SetBuffCasterUnit();
        SpellEffectCreate(this.Particle1, default, "Viktor_ChaosStorm_indicator.troy", default, TEAM_CASTER, 0, 0, TEAM_CASTER, Caster, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "Viktor_ChaosStorm_indicator_02.troy", default, TEAM_CASTER, 0, 0, TEAM_CASTER, Caster, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        CancelAutoAttack(Owner, true);
        SpellEffectCreate(this.asdf2, default, "xenZiou_ChainAttack_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.asdf1, default, "xenZiou_ChainAttack_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Owner, default, default, false, default, default, default, default, default, default);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        SpellEffectCreate(this.MRShield, default, "xenZiou_SelfShield_01_magic.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        BouncePos = GetRandomPointInAreaUnit(Owner, 80, 80);
        Move(Owner, BouncePos, 100, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 80, FACE_MOVEMENT_DIRECTION);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(this.asdf2, default, "xenZiou_ChainAttack_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.asdf1, default, "xenZiou_ChainAttack_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Owner, default, default, false, default, default, false, default, default, default);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        BouncePos = GetRandomPointInAreaUnit(Owner, 80, 80);
        Move(Owner, BouncePos, 90, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 80, default);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        CharVars.ManaToADD = SetVarInTable(0);
        CharVars.HealthToADD = SetVarInTable(0);
        OwnerLevel = GetLevel(Owner);
        ;
        SpellEffectCreate(this.asdf2, default, "xenZiou_ChainAttack_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.asdf1, default, "xenZiou_ChainAttack_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Owner, default, default, false, default, default, false, default, default, default);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        OverrideAnimation("Run", "Spell1", Owner);
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        SpellEffectCreate(this.a, default, "xenZiou_AudaciousCharge_self_trail_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        Move(Target, TargetPos, 3000, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + this.Distance, FACE_MOVEMENT_DIRECTION);
        ;
        ;
        XZSkinID = GetSkinID(Owner);
        ;
        ;
        ;
        this.BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        this.HitCount = SetVarInTable(0);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.AreaVFXAlly, this.AreaVFXEnemy, "galio_beguilingStatue_taunt_indicator_team_green.troy", "galio_beguilingStatue_taunt_indicator_team_red.troy", TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.ChannelVFX, default, "galio_talion_channel.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.TauntVFX, default, "galio_taunt_unit_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        CasterID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(CasterID, 1200, Owner, 60, Nothing, Nothing, false);
        this.TotalMR = GetSpellBlock(Owner);
        ;
        SetBuffToolTipVar(1, 6);
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 50, Target, 10, Nothing, Nothing, false);
        ;
        ;
        SetSlotSpellIcon(2, SpellSlots, SPELLBOOK_CHAMPION, Owner, 2);
        SpellEffectCreate(this.StaffIdleRED, default, "Viktorb_red.troy", default, OwnerTeam ?? TEAM_UNKNOWN, 200, 0, TEAM_NEUTRAL, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, "BUFFBONE_CSTM_WEAPON_1", default, false, false, false, false, false, default, default);
        this.HasDealtDamage = SetVarInTable(false);
        this.HasCreatedRing = SetVarInTable(false);
        ;
        SpellEffectCreate(this.CataclysmSound, default, "JarvanCataclysm_sound.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        ;
        ManaReduction = SetVarInTable(VALUE_BY_LEVEL);
        this.NewCd = SetVarInTable(VALUE_BY_LEVEL);
        SetPARCostInc(Owner, 3, SpellSlots, 0 + ManaReduction, PAR_MANA);
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Self, Owner);
        ShowHealthBar(Attacker, true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ManaReduction = SetVarInTable(VALUE_BY_LEVEL);
        this.NewCd = SetVarInTable(VALUE_BY_LEVEL);
        SetPARCostInc(Owner, 3, SpellSlots, 0 + ManaReduction, PAR_MANA);
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Self, Owner);
        ;
        ;
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "DeathsCaress");
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 4);
        ;
        ManaCostInc = SetVarInTable(VALUE_BY_LEVEL);
        SetPARCostInc(Owner, 1, SpellSlots, 0 + ManaCostInc, PAR_MANA);
        IncreaseShield(Owner, 0 + this.TotalArmorAmount, true, true);
        SpellEffectCreate(this.ParticleID, default, "ViktorEntropicBeam_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "Up_Hand", default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.a, default, "ViktorEntropicBeam_tar_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.hit, default, "ViktorEntropicBeam_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Nothing, default, LaserPos, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        CharVars.HPGain = SetVarInTable(0);
        this.lastTooltip = SetVarInTable(0);
        ;
        DebugSay(Owner, "applicator activatre", default);
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        teamID = GetTeamID(default);
        this.BubbleID = AddPosPerceptionBubble(teamID, 1000, TargetPos, 8, Nothing, false);
        ;
        ;
        ;
        ;
        OverrideAutoAttack(1, ExtraSlots, Owner, 1, false);
        SetSlotSpellIcon(0, SpellSlots, SPELLBOOK_CHAMPION, Owner, 2);
        OwnerTeam = GetTeamID(default);
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        this.willRemove = SetVarInTable(false);
        ;
        ;
        this.LastCrit = SetVarInTable(0);
        OverrideAnimation("Run", "Run3", Owner);
        Move(Owner, Attacker, 1400, 1, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 500, FACE_MOVEMENT_DIRECTION);
        ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.DragonStrikeSound, default, "JarvanDemacianStandard_flag_hit.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        SpellEffectCreate(this.Particle1, default, "JarvanDragonStrike_debuff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.HitParticle, default, "JarvanDragonStrike_hit.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        ;
        ;
        SpellEffectCreate(this.asdf, default, "JarvanDemacianStandard_shield.troy", default, TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.a, default, "olaf_axe_trigger.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.Particle, this.Particle1, "olaf_axe_totem_team_id_green.troy", "olaf_axe_totem_team_id_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 400, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        BouncePos = GetRandomPointInAreaUnit(Owner, 100, 50);
        Move(Owner, BouncePos, 140, 25, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, FACE_MOVEMENT_DIRECTION);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle1, "JarvanDemacianStandard_tar_green.troy", "JarvanDemacianStandard_tar_red.troy", TeamID ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.Count = SetVarInTable(0);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "JarvanDemacianStandard_buf_green.troy", "JarvanDemacianStandard_buf_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SetNotTargetableToTeam(Owner, false, true);
        SpellEffectCreate(this.Particle1, default, "JarvanGoldenAegis_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        ;
        SetBuffToolTipVar(1, 0 + this.Shield);
        IncreaseShield(Owner, 0 + this.Shield, true, true);
        this.APPERLEV = SetVarInTable(0);
        OwnerLevel = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.RavenID = PushCharacterData("SwainRaven", Owner, false);
        SpellEffectCreate(Particle, default, "swain_metamorph.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "swain_metamorph_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle3, default, "swain_demonForm_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        ;
        Count = SetVarInTable(0);
        MaxMissiles = SetVarInTable(3);
        ForEachUnitInTargetAreaRandom(Owner, Owner, 625, "AffectEnemies AffectHeroes ", default, true, 3, (Iterator) =>
        {
            Result = CanSeeTarget(Owner, Unit);
            ;
        });
        ForEachUnitInTargetAreaRandom(Owner, Owner, 625, "AffectEnemies AffectNeutral AffectMinions ", default, true, 3, (Iterator) =>
        {
            Result = CanSeeTarget(Owner, Unit);
            ;
        });
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "Viktor_Catalyst_green.troy", "Viktor_Catalyst_green.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, false, false, false, false, default, default);
        CasterID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(CasterID, 100, Owner, 4, Nothing, Nothing, false);
        OwnerID = GetTeamID(default);
        this.BubbleID2 = AddUnitPerceptionBubble(OwnerID, 100, Owner, 4, Nothing, Nothing, false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.BParticle, default, "swain_disintegrationBeam_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "head", default, Owner, "Bird_head", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.CParticle, default, "swain_disintegrationBeam_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "head", default, Owner, "Bird_head", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.DParticle, default, "swain_disintegrationBeam_beam_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Bird_head", default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ApplyDamage(Attacker, Owner, 0 + this.DamagePerHalfSecond, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.3, 1, false, false, Attacker);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        SpellEffectCreate(this.AuraParticle, default, "nassus_godofDeath_aura.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        DamageCap = SetVarInTable(this.DamageCap);
        DamagePerc = SetVarInTable(this.DamagePerc);
        ForEachUnitInTargetArea(Owner, Owner, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ;
            ;
            ;
            ;
            ;
            ApplyDamage(Attacker, Unit, 0 + HToDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            ;
            ;
        });
        SetBuffToolTipVar(1, 0 + this.CurrentDamageTotal);
        IncScaleSkinCoef(0.3, Owner);
        this.CasterID = PushCharacterData("SwainNoBird", Owner, false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.BParticle, default, "swain_disintegrationBeam_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "head", default, Owner, "Bird_head", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.CParticle, default, "swain_disintegrationBeam_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "head", default, Owner, "Bird_head", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.DParticle, default, "swain_disintegrationBeam_beam_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Bird_head", default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        PauseAnimation(Owner, true);
        Duration = GetBuffRemainingDuration(Owner, "ViktorGravitonFieldStun");
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        TeamOfOwner = GetTeamID(default);
        OwnerSkinID = GetSkinID(Owner);
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Owner, Attacker, 0 + this.DamagePerHalfSecond, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.3, 1, false, false, Owner);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "ViktorGravitonFieldAugment");
        ;
        ;
        ApplyDamage(Attacker, Owner, 0 + this.DamagePerHalfSecond, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0.3, 1, false, false, Attacker);
        CasterID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(CasterID, 1000, Owner, 40, Nothing, Nothing, true);
        ;
        ;
        ;
        ;
        ;
        this.IsDisabled = SetVarInTable(0);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle3, this.Particle4, "CardmasterTeleport_green.troy", "CardmasterTeleport_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SpellEffectCreate(this.TeleportParticle, default, "GateMarker.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SealSpellSlot(2, SpellSlots, Owner, false, default);
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(Sparks, default, "AnnieSparks.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        this.Frozen = SetVarInTable(0);
        this.removeParticle = SetVarInTable(1);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.a, default, "Cardmaster_stackready.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        ;
        SpellEffectCreate(this.EffectID, default, "Card_Yellow_Tag.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        ;
        this.BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellEffectCreate(this.ChargedBladeEffect, default, "Kassadin_Netherblade.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Target, default, default, false, false, false, false, false, default, default);
        ;
        AttackDamage = GetTotalAttackDamage(Attacker);
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ForEachUnitInTargetArea(Attacker, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ;
            NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
            NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
            SpellBuffAdd(Attacker, Unit, "CardmasterSlow", 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
        });
        this.AttackSpeedBoost = SetVarInTable(0);
        this.hasDealtDamage = SetVarInTable(false);
        ;
        ;
        ;
        this.AttackSpeedBoost = SetVarInTable(0);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.SwainTormentEffect, default, "swain_torment_tar.troy", default, TEAM_UNKNOWN, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(this.SwainDoTEffect, default, "swain_torment_marker.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(this.SwainDoTEffect2, default, "swain_torment_dot.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        this.DamageTaken = SetVarInTable(0);
        ;
        SpellEffectCreate(this.EffectID, default, "Card_Red_Tag.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellEffectCreate(this.ParticleID, default, "nassus_siphonStrike_beam_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "weapon_b4", default, Owner, "weapon_b1", default, false, false, false, false, false, default, default);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.c, default, "nassus_spiritFire_afterburn.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Boom2, this.Boom, "nassus_spiritFire_tar_green.troy", "nassus_spiritFire_tar_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, false, false, false, false, default, default);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.ArmorReduction = SetVarInTable(this.ArmorReduction);
        ForEachUnitInTargetArea(Attacker, TargetPos, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Iterator) =>
        {
            ApplyDamage(Attacker, Unit, 0 + this.InitialDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 0, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, "SpiritFireArmorReduction", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Shred, 0, true, false, false, default);
        });
        this.Count = SetVarInTable(0);
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        ;
        SpellEffectCreate(this.RootParticleEffect2, default, "SwainShadowGraspRootTemp.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.RootParticleEffect, default, "swain_shadowGrasp_magic.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        SpellEffectCreate(a, default, "nassus_spiritFire_warning.troy", default, TeamID ?? TEAM_UNKNOWN, 100, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, TargetPos, Target, default, default, true, false, false, false, false, default, default);
        this.BubbleID = AddPosPerceptionBubble(TeamID, 200, TargetPos, 2.6, Nothing, false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.GroundParticleEffect, this.GroundParticleEffect2, "Swain_shadowGrasp_warning_green.troy", "Swain_shadowGrasp_warning_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.a, default, "swain_shadowGrasp_transform.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        this.manaRegen = SetVarInTable(10);
        SetBuffToolTipVar(1, 0 + this.manaRegen);
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        this.Duration = GetBuffRemainingDuration(Target, "Wither");
        ;
        this.LastLifesteal = SetVarInTable(0);
        this.lastTooltip = SetVarInTable(0);
        ;
        ;
        SpellEffectCreate(this.Particle, default, "twitch_poison_counter_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, false, false, false, false, default, default);
        ;
        ;
        this.lastTooltip = SetVarInTable(0);
        ;
        ;
        ;
        SpellBuffAdd(Attacker, Target, "SadismHeal", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.lastTooltip = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        MoveAway(Owner, Attacker, 1500, 5, 5 + Distance, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        SpellEffectCreate(this.slow, default, "Global_Slow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, false, false, default, default);
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        ;
        Duration = GetBuffRemainingDuration(Owner, "OnTheHunt");
        ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "OnTheHuntAuraBuff", 1, 1, 0 + Duration, InstanceVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        ;
        ;
        OverrideAutoAttack(1, ExtraSlots, Owner, 1, true);
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamID = GetTeamID(default);
        ;
        SpellEffectCreate(this.a, default, "tristana_rocketJump_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, true, false, false, false, false, default, default);
        OwnerSkinID = GetSkinID(Owner);
        PlayAnimation("Spell2", 0, Owner, false, false, false);
        ;
        ;
        DamageToDeal = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyDamage(Attacker, Unit, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
        });
        ;
        ;
        ;
        OverrideAutoAttack(0, ExtraSlots, Owner, 0 + Level, false);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CancelAutoAttack(Owner, true);
        ;
        ;
        this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
        ;
        ;
        SetPARCostInc(Owner, 0, SpellSlots, -60, PAR_MANA);
        ;
        ;
        ;
        ;
        ID = PushCharacterFade(Owner, 0.2, default, ID);
        this.WillFade = SetVarInTable(false);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        ;
        SpellEffectCreate(this.DeathLotus, default, "katarinaDeathLotus_indicator_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        BrandSkinID = GetSkinID(Attacker);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        ;
        SpellEffectCreate(this.RootParticleEffect2, default, "SwainShadowGraspRootTemp.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.RootParticleEffect, default, "swain_shadowGrasp_magic.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        BrandSkinID = GetSkinID(Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        ForEachUnitInTargetArea(Attacker, Owner, 150, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        SetDodgePiercing(Owner, true);
        ForEachUnitInTargetArea(Attacker, Owner, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.GroundParticleEffect, this.GroundParticleEffect2, "BrandPOF_tar_green.troy", "BrandPOF_tar_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        BrandSkinID = GetSkinID(Attacker);
        ;
        ;
        this.HPMod = SetVarInTable(0);
        this.APMod = SetVarInTable(0);
        TeamID = GetTeamID(default);
        ;
        OverrideAutoAttack(1, ExtraSlots, Owner, 0 + Level, true);
        SpellEffectCreate(this.asdf1, default, "kennen_ds_proc.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_hand", default, Owner, default, default, false, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.GlobeOne, default, "kennen_mos1.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(default, default, "Vladdeath.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "kennen_ss_aoe_green.troy", "kennen_ss_aoe_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, Owner, Owner, default, Owner, false, default, default, false, false, default, default);
        ;
        SpellEffectCreate(this.ar, default, "kennen_lr_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        this.MoveSpeedMod = SetVarInTable(1);
        this.DefenseBonus = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        this.LitRush = PushCharacterFade(Owner, 0, default, this.LitRush);
        NextBuffVars.DefenseBonus = SetVarInTable(this.DefenseBonus);
        SpellBuffAdd(Owner, Owner, "KennenLightningRushBuff", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        TeamID = GetTeamID(default);
        this.DoOnce = SetVarInTable(false);
        Level = GetLevel(Owner);
        ;
        DoOnce = SetVarInTable(false);
        ;
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        this.VladSkinID = GetSkinID(Caster);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        this.ID = PushCharacterFade(Owner, 0.5, default, this.ID);
        ;
        ;
        ;
        this.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SpellEffectCreate(default, default, "VladDeath.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_Waist", default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.KIRHand, default, "katarina_killerInstinct_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.KILHand, default, "katarina_killerInstinct_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Target, default, default, false, default, default, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.ID = PushCharacterFade(Owner, 0, default, this.ID);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "VladSanguinePool_buf.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 2.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Idle1down", 2.25, Owner, false, true, true);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        this.HasteBoost = SetVarInTable(0.375);
        SpellEffectCreate(this.temp, default, "Vlad_SaguinePool_Skin_Swap.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(Temp, default, "exile_W_tar_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        ;
        SpellEffectCreate(Temp, Temp2, "exile_ult_mis_tar_minion.troy ", "exile_ult_mis_tar_minion.troy ", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        ;
        this.BonusDmgPerc = SetVarInTable(0.08);
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + DmgMultTooltip);
        ;
        ;
        ;
        ;
        ;
        CasterID = GetTeamID(default);
        SpellEffectCreate(this.Particle2, this.Particle, "akali_smoke_bomb_tar_team_green.troy", "akali_smoke_bomb_tar_team_red.troy", CasterID ?? TEAM_UNKNOWN, 250, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "RivenCounterDash");
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.AkaliStealth, default, "akali_twilight_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, default, default, default, default);
        ID = PushCharacterFade(Owner, 0.2, default, ID);
        ;
        ;
        this.WillRemove = SetVarInTable(false);
        ;
        this.MoveSpeedBuff = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        MoveAway(Owner, Attacker, 200, 10, 0 + Dist, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 100, FACE_MOVEMENT_DIRECTION);
        ;
        ;
        ;
        ;
        this.ArmorIncrease = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SpellEffectCreate(this.a, default, "akali_markOftheAssasin_marker_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.b, default, "akali_markOftheAssasin_marker_tar_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.DoOnce = SetVarInTable(true);
        SpellEffectCreate(this.Temp, default, "RivenSwordBlue.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "weapon", default, Owner, default, default, false, default, default, false, false, default, default);
        TotalAD = GetTotalAttackDamage(Owner);
        ;
        this.BonusAD = SetVarInTable(BonusAD);
        ;
        ;
        OverrideAnimation("Attack1", "Attack1_ult", Owner);
        OverrideAnimation("Attack2", "Attack2_ult", Owner);
        OverrideAnimation("Attack3", "Attack3_ult", Owner);
        OverrideAnimation("Crit", "Crit_ult", Owner);
        OverrideAnimation("Idle1", "Idle1_ult", Owner);
        OverrideAnimation("Run", "Run_ult", Owner);
        OverrideAnimation("Spell1a", "Spell1a_ult", Owner);
        OverrideAnimation("Spell1b", "Spell1b_ult", Owner);
        OverrideAnimation("Spell1c", "Spell1c_ult", Owner);
        OverrideAnimation("Spell2", "Spell2_ult", Owner);
        OverrideAnimation("Spell3", "Spell3_ult", Owner);
        AttackDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        SetSpellToolTipVar(0 + QAttackDamage, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ;
        SetSpellToolTipVar(0 + RAttackDamage, 2, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ;
        SetSpellToolTipVar(0 + EAttackDamage, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ;
        SetSpellToolTipVar(0 + WAttackDamage, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SpellEffectCreate(this.Temp2, default, "exile_ult_blade_swap_base.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_2", default, Owner, "BUFFBONE_GLB_WEAPON_2", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Temp3, default, "exile_ult_attack_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_hand", default, Owner, "BUFFBONE_GLB_WEAPON_2", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Temp4, this.Temp, "exile_ult_attack_buf.troy", "RivenBladePiece", TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_hand", default, Owner, "BUFFBONE_GLB_WEAPON_2", default, false, false, false, false, false, default, default);
        ;
        SetSpellToolTipVar(0 + RAttackDamage, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SpellBuffAdd(Owner, Owner, "RivenWindSlashReady", 1, 1, 15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SetVoiceOverride("Ult", Owner);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "RivenIzunaBlade");
        SetSlotSpellCooldownTimeVer2(0.5, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        ;
        this.MovementSpeed = SetVarInTable(VALUE_BY_LEVEL);
        this.AttackSpeed = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        PlayAnimation("Spell4", 0, Owner, true, false, true);
        Move(Owner, TargetPos, 0 + this.dashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + this.Distance, FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.SelfParticle, default, "akali_shadowDance_mis.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        this.WillRemove = SetVarInTable(false);
        ;
        ;
        this.BaseVampPercent = SetVarInTable(0.08);
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.VampPercentTooltip);
        TeamID = GetTeamID(default);
        ;
        ;
        this.WillFade = SetVarInTable(true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "ExpirationTimer", 1, 1, 12, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        CastPosition = SetVarInTable(this.CastPosition);
        SpellEffectCreate(this.Particle, this.Particle2, "pirate_cannonBarrage_aoe_indicator_green.troy", "pirate_cannonBarrage_aoe_indicator_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, CastPosition, Target, default, default, false, default, default, false, false, default, default);
        this.BubbleID = AddPosPerceptionBubble(TeamOfOwner, 650, CastPosition, 8, Nothing, false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(PH, default, "akali_shadowDance_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, TargetPos, Owner, default, default, true, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.Particle, default, default, default, default, default, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, default, default, default, default, default, default, default);
        SpellEffectCreate(HealParticle, default, "akali_shadowSwipe_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        ;
        IncreaseShield(Owner, 0 + this.DamageBlock, true, true);
        ;
        ;
        OwnerVar = GetTeamID(default);
        SpellEffectCreate(a, default, "exile_Q_tar_03.troy", default, OwnerVar ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(a, default, "exile_Q_tar_04.troy", default, OwnerVar ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 1);
        ;
        ;
        ;
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Self, Owner);
        TargetPos = SetVarInTable(this.TargetPos);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "cryo_storm_green_team.troy", "cryo_storm_red_team.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Attacker, TargetPos, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyDamage(Attacker, Unit, 0 + this.DamagePerLevel, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.125, 1, false, false, Attacker);
            NextBuffVars.AttackSpeedMod = SetVarInTable(-0.2);
            NextBuffVars.MovementSpeedMod = SetVarInTable(-0.2);
            SpellBuffAdd(Attacker, Unit, "Chilled", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        ;
        ;
        SpellEffectCreate(this.AmbientParticle, default, "cryo_storm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "RivenTriCleaveBuffer");
        SetSlotSpellCooldownTimeVer2(0.1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ;
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CancelAutoAttack(Owner, false);
        AttackDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        this.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        this.TotalDamage = SetVarInTable(TotalDamage);
        ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffClear(Unit, "RivenTriCleaveDamageDebuff");
        });
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "RivenTriCleaveBuffer");
        SetSlotSpellCooldownTimeVer2(0.1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ;
        BouncePos = GetRandomPointInAreaUnit(Owner, 80, 80);
        Move(Owner, BouncePos, 90, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 80, default);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamID = GetTeamID(default);
        SpellEffectCreate(asf, default, "Powerfist_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Target, default, default, true, default, default, default, default, default, default);
        ;
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        OverrideAutoAttack(1, ExtraSlots, Owner, 1, true);
        LandPos = GetUnitPosition(Attacker);
        ;
        ;
        ;
        Move(Owner, LandPos, 1800, 5, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        OwnerVar = GetTeamID(default);
        SpellEffectCreate(a, default, "exile_Q_tar_01.troy", default, OwnerVar ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(a, default, "exile_Q_tar_02.troy", default, OwnerVar ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        ;
        ;
        SetBuffToolTipVar(1, 0 + TotalAttackSpeed);
        ;
        this.lastTooltip = SetVarInTable(0);
        ;
        ;
        this.BlitzcrankID = GetSkinID(Owner);
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + Count);
        SetBuffToolTipVar(1, 5);
        SetBuffToolTipVar(3, 3);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.asdf1, default, "SteamGolemShield.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        IncreaseShield(Owner, 0 + this.ManaShield, true, true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 100, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes ", default, false, (Iterator) =>
        {
            ;
            ;
            ;
            ;
            ;
            NextBuffVars.TargetPos = SetVarInTable(TargetPos);
            ;
            ;
        });
        SetTargetingType(0, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Self, Owner);
        this.MissileAlive = SetVarInTable(0);
        this.FlashMissileId = SetVarInTable(0);
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        Move(Owner, TargetPos, 600, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, KEEP_CURRENT_FACING);
        ApplyAssistMarker(Attacker, Owner, 10);
        this.CasterID = PushCharacterData("Udyr", Owner, false);
        OverrideAutoAttack(3, ExtraSlots, Owner, 1, true);
        OverrideAnimation("Run", "Run2", Owner);
        OverrideAnimation("Idle1", "Idle2", Owner);
        ;
        this.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellEffectCreate(this.bearparticle, default, "PrimalCharge.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        PlayAnimation("Spell3", 0, Owner, true, false, true);
        StartTrackingCollisions(Owner, true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        ;
        ;
        Move(Owner, TargetPos, 0 + this.DashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + this.Distance, FACE_MOVEMENT_DIRECTION);
        this.HitUnit = SetVarInTable(false);
        this.RageBonus = SetVarInTable(false);
        ;
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ForEachUnitInTargetArea(Owner, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", false, (Iterator) =>
        {
            ShouldHit = SetVarInTable(true);
            Visible = CanSeeTarget(Owner, Unit);
            ;
            this.HitUnit = SetVarInTable(true);
            ;
            ;
            ;
            SpellBuffAdd(Owner, Unit, "RenektonTargetSliced", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ;
            ;
            ;
            ;
            ;
        });
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "RenektonDice");
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.a, default, "shyvana_flameBreath_dragon_burn.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.b, default, "shyvana_flameBreath_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.c, default, "shyvana_flameBreath_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        Position = SetVarInTable(this.Position);
        Move(Owner, Position, 0 + this.Speed, 0 + this.Gravity, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + IdealDistance, FACE_MOVEMENT_DIRECTION);
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(TargetParticle, default, "shyvana_ult_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        ;
        ;
        this.HasDealtDamage = SetVarInTable(false);
        this.HasCreatedRing = SetVarInTable(false);
        ;
        TeamID = GetTeamID(default);
        PlayAnimation("Spell4", 0, Owner, true, false, true);
        SpellEffectCreate(this.SelfParticle, default, "shyvana_R_fire_skin.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle2, default, "shyvana_ult_cast_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle11, default, "shyvana_ult_cast_02_firefill.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_forearm", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle12, default, "shyvana_ult_cast_02_firefill.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_forearm", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle3, default, "shyvana_ult_cast_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle4, default, "shyvana_ult_cast_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_shoulder", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle5, default, "shyvana_ult_cast_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_shoulder", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle6, default, "shyvana_ult_cast_02_arm.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_forearm", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle7, default, "shyvana_ult_cast_02_arm.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_forearm", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle8, default, "shyvana_ult_cast_02_tail.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "Tail_g", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle9, default, "shyvana_ult_cast_02_hand.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_hand", default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.SelfParticle10, default, "shyvana_ult_cast_02_hand.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_hand", default, Target, default, default, true, false, false, false, false, default, default);
        this.DoOnce = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        ;
        teamID = GetTeamID(default);
        SpellEffectCreate(a, default, "Incinerate_cas.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "top", default, Target, default, default, true, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        PlayAnimation("Spell3", 0, Owner, true, false, true);
        StartTrackingCollisions(Owner, true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        ;
        ;
        Move(Owner, TargetPos, 0 + this.DashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + this.Distance, FACE_MOVEMENT_DIRECTION);
        this.HitUnit = SetVarInTable(false);
        this.RageBonus = SetVarInTable(false);
        ;
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ForEachUnitInTargetArea(Owner, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", false, (Iterator) =>
        {
            ShouldHit = SetVarInTable(true);
            Visible = CanSeeTarget(Owner, Unit);
            ;
            this.HitUnit = SetVarInTable(true);
            ;
            ;
            ;
            SpellBuffAdd(Owner, Unit, "RenektonTargetSliced", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ;
            ;
            ;
            ;
            ;
        });
        this.CasterID = PushCharacterData("ShyvanaDragon", Owner, false);
        ;
        ;
        ;
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "ShyvanaDoubleAttackDragon");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "ShyvanaImmolateDragon");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown2, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "ShyvanaFireballDragon2");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown3, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellBuffAdd(Owner, Owner, "ShyvanaDragonScales", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.a, default, "shyvana_flameBreath_dragon_burn.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.b, default, "shyvana_flameBreath_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.c, default, "shyvana_flameBreath_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellEffectCreate(default, default, "RenektonDominus_transform", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        IncScaleSkinCoef(0.2, Owner);
        ;
        ;
        ;
        ;
        this.BonusSpeed = SetVarInTable(0);
        ForEachUnitInTargetArea(Owner, Owner, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyDamage(Owner, Unit, 0 + this.BurnDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Owner);
        });
        OwnerVar = GetTeamID(default);
        SpellEffectCreate(a, default, "RenektonSliceDice_tar.troy", default, OwnerVar ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        PlayAnimation("Crit", 0.5, Owner, false, false, default);
        ;
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        OwnerVar = GetTeamID(default);
        SpellEffectCreate(a, default, "Renekton_Weapon_CoolOff.troy", default, OwnerVar ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, "head", default, Owner, default, default, true, default, default, default, default, default, default);
        BouncePos = GetRandomPointInAreaUnit(Owner, 80, 80);
        Move(Owner, BouncePos, 90, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 80, default);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        PlayAnimation("Spell4", 0, Owner, false, false, false);
        SpellBuffAdd(Owner, Owner, "EvelynnUnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CancelAutoAttack(Owner, true);
        ;
        this.Swung = SetVarInTable(false);
        ;
        CharVars.DoOnce = SetVarInTable(false);
        Caster = SetBuffCasterUnit();
        ApplyDamage(Caster, Owner, 0 + this.TickDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0, 1, false, false, Caster);
        ;
        ;
        this.DrainCount = SetVarInTable(0);
        this.DrainAmount = SetVarInTable(0);
        SpellEffectCreate(this.a, default, "UdyrBuff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        ;
        ;
        TeamID = GetTeamID(default);
        CurPos = GetPointByUnitFacingOffset(Owner, 25, 180);
        NextBuffVars.DamagePerTick = SetVarInTable(this.DamagePerTick);
        Other3 = SpawnMinion("AcidTrail", "TestCube", "idle.lua", CurPos, TeamID ?? TEAM_CASTER, true, false, false, true, false, true, 0, false, true, Owner, default);
        SpellBuffAdd(Owner, Other3, "ShyvanaIDApplicator", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
        this.LastPosition = SetVarInTable(CurPos);
        ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.a, default, "shyvana_scorchedEarth_dragon_01_trail.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ApplyDamage(Attacker, Owner, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0 + VALUE_BY_LEVEL, 0, 1, false, false, Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyDamage(Attacker, Unit, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            TeamID = GetTeamID(default);
            SpellEffectCreate(a, default, "shyvana_scorchedEarth_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
        });
        ;
        ;
        ;
        ;
        ;
        ID = PushCharacterFade(Owner, 0.2, default, ID);
        this.WillFade = SetVarInTable(false);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Owner, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        this.CasterID = PushCharacterData("UdyrPhoenix", Owner, false);
        SpellEffectCreate(this.phoenix, default, "phoenixpelt.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, default, default, default, default);
        CharVars.Count = SetVarInTable(0);
        OverrideAutoAttack(4, ExtraSlots, Owner, 1, true);
        ;
        this.AbilityPowerInc = SetVarInTable(VALUE_BY_LEVEL);
        this.AttackDamageInc = SetVarInTable(VALUE_BY_LEVEL);
        SetBuffToolTipVar(1, 0 + this.AbilityPowerInc);
        SetBuffToolTipVar(2, 0 + this.AttackDamageInc);
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        OverrideAutoAttack(3, ExtraSlots, Owner, 1, true);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        ;
        ;
        this.TeamID = GetTeamID(default);
        this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
        ;
        SetPARCostInc(Owner, 1, SpellSlots, -60, PAR_MANA);
        SpellEffectCreate(this.RHand, default, "Renekton_Rage_State.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_Hand", default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.LHand, default, "Renekton_Rage_State.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_Hand", default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ApplyDamage(Attacker, Owner, 0 + BaseAttackDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 0 + VALUE_BY_LEVEL, 0, 1, false, false, Attacker);
        ;
        Level = GetLevel(Owner);
        this.WillRemove = SetVarInTable(false);
        RebirthArmorMod = SetVarInTable(VALUE_BY_LEVEL);
        SetBuffToolTipVar(1, 0 + RebirthArmorMod);
        TeamID = GetTeamID(default);
        this.OneFrame = SetVarInTable(true);
        ;
        ;
        ;
        ;
        ;
        this.SeaHorseID = PushCharacterData("AniviaEgg", Owner, false);
        IncHealth(Owner, 10000, Owner);
        SpellEffectCreate(this.EggTimer, default, "EggTimer.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        ;
        ;
        ;
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SetBuffToolTipVar(1, -40);
        this.CasterID = PushCharacterData("UdyrTurtle", Owner, false);
        SpellEffectCreate(this.turtle, default, "turtlepelt.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Turtleparticle, default, "TurtleStance.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        OverrideAutoAttack(2, ExtraSlots, Owner, 1, true);
        this.CasterID = PushCharacterData("UdyrTiger", Owner, false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.tiger, default, "tigerpelt.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Owner, default, default, true, default, default, false, false, default, default);
        OverrideAutoAttack(1, ExtraSlots, Owner, 1, true);
        ;
        ;
        SpellEffectCreate(this.Turtleparticle, default, "TurtleStance.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(this.TurtleShield, default, "TurtleStance_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        IncreaseShield(Owner, 0 + this.ShieldAmount, true, true);
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.lhand, default, "Udyr_Tiger_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_Finger", default, Owner, default, default, true, default, default, false, false, default, default);
        SpellEffectCreate(this.rhand, default, "Udyr_Tiger_buf_R.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_Finger", default, Owner, default, default, true, default, default, false, false, default, default);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        IncreaseShield(Owner, 0 + this.ShieldHealth, true, false);
        ;
        ;
        ;
        IncHealth(Owner, 0 + this.HealthTick, Owner);
        SpellEffectCreate(arr, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        this.VampPercent = SetVarInTable(0.1);
        ;
        SetBuffToolTipVar(1, 0 + TooltipAmount);
        ;
        ;
        this.TickNumber = SetVarInTable(1);
        SpellEffectCreate(arr, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        TargetPos = SetVarInTable(this.TargetPos);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.MRminus = SetVarInTable(this.MRminus);
        SpellEffectCreate(this.Particle2, this.Particle, "TormentedSoil_green_tar.troy", "TormentedSoil_red_tar.troy", TeamOfOwner ?? TEAM_UNKNOWN, 280, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, false, false, false, false, default, default);
        ForEachUnitInTargetArea(Attacker, TargetPos, 280, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Iterator) =>
        {
            ApplyDamage(Attacker, Unit, 0 + this.DamagePerTick, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, "TormentedSoilDebuff", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
            SpellEffectCreate(hi1, default, "FireFeet_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "L_foot", default, Unit, default, default, false, false, false, false, false, default, default);
            SpellEffectCreate(hi2, default, "FireFeet_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "R_foot", default, Unit, default, default, false, false, false, false, false, default, default);
        });
        ;
        ;
        ;
        ;
        ;
        this.AlphaStrikeLaunched = SetVarInTable(false);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(this.glowblade, default, "yiglowblade.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "weaponstreak", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellBuffRemove(Owner, "MasterYiWujuDeactivated", Owner, default);
        ;
        ;
        ;
        SpellEffectCreate(this.ParticleID, default, "SoulShackle_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "spine", default, Owner, "spine", default, false, default, default, false, false, default, default);
        this.ActivateTime = GetGameTime();
        Say(Owner, "game_lua_DoubleStrike", default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "trundle_PlagueBlock_green.troy", "trundle_PlagueBlock_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Nothing, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Attacker, Owner, 180, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectHeroes ", "GlobalWallPush", false, (Iterator) =>
        {
            ApplyAssistMarker(Attacker, Unit, 10);
            offsetAngle = GetOffsetAngle(Owner, Unit);
            TargetPos = GetPointByUnitFacingOffset(Owner, 200, 0 + offsetAngle);
            NextBuffVars.TargetPos = SetVarInTable(TargetPos);
            SpellBuffAdd(Attacker, Unit, "GlobalWallPush", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ;
        });
        ;
        MoveAway(Owner, Attacker, 750, 0, 0 + this.TrueMove, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + this.TrueMove, default);
        ;
        CasterTeam = GetTeamID(default);
        SpellEffectCreate(Temp, default, "OrianaIzuna_tar.troy", default, CasterTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        ApplyDamage(Attacker, Owner, 0 + this.TotalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.Landed = SetVarInTable(false);
        ;
        ;
        ;
        ;
        this.CougarID = PushCharacterData("Nidalee_Cougar", Owner, true);
        SpellEffectCreate(Particle, default, "nidalee_transform.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        ;
        ;
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.Landed = SetVarInTable(false);
        ;
        ;
        ;
        ;
        this.CougarID = PushCharacterData("Nidalee_Cougar", Owner, true);
        SpellEffectCreate(Particle, default, "nidalee_transform.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        PlayAnimation("Spell3b", 0.5, Owner, false, true, false);
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        this.TicksLeft = SetVarInTable(8);
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, true);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
        CancelAutoAttack(Owner, true);
        ;
        CharVars.BallPosition = SetVarInTable(this.MyPosition);
        ;
        Level = SetVarInTable(this.Level);
        CasterTeam = GetTeamID(default);
        SpellEffectCreate(Temp, default, "Oriana_ts_tar.troy", default, CasterTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        NextBuffVars.Level = SetVarInTable(this.Level);
        SpellBuffAdd(Attacker, Target, "OrianaShred", 5, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        this.TicksLeft = SetVarInTable(8);
        CurrentPos = GetUnitPosition(Owner);
        Caster = SetBuffCasterUnit();
        this.Caster = SetBuffCasterUnit();
        this.GhostSpawned = SetVarInTable(false);
        this.MinionBall = SetVarInTable(false);
        SkinName = GetUnitSkinName(Owner);
        ;
        ;
        ;
        AttackerPos = GetUnitPosition(Attacker);
        Caster = SetBuffCasterUnit();
        ;
        ;
        ;
        ;
        SetSpellOffsetTarget(1, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Attacker, Owner);
        SetSpellOffsetTarget(3, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Attacker, Owner);
        CurrentPos = GetUnitPosition(Owner);
        Caster = SetBuffCasterUnit();
        this.Caster = SetVarInTable(Caster);
        ;
        this.PickUp = SetVarInTable(false);
        ;
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.Hit = SetVarInTable(false);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetSpellOffsetTarget(1, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        SetSpellOffsetTarget(3, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "ManaLeach_tar2.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 240, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        ;
        Caster = SetBuffCasterUnit();
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        this.TickDamage = SetVarInTable(TotalDamage);
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        this.StartTime = GetGameTime();
        this.SelfParticle = SetVarInTable(SelfParticle);
        SetSpellOffsetTarget(1, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        SetSpellOffsetTarget(1, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        MyName = GetUnitSkinName(Owner);
        ;
        SpellBuffClear(Owner, "OriannaBallTracker");
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + tooltip);
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        IncreaseShield(Owner, 0 + this.DamageBlock, true, true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffClear(Owner, "OrianaGlobalCooldown");
        TeamID = GetTeamID(default);
        OwnerPos = GetUnitPosition(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        this.TempVision = AddPosPerceptionBubble(TeamID, 225, OwnerPos, 25000, Nothing, false);
        SpellEffectCreate(this.Ring2, this.Ring1, "yomu_ring_green.troy", "yomu_ring_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, OwnerPos, Owner, default, OwnerPos, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Ring4, this.Ring3, "oriana_ball_glow_green.troy", "oriana_ball_glow_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "balldown", OwnerPos, Owner, default, OwnerPos, false, default, default, false, false, default, default);
        ;
        CasterTeam = GetTeamID(default);
        ;
        SpellEffectCreate(Temp, default, "OrianaRedact_tar.troy", default, CasterTeam ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        ApplyDamage(Attacker, Owner, 0 + this.TotalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        ;
        Pos = SetVarInTable(this.Pos);
        Move(Target, Pos, 900, 15, 0, FURTHEST_WITHIN_RANGE, POSTPONE_CURRENT_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        PlayAnimation("Spell2", 0, Owner, false, false, true);
        ApplyAssistMarker(Attacker, Owner, 10);
        this.DotCounter = SetVarInTable(4);
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 400, Owner, 20, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(Team, 50, Owner, 20, Nothing, Nothing, true);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        this.TeamID = GetTeamID(default);
        this.Active = SetVarInTable(false);
        this.Sprung = SetVarInTable(false);
        SpellEffectCreate(default, default, "nidalee_bushwhack_set_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.Hit = SetVarInTable(false);
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.Hit = SetVarInTable(false);
        TeamID = GetTeamID(default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", this.TargetPos, TeamID ?? TEAM_ORDER, false, true, false, true, true, true, 0, default, true, Owner, default);
        SpellBuffAdd(Owner, Other3, "OrianaGhost", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other3, "OrianaGhostMinion", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(this.Temp, default, "UrgotHeatseekingIndicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, this.TargetPos, Target, default, default, false, default, default, false, default, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.MRShield, default, "TrundleUlt_self_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        OverrideAnimation("Run", "Run2", Owner);
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Owner, 0 + this.ModdedDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 1, false, false, Attacker);
        IncHealth(Attacker, 0 + this.ModdedDamage, Attacker);
        SpellEffectCreate(this.asdf, default, "TrundleUltParticle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + TooltipDebuff);
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        targetPos = SetVarInTable(this.targetPos);
        ;
        this.OwnerArmor = GetArmor(Owner);
        this.OwnerMR = GetSpellBlock(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Attacker, Attacker, "TrundlePainBuff", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        NextBuffVars.SapVar = SetVarInTable(this.SapVar);
        ;
        SpellEffectCreate(this.SappedDebuff, default, "TrundleQDebuff_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellBuffAdd(Attacker, Attacker, "TrundleQ", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Geeves1, default, "Trundle_TrollSmash_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_Mouth", default, Owner, default, default, true, default, default, false, default, default, default);
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CancelAutoAttack(Owner, true);
        UnlockAnimation(Owner, true);
        SetDodgePiercing(Owner, true);
        ;
        ;
        SpellEffectCreate(this.Rh, default, "TrundleQ_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, default, default, false, default, default, false, false, default, default);
        ;
        ;
        ;
        SpellEffectCreate(default, default, "ConsecrationAura_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        TeamOfOwner = GetTeamID(default);
        this.Delay = SetVarInTable(false);
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        OverrideAnimation("Run", "Spell4", Owner);
        ;
        ;
        ;
        ;
        ;
        this.HasDealtDamage = SetVarInTable(false);
        TargetPos = SetVarInTable(this.TargetPos);
        maxTrackDistance = SetVarInTable(VALUE_BY_LEVEL);
        MoveToUnit(Owner, Attacker, 0 + this.dashSpeed, 0, CANCEL_ORDER, 0, 0 + maxTrackDistance, 0 + DistanceCheck, 0);
        SpellEffectCreate(this.SelfParticle, default, "NocturneParanoiaDash_trail.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, false, false, default, default);
        this.WillRemove = SetVarInTable(false);
        ;
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        this.PartCreated = SetVarInTable(false);
        ;
        this.Range = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        this.Delay = SetVarInTable(false);
        ;
        ;
        ;
        ;
        ;
        ;
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Target, Owner);
        SetPARCostInc(Owner, 3, SpellSlots, -100, PAR_MANA);
        this.VOSoundCreated = SetVarInTable(false);
        SpellEffectCreate(this.Loop, default, "NocturneParanoiaDashSound.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, default, default, false, false, default, default);
        ;
        SetBuffToolTipVar(2, 0 + TTVar2);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle2, this.Particle, "trundledesecrate_green.troy", "trundledesecrate_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_ORDER, Nothing, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamOfAttacker = GetTeamID(default);
        NocturneSkinID = GetSkinID(Attacker);
        ;
        ;
        ;
        SpellEffectCreate(this.ParticleID1, default, "NocturneUnspeakableHorror_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "L_hand", default, Owner, "spine", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID2, default, "NocturneUnspeakableHorror_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "R_hand", default, Owner, "spine", default, false, false, false, false, false, default, default);
        ;
        ;
        this.TimeToFear = SetVarInTable(3);
        this.Feared = SetVarInTable(false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        OrientationPoint = GetPointByUnitFacingOffset(Owner, 10000, 0);
        NocturneSkinID = GetSkinID(Attacker);
        ;
        ;
        ;
        ;
        Point1 = GetPointByUnitFacingOffset(Owner, 0, 0);
        ;
        this.AttackSpeedBoost = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        SpellEffectCreate(this.a, default, "Fizz_Jump_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.a, default, "Fizz_Jump_WeaponGlow.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, default, default, true, false, false, false, false, default, default);
        DestroyMissileForTarget(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        DestroyMissileForTarget(Owner);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        this.Temp = PushCharacterFade(Owner, 0.7, default, this.Temp);
        ;
        OverrideAnimation("Attack1", "Crit", Owner);
        OverrideAnimation("Attack2", "Crit", Owner);
        CancelAutoAttack(Owner, true);
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        TeamID = GetTeamID(default);
        ;
        SpellEffectCreate(this.a, default, "Fizz_Jump_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.a, default, "Fizz_Jump_WeaponGlow.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, default, default, true, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffClear(Owner, "FizzJumpDelay");
        DestroyMissileForTarget(Owner);
        this.FailCount = SetVarInTable(0);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetSlotSpellIcon(1, SpellSlots, SPELLBOOK_CHAMPION, Owner, 2);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        this.TeamID = GetTeamID(default);
        this.Active = SetVarInTable(false);
        this.Sprung = SetVarInTable(false);
        ;
        ;
        this.Delay = SetVarInTable(1);
        SpawnPos = GetPointByUnitFacingOffset(Owner, 50, 180);
        PlayAnimation("Spell3c", 0, Owner, false, false, false);
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(Temp, default, "fizz_playfultrickster_flip_sound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", Owner, Owner, default, default, true, true, false, false, false, default, default);
        ;
        ;
        this.LastLifesteal = SetVarInTable(0);
        this.LastSunlightDamage = SetVarInTable(0);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "FizzJumpTwo");
        SetSlotSpellCooldownTimeVer2(0, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        TargetPos = GetUnitPosition(Owner);
        TeamID = GetTeamID(default);
        OverrideAnimation("Idle1", "Spell3b", Owner);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "FizzJumpBuffer");
        SetSlotSpellCooldownTimeVer2(0.15, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        this.Defense = SetVarInTable(4);
        SetBuffToolTipVar(1, 0 + this.Defense);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.Particle, default, "Leona_SolarBarrier_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        OverrideAnimation("Idle1", "Spell2_idle", Owner);
        OverrideAnimation("Idle2", "Spell2_idle", Owner);
        OverrideAnimation("Idle3", "Spell2_idle", Owner);
        OverrideAnimation("Idle4", "Spell2_idle", Owner);
        OverrideAnimation("Attack1", "Spell2_attack", Owner);
        OverrideAnimation("Attack2", "Spell2_attack", Owner);
        OverrideAnimation("Attack3", "Spell2_attack", Owner);
        OverrideAnimation("Crit", "Spell2_attack", Owner);
        OverrideAnimation("Run", "Spell2_run", Owner);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        SpellEffectCreate(this.Particle, default, "Leona_SolarBarrier2_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        OverrideAnimation("Idle1", "Spell2_idle", Owner);
        OverrideAnimation("Idle2", "Spell2_idle", Owner);
        OverrideAnimation("Idle3", "Spell2_idle", Owner);
        OverrideAnimation("Idle4", "Spell2_idle", Owner);
        OverrideAnimation("Attack1", "Spell2_attack", Owner);
        OverrideAnimation("Attack2", "Spell2_attack", Owner);
        OverrideAnimation("Attack3", "Spell2_attack", Owner);
        OverrideAnimation("Crit", "Spell2_attack", Owner);
        OverrideAnimation("Run", "Spell2_run", Owner);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(this.b, default, "Leona_ZenithBlade_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Nothing, default, default, false, default, default, false, false, default, default);
        DebugSay(Owner, "Slash Buff On", default);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(this.b, default, "Leona_ZenithBlade_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Nothing, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.SSSlow, default, "Global_Slow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        this.MSPenalty = SetVarInTable(-0.8);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.temp, default, "Leona_ShieldOfDaybreak_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_SHIELD_TOP", default, Owner, default, default, true, default, default, false, false, default, default);
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CancelAutoAttack(Owner, true);
        this.RangeIncrease = SetVarInTable(0);
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle1, this.Particle, "Leona_SolarFlare_cas_green.troy", "Leona_SolarFlare_cas_red.troy", TeamID ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TargetPos = GetRandomPointInAreaPosition(Owner, 60, 60);
        Move(Owner, TargetPos, 125, 12, 0, FIRST_WALL_HIT, CANCEL_ORDER, 100, KEEP_CURRENT_FACING);
        ;
        ;
        ;
        SpellEffectCreate(default, default, "NocturneDeath.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, default, default, default, default);
        ;
        TargetPos = GetPointByUnitFacingOffset(Owner, 100, 315);
        FaceDirection(Owner, TargetPos);
        PlayAnimation("Spell4", 1, Owner, false, false, true);
        ;
        ;
        ;
        Move(Owner, this.Destination, 1900, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + this.Distance, FACE_MOVEMENT_DIRECTION);
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.a, default, "Fizz_PiercingStrike.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, true, false, false, false, false, default, default);
        this.HitTarget = SetVarInTable(false);
        ;
        ;
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        Attacker = SetBuffCasterUnit();
        ;
        ;
        SetDodgePiercing(Owner, true);
        Level = GetLevel(Owner);
        Heal = SetVarInTable(VALUE_BY_LEVEL);
        SetBuffToolTipVar(1, 0 + Heal);
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        TeamID = GetTeamID(default);
        this.TempID = AddUnitPerceptionBubble(TeamID, 300, Owner, 4, Nothing, Nothing, false);
        SpellEffectCreate(this.Temp2, this.Temp, "Fizz_Ring_Green.troy", "Fizz_Ring_Red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Owner, default, default, true, false, true, false, false, default, default);
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Owner, "FizzMarinerDoomSlow", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "FizzMarinerDoomBoom");
        TeamID = GetTeamID(default);
        ;
        this.SlowAmount = SetVarInTable(VALUE_BY_LEVEL);
        ApplyAssistMarker(Attacker, Attacker, 10);
        ;
        SpellEffectCreate(this.TremorsFx, default, "alistar_trample_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        OverrideAnimation("Run", "Run2", Owner);
        OverrideAnimation("Idle1", "Idle5", Owner);
        SpellEffectCreate(this.TremorsFx, default, "alistar_nose_puffs.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_NOSE1", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.TremorsFx, default, "alistar_trample_head.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.TremorsFx, default, "alistar_nose_puffs.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_NOSE2", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.TremorsFx, default, "alistar_trample_hand.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.TremorsFx, default, "alistar_trample_hand.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(default, default, "UrgotDeath.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "f_flesh", default, Target, default, default, false, default, default, default, default, default, default);
        SealSpellSlot(2, SpellSlots, Owner, false, default);
        SpellEffectCreate(this.Particle1, default, "UrgotCorrosiveDebuff_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.Particle1, default, "UrgotTerrorCapacitor_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        ;
        SlowPercent = SetVarInTable(VALUE_BY_LEVEL);
        SetBuffToolTipVar(1, 0 + this.Shield);
        SetBuffToolTipVar(2, 0 + SlowPercent);
        IncreaseShield(Owner, 0 + this.Shield, true, true);
        SpellEffectCreate(this.Particle1, default, "UrgotSwapDef.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle1, default, "UrgotIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_Screw_d", default, Owner, "L_Screw_b", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle1, default, "UrgotIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_Screw_b", default, Owner, "R_Screw_b", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle1, default, "UrgotIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_Screw_b", default, Owner, "R_Screw_d", default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        OwnerPos = GetUnitPosition(Owner);
        SetCameraPosition("Owner", OwnerPos);
        UrgotPos = GetUnitPosition(Attacker);
        TargetPos = GetUnitPosition(Owner);
        TeleportToPosition(Attacker, TargetPos);
        TeleportToPosition(Owner, UrgotPos);
        TeleportToPosition(Attacker, TargetPos);
        SpellBuffAdd(Attacker, Owner, "UrgotSwapMissile", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Attacker, "UrgotSwapMissile2", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.arr, default, "gragas_buff_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        ;
        this.SlowAmount = SetVarInTable(-0.35);
        ApplyAssistMarker(Attacker, Attacker, 10);
        ;
        ;
        this.Lifetime = SetVarInTable(default);
        TeamofOwner = GetTeamID(default);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "GragasBarrelRollToggle");
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamID = GetTeamID(default);
        OverrideAnimation("Run", "Spell3", Owner);
        StartTrackingCollisions(Owner, true);
        ;
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        SpellEffectCreate(this.a, default, "gragas_bodySlam_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        Move(Target, TargetPos, 0 + this.DashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + this.Distance, FACE_MOVEMENT_DIRECTION);
        SpellBuffAdd(Owner, Owner, "UrgotHeatseekingAmmo", 4, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        ;
        ;
        this.IsDisabled = SetVarInTable(0);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle3, default, "UrgotSwapDrip.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        ;
        ;
        PlayAnimation("teleUp", 1.2, Owner, false, false, true);
        ;
        ;
        IncPAR(Owner, 0 + this.ManaTick);
        ;
        ;
        ;
        BouncePos = GetRandomPointInAreaUnit(Target, 100, 100);
        Move(Target, BouncePos, 100, 25, 0, default, default, default, default);
        SpellEffectCreate(this.Particle1, default, "UrgotEntropy_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.HitParticle, default, "UrgotPlasmaGrenade_hit.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.b, default, "volibear_R_cas_03.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.c, default, "Volibear_R_cas_04.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.a, default, "volibear_R_lightning_arms.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_middle_finger", default, Target, "r_uparm", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.d, default, "volibear_R_lightning_arms.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_middle_finger", default, Target, "l_uparm", default, false, false, false, false, false, default, default);
        ;
        IncScaleSkinCoef(0.08, Owner);
        BouncePos = GetRandomPointInAreaUnit(Owner, 10, 10);
        Move(Owner, BouncePos, 10, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 10, FACE_MOVEMENT_DIRECTION);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        Last = SetVarInTable(true);
        TeamID = GetTeamID(default);
        SpellEffectCreate(c, default, "Volibear_R_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CENTER_LOC", default, Owner, default, default, true, false, false, false, false, default, default);
        ;
        ;
        ;
        ChampionPriority = SetVarInTable(0);
        ;
        ;
        ForEachUnitInTargetArea(Attacker, Owner, 500, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        ;
        ;
        OwnerTeamID = GetTeamID(default);
        AddUnitPerceptionBubble(OwnerTeamID, 250, Attacker, 0.75, Nothing, Nothing, false);
        ;
        ApplyDamage(Attacker, Owner, 0 + this.VolibearRDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0 + this.VolibearRRatio, 0, false, false, Attacker);
        ;
        TeamID = GetTeamID(default);
        GetGroundHeight(this.MissilePosition, GroundPos);
        SpellEffectCreate(this.Temp4, this.Temp3, "Fizz_Ring_Green.troy", "Fizz_Ring_Red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, "head", GroundPos, Nothing, default, this.MissilePosition, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Temp, this.Temp2, "Fizz_UltimateMissile_Orbit.troy", "Fizz_UltimateMissile_Orbit.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, "head", GroundPos, Nothing, default, this.MissilePosition, false, false, false, false, false, default, default);
        this.TempVision = AddPosPerceptionBubble(TeamID, 350, this.MissilePosition, 3, Nothing, false);
        this.Exploded = SetVarInTable(false);
        SpellEffectCreate(this.SpeedParticle, default, "volibear_q_speed_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        MoveAway(Owner, Attacker, 1200, 20, 700 + Distance, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, KEEP_CURRENT_FACING);
        ;
        Caster = SetBuffCasterUnit();
        IdealDistance = SetVarInTable(70);
        Speed = SetVarInTable(150);
        Gravity = SetVarInTable(60);
        Move(Owner, this.BouncePos, 0 + Speed, 0 + Gravity, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + IdealDistance, FACE_MOVEMENT_DIRECTION);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.c, default, "Volibear_Q_cas_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.a, default, "volibear_Q_attack_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_BUFFBONE_GLB_HAND_LOC", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.b, default, "volibear_Q_attack_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_BUFFBONE_GLB_HAND_LOC", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID, default, "volibear_Q_lightning_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_forearm", default, Owner, "l_middle_finger", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID2, default, "volibear_Q_lightning_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_forearm", default, Owner, "r_middle_finger", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID3, default, "volibear_Q_lightning_cast_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_uparm", default, Owner, "r_uparm", default, false, false, false, false, false, default, default);
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        OverrideAnimation("Idle1", "Spell1_Idle", Owner);
        OverrideAnimation("Idle2", "Spell1_Idle", Owner);
        OverrideAnimation("Idle3", "Spell1_Idle", Owner);
        OverrideAnimation("Idle4", "Spell1_Idle", Owner);
        OverrideAnimation("Run", "Spell1_Run", Owner);
        OverrideAnimation("Spell4", "Spell1_Idle", Owner);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, false);
        ;
        this.lastF1 = SetVarInTable(0);
        this.Ready = SetVarInTable(false);
        this.Critical = SetVarInTable(false);
        ;
        ;
        this.Ready = SetVarInTable(false);
        this.Critical = SetVarInTable(false);
        ;
        ;
        ;
        ;
        ;
        ;
        Distance = DistanceBetweenObjectAndPoint(Owner, this.CenterPos);
        ;
        MoveAway(Owner, this.CenterPos, 750, 35, 0 + Distance, 0, FIRST_WALL_HIT, CANCEL_ORDER, 0, KEEP_CURRENT_FACING);
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        KMSkinID = GetSkinID(Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.bonusCrit = SetVarInTable(0);
        this.furyPerHit = SetVarInTable(5);
        this.furyPerCrit = SetVarInTable(10);
        this.furyPerKill = SetVarInTable(10);
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 400, Owner, 4, Nothing, Nothing, false);
        SetBuffToolTipVar(1, 10);
        OverrideAnimation("run", "run2", Owner);
        SpellEffectCreate(this.a, default, "UndyingRage_glow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_BUFFBONE_GLB_FOOT_LOC", default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.b, default, "UndyingRage_glow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_BUFFBONE_GLB_FOOT_LOC", default, Owner, default, default, false, default, default, false, false, default, default);
        PlayAnimation("Spell4", 0, Owner, false, false, false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + TotalDamage);
        SetBuffToolTipVar(2, 0 + TotalCritDamage);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        Move(Owner, TargetPos, 0 + this.dashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, POSTPONE_CURRENT_ORDER, 0 + this.Distance, FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.SelfParticle, default, "Graves_Move_OnBuffActivate.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        PlayAnimation("Spell3", 0, Owner, true, false, true);
        ;
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Attacker, "GravesMoveSteroid", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellEffectCreate(this.Particle, default, "bloodLust_flame.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, this.Particle, Target, default, default, false, default, default, false, false, default, default);
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        targetPos = SetVarInTable(this.targetPos);
        SpellEffectCreate(this.Particle, this.Particle2, "KogMawVoidOoze_green.troy", "KogMawVoidOoze_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 240, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, targetPos, Target, default, default, false, default, default, true, false, default, default);
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
        SetDodgePiercing(Owner, true);
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(0.3);
        TotalAD = GetTotalAttackDamage(Attacker);
        ;
        ;
        ;
        AttackerTeam = GetTeamID(default);
        SpellEffectCreate(this.ParticleZ, this.ParticleY, "talon_ult_blade_hold.troy", "talon_ult_blade_hold_team_ID_red.troy", AttackerTeam ?? TEAM_CASTER, 1, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Attacker, default, default, false, false, false, false, true, default, default);
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(0.4);
        this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
        ;
        SpellBuffAdd(Owner, Owner, "TalonHaste", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(this.talon_ult_sound, default, "talon_ult_sound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Nothing, default, OwnerPos, true, false, false, false, false, default, default);
        CasterID = GetTeamID(default);
        SpellEffectCreate(this.Particle2, this.Particle, "Graves_SmokeGrenade_Cloud_Team_Green.troy", "Graves_SmokeGrenade_Cloud_Team_Red.troy", CasterID ?? TEAM_UNKNOWN, 250, 0, TEAM_ORDER, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        PlayAnimation("Spell3", 0, Owner, true, false, true);
        Move(Owner, TargetPos, 0 + this.SlashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        StartTrackingCollisions(Owner, true);
        ;
        ;
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
        ;
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        OverrideAutoAttack(1, ExtraSlots, Owner, 1, true);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseSound", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellEffectCreate(Particle, default, "KogMawDeathProc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(Particle, default, "KogMawDeathBackBeam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_Chest", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(Particle, default, "KogMawDeathBackBeam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_Waist", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(Particle, default, "KogMawDeathBackBeam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_Root", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(Particle, default, "KogMawDeathBackBeam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_Tail", default, Target, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.MoveSpeedMod = SetVarInTable(0);
        PlayAnimation("death", 0.75, Owner, false, false, true);
        ShowHealthBar(Owner, false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        OverrideAnimation("Run", "RunDead", Owner);
        SpellBuffAdd(Owner, Owner, "Untargetable", 1, 1, 0.75, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        TeamID = GetTeamID(default);
        KogMawSkinID = GetSkinID(Attacker);
        ;
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        SpellEffectCreate(this.ParticleZ, default, "BladeRgoue_BladeAOE_TEMP.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Attacker, default, default, false, default, default, false, true, default, default);
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        this.AttackerTeamID = GetTeamID(default);
        TotalAD = GetTotalAttackDamage(Attacker);
        ;
        ;
        ;
        SpellEffectCreate(this.Blood1, default, "talon_Q_bleed_indicator.troy", default, AttackerTeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Blood2, default, "talon_Q_bleed.troy", default, AttackerTeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        this.UnitBubble = AddUnitPerceptionBubble(this.AttackerTeamID, 400, Owner, 6, Nothing, Nothing, false);
        ;
        ;
        ;
        ;
        this.Ready = SetVarInTable(1);
        SpellEffectCreate(this.particle1, default, "CassiopeiaDeath.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Target, default, default, false, default, default, default, default, default, default);
        this.PercentMod = SetVarInTable(-0.1);
        CurCost = GetPARMultiplicativeCostInc(Owner, 0, SpellSlots, PAR_MANA);
        ;
        ;
        SetBuffToolTipVar(1, 0 + Tooltip);
        SetPARMultiplicativeCostInc(Owner, 0, SpellSlots, 0 + Cost, PAR_MANA);
        SetPARMultiplicativeCostInc(Owner, 1, SpellSlots, 0 + Cost, PAR_MANA);
        SetPARMultiplicativeCostInc(Owner, 2, SpellSlots, 0 + Cost, PAR_MANA);
        SetPARMultiplicativeCostInc(Owner, 3, SpellSlots, 0 + Cost, PAR_MANA);
        this.TestAmount = SetVarInTable(CharVars.SecondSkin);
        SetBuffToolTipVar(1, 0 + CharVars.SecondSkin);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        this.numTicks = SetVarInTable(20);
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        SpellEffectCreate(this.Particle1, this.Particle, "wallofpain_new_post_green.troy", "wallofpain_new_post_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle2, this.Particle3, "wallofpain_new_post_green.troy", "wallofpain_new_post_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Attacker, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.ParticleID6, this.noParticle, "wallofpain__new_beam.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Owner, false, Owner, "bottom", default, Attacker, "bottom", default, false, default, default, false, false, default, default);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        Pos = SetVarInTable(this.Pos);
        NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
        NextBuffVars.ArmorMod = SetVarInTable(this.ArmorMod);
        ForEachUnitInTargetArea(Attacker, Pos, 75, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "WallofPainTarget", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Unit, "WallofPainExtra", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Shred, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Unit, "WallofPainMarker", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.Particle, default, default, default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SealSpellSlot(3, SpellSlots, Owner, false, default);
        ;
        DamageToDeal = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Owner, Owner, 550, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyDamage(Attacker, Unit, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.25, 1, false, false, Attacker);
        });
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "Defile_green_cas.troy", "Defile_red_cas.troy", TeamOfOwner ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.particle, default, "LayWaste_point.troy", default, this.TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        this.COTGFound = SetVarInTable(false);
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.Particle, default, "mordekeiser_cotg_skin.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_Die);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(0, InventorySlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, InventorySlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, InventorySlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, InventorySlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(4, InventorySlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(5, InventorySlots, Owner, true, SPELLBOOK_CHAMPION);
        ShowHealthBar(Owner, false);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Shred);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncPAR(Owner, 5000);
        ;
        this.Fade = PushCharacterFade(Owner, 0.5, default, this.Fade);
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        PauseAnimation(Owner, true);
        ;
        SpellEffectCreate(this.turntostone, default, "TurnToStone.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.AreaRadius = SetVarInTable(185);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle2, this.Particle, "CassMiasma_tar_green.troy", "CassMiasma_tar_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        this.BubbleID = AddUnitPerceptionBubble(TeamOfOwner, 250, Owner, 7, Nothing, Nothing, false);
        ForEachUnitInTargetArea(Attacker, Owner, 0 + this.AreaRadius, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            NextBuffVars.DamagePerTick = SetVarInTable(this.DamagePerTick);
            SpellBuffAdd(Attacker, Unit, "CassiopeiaMiasmaPoison", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Poison, 1, true, false, false, default);
            NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
            SpellBuffAdd(Attacker, Unit, "Slow", 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, true, false, default);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.particle, this.particle2, "CassNoxiousSnakePlane_green.troy", "CassNoxiousSnakePlane_red.troy", this.TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
        ;
        ;
        ;
        CasterID = GetTeamID(default);
        TargetPos = SetVarInTable(this.TargetPos);
        ;
        ;
        this.BubbleID = AddPosPerceptionBubble(CasterID, 375, TargetPos, 6, Nothing, false);
        ForEachUnitInTargetArea(Attacker, this.TargetPos, 275, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "PhosphorusBombBlind", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        ForEachUnitInTargetArea(Attacker, this.TargetPos, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Attacker);
        });
        ;
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        Move(Owner, TargetPos, 0 + this.SlashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.Particle, default, "corki_valkrie_speed.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, false, default, default, default);
        PlayAnimation("Spell2", 0, Owner, true, false, true);
        SpellEffectCreate(default, default, "CrashBoom.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, false, default, default, default, default, default, default);
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 400, Owner, 6, Nothing, Nothing, false);
        SpellEffectCreate(this.StarkSelfParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 30);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.TwoChargeSound, default, "KarmaTwoMantraSound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        SpellEffectCreate(this.TwoCharge, default, "karma_mantraCharge_indicator_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.OneCharge, default, "karma_mantraCharge_indicator_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.Particle, this.Particle2, "AbsoluteZero2_green_cas.troy", "AbsoluteZero2_red_cas.troy", TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_CHAOS, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        ;
        ;
        NextBuffVars.MovementSpeedMod = SetVarInTable(this.MovementSpeedMod);
        NextBuffVars.AttackSpeedMod = SetVarInTable(this.AttackSpeedMod);
        ForEachUnitInTargetArea(Owner, Owner, 575, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Owner, Unit, "AbsoluteZeroSlow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        CharVars.LifeTime = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        OverrideAnimation("Run", "Run2", Owner);
        OverrideAnimation("Attack1", "Attack3", Owner);
        OverrideAnimation("Attack2", "Attack3", Owner);
        this.Counter = SetVarInTable(0);
        TeamID = GetTeamID(default);
        ;
        this.SlowAmount = SetVarInTable(VALUE_BY_LEVEL);
        ApplyAssistMarker(Attacker, Attacker, 10);
        this.Counter = SetVarInTable(0);
        ;
        MissilePosition = SetVarInTable(this.MissilePosition);
        TeamOfOwner = GetTeamID(default);
        RumbleSkinID = GetSkinID(Attacker);
        ;
        ;
        SpellEffectCreate(this.temp, default, "RumbleCarpetBombSoundStart.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, default, default, default);
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.test, default, "RumbleCarpetBombSoundEnd.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, default, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Boom, this.Boom2, "missFortune_makeItRain_tar_green.troy", "missFortune_makeItRain_tar_red.troy", TeamID ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(a, a, "missFortune_makeItRain_incoming.troy", default, TeamID ?? TEAM_UNKNOWN, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(a, a, "missFortune_makeItRain_incoming_02.troy", default, TeamID ?? TEAM_UNKNOWN, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(a, a, "missFortune_makeItRain_incoming_03.troy", default, TeamID ?? TEAM_UNKNOWN, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(a, a, "missFortune_makeItRain_incoming_04.troy", default, TeamID ?? TEAM_UNKNOWN, 100, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0.5, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        this.RainCount = SetVarInTable(1);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        this.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        this.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
        NextBuffVars.AttackSpeedMod = SetVarInTable(this.MoveSpeedMod);
        ;
        ForEachUnitInTargetArea(Attacker, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
            ApplyDamage(Attacker, Unit, 0 + this.TotalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.114, 1, false, false, Attacker);
            SpellEffectCreate(asdf, default, "missFortune_makeItRain_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, default, default, default, default);
        });
        ;
        TeamID = GetTeamID(default);
        ;
        ApplyAssistMarker(Attacker, Attacker, 10);
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        SpellEffectCreate(this.ar, default, "missFortune_viciousShots_attack_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_BUFFBONE_GLB_HAND_LOC", default, Owner, default, default, true, default, default, false, default, default, default);
        SpellEffectCreate(this.ar, default, "missFortune_viciousShots_attack_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_BUFFBONE_GLB_HAND_LOC", default, Owner, default, default, true, default, default, false, default, default, default);
        ;
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "KarmaHeavenlyWaveC");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "KarmaSpiritBondC");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown2, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "KarmaSoulShieldC");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown3, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        PlayAnimation("Spell2", 0, Owner, false, false, false);
        IncreaseShield(Owner, 0 + this.DamageBlock, true, true);
        ;
        ;
        ;
        ;
        ;
        ;
        this.DamageCounter = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        PlayAnimation("Spell3", 0, Owner, false, false, false);
        SpellBuffAdd(Attacker, Target, "RumbleHeatingUp", 1, 1, 500, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "RumbleHeatingUp2", 1, 1, 500, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        ;
        SpellEffectCreate(this.Particle, default, "karma_soulShield_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        SpellEffectCreate(this.SoundParticle, default, "KarmaSoulShieldSound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, default, default, default);
        SetBuffToolTipVar(1, 0 + this.TotalArmorAmount);
        ApplyAssistMarker(Attacker, Owner, 10);
        IncreaseShield(Owner, 0 + this.TotalArmorAmount, true, true);
        TeamID = GetTeamID(default);
        ;
        SpellEffectCreate(this.Particle, default, "karma_soulShield_buf.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.SoundParticle, default, "KarmaSoulShieldSound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        SetBuffToolTipVar(1, 0 + this.TotalArmorAmount);
        ApplyAssistMarker(Attacker, Owner, 10);
        IncreaseShield(Owner, 0 + this.TotalArmorAmount, true, true);
        ;
        ;
        this.MoveSpeedMod = SetVarInTable(0);
        this.WillRemove = SetVarInTable(false);
        ;
        ;
        ;
        SpellEffectCreate(this.MoveSpeedPart1, default, "karma_spiritBond_speed_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, default, default, default, default, default, default);
        ApplyAssistMarker(Attacker, Owner, 10);
        this.punchdmg = SetVarInTable(0);
        ;
        this.punchdmg = SetVarInTable(0);
        OverrideAutoAttack(5, ExtraSlots, Owner, 1, true);
        this.punchdmg = SetVarInTable(0);
        ;
        ;
        ;
        SpellTwoMana = SetVarInTable(VALUE_BY_LEVEL);
        LevelTwo = SetVarInTable(Level);
        ;
        SpellThreeMana = SetVarInTable(VALUE_BY_LEVEL);
        LevelThree = SetVarInTable(Level);
        ;
        ;
        ;
        ;
        CharVars.HitCount = SetVarInTable(0);
        ;
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        SpellEffectCreate(this.KarmaSlow, default, "karma_spiritBond_slow_trigger.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamOfAttacker = GetTeamID(default);
        LinkVisibility(Attacker, Owner);
        ;
        SpellEffectCreate(this.SBIdle1, default, "leBlanc_shackle_self_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.SBIdle2, default, "leBlanc_shackle_self_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.SoulShackleIdle, default, "karma_spiritBond_indicator_target_blank.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.SoulShackleTarget_blood, default, "karma_spiritBond_indicator_impact.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.MoveSpeedPart1, default, "karma_spiritBond_speed_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.MoveSpeedPart2, default, "karma_spiritBond_speed_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "root", default, Attacker, default, default, false, default, default, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        OffsetAngle = GetOffsetAngle(Owner, Attacker);
        ;
        CenterPoint = GetPointByUnitFacingOffset(Owner, 0 + HalfDistance, 0 + OffsetAngle);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + this.CooldownToRestore, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetPARColorOverride(Owner, 255, 0, 0, 255, 175, 0, 0, 255);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        IncPAR(Owner, 100);
        Duration = GetBuffRemainingDuration(Owner, "RumbleOverheat");
        SpellBuffAdd(Attacker, Owner, "RumbleOverheatSound", 1, 1, 0 + Duration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, true, default);
        SpellBuffAdd(Attacker, Owner, "RumbleHeatDelay", 1, 1, 0 + Duration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.punchdmg = SetVarInTable(0);
        OverrideAutoAttack(5, ExtraSlots, Owner, 1, true);
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        SpellEffectCreate(this.MoveSpeedPart1, default, "karma_spiritBond_speed_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, "root", default, Attacker, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.SBIdle1, default, "leBlanc_shackle_self_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.SBIdle2, default, "leBlanc_shackle_self_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.SoulShackleTarget_blood, default, "karma_spiritBond_indicator_target_blank.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, default, default, false, false, default, default);
        ;
        ;
        ;
        OffsetAngle = GetOffsetAngle(Attacker, Owner);
        ;
        CenterPoint = GetPointByUnitFacingOffset(Attacker, 0 + HalfDistance, 0 + OffsetAngle);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        SetDodgePiercing(Owner, true);
        SetBuffToolTipVar(1, 8);
        this.lastTooltip = SetVarInTable(8);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        AnnieSkinID = GetSkinID(Owner);
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "olaf_axeThrow_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(a, default, "olaf_axeThrow_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(a, default, "olaf_axeThrow_tar_03.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        ;
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        TotalDamage = GetTotalAttackDamage(Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncScaleSkinCoef(0.1, Owner);
        OverrideAnimation("Attack1", "Attack3", Owner);
        OverrideAnimation("Attack2", "Attack3", Owner);
        OverrideAnimation("Run", "Spell2", Owner);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        ;
        SizeByLevel = SetVarInTable(VALUE_BY_LEVEL);
        IncScaleSkinCoef(0.5, Owner);
        SpellEffectCreate(this.Particle, default, "feast_tar_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Attacker, true, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.a, default, "olaf_axe_trigger.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.Particle1, this.Particle, "olaf_axe_totem_team_id_green.troy", "olaf_axe_totem_team_id_red.troy", TeamOfOwner ?? TEAM_UNKNOWN, 400, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        ;
        ;
        HealthPerStack = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SetBuffToolTipVar(1, 0 + BonusHealth);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        BouncePos = GetRandomPointInAreaUnit(Owner, 10, 10);
        Move(Owner, BouncePos, 10, 20, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 10, FACE_MOVEMENT_DIRECTION);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        HitsRequired = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SealSpellSlot(2, SpellSlots, Owner, false, default);
        ;
        ;
        PlayAnimation("Spell2", 0, Owner, true, false, true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ;
            ;
            ;
            ApplyDamage(Attacker, Unit, 0 + PercentDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
        });
        this.lastTooltip = SetVarInTable(0);
        this.LastHeal = SetVarInTable(0);
        this.LastMana = SetVarInTable(0);
        ;
        ;
        SpellEffectCreate(this.ParticleID, default, "olaf_viciousStrikes_weapon_glow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_3", default, Owner, "BUFFBONE_CSTM_WEAPON_2", default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ParticleID, default, "olaf_viciousStrikes_weapon_glow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Target, false, Owner, "BUFFBONE_CSTM_WEAPON_7", default, Owner, "BUFFBONE_CSTM_WEAPON_4", default, false, default, default, default, default, default, default);
        ;
        ;
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 50, Owner, 4, Nothing, Nothing, true);
        ;
        ;
        ;
        ;
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        this.DOTCounter = SetVarInTable(0);
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 100, Owner, 20, Nothing, Nothing, false);
        this.BubbleID2 = AddUnitPerceptionBubble(Team, 100, Owner, 20, Nothing, Nothing, true);
        ApplyAssistMarker(Attacker, Owner, 10);
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        this.Collide = SetVarInTable(false);
        ;
        ;
        ;
        SpellEffectCreate(hi, default, "vayne_E_tar.troy", default, TEAM_NEUTRAL, 200, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, true, false, false, false, false, default, default);
        StartTrackingCollisions(Owner, true);
        ;
        ;
        ;
        CastPoint = SetVarInTable(this.CastPoint);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, CastPoint);
        ;
        CastOffset = GetOffsetAngle(Owner, this.CastPoint);
        TargetPos = GetPointByUnitFacingOffset(Owner, -475, 0 + CastOffset);
        Move(Owner, TargetPos, 2000, 0, 0, FIRST_COLLISION_HIT, POSTPONE_CURRENT_ORDER, 0, KEEP_CURRENT_FACING);
        this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0);
        this.ID = PushCharacterFade(Owner, 0.2, default, this.ID);
        SpellEffectCreate(this.Particle, default, "ShadowWalk_buf.troy", default, default, default, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, default, default, default, default, default, default, default);
        ;
        ;
        ;
        SpellBuffClear(Owner, "JackInTheBoxSoftLock");
        ;
        SetDodgePiercing(Owner, true);
        this.HasHit = SetVarInTable(false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        OwnerPos = GetUnitPosition(Owner);
        SpellEffectCreate(FadeParticle, default, "HallucinatePoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, false, false, false, false, default, default);
        ;
        ;
        ;
        ID = PushCharacterFade(Owner, 0.2, default, ID);
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        this.TeamID = GetTeamID(default);
        this.Active = SetVarInTable(false);
        this.Sprung = SetVarInTable(false);
        SpellEffectCreate(this.Particle2, this.Particle, "caitlyn_yordleTrap_idle_green.troy", "caitlyn_yordleTrap_idle_red.troy", this.TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(SpeedParticle, default, "vayne_ult_speed_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        this.SpeedParticle = SetVarInTable(SpeedParticle);
        ;
        ;
        OverrideAnimation("Run", "Spell3b", Owner);
        SpellEffectCreate(SpeedParticle, default, "vayne_passive_speed_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        this.SpeedParticle = SetVarInTable(SpeedParticle);
        ;
        ;
        ;
        PushCharacterFade(Owner, 0.2, default, default);
        ;
        TeamID = GetTeamID(default);
        PlayAnimation("Spell1", 0, Owner, false, false, true);
        ;
        ;
        ;
        this.Failed = SetVarInTable(false);
        TargetPos = SetVarInTable(this.TargetPos);
        ;
        ;
        Move(Owner, TargetPos, 0 + this.DashSpeed, 0, 0, FIRST_WALL_HIT, POSTPONE_CURRENT_ORDER, 0 + this.Distance, FACE_MOVEMENT_DIRECTION);
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.GlobeOne, default, "vayne_W_ring1.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, default, default, default);
        Caster = SetBuffCasterUnit();
        TeamID = GetTeamID(default);
        TeamIDTarget = GetTeamID(default);
        ;
        ;
        ;
        SpellEffectCreate(this.Aegis, default, "ZettasManaManipulator_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CASTER, Nothing, true, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        this.StartingLevel = GetLevel(Attacker);
        ;
        ;
        ;
        TAD = GetTotalAttackDamage(Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, 400, 0);
        Beam2 = GetPointByUnitFacingOffset(Owner, 600, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 800, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other2 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam2, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        LinkVisibility(Other1, Owner);
        LinkVisibility(Other1, Other2);
        LinkVisibility(Other2, Other3);
        LinkVisibility(Other3, Attacker);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        SpellEffectCreate(this.DiseaseCloud, default, "yorick_necroCloud.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        ;
        NearbyChampion = SetVarInTable(false);
        CheckBuilding = SetVarInTable(true);
        this.IsDead = SetVarInTable(false);
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, -145, 0);
        Beam2 = GetPointByUnitFacingOffset(Owner, 250, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 550, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other2 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam2, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        LinkVisibility(Other1, Owner);
        LinkVisibility(Other1, Other2);
        LinkVisibility(Other2, Other3);
        LinkVisibility(Attacker, Other3);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, 850, 0);
        Beam2 = GetPointByUnitFacingOffset(Owner, 1150, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 1400, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other2 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam2, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        LinkVisibility(Other1, Owner);
        LinkVisibility(Other1, Other2);
        LinkVisibility(Other2, Other3);
        LinkVisibility(Other3, Attacker);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        SpellEffectCreate(this.Particle1, default, "xerath_magechains_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle, default, "Xerath_beam_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 550, 0, TEAM_UNKNOWN, Owner, false, Owner, "top", default, Target, default, default, true, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Target, 10);
        YorickLevel = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        ;
        ;
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, -145, 0);
        Beam2 = GetPointByUnitFacingOffset(Owner, 100, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 200, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other2 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam2, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, false, Nothing, default);
        LinkVisibility(Other1, Owner);
        LinkVisibility(Other1, Other2);
        LinkVisibility(Other2, Other3);
        LinkVisibility(Attacker, Other3);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        YorickLevel = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        PlayAnimation("Summon", 0, Owner, false, false, false);
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        ;
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        Pos = SetVarInTable(this.Pos);
        ForEachUnitInTargetArea(Attacker, Pos, 75, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ;
        });
        ;
        this.IsDead = SetVarInTable(false);
        PlayAnimation("Death", 4, Owner, false, false, true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.SpectraFX, default, "YorickPHSpectral.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Attacker, default, default, Attacker, default, default, false, default, default, false, false, default, default);
        ;
        ;
        this.IsDead = SetVarInTable(false);
        this.StartingLevel = GetLevel(Attacker);
        ;
        ;
        ;
        TAD = GetTotalAttackDamage(Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.StartingLevel = GetLevel(Attacker);
        ;
        ;
        ;
        TAD = GetTotalAttackDamage(Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        YorickLevel = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.RootParticleEffect2, default, "SwainShadowGraspRootTemp.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.RootParticleEffect, default, "swain_shadowGrasp_magic.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle3, this.Particle4, "yorick_ult_03_teamID_green.troy", "yorick_ult_03_teamID_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        this.HasHealed = SetVarInTable(false);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        ;
        ;
        ;
        IncHealth(Owner, 0 + this.TotalHealth, Owner);
        this.HasHealed = SetVarInTable(true);
        IncPAR(Owner, 0 + this.TotalPAR);
        IncPAR(Owner, 0 + this.TotalPAREnergy);
        ;
        YorickLevel = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle5, this.Particle5, "yorick_ult_revive_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle, this.Particle, "yorick_ult_02.troy", default, TeamID ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(this.Particle3, this.Particle4, "yorick_revive_skin_teamID_green.troy", "yorick_revive_skin_teamID_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        SpellBuffRemoveType(Owner, BUFF_CombatEnchancer);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        ;
        ;
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
        this.ADRatio = SetVarInTable(VALUE_BY_LEVEL);
        PlayAnimation("Death", 4, Owner, false, false, true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle3, this.Particle4, "yorick_ult_03_teamID_green.troy", "yorick_ult_03_teamID_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        this.HasHealed = SetVarInTable(false);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        ;
        ;
        ;
        IncHealth(Owner, 0 + this.TotalHealth, Owner);
        this.HasHealed = SetVarInTable(true);
        IncPAR(Owner, 0 + this.TotalPAR);
        IncPAR(Owner, 0 + this.TotalPAREnergy);
        ;
        ;
        ;
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "XerathLocusOfPowerToggle");
        SetSlotSpellCooldownTimeVer2(0.5, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "XerathArcanopulseExtended");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "XerathMageChainsExtended");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown2, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "XerathArcaneBarrageWrapperExt");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown3, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectCreate(this.Particle, default, "Xerath_LocusOfPower_buf.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particlea, default, "Xerath_LocusOfPower_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_CHANNEL_LOC", default, Owner, "spine", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particleb, default, "Xerath_LocusOfPower_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_CHANNEL_2", default, Owner, "spine", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particlec, default, "Xerath_LocusOfPower_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_CHANNEL_3", default, Owner, "spine", default, false, false, false, false, false, default, default);
        ;
        OverrideAnimation("Idle1", "Spell2_chan", Owner);
        OverrideAnimation("Idle2", "Spell2_chan", Owner);
        OverrideAnimation("Idle3", "Spell2_chan", Owner);
        OverrideAnimation("Idle4", "Spell2_chan", Owner);
        ;
        ;
        ;
        ;
        PlayAnimation("Death", 4, Owner, false, false, true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Pos = GetRandomPointInAreaUnit(Owner, 400, 200);
        Other1 = CloneUnitPet(Attacker, "YorickRAPetBuff", 0, Pos, 0, 0, false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle3, this.Particle4, "yorick_ult_03_teamID_green.troy", "yorick_ult_03_teamID_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        this.HasHealed = SetVarInTable(false);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        ;
        ;
        ;
        IncHealth(Owner, 0 + this.TotalHealth, Owner);
        this.HasHealed = SetVarInTable(true);
        IncPAR(Owner, 0 + this.TotalPAR);
        IncPAR(Owner, 0 + this.TotalPAREnergy);
        ;
        ;
        ;
        ;
        ArmorPerHit = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SetBuffToolTipVar(1, 0 + this.ArmorCount);
        SetBuffToolTipVar(2, 0 + this.IncreasedArmor);
        ;
        ;
        ;
        DmgPerHit = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SetBuffToolTipVar(1, 0 + this.DamageCount);
        SetBuffToolTipVar(2, 0 + this.IncreasedDamage);
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.PetDamage);
        SetBuffToolTipVar(2, 0 + this.PetAP);
        ;
        StatMultiplier = SetVarInTable(VALUE_BY_LEVEL);
        MordDmg = GetTotalAttackDamage(Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        CharVars.DamageCount = SetVarInTable(1);
        this.Count = SetVarInTable(0);
        ;
        this.IsKarthus = SetVarInTable(false);
        this.IsKogMaw = SetVarInTable(false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle3, this.Particle4, "yorick_ult_01_teamID_green.troy", "yorick_ult_01_teamID_red.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle, this.Particle, "yorick_ult_02.troy", default, TeamID ?? TEAM_UNKNOWN, 500, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        ;
        CharVars.ArmorCount = SetVarInTable(1);
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        this.SlowValue = SetVarInTable(VALUE_BY_LEVEL);
        SetPARMultiplicativeCostInc(Owner, 3, SpellSlots, -1, PAR_MANA);
        TeamOfOwner = GetTeamID(default);
        Caster = SetBuffCasterUnit();
        ;
        ;
        PlayAnimation("Spell4", 0, Owner, false, false, false);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        Caster = SetBuffCasterUnit();
        ;
        SpellBuffAdd(Owner, Caster, "PoppyDiplomaticImmunity", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, default, default, default);
        SpellEffectCreate(this.Particle1, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Head", default, Owner, "Chest", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle2, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Chest", default, Owner, "Spine", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle3, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Chest", default, Owner, "r_uparm", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle4, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "Chest", default, Owner, "l_uparm", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle5, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_uparm", default, Owner, "r_forearm", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle6, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_uparm", default, Owner, "l_forearm", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle7, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_forearm", default, Owner, "r_hand", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle8, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_forearm", default, Owner, "l_hand", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle9, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, "r_thigh", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle10, default, "XerathIdle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, "l_thigh", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle11, default, "XerathIdle-thin.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_thigh", default, Owner, "r_knee", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle12, default, "XerathIdle-thin.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_thigh", default, Owner, "l_knee", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle13, default, "XerathIdle-thin.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "r_knee", default, Owner, "R_Foot", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle14, default, "XerathIdle-thin.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_knee", default, Owner, "L_Foot", default, false, false, false, false, false, default, default);
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, true);
        CancelAutoAttack(Owner, true);
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.Particle1, this.Particle, "Xerath_E_cas_green.troy", "Xerath_E_cas_red.troy", TeamID ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.MoveSpeedMod = SetVarInTable(0.35);
        ;
        ;
        SetBuffToolTipVar(2, 15);
        ;
        ;
        ;
        PlayAnimation("Spell2", 0, Owner, false, false, false);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
        NewTargetPos = SetVarInTable(this.NewTargetPos);
        this.DamageTwo = SetVarInTable(VALUE_BY_LEVEL);
        this.WillRemove = SetVarInTable(false);
        this.WillMove = SetVarInTable(true);
        ;
        ;
        ;
        ;
        Move(Owner, NewTargetPos, 0 + this.SlashSpeed, 0, 0, FIRST_COLLISION_HIT, CANCEL_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.ParticleCharge2, default, "HeroicCharge_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ApplyAssistMarker(Caster, Owner, 10);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        TargetPos = SetVarInTable(this.TargetPos);
        Move(Owner, TargetPos, 0 + this.SlashSpeed, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        SpellEffectCreate(this.ParticleCharge, default, "HeroicCharge_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        PlayAnimation("RunUlt", 0, Owner, true, false, true);
        ;
        OverrideAutoAttack(0, ExtraSlots, Owner, 1, true);
        ;
        ;
        ;
        SpellEffectCreate(ar, default, "summoner_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        PlayAnimation("Spell3", 0, Owner, false, false, false);
        ;
        SpellEffectCreate(ar, default, "summoner_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.SpeedParticle, default, "Global_Haste.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        ;
        this.MoveSpeedVar = SetVarInTable(VALUE_BY_LEVEL);
        ;
        OwnerLevel = GetLevel(Attacker);
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        OwnerLevel = GetLevel(Attacker);
        ;
        ;
        ;
        ApplyAssistMarker(Attacker, Owner, 10);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.MaxParticle, default, "PoppyDemacia_max.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_finger", default, Owner, default, default, true, default, default, default, default, default, default);
        ;
        SetBuffToolTipVar(1, 0 + Count);
        ;
        ArmDmgValue = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SetBuffToolTipVar(2, 0 + ArmDmgValue);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.StarkSelfParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        ;
        SpellEffectCreate(this.SoulShroudParticle, default, "ZettasManaManipulator_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CASTER, Nothing, true, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ManaManipulator, default, "ZettasManaManipulator_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_CASTER, Nothing, true, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.EmblemOfValorParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        Level = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(default, default, "Slimecall_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(default, default, "LifeAura.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        PlayAnimation("Death", 4, Owner, false, false, true);
        IncPAR(Owner, -10000);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_Heal);
        SpellBuffRemoveType(Owner, BUFF_Haste);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_CombatEnchancer);
        SpellBuffRemoveType(Owner, BUFF_Shred);
        SpellBuffRemove(Owner, "WillRevive", Owner, 0);
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        this.ThisBubble = AddUnitPerceptionBubble(TeamID, 750, Owner, 25000, Nothing, Nothing, true);
        ;
        ;
        ;
        Level = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.ApocalypseParticle, default, "ZettasManaManipulator_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.cp1, default, "env_manaheal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        ;
        ;
        SetDodgePiercing(Owner, true);
        this.AttackCounter = SetVarInTable(0);
        CasterID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(CasterID, 1100, Owner, 180, Nothing, Nothing, false);
        ;
        ;
        ;
        SpellEffectCreate(this.WillPlaceholder, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        this.WillRemove = SetVarInTable(false);
        ;
        ;
        ;
        ;
        IncreaseShield(Owner, 0 + this.ShieldHealth, true, false);
        ;
        TeamID = GetTeamID(default);
        ;
        ApplyDamage(Attacker, Owner, 110, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        SpellEffectCreate(hi, default, "kennen_btl_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.Particle, default, "Aura_defense.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.ak, default, "Summoner_Teleport.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        this.InitialTime = GetGameTime();
        PauseAnimation(Owner, true);
        DestroyMissileForTarget(Owner);
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_SUMMONER);
        Level = GetLevel(Owner);
        ;
        ;
        ;
        ;
        this.CooldownResevoir = SetVarInTable(0);
        ;
        SpellEffectCreate(Particle, default, "BlackCleave_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        ;
        SpellEffectCreate(this.SCP, default, "SunfireCape_Aura.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + ResistanceShred);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.InitialHealth = SetVarInTable(this.ShieldHealth);
        this.100Destroyed = SetVarInTable(false);
        this.66Destroyed = SetVarInTable(false);
        SpellEffectCreate(this.Particle1, default, "razzlespride_100.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle2, default, "razzlespride_66.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(this.Particle3, default, "razzlespride_33.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SetBuffToolTipVar(1, 0 + this.ShieldHealth);
        CasterID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(CasterID, 1100, Owner, 180, Nothing, Nothing, false);
        ;
        ;
        SpellEffectCreate(this.slow, default, "Global_Slow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        IncreaseShield(Owner, 0 + this.ShieldHealth, true, false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.slow, default, "Global_Slow.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        CasterID = GetTeamID(default);
        TargetPos = SetVarInTable(this.TargetPos);
        ;
        ;
        this.BubbleID = AddPosPerceptionBubble(CasterID, 550, TargetPos, 6, Nothing, true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetBuffToolTipVar(1, 0 + ResistanceBuff);
        CasterID = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(CasterID, 1100, Owner, 180, Nothing, Nothing, true);
        ;
        ;
        ;
        this.CooldownResevoir = SetVarInTable(0);
        ;
        ;
        SpellEffectCreate(arr, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        ;
        IncHealth(Owner, 0 + healthToRestore, Owner);
        ;
        this.bountyActive = SetVarInTable(false);
        teamID = GetTeamID(default);
        gameTime = GetGameTime();
        ;
        Team = GetTeamID(default);
        this.BubbleID = AddUnitPerceptionBubble(Team, 300, Owner, 6, Nothing, Nothing, true);
        ApplyAssistMarker(Attacker, Owner, 10);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        this.ThisBubble = AddUnitPerceptionBubble(TeamID, 750, Owner, 25000, Nothing, Nothing, true);
        this.AttackCounter = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.ApocalypseParticle, default, "ZettasManaManipulator_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        SpellEffectCreate(this.StarkAuraParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Target, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(this.StarkAuraParticle, default, "RallyingBanner_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, true, Target, default, default, Owner, default, default, false, default, default, default, default, default, default);
        ;
        ;
    }
    public void OnBuffDeactivate()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, default, default, default, default);
        RemovePerceptionBubble(this.ThisBubble);
        UnitFound = SetVarInTable(false);
        ForNClosestUnitsInTargetArea(Owner, Owner, 200, "AffectMinions AffectHeroes NotAffectSelf ", 1, default, default, (Iterator) =>
        {
            UnitFound = SetVarInTable(true);
            SpellCast(Owner, Owner, Owner, Owner, default, 0, SpellSlots, 1, false, false, false, default, default, default);
        });
        ;
        ;
        ;
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.buffParticle);
        ;
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.buffParticle);
        IncPermanentFlatPARRegenMod(Owner, -3);
        ;
        ;
        ;
        SpellEffectRemove(this.buffParticle);
        SpellBuffAdd(Owner, Owner, "WormRecouperateOn", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.CastParticle);
        RemovePerceptionBubble(this.Bubble);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.a);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        RemovePerceptionBubble(this.ThisBubble);
        ;
        ;
        ;
        PopCharacterFade(Owner, this.ID);
        SpellEffectCreate(Particle, default, "FallenOne_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ApplyDamage(Owner, Owner, 200, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 1, default, default, default, default);
        ;
        ;
        ;
        ;
        RedirectGold(Owner, Nothing);
        ;
        ;
        ;
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        ;
        ;
        ;
        SpellEffectRemove(this.AuraParticle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle);
        ;
        ;
        CastPos = SetVarInTable(this.CastPos);
        ;
        ;
        ;
        TeleportToPosition(Owner, CastPos);
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.part);
        ;
        ;
        FinishedTime = GetGameTime();
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.ak);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(ee, default, "summoner_battlecry_obd.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Owner, default, default, false, false, false, false, false, default, default);
        RemovePerceptionBubble(this.Bubble);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.ParticleID2);
        SpellEffectRemove(this.DotPart);
        FoundUnit = SetVarInTable(false);
        ForNClosestUnitsInTargetArea(Owner, Owner, 900, "AffectEnemies AffectHeroes ", 1, false, "Stealth", (Iterator) =>
        {
            FoundUnit = SetVarInTable(false);
            CanSee = CanSeeTarget(Owner, Unit);
            ;
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.waypoint);
        RemovePerceptionBubble(this.BubbleID);
        SpellBuffAdd(Owner, Owner, "WillRevive", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        ;
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, default, default, default, default);
        SpellEffectRemove(this.Particle);
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        ;
        ;
        ;
        ;
        Alert("Should not be here", default);
        ;
        ;
        ;
        ;
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        ;
        ;
        ;
        FoundUnit = SetVarInTable(false);
        ForNClosestUnitsInTargetArea(Owner, Owner, 900, "AffectEnemies AffectHeroes ", 1, false, "Stealth", (Iterator) =>
        {
            FoundUnit = SetVarInTable(true);
            CanSee = CanSeeTarget(Owner, Unit);
            ;
            ;
        });
        ;
        UnlockAnimation(Owner, default);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, default, default, default, default);
        ;
        RemovePerceptionBubble(this.bubbleID);
        ;
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        ;
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.c);
        SpellEffectRemove(this.d);
        SpellEffectRemove(this.e);
        SpellEffectRemove(this.f);
        SpellEffectRemove(this.g);
        SpellEffectRemove(this.h);
        ;
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.c);
        SpellEffectRemove(this.d);
        SpellEffectRemove(this.e);
        SpellEffectRemove(this.f);
        SpellEffectRemove(this.g);
        SpellEffectRemove(this.h);
        NextBuffVars.WillRemove = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, "OdinDebacleCloak", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffClear(Owner, "OdinBombSuppressionOrder");
        SpellBuffClear(Owner, "OdinBombSuppressionChaos");
        SpellEffectRemove(this.buffParticle);
        ;
        ;
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        ;
        SpellBuffAdd(Owner, Owner, "Internal_50MS", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OdinGrievousWound", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellEffectRemove(this.buffParticle);
        ;
        SpellEffectRemove(this.Particle1);
        ;
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.buffParticle2);
        SpellEffectRemove(this.crystalParticle);
        SpellEffectRemove(this.crystalParticle2);
        RemovePerceptionBubble(this.OrderBubble);
        RemovePerceptionBubble(this.ChaosBubble);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.ParticleOrder);
        SpellEffectRemove(this.ParticleChaos);
        TeamID = GetTeamID(default);
        RemovePerceptionBubble(this.BubbleID);
        ;
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.PlatformParticle);
        SpellEffectRemove(this.PlatformParticle2);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.ParticleOrder);
        SpellEffectRemove(this.ParticleChaos);
        ;
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        ;
        SpellEffectRemove(this.ParticleOrder);
        SpellEffectRemove(this.ParticleChaos);
        SpellEffectRemove(this.buffParticle);
        ;
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        ;
        RemoveShield(Owner, 0 + this.TotalArmorAmount, true, true);
        SpellEffectRemove(this.buffParticle2);
        SpellEffectRemove(this.ShamanAuraParticle);
        ;
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        RemovePerceptionBubble(this.BubbleID3);
        RemovePerceptionBubble(this.BubbleID4);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.buffParticle2);
        CurrentPos = GetUnitPosition(Owner);
        SetCameraPosition("Owner", CurrentPos);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.buffParticle);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        SpellEffectRemove(this.buffParticle);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        RemovePerceptionBubble(this.ThisBubble);
        SpellEffectRemove(this.SCP);
        SpellEffectRemove(this.Agony);
        SpellEffectRemove(this.ParticleOrder);
        SpellEffectRemove(this.ParticleChaos);
        SpellEffectRemove(this.buffParticle);
        ;
        ;
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        ;
        SpellEffectRemove(this.ParticleOrder);
        SpellEffectRemove(this.ParticleChaos);
        ;
        IssueOrder(Owner, AI_ORDER_NONE, default, Owner);
        SpellEffectRemove(this.Part);
        ;
        SpellEffectRemove(this.ParticleID);
        ;
        SpellBuffClear(Owner, "OdinBombSuppressionOrder");
        SpellBuffClear(Owner, "OdinBombSuppressionChaos");
        SpellBuffClear(Owner, "OdinGuardianSuppressionOrder");
        SpellBuffClear(Owner, "OdinGuardianSuppressionChaos");
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ApplyDamage(Owner, Owner, 25000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        ;
        SpellEffectRemove(this.buffParticle);
        ;
        ;
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        ;
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.Particle1);
        ;
        SpellEffectRemove(this.buffParticle);
        RemoveShield(Owner, 0 + this.TotalArmorAmount, true, true);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.ParticleOrder);
        SpellEffectRemove(this.ParticleChaos);
        SpellEffectRemove(this.buffParticle);
        SpellEffectRemove(this.buffParticle);
        ;
        ;
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        ;
        SpellEffectRemove(this.buffParticle);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        SpellEffectRemove(this.EmblemParticle);
        ;
        ;
        ;
        SpellEffectRemove(this.ZephrisPendant);
        ApplyDamage(Owner, Owner, 1500, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, default, default, default, default);
        SpellEffectCreate(poofout, default, "jackintheboxpoof.troy", default, default, default, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, default, default, default, default, default, default, default);
        SpellEffectRemove(this.buffParticle);
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectTurrets ", default, default, (Iterator) =>
        {
            ;
            ;
            ;
        });
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 0 + this.StartDecay, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, true, false, default, default);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.b);
        ;
        this.ID = PushCharacterFade(Owner, 1, default, this.ID);
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(hi, default, "leblanc_mirrorimage_death.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Owner, default, default, true, default, default, false, false, default, default);
        ;
        ApplyDamage(Owner, Owner, 10000, MAGIC_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Owner);
        SpellEffectRemove(this.YellowIndicator);
        ;
        UnlockAnimation(Owner, true);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "LeblancSlideM");
        ;
        BaseCooldown = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + CooldownPerc, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.SoulShackleIdleM);
        SpellEffectRemove(this.SoulShackleTarget);
        ;
        ;
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.DistortionFx);
        SpellEffectRemove(this.b);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        ;
        SpellEffectRemove(this.YellowIndicator);
        ;
        ;
        UnlockAnimation(Owner, true);
        ;
        BaseCooldown = SetVarInTable(VALUE_BY_LEVEL);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "LeblancSlide");
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + CooldownPerc);
        ;
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.SoulShackleIdle);
        SpellEffectRemove(this.SoulShackleTarget);
        SpellEffectRemove(this.SoulShackleTarget_blood);
        ;
        ;
        SpellEffectRemove(this.b);
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.DistortionFx);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ApplyDamage(Owner, Owner, 4000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "MaokaiDrain3");
        ;
        Cooldown = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        ;
        RemovePerceptionBubble(this.UnitPerceptionBubble);
        ;
        ;
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        SpellEffectRemove(this.Particle);
        Caster = SetBuffCasterUnit();
        ;
        NextBuffVars.DefensiveBonus = SetVarInTable(VALUE_BY_LEVEL);
        StopMoveBlock(Owner);
        ;
        SpellEffectRemove(this.RootParticleEffect2);
        SpellEffectRemove(this.RootParticleEffect);
        SpellEffectRemove(this.taric);
        ClearOverrideAnimation("Attack", Owner);
        ClearOverrideAnimation("Attack2", Owner);
        ClearOverrideAnimation("Crit", Owner);
        ;
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        SpellEffectCreate(arrr, default, "fling_land.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Target, default, default, true, default, default, default, default, default, default);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ;
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        NextBuffVars.Duration = SetVarInTable(this.Duration);
        NextBuffVars.SlowPercent = SetVarInTable(this.SlowPercent);
        SpellBuffAdd(Attacker, Owner, "MegaAdhesiveApplicator", 1, 1, 0 + this.Duration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        TeamID = GetTeamID(default);
        VeigarSkinID = GetSkinID(Attacker);
        ;
        ;
        ForEachUnitInTargetArea(Attacker, Owner, 240, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + this.DamageAmount, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
        });
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        ;
        ;
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        RemovePerceptionBubble(this.ThisBubble);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        SpellEffectRemove(this.slow);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        ;
        ;
        ;
        ;
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        SpellEffectRemove(this.slow);
        ;
        ;
        CD = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "BlindMonkQOne");
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        CD = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "BlindMonkEOne");
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectRemove(this.turntostone);
        ;
        ;
        ;
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        ;
        CD = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "BlindMonkWOne");
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        ;
        UnlockAnimation(Owner, true);
        ;
        ;
        IssueOrder(Owner, AI_ATTACKTO, default, Target);
        ;
        ;
        SpellEffectRemove(this.Part1);
        SpellEffectRemove(this.Part2);
        SpellEffectRemove(this.Part3);
        SpellEffectRemove(this.Part4);
        OwnerSkinID = GetSkinID(Owner);
        ;
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 4);
        SpellEffectRemove(this.Particle);
        RemovePerceptionBubble(this.BubbleStuff);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.ParticleID2);
        RemovePerceptionBubble(this.a);
        RemovePerceptionBubble(this.b);
        SpellEffectRemove(this.Particle);
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Owner);
        SpellBuffAdd(Owner, Owner, "LuxDeathParticle", 1, 1, 250000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ;
        TargetPos = SetVarInTable(CharVars.TargetPos);
        TargetPos = GetUnitPosition(Target);
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "pantheon_grandskyfall_land.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Target, false, Nothing, default, TargetPos, Target, default, TargetPos, true, default, default, false, false, default, default);
        TargetPos = SetVarInTable(this.TargetPos);
        NextBuffVars.AttackSpeedMod = SetVarInTable(0);
        NextBuffVars.MoveSpeedMod = SetVarInTable(-0.35);
        OwnerPos = GetUnitPosition(Owner);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "Pantheon_GrandSkyfall_FallD", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = SetVarInTable(CharVars.TargetPos);
        ;
        this.DamageRank = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Target, TargetPos, 700, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            UnitPos = GetUnitPosition(Unit);
            Distance = DistanceBetweenPoints(TargetPos, UnitPos);
            ;
            ;
            ;
            ApplyDamage(Attacker, Unit, 0 + this.DamageRank, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + PercentDamage, 1, 1, false, false, Attacker);
            NextBuffVars.MoveSpeedMod = SetVarInTable(-0.35);
            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            SpellEffectCreate(a, default, "Globalhit_physical.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "head", default, Target, default, default, false, default, default, false, false, default, default);
        });
        SpellEffectRemove(this.NewName);
        RemovePerceptionBubble(this.BubbleID);
        SpellEffectRemove(this.Part);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.NewName);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.KIRHand);
        ;
        SpellBuffRemove(Owner, "Pantheon_HeartseekerSound", Owner, 0);
        SpellBuffRemove(Owner, "Pantheon_Heartseeker", Owner, 0);
        SpellBuffRemove(Owner, "Pantheon_HeartseekerChannel", Owner, 0);
        UnlockAnimation(Owner, false);
        ;
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle);
        ClearOverrideAnimation("Run", Owner);
        ;
        ;
        BoomDamage = SetVarInTable(VALUE_BY_LEVEL);
        Position = SetVarInTable(this.Position);
        ForEachUnitInTargetArea(Attacker, Position, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + BoomDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
            SpellEffectCreate(PartExplodeHit, default, "globalhit_mana.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, false, false, false, false, false, default, default);
            ;
        });
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "LuxLightstrikeKugel");
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        CasterID = GetTeamID(default);
        ;
        ;
        RemovePerceptionBubble(this.BubbleID);
        SpellBuffAdd(Owner, Owner, "Pantheon_AegisShield", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.Geeves1);
        SpellEffectRemove(this.Geeves2);
        ForEachUnitInTargetArea(Owner, this.Attacker, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyDamage(Owner, Unit, 300, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Owner);
        });
        ApplyDamage(Attacker, Attacker, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Attacker);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "LuxLightstrikeKugel");
        ;
        ;
        RemoveOverrideAutoAttack(Owner, false);
        ;
        ;
        PushCharacterFade(Owner, 1, default, default);
        ;
        SpellEffectRemove(this.AkaliStealth);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "GarenBladestorm");
        ;
        ;
        StopCurrentOverrideAnimation("Spell3", Owner, false);
        ClearOverrideAnimation("Run", Owner);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.ParticleID);
        ;
        ;
        SpellEffectRemove(this.Part);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Part);
        SpellBuffAdd(Owner, Owner, "GarenRecouperateOn", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectRemove(this.taric);
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SpellEffectRemove(this.Particle);
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, false);
        SealSpellSlot(1, SpellSlots, Owner, false, default);
        ;
        ;
        SpellEffectRemove(this.Particle);
        ;
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ;
        IncHealth(Owner, 0 + this.HealthPlusAbility, Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(Part, default, "GuardianAngel_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        UnlockAnimation(Owner, false);
        PlayAnimation("idle1", 0, Owner, false, false, true);
        UnlockAnimation(Owner, false);
        ;
        ;
        SpellEffectRemove(this.asdf);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.ParticleID2);
        ;
        ;
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        ;
        ;
        Cooldown = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + FinalCooldown, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        Duration = GetBuffRemainingDuration(Owner, "AhriFoxFire");
        ;
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        ;
        StopMove(Owner);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        ;
        ;
        CharVars.FoxFireIsActive = SetVarInTable(0);
        CharVars.TumbleIsActive = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "AhriIdleParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "AhriPassiveParticle", Owner, 0);
        SpellBuffAdd(Attacker, Attacker, "AhriSoulCrusher4", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0.25, true, false, false, default);
        SpellEffectRemove(this.Particle1);
        ;
        ;
        ;
        SpellEffectRemove(this.Particle1);
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.partname, default, "Skarner_Exoskeleon_Shatter.troy", default, TEAM_NEUTRAL, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
        SpellEffectRemove(this.ChainPartID);
        SpellEffectRemove(this.CParticle);
        SpellEffectRemove(this.ZParticle);
        SpellEffectRemove(this.crystalineParticle);
        PauseAnimation(Owner, false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ClearOverrideAnimation("Run", Attacker);
        ClearOverrideAnimation("Idle1", Attacker);
        ClearOverrideAnimation("Idle2", Attacker);
        ClearOverrideAnimation("Idle3", Attacker);
        ClearOverrideAnimation("Idle4", Attacker);
        ClearOverrideAnimation("Spell2", Attacker);
        ClearOverrideAnimation("Spell1", Attacker);
        ;
        DamagePerTick = SetVarInTable(VALUE_BY_LEVEL);
        Duration = GetBuffRemainingDuration(Owner, "SkarnerImpale");
        ;
        RemovePerceptionBubble(this.VictimBubble);
        SpellBuffClear(Attacker, "SkarnerImpaleBuff");
        ;
        ;
        SpellEffectRemove(this.SandSwirl);
        UnlockAnimation(Owner, false);
        SpellEffectRemove(this.SelfParticle);
        SpellBuffRemove(Owner, "UnstoppableForceMarker", Owner, default);
        ;
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.FrostTurrets);
        ;
        ;
        ;
        SpellEffectRemove(this.MordekaiserParticle);
        SpellEffectRemove(this.SSSlow);
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Owner);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ;
        SpellBuffClear(Owner, "Taunt");
        ;
        SpellBuffClear(Owner, "Taunt");
        SpellBuffClear(Owner, "Taunt");
        ;
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.LandslideLHand);
        SpellEffectRemove(this.LandslideRHand);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, false);
        ;
        ;
        ;
        ;
        RemoveOverrideAutoAttack(Owner, true);
        SpellEffectRemove(this.SandLHand);
        SpellEffectRemove(this.SandRHand);
        SpellEffectRemove(this.Sandroot);
        SpellEffectRemove(this.SEPar);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SpellBuffClear(Owner, "SkarnerVirulentSlashEnergy1");
        SpellBuffClear(Owner, "SkarnerVirulentSlashEnergy2");
        SpellBuffAdd(Owner, Owner, "MalphiteShieldRemoval", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.Particle1);
        ;
        PopCharacterFade(Owner, this.ID);
        SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Target, "CamouflageBuff", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        ;
        RemovePerceptionBubble(this.bubbleID);
        UnlockAnimation(Owner, true);
        TeemoTeam = GetTeamID(default);
        SpellEffectCreate(Particle, default, "ShroomMine.troy", default, TeemoTeam ?? TEAM_UNKNOWN, 300, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, false, default, default, default, default, default, default);
        ForEachUnitInTargetArea(Attacker, Owner, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            NextBuffVars.AttackSpeedMod = SetVarInTable(0);
            NextBuffVars.MoveSpeedMod = SetVarInTable(-0.6);
            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 4, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
        });
        ApplyDamage(Owner, Owner, 500, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        RemovePerceptionBubble(this.bubbleID);
        ;
        ;
        ;
        SpellEffectRemove(this.Particle);
        ;
        UnlockAnimation(Owner, true);
        ;
        SpellEffectRemove(this.Particle);
        SetTargetingType(0, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Location, Owner);
        SpellEffectRemove(this.Particle);
        TeamID = GetTeamID(default);
        CastPos = SetVarInTable(this.CastPos);
        Other1 = SpawnMinion("TestCube", "TestCubeRender", "idle.lua", this.CastPos, TeamID ?? TEAM_CASTER, false, true, false, true, false, true, 0, false, true, Owner, default);
        UnitPos2 = GetUnitPosition(Other1);
        FacePos = SetVarInTable(this.FacePos);
        FaceDirection(Other1, FacePos);
        ;
        ;
        NextBuffVars.Speed = SetVarInTable(150);
        NextBuffVars.Gravity = SetVarInTable(45);
        NextBuffVars.IdealDistance = SetVarInTable(100);
        ;
        ;
        ;
        ;
        SpellCast(Owner, Nothing, FacePos, FacePos, true, 0, ExtraSlots, 0 + this.Level, true, true, false, false, false, UnitPos2);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        Cooldown = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + Cooldown);
        SetTargetingType(1, SpellSlots, default, TTYPE_Target, Owner);
        SpellEffectRemove(this.MoveQuickParticle);
        SpellBuffClear(Owner, "TeemoMoveQuickDebuff");
        SpellBuffAdd(Attacker, Target, "TeemoMoveQuickSpeed", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
        ;
        SpellEffectRemove(this.UltMagicParticle);
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_SelfAOE, Owner);
        ;
        ;
        ;
        ;
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        SpellBuffAdd(Owner, Owner, "IreliaIdleParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        ;
        ;
        SpellEffectRemove(this.TremorsFx);
        SpellEffectRemove(this.Particle);
        ;
        ;
        SpellEffectRemove(this.Shieldz);
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        PopAllCharacterData(Owner);
        SpellEffectCreate(default, default, "PowerBallStop.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + CooldownTime);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.slow);
        CharVars.count = SetVarInTable(0);
        RemoveOverrideAutoAttack(Owner, false);
        SpellEffectRemove(this.LeftHand);
        SpellEffectRemove(this.RightHand);
        SetDodgePiercing(Owner, true);
        SpellEffectRemove(this.particleID);
        ;
        ;
        ;
        SpellEffectRemove(this.MoveQuickParticle);
        SpellBuffRemove(Owner, "Taunt", Attacker, default);
        StartTrackingCollisions(Owner, false);
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        SpellBuffRemove(Owner, "Taunt", Attacker, default);
        SpellEffectRemove(this.asdf1);
        PopCharacterData(Owner, this.CasterID);
        SpellEffectCreate(default, default, "DBC_out.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        baseCD = SetVarInTable(14);
        ;
        ;
        ;
        ;
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "DefensiveBallCurl");
        SetSlotSpellCooldownTimeVer2(0 + FinalCooldown, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectRemove(this.particle);
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        ;
        SpellEffectRemove(this.IreliaHitenStyle1);
        SpellEffectRemove(this.IreliaHitenStyle2);
        ;
        SpellBuffAdd(Owner, Owner, "IreliaHitenStyle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle1);
        ;
        ;
        PushCharacterFade(Owner, 1, default, default);
        ;
        ;
        ;
        ;
        ;
        SpellCast(Owner, Owner, default, default, false, 1, ExtraSlots, 0 + Level, false, false, false, true, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingKillCloneW", 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectRemove(this.HymnAura);
        ApplyDamage(Attacker, Owner, 0 + this.DamageAmount, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.266, 1, false, false, Attacker);
        ;
        ;
        ;
        ClearOverrideAnimation("Idle1", Owner);
        SpellEffectRemove(this.particleID);
        SpellEffectRemove(this.SongAura);
        SpellEffectRemove(this.Part2);
        SpellEffectRemove(this.asdf);
        Level = SetVarInTable(this.Level);
        SpellEffectRemove(this.particleID);
        ;
        SpellEffectRemove(this.Part);
        ;
        SpellEffectRemove(this.asdf1);
        SpellEffectRemove(this.Part);
        TargetPos = SetVarInTable(this.TargetPos);
        ;
        SpellCast(Attacker, Nothing, TargetPos, TargetPos, true, 0, ExtraSlots, 0 + Level, true, true, false, false, false, Owner);
        ;
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Owner);
        NextBuffVars.Particle2 = SetVarInTable(this.Particle2);
        NextBuffVars.Particle3 = SetVarInTable(this.Particle3);
        SpellBuffAdd(Attacker, Attacker, "AlZaharCallR", 2, 1, 0.75, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.AriaAura);
        SpellEffectRemove(this.particleID);
        SetDodgePiercing(Owner, false);
        SetAutoAcquireTargets(Owner, true);
        SpellBuffRemove(Owner, "SonaHymnofValorCheck", Owner, 0);
        SpellBuffRemove(Owner, "SonaAriaofPerseveranceCheck", Owner, 0);
        SpellBuffRemove(Owner, "SonaSongofDiscordCheck", Owner, 0);
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.Particle4);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.Particle1);
        ;
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        RemoveOverrideAutoAttack(Owner, true);
        SetDodgePiercing(Owner, false);
        ApplyDamage(Owner, Owner, 8000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, default);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.c);
        SpellEffectRemove(this.d);
        ;
        ;
        ;
        ;
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.particle1);
        TeamID = GetTeamID(default);
        SpellEffectCreate(StoneRemoval, default, "MonkeyKingPHRemoveRocks.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        SpellEffectRemove(this.Particle1);
        ;
        ;
        StopCurrentOverrideAnimation("Spell4", Owner, true);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.ParticleID);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "MonkeyKingSpinToWin");
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "MonkeyKingKillClone", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        UnlockAnimation(Owner, true);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        SpellEffectRemove(this.SelfParticle);
        ;
        ;
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        SpellEffectRemove(this.WindVFXAlly);
        SpellEffectRemove(this.WindVFXEnemy);
        ;
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        ;
        ;
        ;
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.BuffVFXAlly);
        SpellEffectRemove(this.BuffVFXEnemy);
        CenterPos = GetUnitPosition(Owner);
        ForEachUnitInTargetArea(Owner, CenterPos, 25000, "AffectEnemies AffectFriends AffectMinions AffectHeroes AffectUntargetable ", "ViktorChaosStormGuide", true, (Iterator) =>
        {
            ;
            ;
        });
        ;
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        SpellBuffRemove(Attacker, "ViktorChaosStormTimer", Attacker, 0);
        SetSpell(Attacker, 3, SpellSlots, SPELLBOOK_CHAMPION, "ViktorChaosStorm");
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NEWCD, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker, false);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.c);
        ;
        SpellBuffAdd(Owner, Owner, "XenZhaoBattleCryPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellEffectRemove(this.PassivePart);
        SpellEffectRemove(this.BattleCries);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.asdf2);
        SpellEffectRemove(this.asdf1);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        SpellEffectRemove(this.MRShield);
        ;
        ;
        ;
        SpellEffectRemove(this.asdf1);
        SpellEffectRemove(this.asdf2);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        ;
        CooldownByLevel = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + TrueCD, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ;
        ;
        SpellEffectRemove(this.asdf2);
        SpellEffectRemove(this.asdf1);
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        CooldownByLevel = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        ClearOverrideAnimation("Run", Owner);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.hi);
        TeamID = GetTeamID(default);
        SpellEffectRemove(this.ChannelVFX);
        SpellEffectRemove(this.AreaVFXAlly);
        SpellEffectRemove(this.AreaVFXEnemy);
        SpellEffectCreate(ExplosionVFX, default, "galio_talion_breakout.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        SpellEffectCreate(ExplosionVFX, default, "galio_builingStatue_impact_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 575, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Owner, Unit, 0 + this.BaseDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + totalDmgPercent, 0.6, 1, false, false, Owner);
            SpellBuffRemove(Unit, "Taunt", Owner, 0);
            SpellBuffRemove(Unit, "GalioIdolOfDurandTaunt", Owner, 0);
            SpellEffectCreate(TargetVFX, default, "galio_builingStatue_unit_impact_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, false, default, default, false, false, default, default);
        });
        SpellEffectRemove(this.TauntVFX);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID);
        ;
        SpellEffectRemove(this.CataclysmSound);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Target, Owner);
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        OwnerPos = GetUnitPosition(Attacker);
        SpellEffectCreate(asdf, default, "JarvanWallCrumble.troy", default, TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Nothing, "root", OwnerPos, Owner, default, default, true, false, false, false, false, default, default);
        ;
        ApplyDamage(Attacker, Attacker, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Target, Owner);
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        SpellBuffClear(Owner, "JarvanIVCataclysm");
        ;
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "DeathsCaressFull");
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SetPARCostInc(Owner, 1, SpellSlots, 0, PAR_MANA);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 0, false, false, Attacker);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.hit);
        ;
        ;
        RemovePerceptionBubble(this.BubbleID);
        RemoveShield(Owner, 10000, true, true);
        RemoveOverrideAutoAttack(Owner, false);
        ;
        SpellEffectCreate(part22, default, "bowmaster_frostHawk_terminate.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(part23, default, "bowmaster_frostHawk_terminate_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, false, default, default, default, default, default, default);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, default);
        ClearOverrideAnimation("Run", Owner);
        ForEachUnitInTargetArea(Owner, Owner, 260, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ;
        });
        SpellEffectRemove(this.DragonStrikeSound);
        ;
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, default);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.HitParticle);
        SpellEffectRemove(this.asdf);
        ;
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        SpellBuffAdd(Owner, Owner, "OlafAxeExpirationTimer2", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        Level = SetVarInTable(this.Level);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        TeamID = GetTeamID(default);
        ;
        ;
        ForEachUnitInTargetArea(Attacker, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + this.DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, true, true, Attacker);
        });
        OwnerPos = GetUnitPosition(Owner);
        Other3 = SpawnMinion("Beacon", "JarvanIVStandard", "idle.lua", OwnerPos, TeamID ?? TEAM_UNKNOWN, true, true, false, false, true, true, 0, false, false, Attacker, default);
        NextBuffVars.ArmorMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Other3, "JarvanIVDemacianStandard", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellBuffAdd(Owner, Owner, "NoRenderExpirationBuff", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectRemove(this.Particle1);
        ;
        CastPos = SetVarInTable(this.CastPos);
        ;
        ;
        ;
        TeleportToPosition(Owner, CastPos);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectCreate(Particle, default, "swain_metamorph.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        BuffCheck = SetVarInTable(0);
        ;
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        ;
        ;
        ;
        baseCooldown = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectCreate(this.a, default, "swain_disintegrationBeam_cas_end.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        SpellEffectRemove(this.CParticle);
        SpellEffectRemove(this.BParticle);
        SpellEffectRemove(this.DParticle);
        ;
        SpellBuffAdd(Owner, Owner, "SwainBeamExpirationTimer", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        ;
        ;
        SpellBuffRemove(Attacker, "SwainBeamSelf", Attacker, 0);
        SpellEffectCreate(default, default, "nassus_godofDeath_transform.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectRemove(this.AuraParticle);
        PopCharacterData(Owner, this.CasterID);
        SpellEffectCreate(this.a, default, "swain_disintegrationBeam_cas_end.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        SpellEffectRemove(this.CParticle);
        SpellEffectRemove(this.BParticle);
        SpellEffectRemove(this.DParticle);
        ;
        SpellBuffAdd(Owner, Owner, "SwainBeamExpirationTimer", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        PauseAnimation(Owner, false);
        ;
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        ;
        ;
        OwnerTeamID = GetTeamID(default);
        SpellEffectCreate(SoundID, default, "viktor_gravitonfield_deactivate_sound.troy", default, OwnerTeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, default, default, this.TargetPos, default, default, this.TargetPos, true, false, false, false, false, default, default);
        baseCooldown = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ;
        ;
        SpellBuffRemove(Owner, "SwainBeamSelf", Owner, 0);
        ;
        ;
        SpellBuffRemove(Attacker, "SwainBeamSelf", Attacker, 0);
        RemovePerceptionBubble(this.BubbleID);
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        SpellEffectRemove(this.GateParticle2);
        SpellEffectRemove(this.GateParticle);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        DestroyMissileForTarget(Owner);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        ;
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        ;
        SpellEffectRemove(this.TeleportParticle);
        SpellBuffAdd(Owner, Owner, "GateFix", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        ;
        ;
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "Destiny");
        ;
        SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        SpellEffectRemove(this.GateParticle);
        SpellEffectRemove(this.GateParticle2);
        SpellBuffRemove(Owner, "PickaCard", Owner, default);
        SealSpellSlot(2, SpellSlots, Owner, true, default);
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "PickACard");
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        BaseCooldown = SetVarInTable(6);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        ;
        SpellBuffRemove(Owner, "GoldCardPreAttack", Owner, 0);
        SpellBuffRemove(Owner, "RedCardPreAttack", Owner, 0);
        SpellBuffRemove(Owner, "BlueCardPreAttack", Owner, 0);
        SetAutoAcquireTargets(Owner, true);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.EffectID);
        BaseCooldown = SetVarInTable(4);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SpellEffectRemove(this.ChargedBladeEffect);
        this.AttackSpeedBoost = SetVarInTable(0);
        SpellEffectRemove(this.SwainTormentEffect);
        SpellEffectRemove(this.SwainDoTEffect);
        SpellEffectRemove(this.SwainDoTEffect2);
        SpellEffectRemove(this.EffectID);
        BaseCooldown = SetVarInTable(4);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, false);
        SpellEffectRemove(this.Boom);
        SpellEffectRemove(this.Boom2);
        SpellEffectRemove(this.c);
        ;
        SpellEffectRemove(this.RootParticleEffect2);
        SpellEffectRemove(this.RootParticleEffect);
        NextBuffVars.InitialDamage = SetVarInTable(this.InitialDamage);
        NextBuffVars.Damage = SetVarInTable(this.Damage);
        NextBuffVars.ArmorReduction = SetVarInTable(this.ArmorReduction);
        NextBuffVars.TargetPos = SetVarInTable(this.TargetPos);
        SpellBuffAdd(Attacker, Owner, "SpiritFireAoE", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectRemove(this.GroundParticleEffect);
        SpellEffectRemove(this.GroundParticleEffect2);
        SpellEffectRemove(this.a);
        ForEachUnitInTargetArea(Owner, Owner, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + this.GraspDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, "SwainShadowGraspRoot", 1, 1, 0 + this.RootDuration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, true, false, default);
        });
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.Particle);
        RemoveOverrideAutoAttack(Owner, false);
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.slow);
        RemoveOverrideAutoAttack(Owner, true);
        SpellEffectRemove(this.a);
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        RemoveOverrideAutoAttack(Owner, false);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        BaseCooldown = SetVarInTable(11);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        this.ID = PushCharacterFade(Owner, 1, default, this.ID);
        SetPARCostInc(Owner, 0, SpellSlots, 0, PAR_MANA);
        ;
        ;
        ;
        ;
        NextBuffVars.AttackSpeedMod = SetVarInTable(this.AttackSpeedMod);
        SpellBuffAdd(Owner, Owner, "HideInShadowsBuff", 1, 1, 0.5 + TimeSinceLast, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.WillRemove = SetVarInTable(false);
        NextBuffVars.AttackSpeedMod = SetVarInTable(this.AttackSpeedMod);
        SpellBuffAdd(Owner, Owner, "HideInShadows", 1, 1, 0 + this.StealthDuration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, default, default);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        SpellEffectRemove(this.DeathLotus);
        ;
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.c);
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ApplyDamage(Attacker, Owner, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        ;
        SpellEffectRemove(this.RootParticleEffect2);
        SpellEffectRemove(this.RootParticleEffect);
        SpellEffectRemove(this.c);
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        SetDodgePiercing(Owner, false);
        ;
        DamageMods = SetVarInTable(VALUE_BY_LEVEL);
        AttackDamage = GetTotalAttackDamage(Attacker);
        ;
        ApplyDamage(Attacker, Target, 0 + SuperDamage, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 1, false, false, Attacker);
        SpellBuffAdd(Attacker, Target, "KennenMarkofStorm", 5, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, false, default);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.GroundParticleEffect);
        SpellEffectRemove(this.GroundParticleEffect2);
        TeamID = GetTeamID(default);
        OwnerPos = GetUnitPosition(Owner);
        BrandSkinID = GetSkinID(Attacker);
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 260, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ;
            ;
            SpellBuffAdd(Attacker, Unit, "BrandAblaze", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ;
            ;
        });
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.asdf1);
        SpellEffectRemove(this.GlobeOne);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "KennenLightningRush");
        ;
        SpellCD = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SpellEffectRemove(this.ar);
        ;
        SpellBuffRemove(Owner, "KennenLightningRush", Owner, default);
        ;
        SpellEffectCreate(Supervar, default, "kennen_lr_off.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        PopCharacterFade(Owner, this.LitRush);
        ;
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + RealCD);
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.varrr1);
        SpellEffectRemove(this.KISpeed);
        this.ID = PushCharacterFade(Owner, 1, default, this.ID);
        SpellEffectRemove(this.KILHand);
        SpellEffectRemove(this.KIRHand);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        ;
        ;
        ;
        ;
        ;
        ;
        this.ID = PushCharacterFade(Owner, 1, default, this.ID);
        SpellEffectRemove(this.Particle);
        ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyDamage(Attacker, Unit, 0, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
        });
        SpellEffectCreate(this.Particle1, default, "Vlad_Bloodking_Blood_Skin.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectRemove(this.temp);
        ;
        SpellEffectRemove(this.Temp);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Attacker);
        SpellBuffClear(Owner, "RivenCounterReady");
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "RivenCounter");
        SetSlotSpellCooldownTimeVer2(10, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ;
        PushCharacterFade(Owner, 1, default, default);
        SpellBuffAdd(Owner, Owner, "AkaliHoldStealth", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        SpellEffectRemove(this.AkaliStealth);
        ;
        ;
        ;
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.Temp);
        ;
        ;
        BaseCD = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "RivenFengShuiEngine");
        SetSlotSpellCooldownTimeVer2(0 + NewCD, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ClearOverrideAnimation("Attack1", Owner);
        ClearOverrideAnimation("Attack2", Owner);
        ClearOverrideAnimation("Attack3", Owner);
        ClearOverrideAnimation("Crit", Owner);
        ClearOverrideAnimation("Idle1", Owner);
        ClearOverrideAnimation("Run", Owner);
        ClearOverrideAnimation("Spell1a", Owner);
        ClearOverrideAnimation("Spell1b", Owner);
        ClearOverrideAnimation("Spell1c", Owner);
        ClearOverrideAnimation("Spell2", Owner);
        ClearOverrideAnimation("Spell3", Owner);
        AttackDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        SetSpellToolTipVar(0 + QAttackDamage, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ;
        SetSpellToolTipVar(0 + RAttackDamage, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ;
        SetSpellToolTipVar(0 + RAttackDamage, 2, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ;
        SetSpellToolTipVar(0 + EAttackDamage, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ;
        SetSpellToolTipVar(0 + WAttackDamage, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SpellEffectRemove(this.Temp);
        SpellEffectRemove(this.Temp2);
        SpellEffectRemove(this.Temp3);
        SpellEffectRemove(this.Temp4);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellBuffClear(Owner, "RivenWindSlashReady");
        ResetVoiceOverride(Owner);
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        ;
        NextBuffVars.WillRemove = SetVarInTable(false);
        ;
        ;
        ;
        OwnerPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        ;
        ;
        ForEachUnitInTargetArea(Attacker, Owner, 265, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + this.DamageAmount, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.2, 1, false, false, Attacker);
        });
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0.8, 1, false, false, Attacker);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        RemovePerceptionBubble(this.BubbleID);
        SpellEffectRemove(this.Particle);
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, default, default, default, default);
        ;
        ;
        ;
        SpellBuffClear(Owner, "UnlockAnimation");
        ;
        ;
        baseCooldown = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Area, Owner);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.AmbientParticle);
        ;
        ;
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_RAW, 1, 1, 1, false, false, default);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "RivenTriCleave");
        ;
        SpellBuffAdd(Owner, Owner, "RivenTriCleaveUnlock", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RivenTriCleaveGhost", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForNClosestUnitsInTargetArea(Owner, this.TargetPos, 175, "AffectEnemies AffectHeroes ", 1, true, default, (Iterator) =>
        {
            this.TargetPos = GetUnitPosition(Unit);
        });
        ;
        SpellCast(Owner, Nothing, this.TargetPos, this.TargetPos, false, 4, ExtraSlots, 0 + this.Level, true, false, false, false, false, default);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "RivenTriCleave");
        ;
        SpellEffectRemove(this.ParticleID);
        ;
        ;
        ;
        RemoveOverrideAutoAttack(Owner, true);
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, false);
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.Particle);
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "RivenTriCleave");
        Duration = GetBuffRemainingDuration(Owner, "RivenTriCleaveCooldown");
        ;
        SetSlotSpellCooldownTimeVer2(0 + Duration, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ;
        SpellBuffClear(Owner, "RivenTriCleaveCooldown");
        ;
        SpellEffectRemove(this.asdf1);
        ;
        ;
        ApplyDamage(Owner, Target, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SetTargetingType(0, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_Location, Owner);
        ;
        ;
        CooldownPerLevel = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        RemoveOverrideAutoAttack(Owner, true);
        ClearOverrideAnimation("Run", Owner);
        ClearOverrideAnimation("Idle1", Owner);
        SpellEffectRemove(this.bearparticle);
        UnlockAnimation(Owner, true);
        StartTrackingCollisions(Owner, false);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.ShinyParticle);
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", false, (Iterator) =>
        {
            ShouldHit = SetVarInTable(true);
            Visible = CanSeeTarget(Owner, Unit);
            ;
            this.HitUnit = SetVarInTable(true);
            ;
            ;
            ;
            SpellBuffAdd(Owner, Unit, "RenektonTargetSliced", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ;
            ;
            ;
            ;
            ;
        });
        ForEachUnitInTargetArea(Owner, Owner, 1250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", true, (Iterator) =>
        {
            SpellBuffClear(Unit, "RenektonTargetSliced");
        });
        ;
        UnlockAnimation(Owner, true);
        Duration = GetBuffRemainingDuration(Owner, "RenektonSliceAndDiceTimer");
        SpellBuffClear(Owner, "RenektonSliceAndDiceTimer");
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "RenektonSliceAndDice");
        SetSlotSpellCooldownTimeVer2(0 + Duration, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, default);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.c);
        ;
        ;
        ;
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        UnlockAnimation(Owner, true);
        ;
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.SelfParticle);
        SpellEffectRemove(this.SelfParticle2);
        SpellEffectRemove(this.SelfParticle3);
        SpellEffectRemove(this.SelfParticle4);
        SpellEffectRemove(this.SelfParticle5);
        SpellEffectRemove(this.SelfParticle6);
        SpellEffectRemove(this.SelfParticle7);
        SpellEffectRemove(this.SelfParticle8);
        SpellEffectRemove(this.SelfParticle9);
        SpellEffectRemove(this.SelfParticle10);
        SpellEffectRemove(this.SelfParticle11);
        SpellEffectRemove(this.SelfParticle12);
        SpellBuffAdd(Owner, Owner, "RenektonUppercutBlow", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        UnlockAnimation(Owner, true);
        StartTrackingCollisions(Owner, false);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.ShinyParticle);
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", false, (Iterator) =>
        {
            ShouldHit = SetVarInTable(true);
            Visible = CanSeeTarget(Owner, Unit);
            ;
            this.HitUnit = SetVarInTable(true);
            ;
            ;
            ;
            SpellBuffAdd(Owner, Unit, "RenektonTargetSliced", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ;
            ;
            ;
            ;
            ;
        });
        ForEachUnitInTargetArea(Owner, Owner, 1250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", true, (Iterator) =>
        {
            SpellBuffClear(Unit, "RenektonTargetSliced");
        });
        ;
        ;
        ;
        IncPAR(Owner, -100);
        ;
        ;
        ;
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "ShyvanaDoubleAttack");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "ShyvanaImmolationAura");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown2, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "ShyvanaFireball");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown3, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "shyvana_ult_transform_end.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "ShyvanaDragonScales", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PopCharacterData(Owner, this.CasterID);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.c);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectCreate(default, default, "RenektonDominus_transform", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        UnlockAnimation(Owner, true);
        ;
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        ;
        ;
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        OwnerVar = GetTeamID(default);
        ;
        SpellEffectRemove(this.a);
        CharVars.HitCount = SetVarInTable(0);
        ;
        ;
        ;
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.a);
        CharVars.HitCount = SetVarInTable(0);
        NextBuffVars.WillRemove = SetVarInTable(false);
        NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
        NextBuffVars.TeamID = SetVarInTable(this.TeamID);
        SpellBuffAdd(Owner, Owner, "ShadowWalk", 1, 1, 0 + this.StealthDuration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.phoenix);
        RemoveOverrideAutoAttack(Owner, true);
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        RemoveOverrideAutoAttack(Owner, true);
        SetDodgePiercing(Owner, false);
        Owner = SetBuffCasterUnit();
        ;
        ;
        BaseCooldown = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        this.ID = PushCharacterFade(Owner, 1, default, this.ID);
        SetPARCostInc(Owner, 1, SpellSlots, 0, PAR_MANA);
        SpellEffectRemove(this.LHand);
        SpellEffectRemove(this.RHand);
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        RemoveOverrideAutoAttack(Owner, true);
        SetDodgePiercing(Owner, false);
        SpellBuffAdd(Owner, Owner, "ShadowWalkSpeed", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, default, default, default);
        TeamID = GetTeamID(default);
        SpellBuffAdd(Owner, Owner, "RebirthCooldown", 1, 1, 240, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.EggTimer);
        PopAllCharacterData(Owner);
        SpellBuffAdd(Owner, Owner, "RebirthReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellEffectRemove(this.turtle);
        SpellEffectRemove(this.Turtleparticle);
        RemoveOverrideAutoAttack(Owner, true);
        SpellEffectRemove(this.tiger);
        ;
        SpellEffectRemove(this.TurtleShield);
        SpellEffectRemove(this.Turtleparticle);
        ;
        SpellEffectRemove(this.lhand);
        SpellEffectRemove(this.rhand);
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ;
        SpellEffectCreate(a, default, "AlphaStrike_Slash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.glowblade);
        SpellEffectRemove(this.ParticleID);
        ;
        SpellBuffAdd(Owner, Owner, "MasterYiWujuDeactivated", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ApplyDamage(Attacker, Owner, 100, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, default, default, default, default);
        SpellEffectCreate(default, default, "globalhit_yellow_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ;
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Owner);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        OwnerCenter = GetUnitPosition(Owner);
        ;
        PopCharacterData(Owner, this.CougarID);
        SpellEffectCreate(Particle, default, "nidalee_transform.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + CD0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetSlotSpellCooldownTimeVer2(0 + CD1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetSlotSpellCooldownTimeVer2(0 + CD2, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        OwnerCenter = GetUnitPosition(Owner);
        ;
        PopCharacterData(Owner, this.CougarID);
        SpellEffectCreate(Particle, default, "nidalee_transform.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + CD0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetSlotSpellCooldownTimeVer2(0 + CD1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetSlotSpellCooldownTimeVer2(0 + CD2, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        UnlockAnimation(Owner, false);
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SetDodgePiercing(Owner, false);
        RemoveOverrideAutoAttack(Owner, true);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellBuffClear(Attacker, "OrianaGhost");
        SpellEffectRemove(this.OrianaPointer);
        SpellBuffClear(Owner, "OrianaGhostMinion");
        Caster = SetVarInTable(this.Caster);
        SkinName = GetUnitSkinName(Owner);
        ;
        ;
        ;
        DropBall = SetVarInTable(false);
        ;
        ;
        ;
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        DestroyMissile(CharVars.MissileID);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        CharVars.GhostAlive = SetVarInTable(false);
        DestroyMissile(CharVars.MissileID);
        SpellBuffAdd(Owner, Owner, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        ;
        SpellEffectRemove(this.Particle);
        ;
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        MyName = GetUnitSkinName(Owner);
        CharVars.GhostInitialized = SetVarInTable(true);
        ;
        ;
        ;
        ;
        ;
        RemovePerceptionBubble(this.TempVision);
        SpellEffectRemove(this.Ring1);
        SpellEffectRemove(this.Ring2);
        SpellEffectRemove(this.Ring3);
        SpellEffectRemove(this.Ring4);
        SpellBuffAdd(Owner, Owner, "ExpirationTimer", 1, 1, 0.249, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        UnlockAnimation(Owner, false);
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.emptyparticle);
        ApplyDamage(Owner, Owner, 4000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        Found = SetVarInTable(false);
        ForNClosestUnitsInTargetArea(Owner, this.TargetPos, 25000, "AffectFriends AffectMinions AffectHeroes ", 1, true, "OrianaGhost", (Iterator) =>
        {
            this.TargetPos = GetUnitPosition(Other2);
        });
        ForNClosestUnitsInTargetArea(Owner, this.TargetPos, 375, "AffectEnemies AffectHeroes ", 1, true, default, (Iterator) =>
        {
            ForNClosestUnitsInTargetArea(Owner, this.TargetPos, 25000, "AffectFriends AffectMinions AffectHeroes ", 1, true, "OrianaGhost", (Iterator) =>
            {
                SpellBuffClear(Other2, "OrianaGhost");
            });
            Found = SetVarInTable(true);
            EnemyPos = GetUnitPosition(Unit);
            SpellBuffAdd(Owner, Owner, "OrianaDissonance", 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
            ;
            SpellCast(Attacker, Unit, EnemyPos, EnemyPos, true, 5, ExtraSlots, 0 + Level, false, true, false, false, false, this.TargetPos);
        });
        ;
        SpellEffectRemove(this.MRShield);
        ClearOverrideAnimation("Run", Owner);
        SpellEffectRemove(this.asdf);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.SappedDebuff);
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.Geeves1);
        SetDodgePiercing(Owner, false);
        SpellEffectRemove(this.Rh);
        ;
        ;
        SpellEffectRemove(this.GreenDash);
        SpellEffectRemove(this.SelfParticle);
        ;
        ;
        ClearOverrideAnimation("Run", Owner);
        SpellBuffRemove(Owner, "UnstoppableForceMarker", Owner, 0);
        ;
        ;
        ;
        ;
        ;
        SetTargetingType(3, SpellSlots, SPELLBOOK_CHAMPION, TTYPE_SelfAOE, Owner);
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        ;
        ;
        ;
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "NocturneParanoia");
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, true);
        SpellEffectRemove(this.Loop);
        FadeOutColorFadeEffect(1, TEAM_UNKNOWN);
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_DEFAULT, 1, 0, 1, false, false, Owner);
        TeamID = GetTeamID(default);
        ;
        ;
        SpellEffectRemove(this.TargetParticle);
        SpellEffectRemove(this.CounterParticle);
        SpellEffectRemove(this.ParticleID1);
        SpellEffectRemove(this.ParticleID2);
        ;
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        NextBuffVars.ResistanceMod = SetVarInTable(this.StarcallShred);
        SpellBuffAdd(Attacker, Owner, "Starcall", 10, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Shred, 0, true, false, false, default);
        ApplyDamage(Attacker, Owner, 0 + this.DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
        ;
        PopCharacterFade(Owner, this.Temp);
        ;
        ClearOverrideAnimation("Attack1", Owner);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "FizzJump");
        ;
        ;
        BaseCD = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCD, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        UnlockAnimation(Owner, true);
        SetSlotSpellIcon(1, SpellSlots, SPELLBOOK_CHAMPION, Owner, 1);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ApplyDamage(Owner, Owner, 4000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        ;
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(asdf, default, "Fizz_TrickSlam.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Owner, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
            SpellEffectCreate(b, default, "Fizz_TrickSlam_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
            SpellBuffAdd(Owner, Unit, "FizzWSlow", 1, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Owner, Nothing, this.TargetPos, this.TargetPos, false, 0, ExtraSlots, 0 + this.Level, true, false, false, false, false, default);
        ;
        ClearOverrideAnimation("Idle1", Owner);
        SpellEffectRemove(this.Particle1);
        ;
        SpellEffectRemove(this.Particle);
        ClearOverrideAnimation("Idle1", Owner);
        ClearOverrideAnimation("Idle2", Owner);
        ClearOverrideAnimation("Idle3", Owner);
        ClearOverrideAnimation("Idle4", Owner);
        ClearOverrideAnimation("Attack1", Owner);
        ClearOverrideAnimation("Attack2", Owner);
        ClearOverrideAnimation("Attack3", Owner);
        ClearOverrideAnimation("Crit", Owner);
        ClearOverrideAnimation("Run", Owner);
        SpellEffectRemove(this.b);
        RemoveOverrideAutoAttack(Owner, false);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.SSSlow);
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.temp);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.a, default, "Leona_SolarFlare_tar.troy", default, TEAM_NEUTRAL, 100, 0, TEAM_UNKNOWN, Nothing, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        Level = GetLevel(Attacker);
        NextBuffVars.Level = SetVarInTable(Level);
        ForEachUnitInTargetArea(Attacker, Owner, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + this.DamageAmount, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.8, 1, false, false, Attacker);
            SpellEffectCreate(TargetParticle, default, "Leona_SolarBarrier_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            SpellBuffAdd(Attacker, Unit, "LeonaSunlight", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Unit, "LeonaSolarFlareSlow", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
        });
        ForEachUnitInTargetArea(Attacker, Owner, 175, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyStun(Attacker, Unit, 1.5);
        });
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        ;
        RemovePerceptionBubble(this.Bubble);
        ;
        ;
        ;
        zombie = GetIsZombie(Owner);
        ;
        UnlockAnimation(Owner, true);
        ;
        SpellBuffAdd(Owner, Owner, "ExpirationTimer", 1, 1, 0.001, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.a);
        UnlockAnimation(Owner, true);
        ;
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        CharVars.count = SetVarInTable(0);
        SetDodgePiercing(Owner, false);
        RemoveOverrideAutoAttack(Owner, true);
        SpellBuffRemove(Owner, "NocturneUmbraBlades", Owner, default);
        TeamID = GetTeamID(default);
        ;
        ;
        ApplyDamage(Attacker, Owner, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Owner, "FizzKnockup", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, true, default);
        SpellEffectRemove(this.Temp);
        SpellEffectRemove(this.Temp2);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Owner, "FizzMarinerDoomSlow", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Slow, 0, true, false, false, default);
        ForEachUnitInTargetArea(Attacker, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        RemovePerceptionBubble(this.TempID);
        TeamID = GetTeamID(default);
        TargetPos = GetUnitPosition(Owner);
        Other3 = SpawnMinion("Omnomnomnom", "FizzShark", "idle.lua", TargetPos, TeamID ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Attacker, default);
        SpellEffectCreate(Temp, Temp, "Fizz_SharkSplash.troy", "Fizz_SharkSplash.troy", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Other1, "BUFFBONE_CSTM_GROUND", TargetPos, Other1, "BUFFBONE_CSTM_GROUND", TargetPos, true, false, false, false, false, default, default);
        GetGroundHeight(TargetPos, GroundPos);
        SpellEffectCreate(Temp, Temp, "Fizz_SharkSplash_Ground.troy ", "Fizz_SharkSplash_Ground.troy ", TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, GroundPos, Nothing, default, GroundPos, true, false, false, false, false, default, default);
        SpellBuffAdd(Other3, Other3, "FizzShark", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "FizzMarinerDoom");
        ;
        ;
        BaseCD = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCD, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        SpellEffectRemove(this.TremorsFx);
        ClearOverrideAnimation("Run", Owner);
        ClearOverrideAnimation("Idle1", Owner);
        SealSpellSlot(2, SpellSlots, Owner, true, default);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle1);
        ;
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle1);
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(-0.4);
        SpellBuffAdd(Attacker, Owner, "Slow", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, default, default);
        SpellEffectRemove(this.arr);
        TeamofOwner = GetTeamID(default);
        ;
        NextBuffVars.ASDebuff = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Owner, Attacker, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Owner, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.9, 1, false, false, Owner);
            SpellBuffAdd(Attacker, Unit, "GragasExplosiveCaskDebuff", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        GragasSkinID = GetSkinID(Owner);
        ;
        ;
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "GragasBarrelRoll");
        CooldownVar = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + CDMinusBarrel, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectRemove(this.TroyVar);
        SpellBuffRemove(Owner, "GragasBarrelRoll", Owner, default);
        ApplyDamage(Attacker, Attacker, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Attacker);
        SpellEffectRemove(this.a);
        ClearOverrideAnimation("Run", Owner);
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        SpellEffectRemove(this.GateParticle);
        SpellEffectRemove(this.Particle3);
        SpellBuffRemove(Owner, "UrgotSwapMissile", Attacker, 0);
        SpellBuffRemove(Owner, "Suppression", Attacker, 0);
        SpellBuffRemove(Owner, "UrgotSwapTarget", Attacker, 0);
        UnlockAnimation(Owner, false);
        ;
        ;
        IncPAR(Owner, 0 + this.ManaTick);
        SpellBuffRemove(Owner, "GragasDrunkenRage", Owner, default);
        ApplyDamage(Attacker, Owner, 300, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, default, default, default, default);
        ;
        ;
        ;
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.HitParticle);
        SetSpell(Owner, 0, ExtraSlots, SPELLBOOK_CHAMPION, "Propel");
        SpellCast(Owner, Target, Owner, Owner, false, 0, ExtraSlots, 1, true, false, false, false, false, default);
        ;
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.c);
        SpellEffectRemove(this.d);
        ForEachUnitInTargetAreaRandom(Owner, Owner, 1000, "AffectEnemies AffectMinions AffectHeroes ", default, true, 1, (Iterator) =>
        {
            PropelPos = GetRandomPointInAreaUnit(Unit, 100, 25);
            TeamID = GetTeamID(default);
            Other1 = SpawnMinion("DontSeeThisPlease", "SpellBook1", "idle.lua", PropelPos, TEAM_NEUTRAL, false, true, false, true, false, false, 0, default, true, Nothing, default);
            SpellBuffAdd(Owner, Other1, "PropelSpellCaster", 1, 1, 2.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
            SpellEffectCreate(EffectToRemove, default, "PropelBubbles.troy", default, TEAM_NEUTRAL, 600, 0, TEAM_UNKNOWN, Owner, false, Other1, default, PropelPos, Target, default, default, true, default, default, default, default, default, default);
        });
        ForNClosestUnitsInTargetArea(Owner, Owner, 800, "AffectEnemies AffectMinions AffectHeroes ", 1, true, default, (Iterator) =>
        {
            FaceDirection(Owner, Unit);
            SpellCast(Owner, Unit, Owner, Owner, false, 3, SpellSlots, 1, false, false, false, false, default, default);
        });
        ;
        ;
        ;
        ApplyStun(Attacker, Target, 0.5);
        SpellEffectRemove(this.Temp);
        SpellEffectRemove(this.Temp2);
        SpellEffectRemove(this.Temp3);
        SpellEffectRemove(this.Temp4);
        ;
        SpellEffectRemove(this.SpeedParticle);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        SpellEffectRemove(this.c);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.ParticleID2);
        SpellEffectRemove(this.ParticleID3);
        ClearOverrideAnimation("Idle1", Owner);
        ClearOverrideAnimation("Idle2", Owner);
        ClearOverrideAnimation("Idle3", Owner);
        ClearOverrideAnimation("Idle4", Owner);
        ClearOverrideAnimation("Run", Owner);
        ClearOverrideAnimation("Spell4", Owner);
        RemoveOverrideAutoAttack(Owner, false);
        SpellBuffRemove(Owner, "VolibearQSpeedPart", Owner, 0);
        SpellBuffAdd(Owner, Owner, "VolibearPassiveHealCheck", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        TeamID = GetTeamID(default);
        KMSkinID = GetSkinID(Attacker);
        ;
        ;
        ForEachUnitInTargetArea(Attacker, Owner, 240, "AffectEnemies AffectNeutral AffectMinions ", default, true, (Iterator) =>
        {
            ;
            SpellBuffAdd(Attacker, Unit, "KogMawLivingArtillerySight", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Unit, 0 + this.FinalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 1, false, false, Attacker);
        });
        ;
        ;
        ForEachUnitInTargetArea(Attacker, Owner, 240, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellBuffAdd(Attacker, Unit, "KogMawLivingArtillerySight", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyDamage(Attacker, Unit, 0 + this.FinalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.3, 1, false, false, Attacker);
        });
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        RemovePerceptionBubble(this.BubbleID);
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        ;
        ;
        ClearOverrideAnimation("Run", Owner);
        SpellEffectRemove(this.a);
        SpellEffectRemove(this.b);
        StopCurrentOverrideAnimation("Spell4", Owner, true);
        ;
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        ;
        cast = SetVarInTable(false);
        StartTrackingCollisions(Owner, false);
        SpellEffectRemove(this.SelfParticle);
        UnlockAnimation(Owner, true);
        StopMove(Owner);
        SpellEffectRemove(this.Particle);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "TalonShadowAssault");
        ;
        OwnerPos = GetUnitPosition(Owner);
        ForEachUnitInTargetArea(Owner, OwnerPos, 3000, "AffectFriends AffectMinions NotAffectSelf AffectUntargetable ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        CooldownVal = SetVarInTable(VALUE_BY_LEVEL);
        FlatCDVal = SetVarInTable(0);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + CooldownVal, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        CharVars.HasCastR = SetVarInTable(false);
        ;
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        RemoveOverrideAutoAttack(Owner, true);
        SetDodgePiercing(Owner, false);
        ;
        ;
        CooldownVal = SetVarInTable(VALUE_BY_LEVEL);
        FlatCDVal = SetVarInTable(0);
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetSlotSpellCooldownTimeVer2(0 + CooldownVal, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectRemove(this.ParticleZ);
        SpellEffectRemove(this.ParticleY);
        SpellBuffAdd(Attacker, Owner, "GravesSmokeGrenadeDelay", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        SpellBuffRemove(Owner, "TalonShadowAssaultMisOne", Owner, 0);
        SpellBuffRemove(Owner, "TalonHaste", Owner, 0);
        ;
        PopCharacterFade(Owner, this.ID);
        SpellEffectRemove(this.talon_ult_sound);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Attacker);
        UnlockAnimation(Owner, true);
        StartTrackingCollisions(Owner, true);
        ;
        ;
        ;
        CancelAutoAttack(Owner, false);
        RemoveOverrideAutoAttack(Owner, true);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        RemoveOverrideAutoAttack(Owner, true);
        LevelDamage = GetLevel(Owner);
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Owner, Unit, 0 + TotalDamage, TRUE_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
        });
        ForceDead(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        StopChanneling(Owner, ChannelingStopCondition_Cancel, ChannelingStopSource_Die);
        PopAllCharacterData(Owner);
        ClearOverrideAnimation("Run", Owner);
        this.CasterID = PushCharacterData("KogMawDead", Owner, false);
        Other3 = SetVarInTable(this.Other3);
        SpellEffectCreate(e, default, "KogMawDeath_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(e, default, "KogMawDead_idle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "intestines_1", default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        SpellBuffAdd(Attacker, Owner, "KogMawIcathianSurprise", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ShowHealthBar(Owner, true);
        SpellBuffClear(Owner, "GravesPassiveGrit");
        ;
        OwnerPos = GetUnitPosition(Owner);
        ForEachUnitInTargetArea(Owner, OwnerPos, 3000, "AffectFriends AffectMinions NotAffectSelf AffectUntargetable ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        CooldownVal = SetVarInTable(VALUE_BY_LEVEL);
        FlatCDVal = SetVarInTable(0);
        ;
        ;
        ;
        SpellEffectRemove(this.ParticleZ);
        ;
        PoisonBaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        PoisonTotalDamage = SetVarInTable(0);
        ;
        ;
        ;
        ApplyDamage(Attacker, Owner, 0 + PoisonTotalDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        SpellEffectRemove(this.Blood1);
        SpellEffectRemove(this.Blood2);
        RemovePerceptionBubble(this.UnitBubble);
        SpellEffectRemove(this.particle1);
        SetPARMultiplicativeCostInc(Owner, 0, SpellSlots, 0, PAR_MANA);
        SetPARMultiplicativeCostInc(Owner, 1, SpellSlots, 0, PAR_MANA);
        SetPARMultiplicativeCostInc(Owner, 2, SpellSlots, 0, PAR_MANA);
        SetPARMultiplicativeCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.ParticleID6);
        SpellEffectRemove(this.Particle);
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, default, default, default, default);
        SealSpellSlot(3, SpellSlots, Owner, true, default);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.particle);
        SpellEffectCreate(particle, default, "LayWaste_tar.troy", default, this.TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        NumUnits = SetVarInTable(0);
        ForEachUnitInTargetArea(Attacker, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        ;
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        ForceDead(Owner);
        ;
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.Particle);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(0, InventorySlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, InventorySlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, InventorySlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, InventorySlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(4, InventorySlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(5, InventorySlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ShowHealthBar(Owner, true);
        SpellBuffRemove(Owner, "Defile", Owner, 0);
        SetPARCostInc(Owner, 0, SpellSlots, 0, PAR_MANA);
        SetPARCostInc(Owner, 1, SpellSlots, 0, PAR_MANA);
        SetPARCostInc(Owner, 2, SpellSlots, 0, PAR_MANA);
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        SpellBuffAdd(Owner, Owner, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        ;
        ;
        SpellEffectCreate(asfd, default, "TurnBack.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        PauseAnimation(Owner, false);
        SpellEffectRemove(this.turntostone);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Attacker);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        RemovePerceptionBubble(this.BubbleID);
        ;
        SpellEffectCreate(particle, default, "CassNoxious_tar.troy", default, this.TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Attacker, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            NextBuffVars.DamagePerTick = SetVarInTable(this.PoisonPerTick);
            SpellBuffAdd(Attacker, Unit, "CassiopeiaNoxiousBlastPoison", 1, 1, 3.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Poison, 0, true, false, false, default);
            ;
        });
        SpellEffectRemove(this.particle);
        SpellEffectRemove(this.particle2);
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Attacker);
        ;
        RemovePerceptionBubble(this.BubbleID);
        SpellEffectRemove(this.Particle);
        UnlockAnimation(Owner, false);
        ;
        RemovePerceptionBubble(this.BubbleID);
        SpellEffectRemove(this.StarkSelfParticle);
        SpellEffectRemove(this.TwoCharge);
        SpellEffectRemove(this.OneCharge);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ClearOverrideAnimation("Run", Owner);
        ClearOverrideAnimation("Attack1", Owner);
        ClearOverrideAnimation("Attack2", Owner);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.temp);
        SpellEffectRemove(this.test);
        SpellEffectRemove(this.test2);
        NextBuffVars.MissilePosition = SetVarInTable(this.MissilePosition);
        SpellBuffAdd(Attacker, Owner, "RumbleCarpetBombEffect", 10, 1, 6, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, false, false, false, default);
        SpellEffectRemove(this.test);
        SpellEffectRemove(this.Boom);
        SpellEffectRemove(this.Boom2);
        SpellBuffClear(Owner, "RumbleCarpetBombEffect");
        ;
        NextBuffVars.Damage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Owner, "MissFortuneScatterAoE", 1, 1, 1.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        Duration = GetBuffRemainingDuration(Owner, "RumbleGrenadeCD");
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0 + Duration);
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.CParticle);
        SpellEffectRemove(this.BParticle);
        ;
        ;
        ;
        ;
        ;
        UnlockAnimation(Owner, true);
        SpellBuffRemove(Owner, "RumbleHeatingUp", Owner, default);
        SpellBuffRemove(Owner, "RumbleHeatingUp2", Owner, default);
        SpellBuffAdd(Attacker, Target, "RumbleHeatingUp2", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "RumbleHeatingUp", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectRemove(this.Particle);
        ;
        SpellEffectRemove(this.Particle);
        ;
        ClearOverrideAnimation("Run", Owner);
        ;
        SpellEffectRemove(this.MoveSpeedPart1);
        SpellBuffAdd(Owner, Owner, "MissFortuneStrut", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        RemoveOverrideAutoAttack(Owner, true);
        CancelAutoAttack(Owner, false);
        SetPARCostInc(Owner, 0, SpellSlots, 0, PAR_MANA);
        SetPARCostInc(Owner, 1, SpellSlots, 0, PAR_MANA);
        SetPARCostInc(Owner, 2, SpellSlots, 0, PAR_MANA);
        SetPARCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        SpellEffectRemove(this.KarmaSlow);
        SpellEffectRemove(this.SoundOne);
        SpellEffectRemove(this.SoundTwo);
        SpellEffectRemove(this.SBIdle1);
        SpellEffectRemove(this.SBIdle2);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.SoulShackleIdle);
        SpellEffectRemove(this.SoulShackleTarget_blood);
        SpellEffectRemove(this.MoveSpeedPart1);
        SpellEffectRemove(this.MoveSpeedPart2);
        ;
        ;
        RemoveLinkVisibility(Attacker, Owner);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellBuffRemove(Owner, "Infuse", Owner, default);
        IncPAR(Owner, -20);
        RemoveOverrideAutoAttack(Owner, true);
        CancelAutoAttack(Owner, false);
        SpellEffectRemove(this.SoundOne);
        SpellEffectRemove(this.SoundTwo);
        SpellEffectRemove(this.MoveSpeedPart1);
        SpellEffectRemove(this.SBIdle1);
        SpellEffectRemove(this.SBIdle2);
        SpellEffectRemove(this.ParticleID);
        ;
        ;
        SpellEffectRemove(this.SoulShackleIdle);
        SpellEffectRemove(this.SoulShackleTarget);
        SpellEffectRemove(this.SoulShackleTarget_blood);
        ;
        SetDodgePiercing(Owner, false);
        ;
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, default);
        ;
        ;
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        SpellEffectRemove(this.a);
        SpellBuffRemove(Attacker, "InfernalGuardianTimer", Attacker, 0);
        ClearOverrideAnimation("Attack1", Owner);
        ClearOverrideAnimation("Attack2", Owner);
        ClearOverrideAnimation("Run", Owner);
        SpellEffectRemove(this.Particle);
        ;
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        SpellBuffAdd(Owner, Owner, "OlafAxeExpirationTimer2", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        HealthPerStack = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SetBuffToolTipVar(1, 0 + BonusHealth);
        OverrideAnimation("Run", "Run", Owner);
        TeamID = GetTeamID(default);
        skin = GetSkinID(Owner);
        ;
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
        ForEachUnitInTargetArea(Attacker, Owner, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellBuffAdd(Attacker, Unit, "RuptureLaunch", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, true, false, default);
            ApplyDamage(Attacker, Unit, 0 + this.DamageAmount, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
        });
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        ;
        ;
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
        SpellBuffAdd(Attacker, Owner, "RuptureTarget", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
        SealSpellSlot(2, SpellSlots, Owner, true, default);
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.ParticleID);
        ;
        ApplyDamage(Owner, Owner, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, default, default, default, default);
        SpellEffectRemove(this.ParticleID);
        NextBuffVars.BubbleID = SetVarInTable(this.BubbleID);
        SpellBuffAdd(Attacker, Owner, "CaitlynAceintheHoleVisibility", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(3, SpellSlots, Attacker, false, SPELLBOOK_CHAMPION);
        RemovePerceptionBubble(this.BubbleID);
        ;
        RemovePerceptionBubble(this.BubbleID);
        RemovePerceptionBubble(this.BubbleID2);
        ;
        ;
        ;
        ;
        ;
        StartTrackingCollisions(Owner, false);
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        BaseCooldown = SetVarInTable(5);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        this.ID = PushCharacterFade(Owner, 1, default, this.ID);
        ;
        TeamID = GetTeamID(default);
        TargetPos = SetVarInTable(this.TargetPos);
        NextBuffVars.BonusHealth = SetVarInTable(this.BonusHealth);
        Other3 = SpawnMinion("Jack In The Box", "ShacoBox", "turret.lua", TargetPos, TeamID ?? TEAM_CASTER, false, false, true, false, false, false, 0, false, false, Attacker, default);
        NextBuffVars.FearDuration = SetVarInTable(this.FearDuration);
        SpellBuffAdd(Attacker, Other3, "JackInTheBox", 1, 1, 90, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        PushCharacterFade(Owner, 1, default, default);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SetDodgePiercing(Owner, false);
        ;
        ;
        ;
        Pos1 = GetRandomPointInAreaUnit(Owner, 250, 50);
        ;
        Other1 = CloneUnitPet(Owner, "Hallucinate", 18, Pos1, 0, 0, true);
        NextBuffVars.DamageAmount = SetVarInTable(this.DamageAmount);
        NextBuffVars.DamageDealt = SetVarInTable(this.DamageDealt);
        NextBuffVars.DamageTaken = SetVarInTable(this.DamageTaken);
        NextBuffVars.shacoDamageTaken = SetVarInTable(this.shacoDamageTaken);
        SpellBuffAdd(Owner, Other1, "HallucinateFull", 1, 1, 18, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other1, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other1, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other1, "Backstab", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellEffectCreate(FadeParticle, default, "HallucinatePoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Other1, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        Pos2 = GetRandomPointInAreaUnit(Owner, 250, 50);
        TeleportToPosition(Owner, Pos2);
        SpellEffectCreate(FadeParticle, default, "HallucinatePoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        NextBuffVars.CritDmgBonus = SetVarInTable(this.CritDmgBonus);
        NextBuffVars.DCooldown = SetVarInTable(this.DCooldown);
        CastPos = SetVarInTable(this.CastPos);
        SpellBuffAdd(Owner, Owner, "Deceive", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "DeceiveCritBonus", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeleportToPosition(Owner, CastPos);
        TeamID = GetTeamID(default);
        SpellEffectCreate(hi, default, "Hallucinate_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Owner, default, default, true, false, false, false, false, default, default);
        ForEachUnitInTargetArea(Attacker, Owner, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + this.DamageAmount, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
        });
        ;
        ApplyDamage(Owner, Owner, 10000, MAGIC_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        ApplyDamage(Owner, Owner, 4000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        AttackerID = GetTeamID(default);
        SpellEffectCreate(asdadsfa, default, "caitlyn_yordleTrap_trigger_sound.troy", default, AttackerID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        SpeedParticle = SetVarInTable(this.SpeedParticle);
        SpellEffectRemove(this.SpeedParticle);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        RemoveOverrideAutoAttack(Owner, false);
        ;
        ;
        ClearOverrideAnimation("Run", Owner);
        SpeedParticle = SetVarInTable(this.SpeedParticle);
        SpellEffectRemove(this.SpeedParticle);
        ;
        ;
        PushCharacterFade(Owner, 1, default, default);
        ;
        ;
        Owner = SetBuffCasterUnit();
        UnlockAnimation(Owner, true);
        ;
        ;
        CancelAutoAttack(Owner, true);
        SpellEffectRemove(this.GlobeOne);
        SpellBuffRemove(Owner, "VayneSilverParticle1", Owner, 0);
        ;
        SpellEffectRemove(this.Aegis);
        SpellEffectRemove(this.DiseaseCloud);
        TeamID = GetTeamID(default);
        GhoulPosition = GetUnitPosition(Attacker);
        SpellEffectCreate(b, default, "yorick_necroExplosion_deactivate.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, GhoulPosition, Owner, default, default, true, default, default, false, false, default, default);
        ApplyDamage(Attacker, Attacker, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        ;
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle);
        ;
        ApplyDamage(Owner, Owner, 1000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Owner);
        ;
        ;
        UnlockAnimation(Owner, true);
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, false);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.ParticleID6);
        DurationLevel = SetVarInTable(this.DurationLevel);
        SpellBuffAdd(Attacker, Owner, "YorickDeathGripBeam", 1, 1, 0 + DurationLevel, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        TeamID = GetTeamID(default);
        GhoulPosition = GetUnitPosition(Attacker);
        SpellEffectCreate(b, default, "yorick_ravenousGhoul_death.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, GhoulPosition, Owner, default, default, true, default, default, false, false, default, default);
        ApplyDamage(Attacker, Attacker, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        UnlockAnimation(Owner, false);
        PlayAnimation("idle1", 0, Owner, false, false, true);
        UnlockAnimation(Owner, false);
        ;
        ;
        GhoulPosition = GetUnitPosition(Attacker);
        TeamID = GetTeamID(default);
        SpellEffectCreate(a, default, "yorick_spectralGhoul_death.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, GhoulPosition, Owner, default, GhoulPosition, true, default, default, false, false, default, default);
        ApplyDamage(Attacker, Attacker, 9999, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 0, false, false, Attacker);
        Duration = GetBuffRemainingDuration(Owner, "YorickRARemovePet");
        ;
        ;
        ;
        NextBuffVars.DamageToDeal = SetVarInTable(this.DamageToDeal);
        NextBuffVars.Pos = SetVarInTable(this.Pos);
        SpellBuffAdd(Attacker, Owner, "YorickDeathGrip", 50, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0.1, true, false, false, default);
        ;
        ;
        SpellEffectRemove(this.RootParticleEffect2);
        SpellEffectRemove(this.RootParticleEffect);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.ParticleID6);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        ;
        SpellBuffAdd(Owner, Owner, "YorickUltStun", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ForceDead(Owner);
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ApplyDamage(Owner, Owner, 10000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 1, false, false, Owner);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        SpellEffectRemove(this.Particle5);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        UnlockAnimation(Owner, false);
        PlayAnimation("idle1", 0, Owner, false, false, true);
        UnlockAnimation(Owner, false);
        ;
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        ;
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurprise", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        SetSpell(Owner, 1, SpellSlots, SPELLBOOK_CHAMPION, "XerathLocusOfPower");
        ;
        Cooldown = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCooldown, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particlea);
        SpellEffectRemove(this.Particleb);
        SpellEffectRemove(this.Particlec);
        ;
        SetSpell(Owner, 0, SpellSlots, SPELLBOOK_CHAMPION, "XerathArcanopulse");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "XerathMageChains");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown2, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "XerathArcaneBarrageWrapper");
        SetSlotSpellCooldownTimeVer2(0 + Cooldown, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ClearOverrideAnimation("Idle1", Owner);
        ClearOverrideAnimation("Idle2", Owner);
        ClearOverrideAnimation("Idle3", Owner);
        ClearOverrideAnimation("Idle4", Owner);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "XerathEnergize", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        UnlockAnimation(Owner, false);
        PlayAnimation("idle1", 0, Owner, false, false, true);
        UnlockAnimation(Owner, false);
        ;
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        ;
        SpellBuffAdd(Owner, Owner, "DeathDefiedBuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        ;
        ;
        RemovePerceptionBubble(this.Bubble);
        SetPARMultiplicativeCostInc(Owner, 3, SpellSlots, 0, PAR_MANA);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle2);
        UnlockAnimation(Owner, true);
        ;
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.Particle1);
        SpellEffectRemove(this.Particle2);
        SpellEffectRemove(this.Particle3);
        SpellEffectRemove(this.Particle4);
        SpellEffectRemove(this.Particle5);
        SpellEffectRemove(this.Particle6);
        SpellEffectRemove(this.Particle7);
        SpellEffectRemove(this.Particle8);
        SpellEffectRemove(this.Particle9);
        SpellEffectRemove(this.Particle10);
        SpellEffectRemove(this.Particle11);
        SpellEffectRemove(this.Particle12);
        SpellEffectRemove(this.Particle13);
        SpellEffectRemove(this.Particle14);
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SetDodgePiercing(Owner, false);
        SpellEffectRemove(this.Particle);
        SpellEffectRemove(this.Particle1);
        ;
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.ParticleCharge2);
        ;
        ;
        ;
        ;
        ;
        StopCurrentOverrideAnimation("RunUlt", Owner, false);
        SpellEffectRemove(this.ParticleCharge);
        ;
        ;
        ;
        RemoveOverrideAutoAttack(Owner, true);
        CancelAutoAttack(Owner, false);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        UnlockAnimation(Owner, true);
        ApplyDamage(Owner, Owner, 5000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.SpeedParticle);
        SpellEffectRemove(this.MaxParticle);
        SpellEffectRemove(this.StarkSelfParticle);
        SpellEffectRemove(this.SoulShroudParticle);
        SpellEffectRemove(this.ManaManipulator);
        SpellEffectRemove(this.EmblemOfValorParticle);
        ;
        SpellEffectRemove(this.a);
        ;
        ;
        ;
        SpellCast(Owner, Owner, Owner, Owner, default, 2, SpellSlots, 1, false, false, false, default, default, default);
        ApplyDamage(Attacker, Owner, 90, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        SpellBuffAdd(Attacker, Owner, "WrathDebuff", 10, 1, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatDehancer, 0, true, false, default, default);
        IncHealth(Owner, 750, Owner);
        IncPAR(Owner, 375);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        UnlockAnimation(Owner, false);
        PlayAnimation("idle1", 0, Owner, false, false, true);
        UnlockAnimation(Owner, false);
        SpellEffectCreate(Part, default, "GuardianAngel_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "HasBeenRevived", 1, 1, 300, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        RemovePerceptionBubble(this.ThisBubble);
        ;
        ;
        ;
        SpellEffectRemove(this.ApocalypseParticle);
        SpellEffectRemove(this.cp1);
        SetDodgePiercing(Owner, false);
        RemovePerceptionBubble(this.BubbleID);
        ApplyDamage(Owner, Owner, 600, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.WillPlaceholder);
        ;
        SpellEffectRemove(this.Particle);
        ;
        ;
        ;
        ;
        ;
        ;
        CurTime = GetGameTime();
        ;
        ;
        ;
        SpellEffectRemove(this.ak);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_SUMMONER);
        PauseAnimation(Owner, false);
        ;
        ;
        ;
        SpellEffectRemove(this.SCP);
        ;
        ;
        ;
        ;
        SpellEffectRemove(this.Particle3);
        ;
        ;
        RemovePerceptionBubble(this.BubbleID);
        ApplyDamage(Owner, Owner, 600, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        SpellEffectRemove(this.slow);
        ;
        SpellBuffAdd(Owner, Owner, "HexdrinkerTimerCD", 1, 1, 0 + Duration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        NextBuffVars.ShieldHealth = SetVarInTable(ShieldHealth);
        SpellBuffAdd(Owner, Owner, "PrideShield", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 1, default, default, default, default);
        SpellEffectRemove(this.slow);
        RemovePerceptionBubble(this.BubbleID);
        SpellEffectRemove(this.Particle);
        this.StatBoost = SetVarInTable(0);
        RemovePerceptionBubble(this.BubbleID);
        ApplyDamage(Owner, Owner, 600, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 1, 1, false, false, Attacker);
        RemovePerceptionBubble(this.BubbleID);
        ;
        ;
        ;
        ;
        RemovePerceptionBubble(this.ThisBubble);
        NextBuffVars.WillRemove = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, "BansheesVeil", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        ;
        SpellEffectRemove(this.ApocalypseParticle);
        SpellEffectRemove(this.StarkAuraParticle);
        ;
        SpellEffectRemove(this.StarkAuraParticle);
    }
    public void BuffOnAllowAdd()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        CCreduction = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        DurationMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void BuffOnDeath()
    {
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        NewDuration = SetVarInTable(60);
        ;
        ;
        ;
        NewDuration = SetVarInTable(60);
        ;
        ;
        SpellBuffAdd(Owner, Attacker, "CrestoftheAncientGolem", 1, 1, 180, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellEffectCreate(default, default, "NeutralMonster_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        NewDuration = SetVarInTable(90);
        NextBuffVars.ParticlePosition = SetVarInTable(this.ParticlePosition);
        ;
        ;
        SpellBuffAdd(Owner, Attacker, "BlessingoftheLizardElder", 1, 1, 180, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellEffectCreate(default, default, "NeutralMonster_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Owner, Attacker, "FireoftheGreatDragon", 1, 1, 180, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        teamID = GetTeamID(default);
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
        SpellBuffRemoveCurrent(Owner);
        ;
        Alert("YO!", var);
        this.TotalDamageOT = SetVarInTable(0);
        ;
        ;
        ;
        ;
        this.TotalDamageOT = SetVarInTable(0);
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectUseable ", "OdinGuardianBuff", true, (Iterator) =>
        {
            SpellBuffClear(Unit, "OdinQuestIndicator");
        });
        ;
        SpellBuffAdd(Owner, Owner, "LuxDeathParticleTimer", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        SpellEffectRemove(this.Particle1);
        this.ParticleAlive = SetVarInTable(false);
        Caster = SetBuffCasterUnit();
        SpellBuffClear(Caster, "SkarnerImpale");
        ;
        SpellEffectRemove(this.TremorsFx);
        Attacker = GetChampionBySkinName("Malzahar", this.teamID ?? TEAM_UNKNOWN);
        ;
        ManaRestore = SetVarInTable(VALUE_BY_LEVEL);
        IncPAR(Attacker, 0 + ManaRestore);
        ForNClosestUnitsInTargetArea(Attacker, Owner, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, false, "AlZaharRecentVis", (Iterator) =>
        {
            ;
            SpellBuffAdd(Attacker, Unit, "AlZaharRecentVis", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
            SpellBuffAdd(Attacker, Unit, "AlZaharMaleficVisions", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, default, default);
        });
        SpellEffectCreate(this.particle1, default, "CassiopeiaDeath.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 20000, "AffectFriends AffectMinions ", default, true, (Iterator) =>
        {
            ;
        });
        Other3 = SetBuffCasterUnit();
        TargetPos = GetUnitPosition(Other3);
        OwnerPos = GetUnitPosition(Owner);
        SpellCast(Other3, Other3, default, default, true, 2, ExtraSlots, 1, true, true, false, false, false, OwnerPos);
        SpellEffectCreate(default, default, "DeathsCaress_nova.prt", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, false, default, default);
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, default, (Iterator) =>
        {
            ;
        });
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        SpellEffectRemove(this.OrianaPointer);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
        ;
    }
    public void BuffOnDealDamage()
    {
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        CurrentTime = GetGameTime();
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "ShadowWalkSpeedHolder", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
    }
    public void BuffOnHitUnit()
    {
        ;
        DamageAmount = SetVarInTable(10000);
        Level = SetVarInTable(this.Level);
        ;
        ;
        ;
        this.WillRemove = SetVarInTable(true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Attacker, Attacker, "OdinBloodbursterBuff", 7, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncPAR(Owner, 15);
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(part, default, "TiamatMelee_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, false, default, default, default);
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Target, 0 + RadiusOfCleave, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ApplyDamage(Attacker, Target, 0 + DamageBonus, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
        SpellBuffRemove(Owner, "Empower", Owner, 0);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        HealthRestoration = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        IncHealth(Owner, 0 + HealthRestoration, Owner);
        ;
        TrueDamage = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        HealthRestoration = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        IncHealth(Owner, 0 + HealthRestoration, Owner);
        ;
        TeamID = GetTeamID(default);
        ;
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        TotalAD = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(HealParticle, default, "olaf_viciousStrikes_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        ;
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + Slot0CD, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + Slot2CD, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + Slot3CD, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        SpellBuffClear(Owner, "EnrageDeathRecapFix");
        ApplyDamage(Attacker, Target, 0 + DamageToDeal, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Target, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Iterator) =>
        {
            ;
            ApplyStun(Attacker, Unit, 1.25);
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, default, default, default, default);
        });
        this.WillRemove = SetVarInTable(true);
        ;
        ;
        ManaGainAmount = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        AttackDamage = GetTotalAttackDamage(Owner);
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Owner, Target, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellBuffAdd(Owner, Unit, "Slow", 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, default, default, default);
            ;
            ;
        });
        this.WillRemove = SetVarInTable(true);
        ;
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SpellEffectRemove(this.ParticleID);
        SpellBuffClear(Owner, "SiphoningStrikeNew");
        ApplyDamage(Attacker, Target, 0 + DamageToDeal, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        ;
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellCooldown = SetVarInTable(this.SpellCooldown ?? 0);
        ;
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0 + NewCooldown);
        SetDodgePiercing(Owner, false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TAD = GetTotalAttackDamage(Attacker);
        ;
        ;
        totalAttackDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        SpellBuffRemove(Owner, "PowerFist", Owner, 0);
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        SpellBuffRemove(Owner, "ShyvanaDoubleAttackDragon", Owner, 0);
        ;
        ForEachUnitInTargetArea(Owner, Target, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ;
            ;
        });
        SpellBuffRemove(Owner, "ShyvanaDoubleAttack", Owner, 0);
        ;
        ;
        ;
        ;
        ;
        Level = GetLevel(Owner);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Target, Target, "Internal_50MS", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "GrievousWound", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        Say(Owner, "YO!", default);
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(0);
        TotalIncValue = SetVarInTable(0);
        ;
        CoreDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ApplyDamage(Attacker, Target, 0, PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 0, 0, 0, false, false, Attacker);
        ;
        ;
        PopCharacterFade(Owner, this.ID);
        ;
        SpellBuffRemove(Owner, "TalonShadowAssaultBuff", Owner, 0);
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(HealParticle, default, "olaf_viciousStrikes_heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, default, default, default, default);
        this.HasHit = SetVarInTable(true);
        SpellBuffRemove(Owner, "DeceiveCritBonus", Owner, 0);
        ApplyDamage(Attacker, Target, 0 + DamageAmount, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 0, false, true, Attacker);
        ;
        teamID = GetTeamID(default);
        Caster = GetChampionBySkinName("Shaco", teamID ?? TEAM_UNKNOWN);
        ;
        ;
        DamageAmount = SetVarInTable(0);
        ApplyDamage(Caster, Target, 0 + TotalDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 1, 0, false, false, Caster);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        ApplyDamage(Caster, Target, 0 + DamageAmount, PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Caster);
        ;
        PassiveMultiplier = SetVarInTable(0.05);
        Count = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        TeamID = GetTeamID(default);
        ;
        LifestealPercent = SetVarInTable(VALUE_BY_LEVEL);
        ;
        IncHealth(Caster, 0 + HealAmount, Caster);
        SpellEffectCreate(A, default, "yorick_ravenousGhoul_lifesteal_self.troy", default, TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Caster, false, Caster, default, default, Caster, default, default, true, default, default, false, false, default, default);
        ApplyDamage(Caster, Target, 0 + DamageAmount, PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Caster);
        ;
        Caster = SetBuffCasterUnit();
        ApplyDamage(Caster, Target, 0 + DamageAmount, PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Caster);
        ;
        ;
        Caster = SetBuffCasterUnit();
        ApplyDamage(Caster, Target, 0 + DamageAmount, PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, true, true, Caster);
        DamageAmount = SetVarInTable(0);
        NextBuffVars.DamageCount = SetVarInTable(CharVars.DamageCount);
        SpellBuffAdd(Owner, Owner, "PoppyMightOfDemacia", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        ;
        ;
        SpellEffectCreate(A, default, "poppydam_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "hammer_b", default, Target, default, default, false, default, default, default, default, default, default);
        ;
        MaxDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonIcon", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ApplyDamage(Attacker, Target, 90, MAGIC_DAMAGE, DAMAGESOURCE_PROC, 1, 0, default, default, default, default);
        this.WillRemove = SetVarInTable(true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
    }
    public void BuffOnPreDamage()
    {
        ;
        ;
        DamageAmount = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.oldStoredAmount = SetVarInTable(CharVars.StoredDamage);
        ;
        ;
        SetBuffToolTipVar(1, 0 + CharVars.StoredDamage);
        SpellBuffAdd(Owner, Owner, "OdinCenterRelicShieldCheck", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.oldArmorAmount = SetVarInTable(this.TotalArmorAmount);
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.TotalArmorAmount);
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.TotalShield);
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.TotalShield);
        this.oldArmorAmount = SetVarInTable(this.TotalArmorAmount);
        ;
        ;
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.ShieldAbsorb);
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.DamageBlock);
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.DamageBlock);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        DamageAmount = SetVarInTable(0);
        ;
        Caster = SetBuffCasterUnit();
        ;
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.DamageBlock);
        ;
        ;
        ;
        ;
        IncPAR(Owner, 0 + DA);
        ;
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.ShieldHealth);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "MalphiteShieldBeenHit", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.oldArmorAmount = SetVarInTable(this.TotalArmorAmount);
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.DamageBlock);
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.shieldHealth);
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.TotalArmorAmount);
        ;
        ;
        ;
        ;
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.Shield);
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.Shield);
        ;
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.DamageBlock);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.ManaShield);
        TeamID = GetTeamID(default);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.ShieldAmount);
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.ShieldHealth);
        ;
        this.oldArmorAmount = SetVarInTable(this.DamageBlock);
        ;
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.Shield);
        ;
        ;
        SetBuffToolTipVar(1, 0 + this.Shield);
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        DamageAmount = SetVarInTable(0);
        ;
        DamageAmount = SetVarInTable(0);
        ;
        this.oldArmorAmount = SetVarInTable(this.DamageBlock);
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.TotalArmorAmount);
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.TotalArmorAmount);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, false, false, false, default);
        SpellBuffAdd(Owner, Owner, "MissFortuneStrutDebuff", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ;
        SetTriggerUnit(Attacker);
        ;
        ;
        PassiveMultiplier = SetVarInTable(0.05);
        Count = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.ShieldHealth);
        ;
        ;
        ;
        ;
        this.oldArmorAmount = SetVarInTable(this.ShieldHealth);
        ;
        ;
        ;
    }
    public void UpdateSelfBuffActions()
    {
        Level = SetVarInTable(TalentLevel);
        AvatarVars.MasteryButcher = SetVarInTable(true);
        AvatarVars.MasteryButcherAmt = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        AvatarVars.Scout = SetVarInTable(true);
        ;
        ;
        ;
        ;
        Level = SetVarInTable(TalentLevel);
        NextBuffVars.GoldAmount = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "MasteryHoardBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "MonsterBuffs", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ExecutePeriodically(0.8, CharVars.LastTimeExecuted, default, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 400, "AffectFriends AffectHeroes ", default, default, (Iterator) =>
            {
                NextBuffVars.AttackSpeedIncrease = SetVarInTable(CharVars.AttackSpeedIncrease);
                SpellBuffAdd(Owner, Unit, "DivineBlessingAura", 1, default, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, default, default, default, default, default);
            });
        });
        AvatarVars.Test = SetVarInTable(10);
        Level = SetVarInTable(TalentLevel);
        AvatarVars.MasteryInitiate = SetVarInTable(true);
        AvatarVars.MasteryInitiateAmt = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        AvatarVars.MasteryBladedArmor = SetVarInTable(true);
        AvatarVars.MasteryBladedArmorAmt = SetVarInTable(6);
        ;
        ;
        ;
        ;
        AvatarVars.MasterySeigeCommander = SetVarInTable(true);
        Level = SetVarInTable(TalentLevel);
        AvatarVars.MasteryBounty = SetVarInTable(true);
        AvatarVars.MasteryBountyAmt = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        AvatarVars.MasteryScholar = SetVarInTable(true);
        NextBuffVars.Level = SetVarInTable(TalentLevel);
        ;
        ;
        ExecutePeriodically(3, this.LastTimeExecuted, false, () =>
        {
            Level = SetVarInTable(TalentLevel);
            AvatarVars.MasteryDemolitionist = SetVarInTable(true);
            AvatarVars.MasteryDemolitionistAmt = SetVarInTable(VALUE_BY_LEVEL);
        });
        Level = SetVarInTable(TalentLevel);
        AvatarVars.MasteryJuggernaut = SetVarInTable(true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTime2Executed, true, () =>
        {
            ;
            SetSpellToolTipVar(0 + BlitzAP, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(2, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
            ;
            DamageMod = SetVarInTable(VALUE_BY_LEVEL);
            ;
            SetSpellToolTipVar(0 + AttackDamage, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(2, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        armorMod = GetArmor(Owner);
        ;
        SetSpellToolTipVar(0 + bonusArmor, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(4, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        SpellBuffAdd(Owner, Owner, "EquipmentMastery", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpellToolTipVar(0 + AttackDamage, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        ;
        Factor = SetVarInTable(VALUE_BY_LEVEL);
        ;
        FlatBonusMR = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SetSpellToolTipVar(0 + CharVars.BonusMR, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(4, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(3, CharVars.LastCrit, false, () =>
        {
            ;
        });
        ;
        ;
        AD = GetTotalAttackDamage(Owner);
        SetSpellToolTipVar(0 + AD, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            SetSpellToolTipVar(0 + BonusAD, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + BonusAD, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + BonusAD200, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        AttackDamage = GetTotalAttackDamage(Owner);
        SetSpellToolTipVar(0 + AttackDamage, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "NashorsToothCD", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "ViktorHexCore", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpellToolTipVar(0 + CharVars.BonusForItem, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(3, this.LastTimeExecuted2, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "ViktorAugmentE", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "Thornmail", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        TempLevel = GetLevel(Owner);
        ;
        ExecutePeriodically(2, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "FiendishCodex", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(0.95, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "TearOfTheGoddessTrack", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpellToolTipVar(0 + CharVars.TearBonusMana, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "HauntingGuise", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () =>
        {
            NextBuffVars.MagicResistBonus = SetVarInTable(30);
            NextBuffVars.ArmorBonus = SetVarInTable(25);
            ForEachUnitInTargetArea(Owner, Owner, 800, "AffectFriends AffectMinions AffectHeroes ", default, default, (Iterator) =>
            {
                ;
                ;
            });
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "MejaisCheck", 1, 1, 1.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            ;
            ;
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "AtmasImpaler", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "Brutalizer", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "Kindlegem", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        ;
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "TearOfTheGoddessTrack", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpellToolTipVar(0 + CharVars.TearBonusMana, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(5, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "PrilisasBlessing", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "WriggleLantern", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
            ;
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "HextechSweeper", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "OdinBloodrazor", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () =>
        {
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
            SetSpellToolTipVar(0 + BonusAD9, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + BonusAD, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + BonusAD200, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        Damage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        HSS = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SetSpellToolTipVar(0 + HSSDamage, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ;
        ;
        ;
        ;
        Spear = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SetSpellToolTipVar(0 + SpearDamage, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ExecutePeriodically(1, this.LastTime2Executed, true, () =>
        {
            ;
            totalDamage = GetTotalAttackDamage(Owner);
            ;
            ;
            ;
            SetSpellToolTipVar(0 + Spell3Display, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        SpellBuffAdd(Owner, Owner, "EquipmentMastery", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpellToolTipVar(0 + AttackDamage, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        ;
        Factor = SetVarInTable(VALUE_BY_LEVEL);
        ;
        FlatBonusMR = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        SetSpellToolTipVar(0 + CharVars.BonusMR, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(4, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ArmorVal = GetArmor(Owner);
            ;
            SetSpellToolTipVar(0 + ArmorVal, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ;
        ;
        ;
        ;
        SetSpellToolTipVar(0 + BonusDamage, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ;
        ;
        ExecutePeriodically(1, this.LastTime2Executed, true, () =>
        {
            ;
            ;
            MushroomCooldown = SetVarInTable(VALUE_BY_LEVEL);
            ;
            ;
            ;
            SetSpellToolTipVar(0 + CharVars.MushroomCooldown, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            ;
            ;
            SetSpellToolTipVar(0 + MushroomCooldownNL, 2, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ;
        ExecutePeriodically(4, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        Level = SetVarInTable(VALUE_BY_LEVEL);
        armorMod = GetArmor(Owner);
        ;
        ;
        ;
        SetSpellToolTipVar(0 + bonusArmor, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
            SetSpellToolTipVar(0 + BonusDamage, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            SetSpellToolTipVar(0 + BonusDamage2, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ;
        ;
        ;
        SetSpellToolTipVar(0 + BonusAD, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(0.4, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            SetSpellToolTipVar(0 + BonusAD, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            TAD = GetTotalAttackDamage(Owner);
            ;
            SetSpellToolTipVar(0 + TAD, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            AD = GetTotalAttackDamage(Owner);
            ;
            SetSpellToolTipVar(0 + AD, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ;
        ;
        ;
        SetSpellToolTipVar(0 + BonusAD2, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        SetSpellToolTipVar(0 + BonusAD, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(3, CharVars.LastCrit, false, () =>
        {
            ;
        });
        ;
        ;
        AD = GetTotalAttackDamage(Owner);
        SetSpellToolTipVar(0 + AD, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(4, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
            SetSpellToolTipVar(0 + NewCooldown, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ;
        ;
        ExecutePeriodically(1, this.LastTime2Executed, true, () =>
        {
            ;
            totalDamage = GetTotalAttackDamage(Owner);
            ;
            ;
            ;
            SetSpellToolTipVar(0 + Spell3Display, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(2, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(0.4, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            totalDamage = GetTotalAttackDamage(Owner);
            ;
            ;
            ;
            SetSpellToolTipVar(0 + bbBonusDamage, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            ;
            SetSpellToolTipVar(0 + dlBonusDamage, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(1, this.LastTime2Executed, true, () =>
        {
            this.AkaliDamageVar = GetTotalAttackDamage(Owner);
            ;
            SetSpellToolTipVar(0 + AkaliDamage1, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            ;
            ;
            DanceTimerCooldown = SetVarInTable(VALUE_BY_LEVEL);
            ;
            ;
            ;
            SetSpellToolTipVar(0 + CharVars.DanceTimerCooldown, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            ;
            ;
            SetSpellToolTipVar(0 + DanceTimerCooldownNL, 2, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(1, this.LastTime2Executed, true, () =>
        {
            ;
            totalDamage = GetTotalAttackDamage(Owner);
            ;
            ;
            ;
            SetSpellToolTipVar(0 + Spell3Display, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            ;
            ;
            BaseDamage = GetTotalAttackDamage(Owner);
            ;
            SetSpellToolTipVar(0 + AttackDamage, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + FinalAP, 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ;
        ;
        ;
        ;
        ;
        AttackDamage = GetTotalAttackDamage(Owner);
        SetSpellToolTipVar(0 + AttackDamage, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            AttackDamage = GetTotalAttackDamage(Owner);
            ;
            SetSpellToolTipVar(0 + RAttackGain, 3, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            ;
            ;
            ;
            SetSpellToolTipVar(0 + QAttackDamage, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            ;
            SetSpellToolTipVar(0 + RAttackDamage, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            ;
            SetSpellToolTipVar(0 + RAttackDamage, 2, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            ;
            SetSpellToolTipVar(0 + EAttackDamage, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            ;
            SetSpellToolTipVar(0 + WAttackDamage, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ;
        ;
        ExecutePeriodically(1, this.LastTime2Executed, true, () =>
        {
            ;
            SetSpellToolTipVar(0 + BlitzAP, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(1, this.LastTime2Executed, true, () =>
        {
            ;
            this.RenekthonDamage = GetTotalAttackDamage(Owner);
            ;
            ;
            SetSpellToolTipVar(0 + RenekthonTooltip1, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            ;
            SetSpellToolTipVar(0 + RenekthonTooltip1b, 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            ;
            ;
            SetSpellToolTipVar(0 + RenekthonTooltip3, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            ;
            ;
            SetSpellToolTipVar(0 + RenekthonTooltip4, 2, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            ;
            SetSpellToolTipVar(0 + RenekthonTooltip2, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            ;
            SetSpellToolTipVar(0 + RenekthonTooltip5, 2, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ;
        ;
        ;
        ExecutePeriodically(1.5, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ;
        ;
        ExecutePeriodically(0.4, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        IsInBrush = IsInBrush(Attacker);
        ;
        ExecutePeriodically(5, this.LastTimeExecuted, true, () =>
        {
            OwnerLevel = GetLevel(Owner);
            ForEachUnitInTargetArea(Owner, Owner, 500, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (Iterator) =>
            {
                ;
            });
        });
        ;
        Scaling = SetVarInTable(VALUE_BY_LEVEL);
        Damagess = GetTotalAttackDamage(Owner);
        ;
        SetSpellToolTipVar(0 + TTVar, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ExecutePeriodically(1, CharVars.LastTimeExecuted, false, () =>
        {
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (Iterator) =>
            {
                ;
            });
        });
        ;
        ;
        ;
        SetSpellToolTipVar(0 + BonusAD, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        SetSpellToolTipVar(0 + BonusAD2, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        ExecutePeriodically(0.5, this.LastTimeExecuted, false, () =>
        {
            AttackDamage = GetTotalAttackDamage(Owner);
            ;
            SetSpellToolTipVar(0 + AttackDamage, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(0.5, this.LastTime2Executed, true, () =>
        {
            ;
            ;
            ;
            ;
            SetSpellToolTipVar(0 + BonusDamage, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            SetSpellToolTipVar(0 + HPPoolMod, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
            SetSpellToolTipVar(0 + NewCooldown, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(5, this.LastTimeExecuted, false, () =>
        {
            TotalAD = GetTotalAttackDamage(Owner);
            ;
            ;
            ;
            ;
            ;
            SetSpellToolTipVar(0 + AD1, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + AD3A, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + AD3B, 2, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(1, this.LastTime2Executed, true, () =>
        {
            ;
            totalDamage = GetTotalAttackDamage(Owner);
            ;
            ;
            ;
            SetSpellToolTipVar(0 + Spell3Display, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            ;
        });
        ;
        ;
        ;
        ;
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "WizardsRegalia", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "IonianBootsofLucidity", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        ;
        BonusAD = SetVarInTable(0);
        WBonusAD = SetVarInTable(0);
        EBonusAD = SetVarInTable(0);
        QTotalBonus = SetVarInTable(0);
        RBonusAD = SetVarInTable(0);
        QMagicBonus = SetVarInTable(0);
        ;
        TotalAD = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        SetSpellToolTipVar(0 + WBonusAD, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Target);
        ;
        ;
        SetSpellToolTipVar(0 + W2BonusAD, 2, 1, SpellSlots, SPELLBOOK_CHAMPION, Target);
        ;
        ;
        SetSpellToolTipVar(0 + EBonusAD, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Target);
        ;
        QDamagePercentVal = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SetSpellToolTipVar(0 + QTotalBonus, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Target);
        ;
        ;
        SetSpellToolTipVar(0 + RBonusAD, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Target);
        ;
        ;
        ;
        ;
        SetSpellToolTipVar(0 + QBonusAD2, 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Target);
        ExecutePeriodically(9, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "ViktorHexCore", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpellToolTipVar(0 + CharVars.BonusForItem, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(3, this.LastTimeExecuted2, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "ViktorAugmentQ", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Attacker, Target, "Hardening", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ExecutePeriodically(0.25, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(0.5, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
            SetSpellToolTipVar(0 + NewCooldown, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(0, this.LastTimeExecuted, true, () =>
        {
            ;
        });
        ExecutePeriodically(0.4, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(2, this.LastTime2Executed, true, () =>
        {
            ChargeCooldown = SetVarInTable(10);
            ;
            ;
            ;
            SetSpellToolTipVar(0 + CharVars.ChargeCooldown, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            totalDamage = GetTotalAttackDamage(Owner);
            ;
            ;
            ;
            ;
            SetSpellToolTipVar(0 + BonusDamage, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            NextBuffVars.AP_Buff = SetVarInTable(30);
            NextBuffVars.SpellVamp_Buff = SetVarInTable(0.25);
            ;
            ;
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "ViktorHexCore", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpellToolTipVar(0 + CharVars.BonusForItem, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(3, this.LastTimeExecuted2, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "ViktorAugmentW", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ;
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "TearOfTheGoddessTrack", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "ManamuneAttackTrack", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellBuffAdd(Owner, Owner, "ManamuneAttackConversion", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpellToolTipVar(0 + CharVars.TearBonusMana, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "WitsEnd", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "SpiritVisage", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "AvariceBlade", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(1, this.LastTime2Executed, true, () =>
        {
            Level = GetLevel(Owner);
            MantraTimerCooldown = SetVarInTable(VALUE_BY_LEVEL);
            ;
            ;
            ;
            SetSpellToolTipVar(0 + CharVars.MantraTimerCooldown, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ;
        ;
        SetSpellToolTipVar(0 + BonusAD, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "LightningRodApplicator", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(60, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
            ;
            ;
            ;
            SpellEffectCreate(ThisParticle, default, "RodofAges_itm.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        });
        TempLevel = GetLevel(Owner);
        ;
        ;
        ;
        SetSpellToolTipVar(0 + BonusAD, 1, 3, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            ;
        });
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Attacker, Target, "Hardening", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            SetSpellToolTipVar(0 + HealthDamage, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ;
        ;
        SetSpellToolTipVar(0 + BonusDamage2, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        Damage = GetTotalAttackDamage(Owner);
        ;
        ;
        Spear = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SetSpellToolTipVar(0 + SpearDamage, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "ShurelyasCrest", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "YoumusBlade", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "Sting", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "OdynsVeil", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "ZhonyasRing", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            NextBuffVars.MagicResistBonus = SetVarInTable(15);
            NextBuffVars.ArmorBonus = SetVarInTable(12);
            NextBuffVars.DamageBonus = SetVarInTable(8);
            ;
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            SetSpellToolTipVar(0 + BonusAD, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + BonusAD80, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
            SetSpellToolTipVar(0 + BonusAD, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "Bloodrazor", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(2, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
            ;
            ;
            ;
            DamageMod = SetVarInTable(VALUE_BY_LEVEL);
            ;
            ;
            TotalAD = GetTotalAttackDamage(Owner);
            ;
            ;
            SetSpellToolTipVar(0 + AttackDamage, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
            SetSpellToolTipVar(0 + BonusAD, 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "HextechRevolver", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "LeviathanCheck", 1, 1, 1.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
            ;
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Attacker, Target, "MuramasaCheck", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
            ;
            ;
        });
        ExecutePeriodically(10, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "LightstrikerApplicator", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "ForceofNature", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "ViktorHexCore", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SetSpellToolTipVar(0 + CharVars.BonusForItem, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "PhilosophersStone", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "VoidStaff", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        ExecutePeriodically(3, this.LastTimeExecuted, true, () =>
        {
            ;
            NextBuffVars.ManaRegenBonus = SetVarInTable(1.8);
            NextBuffVars.HealthRegenBonus = SetVarInTable(0);
            ;
            ;
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "KagesLuckyPick", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "DeathfireGrasp", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(2.85, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "Malady", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "InfinityEdge", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "HextechGunblade", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "RanduinsOmen", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Attacker, Target, "Hardening", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "LastWhisper", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "GlacialShroud", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "Breathstealer", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Attacker, Target, "Hardening", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ExecutePeriodically(9, this.LastTimeExecuted, true, () =>
        {
            ;
            ;
        });
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "RitualStaff", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
    }
    public void UpdateSelfBuffStats()
    {
        ;
        ;
        Level = SetVarInTable(TalentLevel);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Level = SetVarInTable(TalentLevel);
        Greed = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        Level = SetVarInTable(TalentLevel);
        ManaMod = SetVarInTable(VALUE_BY_LEVEL);
        IncPercentPARPoolMod(Owner, 0 + ManaMod);
        ;
        ;
        Level = SetVarInTable(TalentLevel);
        ManaMod = SetVarInTable(VALUE_BY_LEVEL);
        IncFlatPARRegenMod(Owner, 0 + ManaMod);
        ;
        ;
        OwnerLevel = GetLevel(Owner);
        Level = SetVarInTable(TalentLevel);
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        Level = SetVarInTable(TalentLevel);
        CooldownMod = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ChampLevel = GetLevel(Owner);
        ;
        ;
        Level = SetVarInTable(TalentLevel);
        ExperienceMod = SetVarInTable(VALUE_BY_LEVEL);
        ;
        Level = SetVarInTable(TalentLevel);
        ManaMod = SetVarInTable(VALUE_BY_LEVEL);
        Energy = SetVarInTable(VALUE_BY_LEVEL);
        CharLevel = GetLevel(Owner);
        ;
        IncFlatPARPoolMod(Owner, 0 + Mana);
        IncFlatPARPoolMod(Owner, 0 + Energy);
        ;
        ;
        Level = SetVarInTable(TalentLevel);
        ;
        Level = SetVarInTable(TalentLevel);
        ExperienceMod = SetVarInTable(VALUE_BY_LEVEL);
        ;
        Level = SetVarInTable(TalentLevel);
        RegenPercent = SetVarInTable(VALUE_BY_LEVEL);
        IncPercentPARRegenMod(Owner, 0 + RegenPercent);
        ;
        ;
        ;
        Level = SetVarInTable(TalentLevel);
        ;
        ;
        OwnerLevel = GetLevel(Owner);
        Level = SetVarInTable(TalentLevel);
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        Level = SetVarInTable(TalentLevel);
        RegenMod = SetVarInTable(VALUE_BY_LEVEL);
        IncFlatPARRegenMod(Owner, 0 + RegenMod);
        ;
        ;
        Level = SetVarInTable(TalentLevel);
        RegenPercent = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, default, () =>
        {
            DebugSay(Owner, "DamageInc: ", DamageInc);
        });
        ;
        ;
        Level = SetVarInTable(TalentLevel);
        ;
        Level = SetVarInTable(TalentLevel);
        ;
        Level = SetVarInTable(TalentLevel);
        ;
        ;
        Level = SetVarInTable(TalentLevel);
        Vamp = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        Level = SetVarInTable(TalentLevel);
        ;
        ;
        ChampLevel = GetLevel(Owner);
        ;
        IncMaxHealth(Owner, 0 + HealthMod, false);
        ;
        ;
        IncMaxHealth(Owner, 0 + PlusHealth, false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "ResistantSkin", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "WormRecouperateOn", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "HeartOfGold", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ;
        ;
        SetSpellToolTipVar(0 + CharVars.TearBonusMana, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        ;
        SetSpellToolTipVar(0 + CharVars.TearBonusMana, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            NextBuffVars.HealthVar = SetVarInTable(200);
            SpellBuffAdd(Owner, Owner, "DoranT2Health", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ExecutePeriodically(0.9, this.LastTimeExecuted, false, () =>
        {
            ;
        });
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            ;
            ;
            SetSpellToolTipVar(0 + TotalBonus, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, false, () =>
        {
            Count = SetVarInTable(0);
            CharVars.CCReduction = SetVarInTable(1);
            ForEachUnitInTargetArea(Owner, Owner, 1400, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
            {
                CanSee = CanSeeTarget(Owner, Unit);
                ;
            });
            SpellBuffClear(Owner, "IreliaIonianDuelist");
            ;
            ;
            ;
        });
        ;
        ;
        Level = GetLevel(Owner);
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            ;
            SetSpellToolTipVar(0 + DamageBonus, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        });
        ;
        ;
        baseHP = SetVarInTable(400);
        healthPerLevel = SetVarInTable(85);
        Level = GetLevel(Owner);
        ;
        ;
        ;
        ;
        SetSpellToolTipVar(0 + totalBonusHealth, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        ;
        ;
        ;
        ;
        SetSpellToolTipVar(0 + this.PhysicalDamageBonus, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        SetSpellToolTipVar(0 + PercentLifeStealTT, 2, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            SpellBuffAdd(Owner, Owner, "OdinBloodburster", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        Level = GetLevel(Owner);
        this.punchdmg = SetVarInTable(VALUE_BY_LEVEL);
        SetBuffToolTipVar(1, 0 + this.punchdmg);
        ;
        ;
        SetSpellToolTipVar(0 + this.ExtraHP, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        SetSpellToolTipVar(0 + ExtraRegenTT, 2, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        ;
        IncFlatPARPoolMod(Owner, 0 + this.BonusMana);
        SetSpellToolTipVar(0 + this.BonusHealth, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        SetSpellToolTipVar(0 + this.BonusAbilityPower, 3, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        SetSpellToolTipVar(0 + this.BonusMana, 2, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        Hunt = SetVarInTable(false);
        ForEachUnitInTargetArea(Owner, Owner, 2000, "AffectEnemies AffectNeutral AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        ;
        ExecutePeriodically(9, this.LastTimeExecuted, false, () =>
        {
            SpellBuffAdd(Owner, Owner, "ChaliceOfHarmony", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ;
        ExecutePeriodically(1, this.LastTimeExecuted, true, () =>
        {
            NextBuffVars.HealthVar = SetVarInTable(200);
            SpellBuffAdd(Owner, Owner, "DoranT2Health", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ;
    }
    public void CharOnPreDamage()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "MalphiteShieldBeenHit", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "GravesPassiveCounter", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "GravesPassiveGrit", 11, 0, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        ;
    }
    public void SetVarsByLevel()
    {
        Level = SetVarInTable(TalentLevel);
        this.SmallDamageAmount = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        Level = SetVarInTable(TalentLevel);
        AvatarVars.PromoteArmorBonus = SetVarInTable(20);
        AvatarVars.PromoteCooldownBonus = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        AvatarVars.ManaBonus = SetVarInTable(1);
        Level = SetVarInTable(TalentLevel);
        AvatarVars.ClairvoyanceDurationBonus = SetVarInTable(4);
        AvatarVars.ClairvoyanceCooldownBonus = SetVarInTable(VALUE_BY_LEVEL);
        ;
        AvatarVars.SummonerCooldownBonus = SetVarInTable(SummonerCooldownBonus);
        ;
        AvatarVars.SummonerCooldownBonus = SetVarInTable(SummonerCooldownBonus);
        AvatarVars.FortifySplashDamage = SetVarInTable(1);
        AvatarVars.utilityMastery = SetVarInTable(TalentLevel);
        Level = SetVarInTable(TalentLevel);
        AvatarVars.GhostMovementBonus = SetVarInTable(VALUE_BY_LEVEL);
        AvatarVars.GhostDurationBonus = SetVarInTable(VALUE_BY_LEVEL);
        Level = SetVarInTable(TalentLevel);
        AvatarVars.HealCooldownBonus = SetVarInTable(VALUE_BY_LEVEL);
        AvatarVars.StifleDurationBonus = SetVarInTable(0.5);
        AvatarVars.StifleCooldownBonus = SetVarInTable(10);
        Level = SetVarInTable(TalentLevel);
        AvatarVars.RallyAPMod = SetVarInTable(70);
        AvatarVars.RallyDurationBonus = SetVarInTable(VALUE_BY_LEVEL);
        Level = SetVarInTable(TalentLevel);
        AvatarVars.RevivePreservationBonus = SetVarInTable(400);
        AvatarVars.ReviveCooldownBonus = SetVarInTable(VALUE_BY_LEVEL);
        AvatarVars.offensiveMastery = SetVarInTable(TalentLevel);
        Level = SetVarInTable(TalentLevel);
        this.SmallDamageAmount = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        CharVars.AttackSpeedIncrease = SetVarInTable(VALUE_BY_LEVEL);
        Level = SetVarInTable(TalentLevel);
        this.DamageBlock = SetVarInTable(VALUE_BY_LEVEL);
        Level = SetVarInTable(TalentLevel);
        AvatarVars.BoostCooldownBonus = SetVarInTable(20);
        AvatarVars.defensiveMastery = SetVarInTable(TalentLevel);
        Level = SetVarInTable(TalentLevel);
        AvatarVars.FlashCooldownBonus = SetVarInTable(VALUE_BY_LEVEL);
        Level = SetVarInTable(TalentLevel);
        AvatarVars.SmiteGoldBonus = SetVarInTable(5);
        AvatarVars.SmiteCooldownBonus = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        Level = SetVarInTable(TalentLevel);
        ;
        AvatarVars.TeleportCooldownBonus = SetVarInTable(VALUE_BY_LEVEL);
        AvatarVars.PromoteCooldownBonus = SetVarInTable(VALUE_BY_LEVEL);
        Level = SetVarInTable(TalentLevel);
        AvatarVars.ExhaustArmorMod = SetVarInTable(-10);
        AvatarVars.ExhaustDurationBonus = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        CharVars.MagicAbsorb = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.LifeStealAmount = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.CritPerSecond = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.BaseBlockAmount = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.KillsPerArmor = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.ArmorPerChampionKill = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.MagicResistReduction = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.KillsPerArmor = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.ArmorPerChampionKill = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.BaseCritChance = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.LifeStealAmount = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.RegenMod = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.KillsPerArmor = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.ArmorPerChampionKill = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.TrailDuration = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.BlockChance = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.BaseBlockAmount = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.CritPerSecond = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.MagicAbsorb = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.BonusRange = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.KillsPerArmor = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.ArmorPerChampionKill = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.BaseCritChance = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.HealAmount = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.BaseCritChance = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.BaseBlockAmount = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.ArmorAmount = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.tooltipAmount = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.MagicResistReduction = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.BaseCritChance = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.StunDuration = SetVarInTable(VALUE_BY_LEVEL);
    }
    public void CharOnPreDealDamage()
    {
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Target, "OdinTurretDamage", 8, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        SpellBuffAdd(Owner, Target, "OdinTurretDamage", 8, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "GravesPassiveCounter", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "GravesPassiveGrit", 11, 0, 3, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        ;
        ;
        ;
    }
    public void CharOnPreAttack()
    {
        DebugSay(Owner, "Avatar PreAttack event.", default);
        ;
        ;
        ;
        ;
        Level = GetLevel(Owner);
        BrushCount = SetVarInTable(VALUE_BY_LEVEL);
        IsInBrush = IsInBrush(Attacker);
        ;
    }
    public void CharOnDodge()
    {
        SpellBuffAdd(Owner, Owner, "Nimbleness", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, default, default, default, default);
        ;
        ;
        ;
        ;
    }
    public void CharOnBeingHit()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void CharOnHitUnit()
    {
        ;
        ;
        ForEachUnitInTargetArea(Owner, Target, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, default, (Iterator) =>
        {
            ;
        });
        ;
        SpellEffectCreate(default, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        SpellEffectCreate(default, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        SpellEffectCreate(default, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.TickDamage = SetVarInTable(15);
        NextBuffVars.attackSpeedMod = SetVarInTable(-0.2);
        SpellBuffAdd(Attacker, Target, "DragonBurning", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Damage, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void CharOnActivate()
    {
        SpellBuffAdd(Owner, Owner, "ResistantSkinDragon", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        NextBuffVars.spawnTime = SetVarInTable(101);
        NextBuffVars.healthPerMinute = SetVarInTable(37);
        NextBuffVars.damagePerMinute = SetVarInTable(1.05);
        NextBuffVars.areaDmgReduction = SetVarInTable(0.2);
        NextBuffVars.goldPerMinute = SetVarInTable(0.38);
        NextBuffVars.expPerMinute = SetVarInTable(1.55);
        NextBuffVars.upgradeTimer = SetVarInTable(false);
        SpellBuffAdd(Attacker, Attacker, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RegenerationRuneAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        ;
        ;
        IncPermanentGoldReward(Owner, 8);
        IncPermanentExpReward(Owner, 24);
        NextBuffVars.spawnTime = SetVarInTable(101);
        NextBuffVars.healthPerMinute = SetVarInTable(16.5);
        NextBuffVars.damagePerMinute = SetVarInTable(0.286);
        NextBuffVars.areaDmgReduction = SetVarInTable(0.2);
        NextBuffVars.goldPerMinute = SetVarInTable(0.054);
        NextBuffVars.expPerMinute = SetVarInTable(0.2136);
        NextBuffVars.upgradeTimer = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IncPermanentGoldReward(Owner, -3);
        IncPermanentExpReward(Owner, -5);
        SpellBuffAdd(Owner, Target, "ManaBarrierIcon", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "OdinDisintegrate", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        teamID = SetVarInTable(TEAM_NEUTRAL);
        this.Bubble = AddPosPerceptionBubble(teamID, 1600, Owner, 25000, Nothing, false);
        NextBuffVars.spawnTime = SetVarInTable(101);
        NextBuffVars.areaDmgReduction = SetVarInTable(0.2);
        NextBuffVars.healthPerMinute = SetVarInTable(90);
        NextBuffVars.damagePerMinute = SetVarInTable(1.825);
        NextBuffVars.goldPerMinute = SetVarInTable(0.342);
        NextBuffVars.expPerMinute = SetVarInTable(2.5);
        NextBuffVars.upgradeTimer = SetVarInTable(true);
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "BlessingoftheLizardElder", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 100000, true, false, false, default);
        ;
        SpellBuffAdd(Attacker, Owner, "LifestealAttack", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.spawnTime = SetVarInTable(101);
        NextBuffVars.healthPerMinute = SetVarInTable(28);
        NextBuffVars.damagePerMinute = SetVarInTable(0.5);
        NextBuffVars.areaDmgReduction = SetVarInTable(0.2);
        NextBuffVars.goldPerMinute = SetVarInTable(0.48);
        NextBuffVars.expPerMinute = SetVarInTable(1.4);
        NextBuffVars.upgradeTimer = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RegenerationRuneAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        IncPermanentExpReward(Owner, 33);
        ;
        NextBuffVars.spawnTime = SetVarInTable(101);
        NextBuffVars.healthPerMinute = SetVarInTable(90);
        NextBuffVars.damagePerMinute = SetVarInTable(1.825);
        NextBuffVars.areaDmgReduction = SetVarInTable(0.2);
        NextBuffVars.goldPerMinute = SetVarInTable(0.324);
        NextBuffVars.expPerMinute = SetVarInTable(2.5);
        NextBuffVars.upgradeTimer = SetVarInTable(true);
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "CrestoftheAncientGolem", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        NextBuffVars.spawnTime = SetVarInTable(101);
        NextBuffVars.healthPerMinute = SetVarInTable(25);
        NextBuffVars.damagePerMinute = SetVarInTable(0.84);
        NextBuffVars.goldPerMinute = SetVarInTable(0.15);
        NextBuffVars.areaDmgReduction = SetVarInTable(0.2);
        NextBuffVars.expPerMinute = SetVarInTable(1.08);
        NextBuffVars.upgradeTimer = SetVarInTable(false);
        SpellBuffAdd(Attacker, Attacker, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        IncPermanentGoldReward(Owner, -8);
        IncPermanentExpReward(Owner, -12);
        SpellBuffAdd(Attacker, Target, "ResistantSkinDragon", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        NextBuffVars.spawnTime = SetVarInTable(101);
        NextBuffVars.healthPerMinute = SetVarInTable(31);
        NextBuffVars.damagePerMinute = SetVarInTable(0.44);
        NextBuffVars.areaDmgReduction = SetVarInTable(0.2);
        NextBuffVars.goldPerMinute = SetVarInTable(0.43);
        NextBuffVars.expPerMinute = SetVarInTable(1.5);
        NextBuffVars.upgradeTimer = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RegenerationRuneAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        ;
        IncPermanentGoldReward(Owner, 6);
        IncPermanentExpReward(Owner, 14);
        NextBuffVars.spawnTime = SetVarInTable(101);
        NextBuffVars.healthPerMinute = SetVarInTable(11.88);
        NextBuffVars.damagePerMinute = SetVarInTable(0.22);
        NextBuffVars.goldPerMinute = SetVarInTable(0.05);
        NextBuffVars.areaDmgReduction = SetVarInTable(0.2);
        NextBuffVars.expPerMinute = SetVarInTable(0.424);
        NextBuffVars.upgradeTimer = SetVarInTable(true);
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.spawnTime = SetVarInTable(101);
        NextBuffVars.healthPerMinute = SetVarInTable(12.1);
        NextBuffVars.damagePerMinute = SetVarInTable(0.2195);
        NextBuffVars.areaDmgReduction = SetVarInTable(0.2);
        NextBuffVars.goldPerMinute = SetVarInTable(0.036);
        NextBuffVars.expPerMinute = SetVarInTable(0.1064);
        NextBuffVars.upgradeTimer = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.spawnTime = SetVarInTable(101);
        NextBuffVars.healthPerMinute = SetVarInTable(12.1);
        NextBuffVars.damagePerMinute = SetVarInTable(0.2195);
        NextBuffVars.areaDmgReduction = SetVarInTable(0.2);
        NextBuffVars.goldPerMinute = SetVarInTable(0.036);
        NextBuffVars.expPerMinute = SetVarInTable(0.1064);
        NextBuffVars.upgradeTimer = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, "GlobalMonsterBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IncPermanentExpReward(Owner, -11);
        SpellBuffAdd(Owner, Owner, "OdinSuperMinion", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "OdinShieldRelicAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
        {
            NewDuration = SetVarInTable(50);
            ;
            SpellBuffAdd(Unit, Unit, "OdinQuestBuff", 1, 1, 0 + NewDuration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectUseable ", "OdinGuardianBuff", true, (Iterator) =>
        {
            SpellBuffAdd(Unit, Unit, "OdinQuestBuffParticle", 1, 1, 50, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ApplyDamage(Owner, Owner, 250000, TRUE_DAMAGE, DAMAGESOURCE_INTERNALRAW, 1, 0, 0, false, false, Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "OdinOpeningBarrierParticle", 1, 1, 80, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OdinMinion", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OdinMinion", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, true, false, false, default);
        NextBuffVars.BonusHealth = SetVarInTable(0);
        NextBuffVars.BubbleSize = SetVarInTable(1600);
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Owner, Unit, "CallForHelpManager", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ;
        OwnerPosition = GetUnitPosition(Owner);
        MyTeam = GetTeamID(default);
        ;
        OwnerPosition = GetUnitPosition(Owner);
        MyTeam = GetTeamID(default);
        PerceptionBubble = AddPosPerceptionBubble(MyTeam, 1600, OwnerPosition, 25000, Owner, true);
        EnemyTeam = SetVarInTable(TEAM_ORDER);
        PerceptionBubble2 = AddPosPerceptionBubble(EnemyTeam, 50, OwnerPosition, 25000, Nothing, false);
        SetDodgePiercing(Owner, true);
        ;
        SetDodgePiercing(Owner, true);
        SpellBuffAdd(Owner, Owner, "OdinGuardianBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OdinGuardianUI", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectFriends AffectHeroes ", default, false, (Iterator) =>
        {
            SpellBuffAdd(Unit, Unit, "OdinPlayerBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        NextBuffVars.HPPerLevel = SetVarInTable(75);
        NextBuffVars.DmgPerLevel = SetVarInTable(15);
        NextBuffVars.ArmorPerLevel = SetVarInTable(4);
        NextBuffVars.MR_per_level = SetVarInTable(2);
        SpellBuffAdd(Owner, Owner, "OdinGuardianStatsByLevel", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "OdinMinionPortal", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, true, false, false, default);
        NextBuffVars.BonusHealth = SetVarInTable(0);
        NextBuffVars.BubbleSize = SetVarInTable(1600);
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Owner, Unit, "CallForHelpManager", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ;
        OwnerPosition = GetUnitPosition(Owner);
        MyTeam = GetTeamID(default);
        ;
        OwnerPosition = GetUnitPosition(Owner);
        MyTeam = GetTeamID(default);
        PerceptionBubble = AddPosPerceptionBubble(MyTeam, 1600, OwnerPosition, 25000, Owner, true);
        EnemyTeam = SetVarInTable(TEAM_CHAOS);
        PerceptionBubble2 = AddPosPerceptionBubble(EnemyTeam, 50, OwnerPosition, 25000, Nothing, false);
        SetDodgePiercing(Owner, true);
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "OdinBombBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectFriends AffectNeutral AffectMinions AffectUseable ", "OdinGuardianBuff", true, (Iterator) =>
        {
            SpellBuffAdd(Unit, Unit, "OdinQuestIndicator", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        SpellBuffAdd(Owner, Owner, "OdinQuestParticleRemover", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OdinSuperMinion", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "OdinSpeedShrineAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "OdinParticlePHBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "OdinMinionPortal", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "JudicatorHolyFervor", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "TurretShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "StructureDamageReduction", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RebirthReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RebirthMarker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(part, default, "HallucinatePoof.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, Owner, false, default, default, default, default, default, default);
        SpellBuffAdd(Attacker, Owner, "TurretShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "StructureDamageReduction", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "PromoteMeBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "PromoteMeBuff", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "OdinDisintegrate", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "Visionary_marker", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "EmpoweredBulwark", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "Backstab", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "EmpathizeAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SpikedShell", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "VoidStone", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "DeathDefied", 1, 1, 30000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        CharVars.NumSwings = SetVarInTable(0);
        CharVars.LastHitTime = SetVarInTable(0);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Target, "EternalThirstIcon", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Owner, Unit, "SecondSight", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.Count = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 480.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, true, false, false, default);
        NextBuffVars.BonusHealth = SetVarInTable(250);
        NextBuffVars.BubbleSize = SetVarInTable(800);
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, true, false, false, default);
        SetDodgePiercing(Owner, true);
        NextBuffVars.StartDecay = SetVarInTable(660.1);
        SpellBuffAdd(Owner, Owner, "TurretPreBonus", 1, 1, 420, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 420, default, default, default, default);
        NextBuffVars.BonusHealth = SetVarInTable(250);
        NextBuffVars.BubbleSize = SetVarInTable(800);
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SetDodgePiercing(Owner, true);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, default, default, default, default);
        NextBuffVars.BonusHealth = SetVarInTable(0);
        NextBuffVars.BubbleSize = SetVarInTable(1600);
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        NextBuffVars.StartDecay = SetVarInTable(1200.1);
        SpellBuffAdd(Owner, Owner, "TurretPreBonus", 1, 1, 960, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 960, default, default, default, default);
        NextBuffVars.BonusHealth = SetVarInTable(250);
        NextBuffVars.BubbleSize = SetVarInTable(800);
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SetDodgePiercing(Owner, true);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 2280.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, default, default, default, default);
        NextBuffVars.BonusHealth = SetVarInTable(125);
        NextBuffVars.BubbleSize = SetVarInTable(1000);
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SetDodgePiercing(Owner, true);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, default, default, default, default);
        NextBuffVars.BonusHealth = SetVarInTable(0);
        NextBuffVars.BubbleSize = SetVarInTable(1600);
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "Focus", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "BowMasterFocusDisplay", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "Gemcraft", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        NextBuffVars.StartDecay = SetVarInTable(660.1);
        SpellBuffAdd(Owner, Owner, "TurretPreBonus", 1, 1, 420, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 420, default, default, default, default);
        NextBuffVars.BonusHealth = SetVarInTable(250);
        NextBuffVars.BubbleSize = SetVarInTable(800);
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SetDodgePiercing(Owner, true);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, default, default, default, default);
        NextBuffVars.BonusHealth = SetVarInTable(0);
        NextBuffVars.BubbleSize = SetVarInTable(1600);
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "Carnivore", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "BattleFury", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "ColossalStrength", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "CursedTouchMarker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "Scurvy", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "IsPirate", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 480.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, default, default, default, default);
        NextBuffVars.BonusHealth = SetVarInTable(250);
        NextBuffVars.BubbleSize = SetVarInTable(800);
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SetDodgePiercing(Owner, true);
        SpellBuffAdd(Owner, Owner, "TurretBonus", 1, 1, 2280.1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 60, default, default, default, default);
        NextBuffVars.BonusHealth = SetVarInTable(125);
        NextBuffVars.BubbleSize = SetVarInTable(1000);
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SetDodgePiercing(Owner, true);
        NextBuffVars.StartDecay = SetVarInTable(1200.1);
        SpellBuffAdd(Owner, Owner, "TurretPreBonus", 1, 1, 960, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 960, default, default, default, default);
        NextBuffVars.BonusHealth = SetVarInTable(250);
        NextBuffVars.BubbleSize = SetVarInTable(800);
        SpellBuffAdd(Owner, Owner, "TurretBonusHealth", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 10, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretAssistManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "TurretDamageManager", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 1, default, default, default, default);
        SetDodgePiercing(Owner, true);
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "LeblancPassive", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.lastCast = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MaokaiSapMagicPass", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.Tally = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "EmpoweredBulwark", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "UdyrMonkeyAgility", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "VeigarEquilibrium", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.APGain = SetVarInTable(0);
        CharVars.TotalBonus = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingCloneApplicator", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "EternalThirstIcon", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "LuxDeath", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Level = GetLevel(Owner);
        CharVars.IlluminateDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "LuxIlluminationPassive", 1, 1, 250000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Pantheon_Aegis", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "GarenRecouperateOn", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.CommandBonus = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        CharVars.NumSwings = SetVarInTable(0);
        CharVars.LastHitTime = SetVarInTable(0);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "RebirthMarker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "RebirthReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "Gemcraft", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        CharVars.DarkWindCount = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "Paranoia", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        FiddlesticksSkinID = GetSkinID(Attacker);
        ;
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "AhriIdleParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.OrbofDeceptionIsActive = SetVarInTable(0);
        CharVars.FoxFireIsActive = SetVarInTable(0);
        CharVars.SeduceIsActive = SetVarInTable(0);
        CharVars.TumbleIsActive = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "HeimerdingerTurretDetonation", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TechmaturgicalIcon", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.Time1 = SetVarInTable(25000);
        CharVars.Time2 = SetVarInTable(25000);
        CharVars.Time3 = SetVarInTable(25000);
        CharVars.Time4 = SetVarInTable(25000);
        CharVars.Time5 = SetVarInTable(25000);
        CharVars.Time6 = SetVarInTable(25000);
        CharVars.Level1 = SetVarInTable(4);
        CharVars.Level2 = SetVarInTable(4);
        CharVars.Level3 = SetVarInTable(4);
        CharVars.Level4 = SetVarInTable(4);
        CharVars.Level5 = SetVarInTable(4);
        CharVars.Level6 = SetVarInTable(4);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MalphiteShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "MordekaiserIronMan", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        IncPAR(Owner, -180);
        SpellBuffAdd(Attacker, Owner, "OrianaSpellSword", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        CharVars.GhostInitialized = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        GhostAlive = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "SkarnerBrushCheck", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        SetSpellToolTipVar(0 + BonusDamage, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SpellBuffAdd(Owner, Owner, "Camouflage", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0.1, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "TailwindSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Owner, Unit, "Tailwind", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ShenWayOfTheNinjaMarker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "IsNinja", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "SpikedShell", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ArcaneMastery", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "IreliaIdleParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "AlZaharVoidlingDetonation", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.BleedAmount = SetVarInTable(0.4);
        SpellBuffAdd(Owner, Owner, "XenZhaoPuncture", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.ComboCounter = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        NextBuffVars.BleedAmount = SetVarInTable(0.4);
        SpellBuffAdd(Owner, Owner, "XenZhaoPuncture", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        CharVars.ComboCounter = SetVarInTable(0);
        ;
        SpellBuffAdd(Attacker, Owner, "YomuSpellSword", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "YomuGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        GhostAlive = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "JarvanIVMartialCadence", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "FeelNoPain", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "GalioRunicSkin", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "Focus", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "BowMasterFocusDisplay", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ViktorPassiveAPPerLev", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CreateItem(Owner, 3200);
        OwnerTeam = GetTeamID(default);
        SpellEffectCreate(this.StaffIdle, this.StaffIdle2, "Viktor_idle.troy", "Viktor_idle.troy", OwnerTeam ?? TEAM_UNKNOWN, 0, 0, TEAM_NEUTRAL, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, "BUFFBONE_CSTM_WEAPON_1", default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "VoidStone", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Owner, Unit, "SecondSight", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        SealSpellSlot(2, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.Count = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SwainDampeningFieldMana", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "SoulEater", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.DamageBonus = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "DrawABead", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "DeadlyVenom_marker", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SivirPassive", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Nevershade", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "VladimirBloodGorged", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.WildfireCount = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "BrandPassive", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "BrandPassiveSound", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, true, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "IsNinja", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.Count = SetVarInTable(0);
        SpellBuffAdd(Attacker, Owner, "Voracity", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "AkaliTwinDisciplines", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "IsNinja", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        this.AkaliDamageVar = SetVarInTable(default);
        CharVars.VampPercent = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.CastPoint = SetVarInTable(1);
        SpellBuffAdd(Owner, Owner, "Scurvy", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "IsPirate", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SkinID = GetSkinID(Owner);
        ;
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RivenPassive", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "ManaBarrierIcon", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RenektonPredator", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        IncPAR(Owner, -99);
        CharVars.PerPercent = SetVarInTable(0.1);
        this.BonusAttackPercentage = SetVarInTable(2.25);
        this.AttackPercentage = SetVarInTable(1.5);
        CharVars.RageThreshold = SetVarInTable(0.5);
        CharVars.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        CharVars.RageBonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "RebirthReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RebirthMarker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "SilentKiller", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ShyvanaPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.HitCount = SetVarInTable(0);
        IncPAR(Owner, -100);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "UdyrMonkeyAgility", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "EmpathizeAura", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Attacker, "DoubleStrike", 7, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "MasterYiWujuDeactivated", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Owner, "OrianaSpellSword", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        CharVars.GhostInitialized = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        GhostAlive = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        CharVars.SecondSkinArmor = SetVarInTable(11);
        SpellBuffAdd(Owner, Owner, "Carnivore", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SealSpellSlot(2, SpellSlots, Owner, true, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        CharVars.DrippingWoundDuration = SetVarInTable(10);
        CharVars.DrippingWoundMax = SetVarInTable(5);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetSpellToolTipVar(40, 1, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SetSpellToolTipVar(125, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SetSpellToolTipVar(150, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        Level = GetLevel(Owner);
        CharVars.RegenValue = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "TrundleDiseaseOverseer", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        CharVars.DiseaseCounter = SetVarInTable(0);
        ;
        SpellBuffAdd(Owner, Owner, "ConsecrationAura", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "UdyrMonkeyAgility", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "LeonaSunlightPassive", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "FizzPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.LastHit = SetVarInTable(0);
        TeamID = GetTeamID(default);
        Caster = GetChampionBySkinName("Orianna", TeamID ?? TEAM_UNKNOWN);
        SpellBuffAdd(Caster, Owner, "OrianaGhost", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Caster, Owner, "OrianaGhostMinion", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        MyPosition = GetUnitPosition(Owner);
        NextBuffVars.MyPosition = SetVarInTable(MyPosition);
        SpellBuffAdd(Owner, Caster, "OriannaBallTracker", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "GragasHappyHour", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "ColossalStrength", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "VolibearPassiveBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "VolibearPassiveHealCheck", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.RegenPercent = SetVarInTable(0.3);
        CharVars.RegenTooltip = SetVarInTable(30);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
        {
            Name = GetUnitSkinName(Unit);
            ;
        });
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SwainTacticalSupremacy", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "BattleFury", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        IncPAR(Owner, -99);
        SetPARColorOverride(Owner, 255, 0, 0, 255, 175, 0, 0, 255);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "GravesPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.PassiveDuration = SetVarInTable(3);
        CharVars.PassiveMaxStacks = SetVarInTable(10);
        CharVars.ArmorAmount = SetVarInTable(1);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianDisplay", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        ;
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.LastHit = SetVarInTable(0);
        CharVars.AttackCounter = SetVarInTable(1);
        CharVars.MissileNumber = SetVarInTable(0);
        SpellBuffAdd(Attacker, Target, "TalonMercy", 1, 1, 250000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        CharVars.SecondSkinArmor = SetVarInTable(11);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SwainTacticalSupremacy", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "DeathDefied", 1, 1, 30000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.BarrageCounter = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "RapidReload", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 20000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingCloneApplicator", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "YomuSpellSword", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "YomuGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        GhostAlive = SetVarInTable(false);
        CharVars.MantraTimerCooldown = SetVarInTable(25);
        IncSpellLevel(Owner, 3, SpellSlots);
        SpellBuffAdd(Owner, Owner, "KarmaChakraCharge", 3, 2, 0 + CharVars.MantraTimerCooldown, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "KarmaOneMantraParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "KarmaTranscendence", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MissFortuneStrut", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "IsPirateHunter", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Visionary_marker", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RumbleHeatSystem", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RumbleHeatPunchTT", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IncPAR(Owner, -100);
        CharVars.DangerZone = SetVarInTable(50);
        CharVars.ShieldAmount = SetVarInTable(0);
        this.BaseCDR = SetVarInTable(10);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "CaitlynHeadshotPassive", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Carnivore", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "CursedTouchMarker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OlafBerzerkerRage", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ;
        ;
        SetSpellToolTipVar(0 + this.BonusDamage, 1, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "UdyrMonkeyAgility", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "Pyromania_Marker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        CharVars.CastPoint = SetVarInTable(1);
        ;
        ;
        SetSpellToolTipVar(0 + BonusDamage2, 1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Backstab", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        Caster = GetChampionBySkinName("Oriana", TeamID ?? TEAM_UNKNOWN);
        SpellBuffAdd(Caster, Owner, "OrianaGhost", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Caster, Owner, "OrianaGhostMinion", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        MyPosition = GetUnitPosition(Owner);
        NextBuffVars.MyPosition = SetVarInTable(MyPosition);
        SpellBuffAdd(Owner, Caster, "OriannaBallTracker", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "YorickUnholySymbiosis", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "YorickRavenousLifesteal", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "RebirthMarker", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "RebirthReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "XerathAscended", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "JudicatorHolyFervor", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "ChampionChampionDelta", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "APBonusDamageToTowers", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyValiantFighter", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, default, default, default, default);
        CharVars.DamageCount = SetVarInTable(0);
        CharVars.ArmorCount = SetVarInTable(0);
    }
    public void CharOnDisconnect()
    {
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        teamID = GetTeamID(default);
        ;
        ;
        ;
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, default, 6, InventorySlots, 1, true, false, false, default, default, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
        SpellCast(Owner, Owner, Owner, Owner, false, 6, InventorySlots, 1, true, false, false, false, false, default);
    }
    public void CharOnSpellCast()
    {
        ;
        ;
        SpellBuffRemove(Owner, "ActionTimer", Owner, default);
        SpellBuffRemove(Owner, "PropelTimer", Owner, default);
        SpellBuffRemove(Owner, "WrathTimer", Owner, default);
        SpellBuffRemove(Owner, "SweepTimer", Owner, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void BuffOnSpellCast()
    {
        SpellBuffAdd(Owner, Owner, "WormRecoupDebuff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "WormRecoupDebuff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffRemoveCurrent(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Attacker, "MonkeyKingCloneSweep", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(0.3);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ID = PushCharacterFade(Owner, 1, default, ID);
        this.WillFade = SetVarInTable(true);
        SpellBuffRemove(Owner, "HideInShadows", Owner, default);
        SpellBuffRemoveCurrent(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ID = PushCharacterFade(Owner, 1, default, ID);
        this.WillFade = SetVarInTable(true);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        PopCharacterFade(Owner, this.ID);
        ;
        SpellBuffRemove(Owner, "TalonShadowAssaultBuff", Owner, 0);
        ;
        ;
        ;
        ;
        DebugSay(Owner, "YOshield", SpellName);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void BuffOnPreDealDamage()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        TargetName = GetUnitSkinName(Target);
        DamageMultiplier = SetVarInTable(1.5);
        ;
        ;
        ;
        ;
        TargetName = GetUnitSkinName(Target);
        ;
        ;
        Level = GetLevel(Owner);
        ;
        ;
        ;
        IncPAR(Owner, 0 + ShieldAmount);
        Caster = SetBuffCasterUnit();
        Level = GetLevel(Owner);
        percentLeech = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        Level = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "SonaSoundOff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        teamID = GetTeamID(default);
        Caster = GetChampionBySkinName("MonkeyKing", teamID ?? TEAM_UNKNOWN);
        ApplyDamage(Caster, Target, 0 + DamageAmount, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Caster);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 12.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "RenektonInCombat", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        Caster = SetBuffCasterUnit();
        Level = GetLevel(Owner);
        percentLeech = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
    }
    public void BuffOnSpellHit()
    {
        NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
        Caster = SetBuffCasterUnit();
        ;
        ;
        ;
        ;
        ;
        Level = SetVarInTable(this.Level);
        TeamID = GetTeamID(default);
        Other1 = GetChampionBySkinName("Galio", TeamID ?? TEAM_UNKNOWN);
        ;
        ApplyDamage(Other1, Target, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Other1);
        SpellEffectCreate(HitVFX, default, "galio_windTunnel_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, false, default, default, false, false, default, default);
        Attacker = SetBuffCasterUnit();
        ;
        ;
    }
    public void BuffOnTakeDamage()
    {
        ;
        ;
        ;
        teamID = GetTeamID(default);
        Other1 = SpawnMinion("RunToMe", "TestCube", "idle.lua", Owner, teamID ?? TEAM_UNKNOWN, false, false, false, true, false, true, 0, default, true, Nothing, default);
        SpellBuffAdd(Owner, Other1, "DisconnectTarget", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.WillRemove = SetVarInTable(true);
        AttackerSkinName = GetUnitSkinName(Attacker);
        DamageMultiplier = SetVarInTable(1);
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "OdinCombatActive", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        this.PreviousTakeDamageTime = GetGameTime();
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffRemoveCurrent(Owner);
        SpellBuffAdd(Owner, Owner, "AdrenalineRushDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "GarenRecoupDebuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        this.BrushChecks = SetVarInTable(0);
        Caster = SetBuffCasterUnit();
        ;
        ;
        SetTriggerUnit(Target);
        ;
        ;
        ;
        ;
        ID = PushCharacterFade(Owner, 1, default, ID);
        this.WillFade = SetVarInTable(true);
        ;
        ID = PushCharacterFade(Owner, 1, default, ID);
        this.WillFade = SetVarInTable(true);
        SpellBuffAdd(Owner, Owner, "ShadowWalkSpeedHolder", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        ;
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
    }
    public void BuffOnHeal()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void UpdateBuffs()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void SelfExecute()
    {
        ForNClosestUnitsInTargetArea(Owner, Owner, 3000, "AffectEnemies AffectNeutral AffectHeroes ", 1, true, default, (Iterator) =>
        {
            ;
            ;
            SpellCast(Unit, Owner, default, default, false, 0, SpellSlots, 0, true, true, false, false, false, default);
        });
        SpellEffectCreate(ar, default, "summoner_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        SpellEffectCreate(ar, default, "summoner_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ForNClosestUnitsInTargetArea(Owner, Owner, 1800, "AffectEnemies AffectFriends AffectMinions AffectTurrets AffectUseable AffectWards ", 1, true, "OdinGuardianBuff", (Iterator) =>
        {
            ;
            ;
            TeamOfOwner = GetTeamID(default);
            TeamOfTarget = GetTeamID(default);
            ;
            ;
        });
        CastPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, CastPos);
        FaceDirection(Owner, CastPos);
        ;
        StopChanneling(Target, ChannelingStopCondition_Cancel, ChannelingStopSource_Move);
        SpellEffectCreate(p3, default, "summoner_flashback.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, CastPos, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(ar, default, "summoner_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(ar1, default, "summoner_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        ;
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        OwnerLevel = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 600, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
        {
            SpellEffectCreate(CastParticle, default, "Summoner_Mana.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, false, false, false, false, false, default, default);
            ;
            ;
        });
        SpellEffectCreate(ar, default, "summoner_cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        OwnerLevel = GetLevel(Owner);
        ;
        ;
        NextBuffVars.BonusHealth = SetVarInTable(BonusHealth);
        ForNClosestUnitsInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions NotAffectSelf ", 1, true, "OdinSuperMinion", (Iterator) =>
        {
            ;
            ;
        });
        ;
        ;
        ;
        TargetPos = GetCastSpellTargetPos();
        SpellEffectCreate(CastParticle, default, "Summoner_Cast.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(ParticleID, ParticleID2, "ClairvoyanceEyeLong_green.troy", "ClairvoyanceEyeLong_red.troy", TeamID ?? TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, TargetPos, Target, default, default, false, false, false, false, false, default, default);
        NextBuffVars.ParticleID = SetVarInTable(ParticleID);
        NextBuffVars.ParticleID2 = SetVarInTable(ParticleID2);
        Duration = SetVarInTable(4);
        ;
        NextBuffVars.Bubble = AddPosPerceptionBubble(TeamID, 1400, TargetPos, 0 + Duration, Nothing, false);
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 0 + Duration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(a, default, "OdynsVeil_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        ForEachUnitInTargetArea(Owner, Owner, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyDamage(Attacker, Unit, 0 + FinalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Attacker);
        });
        CharVars.StoredDamage = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(ar, default, "spectral_fury_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        OwnerPos = GetUnitPosition(Owner);
        CastPosition = GetCastSpellTargetPos();
        CasterID = GetTeamID(default);
        SpellEffectCreate(SmokeBomb1, default, "leBlanc_displacement_cas_ult.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, default, default, default);
        Distance = DistanceBetweenPoints(OwnerPos, CastPosition);
        ;
        NextBuffVars.SilenceDuration = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.OwnerPos = SetVarInTable(OwnerPos);
        NextBuffVars.CastPosition = SetVarInTable(CastPosition);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "LeblancSlideMoveM", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "LeblancSlideWallFixM", 1, 1, 3.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        OwnerPos = GetUnitPosition(Owner);
        CastPosition = GetCastSpellTargetPos();
        CasterID = GetTeamID(default);
        SpellEffectCreate(SmokeBomb1, default, "leBlanc_displacement_cas.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, OwnerPos, Target, default, default, true, default, default, false, default, default, default);
        Distance = DistanceBetweenPoints(OwnerPos, CastPosition);
        ;
        TeamOfOwner = GetTeamID(default);
        NextBuffVars.AEDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.SilenceDuration = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.OwnerPos = SetVarInTable(OwnerPos);
        NextBuffVars.CastPosition = SetVarInTable(CastPosition);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "LeblancSlideMove", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "LeblancSlideWallFix", 1, 1, 3.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        asdf = AddPosPerceptionBubble(TeamID, 250, TargetPos, 1, Nothing, false);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        FaceDirection(Owner, TargetPos);
        Other2 = SpawnMinion("k", "TestCubeRender10Vision", "idle.lua", TargetPos, TeamID ?? TEAM_NEUTRAL, true, true, false, true, true, true, 1, default, true, Attacker, default);
        SpellBuffAdd(Attacker, Other2, "MaokaiSapling2", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Owner, Other2, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + Level, false, false, false, false, false, default);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "MaokaiDrain3", Owner, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.DefenseBonus = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.CCReduction = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.ManaCost = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BonusCap = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "MaokaiDrain3", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        TeamOfOwner = GetTeamID(default);
        SpellEffectCreate(this.partname, default, "maoki_trunkSmash_cas.troy", default, TeamOfOwner ?? TEAM_NEUTRAL, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, default, default, default, default, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffRemove(Unit, "MaokaiTrunkLine", Owner, default);
        });
        ForEachUnitInTargetArea(Owner, Owner, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        ;
        TeamID = GetTeamID(default);
        CastPos = GetCastSpellTargetPos();
        Other2 = SpawnMinion("k", "SpellBook1", "idle.lua", CastPos, TeamID ?? TEAM_NEUTRAL, true, true, false, false, true, false, 0, default, true, Nothing, default);
        NextBuffVars.Duration = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.SlowPercent = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Other2, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1 + NextBuffVars.Duration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        TeamOfOwner = GetTeamID(default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, false, 0, false, true, Owner, default);
        NextBuffVars.StunDuration = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Other3, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0.1, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        BubbleID = AddPosPerceptionBubble(TeamOfOwner, 300, TargetPos, 1, Nothing, false);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, default, true, Owner, default);
        NextBuffVars.DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 1.2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CharVars.FlurryScalar = SetVarInTable(0.7);
        NextBuffVars.MonkTotalDamage = SetVarInTable(MonkTotalDamage);
        SpellBuffAdd(Target, Target, default, 1, 1, 0.58, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        TeamID = GetTeamID(default);
        ;
        ;
        ForNClosestUnitsInTargetArea(Owner, Owner, 400, "AffectEnemies AffectHeroes ", 1, true, "BlindMonkRMarker", (Iterator) =>
        {
            TargetPos = GetCastSpellTargetPos();
            TeamID = GetTeamID(default);
            Other2 = SpawnMinion("TestMinion", "TestCubeRender", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, true, false, false, false, true, 0, default, true, Nothing, default);
            SpellBuffAdd(Other2, Other2, "BlindMonkRNewMinion", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            FaceDirection(Unit, TargetPos);
            TeleportPos = GetPointByUnitFacingOffset(Unit, 100, 180);
            TeleportToPosition(Owner, TeleportPos);
            OwnerPos = GetUnitPosition(Owner);
            SpellCast(Owner, Unit, TargetPos, TargetPos, true, 1, ExtraSlots, 0 + Level, true, false, false, true, false, OwnerPos);
        });
        NextBuffVars.TotalArmor = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.LifestealPercent = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        HasHitTarget = SetVarInTable(false);
        CasterID = GetTeamID(default);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellEffectCreate(this.partname, default, "blindMonk_thunderCrash_impact_cas.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", Owner, Target, default, default, true, default, default, false, false, default, default);
        SpellEffectCreate(this.partname, default, "blindMonk_thunderCrash_impact_02.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", Owner, Target, default, default, true, default, default, false, false, default, default);
        SpellEffectCreate(this.partname, default, "blindMonk_E_cas.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Owner, "l_hand", Owner, Target, default, default, true, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "SharedWardBuff", false, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, default, 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            SpellEffectCreate(aoehit, default, "blindMonk_thunderCrash_impact_unit_tar.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            SpellEffectCreate(aoehit, default, "blindMonk_E_thunderCrash_tar.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            SpellEffectCreate(aoehit, default, "blindMonk_E_thunderCrash_unit_tar_blood.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            HasHitTarget = SetVarInTable(true);
        });
        ;
        ;
        OwnerPos = GetUnitPosition(Owner);
        ForEachUnitInTargetArea(Owner, Owner, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "BlindMonkEOne", true, (Iterator) =>
        {
            SpellCast(Owner, Unit, default, default, true, 0, ExtraSlots, 0 + Level, true, true, false, true, false, OwnerPos);
        });
        ;
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        DamagePoint = GetPointByUnitFacingOffset(Owner, 1650, 0);
        TeamID = GetTeamID(default);
        ForEachUnitInTargetRectangle(Owner, DamagePoint, 100, 1700, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", true, default, (Iterator) =>
        {
            ;
            ;
            SpellEffectCreate(asdf, default, "LuxMaliceCannon_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, default, default, default);
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.75, 1, false, false, Attacker);
            ;
        });
        TargetPos = GetCastSpellTargetPos();
        teamID = GetTeamID(default);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        Beam1 = GetPointByUnitFacingOffset(Owner, 145, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 3300, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", Beam1, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 450, default, false, Owner, default);
        Other3 = SpawnMinion("hiu", "TestCube", "idle.lua", Beam3, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 450, default, false, Owner, default);
        LinkVisibility(Other1, Other3);
        SpellBuffAdd(Attacker, Other1, "LuxMaliceCannonDeathFix", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Other3, "LuxMaliceCannonDeathFix", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other1, Owner, "LuxMaliceCannonPartFix", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other1, Owner, "LuxMaliceCannonPartFix2", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other1, Other3, "LuxMaliceCannonBeam", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Other1, Other1, "LuxMaliceCannonBall", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        DamagePoint = GetPointByUnitFacingOffset(Owner, 1650, 0);
        SpellEffectCreate(default, default, "LuxMaliceCannon_beammiddle.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, DamagePoint, Nothing, default, default, false, default, default, default, default, default, default);
        TargetPos = GetCastSpellTargetPos();
        SetCameraPosition("Owner", TargetPos);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.DamageRank = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "Pantheon_GrandSkyfall_Fall", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 2, true, false, false, default);
        ;
        TargetPos = GetCastSpellTargetPos();
        TargetPos = GetNearestPassablePosition(Owner, TargetPos);
        CharVars.TargetPos = SetVarInTable(TargetPos);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        FaceDirection(Owner, TargetPos);
        ;
        SpellBuffAdd(Owner, Owner, "Pantheon_AegisShield", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        ;
        TeamID = GetTeamID(default);
        SpellEffectCreate(hi1, default, "TaricHammerSmash_shatter.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.partname, default, "TaricHammerSmash_nova.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        NextBuffVars.DamageIncrease = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AbilityPower = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 0, false, false, Attacker);
            SpellEffectCreate(shatterz, default, "Taric_GemStorm_Tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
        });
        SpellBuffAdd(Attacker, Attacker, "Radiance", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        baseDamageBlock = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.DamageBlock = SetVarInTable(DamageBlock);
        SpellBuffAdd(Attacker, Target, "LuxPrismaticWaveShieldSelf", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 3, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        NextBuffVars.SpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "GarenFastMove", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.SilenceDuration = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemove(Owner, "LuxLightstrikeKugel", Owner, default);
        SpellBuffRemove(Owner, "GarenBladestorm", Owner, default);
        NextBuffVars.baseDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "GarenBladestormLeave");
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffAdd(Attacker, Owner, "GarenBladestorm", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SetSlotSpellCooldownTimeVer2(1, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        TeamID = GetTeamID(default);
        ;
        ArmorAmount = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DamageReduction = SetVarInTable(VALUE_BY_LEVEL);
        BuffDuration = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        NextBuffVars.TotalArmorAmount = SetVarInTable(TotalArmorAmount);
        SpellEffectCreate(this.Particle, default, "garen_command_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "C_BUFFBONE_GLB_CENTER_LOC", default, Attacker, default, default, true, default, default, false, false, default, default);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 0 + BuffDuration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(hi, default, "Shatter_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, false, false, false, false, default, default);
        SpellBuffRemove(Owner, "ShatterSelfBonus", Owner, 0);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "EmpowerTwo", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0);
        NextBuffVars.DamagePerStack = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Duration = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Owner, "ArmsmasterRelentlessMR", 1, 1, 0 + Duration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellEffectCreate(AddPart, default, "Counterstrike_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffRemove(Owner, "CounterStrikeCanCast", Owner, default);
        SpellBuffAdd(Owner, Owner, "LeapStrikeSpeed", 1, 1, 0.35, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        SpellEffectCreate(SmokeBomb, default, "Ahri_SpiritRush_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_GROUND_LOC", default, Owner, "BUFFBONE_GLB_GROUND_LOC", default, false, false, false, false, false, default, default);
        SpellEffectCreate(SmokeBomb, default, "Ahri_Orb_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, "BUFFBONE_GLB_WEAPON_1", default, false, false, false, false, false, default, default);
        OwnerPos = GetUnitPosition(Owner);
        TargetPos = GetCastSpellTargetPos();
        ;
        ;
        Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
        ;
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.Distance = SetVarInTable(Distance);
        NextBuffVars.dashSpeed = SetVarInTable(dashSpeed);
        SpellBuffAdd(Owner, Owner, "AhriTumbleKick", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell2", 0.71, Owner, false, true, true);
        TeamID = GetTeamID(default);
        SpellEffectCreate(VarA, default, "Ahri_FoxFire_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(VarA, default, "Ahri_FoxFire_weapon_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, "BUFFBONE_GLB_WEAPON_1", default, Target, "BUFFBONE_GLB_WEAPON_1", default, true, false, false, false, false, default, default);
        Point1 = GetPointByUnitFacingOffset(Owner, 150, 45);
        Point2 = GetPointByUnitFacingOffset(Owner, 150, 165);
        Point3 = GetPointByUnitFacingOffset(Owner, 150, 285);
        ;
        SpellCast(Attacker, Attacker, default, default, true, 2, ExtraSlots, 0 + Level, true, true, false, true, false, Point1);
        SpellCast(Attacker, Attacker, default, default, true, 2, ExtraSlots, 0 + Level, true, true, false, true, false, Point2);
        SpellCast(Attacker, Attacker, default, default, true, 2, ExtraSlots, 0 + Level, true, true, false, true, false, Point3);
        SpellBuffAdd(Attacker, Target, "AhriFoxFire", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "AhriFoxFireMissile", 3, 3, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        FaceDirection(Owner, TargetPos);
        TargetPos = GetPointByUnitFacingOffset(Owner, 900, 0);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 4, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.Damage = SetVarInTable(VALUE_BY_LEVEL);
        OwnerPos = GetUnitPosition(Owner);
        ;
        ;
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        NextBuffVars.SlashSpeed = SetVarInTable(SlashSpeed);
        NextBuffVars.StunDuration = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 0 + Duration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "UnstoppableForceMarker", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other2 = SpawnMinion("k", "TestCubeRender", "idle.lua", TargetPos, TeamID ?? TEAM_NEUTRAL, true, true, false, false, true, true, 0, default, true, Attacker, default);
        ;
        ;
        ;
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions ", "H28GEvolutionTurret", true, (Iterator) =>
        {
            ;
        });
        SpellBuffAdd(Attacker, Attacker, "UpgradeBuff", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemove(Owner, "HeimerdingerTurretReady", Owner, 0);
        MaxStacks = SetVarInTable(VALUE_BY_LEVEL);
        Level4BonusHP = SetVarInTable(VALUE_BY_LEVEL);
        NumFound = SetVarInTable(0);
        minDuration = SetVarInTable(25000);
        Other2 = SetUnit(Owner);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions ", "H28GEvolutionTurret", true, (Iterator) =>
        {
            ;
            durationRemaining = GetBuffRemainingDuration(Unit, "H28GEvolutionTurret");
            ;
        });
        ;
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        ;
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        NextBuffVars.BonusDamage = SetVarInTable(BonusDamage);
        OwnerLevel = GetLevel(Owner);
        ;
        ;
        ;
        NextBuffVars.BonusArmor = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Other3, "UPGRADE!!!Proof", 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other3, default, 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        CasterID = GetTeamID(default);
        ;
        ;
        ;
        HealthCost = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        IncHealth(Owner, 0 + HealthCost, Owner);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        ;
        NextBuffVars.Level = SetVarInTable(Level);
        ArmorAmount = GetArmor(Owner);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        MalphiteSkinID = GetSkinID(Owner);
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + ArmorDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
            SpellBuffAdd(Attacker, Unit, "LandslideDebuff", 1, 1, 4, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        NextBuffVars.PercMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "ObduracyBuff", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        HealthCost = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        IncHealth(Owner, 0 + HealthCost, Owner);
        CastPos = GetCastSpellTargetPos();
        HealthCost = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        IncHealth(Owner, 0 + HealthCost, Owner);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ProcDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.SlowPercent = SetVarInTable(VALUE_BY_LEVEL);
        RatioVar = SetVarInTable(0.3);
        TeamID = GetTeamID(default);
        PlayAnimation("Spell1", 0, Owner, false, true, false);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, InstanceVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ChampionHit = SetVarInTable(false);
        ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + BaseDamage, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0.8, false, false, Attacker);
            ChampionHit = SetVarInTable(true);
            ;
            ;
        });
        ;
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        SpellEffectCreate(this.partname, default, "Skarner_Fracture_Cas.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
        Duration = GetBuffRemainingDuration(Owner, "TeemoMushrooms");
        ;
        ;
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other3 = SpawnMinion("Noxious Trap", "TeemoMushroom", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, true, true, false, false, true, false, 0, true, false, Owner, default);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "SharedWardBuff", 1, 1, 600, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        ;
        ;
        ;
        ;
        ;
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 4, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        SpellBuffRemove(Owner, "DefensiveBallCurl", Owner, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        ;
        ;
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.Distance = SetVarInTable(Distance);
        NextBuffVars.dashSpeed = SetVarInTable(dashSpeed);
        NextBuffVars.tauntDuration = SetVarInTable(VALUE_BY_LEVEL);
        EnergyRefunds = SetVarInTable(1);
        ForEachUnitInTargetArea(Owner, Owner, 150, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        NextBuffVars.EnergyRefunds = SetVarInTable(EnergyRefunds);
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0.1, true, false, false, default);
        NextBuffVars.ArmorAmount = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DamageReturn = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Owner, "DefensiveBallCurl", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemove(Owner, "IreliaHitenStyle", Owner, default);
        OwnerPos = GetUnitPosition(Owner);
        TeamID = GetTeamID(default);
        OwnerFacing = GetPointByUnitFacingOffset(Owner, 100, 0);
        ;
        ManaCost = SetVarInTable(VALUE_BY_LEVEL);
        Move(Owner, OwnerFacing, 3000, 0, 0, FIRST_WALL_HIT, POSTPONE_CURRENT_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        Other1 = CloneUnitPet(Owner, "MonkeyKingDecoyDummy", 0, OwnerPos, 0, 0, true);
        IssueOrder(Other1, AI_HOLD, default, Other1);
        PlayAnimation("idle1", 0, Other1, false, false, false);
        IncPAR(Other1, 0 + ManaCost);
        FaceDirection(Other1, OwnerFacing);
        SpellBuffAdd(Owner, Other1, "MonkeyKingDecoyClone", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingDecoyStealth", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        TeamID = GetTeamID(default);
        HealthPercent = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.HealthFlat = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.HealthPercentPerTick = SetVarInTable(HealthPercentPerTick);
        SpellBuffAdd(Attacker, Owner, "AlZaharNullZone", 5, 1, 5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, false, false, false, default);
        SpellBuffAdd(Owner, Owner, "SonaHymnofValor", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        CasterID = GetTeamID(default);
        ;
        AvailChamps = SetVarInTable(0);
        ForEachUnitInTargetArea(Owner, Owner, 650, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "SonaHymnofValorAura", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell1", 1, Owner, false, true, true);
        SpellBuffAdd(Owner, Owner, "SonaSongofDiscord", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
        {
            SpellCast(Owner, Unit, Owner, Owner, false, 6, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        });
        ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions ", default, true, (Iterator) =>
        {
            ApplyAssistMarker(Attacker, Unit, 10);
            SpellBuffAdd(Owner, Unit, "SonaSongofDiscordHaste", 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Haste, 0, true, false, false, default);
        });
        SpellBuffAdd(Owner, Owner, "SonaSongofDiscordAura", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell3", 1, Owner, false, true, true);
        ;
        ;
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        teamID = GetTeamID(default);
        FoundFirstPos = SetVarInTable(false);
        ForEachPointOnLine(OwnerPos, TargetPos, 750, 0 + Distance, 15, (Iterator) =>
        {
            ;
            LastPos = SetVarInTable(Pos);
        });
        Other1 = SpawnMinion("Portal to the Void", "TestCubeRender", "idle.lua", FirstPos, teamID ?? TEAM_CASTER, false, true, false, true, false, true, 300, false, false, Owner, default);
        Other2 = SpawnMinion("Portal to the Void", "TestCubeRender", "idle.lua", LastPos, teamID ?? TEAM_CASTER, false, true, false, true, false, true, 300 + LineWidth, false, false, Owner, default);
        FaceDirection(Other1, TargetPos);
        FaceDirection(Other2, TargetPos);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        SpellBuffAdd(Owner, Other1, default, 1, 1, 0.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other2, default, 1, 1, 0.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "SonaAriaofPerseverance", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        CasterID = GetTeamID(default);
        ;
        JumpTarget = SetVarInTable(NoTargetYet);
        JumpTargetHealth % = SetVarInTable(1);
        ForEachUnitInTargetAreaRandom(Owner, Owner, 1000, "AffectFriends AffectHeroes NotAffectSelf ", default, true, 999, (Iterator) =>
        {
            ;
            ;
            ;
        });
        ;
        ;
        ;
        IncHealth(Owner, 0 + VALUE_BY_LEVEL + APMod, Attacker);
        SpellEffectCreate(self, default, "Global_Heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "SonaAriaofPerseveranceAura", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell2", 1, Owner, false, true, true);
        NextBuffVars.DefenseBonus = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Attacker, "SonaAriaShield", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemove(Owner, "MonkeyKingSpinToWin", Owner, 0);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        SpellEffectCreate(this.BattleCries, default, "xenZiou_battle_cry_weapon_01.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "weapon_a_bend3", default, Owner, "weapon_b_bend3", default, false, default, default, false, false, default, default);
        SpellEffectCreate(ar, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        HealthToInc = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        IncHealth(Owner, 0 + HealthToInc, Owner);
        SpellBuffAdd(Owner, Owner, "MonkeyKingKillCloneE", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "MonkeyKingSpinToWinLeave");
        SetSlotSpellCooldownTimeVer2(1, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        HealthPercent = SetVarInTable(VALUE_BY_LEVEL);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.LifestealStat = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        TargetPos = GetPointByUnitFacingOffset(Owner, 1100, 0);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        Other3 = SpawnMinion("RighteousGustLauncher", "TestCubeRender", "idle.lua", OwnerPos, TeamID ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Owner, default);
        SpellBuffAdd(Owner, Other3, default, 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Attacker, "GalioRighteousGustHaste", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        Other1 = SpawnPet("Tibbers", "TempMovableChar", "InfernalGuardian", "StormIdle.lua", 7, TargetPos, 0 + VALUE_BY_LEVEL, 0 + VALUE_BY_LEVEL);
        ForNClosestUnitsInTargetArea(Owner, TargetPos, 350, "AffectEnemies AffectHeroes ", 1, true, default, (Iterator) =>
        {
            SpellBuffAdd(Owner, Unit, "ViktorChaosStormGuide", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        ;
        ;
        StopMove(Other1);
        this.blah = PushCharacterFade(Other1, 0, default, this.blah);
        SpellBuffAdd(Owner, Other1, "ViktorChaosStormAOE", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "ViktorChaosStormTimer", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "ViktorExpirationTimer", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "ViktorChaosStormGuide");
        NextBuffVars.SelfASMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        HMCSStartTime = GetBuffStartTime(Owner, "ViktorChaosStormGuide");
        ;
        ;
        HasTarget = SetVarInTable(false);
        CenterPos = GetUnitPosition(Owner);
        TargetPos = GetCastSpellTargetPos();
        ForEachUnitInTargetArea(Owner, CenterPos, 25000, "AffectEnemies AffectFriends AffectMinions AffectHeroes AffectUntargetable ", "ViktorChaosStormGuide", true, (Iterator) =>
        {
            ;
            ;
        });
        ForNClosestUnitsInTargetArea(Owner, TargetPos, 150, "AffectEnemies AffectHeroes ", 1, true, default, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "ViktorChaosStormGuide", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            HasTarget = SetVarInTable(true);
        });
        ;
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        DtD = SetVarInTable(VALUE_BY_LEVEL);
        PercentByLevel = SetVarInTable(VALUE_BY_LEVEL);
        SpellEffectCreate(p3, default, "xenZiou_ult_cas.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", CastPos, Owner, default, default, true, false, false, false, false, default, default);
        ;
        TeamID = GetTeamID(default);
        NextBuffVars.Count = SetVarInTable(0);
        ForEachUnitInTargetArea(Owner, Owner, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ;
            ;
            ;
            ;
            SpellEffectCreate(bye, default, "xenZiou_utl_tar_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(gda, default, "xenZiou_utl_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            SpellEffectCreate(asdf, default, "xenZiou_utl_tar_03.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            ;
            ;
            ;
            ;
            ;
        });
        NextBuffVars.MRByLevel = SetVarInTable(VALUE_BY_LEVEL);
        ArmorAmount = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.ScalingArmor = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.ScalingMR = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "XenZhaoSweepArmor", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        DtD = SetVarInTable(VALUE_BY_LEVEL);
        SpellEffectCreate(a, default, default, default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Unit, default, default, false, default, default, false, default, default, default);
        WeaponDmg = GetTotalAttackDamage(Owner);
        ;
        ;
        NextBuffVars.Count = SetVarInTable(0);
        ForEachUnitInTargetArea(Owner, Owner, 450, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyDamage(Attacker, Unit, 0 + DtDReal, PHYSICAL_DAMAGE, DAMAGESOURCE_PROC, 1, 0, 0, false, false, Attacker);
            ;
        });
        Pos = GetPointByUnitFacingOffset(Owner, 1000, -14);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, default, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 0);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, default, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 7);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, default, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, -7);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, default, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 14);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, default, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, -21);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, default, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 21);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 1, true, true, false, false, default, default);
        PlayAnimation("Spell3", 0, Owner, false, false, false);
        TeamOfOwner = GetTeamID(default);
        TargetPosStart = GetCastSpellTargetPos();
        TargetPosEnd = GetCastSpellDragEndPos();
        Other1 = SpawnMinion("MaokaiSproutling", "MaokaiSproutling", "idle.lua", TargetPosStart, TeamOfOwner ?? TEAM_CASTER, false, false, false, false, true, true, 0, false, true, Owner, default);
        SpellBuffAdd(Attacker, Other1, "ViktorExpirationTimer", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        FaceDirection(Other1, TargetPosEnd);
        TargetPosEnd = GetPointByUnitFacingOffset(Other1, 700, 0);
        TeamID = GetTeamID(default);
        SpellBuffAdd(Attacker, Other1, "ViktorDeathRay", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Move(Other1, TargetPosEnd, 550, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 500, FACE_MOVEMENT_DIRECTION);
        teamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        SpellBuffAdd(Attacker, Other1, default, 1, 1, 30, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + Level, true, true, false, false, default, default);
        dist = SetVarInTable(VALUE_BY_LEVEL);
        Move(Other1, TargetPos, 1350, 0, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + dist, default);
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        DamagePoint = GetPointByUnitFacingOffset(Owner, 425, 0);
        TeamID = GetTeamID(default);
        ;
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        NextBuffVars.ArmorDebuff = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetRectangle(Owner, DamagePoint, 68, 360, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", true, default, (Iterator) =>
        {
            ;
            ;
            ;
        });
        ForEachUnitInTargetRectangle(Owner, DamagePoint, 150, 425, "AffectEnemies AffectFriends AffectMinions NotAffectSelf ", true, default, (Iterator) =>
        {
            ;
        });
        SpellBuffAdd(Owner, Owner, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        SpellEffectCreate(a, default, "JarvanDemacianStandard_mis.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "R_Hand", default, Attacker, default, default, true, default, default, false, false, default, default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, false, 0, false, false, Owner, default);
        ;
        NextBuffVars.Level = SetVarInTable(Level);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.DamageToDeal = SetVarInTable(DamageToDeal);
        SpellBuffAdd(Attacker, Other3, "JarvanIVDemacianStandardDelay", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        FaceDirection(Owner, TargetPos);
        PlayAnimation("Spell3", 0.75, Owner, false, true, false);
        ;
        ShieldAmount = SetVarInTable(VALUE_BY_LEVEL);
        ShieldBonus = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Owner, Owner, 500, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        NextBuffVars.Shield = SetVarInTable(Shield);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        NextBuffVars.AttackSpeedMod = SetVarInTable(0);
        SpellEffectCreate(a, default, "JarvanGoldenAegis_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, default, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 2, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            SpellEffectCreate(asdf, default, "JarvanGoldenAegis_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Nothing, false, Unit, "spine", default, Unit, default, default, true, default, default, false, default, default, default);
        });
        DestroyMissileForTarget(Owner);
        CastPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, CastPos);
        FaceDirection(Owner, CastPos);
        ;
        StopChanneling(Target, ChannelingStopCondition_Cancel, ChannelingStopSource_Move);
        SpellEffectCreate(p3, default, "summoner_flashback.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, CastPos, Target, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(ar1, default, "summoner_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.ManaCost = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "ViktorGravitonField", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.DamageCap = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DamagePerc = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.CurrentDamageTotal = SetVarInTable(0);
        NextBuffVars.BonusHealth = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.ManaCost = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "ViktorGravitonField", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Destiny_marker", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellBuffAdd(Attacker, Unit, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        });
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "Gate");
        SetSlotSpellCooldownTimeVer2(0.5, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        StopChanneling(Owner, ChannelingStopCondition_NotCancelled, ChannelingStopSource_NotCancelled);
        TeamID = GetTeamID(default);
        Pos = GetPointByUnitFacingOffset(Owner, 30, 0);
        Pos1 = GetPointByUnitFacingOffset(Owner, 1000, 0);
        Other1 = SpawnMinion("TestCube", "TestCubeRender", "idle.lua", Pos, TeamID ?? TEAM_CASTER, false, true, false, true, false, true, 0, false, true, Owner, default);
        Pos2 = GetPointByUnitFacingOffset(Owner, 1000, -28);
        Pos3 = GetPointByUnitFacingOffset(Owner, 1000, 28);
        SetSpell(Other1, 0, ExtraSlots, SPELLBOOK_CHAMPION, "SealFateMissile");
        SpellCast(Other1, Nothing, Pos1, Pos1, false, 0, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        SpellCast(Other1, Nothing, Pos2, Pos2, false, 0, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        SpellCast(Other1, Nothing, Pos3, Pos3, false, 0, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        SpellBuffAdd(Attacker, Other1, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 6, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 6, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        TargetPos = GetNearestPassablePosition(Owner, TargetPos);
        ;
        ;
        TeamID = GetTeamID(default);
        CastPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, CastPos);
        FaceDirection(Owner, CastPos);
        ;
        CasterID = GetTeamID(default);
        ;
        ;
        TeleportToPosition(Owner, CastPos);
        ;
        Damage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 270, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + TotalDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Attacker);
        });
        ;
        SetPARCostInc(Owner, 3, SpellSlots, 0 + ExtraCost, PAR_MANA);
        SpellBuffAdd(Attacker, Owner, "RiftWalk", 10, 1, 8, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        TargetPos = GetCastSpellTargetPos();
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        NextBuffVars.GateParticle = SetVarInTable(GateParticle);
        NextBuffVars.CurrentPos = GetUnitPosition(Owner);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellBuffRemove(Owner, "ForcePulseCanCast", Owner, default);
        SpellBuffRemove(Owner, "ForcePulseCanCast", Owner, 0);
        SpellBuffRemove(Owner, "PickaCard", Owner, default);
        SpellBuffRemove(Owner, "BlueCardPreAttack", Owner, default);
        SpellBuffAdd(Attacker, Owner, "NetherBladeBuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        SpellBuffRemove(Owner, "PickaCard", Owner, default);
        SpellBuffRemove(Owner, "RedCardPreAttack", Owner, default);
        SpellBuffRemove(Owner, "GoldCardPreAttack", Owner, default);
        SpellBuffRemove(Owner, "PickACard", Owner, default);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.InitialDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.Damage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.ArmorReduction = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        TeamOfOwner = GetTeamID(default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Owner, default);
        NextBuffVars.RootDuration = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.GraspDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        ;
        ;
        IncHealth(Owner, 0 + HealthLoss, Owner);
        NextBuffVars.SpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
        SpellEffectCreate(Activate, default, "dr_mundo_sadism_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "pelvis", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(Activate, default, "dr_mundo_sadism_cas_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_hand", default, Target, default, default, false, false, false, false, false, default, default);
        SpellEffectCreate(Activate, default, "dr_mundo_sadism_cas_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_hand", default, Target, default, default, false, false, false, false, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        SpellCast(Owner, Nothing, Pos, Pos, default, 0, ExtraSlots, 0 + Level, true, true, false, default, default, default);
        ;
        HealthCost = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DamageMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BaseIncrease = SetVarInTable(VALUE_BY_LEVEL);
        IncHealth(Owner, 0 + HealthCost, Owner);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Move(Owner, TargetPos, 0 + SpeedVar, 0 + GravityVar, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0 + Distance, FACE_MOVEMENT_DIRECTION);
        NextBuffVars.Damage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        this.WillRemove = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "Ricochet", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        ExplosionDamage = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Owner, Owner, 1200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        CharVars.numTideStacks = SetVarInTable(Count);
        ;
        ;
        HealthCost = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        IncHealth(Owner, 0 + HealthCost, Owner);
        CasterID = GetTeamID(default);
        ;
        ForEachUnitInTargetArea(Owner, Owner, 620, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            CanSee = CanSeeTarget(Owner, Target);
            ;
        });
        SpellBuffAdd(Attacker, Attacker, "VladimirTidesofBloodCost", 4, 1, 10, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "VladimirTidesofBloodNuke", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "DeathLotusSound", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        NextBuffVars.Level = SetVarInTable(Level);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0.25, true, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        TeamOfOwner = GetTeamID(default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Owner, default);
        NextBuffVars.FissureDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AblazeBonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0.5);
        SpellBuffRemove(Owner, "KennenLightningRush", Owner, default);
        SpellBuffRemove(Owner, "KennenLightningRushDamage", Owner, default);
        TeamID = GetTeamID(default);
        ForEachUnitInTargetArea(Owner, Owner, 925, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        NextBuffVars.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.RushDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "KennenLightningRushDamage", 1, 1, 2.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0.1, true, false, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Haste, 0, true, false, default, default);
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "KennenLRCancel");
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0.5);
        ;
        ;
        IncHealth(Owner, 0 + HealthCost, Owner);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        FaceDirection(Owner, TargetPos);
        ;
        Other2 = SpawnMinion("k", "TestCubeRender", "idle.lua", TargetPos, TeamID ?? TEAM_NEUTRAL, true, true, false, true, true, true, 0, false, true, Attacker, default);
        SpellCast(Owner, Other2, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + Level, false, true, false, false, false, default);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        HealthCost = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        IncHealth(Owner, 0 + HealthCost, Owner);
        SpellEffectCreate(SmokeBomb, default, "katarina_shadowStep_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        CastPos = GetUnitPosition(Owner);
        ownerskinid = GetSkinID(Owner);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "KillerInstinct", 1, 1, 15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        DestroyMissileForTarget(Owner);
        ;
        ;
        IncHealth(Owner, 0 + HealthCost, Owner);
        SpellEffectCreate(hi, default, "Vlad_Bloodking_Blood_Skin.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, true, false, false, false, false, default, default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        DamageTick = SetVarInTable(VALUE_BY_LEVEL);
        ;
        baseHP = SetVarInTable(400);
        healthPerLevel = SetVarInTable(85);
        Level = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemove(Owner, "RaiseMorale", Owner, 0);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AttackDmgMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Attacker, "RaiseMoraleTeamBuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AttackDmgMod = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Owner, Owner, 1500, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "RaiseMoraleTeamBuff", 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        ;
        HealLevel = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        IncHealth(Owner, 0 + HealAmount, Owner);
        ;
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamID ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Owner, default);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffClear(Owner, "RivenWindSlashReady");
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        Pos = GetPointByUnitFacingOffset(Owner, 150, 0);
        SpellCast(Owner, Nothing, Pos, Pos, false, 0, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 150, 9);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 150, -9);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        ;
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Nothing, default);
        NextBuffVars.DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        CastPosition = GetCastSpellTargetPos();
        NextBuffVars.CastPosition = SetVarInTable(CastPosition);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        Other1 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", CastPosition, TeamOfOwner ?? TEAM_CASTER, false, true, true, true, true, true, 0, false, true, Nothing, default);
        SpellBuffAdd(Owner, Other1, "CannonBarrage", 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
        Pos = GetPointByUnitFacingOffset(Owner, 250, 0);
        ;
        ;
        PlayAnimation("Spell3", 0, Owner, false, true, false);
        Move(Owner, Pos, 900 + BonusMS, 0, 0, FIRST_WALL_HIT, CANCEL_ORDER, 325, KEEP_CURRENT_FACING);
        baseDamageBlock = SetVarInTable(VALUE_BY_LEVEL);
        TotalAD = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        NextBuffVars.DamageBlock = SetVarInTable(DamageBlock);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellEffectCreate(this.Temp, default, "exile_E_mis.troy  ", "exile_E_mis.troy  ", TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        ;
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.ChampionLock = SetVarInTable(false);
        ForNClosestUnitsInTargetArea(Owner, TargetPos, 125, "AffectEnemies AffectHeroes ", 1, true, default, (Iterator) =>
        {
            TargetPos = GetUnitPosition(Unit);
            NextBuffVars.ChampionLock = SetVarInTable(true);
            SpellBuffAdd(Owner, Unit, "RivenTriCleaveBufferLock", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.Level = SetVarInTable(Level);
        SpellBuffAdd(Owner, Owner, "RivenTriCleaveBuffered", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "StaticField", Owner, default);
        SpellEffectCreate(default, default, "StaticField_nova.prt", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.ChampionLock = SetVarInTable(false);
        ForNClosestUnitsInTargetArea(Owner, TargetPos, 125, "AffectEnemies AffectHeroes ", 1, true, default, (Iterator) =>
        {
            TargetPos = GetUnitPosition(Unit);
            NextBuffVars.ChampionLock = SetVarInTable(true);
            SpellBuffAdd(Owner, Unit, "RivenTriCleaveBufferLock", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.Level = SetVarInTable(Level);
        SpellBuffAdd(Owner, Owner, "RivenTriCleaveBuffered", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, default, 0, ExtraSlots, 0 + Level, true, false, false, default, default, default);
        CastPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, CastPos);
        FaceDirection(Owner, CastPos);
        ;
        TeleportToPosition(Owner, CastPos);
        teamID = GetTeamID(default);
        ;
        ;
        CasterID = GetTeamID(default);
        ;
        fired = SetVarInTable(false);
        ForNClosestUnitsInTargetArea(Owner, Owner, 750, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 5, true, default, (Iterator) =>
        {
            ;
        });
        ;
        ;
        SpellBuffClear(Owner, "RivenTriCleaveUnlock");
        CancelAutoAttack(Owner, true);
        TargetPos = GetCastSpellTargetPos();
        ;
        SpellBuffAdd(Owner, Owner, "RivenTriCleave", 3, 1, 3.75, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        Distance = SetVarInTable(240);
        MaxRange = SetVarInTable(240);
        ;
        ;
        CastPos = GetCastSpellTargetPos();
        LockOn = SetVarInTable(false);
        ForNClosestUnitsInTargetArea(Owner, CastPos, 175, "AffectEnemies AffectNeutral AffectMinions ", 1, true, default, (Iterator) =>
        {
            CanSee = CanSeeTarget(Owner, Unit);
            ;
        });
        ForNClosestUnitsInTargetArea(Owner, CastPos, 150, "AffectEnemies AffectHeroes ", 1, true, default, (Iterator) =>
        {
            CanSee = CanSeeTarget(Owner, Unit);
            ;
        });
        ;
        NextBuffVars.Count = SetVarInTable(Count);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        CheckPos = GetPointByUnitFacingOffset(Owner, 75, 0);
        ;
        ;
        Pathable = IsPathable(CheckPos);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "RivenSword", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "UdyrBearActivation", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        teamID = GetTeamID(default);
        PointToSpawn = GetPointByUnitFacingOffset(Owner, 25, 0);
        PointToFace = GetPointByUnitFacingOffset(Owner, -100, 0);
        Other1 = SpawnMinion("ConeBreathMarker", "TestCubeRender10Vision", "idle.lua", PointToSpawn, teamID ?? TEAM_NEUTRAL, false, true, false, false, false, true, 1, false, false, Owner, default);
        FaceDirection(Other1, PointToFace);
        SpellBuffAdd(Attacker, Other1, "ShyvanaFireballDragonMinion", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 1250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", true, (Iterator) =>
        {
            SpellBuffClear(Unit, "RenektonTargetSliced");
        });
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        ;
        ;
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        ;
        ;
        NextBuffVars.DashSpeed = SetVarInTable(DashSpeed);
        NextBuffVars.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.ArmorShred = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.Distance = SetVarInTable(Distance);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        SpellBuffAdd(Attacker, Owner, "RenektonSliceAndDice", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.1, true, false, false, default);
        Point1 = GetPointByUnitFacingOffset(Owner, 300, 20);
        Point2 = GetPointByUnitFacingOffset(Owner, 300, -20);
        Point3 = GetPointByUnitFacingOffset(Owner, 325, 0);
        SpellCast(Owner, Nothing, Point1, Point1, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        SpellCast(Attacker, Nothing, Point2, Point2, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        SpellCast(Attacker, Nothing, Point3, Point3, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        Point4 = GetPointByUnitFacingOffset(Owner, 310, 10);
        Point5 = GetPointByUnitFacingOffset(Owner, 310, -10);
        SpellCast(Attacker, Nothing, Point4, Point5, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        SpellCast(Attacker, Nothing, Point5, Point5, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        SpellBuffAdd(Owner, Owner, "ShyvanaTransform", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        SpellBuffAdd(Target, Owner, "ShyvanaTransformLeap", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, true, default);
        Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
        Move(Owner, TargetPos, 1100, 10, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 0, FACE_MOVEMENT_DIRECTION);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        TargetPos = GetPointByUnitFacingOffset(Owner, 75 + Distance, 0);
        ;
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 1250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "RenektonTargetSliced", true, (Iterator) =>
        {
            SpellBuffClear(Unit, "RenektonTargetSliced");
        });
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        ;
        ;
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        ;
        ;
        NextBuffVars.DashSpeed = SetVarInTable(DashSpeed);
        NextBuffVars.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.ArmorShred = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.Distance = SetVarInTable(Distance);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        SpellBuffAdd(Attacker, Owner, "RenektonSliceAndDice", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.1, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        NextBuffVars.Level = SetVarInTable(Level);
        NextBuffVars.BonusHealth = SetVarInTable(VALUE_BY_LEVEL);
        BaseBurn = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.MaximumSpeed = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "RenektonUnlockAnimationCleave", 1, 1, 0.24, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell1", 0, Owner, false, false, true);
        FuryGainIncrement = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        FuryGain = SetVarInTable(0);
        BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        WeaponDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        RangeVar = SetVarInTable(400);
        ;
        ;
        ;
        SpellBuffClear(Owner, "RenektonCleaveDrain");
        SpellBuffAdd(Attacker, Target, "MaliceandSpite", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTimeVer2(0, 1, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ForNClosestUnitsInTargetArea(Owner, Owner, 355, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", 1, true, default, (Iterator) =>
        {
            SpellCast(Owner, Unit, Owner, Owner, false, 0, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        });
        NextBuffVars.MovementSpeed = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DamagePerTick = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.MovementSpeed = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DamagePerTick = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        SpellEffectCreate(Phoenixparticle, default, "PhoenixStance.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "UdyrPhoenixActivation", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, default, default);
        ;
        ;
        ShieldAmount = SetVarInTable(VALUE_BY_LEVEL);
        ;
        NextBuffVars.ShieldAmount = SetVarInTable(ShieldAmount);
        SpellBuffAdd(Owner, Owner, "UdyrTurtleActivation", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.activeAttackSpeed = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.passiveAttackSpeed = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UdyrTigerPunch", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        SpellEffectCreate(Tigerparticle, default, "TigerStance.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "UdyrTigerShred", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.DamagePerTick = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.MRminus = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 2000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectUntargetable ", "AlphaStrikeMarker", true, (Iterator) =>
        {
            ;
        });
        SpellBuffRemove(Owner, "WujuStyle", Owner, default);
        SpellBuffAdd(Owner, Owner, "SoulShacklesOwner", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, default, 0, ExtraSlots, 0 + Level, true, false, false, default, default, default);
        ;
        ;
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        CharVars.StartingDamage = SetVarInTable(StartingDamage);
        SpellBuffClear(Owner, "OrianaGhostSelf");
        SetSpellOffsetTarget(3, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        SetSpellOffsetTarget(1, SpellSlots, "JunkName", SPELLBOOK_CHAMPION, Owner, Owner);
        SpellBuffClear(Owner, "OrianaBlendDelay");
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        OwnerPos = GetUnitPosition(Owner);
        CharVars.IzunaPercent = SetVarInTable(1);
        CastRange = SetVarInTable(885);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        ;
        NextBuffVars.GhostAlive = SetVarInTable(CharVars.GhostAlive);
        Deployed = SetVarInTable(false);
        ShiftWithoutMissile = SetVarInTable(false);
        ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf AffectUntargetable ", 1, true, "OrianaGhost", (Iterator) =>
        {
            Deployed = SetVarInTable(true);
            TargetPos = GetCastSpellTargetPos();
            Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
            ;
            CastPos = GetUnitPosition(Unit);
            SpellBuffClear(Unit, "OrianaGhost");
            Distance = DistanceBetweenPoints(CastPos, TargetPos);
            ;
            ;
        });
        ;
        ;
        SpellBuffAdd(Owner, Owner, "OrianaGlobalCooldown", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        LeftPoint = GetPointByUnitFacingOffset(Owner, 500, 90);
        RightPoint = GetPointByUnitFacingOffset(Owner, 500, -90);
        LeftDistance = DistanceBetweenPoints(CastPos, LeftPoint);
        RightDistance = DistanceBetweenPoints(CastPos, RightPoint);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffClear(Owner, "0");
        SpellBuffClear(Owner, "OrianaGhostSelf");
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        NextBuffVars.GhostAlive = SetVarInTable(CharVars.GhostAlive);
        Deployed = SetVarInTable(false);
        ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes ", 1, true, "OrianaGhost", (Iterator) =>
        {
            Deployed = SetVarInTable(true);
            TargetPos = GetCastSpellTargetPos();
            Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
            ;
            CastPos = GetUnitPosition(Unit);
            NextBuffVars.CastPos = SetVarInTable(CastPos);
            NextBuffVars.TargetPos = SetVarInTable(TargetPos);
            SpellBuffAdd(Owner, Owner, "OrianaIzuna", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
            SpellBuffClear(Unit, "OrianaGhost");
            ;
            ;
        });
        ;
        PlayAnimation("Spell2", 1.25, Owner, true, false, true);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OrianaGlobalCooldown", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OrianaGlobalCooldown", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Damage = SetVarInTable(VALUE_BY_LEVEL);
        Deployed = SetVarInTable(false);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        RangeVar = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", 1, true, "OrianaGhost", (Iterator) =>
        {
            Deployed = SetVarInTable(true);
            TargetPos = GetUnitPosition(Unit);
            ;
            ;
            Other1 = SetUnit(Unit);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, TargetPos, 0 + RangeVar, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            CanSee = CanSeeTarget(Owner, Unit);
            ValidTarget = SetVarInTable(true);
            ;
            ;
        });
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        PlayAnimation("Spell2", 0, Owner, false, true, false);
        SpellBuffAdd(Owner, Owner, "OrianaGlobalCooldown", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        Damage = SetVarInTable(VALUE_BY_LEVEL);
        Deployed = SetVarInTable(false);
        ;
        ;
        ;
        ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes NotAffectSelf AffectUntargetable ", 1, true, "OrianaGhost", (Iterator) =>
        {
            Deployed = SetVarInTable(true);
            TargetPos = GetUnitPosition(Unit);
            ;
            ;
        });
        ;
        ForEachUnitInTargetArea(Owner, TargetPos, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellEffectCreate(Temp, default, "OrianaDissonance_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            ApplyDamage(Owner, Unit, 0 + Damage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Owner);
            ;
            SpellBuffAdd(Attacker, Unit, "OrianaSlow", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
        });
        ForEachUnitInTargetArea(Owner, TargetPos, 225, "AffectFriends AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellBuffAdd(Attacker, Unit, "OrianaHaste", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        });
        NextBuffVars.Particle2 = SetVarInTable(Particle2);
        NextBuffVars.Particle = SetVarInTable(Particle);
        NextBuffVars.targetPos = SetVarInTable(TargetPos);
        SpellBuffAdd(Owner, Owner, "OrianaDissonanceWave", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        TeamID = GetTeamID(default);
        Other3 = SpawnMinion("Noxious Trap", "Nidalee_Spear", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, true, false, true, true, true, 0, false, false, Owner, default);
        PlayAnimation("Spell1", 1, Other3, false, false, true);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 240, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        OwnerPos = GetUnitPosition(Owner);
        CastRange = SetVarInTable(1640);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        NextBuffVars.GhostAlive = SetVarInTable(CharVars.GhostAlive);
        Deployed = SetVarInTable(false);
        ForNClosestUnitsInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectHeroes ", 1, true, "OrianaGhost", (Iterator) =>
        {
            Deployed = SetVarInTable(true);
            TargetPos = GetCastSpellTargetPos();
            Distance = DistanceBetweenObjectAndPoint(Owner, TargetPos);
            ;
            CastPos = GetUnitPosition(Unit);
            NextBuffVars.CastPos = SetVarInTable(CastPos);
            NextBuffVars.TargetPos = SetVarInTable(TargetPos);
            SpellCast(Owner, Nothing, TargetPos, TargetPos, true, 5, ExtraSlots, 0 + Level, true, true, false, false, false, CastPos);
        });
        ;
        PlayAnimation("Spell2", 1.25, Owner, true, false, true);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "OrianaGlobalCooldown", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 7, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        ;
        ;
        OwnerPos = GetCastSpellTargetPos();
        TeamID = GetTeamID(default);
        Other1 = SpawnMinion("birds", "TestCube", "idle.lua", OwnerPos, TeamID ?? TEAM_UNKNOWN, true, true, true, true, true, true, 0, false, true, Nothing, default);
        SpellBuffAdd(Attacker, Other1, "TrundleDesecrate", 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell2", 1, Owner, false, true, true);
        this.WillRemove = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "UnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell2", 1, Owner, false, true, true);
        ;
        NextBuffVars.HastePercent = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        NextBuffVars.BonusAD = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        SpellBuffAdd(Attacker, Attacker, "NocturneDuskbringerHaste", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        ;
        ;
        ;
        ;
        ;
        DestroyMissileForTarget(Owner);
        UnlockAnimation(Owner, false);
        CancelAutoAttack(Owner, true);
        PlayAnimation("Spell3a", 0.75, Owner, false, true, false);
        Move(Owner, TargetPos, 0 + SpeedVar, 0 + GravityVar, 0, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 500, FACE_MOVEMENT_DIRECTION);
        NextBuffVars.Damage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "FizzJumpBuffer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "FizzSeastoneTridentActive", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        ;
        ;
        ;
        ;
        Move(Owner, TargetPos, 0 + SpeedVar, 0 + GravityVar, 0, FURTHEST_WITHIN_RANGE, POSTPONE_CURRENT_ORDER, 500, FACE_MOVEMENT_DIRECTION);
        NextBuffVars.Damage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PlayAnimation("Spell3d", 1, Owner, false, true, false);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        TeamID = GetTeamID(default);
        Other3 = SpawnMinion("Bantam Trap", "CaitlynTrap", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, true, false, true, true, false, 0, false, false, Owner, default);
        PlayAnimation("Spell1", 1, Other3, false, false, true);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        MaxStacks = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Other3, Owner, "FizzTempestTrapCount", 0 + MaxStacks, 1, 30, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, false, false, false, default);
        JumpBuffer = GetCastSpellTargetPos();
        CharVars.JumpBuffer = SetVarInTable(JumpBuffer);
        SpellBuffAdd(Owner, Owner, "FizzJumpBuffered", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.DefenseBonus = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.MagicDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Attacker, "LeonaSolarBarrier", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.SilenceDuration = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "LeonaShieldOfDaybreak", 1, 1, 6, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        NextBuffVars.Distance = SetVarInTable(Distance);
        SpellEffectCreate(a, default, "Leona_SolarFlare_cas.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "root", default, Attacker, default, default, true, default, default, false, false, default, default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Owner, default);
        NextBuffVars.DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.Level = SetVarInTable(Level);
        SpellBuffAdd(Attacker, Other3, "LeonaSolarFlare", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.Bubble = AddPosPerceptionBubble(TeamOfOwner, 800, TargetPos, 4, Nothing, false);
        SpellBuffAdd(Owner, Owner, "LeonaSolarFlareVision", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        CastPos = GetCastSpellTargetPos();
        FaceDirection(Owner, CastPos);
        CenterPos = GetPointByUnitFacingOffset(Owner, 225, 0);
        PlayAnimation("Attack1", 0.5, Owner, false, true, true);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetRectangle(Owner, CenterPos, 80, 325, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", true, default, (Iterator) =>
        {
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.66, 0, false, false, Attacker);
            SpellBuffAdd(Owner, Unit, "RenektonBloodSplatterTarget", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SpellBuffAdd(Owner, Owner, "FizzUnlockAnimation", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Skip = GetPointByUnitFacingOffset(Owner, 250, 0);
        Move(Owner, Skip, 600, 18, 25, FURTHEST_WITHIN_RANGE, CANCEL_ORDER, 300, FACE_MOVEMENT_DIRECTION);
        CancelAutoAttack(Owner, true);
        TeamID = GetTeamID(default);
        StartPos = GetPointByUnitFacingOffset(Owner, -75, 0);
        Other1 = SpawnMinion("TestCube", "TestCube", "idle.lua", StartPos, TeamID ?? TEAM_UNKNOWN, false, true, true, true, true, true, 10, true, false, Nothing, default);
        EndPos = GetPointByUnitFacingOffset(Owner, 550, 0);
        Other2 = SpawnMinion("TestCube", "TestCube", "idle.lua", EndPos, TeamID ?? TEAM_UNKNOWN, false, true, true, true, true, true, 10, true, false, Nothing, default);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(this.ParticleID, default, "kennen_btl_beam.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Unit, false, Other1, "head", default, Other2, "head", default, true, false, false, false, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "FizzMarinerDoom", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 4, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        CharVars.UltFired = SetVarInTable(true);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "LeonaZenithBlade", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffClear(Owner, "FizzUnlockAnimation");
        PlayAnimation("Spell6", 0, Owner, false, true, true);
        ForEachUnitInTargetArea(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Owner, Unit, "RenektonBloodSplatterTarget", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 0, false, false, Attacker);
        });
        SpellBuffAdd(Owner, Owner, "FizzUnlockAnimation", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffClear(Owner, "FizzQ1");
        CancelAutoAttack(Owner, true);
        SpellBuffAdd(Attacker, Attacker, "NocturneUmbraBladesAttack", 1, 1, 0.01, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffClear(Owner, "FizzMarinerDoomMissile");
        ForEachChampion(TEAM_UNKNOWN, default, true, (Iterator) =>
        {
            ;
        });
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        NextBuffVars.DamageReduction = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.bonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "AlistarTrample", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        ;
        ;
        BaseHeal = SetVarInTable(VALUE_BY_LEVEL);
        ;
        IncHealth(Owner, 0 + FinalHeal, Owner);
        SpellEffectCreate(par, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        ;
        ForEachUnitInTargetArea(Owner, Owner, 575, "AffectFriends AffectMinions AffectHeroes NotAffectSelf ", default, true, (Iterator) =>
        {
            ;
            ;
            IncHealth(Unit, 0 + FinalHeal, Owner);
            SpellEffectCreate(par, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        SpellBuffAdd(Owner, Owner, "AlistarTrample", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        ;
        ShieldAmount = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.Shield = SetVarInTable(Shield);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.DamageLevel = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        SpellBuffAdd(Attacker, Owner, "GragasBarrelRoll", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellCast(Attacker, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        OwnerPos = GetUnitPosition(Owner);
        Homed = SetVarInTable(0);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        TeamID = GetTeamID(default);
        ;
        ;
        SpellBuffRemove(Owner, "GragasBarrelRoll", Owner, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        NextBuffVars.DashSpeed = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.Distance = SetVarInTable(Distance);
        NextBuffVars.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.MinimumDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Owner, "GragasBodySlam", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0.1, true, false, false, default);
        SpellEffectCreate(default, default, "gragas_bodySlam_cas_02.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Target, default, default, Target, default, default, true, default, default, false, false, default, default);
        SpellBuffAdd(Attacker, Target, "GragasBodySlamHolder", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        FaceDirection(Owner, TargetPos);
        ;
        Other2 = SpawnMinion("k", "TestCubeRender", "idle.lua", TargetPos, TeamID ?? TEAM_NEUTRAL, true, true, false, true, true, true, 0, default, true, Attacker, default);
        SpellCast(Owner, Other2, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + Level, false, true, false, false, false, default);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        FaceDirection(Owner, TargetPos);
        ;
        Other2 = SpawnMinion("k", "TestCubeRender", "idle.lua", TargetPos, TeamID ?? TEAM_NEUTRAL, true, true, false, true, true, true, 0, default, true, Attacker, default);
        SpellCast(Owner, Other2, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + Level, false, false, false, false, false, default);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        NextBuffVars.VolibearRDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.VolibearRSpeed = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.VolibearRRatio = SetVarInTable(0.3);
        VolibearRCharges = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "VolibearRApplicator", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        CancelAutoAttack(Owner, true);
        SpellBuffAdd(Owner, Owner, "AlistarTrample", 1, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        ForEachUnitInTargetArea(Owner, Owner, 375, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellBuffAdd(Owner, Unit, "Pulverize", 1, 1, 1, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Stun, 0, true, false, false, default);
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.5, 1, false, false, Attacker);
        });
        TeamID = GetTeamID(default);
        SpellEffectCreate(this.partname, default, "volibear_E_aoe_indicator.troy", default, TeamID ?? TEAM_UNKNOWN, 350, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(this.partname, default, "volibear_E_aoe_indicator_02.troy", default, TeamID ?? TEAM_UNKNOWN, 350, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(default, default, "Volibear_E_cas_blast.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Nothing, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(default, default, "Volibear_E_cas.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, Owner, Nothing, default, default, true, false, false, false, false, default, default);
        NextBuffVars.VolibearESlow = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        NextBuffVars.VolibearEExtender = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        DamageToDeal = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Attacker, Attacker, 425, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellEffectCreate(TargetParticle, default, "volibear_E_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            ;
            SpellBuffAdd(Attacker, Unit, default, 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
            ApplyDamage(Attacker, Unit, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 0, false, false, Attacker);
            ;
        });
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        NextBuffVars.SpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "VolibearQSpeed", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        ADRatio = SetVarInTable(0.5);
        ;
        ;
        TargetPos = GetCastSpellTargetPos();
        SpellEffectCreate(a, default, "KogMawLivingArtillery_mis.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "C_Mouth_d", default, Attacker, default, default, true, default, default, false, false, default, default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Owner, default);
        DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BaseDamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BonusDamage = SetVarInTable(BonusDamage);
        ;
        NextBuffVars.FinalDamage = SetVarInTable(DamageAmount);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        SetPARCostInc(Owner, 3, SpellSlots, 0 + ExtraCost, PAR_MANA);
        SpellBuffAdd(Attacker, Owner, "KogMawLivingArtilleryCost", 5, 1, 6, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.Bubble = AddPosPerceptionBubble(TeamOfOwner, 100, TargetPos, 1, Nothing, false);
        CharVars.BriggsCastPos = GetUnitPosition(Owner);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Attacker, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        StopMove(Attacker);
        Pos = GetPointByUnitFacingOffset(Owner, 925, 0);
        SpellCast(Owner, Nothing, Pos, Pos, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 50, 0);
        SpellCast(Owner, Nothing, Pos, Pos, false, 7, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 925, 16);
        SpellCast(Owner, Nothing, Pos, Pos, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 925, -16);
        SpellCast(Owner, Nothing, Pos, Pos, false, 4, ExtraSlots, 1, true, true, false, false, false, default);
        SpellBuffRemove(Owner, "TalonShadowAssaultBuff", Owner, 0);
        SpellBuffRemove(Owner, "TalonShadowAssaultMisOne", Owner, 0);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        ;
        baseHeal = SetVarInTable(VALUE_BY_LEVEL);
        HealthPerFury = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        IncHealth(Owner, 0 + HealthToRestore, Owner);
        SpellEffectCreate(Part, default, "Tryndamere_Heal.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, false, false, false, false, default, default);
        ;
        IncPAR(Owner, 0 + furyToRemove);
        StopMove(Attacker);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        ;
        ;
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        FaceDirection(Owner, TargetPos);
        TargetPos = GetPointByUnitFacingOffset(Owner, 0 + Distance, 0);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.Distance = SetVarInTable(Distance);
        NextBuffVars.dashSpeed = SetVarInTable(dashSpeed);
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.1, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TalonNoxianDiplomacyBuff", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, false, false, false, default);
        SpellBuffAdd(Attacker, Target, "TalonNoxianDiplomacy", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        CancelAutoAttack(Owner, true);
        SpellEffectCreate(this.ParticleZ, default, "talon_ult_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Attacker, default, default, false, false, false, false, true, default, default);
        SpellEffectCreate(this.ParticleZ, default, "talon_invis_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Attacker, default, default, false, false, false, false, true, default, default);
        SpellBuffAdd(Attacker, Target, "TalonShadowAssaultAnimBuff", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TalonShadowAssaultBuff", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "TalonShadowAssaultMisOne", 1, 1, 10000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 0);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 135);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, -90);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 45);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 180);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, -45);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, 90);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 1000, -135);
        SpellCast(Owner, Nothing, Pos, Pos, false, 3, ExtraSlots, 1, true, true, false, false, false, default);
        SetSpell(Owner, 3, SpellSlots, SPELLBOOK_CHAMPION, "TalonShadowAssaultToggle");
        ;
        SealSpellSlot(3, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SetSlotSpellCooldownTimeVer2(0.5, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        FaceDirection(Owner, TargetPos);
        ;
        Other2 = SpawnMinion("k", "TestCubeRender10Vision", "idle.lua", TargetPos, TeamID ?? TEAM_NEUTRAL, true, true, false, true, true, true, 50, false, true, Attacker, default);
        SpellCast(Owner, Other2, TargetPos, TargetPos, false, 3, ExtraSlots, 0 + Level, false, false, false, false, false, default);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        baseAbilityDamage = SetVarInTable(VALUE_BY_LEVEL);
        totalDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.WillRemove = SetVarInTable(false);
        OwnerPos = GetUnitPosition(Owner);
        SlashSpeed = SetVarInTable(900);
        ;
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        NextBuffVars.WillMove = SetVarInTable(true);
        NextBuffVars.SlashSpeed = SetVarInTable(SlashSpeed);
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 0.05 + Duration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.AttackRangeIncrease = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Target, default, 1, 1, 8, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        OwnerTeam = GetTeamID(default);
        CastPos = GetUnitPosition(Owner);
        SpellEffectCreate(p3, default, "talon_E_cast.troy", default, OwnerTeam ?? TEAM_NEUTRAL, 1, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, CastPos, Target, default, default, true, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, "TalonRakeMissileOne", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        Pos = GetPointByUnitFacingOffset(Owner, 750, 0);
        SpellCast(Owner, Nothing, Pos, Pos, false, 1, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 750, 20);
        SpellCast(Owner, Nothing, Pos, Pos, false, 1, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        Pos = GetPointByUnitFacingOffset(Owner, 750, -20);
        SpellCast(Owner, Nothing, Pos, Pos, false, 1, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        teamID = GetTeamID(default);
        Iterations = SetVarInTable(VALUE_BY_LEVEL);
        LineWidth = SetVarInTable(VALUE_BY_LEVEL);
        FoundFirstPos = SetVarInTable(false);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.ArmorMod = SetVarInTable(VALUE_BY_LEVEL);
        ForEachPointOnLine(OwnerPos, TargetPos, 0 + LineWidth, 0 + Distance, 0 + Iterations, (Iterator) =>
        {
            NextBuffVars.Pos = SetVarInTable(Pos);
            SpellBuffAdd(Owner, Owner, default, 50, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0.1, true, false, false, default);
            ;
            LastPos = SetVarInTable(Pos);
        });
        Other1 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", FirstPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, true, Owner, default);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Other2 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", LastPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, false, true, Owner, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other1, Other2, "WallOfPainBeam", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        LinkVisibility(Other1, Other2);
        Other3 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", TargetPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300 + LineWidth, false, true, Owner, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        LinkVisibility(Other1, Other3);
        LinkVisibility(Other2, Other3);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "FallenOneTarget", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        BubbleID = AddPosPerceptionBubble(TeamOfOwner, 200, TargetPos, 1, Nothing, false);
        Other3 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Owner, default);
        NextBuffVars.DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        targetPos = GetCastSpellTargetPos();
        SpellCast(Owner, Nothing, targetPos, targetPos, false, 0, ExtraSlots, 0 + Level, false, true, false, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        TeamOfOwner = GetTeamID(default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Owner, default);
        NextBuffVars.PoisonPerTick = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 0.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        TickAmount = SetVarInTable(VALUE_BY_LEVEL);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        ;
        NextBuffVars.Damage = SetVarInTable(Damage);
        NextBuffVars.WillRemove = SetVarInTable(false);
        OwnerPos = GetUnitPosition(Owner);
        ;
        ;
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        ;
        ;
        NextBuffVars.WillMove = SetVarInTable(true);
        NextBuffVars.SlashSpeed = SetVarInTable(SlashSpeed);
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 0.05 + Duration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, "ValkyrieSound", 1, 1, 0 + Duration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        Pos = GetCastSpellTargetPos();
        ;
        ;
        ;
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, Pos);
        FaceDirection(Owner, Pos);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        TargetPosStart = GetCastSpellTargetPos();
        TargetPosEnd = GetCastSpellDragEndPos();
        Other1 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPosStart, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, default, true, Owner, default);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        FaceDirection(Other1, TargetPosEnd);
        TargetPosEnd = GetPointByUnitFacingOffset(Other1, 1200, 0);
        TeamID = GetTeamID(default);
        SpellCast(Owner, Nothing, TargetPosEnd, TargetPosEnd, true, 1, ExtraSlots, 0 + Level, true, true, false, false, false, TargetPosStart);
        SpellBuffAdd(Owner, Owner, "RumbleHeatDelay", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IncPAR(Owner, 0);
        SpellBuffAdd(Owner, Owner, "RumbleCarpetBomb", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Owner, Owner, Owner, default, true, 2, ExtraSlots, 0 + Level, true, false, false, true, false, TargetPosStart);
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        BubbleID = AddPosPerceptionBubble(TeamOfOwner, 200, TargetPos, 2.6, Nothing, false);
        Other3 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, true, true, true, true, true, true, 0, default, true, Owner, default);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        SpellBuffAdd(Attacker, Other3, "MissFortuneScatterParticle", 1, 1, 2.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        TargetPos = GetCastSpellTargetPos();
        ;
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        FirstCost = SetVarInTable(VALUE_BY_LEVEL);
        SecondCost = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        this.Cooldown = SetVarInTable(NextBuffVars.BaseCDR);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 3, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, default, 2, 1, 8, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_CombatEnchancer, 0, false, false, false, default);
        ;
        ;
        SpellEffectCreate(ar, default, "Meditate_eff.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        HealthToInc = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        IncHealth(Owner, 0 + HealthToInc, Owner);
        ;
        TargetPos = GetCastSpellTargetPos();
        TeamID = GetTeamID(default);
        AnnieSkinID = GetSkinID(Owner);
        ;
        ;
        Other1 = SpawnPet("Tibbers", "AnnieTibbers", "InfernalGuardian", default, 45, TargetPos, 0 + VALUE_BY_LEVEL, 0 + VALUE_BY_LEVEL);
        NextBuffVars.ArmorAmount = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.MRAmount = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.HealthAmount = SetVarInTable(VALUE_BY_LEVEL);
        DamageAmount = SetVarInTable(DamageAmount ?? VALUE_BY_LEVEL);
        ;
        ;
        ;
        SpellBuffAdd(Attacker, Attacker, "InfernalGuardianTimer", 1, 1, 45, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other1, "InfernalGuardianBurning", 1, 1, 45, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        CharVars.SpellWillStun = SetVarInTable(false);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "Pyromania", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        TeamOfOwner = GetTeamID(default);
        Other3 = SpawnMinion("HiddenMinion", "TestCube", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Owner, default);
        NextBuffVars.DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        SpellEffectCreate(hi, default, "Tantrum_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Owner, TargetPos);
        TargetPos = GetPointByUnitFacingOffset(Owner, 1100, 0);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, default, 0, ExtraSlots, 0 + Level, true, true, false, false, default, default);
        ;
        ;
        ;
        HealthPercent = SetVarInTable(VALUE_BY_LEVEL);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.LifestealStat = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        CharVars.SpellWillStun = SetVarInTable(false);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "Pyromania", 5, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        NextBuffVars.BonusHealth = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.FearDuration = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Owner, "JackInTheBoxInternal", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        NextBuffVars.DCooldown = SetVarInTable(VALUE_BY_LEVEL);
        SpellEffectCreate(hi, default, "jackintheboxpoof2.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Owner, default, default, true, false, false, false, false, default, default);
        CastPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, CastPos);
        ;
        NextBuffVars.CastPos = SetVarInTable(CastPos);
        NextBuffVars.CritDmgBonus = SetVarInTable(VALUE_BY_LEVEL);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "DeceiveFade", 1, 1, 0.05, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        MaxStacks = SetVarInTable(VALUE_BY_LEVEL);
        NumFound = SetVarInTable(0);
        minDuration = SetVarInTable(240);
        Other2 = SetUnit(Owner);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectFriends AffectMinions AffectUntargetable ", "CaitlynYordleTrap", true, (Iterator) =>
        {
            ;
            durationRemaining = GetBuffRemainingDuration(Unit, "CaitlynYordleTrap");
            ;
        });
        ;
        TargetPos = GetCastSpellTargetPos();
        TeamID = GetTeamID(default);
        Other3 = SpawnMinion("Noxious Trap", "CaitlynTrap", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, true, false, true, true, false, 0, false, false, Owner, default);
        PlayAnimation("Spell1", 1, Other3, false, false, true);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 240, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        ;
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        PushbackPos = GetPointByUnitFacingOffset(Owner, 10, 0);
        ;
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        ;
        ;
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        SpellEffectCreate(hi, default, "vayne_ult_invis_cas_02.troy", default, TEAM_NEUTRAL, 150, 0, TEAM_UNKNOWN, Nothing, false, Owner, "C_BUFFBONE_GLB_CHEST_LOC", Owner, Owner, default, default, true, default, default, false, false, default, default);
        ;
        NextBuffVars.DashSpeed = SetVarInTable(900);
        NextBuffVars.Distance = SetVarInTable(300);
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        SetSlotSpellCooldownTimeVer2(0, 0, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Attacker, Owner, "VayneTumble", 1, 1, 0.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0.1, true, false, false, default);
        CancelAutoAttack(Owner, true);
        ;
        SpellBuffAdd(Attacker, Owner, "VayneTumbleBonus", 1, 1, 6.75, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0.1, true, false, false, default);
        TeamOfOwner = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, 145, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 1100, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, TeamOfOwner ?? TEAM_CASTER, false, true, false, false, false, true, 1, false, false, Owner, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, TeamOfOwner ?? TEAM_CASTER, false, true, false, false, false, true, 1, false, false, Owner, default);
        FaceDirection(Other1, Other3);
        LinkVisibility(Other1, Other3);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulsePartFix", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulsePartFix2", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "XerathArcanopulseDeath", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "XerathArcanopulseDeath", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        SpellEffectCreate(this.ParticleID, this.ParticleID2, "XerathR_beam.troy", "XerathR_beam.troy", TeamOfOwner ?? TEAM_UNKNOWN, 550, 0, TEAM_UNKNOWN, Owner, false, Other3, "top", default, Other1, "top", default, true, false, false, false, false, default, default);
        DamagePoint = GetPointByUnitFacingOffset(Owner, 500, 0);
        ForEachUnitInTargetRectangle(Owner, DamagePoint, 95, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", true, default, (Iterator) =>
        {
            ;
            SpellEffectCreate(asdf, default, "Xerath_beam_hit.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
            ;
        });
        TeamOfOwner = GetTeamID(default);
        Beam1 = GetPointByUnitFacingOffset(Owner, 145, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 1600, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, TeamOfOwner ?? TEAM_CASTER, false, true, false, false, false, true, 1, false, false, Owner, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, TeamOfOwner ?? TEAM_CASTER, false, true, false, false, false, true, 1, false, false, Owner, default);
        FaceDirection(Other1, Other3);
        LinkVisibility(Other1, Other3);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulsePartFix", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulsePartFix2", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "XerathArcanopulseDeath", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "XerathArcanopulseDeath", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        SpellEffectCreate(this.ParticleID, this.ParticleID2, "XerathR_beam.troy", "XerathR_beam.troy", TeamOfOwner ?? TEAM_UNKNOWN, 550, 0, TEAM_UNKNOWN, Owner, false, Other3, "top", default, Other1, "top", default, true, false, false, false, false, default, default);
        DamagePoint = GetPointByUnitFacingOffset(Owner, 800, 0);
        ForEachUnitInTargetRectangle(Owner, DamagePoint, 95, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes NotAffectSelf ", true, default, (Iterator) =>
        {
            ;
            SpellEffectCreate(asdf, default, "Xerath_beam_hit.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Attacker);
            ;
        });
        TargetPos = GetCastSpellTargetPos();
        TeamID = GetTeamID(default);
        Other1 = SpawnMinion("Inky", "YorickDecayedGhoul", "YorickPHPet.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, false, true, false, false, false, 0, false, false, Owner, default);
        SpellBuffAdd(Other1, Attacker, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Other1, "YorickDecayedDiseaseCloud", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "YorickDecayedLogic", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellEffectCreate(e, default, "yorick_necroExplosion.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Other1, default, default, Other1, default, default, false, default, default, false, false, default, default);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Owner, Other1, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellEffectCreate(b, default, "yorick_necroExplosion_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            SpellBuffAdd(Owner, Unit, "YorickDecayedSlow", 100, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Slow, 0, true, false, false, default);
            ApplyDamage(Owner, Unit, 0 + BaseDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 0, false, false, Owner);
        });
        TargetPos = GetCastSpellTargetPos();
        teamID = GetTeamID(default);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        Beam1 = GetPointByUnitFacingOffset(Owner, 145, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 1600, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, teamID ?? TEAM_NEUTRAL, false, true, false, false, false, true, 1, false, false, Owner, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, teamID ?? TEAM_NEUTRAL, false, true, false, false, false, true, 1, false, false, Owner, default);
        FaceDirection(Other1, Other3);
        LinkVisibility(Other1, Other3);
        SpellBuffAdd(Attacker, Other1, "XerathArcanopulseDeath", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "XerathArcanopulseDeath", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulseWPartFix", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulseWPartFix2", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other1, Other3, "XerathArcanopulseBeam", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other1, "XerathArcanopulseBall", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 1, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        ;
        TargetPos = GetCastSpellTargetPos();
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + Level, true, false, false, true, false, default);
        TargetPos = GetCastSpellTargetPos();
        teamID = GetTeamID(default);
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        FaceDirection(Owner, TargetPos);
        Beam1 = GetPointByUnitFacingOffset(Owner, 145, 0);
        Beam3 = GetPointByUnitFacingOffset(Owner, 1100, 0);
        Other1 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam1, teamID ?? TEAM_NEUTRAL, false, true, false, false, false, true, 1, false, false, Owner, default);
        Other3 = SpawnMinion("hiu", "TestCubeRender10Vision", "idle.lua", Beam3, teamID ?? TEAM_NEUTRAL, false, true, false, false, false, true, 1, false, false, Owner, default);
        FaceDirection(Other1, Other3);
        LinkVisibility(Other1, Other3);
        SpellBuffAdd(Attacker, Other1, "XerathArcanopulseDeath", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "XerathArcanopulseDeath", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulsePartFix", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other3, Other1, "XerathArcanopulsePartFix2", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Other1, Other3, "XerathArcanopulseBeam", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other1, "XerathArcanopulseBall", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "YorickSpectralUnlock", 1, 1, 11, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(OwnerPos, TargetPos);
        teamID = GetTeamID(default);
        Iterations = SetVarInTable(VALUE_BY_LEVEL);
        LineWidth = SetVarInTable(VALUE_BY_LEVEL);
        FoundFirstPos = SetVarInTable(false);
        NextBuffVars.DamageToDeal = SetVarInTable(VALUE_BY_LEVEL);
        ForEachPointOnLine(OwnerPos, TargetPos, 0 + LineWidth, 0 + Distance, 0 + Iterations, (Iterator) =>
        {
            NextBuffVars.Pos = SetVarInTable(Pos);
            SpellBuffAdd(Owner, Owner, "YorickDeathGripDelay", 50, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
            ;
            LastPos = SetVarInTable(Pos);
        });
        Other1 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", FirstPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, true, Owner, default);
        SpellBuffAdd(Other1, Other1, "ExpirationTimer", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Other2 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", LastPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300, default, true, Owner, default);
        SpellBuffAdd(Other2, Other2, "ExpirationTimer", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.DurationLevel = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Other1, Other2, "YorickDeathGripBeamDelay", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        LinkVisibility(Other1, Other2);
        Other3 = SpawnMinion("hiu", "TestCubeRender", "idle.lua", TargetPos, teamID ?? TEAM_CASTER, false, true, false, false, false, true, 300 + LineWidth, default, true, Owner, default);
        SpellBuffAdd(Other3, Other3, "ExpirationTimer", 1, 1, 0 + VALUE_BY_LEVEL, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        LinkVisibility(Other1, Other3);
        LinkVisibility(Other2, Other3);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other1 = SpawnMinion("Blinky", "YorickRavenousGhoul", "YorickPHPet.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, false, true, false, false, false, 0, false, false, Owner, default);
        SpellBuffAdd(Other1, Attacker, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "YorickRavenousLogic", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        ;
        TargetPos = GetCastSpellTargetPos();
        TeamID = GetTeamID(default);
        Other1 = SpawnMinion("Clyde", "YorickSpectralGhoul", "YorickPHPet.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, false, false, true, false, false, false, 0, false, false, Owner, default);
        NextBuffVars.MovementSpeedPercent = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AttackDamageMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Other1, Attacker, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other1, "YorickSpectralLogic", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "YorickActiveSpectral", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemove(Owner, "XerathLocusOfPower", Owner, 0);
        TargetPos = GetCastSpellTargetPos();
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        ;
        ;
        NextBuffVars.SpellCooldown = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.BonusDamage = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        TeamOfOwner = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        OwnerPos = GetUnitPosition(Owner);
        Distance = DistanceBetweenPoints(TargetPos, OwnerPos);
        NextBuffVars.Distance = SetVarInTable(Distance);
        SpellEffectCreate(a, default, "Xerath_E_cas.troy", default, TEAM_ORDER, 100, 0, TEAM_UNKNOWN, Attacker, false, Attacker, "chest", default, Attacker, default, default, true, false, false, false, false, default, default);
        Other3 = SpawnMinion("HiddenMinion", "XerathArcaneBarrageLauncher", "idle.lua", TargetPos, TeamOfOwner ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Owner, default);
        NextBuffVars.SlowAmount = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.Level = SetVarInTable(Level);
        SpellBuffAdd(Attacker, Other3, "XerathArcaneBarrage", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.Bubble = AddPosPerceptionBubble(TeamOfOwner, 600, TargetPos, 4, Nothing, false);
        SpellBuffAdd(Owner, Owner, "XerathArcaneBarrageVision", 1, 1, 3.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Other3, Owner, TargetPos, TargetPos, false, 0, ExtraSlots, 0 + Level, true, false, false, true, false, default);
        TargetPos = GetCastSpellTargetPos();
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 2, ExtraSlots, 0 + Level, true, false, false, false, false, default);
        ;
        ;
        NextBuffVars.AttackRangeIncrease = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "KayleRighteousFuryAnim", 1, 1, 1, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonParticle", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonSpeed", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonIcon", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.TargetPos = SetVarInTable(TargetPos);
        SpellBuffAdd(Attacker, Attacker, "HextechSweeperArea", 1, 1, 6, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectCreate(particle, default, "Haste_proc.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, false, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(0.3);
        SpellBuffAdd(Owner, Owner, "Haste", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "LightstrikerBuff", 1, 1, 8, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Target, Target, "FlaskOfCrystalWater", 5, 1, 15, NextBuffVars, BUFF_STACKS_AND_CONTINUE, BUFF_Heal, 0, false, false, false, default);
        SpellBuffAdd(Target, Target, "Potion_Internal", 1, 1, 15, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        SpellEffectCreate(a, default, "RanduinsOmen_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        NextBuffVars.MoveSpeedMod = SetVarInTable(-0.35);
        NextBuffVars.AttackSpeedMod = SetVarInTable(-0.35);
        CastArmor = GetArmor(Owner);
        CastMR = GetSpellBlock(Owner);
        ;
        ;
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 500, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Attacker, Unit, "Slow", 100, 1, 0 + FinalSlow, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Unit, "BlackOmen", 1, 1, 0 + FinalSlow, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
            ApplyAssistMarker(Attacker, Unit, 10);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SpellEffectCreate(ar, default, "spectral_fury_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Attacker, Attacker, "SpectralFury", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        CharVars.SpectralCount = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other3 = SpawnMinion("SightWard", "SightWard", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, true, true, false, false, false, false, 0, true, false, Owner, default);
        SpellBuffAdd(Attacker, Other3, "SharedWardBuff", 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ItemPlacementMissile", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "ItemPlacementMissile");
        FaceDirection(Owner, TargetPos);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 7, ExtraSlots, 1, true, true, false, false, false, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other3 = SpawnMinion("VisionWard", "VisionWard", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, true, true, false, false, false, false, 0, true, false, Owner, default);
        SpellBuffAdd(Attacker, Other3, "SharedWardBuff", 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ItemPlacementMissile", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "ItemPlacementMissile");
        FaceDirection(Owner, TargetPos);
        ;
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 7, ExtraSlots, 1, true, true, false, false, false, default);
        SpellEffectCreate(CasterVFX, default, "hexTech_Gunblade_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", default, Caster, default, default, false, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        TargetPos = GetCastSpellTargetPos();
        Other3 = SpawnMinion("WriggleLantern", "WriggleLantern", "idle.lua", TargetPos, TeamID ?? TEAM_UNKNOWN, true, true, false, false, false, false, 0, true, false, Owner, default);
        SpellBuffAdd(Attacker, Other3, "SharedWardBuff", 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Other3, "WriggleLanternWard", 1, 1, 180, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Invisibility, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ItemPlacementMissile", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "ItemPlacementMissile");
        FaceDirection(Owner, TargetPos);
        SpellCast(Owner, Nothing, TargetPos, TargetPos, false, 7, ExtraSlots, 1, true, true, false, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        NewCooldown = SetVarInTable(180);
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpell(Owner, 7, ExtraSlots, SPELLBOOK_CHAMPION, "ShurelyasSpell");
        NextBuffVars.MoveSpeedMod = SetVarInTable(0.4);
        SpellEffectCreate(a, default, "ShurelyasCrest_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 700, "AffectFriends AffectHeroes NotAffectSelf ", default, true, (Iterator) =>
        {
            SpellCast(Owner, Unit, Unit, Unit, false, 7, ExtraSlots, 1, true, true, false, false, false, default);
        });
        ForEachUnitInTargetArea(Owner, Owner, 700, "AffectFriends AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyAssistMarker(Attacker, Unit, 10);
            SpellBuffAdd(Owner, Unit, "Haste", 100, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Haste, 0, true, false, false, default);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void ChannelingCancelStop()
    {
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Owner, "RecallImproved", Owner, 0);
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Owner, "Recall", Owner, default);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Owner, "OdinRecall", Owner, 0);
        SpellEffectCreate(default, default, "OdinCaptureCancel.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Owner, "spine", default, false, false, false, false, false, default, default);
        UnlockAnimation(Owner, true);
        SpellEffectRemove(this.ParticleID);
        ;
        ;
        SpellEffectRemove(this.ParticleID2);
        SpellBuffClear(Owner, "OdinScoreNinja");
        ;
        ;
        ;
        SpellBuffClear(Owner, "OdinCaptureChannel");
        ;
        ;
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Owner, "OdinRecallImproved", Owner, 0);
        SpellBuffRemove(Attacker, "InfiniteDuressChannel", Attacker, 0);
        SpellBuffRemove(Attacker, "InfiniteDuressSound", Attacker, 0);
        SpellBuffRemove(Target, "Suppression", Attacker, 0);
        SetSlotSpellCooldownTimeVer2(10, 3, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ManaRefund = SetVarInTable(VALUE_BY_LEVEL);
        IncPAR(Owner, 0 + ManaRefund);
        SpellBuffRemove(Owner, "Pantheon_GrandSkyfall_Jump", Owner, 0);
        SpellBuffRemove(Owner, "Pantheon_GS_Particle", Owner, 0);
        SpellBuffRemove(Owner, "Pantheon_GS_ParticleRed", Owner, 0);
        SpellBuffClear(Owner, "Pantheon_HeartseekerChannel");
        SpellBuffRemove(Owner, "Pantheon_Heartseeker", Owner, 0);
        SpellBuffRemove(Owner, "Pantheon_HeartseekerSound", Owner, 0);
        SpellBuffRemove(Owner, "Pantheon_HeartseekerChannel", Owner, 0);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Attacker);
        ;
        ;
        ;
        SpellBuffRemove(Owner, "Fearmonger_marker", Owner, 0);
        SpellEffectRemove(this.ParticleID);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Owner);
        ;
        SpellBuffRemove(Owner, "ReapTheWhirlwind", Owner, 0);
        SpellBuffRemove(Target, "Suppression", Owner, 0);
        SpellBuffRemove(Target, "AlZaharNetherGrasp", Attacker, 0);
        SpellBuffRemove(Owner, "AlZaharNetherGraspSound", Owner, 0);
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Owner, "GalioIdolOfDurand", Owner, 0);
        ForEachUnitInTargetArea(Owner, Owner, 575, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyDamage(Owner, Unit, 1, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Owner);
        });
        SpellBuffRemove(Owner, "Gate", Owner, default);
        SpellBuffRemove(Owner, "Instagate", Owner, default);
        SpellBuffRemove(Owner, "DeathLotusSound", Owner, default);
        SpellBuffRemove(Owner, "DeathLotus", Owner, default);
        SpellBuffRemove(Owner, "Meditate", Owner, default);
        SpellBuffRemove(Owner, "InnateSpellHeal", Owner, default);
        SpellBuffRemove(Owner, "GragasDrunkenRage", Owner, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffRemove(Unit, "FallenOneTarget", Attacker, default);
        });
        TeamID = GetTeamID(default);
        SecondDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SpellEffectCreate(asdf, default, "AbsoluteZero_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, true, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 650, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellEffectCreate(asdf, default, "AbsoluteZero_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            ;
            ApplyDamage(Owner, Unit, 0 + SecondDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 0 + TotalTime, 2.5, 1, false, false, Attacker);
        });
        SpellBuffRemove(Owner, "AbsoluteZero", Owner, 0);
        SpellBuffRemove(Owner, "MissFortuneBulletSound", Owner, default);
        SpellBuffClear(Owner, "MissFortuneWaves");
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 5);
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Target, "CaitlynAceintheHole", Owner, 0);
    }
    public void ChannelingStart()
    {
        NextBuffVars.WillRemove = SetVarInTable(false);
        SpellEffectCreate(this.ParticleID, default, "TeleportHomeImproved.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 7.9, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        NextBuffVars.WillRemove = SetVarInTable(false);
        SpellEffectCreate(this.ParticleID, default, "TeleportHome.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 7.9, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, default, default, default, default);
        NextBuffVars.WillRemove = SetVarInTable(false);
        SpellEffectCreate(this.ParticleID, default, "TeleportHome.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 7.9, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, default, default, default, default);
        NextBuffVars.WillRemove = SetVarInTable(false);
        SpellEffectCreate(this.ParticleID, default, "TeleportHome.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 4.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "OdinCaptureImmobile", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "OdinGuardianSuppression", 1, 1, 30, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, true, default);
        this.HasPrilisasBlessing = SetVarInTable(0);
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        this.ChargeTimePassed = SetVarInTable(0);
        ;
        ;
        ;
        ;
        PlayAnimation("Channel_WNDUP", 0, Owner, true, true, false);
        this.RemoveAnim = SetVarInTable(true);
        SpellEffectCreate(this.ParticleID, default, "OdinCaptureBeam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_CHANNEL_LOC", default, Target, "spine", default, false, false, false, false, false, default, default);
        SpellEffectCreate(this.ParticleID2, default, "OdinCaptureBeam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_CHANNEL_LOC", default, Target, "spine", default, false, false, false, false, false, default, default);
        ;
        SpellBuffAdd(Owner, Owner, default, 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, true, default);
        TeamOfOwner = GetTeamID(default);
        this.ChargeTimePassed = SetVarInTable(0);
        SpellBuffAdd(Attacker, Attacker, "OdinChannelVision", 1, 1, 30, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        NextBuffVars.WillRemove = SetVarInTable(false);
        SpellEffectCreate(this.ParticleID, default, "TeleportHome_shortImproved.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 4.4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        NextBuffVars.CastPosition = SetVarInTable(CastPosition);
        FaceDirection(Owner, CastPosition);
        sourcePosition = GetPointByUnitFacingOffset(Owner, -25, 0);
        NextBuffVars.sourcePosition = SetVarInTable(sourcePosition);
        SpellBuffAdd(Owner, Owner, "Pantheon_Heartseeker", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Pantheon_HeartseekerSound", 1, 1, 0.75, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Pantheon_HeartseekerChannel", 1, 1, 15, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        CastPos = GetCastSpellTargetPos();
        FaceDirection(Owner, CastPos);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Attacker);
        ;
        ;
        ;
        SpellBuffAdd(Owner, Target, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "Fearmonger_marker", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Heal, 0, true, false, false, default);
        SpellEffectCreate(this.ParticleID, default, "Drain.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "spine", default, Target, "spine", default, false, false, false, false, false, default, default);
        ;
        NextBuffVars.DrainPercent = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DrainedBool = SetVarInTable(false);
        SpellBuffAdd(Owner, Owner, "GlobalDrain", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        BaseDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ApplyDamage(Owner, Target, 0 + DamageToDeal, MAGIC_DAMAGE, DAMAGESOURCE_SPELLPERSIST, 1, 0, 1, false, false, Owner);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Owner);
        ;
        BaseTickAmount = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.TickAmount = SetVarInTable(TickAmount);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0.25, true, false, false, default);
        SpellBuffAdd(Attacker, Owner, default, 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        baseShieldHealth = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.shieldHealth = SetVarInTable(shieldHealth);
        SpellBuffAdd(Owner, Target, "ShenStandUnitedShield", 1, 1, 7.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Target, "ShenStandUnitedTarget", 1, 1, 2.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "AlZaharNetherGraspSound", 4, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        NextBuffVars.DamageToDeal = SetVarInTable(VALUE_BY_LEVEL);
        SpellEffectCreate(this.ParticleID, default, "AlzaharNetherGrasp_beam.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "head", default, Target, "root", default, false, false, false, false, false, default, default);
        SpellBuffAdd(Owner, Target, "AlZaharNetherGrasp", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Damage, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "Suppression", 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Suppression, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        HealthTick = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.HealthTick = SetVarInTable(HealthTick);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 4.9, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Heal, 0, true, false, default, default);
        ;
        ;
        ;
        ;
        NextBuffVars.TickWorth = SetVarInTable(TickWorth);
        NextBuffVars.TickWorthMana = SetVarInTable(TickWorthMana);
        SpellBuffAdd(Owner, Owner, "InnateSpellHealCooldown", 1, 1, 20, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatDehancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 13, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Heal, 0, true, false, false, default);
        ;
        NextBuffVars.ManaTick = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 1.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Heal, 0, true, false, false, default);
        NextBuffVars.MovementSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "AbsoluteZero", 10, 1, 3, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        FaceDirection(Owner, CastPosition);
        FaceDirection(Owner, Target);
        SpellBuffAdd(Attacker, Target, "CaitlynAceintheHole", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellEffectCreate(this.ParticleID, default, "caitlyn_laser_beam_01.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_5", default, Target, "spine", default, false, false, false, false, false, default, default);
    }
    public void ChannelingSuccessStop()
    {
        TeamID = GetTeamID(default);
        ;
        ;
        CamPos = GetUnitPosition(Owner);
        SetCameraPosition("Owner", CamPos);
        SpellEffectCreate(default, default, "teleportarrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        TeamID = GetTeamID(default);
        ;
        ;
        CamPos = GetUnitPosition(Owner);
        SetCameraPosition("Owner", CamPos);
        SpellEffectCreate(default, default, "teleportarrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        ;
        ;
        CamPos = GetUnitPosition(Owner);
        SetCameraPosition("Owner", CamPos);
        SpellEffectCreate(default, default, "teleportarrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        TeamID = GetTeamID(default);
        SpellEffectRemove(this.ParticleID);
        ;
        ;
        CamPos = GetUnitPosition(Owner);
        SetCameraPosition("Owner", CamPos);
        SpellEffectCreate(default, default, "teleportarrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellEffectRemove(this.ParticleID);
        SpellEffectRemove(this.ParticleID2);
        ;
        ;
        ;
        ;
        SpellBuffClear(Owner, "OdinScoreNinja");
        UnlockAnimation(Owner, true);
        ;
        SpellBuffClear(Owner, "OdinCaptureChannel");
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Target, "OdinGuardianSuppressionBomb", Attacker, 0);
        SpellEffectRemove(this.ParticleID2);
        SpellBuffRemove(Attacker, "OdinChannelVision", Attacker, 0);
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        CamPos = GetUnitPosition(Owner);
        SetCameraPosition("Owner", CamPos);
        SpellEffectCreate(default, default, "teleportarrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, false, false, false, false, default, default);
        SpellBuffRemove(Attacker, "InfiniteDuressSound", Attacker, 0);
        SpellBuffRemove(Owner, "Pantheon_GrandSkyfall_Fall", Owner, 0);
        TeamID = GetTeamID(default);
        SpellBuffRemove(Owner, "Pantheon_GrandSkyfall_Jump", Owner, 0);
        TargetPos = SetVarInTable(CharVars.TargetPos);
        ;
        NextBuffVars.TargetPos = SetVarInTable(this.TargetPos);
        ;
        SpellCast(Owner, Nothing, this.TargetPos, this.TargetPos, false, 1, ExtraSlots, 0 + Level, true, false, false, true, false, default);
        SpellEffectCreate(this.Part, b, "pantheon_grandskyfall_up.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, default, default, false, false, default, default);
        NextBuffVars.Particle = SetVarInTable(CharVars.Particle);
        SpellBuffAdd(Owner, Owner, "Pantheon_GrandSkyfall", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "Pantheon_GS_ParticleRed", 1, 1, 2, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        TeamID = GetTeamID(default);
        CastPos = GetCastSpellTargetPos();
        SpellEffectCreate(p3, default, "summoner_flashback.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, CastPos, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(ar, default, "summoner_cast.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        SpellEffectCreate(ar1, default, "summoner_flash.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        ForEachUnitInTargetArea(Owner, CastPos, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellBuffAdd(Owner, Unit, "ParanoiaMissChance", 1, 1, 1.2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        });
        TeleportToPosition(Owner, CastPos);
        NextBuffVars.DamageAmount = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, default, 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Attacker);
        ;
        ;
        ;
        SpellBuffRemove(Owner, "Fearmonger_marker", Owner, 0);
        SpellEffectRemove(this.ParticleID);
        TeamID = GetTeamID(default);
        FiddlesticksSkinID = GetSkinID(Owner);
        ;
        SpellBuffRemove(Owner, "ReapTheWhirlwind", Owner, 0);
        DestroyMissileForTarget(Owner);
        CastPos = GetPointByUnitFacingOffset(Target, 150, 180);
        TeleportToPosition(Owner, CastPos);
        SpellBuffRemove(Target, "AlZaharNetherGrasp", Attacker, 0);
        SpellBuffRemove(Owner, "AlZaharNetherGraspSound", Owner, 0);
        SpellEffectRemove(this.ParticleID);
        SpellBuffRemove(Owner, "GalioIdolOfDurand", Owner, 0);
        ForEachUnitInTargetArea(Owner, Owner, 575, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ApplyDamage(Owner, Unit, 1, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Owner);
        });
        TeleportToPosition(Owner, CastPosition);
        SpellEffectCreate(default, default, "CardmasterTeleportArrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffRemove(Owner, "Gate", Owner, default);
        SpellBuffRemove(Owner, "DeathLotusSound", Owner, default);
        SpellBuffRemove(Owner, "DeathLotus", Owner, default);
        IncHealth(Owner, 0 + VALUE_BY_LEVEL, Owner);
        SpellBuffRemove(Owner, "Meditate", Owner, default);
        SpellBuffRemove(Owner, "Meditate", Owner, default);
        NextBuffVars.DamageIncrease = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.DamageReduction = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "GragasDrunkenRageSelf", 1, 1, 20, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffRemove(Owner, "GragasDrunkenRage", Owner, default);
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 0, false, false, Attacker);
            SpellEffectCreate(Particle, default, "FallenOne_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, false, default, default, default);
        });
        ForEachUnitInTargetArea(Owner, Owner, 25000, "AffectEnemies AffectHeroes ", default, default, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, default, false, false, default);
            SpellEffectCreate(Particle, default, "FallenOne_nova.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Target, default, default, false, default, default, default, default, default, default);
        });
        TeamID = GetTeamID(default);
        SpellBuffRemove(Owner, "AbsoluteZero", Owner, 0);
        SpellEffectCreate(asdf, default, "AbsoluteZero_nova.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Attacker, default, default, Attacker, default, default, true, default, default, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 650, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellEffectCreate(asdf, default, "AbsoluteZero_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, false, false, default, default);
            ;
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 2.5, 1, false, false, Attacker);
        });
        SpellBuffRemove(Owner, "MissFortuneBulletSound", Owner, default);
        SpellBuffClear(Owner, "MissFortuneWaves");
        ;
        FaceDirection(Owner, Target);
        Team = GetTeamID(default);
        SpellCast(Owner, Target, Target, Target, false, 0, ExtraSlots, 0 + Level, true, true, false, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "IfHasBuffCheck", 1, 1, 2.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellEffectRemove(this.ParticleID);
    }
    public void AdjustCooldown()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        BaseCooldown = SetVarInTable(220);
        ;
        ;
        BaseCooldown = SetVarInTable(210);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        BaseCooldown = SetVarInTable(180);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void SpellUpdateTooltip()
    {
        ;
        ;
        ;
        SetSpellToolTipVar(0 + MoveSpeedMod, 1, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = SetVarInTable(210);
        ;
        SetSpellToolTipVar(0 + BaseCooldown, 2, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = SetVarInTable(210);
        ;
        SetSpellToolTipVar(0 + BaseCooldown, 1, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        ;
        ;
        ;
        SetSpellToolTipVar(0 + BaseCooldown, 1, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        Duration = SetVarInTable(4);
        ;
        SetSpellToolTipVar(0 + Duration, 1, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = SetVarInTable(300);
        ;
        SetSpellToolTipVar(0 + BaseCooldown, 2, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        OwnerLevel = GetLevel(Owner);
        ;
        ;
        ;
        ;
        SetSpellToolTipVar(0 + TotalMana, 1, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        SetSpellToolTipVar(0 + SecondaryMana, 2, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = SetVarInTable(180);
        ;
        SetSpellToolTipVar(0 + BaseCooldown, 3, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        OwnerLevel = GetLevel(Owner);
        ;
        ;
        ;
        ;
        SetSpellToolTipVar(0 + TotalHeal, 1, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        SetSpellToolTipVar(0 + SecondaryHeal, 2, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = SetVarInTable(270);
        ;
        SetSpellToolTipVar(0 + BaseCooldown, 3, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        Level = GetLevel(Owner);
        APMod = SetVarInTable(VALUE_BY_LEVEL);
        AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SetSpellToolTipVar(0 + AttackSpeedMod, 1, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        SetSpellToolTipVar(0 + APMod, 2, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = SetVarInTable(220);
        ;
        SetSpellToolTipVar(0 + BaseCooldown, 3, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = SetVarInTable(210);
        ;
        SetSpellToolTipVar(0 + BaseCooldown, 2, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        ;
        ;
        BaseCooldown = SetVarInTable(180);
        ;
        SetSpellToolTipVar(0 + BaseCooldown, 1, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = SetVarInTable(70);
        ;
        SetSpellToolTipVar(0 + BaseCooldown, 2, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        Duration = SetVarInTable(4);
        ;
        SetSpellToolTipVar(0 + Duration, 1, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = SetVarInTable(210);
        ;
        SetSpellToolTipVar(0 + BaseCooldown, 1, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        Level = GetLevel(Owner);
        HealthMod = SetVarInTable(VALUE_BY_LEVEL);
        SetSpellToolTipVar(0 + HealthMod, 1, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = SetVarInTable(540);
        ;
        SetSpellToolTipVar(0 + BaseCooldown, 2, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        OwnerLevel = GetLevel(Owner);
        ;
        ;
        SetSpellToolTipVar(0 + TotalDamage, 1, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = SetVarInTable(70);
        ;
        SetSpellToolTipVar(0 + BaseCooldown, 2, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        Level = GetLevel(Owner);
        igniteDamage = SetVarInTable(VALUE_BY_LEVEL);
        SetSpellToolTipVar(0 + igniteDamage, 1, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        BaseCooldown = SetVarInTable(180);
        ;
        SetSpellToolTipVar(0 + BaseCooldown, 2, 0 + SpellSlot, SpellSlots, SPELLBOOK_SUMMONER, Attacker);
        totalDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ;
        SetSpellToolTipVar(0 + Spell3Display, 1, 0 + SpellSlot, SpellSlots, SPELLBOOK_CHAMPION, Owner);
    }
    public void CanCast()
    {
        ExecutePeriodically(0.25, AvatarVars.LastTimeExecutedGarrison, true, () =>
        {
            AvatarVars.CanCastGarrison = SetVarInTable(false);
            ForEachUnitInTargetArea(Owner, Owner, 1250, "AffectEnemies AffectFriends AffectMinions NotAffectSelf AffectUseable AffectWards ", "OdinGuardianBuff", true, (Iterator) =>
            {
                AvatarVars.CanCastGarrison = SetVarInTable(true);
            });
        });
        ;
        ;
        ;
        ;
        ;
        ExecutePeriodically(0.25, AvatarVars.LastTimeExecutedPromote, true, () =>
        {
            AvatarVars.CanCastPromote = SetVarInTable(false);
            ForEachUnitInTargetArea(Owner, Owner, 1000, "AffectFriends AffectMinions NotAffectSelf ", default, true, (Iterator) =>
            {
                ;
            });
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ForNClosestUnitsInTargetArea(Owner, Owner, 400, "AffectEnemies AffectHeroes ", 1, true, "BlindMonkRMarker", (Iterator) =>
        {
            ;
        });
        ;
        ForNClosestUnitsInTargetArea(Owner, Owner, 750, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", 1, true, "BlindMonkEOne", (Iterator) =>
        {
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        temp = SetVarInTable(false);
        ForEachUnitInTargetAreaRandom(Owner, Owner, 1000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, 3, (Iterator) =>
        {
            Result = CanSeeTarget(Owner, Unit);
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        HealthCost = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ForEachUnitInTargetAreaRandom(Owner, Owner, 550, "AffectEnemies AffectHeroes ", default, true, 1, (Iterator) =>
        {
            ;
        });
        temp = SetVarInTable(false);
        ForEachUnitInTargetArea(Owner, Owner, 800, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "KennenMarkofStorm", true, (Iterator) =>
        {
            temp = SetVarInTable(true);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        temp = SetVarInTable(false);
        ForEachUnitInTargetAreaRandom(Owner, Owner, 350, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, 1, (Iterator) =>
        {
            temp = SetVarInTable(true);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ForEachUnitInTargetAreaRandom(Owner, Owner, 600, "AffectEnemies AffectHeroes ", default, true, 1, (Iterator) =>
        {
            ;
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        temp = SetVarInTable(false);
        ForEachUnitInTargetAreaRandom(Owner, Owner, 610, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, 1, (Iterator) =>
        {
            temp = SetVarInTable(true);
        });
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SelfDamage = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void BuffOnBeingSpellHit()
    {
        ;
        SetTriggerUnit(Attacker);
        Owner = SetBuffCasterUnit();
        ;
        SetTriggerUnit(Attacker);
        Owner = SetBuffCasterUnit();
        ;
        SetTriggerUnit(Attacker);
        Owner = SetBuffCasterUnit();
        ;
        SetTriggerUnit(Attacker);
        Owner = SetBuffCasterUnit();
        ;
    }
    public void BuffOnReconnect()
    {
        SpellBuffRemoveCurrent(Owner);
    }
    public void BuffOnBeingHit()
    {
        SpellBuffAdd(Owner, Owner, "OdinCombatActive", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        ;
        Caster = SetBuffCasterUnit();
        ;
        Caster = SetBuffCasterUnit();
        ;
        AttackerID = GetTeamID(default);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        NextBuffVars.ArmorCount = SetVarInTable(CharVars.ArmorCount);
        SpellBuffAdd(Owner, Owner, "PoppyDefenseOfDemacia", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        ;
        ;
        SpellEffectCreate(A, default, "poppydef_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_finger", default, Target, default, default, false, default, default, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonStats", 10, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, default, default, default, default);
        SpellBuffAdd(Owner, Owner, "PoppyParagonIcon", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void BuffOnKill()
    {
        SpellBuffAdd(Owner, Owner, "OdinCombatActive", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
        ;
        ;
        ;
        IncGold(Owner, 0 + VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.HPGain = SetVarInTable(HPGain);
        SpellBuffAdd(Owner, Owner, "EnrageMaxHP", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        IncGold(Owner, 2);
        Level = GetLevel(Owner);
        NextBuffVars.BaseManaRegen = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        SpellBuffAdd(Owner, Owner, "SwainDampeningFieldMana", 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
        SpellEffectCreate(Particle, default, "NeutralMonster_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        IncPAR(Owner, 0 + this.manaRegen);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        Level = GetLevel(Owner);
        ManaAmount = SetVarInTable(VALUE_BY_LEVEL);
        IncPAR(Owner, 0 + ManaAmount);
        HealAmount = SetVarInTable(VALUE_BY_LEVEL);
        IncHealth(Owner, 0 + HealAmount, Owner);
        SpellEffectCreate(Particle, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void BuffOnMiss()
    {
        SpellBuffAdd(Owner, Owner, "OdinCombatActive", 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
    }
    public void ChannelingUpdateActions()
    {
        ;
        ;
        ;
        ExecutePeriodically(0.5, this.DrainExecuted, false, () =>
        {
            ;
            ;
            ;
            ;
        });
        ;
        CastPosition = SetVarInTable(this.CastPosition);
        ;
        SpellEffectCreate(goodluck, default, "missFortune_ult_cas_muzzle_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_3", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(goodluck, default, "missFortune_ult_cas_muzzle_flash.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_CSTM_WEAPON_1", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(goodluck, default, "missFortune_left_ult_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "L_weapon", default, Owner, default, default, false, default, default, default, default, default, default);
        SpellEffectCreate(goodluck, default, "missFortune_ult_cas.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "R_weapon", default, Owner, default, default, false, default, default, default, default, default, default);
        Point1 = GetPointByUnitFacingOffset(Owner, 500, 15);
        Point2 = GetPointByUnitFacingOffset(Owner, 500, 9);
        Point3 = GetPointByUnitFacingOffset(Owner, 500, 3);
        Point4 = GetPointByUnitFacingOffset(Owner, 500, 357);
        Point5 = GetPointByUnitFacingOffset(Owner, 500, 351);
        Point6 = GetPointByUnitFacingOffset(Owner, 500, 345);
        Point7 = GetPointByUnitFacingOffset(Owner, 500, 350);
        Point8 = GetPointByUnitFacingOffset(Owner, 500, 345);
        Point9 = GetPointByUnitFacingOffset(Owner, 500, 340);
        Point0 = GetPointByUnitFacingOffset(Owner, 500, 0);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "MissFortuneWaves", 8, 1, 4, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
    }
    public void ChannelingUpdateStats()
    {
        ;
        ;
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        TargetTeam = GetTeamID(default);
        MyTeam = GetTeamID(default);
        ;
        ;
        ;
        ;
    }
    public void CharOnKillUnit()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        IncHealth(Owner, 0 + CharVars.HealAmount, Owner);
        SpellEffectCreate(Particle, default, "EternalThirst_buf.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
    }
    public void CharOnResurrect()
    {
        SpellBuffAdd(Owner, Owner, "DeathDefied", 1, 1, 30000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        SpellBuffAdd(Owner, Owner, "MonkeyKingDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "LuxDeathParticle", Owner, 0);
        ;
        ;
        ;
        ;
        IncPAR(Owner, 0 + Temp1);
        SpellBuffAdd(Owner, Owner, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.GhostAlive = SetVarInTable(false);
        DestroyMissile(CharVars.MissileID);
        SpellBuffAdd(Owner, Owner, "MonkeyKingDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Target, "XenZhaoPuncture", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        SpellBuffAdd(Owner, Target, "XenZhaoPuncture", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "YomuGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.GhostAlive = SetVarInTable(false);
        DestroyMissile(CharVars.MissileID);
        SpellBuffAdd(Owner, Owner, "ViktorPassiveAPPerLev", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "BrandPassiveSound", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, true, default);
        ;
        ;
        ;
        this.TickTock = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SkinID = GetSkinID(Owner);
        ;
        IncPAR(Owner, -100);
        IncPAR(Owner, -99);
        IncPAR(Owner, -100);
        IncPAR(Owner, 0 + this.CurrentPar);
        ;
        SpellBuffAdd(Owner, Owner, "OrianaGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.GhostAlive = SetVarInTable(false);
        DestroyMissile(CharVars.MissileID);
        SpellBuffRemove(Owner, "CassiopeiaDeathParticle", Owner, default);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, default, default, default);
        IncPAR(Owner, -99);
        UnlockAnimation(Owner, true);
        IncPAR(Owner, -99);
        PopAllCharacterData(Owner);
        SpellBuffAdd(Owner, Owner, "KogMawIcathianSurpriseReady", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        PopAllCharacterData(Owner);
        SpellBuffRemove(Owner, "CassiopeiaDeathParticle", Owner, default);
        SpellBuffAdd(Owner, Owner, "DeathDefied", 1, 1, 30000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "MonkeyKingDeathParticle", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Owner, Owner, "YomuGhostSelf", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Aura, 0, true, false, false, default);
        CharVars.GhostAlive = SetVarInTable(false);
        DestroyMissile(CharVars.MissileID);
        SpellBuffAdd(Owner, Owner, "KarmaChakraCharge", 3, 3, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_AmmoStack, 0, true, false, false, default);
        ;
        SpellBuffAdd(Owner, Owner, "KarmaTwoMantraParticle", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        IncPAR(Owner, 0 + Temp1);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        CharVars.SpectralCounter = SetVarInTable(0);
        SpellBuffAdd(Owner, Owner, "YorickRavenousLifesteal", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellBuffAdd(Owner, Owner, "XerathParticleBuff", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
    }
    public void CharOnLevelUpSpell()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ArmorBoost = SetVarInTable(VALUE_BY_LEVEL);
        AttackSpeedBoost = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        AttackSpeedBoost = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void CharOnMiss()
    {
        ;
        ;
    }
    public void CharOnNearbyDeath()
    {
        ;
        ;
        ;
        ;
        ;
    }
    public void OnActivate()
    {
        ;
        ;
        ;
        ;
        this.OwnerLevel = GetLevel(Owner);
        ;
        ;
        SpellEffectCreate(default, default, "Fervor", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, false, default, default, default, default, default, default);
        ;
        ;
        ;
        ;
        SetSpellToolTipVar(0 + CharVars.TearBonusMana, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpellToolTipVar(0 + CharVars.TearBonusMana, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        ;
        this.PhysicalDamageBonus = SetVarInTable(0);
        this.PercentLifeSteal = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        ;
        SetSpellToolTipVar(0 + CharVars.TearBonusMana, 1, 0 + Slot, InventorySlots, SPELLBOOK_CHAMPION, Attacker);
        ;
        ;
        ;
        ;
        this.CooldownResevoir = SetVarInTable(0);
        this.ExtraHP = SetVarInTable(0);
        this.ExtraRegen = SetVarInTable(0);
        this.CooldownResevoir = SetVarInTable(0);
        this.BonusHealth = SetVarInTable(0);
        this.BonusMana = SetVarInTable(0);
        this.BonusAbilityPower = SetVarInTable(0);
        this.OwnerLevel = GetLevel(Owner);
        this.CooldownResevoir = SetVarInTable(0);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        this.CooldownResevoir = SetVarInTable(1);
        ;
        ;
        this.CooldownResevoir = SetVarInTable(2);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void ItemOnPreDamage()
    {
        SpellBuffAdd(Owner, Owner, "BootsOfMobilityDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
        TeamID = GetTeamID(default);
        ;
    }
    public void ItemOnPreDealDamage()
    {
        SpellBuffAdd(Owner, Owner, "BootsOfMobilityDebuff", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        ;
    }
    public void OnDeactivate()
    {
        ;
        ;
        ;
    }
    public void ItemOnHitUnit()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "Rageblade", 8, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, default, default, default, default);
        ;
        ;
    }
    public void ItemOnKill()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void ItemOnDeath()
    {
        SpellBuffRemove(Owner, "SunfireCloakParticle", Owner, default);
        ;
        ;
        this.PhysicalDamageBonus = SetVarInTable(0);
        this.PercentLifeSteal = SetVarInTable(0);
        ;
        ;
        ;
        ;
    }
    public void UpdateAura()
    {
        DefUpdateAura(Owner, 200, UNITSCAN_Friends, "Fervor");
    }
    public void ItemOnDealDamage()
    {
        ;
        ;
    }
    public void ItemOnBeingHit()
    {
        ;
        ;
    }
    public void BuffOnMoveEnd()
    {
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        this.WillRemove = SetVarInTable(true);
        SpellBuffRemove(Owner, "BlindMonkWOneDash", Owner, default);
        this.WillRemove = SetVarInTable(true);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemove(Owner, "LeapStrike", Attacker, 0);
        SpellBuffClear(Owner, "AhriTumbleKick");
        SpellBuffRemove(Owner, "UnstoppableForceMarker", Owner, default);
        SpellBuffRemoveCurrent(Owner);
        TeamID = GetTeamID(default);
        ForEachUnitInTargetArea(Owner, Owner, 200, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemove(Owner, "IreliaGatotsuDash", Owner, 0);
        SpellBuffClear(Owner, "MonkeyKingNimbusKickClone");
        SpellBuffClear(Owner, "MonkeyKingNimbusKick");
        Caster = SetBuffCasterUnit();
        SpellBuffRemove(Owner, "XenZhaoSweep", Caster, 0);
        SpellBuffRemoveCurrent(Owner);
        ;
        this.willRemove = SetVarInTable(true);
        ForEachUnitInTargetArea(Owner, Owner, 260, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ;
        });
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffClear(Owner, "AkaliShadowDanceKick");
        ;
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SpellBuffClear(Owner, "RivenSword");
        SpellBuffClear(Owner, "RivenTriCleaveDamage");
        SpellBuffClear(Owner, "RivenTriCleaveDamage");
        CancelAutoAttack(Owner, true);
        SpellBuffRemoveCurrent(Owner);
        SpellEffectRemove(this.ShinyParticle);
        StopMove(Owner);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        SpellBuffAdd(Owner, Owner, "RenektonUnlockAnimationAttack", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "RenektonSliceAndDice", Owner, 0);
        SpellBuffRemoveCurrent(Owner);
        ;
        SpellBuffRemove(Owner, "ShyvanaTransformLeap", Owner, 0);
        SpellEffectRemove(this.ShinyParticle);
        StopMove(Owner);
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        SpellBuffAdd(Owner, Owner, "RenektonUnlockAnimationAttack", 1, 1, 0.01, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemove(Owner, "RenektonSliceAndDice", Owner, 0);
        SpellBuffRemoveCurrent(Owner);
        ;
        this.WillRemove = SetVarInTable(true);
        SpellBuffRemove(Owner, "NocturneParanoiaDash", Owner, 0);
        TeamOfOwner = GetTeamID(default);
        ;
        ;
        SpellBuffClear(Owner, "FizzJump");
        SpellBuffClear(Owner, "FizzJumpBuffer");
        SpellBuffClear(Owner, "FizzJumpBuffered");
        SpellEffectCreate(temp, default, "Leona_ZenithBlade_arrive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, true, default, default, false, false, default, default);
        Caster = SetBuffCasterUnit();
        ;
        ;
        UnlockAnimation(Owner, true);
        SpellBuffClear(Owner, "FizzPiercingStrike");
        TeamID = GetTeamID(default);
        SpellBuffRemove(Owner, "GragasBodySlam", Owner, 0);
        ;
        SpellEffectCreate(hi, default, "gragas_bodySlam_cas_03.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        NumUnits = SetVarInTable(0);
        AttackDamage = GetTotalAttackDamage(Owner);
        ;
        ;
        ForEachUnitInTargetArea(Attacker, Attacker, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ForEachUnitInTargetArea(Attacker, Attacker, 250, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ;
            ;
        });
        SpellBuffRemove(Owner, "Headbutt", Attacker, 0);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemove(Owner, "VayneTumble", Owner, 0);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemoveCurrent(Owner);
    }
    public void BuffOnMoveSuccess()
    {
        SpellEffectCreate(this.partname, default, "leBlanc_slide_impact_self.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        CurrentPosition = GetUnitPosition(Owner);
        CasterID = GetTeamID(default);
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellEffectCreate(aoehit, default, "leBlanc_slide_impact_unit_tar.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            ApplyDamage(Owner, Unit, 0 + this.AEDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.6, 1, false, false, Owner);
            ;
            ;
        });
        CurrentPosition = GetUnitPosition(Owner);
        SpellEffectCreate(this.partname, default, "leBlanc_slide_impact_self_ult.troy", default, TEAM_NEUTRAL, 900, 0, TEAM_UNKNOWN, Owner, false, Nothing, default, Owner, Target, default, default, true, false, false, false, false, default, default);
        ;
        CasterID = GetTeamID(default);
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellEffectCreate(aoehit, default, "leBlanc_slide_impact_unit_tar.troy", default, CasterID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            ;
            ;
            ;
            ;
            ;
        });
        Caster = SetBuffCasterUnit();
        BaseDamage = SetVarInTable(this.BaseDamage);
        ;
        ApplyDamage(Owner, Caster, 0 + BaseDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.8, 0, false, false, Owner);
        SpellBuffAdd(Owner, Caster, "MaokaiUnstableGrowthRoot", 1, 1, 0 + this.RootDuration, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, true, false, default);
        SpellBuffRemoveCurrent(Owner);
        ;
        Caster = SetBuffCasterUnit();
        ;
        ;
        ;
        ;
        ;
        CasterID = GetTeamID(default);
        ;
        ;
        ;
        SpellBuffAdd(Owner, Caster, "BlindMonkQTwoDashParticle", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Owner, Caster, 0 + this.DamageVar, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELL, 1, 0, 0, false, true, Owner);
        SpellBuffRemoveCurrent(Owner);
        ;
        Caster = SetBuffCasterUnit();
        NextBuffVars.ShieldAbsorb = SetVarInTable(this.ShieldAbsorb);
        SpellBuffAdd(Owner, Owner, "BlindMonkWOneShield", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        SpellBuffAdd(Owner, Caster, "BlindMonkWOneShield", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        Caster = SetBuffCasterUnit();
        ;
        ;
        ;
        Attacker = SetBuffCasterUnit();
        ;
        Count = SetVarInTable(3);
        OwnerPos = GetUnitPosition(Owner);
        ;
        ForNClosestVisibleUnitsInTargetArea(Owner, Owner, 700, "AffectEnemies AffectHeroes ", 3, true, default, (Iterator) =>
        {
            SpellCast(Owner, Unit, default, default, true, 5, ExtraSlots, 0 + Level, true, true, false, true, false, OwnerPos);
            ;
        });
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        NextBuffVars.StunDuration = SetVarInTable(this.StunDuration);
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            SpellEffectCreate(TargetParticle, default, "UnstoppableForce_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, default, default, default, default, default, default);
            ;
            ApplyDamage(Owner, Unit, 0 + this.Damage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 1, 1, false, false, Attacker);
            SpellBuffAdd(Owner, Unit, "UnstoppableForceStun", 1, 1, 1.5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Stun, 0, true, false, default, default);
        });
        Caster = SetBuffCasterUnit();
        ;
        Caster = SetBuffCasterUnit();
        ;
        SpellBuffAdd(Owner, Caster, "IreliaGatotsuDashParticle", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Owner, Caster, 0 + this.DamageVar, PHYSICAL_DAMAGE, DAMAGESOURCE_ATTACK, 1, 0, 1, false, false, Attacker);
        this.WillRemove = SetVarInTable(true);
        ;
        Caster = SetBuffCasterUnit();
        ;
        SpellBuffAdd(Owner, Caster, "MonkeyKingNimbusKickFX", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Owner, Caster, 0 + this.DamageVar, TRUE_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 1, false, false, Attacker);
        Caster = SetBuffCasterUnit();
        ;
        SpellBuffAdd(Owner, Caster, "MonkeyKingNimbusKickFX", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Owner, Caster, 0 + this.DamageVar, PHYSICAL_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0, 0, false, false, Owner);
        NextBuffVars.AttackSpeedVar = SetVarInTable(this.AttackSpeedVar);
        SpellBuffAdd(Owner, Owner, "MonkeyKingNimbusAS", 1, 1, 4, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        Caster = SetBuffCasterUnit();
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Owner, Caster, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Owner, Unit, 0 + this.DamageDealt, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Owner);
            SpellBuffAdd(Owner, Unit, "Slow", 100, 1, 1.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        ;
        ;
        TeamID = GetTeamID(default);
        OwnerSkinID = GetSkinID(Owner);
        ;
        ;
        ForEachUnitInTargetArea(Owner, Owner, 300, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ApplyDamage(Owner, Unit, 0 + this.Damage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.8, 1, false, false, Attacker);
            SpellEffectCreate(b, default, "tristana_rocketJump_unit_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            SpellBuffAdd(Owner, Unit, "RocketJumpSlow", 1, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
        });
        Caster = SetBuffCasterUnit();
        ;
        SpellBuffAdd(Owner, Caster, "AkaliShadowDanceKickParticle", 1, 1, 0.1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ApplyDamage(Owner, Caster, 0 + this.DamageVar, MAGIC_DAMAGE, DAMAGESOURCE_SPELL, 1, 0.5, 1, false, false, Attacker);
        ;
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        TeamID = GetTeamID(default);
        FocalPoint = GetPointByUnitFacingOffset(Owner, 100, 0);
        ;
        ;
        ForNClosestUnitsInTargetArea(Owner, Owner, 250, "AffectEnemies AffectHeroes ", 1, true, default, (Iterator) =>
        {
            IssueOrder(Owner, AI_ATTACKTO, default, Unit);
        });
        CenterPos = GetUnitPosition(Owner);
        teamID = GetTeamID(default);
        SpellEffectCreate(groundhit, default, "shyvana_ult_impact_01.troy", default, teamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "weapon_C", default, Target, default, default, true, false, false, false, false, default, default);
        ForNClosestUnitsInTargetArea(Owner, Owner, 125, "AffectEnemies AffectHeroes ", 1, true, default, (Iterator) =>
        {
            FaceDirection(Owner, Unit);
        });
        TeamID = GetTeamID(default);
        ;
        SpellEffectCreate(hi, default, "nidalee_cougarPounce_land.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, false, false, false, false, default, default);
        ForEachUnitInTargetArea(Owner, Owner, 225, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellEffectCreate(bye, default, "nidalee_cougar_pounce_tar.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Unit, default, default, Unit, default, default, true, false, false, false, false, default, default);
            ApplyDamage(Attacker, Unit, 0 + CharVars.PounceDamage, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.4, 1, false, false, Attacker);
        });
        ;
        TeamID = GetTeamID(default);
        DestroyMissileForTarget(Owner);
        SpellEffectCreate(Temp, default, "fizz_playfultrickster_idle_sound.troy", default, TeamID ?? TEAM_UNKNOWN, 10, 0, TEAM_UNKNOWN, Owner, false, Owner, "root", Owner, Owner, default, default, true, false, false, false, false, default, default);
        ;
        TeamID = GetTeamID(default);
        ;
        ;
        ;
        ;
        Caster = SetBuffCasterUnit();
        TargetPos = GetPointByUnitFacingOffset(Owner, 275, 0);
        SpellBuffClear(Owner, "FizzPiercingStrike");
        ;
        ;
        ;
        CancelAutoAttack(Owner, false);
        UnlockAnimation(Owner, false);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        Attacker = SetBuffCasterUnit();
        ForEachUnitInTargetArea(Owner, Owner, 400, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", "AlistarHeadbuttMarker", true, (Iterator) =>
        {
            ;
        });
        ;
        Caster = SetBuffCasterUnit();
        TeamID = GetTeamID(default);
        DistanceVar = DistanceBetweenObjectAndPoint(Owner, this.NewTargetPos);
        ;
        TeamID = GetTeamID(default);
        Caster = SetBuffCasterUnit();
        ;
        ;
    }
    public void BuffOnLevelUpSpell()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        HealthPerStack = SetVarInTable(VALUE_BY_LEVEL);
        ;
        SetBuffToolTipVar(1, 0 + BonusHealth);
    }
    public void CharOnLevelUp()
    {
        Level = GetLevel(Owner);
        CharVars.IlluminateDamage = SetVarInTable(VALUE_BY_LEVEL);
        IncPermanentFlatPARPoolMod(Owner, 30);
        IncPAR(Owner, -30);
        Level = GetLevel(Owner);
        CharVars.AutoattackRage = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        Level = GetLevel(Owner);
        CharVars.RegenValue = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Owner, Owner, "TrundleDiseaseOverseer", 1, 1, 25000, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, default, default);
    }
    public void ChannelingStop()
    {
        SpellBuffRemove(Owner, "Pantheon_HeartseekerChannel", Owner, 0);
    }
    public void BuffOnLevelUp()
    {
        Level = GetLevel(Owner);
        this.damageThreshold = SetVarInTable(VALUE_BY_LEVEL);
        Level = GetLevel(Owner);
        ;
        ;
        ;
        baseHealth = SetVarInTable(260);
        ;
        ;
        ;
        ;
        SetSpellToolTipVar(0 + totalHealth, 2, 0, SpellSlots, SPELLBOOK_CHAMPION, Attacker);
        OwnerLevel = GetLevel(Owner);
        ;
        Level = GetLevel(Owner);
        HealthPerc = SetVarInTable(VALUE_BY_LEVEL);
        SetBuffToolTipVar(1, 0 + HealthPerc);
        Level = GetLevel(Owner);
        this.manaRegen = SetVarInTable(VALUE_BY_LEVEL);
        SetBuffToolTipVar(1, 0 + this.manaRegen);
        Level = GetLevel(Owner);
        DamageAmp = SetVarInTable(VALUE_BY_LEVEL);
        SetBuffToolTipVar(1, 0 + DamageAmp);
        Level = GetLevel(Owner);
        RebirthArmorMod = SetVarInTable(VALUE_BY_LEVEL);
        SetBuffToolTipVar(1, 0 + RebirthArmorMod);
        Level = GetLevel(Owner);
        RebirthArmorMod = SetVarInTable(VALUE_BY_LEVEL);
        SetBuffToolTipVar(1, 0 + RebirthArmorMod);
        Level = GetLevel(Owner);
        newVampPercent = SetVarInTable(VALUE_BY_LEVEL);
        ;
        Level = GetLevel(Owner);
        this.Defense = SetVarInTable(VALUE_BY_LEVEL);
        SetBuffToolTipVar(1, 0 + this.Defense);
        Level = GetLevel(Owner);
        ;
        ;
        ;
        ;
        ;
    }
    public void SpellOnMissileEnd()
    {
        ;
        NextBuffVars.LSCooldown = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.Position = SetVarInTable(MissileEndPosition);
        SpellBuffAdd(Attacker, Attacker, default, 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0.25, true, false, false, default);
        ;
        baseDamageBlock = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        ;
        NextBuffVars.DamageBlock = SetVarInTable(DamageBlock);
        SpellBuffAdd(Attacker, Attacker, "LuxPrismaticWaveShieldSelf", 1, 1, 3, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        MissileEndPosition = ModifyPosition(default, default, default);
        ForEachUnitInTargetArea(Attacker, MissileEndPosition, 100, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            NextBuffVars.OrbofDeceptionIsActive = SetVarInTable(CharVars.OrbofDeceptionIsActive);
            SpellBuffAdd(Attacker, Unit, "AhriOrbDamage", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        ;
        ForEachUnitInTargetArea(Owner, MissileEndPosition, 100, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            NextBuffVars.OrbofDeceptionIsActive = SetVarInTable(CharVars.OrbofDeceptionIsActive);
            SpellBuffAdd(Attacker, Unit, "AhriOrbDamageSilence", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
        SpellCast(Owner, Owner, default, default, true, 1, ExtraSlots, 0 + Level, true, true, false, true, false, MissileEndPosition);
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        TeamID = GetTeamID(default);
        ;
        ;
        ForEachUnitInTargetArea(Owner, MissileEndPosition, 230, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, false, (Iterator) =>
        {
            ;
            ApplyDamage(Attacker, Unit, 0 + VALUE_BY_LEVEL, MAGIC_DAMAGE, DAMAGESOURCE_SPELLAOE, 1, 0.7, 1, false, false, Attacker);
            SpellEffectCreate(TargetVFX1, default, "galio_concussiveBlast_unit_tar.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, "head", Unit, Unit, default, default, false, default, default, false, false, default, default);
            SpellEffectCreate(TargetVFX2, default, "galio_concussiveBlast_unit_tar_02.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Unit, default, Unit, Unit, default, default, false, default, default, false, false, default, default);
            SpellBuffAdd(Attacker, Unit, default, 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, true, false, default);
        });
        NextBuffVars.TargetPos = SetVarInTable(MissileEndPosition);
        SpellBuffAdd(Owner, Owner, "AsheSpiritOfTheHawkBubble", 1, 1, 5, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, default, default);
        CorrectSpell = SetVarInTable(false);
        Duration = GetBuffRemainingDuration(Owner, "OrianaIzuna");
        ;
        ;
        ;
        ;
        ;
        CorrectSpell = SetVarInTable(false);
        Duration = GetBuffRemainingDuration(Owner, "OrianaIzuna");
        ;
        ;
        ;
        ;
        DestroyMissile(CharVars.MissileID);
        CorrectSpell = SetVarInTable(false);
        Duration = GetBuffRemainingDuration(Owner, "OrianaRedact");
        ;
        ;
        ;
        ;
        DestroyMissile(CharVars.MissileID);
        CorrectSpell = SetVarInTable(false);
        Duration = GetBuffRemainingDuration(Owner, "OrianaReturn");
        ;
        ;
        ;
        CorrectSpell = SetVarInTable(false);
        Duration = GetBuffRemainingDuration(Owner, "OrianaDissonance");
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        OwnerPos = GetUnitPosition(Owner);
        ;
        ForNClosestUnitsInTargetArea(Owner, Owner, 3000, "AffectEnemies AffectNeutral AffectMinions AffectHeroes AffectDead ", 1, true, "LeonaZenithBladeBuffOrder", (Iterator) =>
        {
            FaceDirection(Owner, Unit);
            ;
            ;
            TargetPos = GetPointByUnitFacingOffset(Owner, 0 + finalDistance, 0);
            SpellBuffAdd(Owner, Unit, "LeonaZenithBladeRoot", 1, 1, 0.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Net, 0, true, false, false, default);
            NextBuffVars.Destination = SetVarInTable(TargetPos);
            NextBuffVars.Distance = SetVarInTable(Distance);
            SpellBuffAdd(Unit, Owner, default, 1, 1, 1.25, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
            SpellEffectCreate(ar1, default, "Leona_ZenithBlade_trail.troy", default, TeamID ?? TEAM_UNKNOWN, 225, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Target, default, default, true, default, default, false, false, default, default);
        });
        ;
        TeamIDAttacker = GetTeamID(default);
        TeamIDTarget = GetTeamID(default);
        Other1 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", CharVars.BriggsCastPos, TeamIDAttacker ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, false, Owner, default);
        FaceDirection(Other1, MissileEndPosition);
        SpellBuffAdd(Attacker, Other1, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        Distance = DistanceBetweenObjectAndPoint(Other1, MissileEndPosition);
        ;
        SpawnPos = GetPointByUnitFacingOffset(Other1, 0 + Distance, 0);
        Other3 = SpawnMinion("SpellBook1", "SpellBook1", "idle.lua", SpawnPos, TeamIDAttacker ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Owner, default);
        FaceDirection(Other3, MissileEndPosition);
        Point1 = GetPointByUnitFacingOffset(Other3, 400, 30);
        Point2 = GetPointByUnitFacingOffset(Other3, 400, -30);
        Point3 = GetPointByUnitFacingOffset(Other3, 400, 0);
        Other2 = SpawnMinion("ParticleTarget", "SpellBook1", "idle.lua", Point3, TeamIDAttacker ?? TEAM_CASTER, false, true, false, true, true, true, 0, false, true, Owner, default);
        FaceDirection(Other2, Other1);
        ShockwaveTarget = GetPointByUnitFacingOffset(Other3, 700, 0);
        SpellBuffAdd(Attacker, Other2, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Attacker, Nothing, Point1, Point1, true, 5, ExtraSlots, 1, true, true, false, false, false, SpawnPos);
        SpellCast(Attacker, Nothing, Point2, Point2, true, 5, ExtraSlots, 1, true, true, false, false, false, SpawnPos);
        SpellCast(Attacker, Nothing, Point3, Point3, true, 6, ExtraSlots, 1, true, true, false, false, false, SpawnPos);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellCast(Attacker, Target, MissileEndPosition, MissileEndPosition, true, 2, ExtraSlots, 0 + 1, false, true, false, true, false, Other3);
        TeamID = GetTeamID(default);
        Other3 = SpawnMinion("Test", "TestCubeRender", "idle.lua", MissileEndPosition, TeamID ?? TEAM_UNKNOWN, false, true, false, true, true, true, 0, false, true, Nothing, default);
        ;
        ;
        NextBuffVars.DamagePerTick = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        SpellBuffAdd(Attacker, Other3, default, 1, 1, 7, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffAdd(Attacker, Other3, "ExpirationTimer", 1, 1, 9, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
    }
    public void BuffOnPreAttack()
    {
        ;
        SkipNextAutoAttack(Owner);
        SpellCast(Owner, Target, default, default, false, 0, ExtraSlots, 0 + Level, false, false, false, false, false, default);
        SpellBuffRemove(Owner, "GarenSlash3", Owner, 0);
        ;
        ;
        this.lastAttackTime = GetGameTime();
        this.lastAttackTime = GetGameTime();
        this.lastAttackTime = GetGameTime();
        ;
        ;
        ;
        ;
        RemoveOverrideAutoAttack(Owner, false);
        ;
        ;
        NextBuffVars.MoveSpeedMod = SetVarInTable(this.MoveSpeedMod);
        NextBuffVars.TeamID = SetVarInTable(this.TeamID);
        NextBuffVars.BreakDamage = SetVarInTable(0);
        SpellBuffAdd(Attacker, Owner, "WasStealthed", 1, 1, 1, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        SkipNextAutoAttack(Owner);
        SpellCast(Owner, Target, default, default, false, 0, ExtraSlots, 0 + Level, false, false, false, false, false, default);
        SpellBuffRemove(Owner, "LeonaShieldOfDaybreak", Owner, 0);
        ;
        ;
        ;
        RemoveOverrideAutoAttack(Owner, false);
        ;
        ;
        this.ID = PushCharacterFade(Owner, 1, default, this.ID);
        this.WillFade = SetVarInTable(true);
        this.BuffAdded = SetVarInTable(false);
        SpellBuffRemoveCurrent(Owner);
        NextBuffVars.CritDmgBonus = SetVarInTable(this.CritDmgBonus);
        SpellBuffAdd(Owner, Owner, "DeceiveCritBonus", 1, 1, 10, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_CombatEnchancer, 0, true, false, false, default);
        ;
        ;
    }
    public void BuffOnLaunchAttack()
    {
        SpellBuffRemoveCurrent(Owner);
        SpellBuffAdd(Owner, Owner, "CamouflageCheck", 1, 1, 2, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemoveCurrent(Owner);
        SpellBuffRemove(Owner, "Ricochet", Owner, 0);
        SpellBuffRemoveCurrent(Owner);
    }
    public void BuffOnMoveFailure()
    {
        Count = SetVarInTable(3);
        OwnerPos = GetUnitPosition(Owner);
        ;
        ForNClosestVisibleUnitsInTargetArea(Owner, Owner, 700, "AffectEnemies AffectHeroes ", 3, true, default, (Iterator) =>
        {
            SpellCast(Owner, Unit, default, default, true, 5, ExtraSlots, 0 + Level, true, true, false, true, false, OwnerPos);
            ;
        });
        ;
        ;
        ;
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        ;
        FocalPoint = GetPointByUnitFacingOffset(Owner, 100, 0);
        TeamID = GetTeamID(default);
        ;
        SpellBuffClear(Owner, "FizzJumpBuffer");
        SpellBuffClear(Owner, "FizzJumpBuffered");
        SetSpell(Owner, 2, SpellSlots, SPELLBOOK_CHAMPION, "FizzJump");
        ;
        ;
        BaseCD = SetVarInTable(VALUE_BY_LEVEL);
        ;
        ;
        SetSlotSpellCooldownTimeVer2(0 + NewCD, 2, SpellSlots, SPELLBOOK_CHAMPION, Owner, false);
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        UnlockAnimation(Owner, true);
        SpellBuffRemoveCurrent(Owner);
        ;
        ;
        UnlockAnimation(Owner, true);
        SpellBuffClear(Owner, "FizzPiercingStrike");
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
    }
    public void SpellOnMissileUpdate()
    {
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        TargetPos = GetCastSpellTargetPos();
        NextBuffVars.MoveSpeedMod = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        Other3 = SpawnMinion("RighteousGust", "TestCube", "idle.lua", MissilePosition, TeamID ?? TEAM_UNKNOWN, false, false, false, false, false, true, 100, false, true, Nothing, default);
        FaceDirection(Other3, TargetPos);
        SpellBuffAdd(Owner, Other3, default, 1, 1, 5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ForEachUnitInTargetArea(Owner, MissilePosition, 275, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
        });
        ;
        NextBuffVars.HastePercent = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        NextBuffVars.BonusAD = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        TeamID = GetTeamID(default);
        GetGroundHeight(MissilePosition, GroundHeight);
        GroundHeight = ModifyPosition(default, default, default);
        Other3 = SpawnMinion("DarkPath", "testcube", "idle.lua", GroundHeight, TeamID ?? TEAM_CASTER, true, true, true, true, false, true, 0, false, true, Nothing, default);
        TargetPos = GetCastSpellTargetPos();
        FaceDirection(Other3, TargetPos);
        SpellBuffAdd(Owner, Other3, default, 1, 1, 4, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        NextBuffVars.SlowPercent = SetVarInTable(VALUE_BY_LEVEL ?? 0);
        GetGroundHeight(MissilePosition, GroundHeight);
        GroundHeight = ModifyPosition(default, default, default);
        NextBuffVars.targetPos = SetVarInTable(GroundHeight);
        SpellBuffAdd(Owner, Owner, "KogMawVoidOozeMissile", 100, 1, 3, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, false, false, false, default);
        TeamOfOwner = GetTeamID(default);
        GetGroundHeight(MissilePosition, GroundHeight);
        GroundHeight = ModifyPosition(default, default, default);
        NextBuffVars.MissilePosition = SetVarInTable(GroundHeight);
        SpellBuffAdd(Attacker, Attacker, "RumbleCarpetBombMissile", 5, 1, 0.25, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Internal, 0, false, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "RumbleCarpetBomb", 1, 1, 4.5, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, false, false, false, default);
        SpellBuffAdd(Attacker, Attacker, "RumbleCarpetBombCounter", 6, 1, 4.5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Internal, 0, true, false, false, default);
        ;
        ;
        ;
        RumbleSkinID = GetSkinID(Attacker);
        SpellEffectCreate(this.Particle, default, "rumble_ult_placeholder_01.troy", default, TeamOfOwner ?? TEAM_UNKNOWN, 200, 0, TEAM_UNKNOWN, Nothing, false, Nothing, default, MissilePosition, Target, default, default, true, default, default, false, false, default, default);
        ;
        ;
        ;
        ForEachUnitInTargetArea(Attacker, MissilePosition, 205, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            ;
            ;
        });
    }
    public void BuffOnResurrect()
    {
        ;
        SpellEffectCreate(this.Particle1, default, "Ahri_Passive.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, "BUFFBONE_GLB_WEAPON_1", default, Owner, default, default, false, false, false, false, false, default, default);
        ;
        SpellBuffClear(Owner, "FizzSharkDissappear");
        SealSpellSlot(0, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(1, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(2, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
        SealSpellSlot(3, SpellSlots, Owner, false, SPELLBOOK_CHAMPION);
    }
    public void BuffOnUpdateAmmo()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void BuffOnLaunchMissile()
    {
        ;
        ;
        ;
        ;
        SpellBuffRemove(Owner, "TwitchSprayAndPray", Owner, default);
        ;
        ;
        this.AlphaStrikeLaunched = SetVarInTable(true);
        SealSpellSlot(0, SpellSlots, Owner, true, SPELLBOOK_CHAMPION);
        ;
        CharVars.MissileID = SetVarInTable(missileId);
        CharVars.GhostAlive = SetVarInTable(true);
        MissilePosition = GetMissilePosFromID(missileId ?? 0);
        this.MissilePosition = SetVarInTable(MissilePosition ?? 0);
        CharVars.MissileID = SetVarInTable(missileId);
        CharVars.GhostAlive = SetVarInTable(true);
        MissilePosition = GetMissilePosFromID(missileId ?? 0);
        this.MissilePosition = SetVarInTable(MissilePosition ?? 0);
        CharVars.MissileID = SetVarInTable(missileId);
        CharVars.GhostAlive = SetVarInTable(true);
        CharVars.MissileID = SetVarInTable(missileId);
        CharVars.GhostAlive = SetVarInTable(true);
        CharVars.MissileID = SetVarInTable(missileId);
        CharVars.GhostAlive = SetVarInTable(true);
        CharVars.UltMissileID = SetVarInTable(missileId);
        SpellBuffClear(Owner, "FizzMarinerDoom");
        CharVars.MISSILEID = SetVarInTable(missileId);
        CharVars.MISSILEID2 = SetVarInTable(missileId);
    }
    public void BuffOnCollision()
    {
        ;
        StartTrackingCollisions(Owner, true);
        ;
        ;
        ;
        ;
    }
    public void BuffOnAssist()
    {
        ;
        SpellEffectCreate(Placeholder, default, "katarina_spell_refresh_indicator.troy", default, TEAM_UNKNOWN, 0, 0, TEAM_UNKNOWN, Owner, false, Owner, default, default, Owner, default, default, false, default, default, default, default, default, default);
        IncGold(Owner, 25);
        SetSlotSpellCooldownTime(Owner, 0, SPELLBOOK_CHAMPION, SpellSlots, 0);
        SetSlotSpellCooldownTime(Owner, 1, SPELLBOOK_CHAMPION, SpellSlots, 0);
        SetSlotSpellCooldownTime(Owner, 2, SPELLBOOK_CHAMPION, SpellSlots, 0);
        ;
        ;
        SetSlotSpellCooldownTime(Owner, 3, SPELLBOOK_CHAMPION, SpellSlots, 0 + DLCooldown);
        SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        ;
        ;
        SpellBuffAdd(Owner, Owner, "AkaliShadowDance", 3, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "LeviathanStats", 20, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, true, false, default, default);
        SpellBuffAdd(Owner, Owner, "MejaisStats", 20, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, default, default, default, default);
        ;
        ;
        ;
        SpellBuffAdd(Owner, Owner, "MuramasaStats", 20, 1, 25000, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_Aura, 0, default, default, default, default);
    }
    public void AdjustCastInfo()
    {
        ;
    }
    public void CharOnAssistUnit()
    {
        ;
    }
    public void BuffOnMissileEnd()
    {
        ;
        ;
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        TargetPos = SetVarInTable(this.TargetPos);
        Other3 = SpawnMinion("HiddenMinion", "OlafAxe", "idle.lua", TargetPos, TeamID ?? TEAM_ORDER, false, true, false, true, true, true, 0, default, false, Owner, default);
        FacingPos = SetVarInTable(this.FacingPos);
        FaceDirection(Other3, FacingPos);
        ;
        ;
        ;
        ;
        SpellBuffAdd(Attacker, Other3, "OlafAxeExpirationTimer", 1, 1, 0 + DurationVar, NextBuffVars, BUFF_REPLACE_EXISTING, BUFF_Internal, 0, true, false, false, default);
        ;
        NextBuffVars.MovementSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        NextBuffVars.AttackSpeedMod = SetVarInTable(VALUE_BY_LEVEL);
        ForEachUnitInTargetArea(Attacker, Other3, 100, "AffectEnemies AffectNeutral AffectMinions AffectHeroes ", default, true, (Iterator) =>
        {
            ;
            SpellBuffAdd(Attacker, Unit, "olafSlow", 100, 1, 2.5, NextBuffVars, BUFF_STACKS_AND_OVERLAPS, BUFF_Slow, 0, true, false, false, default);
            SpellBuffAdd(Attacker, Unit, "OlafAxeThrowDamage", 1, 1, 0.25, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        });
    }
    public void CharOnReconnect()
    {
        teamID = GetTeamID(default);
        ;
        ;
        ;
    }
    public void BuffOnZombie()
    {
        KogMawSkinID = GetSkinID(Owner);
        ;
        ;
        ;
        ;
        StopChanneling(Attacker, ChannelingStopCondition_Cancel, ChannelingStopSource_Die);
        SpellBuffAdd(Owner, Attacker, "YorickUltPetActive", 1, 1, 10, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
        SpellBuffRemoveType(Owner, BUFF_Suppression);
        SpellBuffRemoveType(Owner, BUFF_Blind);
        SpellBuffRemoveType(Owner, BUFF_Poison);
        SpellBuffRemoveType(Owner, BUFF_CombatDehancer);
        SpellBuffRemoveType(Owner, BUFF_Stun);
        SpellBuffRemoveType(Owner, BUFF_Invisibility);
        SpellBuffRemoveType(Owner, BUFF_Silence);
        SpellBuffRemoveType(Owner, BUFF_Taunt);
        SpellBuffRemoveType(Owner, BUFF_Polymorph);
        SpellBuffRemoveType(Owner, BUFF_Snare);
        SpellBuffRemoveType(Owner, BUFF_Slow);
        SpellBuffRemoveType(Owner, BUFF_Damage);
        SpellBuffRemoveType(Owner, BUFF_SpellImmunity);
        SpellBuffRemoveType(Owner, BUFF_PhysicalImmunity);
        SpellBuffRemoveType(Owner, BUFF_Invulnerability);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_Fear);
        SpellBuffRemoveType(Owner, BUFF_Net);
        SpellBuffRemoveType(Owner, BUFF_Sleep);
        SpellBuffRemoveType(Owner, BUFF_CombatEnchancer);
        ;
        ;
        ;
        TeamID = GetTeamID(default);
        ;
        ;
    }
    public void ItemOnSpellCast()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void ItemOnAssist()
    {
        ;
    }
    public void BuffOnCollisionTerrain()
    {
        this.Collide = SetVarInTable(true);
        SpellBuffRemoveCurrent(Owner);
    }
    public void BuffOnPreMitigationDamage()
    {
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
    }
    public void ItemOnBeingDodged()
    {
        SpellBuffAdd(Owner, Owner, "Rageblade", 8, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, default, default, default, default);
        ;
    }
    public void ItemOnMiss()
    {
        SpellBuffAdd(Owner, Owner, "Rageblade", 8, 1, 5, NextBuffVars, BUFF_STACKS_AND_RENEWS, BUFF_CombatEnchancer, 0, default, default, default, default);
    }
    public void BuffBeingDodged()
    {
        ;
        DebugSay(Owner, "Gasp?", default);
    }
    public void CharOnLaunchAttack()
    {
        ;
        ;
    }
    public void BuffOnDisconnect()
    {
        SpellBuffAdd(Owner, Owner, "DisconnectTimer", 1, 1, 25000, NextBuffVars, BUFF_RENEW_EXISTING, BUFF_Internal, 0, true, false, false, default);
    }
}
